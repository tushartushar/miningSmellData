Implementation smell,Namespace,Class,File,Method,Description
Long Method,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The method has 292 lines of code.
Long Method,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,Validate,The method has 146 lines of code.
Long Method,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The method has 690 lines of code.
Long Method,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The method has 304 lines of code.
Long Method,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The method has 327 lines of code.
Long Method,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The method has 436 lines of code.
Long Method,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The method has 111 lines of code.
Long Method,Granados.PKI,EllipticCurve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,FindByName,The method has 103 lines of code.
Long Method,Granados.PKI,EllipticCurveFp,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,PointMul,The method has 128 lines of code.
Long Method,Granados.Poderosa.KeyFormat,OpenSSHPKCSFileLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\OpenSSHPrivateKeyLoader.cs,Load,The method has 175 lines of code.
Long Method,Granados.Poderosa.KeyFormat,OpenSSHFileLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\OpenSSHPrivateKeyLoader.cs,Load,The method has 193 lines of code.
Long Method,Granados.Poderosa.KeyFormat,PuTTYPrivateKeyLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\PuTTYPrivateKeyLoader.cs,Load,The method has 137 lines of code.
Long Method,Granados.Poderosa.SFTP,SFTPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SFTP\SFTPClient.cs,DownloadFile,The method has 123 lines of code.
Long Method,Granados.Poderosa.SFTP,SFTPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SFTP\SFTPClient.cs,UploadFile,The method has 123 lines of code.
Long Method,Granados.SSH2,SSH2ChannelBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Channel.cs,ProcessPacket,The method has 135 lines of code.
Long Method,Granados.SSH2,SSH2KeyExchanger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,GetDiffieHellmanPrime,The method has 117 lines of code.
Long Method,Granados.X11,X11ConnectionManager,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11ConnectionManager.cs,GetUntrustedAccessCookie,The method has 134 lines of code.
Long Method,Poderosa.Terminal,ISO2022CharDecoder,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\CharDecoder.cs,ProcessByte,The method has 126 lines of code.
Long Method,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The method has 113 lines of code.
Long Method,Poderosa.Terminal,XmlLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XmlLogger.cs,Write,The method has 100 lines of code.
Long Method,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessMouse,The method has 182 lines of code.
Long Method,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessAfterOSC,The method has 150 lines of code.
Long Method,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessSGR,The method has 110 lines of code.
Long Method,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessDECSET,The method has 104 lines of code.
Complex Method,Poderosa.Forms,MainWindowArgument,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\WindowManager.cs,ApplyToLoadedWindow,Cyclomatic complexity of the method is 11
Complex Method,Poderosa.Forms,TabBar,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\TabBar.cs,OnDragOver,Cyclomatic complexity of the method is 8
Complex Method,Poderosa.Commands,PositionDesignationSorter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CommandPositionEx.cs,BuildResult,Cyclomatic complexity of the method is 10
Complex Method,Poderosa.View,CharacterDocumentViewer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CharacterDocumentViewer.cs,InvalidateEx,Cyclomatic complexity of the method is 9
Complex Method,Poderosa.View,CharacterDocumentViewer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CharacterDocumentViewer.cs,OnPaint,Cyclomatic complexity of the method is 13
Complex Method,Poderosa.View,CharacterDocumentViewer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CharacterDocumentViewer.cs,BuildTransientDocument,Cyclomatic complexity of the method is 11
Complex Method,Poderosa.View,TextSelectionUIHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CharacterDocumentViewer.cs,OnMouseMove,Cyclomatic complexity of the method is 11
Complex Method,Poderosa.View,RenderProfile,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,CalcFontInternal,Cyclomatic complexity of the method is 11
Complex Method,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,Cyclomatic complexity of the method is 19
Complex Method,Poderosa.View,TextSelection,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\TextSelection.cs,ConvertSelectionPosition,Cyclomatic complexity of the method is 9
Complex Method,Poderosa.Document,GLine,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\GLine.cs,Render,Cyclomatic complexity of the method is 10
Complex Method,Poderosa.Document,GLine,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\GLine.cs,InvertCharacter,Cyclomatic complexity of the method is 10
Complex Method,Poderosa.Document,GLineManipulator,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\GLine.cs,PutChar,Cyclomatic complexity of the method is 11
Complex Method,Poderosa.Document,GLineManipulator,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\GLine.cs,Export,Cyclomatic complexity of the method is 8
Complex Method,Poderosa.Document,Unicode,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Unicode.cs,ToPrivate,Cyclomatic complexity of the method is 9
Complex Method,Poderosa.Document,Unicode,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Unicode.cs,GetCharGroup,Cyclomatic complexity of the method is 9
Complex Method,Poderosa.Plugins,PluginManager,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Plugin\Plugin.cs,Order,Cyclomatic complexity of the method is 12
Complex Method,Poderosa.Sessions,SessionManagerPlugin,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Session.cs,CloseMultipleDocuments,Cyclomatic complexity of the method is 9
Complex Method,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,Validate,Cyclomatic complexity of the method is 23
Complex Method,Poderosa.Sessions,ShortcutFileContent,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\ShortcutFile.cs,ParseV4,Cyclomatic complexity of the method is 8
Complex Method,Poderosa.Sessions,ShortcutFileContent,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\ShortcutFile.cs,ParseOldFormat,Cyclomatic complexity of the method is 18
Complex Method,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,ValidateContent,Cyclomatic complexity of the method is 9
Complex Method,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,ValidateContent,Cyclomatic complexity of the method is 13
Complex Method,Poderosa.Util,EnumListItem<T>,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Plugin\EnumDescription.cs,GetListItemsInternal,Cyclomatic complexity of the method is 9
Complex Method,Poderosa.Preferences,PreferenceFolder,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Preferences.cs,LoadFrom,Cyclomatic complexity of the method is 14
Complex Method,Granados.Crypto,CipherFactory,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,AlgorithmToSSH2Name,Cyclomatic complexity of the method is 9
Complex Method,Granados.Crypto,CipherFactory,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,SSH2NameToAlgorithm,Cyclomatic complexity of the method is 9
Complex Method,Granados.Crypto,Bcrypt,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,BcryptPbkdf,Cyclomatic complexity of the method is 8
Complex Method,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,Cyclomatic complexity of the method is 12
Complex Method,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,Test,Cyclomatic complexity of the method is 15
Complex Method,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,InitializeKey,Cyclomatic complexity of the method is 14
Complex Method,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,Cyclomatic complexity of the method is 28
Complex Method,Granados.SSH1,SSH1InteractiveSession,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Channel.cs,ProcessPacket,Cyclomatic complexity of the method is 9
Complex Method,Granados.SSH1,SSH1SubChannelBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Channel.cs,ProcessPacket,Cyclomatic complexity of the method is 10
Complex Method,Granados.SSH1,SSH1Connection,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Connection.cs,DoProcessPacket,Cyclomatic complexity of the method is 10
Complex Method,Granados.SSH1,SSH1KeyExchanger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Connection.cs,ReceiveServerKey,Cyclomatic complexity of the method is 9
Complex Method,Granados.SSH1,SSH1UserAuthentication,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Connection.cs,InterceptPacket,Cyclomatic complexity of the method is 14
Complex Method,Granados.SSH1,SSH1X11Forwarding,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Connection.cs,CheckX11OpenRequestPacket,Cyclomatic complexity of the method is 8
Complex Method,Granados.SSH1,SSH1Packetizer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Packet.cs,ConstructPacket,Cyclomatic complexity of the method is 9
Complex Method,Granados.PKI,DSAKeyPair,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DSA.cs,findRandomStrongPrime,Cyclomatic complexity of the method is 14
Complex Method,Granados.PKI,EllipticCurve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,TestPointMultiplication,Cyclomatic complexity of the method is 12
Complex Method,Granados.PKI,EllipticCurve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,TestPKV,Cyclomatic complexity of the method is 10
Complex Method,Granados.PKI,EllipticCurve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,TestKeyPair,Cyclomatic complexity of the method is 10
Complex Method,Granados.PKI,EllipticCurve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,TestSignatureVerification,Cyclomatic complexity of the method is 14
Complex Method,Granados.PKI,EllipticCurveFp,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,PointMul,Cyclomatic complexity of the method is 21
Complex Method,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,DecodePoint,Cyclomatic complexity of the method is 8
Complex Method,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,Test,Cyclomatic complexity of the method is 9
Complex Method,Granados.PKI,RSAUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\RSA.cs,StripPKCS1Pad,Cyclomatic complexity of the method is 11
Complex Method,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,Parse,Cyclomatic complexity of the method is 11
Complex Method,Granados.Mono.Math,Kernel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,Compare,Cyclomatic complexity of the method is 9
Complex Method,Granados.Mono.Math,Kernel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,gcd,Cyclomatic complexity of the method is 8
Complex Method,Granados.Mono.Math.Prime,PrimalityTests,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\PrimalityTests.cs,GetSPPRounds,Cyclomatic complexity of the method is 18
Complex Method,Granados.Mono.Math.Prime,PrimalityTests,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\PrimalityTests.cs,RabinMillerTest,Cyclomatic complexity of the method is 8
Complex Method,Granados.Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,Cyclomatic complexity of the method is 16
Complex Method,Granados.Poderosa.KeyFormat,BERReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\BERReader.cs,ReadTag,Cyclomatic complexity of the method is 10
Complex Method,Granados.Poderosa.KeyFormat,OpenSSHPKCSFileLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\OpenSSHPrivateKeyLoader.cs,Load,Cyclomatic complexity of the method is 31
Complex Method,Granados.Poderosa.KeyFormat,OpenSSHFileLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\OpenSSHPrivateKeyLoader.cs,Load,Cyclomatic complexity of the method is 36
Complex Method,Granados.Poderosa.KeyFormat,PuTTYPrivateKeyLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\PuTTYPrivateKeyLoader.cs,Load,Cyclomatic complexity of the method is 25
Complex Method,Granados.Poderosa.KeyFormat,SSHComPrivateKeyLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\SSHComPrivateKeyLoader.cs,Load,Cyclomatic complexity of the method is 15
Complex Method,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,UploadDirectory,Cyclomatic complexity of the method is 11
Complex Method,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,UploadFile,Cyclomatic complexity of the method is 10
Complex Method,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,Download,Cyclomatic complexity of the method is 16
Complex Method,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,CreateFile,Cyclomatic complexity of the method is 8
Complex Method,Granados.Poderosa.SFTP,SFTPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SFTP\SFTPClient.cs,DownloadFile,Cyclomatic complexity of the method is 11
Complex Method,Granados.Poderosa.SFTP,SFTPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SFTP\SFTPClient.cs,UploadFile,Cyclomatic complexity of the method is 11
Complex Method,Granados.Poderosa.SFTP,SFTPClientChannelEventHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SFTP\SFTPClient.cs,WaitResponse,Cyclomatic complexity of the method is 8
Complex Method,Granados.Poderosa.SFTP,SFTPStatusCode,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SFTP\SFTPStatusCodes.cs,ToString,Cyclomatic complexity of the method is 10
Complex Method,Granados.SSH2,SSH2ChannelBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Channel.cs,ProcessPacket,Cyclomatic complexity of the method is 17
Complex Method,Granados.SSH2,SSH2Connection,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,DoProcessPacket,Cyclomatic complexity of the method is 10
Complex Method,Granados.SSH2,SSH2KeyExchanger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,InterceptPacket,Cyclomatic complexity of the method is 12
Complex Method,Granados.SSH2,SSH2KeyExchanger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,VerifyHostKey,Cyclomatic complexity of the method is 8
Complex Method,Granados.SSH2,SSH2KeyExchanger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,GetDiffieHellmanPrime,Cyclomatic complexity of the method is 9
Complex Method,Granados.SSH2,SSH2UserAuthentication,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,InterceptPacket,Cyclomatic complexity of the method is 17
Complex Method,Granados.SSH2,SSH2UserAuthentication,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,DoKeyboardInteractiveUserAuthInput,Cyclomatic complexity of the method is 8
Complex Method,Granados.SSH2,SSH2Packetizer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Packet.cs,ConstructPacket,Cyclomatic complexity of the method is 11
Complex Method,Granados.SSH,SSHProtocolVersionReceiver,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSHConnection.cs,Verify,Cyclomatic complexity of the method is 8
Complex Method,Granados.X11,X11ChannelHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11ConnectionManager.cs,ProcessSetupMessage,Cyclomatic complexity of the method is 10
Complex Method,Poderosa.Boot,PoderosaStartup,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Plugin\PoderosaStartup.cs,CreatePoderosaApplication,Cyclomatic complexity of the method is 8
Complex Method,Poderosa.Protocols,Socks,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\socks.cs,ConnectBySocks5,Cyclomatic complexity of the method is 9
Complex Method,Poderosa.Protocols,Socks,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\socks.cs,GetSocks5ErrorMessage,Cyclomatic complexity of the method is 9
Complex Method,Poderosa.Protocols,TelnetNegotiator,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\Telnet.cs,ProcessOptionRequest,Cyclomatic complexity of the method is 11
Complex Method,Poderosa.Protocols,TelnetReceiver,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\TerminalConnection.cs,ProcessBuffer,Cyclomatic complexity of the method is 8
Complex Method,Poderosa.Protocols,SSHParameterSerializer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\TerminalParameterSerialize.cs,Serialize,Cyclomatic complexity of the method is 11
Complex Method,Poderosa.Terminal,ISO2022CharDecoder,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\CharDecoder.cs,ProcessByte,Cyclomatic complexity of the method is 27
Complex Method,Poderosa.Terminal,EncodingProfile,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Encoding.cs,Get,Cyclomatic complexity of the method is 10
Complex Method,Poderosa.Terminal,IntelliSenseContext,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\IntelliSense.cs,BuildCandidates,Cyclomatic complexity of the method is 9
Complex Method,Poderosa.Terminal,IntelliSenseWindow,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\IntelliSenseWindow.cs,DoChar,Cyclomatic complexity of the method is 8
Complex Method,Poderosa.Terminal,IntelliSenseWindow,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\IntelliSenseWindow.cs,CheckCharQueue,Cyclomatic complexity of the method is 8
Complex Method,Poderosa.Terminal,IntelliSenseBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\IntelliSenseWindow.cs,ProcessCmdKey,Cyclomatic complexity of the method is 9
Complex Method,Poderosa.Terminal,LogUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Logger.cs,CheckLogFileName,Cyclomatic complexity of the method is 8
Complex Method,Poderosa.Terminal,GenericShellScheme,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\ShellScheme.cs,FormatCommandList,Cyclomatic complexity of the method is 8
Complex Method,Poderosa.Terminal,AbstractTerminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalBase.cs,OnReception,Cyclomatic complexity of the method is 9
Complex Method,Poderosa.Terminal,EscapeSequenceTerminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalBase.cs,ProcessChar,Cyclomatic complexity of the method is 12
Complex Method,Poderosa.Terminal,EscapeSequenceTerminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalBase.cs,ProcessControlChar,Cyclomatic complexity of the method is 16
Complex Method,Poderosa.Terminal,TerminalControl,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,ProcessDialogKey,Cyclomatic complexity of the method is 9
Complex Method,Poderosa.Terminal,TerminalControl,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,ProcessScrollKey,Cyclomatic complexity of the method is 8
Complex Method,Poderosa.Terminal,MouseTrackingHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,OnMouseMove,Cyclomatic complexity of the method is 9
Complex Method,Poderosa.Terminal,TerminalDocument,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalDocument.cs,Remove,Cyclomatic complexity of the method is 9
Complex Method,Poderosa.Terminal,CustomKeySettings,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalEmulatorPlugin.cs,Reset,Cyclomatic complexity of the method is 9
Complex Method,Poderosa.Terminal,TerminalSettingsSerializer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalSettingsSerialize.cs,Serialize,Cyclomatic complexity of the method is 8
Complex Method,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessEscapeSequence,Cyclomatic complexity of the method is 12
Complex Method,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessAfterCSI,Cyclomatic complexity of the method is 15
Complex Method,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,Cyclomatic complexity of the method is 23
Complex Method,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,SequenceKeyData,Cyclomatic complexity of the method is 16
Complex Method,Poderosa.Terminal,XmlLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XmlLogger.cs,Write,Cyclomatic complexity of the method is 31
Complex Method,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessMouse,Cyclomatic complexity of the method is 36
Complex Method,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessEscapeSequence,Cyclomatic complexity of the method is 9
Complex Method,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessAfterCSI,Cyclomatic complexity of the method is 16
Complex Method,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessAfterOSC,Cyclomatic complexity of the method is 23
Complex Method,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessSGR,Cyclomatic complexity of the method is 21
Complex Method,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessDECSET,Cyclomatic complexity of the method is 28
Complex Method,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,SequenceKeyData,Cyclomatic complexity of the method is 11
Complex Method,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,XtermFunctionKey,Cyclomatic complexity of the method is 16
Complex Method,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ModifyCursorKey,Cyclomatic complexity of the method is 12
Complex Method,Poderosa.UI,HotKey,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\HotKey.cs,FormatKey,Cyclomatic complexity of the method is 15
Complex Method,Poderosa.UI,SplitMarkSupport,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneSplitter.cs,OnMouseMove,Cyclomatic complexity of the method is 10
Long Parameter List,Poderosa.Forms,Credits,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Credits.cs,DrawString,The method has 5 parameters. Parameters: g' text' font' br' y
Long Parameter List,Poderosa.Forms,MainWindowArgument,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\WindowManager.cs,MainWindowArgument,The method has 5 parameters. Parameters: location' state' split' toolbar' tabrowcount
Long Parameter List,Poderosa.Forms,TabBarButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\TabBar.cs,DrawImage,The method has 5 parameters. Parameters: g' state' image' x' y
Long Parameter List,Poderosa.Commands,BasicCommand,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\BasicCommands.cs,BasicCommand,The method has 6 parameters. Parameters: id' description' category' defaultkey' body' enabled
Long Parameter List,Poderosa.Commands,BasicCommand,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\BasicCommands.cs,BasicCommand,The method has 5 parameters. Parameters: id' description' category' defaultkey' body
Long Parameter List,Poderosa.Commands,GeneralCommandImpl,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CommandEx.cs,GeneralCommandImpl,The method has 6 parameters. Parameters: commandID' sr' descriptionTextID' commandCategory' exec' canExecute
Long Parameter List,Poderosa.Commands,GeneralCommandImpl,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CommandEx.cs,GeneralCommandImpl,The method has 5 parameters. Parameters: commandID' description' category' execute' canExecute
Long Parameter List,Poderosa.Commands,GeneralCommandImpl,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CommandEx.cs,GeneralCommandImpl,The method has 5 parameters. Parameters: commandID' sr' descriptionTextID' category' execute
Long Parameter List,Poderosa.View,CharacterDocumentViewer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CharacterDocumentViewer.cs,DrawBackgroundImage_Scaled,The method has 5 parameters. Parameters: g' img' clip' fitWidth' fitHeight
Long Parameter List,Poderosa.View,TextSelection,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\TextSelection.cs,StartSelection,The method has 5 parameters. Parameters: line' position' type' x' y
Long Parameter List,Poderosa.Document,GLine,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\GLine.cs,Render,The method has 5 parameters. Parameters: hdc' prof' baseBackColor' x' y
Long Parameter List,Poderosa.Document,GLine,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\GLine.cs,DrawUnderline,The method has 5 parameters. Parameters: hdc' col' x' y' length
Long Parameter List,Poderosa.Document,TextDecoration,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\TextDecoration.cs,TextDecoration,The method has 6 parameters. Parameters: ctbg' bg' cttxt' txt' underline' bold
Long Parameter List,Poderosa.Preferences,PreferenceFolderArray,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Preferences.cs,PreferenceFolderArray,The method has 5 parameters. Parameters: master' parent' id' index' template
Long Parameter List,Poderosa.Preferences,TypedPreferenceItem<T>,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Preferences.cs,TypedPreferenceItem,The method has 6 parameters. Parameters: parent' id' index' initialValue' validator' adapter
Long Parameter List,Poderosa.Preferences,BoolPreferenceItem,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Preferences.cs,BoolPreferenceItem,The method has 5 parameters. Parameters: parent' id' index' initialValue' validator
Long Parameter List,Poderosa.Preferences,IntPreferenceItem,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Preferences.cs,IntPreferenceItem,The method has 5 parameters. Parameters: parent' id' index' initialValue' validator
Long Parameter List,Poderosa.Preferences,StringPreferenceItem,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Preferences.cs,StringPreferenceItem,The method has 5 parameters. Parameters: parent' id' index' initialValue' validator
Long Parameter List,Poderosa,Win32,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Plugin\Win32.cs,TextOut,The method has 5 parameters. Parameters: hdc' x' y' text' length
Long Parameter List,Poderosa,Win32,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Plugin\Win32.cs,ExtTextOut,The method has 8 parameters. Parameters: hdc' x' y' options' lprc' text' length' lpdx
Long Parameter List,Poderosa,Win32,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Plugin\Win32.cs,EnumFontFamiliesEx,The method has 5 parameters. Parameters: hdc' lpLogfont' lpEnumFontFamExProc' lParam' dwFlags
Long Parameter List,Granados.AgentForwarding,OpenSSHAgentForwardingMessageHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AgentForwarding.cs,SSH1IRSAChallenge,The method has 5 parameters. Parameters: e' n' encryptedChallenge' sessionId' responseType
Long Parameter List,Granados.Crypto,Cipher,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,Encrypt,The method has 5 parameters. Parameters: data' offset' len' result' result_offset
Long Parameter List,Granados.Crypto,Cipher,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,Decrypt,The method has 5 parameters. Parameters: data' offset' len' result' result_offset
Long Parameter List,Granados.Crypto,CipherUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\CipherUtil.cs,BlockXor,The method has 5 parameters. Parameters: src' s_offset' len' dest' d_offset
Long Parameter List,Granados.Crypto,CipherUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\CipherUtil.cs,memcmp,The method has 5 parameters. Parameters: d1' o1' d2' o2' len
Long Parameter List,Granados.Crypto.SSH1,BlowfishCipher1,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,Encrypt,The method has 5 parameters. Parameters: data' offset' len' result' ro
Long Parameter List,Granados.Crypto.SSH1,BlowfishCipher1,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,Decrypt,The method has 5 parameters. Parameters: data' offset' len' result' ro
Long Parameter List,Granados.Crypto.SSH1,TripleDESCipher1,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,Encrypt,The method has 5 parameters. Parameters: data' offset' len' result' ro
Long Parameter List,Granados.Crypto.SSH1,TripleDESCipher1,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,Decrypt,The method has 5 parameters. Parameters: data' offset' len' result' ro
Long Parameter List,Granados.Crypto.SSH2,BlowfishCipher2,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,Encrypt,The method has 5 parameters. Parameters: data' offset' len' result' ro
Long Parameter List,Granados.Crypto.SSH2,BlowfishCipher2,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,Decrypt,The method has 5 parameters. Parameters: data' offset' len' result' ro
Long Parameter List,Granados.Crypto.SSH2,TripleDESCipher2,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,Encrypt,The method has 5 parameters. Parameters: data' offset' len' result' ro
Long Parameter List,Granados.Crypto.SSH2,TripleDESCipher2,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,Decrypt,The method has 5 parameters. Parameters: data' offset' len' result' ro
Long Parameter List,Granados.Crypto.SSH2,RijindaelCipher2,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,Encrypt,The method has 5 parameters. Parameters: data' offset' len' result' ro
Long Parameter List,Granados.Crypto.SSH2,RijindaelCipher2,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,Decrypt,The method has 5 parameters. Parameters: data' offset' len' result' ro
Long Parameter List,Granados.Util,SSHUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSHUtil.cs,ByteArrayEqual,The method has 5 parameters. Parameters: d1' o1' d2' o2' len
Long Parameter List,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,EncryptSSH1Style,The method has 5 parameters. Parameters: src' srcOff' len' dest' destOff
Long Parameter List,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,DecryptSSH1Style,The method has 5 parameters. Parameters: src' srcOff' len' dest' destOff
Long Parameter List,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,EncryptCBC,The method has 5 parameters. Parameters: input' inputOffset' inputLen' output' outputOffset
Long Parameter List,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,DecryptCBC,The method has 5 parameters. Parameters: input' inputOffset' inputLen' output' outputOffset
Long Parameter List,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,EncryptCBC,The method has 5 parameters. Parameters: input' inputOffset' inputLen' output' outputOffset
Long Parameter List,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,DecryptCBC,The method has 5 parameters. Parameters: input' inputOffset' inputLen' output' outputOffset
Long Parameter List,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,encryptCBC,The method has 5 parameters. Parameters: input' inputOffset' inputLen' output' outputOffset
Long Parameter List,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,decryptCBC,The method has 5 parameters. Parameters: input' inputOffset' inputLen' output' outputOffset
Long Parameter List,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,encryptCTR,The method has 5 parameters. Parameters: input' inputOffset' inputLen' output' outputOffset
Long Parameter List,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,decryptCTR,The method has 5 parameters. Parameters: input' inputOffset' inputLen' output' outputOffset
Long Parameter List,Granados,SSHConnectionParameter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ConnectionParameter.cs,SSHConnectionParameter,The method has 6 parameters. Parameters: hostName' portNumber' protocol' authType' userName' password
Long Parameter List,Granados,ISSHConnection,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSHConnection.cs,ForwardPort,The method has 5 parameters. Parameters: handlerCreator' remoteHost' remotePort' originatorIp' originatorPort
Long Parameter List,Granados.SSH1,SSH1ChannelBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Channel.cs,SSH1ChannelBase,The method has 6 parameters. Parameters: packetSender' protocolEventManager' localChannel' remoteChannel' channelType' channelTypeString
Long Parameter List,Granados.SSH1,SSH1InteractiveSession,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Channel.cs,SSH1InteractiveSession,The method has 5 parameters. Parameters: packetSender' protocolEventManager' localChannel' channelType' channelTypeString
Long Parameter List,Granados.SSH1,SSH1SubChannelBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Channel.cs,SSH1SubChannelBase,The method has 6 parameters. Parameters: packetSender' protocolEventManager' localChannel' remoteChannel' channelType' channelTypeString
Long Parameter List,Granados.SSH1,SSH1SubChannelBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Channel.cs,SSH1SubChannelBase,The method has 5 parameters. Parameters: packetSender' protocolEventManager' localChannel' channelType' channelTypeString
Long Parameter List,Granados.SSH1,SSH1LocalPortForwardingChannel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Channel.cs,SSH1LocalPortForwardingChannel,The method has 7 parameters. Parameters: packetSender' protocolEventManager' localChannel' remoteHost' remotePort' originatorIp' originatorPort
Long Parameter List,Granados.SSH1,SSH1Connection,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Connection.cs,SSH1Connection,The method has 6 parameters. Parameters: socket' param' serverVersion' clientVersion' connectionEventHandlerCreator' protocolEventLoggerCreator
Long Parameter List,Granados.SSH1,SSH1Connection,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Connection.cs,ForwardPort,The method has 5 parameters. Parameters: handlerCreator' remoteHost' remotePort' originatorIp' originatorPort
Long Parameter List,Granados.SSH1,SSH1KeyExchanger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Connection.cs,SSH1KeyExchanger,The method has 6 parameters. Parameters: connection' syncHandler' param' info' updateClientKey' updateServerKey
Long Parameter List,Granados.SSH1,SSH1RemotePortForwarding,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Connection.cs,ListenForwardedPort,The method has 6 parameters. Parameters: requestHandler' createChannel' registerChannel' portNumberToBind' hostToConnect' portNumberToConnect
Long Parameter List,Granados.SSH1,SSH1RemotePortForwarding,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Connection.cs,ListenForwardedPortCore,The method has 6 parameters. Parameters: requestHandler' createChannel' registerChannel' portNumberToBind' hostToConnect' portNumberToConnect
Long Parameter List,Granados.SSH1,SSH1X11Forwarding,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Connection.cs,SSH1X11Forwarding,The method has 5 parameters. Parameters: syncHandler' connectionInfo' protocolEventManager' createChannel' registerChannel
Long Parameter List,Granados.PKI,DSAKeyPair,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DSA.cs,DSAKeyPair,The method has 5 parameters. Parameters: p' g' q' y' x
Long Parameter List,Granados.PKI,EllipticCurveFp,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,EllipticCurveFp,The method has 8 parameters. Parameters: algorithm' curveName' p' a' b' G' n' h
Long Parameter List,Granados.PKI,RSAKeyPair,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\RSA.cs,RSAKeyPair,The method has 6 parameters. Parameters: e' d' n' u' p' q
Long Parameter List,Granados.Mono.Math,Kernel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,Multiply,The method has 8 parameters. Parameters: x' xOffset' xLen' y' yOffset' yLen' d' dOffset
Long Parameter List,Granados.Mono.Math,Kernel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,MultiplyMod2p32pmod,The method has 9 parameters. Parameters: x' xOffset' xLen' y' yOffest' yLen' d' dOffset' mod
Long Parameter List,Granados.Poderosa.KeyFormat,ISSH1PrivateKeyLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\ISSH1PrivateKeyLoader.cs,Load,The method has 8 parameters. Parameters: passphrase' modulus' publicExponent' privateExponent' primeP' primeQ' crtCoefficient' comment
Long Parameter List,Granados.Poderosa.KeyFormat,PrivateKeyLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\PrivateKeyLoader.cs,LoadSSH1PrivateKey,The method has 8 parameters. Parameters: passphrase' modulus' publicExponent' privateExponent' primeP' primeQ' crtCoefficient' comment
Long Parameter List,Granados.Poderosa.KeyFormat,PuTTYPrivateKeyLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\PuTTYPrivateKeyLoader.cs,Verify,The method has 9 parameters. Parameters: version' privateMac' privateHash' passphrase' keyTypeName' encryptionName' comment' publicBlob' privateBlob
Long Parameter List,Granados.Poderosa.KeyFormat,SSH1PrivateKeyLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\SSH1PrivateKeyLoader.cs,Load,The method has 8 parameters. Parameters: passphrase' modulus' publicExponent' privateExponent' primeP' primeQ' crtCoefficient' comment
Long Parameter List,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,Upload,The method has 6 parameters. Parameters: localPath' remotePath' recursive' preserveTime' cancellation' progressDelegate
Long Parameter List,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,UploadDirectory,The method has 5 parameters. Parameters: fullPath' stream' preserveTime' cancellation' progressDelegate
Long Parameter List,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,UploadFile,The method has 5 parameters. Parameters: fullPath' stream' preserveTime' cancellation' progressDelegate
Long Parameter List,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,Download,The method has 6 parameters. Parameters: remotePath' localPath' recursive' preserveTime' cancellation' progressDelegate
Long Parameter List,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,CreateDirectory,The method has 5 parameters. Parameters: stream' directoryPath' modTime' cancellation' progressDelegate
Long Parameter List,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,CreateFile,The method has 6 parameters. Parameters: stream' filePath' entry' modTime' cancellation' progressDelegate
Long Parameter List,Granados.Poderosa.SFTP,SFTPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SFTP\SFTPClient.cs,ReadFile,The method has 5 parameters. Parameters: requestId' handle' offset' length' buffer
Long Parameter List,Granados.Poderosa.SFTP,SFTPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SFTP\SFTPClient.cs,WriteFile,The method has 5 parameters. Parameters: requestId' handle' offset' buff' length
Long Parameter List,Granados.Poderosa.SFTP,SFTPFileAttributes,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SFTP\SFTPFileAttributes.cs,SFTPFileAttributes,The method has 6 parameters. Parameters: fileSize' uid' gid' permissions' atime' mtime
Long Parameter List,Granados.SSH2,SSH2ChannelBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Channel.cs,SSH2ChannelBase,The method has 9 parameters. Parameters: packetSender' param' protocolEventManager' localChannel' remoteChannel' channelType' channelTypeString' serverWindowSize' serverMaxPacketSize
Long Parameter List,Granados.SSH2,SSH2ChannelBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Channel.cs,SSH2ChannelBase,The method has 6 parameters. Parameters: packetSender' param' protocolEventManager' localChannel' channelType' channelTypeString
Long Parameter List,Granados.SSH2,SSH2ShellChannel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Channel.cs,SSH2ShellChannel,The method has 5 parameters. Parameters: packetSender' param' protocolEventManager' localChannel' x11ConnectionManager
Long Parameter List,Granados.SSH2,SSH2ExecChannel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Channel.cs,SSH2ExecChannel,The method has 5 parameters. Parameters: packetSender' param' protocolEventManager' localChannel' command
Long Parameter List,Granados.SSH2,SSH2SubsystemChannel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Channel.cs,SSH2SubsystemChannel,The method has 5 parameters. Parameters: packetSender' param' protocolEventManager' localChannel' subsystemName
Long Parameter List,Granados.SSH2,SSH2LocalPortForwardingChannel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Channel.cs,SSH2LocalPortForwardingChannel,The method has 8 parameters. Parameters: packetSender' param' protocolEventManager' localChannel' remoteHost' remotePort' originatorIp' originatorPort
Long Parameter List,Granados.SSH2,SSH2RemotePortForwardingChannel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Channel.cs,SSH2RemotePortForwardingChannel,The method has 7 parameters. Parameters: packetSender' param' protocolEventManager' localChannel' remoteChannel' serverWindowSize' serverMaxPacketSize
Long Parameter List,Granados.SSH2,SSH2OpenSSHAgentForwardingChannel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Channel.cs,SSH2OpenSSHAgentForwardingChannel,The method has 7 parameters. Parameters: packetSender' param' protocolEventManager' localChannel' remoteChannel' serverWindowSize' serverMaxPacketSize
Long Parameter List,Granados.SSH2,SSH2X11ForwardingChannel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Channel.cs,SSH2X11ForwardingChannel,The method has 7 parameters. Parameters: packetSender' param' protocolEventManager' localChannel' remoteChannel' serverWindowSize' serverMaxPacketSize
Long Parameter List,Granados.SSH2,SSH2Connection,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,SSH2Connection,The method has 6 parameters. Parameters: socket' param' serverVersion' clientVersion' connectionEventHandlerCreator' protocolEventLoggerCreator
Long Parameter List,Granados.SSH2,SSH2Connection,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,ForwardPort,The method has 5 parameters. Parameters: handlerCreator' remoteHost' remotePort' originatorIp' originatorPort
Long Parameter List,Granados.SSH2,SSH2Connection,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,UpdateKey,The method has 5 parameters. Parameters: sessionID' cipherServer' cipherClient' macServer' macClient
Long Parameter List,Granados.SSH2,SSH2KeyExchanger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,SSH2KeyExchanger,The method has 5 parameters. Parameters: syncHandler' param' protocolEventManager' info' updateKey
Long Parameter List,Granados.SSH2,SSH2KeyExchanger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,DeriveKey,The method has 5 parameters. Parameters: k' h' letter' length' hashAlgorithm
Long Parameter List,Granados.SSH2,SSH2UserAuthentication,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,SSH2UserAuthentication,The method has 5 parameters. Parameters: connection' param' protocolEventManager' syncHandler' sessionID
Long Parameter List,Granados.SSH2,SSH2RemotePortForwarding,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,ListenForwardedPort,The method has 5 parameters. Parameters: requestHandler' createChannel' registerChannel' addressToBind' portNumberToBind
Long Parameter List,Granados.SSH2,SSH2RemotePortForwarding,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,ListenForwardedPortCore,The method has 6 parameters. Parameters: requestHandler' createChannel' registerChannel' addressToBind' portNumberToBind' portNumberBound
Long Parameter List,Granados.SSH2,SSH2OpenSSHAgentForwarding,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,SSH2OpenSSHAgentForwarding,The method has 5 parameters. Parameters: syncHandler' authKeyProvider' protocolEventManager' createChannel' registerChannel
Long Parameter List,Granados.SSH2,SSH2X11Forwarding,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,SSH2X11Forwarding,The method has 5 parameters. Parameters: syncHandler' protocolEventManager' x11ConnectionManager' createChannel' registerChannel
Long Parameter List,Granados.X11,X11ChannelHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11ConnectionManager.cs,X11ChannelHandler,The method has 6 parameters. Parameters: channel' x11sock' spoofedAuthProtocolName' spoofedAuthCookie' authProtocolName' authCookie
Long Parameter List,Granados.X11,AbstractX11Socket,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Socket.cs,SendBytes,The method has 5 parameters. Parameters: sock' buffer' offset' length' timeoutMillisec
Long Parameter List,Granados.X11,AbstractX11Socket,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Socket.cs,ReceiveBytes,The method has 5 parameters. Parameters: sock' buffer' offset' length' timeoutMillisec
Long Parameter List,Granados.X11,XauthorityEntry,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Utils.cs,XauthorityEntry,The method has 5 parameters. Parameters: family' address' number' name' data
Long Parameter List,Poderosa.Boot,PoderosaStartupContext,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Plugin\PoderosaStartup.cs,PoderosaStartupContext,The method has 5 parameters. Parameters: pluginManifest' home_directory' profile_home' args' open_file
Long Parameter List,Poderosa.Boot,PoderosaStartupContext,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Plugin\PoderosaStartup.cs,PoderosaStartupContext,The method has 5 parameters. Parameters: pluginManifest' home_directory' preference' args' open_file
Long Parameter List,Poderosa.Terminal,CJKByteProcessor,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\CharDecoder.cs,CJKByteProcessor,The method has 5 parameters. Parameters: processor' buffer' encoding' leadingBytes' trailingBytes
Long Parameter List,Poderosa.Terminal,IntelliSenseContext,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\IntelliSense.cs,Init,The method has 5 parameters. Parameters: terminal' scheme' current_input' mode' append_char
Long Parameter List,Poderosa.Terminal,PromptRecognizer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\PromptRecognizer.cs,DeterminePromptLine,The method has 5 parameters. Parameters: line' limitLineID' limitColumn' prompt' command
Long Parameter List,Poderosa.Terminal,AbstractTerminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalBase.cs,ProcessMouse,The method has 5 parameters. Parameters: action' button' modifierKeys' row' col
Long Parameter List,Poderosa.Terminal,TerminalCommand,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalCommands.cs,TerminalCommand,The method has 5 parameters. Parameters: id' description' category' body' enabled
Long Parameter List,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessMouse,The method has 5 parameters. Parameters: action' button' modKeys' row' col
Long Parameter List,Poderosa.UI,GButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GButton.cs,DrawImage,The method has 5 parameters. Parameters: g' state' image' x' y
Long Parameter List,Poderosa.UI,GButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GButton.cs,DrawText,The method has 5 parameters. Parameters: g' text' state' x' y
Long Parameter List,Poderosa.UI,DivisionList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneDivision.cs,DivisionList,The method has 7 parameters. Parameters: division' parent' direction' pane1' pane2' host_size' host_dock
Long Parameter List,Poderosa.Util.Drawing,DrawUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\DrawUtil.cs,DrawRoundRect,The method has 6 parameters. Parameters: g' x' y' width' height' colors
Long Parameter List,Poderosa.Util.Drawing,DrawUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\DrawUtil.cs,DrawRoundCorner,The method has 6 parameters. Parameters: hdc' bx' by' dx' dy' colors
Long Parameter List,Poderosa.Util.Drawing,DrawUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\DrawUtil.cs,FillHorizontalGradation,The method has 7 parameters. Parameters: g' x' y' width' height' top_color' bottom_color
Long Parameter List,Poderosa.Util.Drawing,DrawUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\DrawUtil.cs,DrawOmittedMark,The method has 5 parameters. Parameters: g' x' y' color' is_bold
Long Identifier,Poderosa.View,CharacterDocumentViewer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CharacterDocumentViewer.cs,,The length of the parameter _enableAutoScrollBarAdjustment is 30.
Long Identifier,Poderosa.Sessions,SessionManagerPlugin,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Session.cs,,The length of the parameter _activeDocumentChangeListeners is 30.
Long Identifier,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,,The length of the parameter _x11UseCygwinDomainSocketCheckBox is 33.
Long Identifier,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,,The length of the parameter _x11CygwinX11UnixFolderExampleLabel is 35.
Long Identifier,Poderosa.Sessions,TerminalSessionOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TerminalSessionOptions.cs,,The length of the parameter _telnetSSHLoginDialogUISupportTypeName is 38.
Long Identifier,Poderosa.Sessions,TerminalSessionOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TerminalSessionOptions.cs,,The length of the parameter _cygwinLoginDialogUISupportTypeName is 35.
Long Identifier,Poderosa.Sessions,TerminalSessionsPlugin,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TerminalSessionPlugin.cs,,The length of the parameter TERMINAL_CONNECTION_FACTORY_ID is 30.
Long Identifier,Poderosa.Sessions,TerminalSessionsPlugin,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TerminalSessionPlugin.cs,,The length of the parameter _terminalSessionsOptionSupplier is 31.
Long Identifier,Granados.SSH2,SSH2ChannelOpenFailureCode,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Util.cs,,The length of the parameter SSH_OPEN_ADMINISTRATIVELY_PROHIBITED is 36.
Long Identifier,Poderosa.Protocols,ProtocolOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\ProtocolOptions.cs,,The length of the parameter _hostKeyCheckerVerifierTypeName is 31.
Long Identifier,Poderosa.Protocols,SSHSocket,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\SSHSocket.cs,,The length of the parameter _keyboardInteractiveAuthHanlder is 31.
Long Identifier,Poderosa.Terminal,TerminalOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Options.cs,,The length of the parameter _enableComplementForNewConnections is 34.
Long Identifier,Poderosa.Terminal,PromptRecognizerPreferences,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\PromptRecognizer.cs,,The length of the parameter DEFAULT_PROMPT_SEARCH_MAX_LINES is 31.
Long Identifier,Poderosa.Terminal,TerminalCommand,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalCommands.cs,,The length of the parameter _doesExistCharacterDocumentViewer is 33.
Long Identifier,Poderosa.Terminal,TerminalEmulatorConstants,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalEmulatorPlugin.cs,,The length of the parameter TERMINAL_CONTEXT_MENU_EXTENSIONPOINT is 36.
Long Identifier,Poderosa.Terminal,TerminalEmulatorConstants,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalEmulatorPlugin.cs,,The length of the parameter DOCUMENT_CONTEXT_MENU_EXTENSIONPOINT is 36.
Long Identifier,Poderosa.Terminal,TerminalEmulatorConstants,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalEmulatorPlugin.cs,,The length of the parameter TERMINALSPECIAL_EXTENSIONPOINT is 30.
Long Identifier,Poderosa.Terminal,TerminalEmulatorConstants,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalEmulatorPlugin.cs,,The length of the parameter INTELLISENSE_CANDIDATE_EXTENSIONPOINT is 37.
Long Identifier,Poderosa.Terminal,TerminalEmulatorConstants,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalEmulatorPlugin.cs,,The length of the parameter LOG_FILENAME_FORMATTER_EXTENSIONPOINT is 37.
Long Identifier,Poderosa.Terminal,TerminalEmulatorConstants,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalEmulatorPlugin.cs,,The length of the parameter DYNAMIC_CAPTION_FORMATTER_EXTENSIONPOINT is 40.
Long Identifier,Poderosa.Terminal,TerminalSettings,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalSettings.cs,,The length of the parameter _enabledCharTriggerIntelliSense is 31.
Long Statement,Poderosa.Forms,AboutBoxUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\AboutBoxEx.cs,DefineExtensionPoint,The length of the statement  "            IExtensionPoint pt = pm.CreateExtensionPoint("org.poderosa.window.aboutbox"' typeof(IPoderosaAboutBoxFactory)' WindowManagerPlugin.Instance); " is 141.
Long Statement,Poderosa.Forms,AboutBoxUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\AboutBoxEx.cs,GetCurrentAboutBoxFactory,The length of the statement  "            IPoderosaAboutBoxFactory[] factories = (IPoderosaAboutBoxFactory[])WindowManagerPlugin.Instance.PoderosaWorld.PluginManager.FindExtensionPoint("org.poderosa.window.aboutbox").GetExtensions(); " is 191.
Long Statement,Poderosa.Forms,AboutBoxUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\AboutBoxEx.cs,ProcessDialogChar,The length of the statement  "            IPoderosaAboutBoxFactory[] factories = (IPoderosaAboutBoxFactory[])WindowManagerPlugin.Instance.PoderosaWorld.PluginManager.FindExtensionPoint("org.poderosa.window.aboutbox").GetExtensions(); " is 191.
Long Statement,Poderosa.Forms,Credits,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Credits.cs,OnPaintCredit,The length of the statement  "                DrawString(g' WindowManagerPlugin.Instance.WindowPreference.OriginalPreference.Language == Language.English ? e._en_name : e._ja_name' _mainPanel.Font' br' y); " is 159.
Long Statement,Poderosa.Forms,ExtensionPointList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\ExtensionPointList.cs,FillList,The length of the statement  "            IPluginInspector pi = (IPluginInspector)WindowManagerPlugin.Instance.PoderosaWorld.PluginManager.GetAdapter(typeof(IPluginInspector)); " is 134.
Long Statement,Poderosa.Forms,ExtensionPointList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\ExtensionPointList.cs,InitializeComponent,The length of the statement  "            this._list.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 138.
Long Statement,Poderosa.Forms,MainWindow,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\MainWindow.cs,InitContent,The length of the statement  "            IExtensionPoint creator_ext = WindowManagerPlugin.Instance.PoderosaWorld.PluginManager.FindExtensionPoint(WindowManagerConstants.MAINWINDOWCONTENT_ID); " is 151.
Long Statement,Poderosa.Forms,MainWindow,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\MainWindow.cs,InitContent,The length of the statement  "            this.Controls.Add(_statusBar); //こうでなく、_toolStripContainer.BottomToolStripPanelに_statusBarを追加してもよさそうだが、そうするとツールバー項目がステータスバーの上下に挿入可能になってしまう " is 138.
Long Statement,Poderosa.Forms,FixedShortcutKeyHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\MainWindow.cs,OnKeyProcess,The length of the statement  "            else if (body == Keys.Tab && (modifier == Keys.Control || modifier == (Keys.Control | Keys.Shift))) { //Ctrl+Tab' Ctrl+Shift+Tab " is 128.
Long Statement,Poderosa.Forms,FixedShortcutKeyHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\MainWindow.cs,OnKeyProcess,The length of the statement  "                    SessionManagerPlugin.Instance.ActivateDocument(_window.DocumentTabFeature.GetAtOrNull(index)' ActivateReason.InternalAction); " is 125.
Long Statement,Poderosa.Forms,MenuUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\MenuUtil.cs,OnClickMenu,The length of the statement  "                    CommandManagerPlugin.Instance.Execute(item.AssociatedCommand' tag.CommandTarget' ((IPoderosaMenuItemWithArgs)item).AdditionalArgs); " is 131.
Long Statement,Poderosa.Forms,PluginList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\PluginList.cs,FillList,The length of the statement  "            IPluginInspector pi = (IPluginInspector)WindowManagerPlugin.Instance.PoderosaWorld.PluginManager.GetAdapter(typeof(IPluginInspector)); " is 134.
Long Statement,Poderosa.Forms,PluginList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\PluginList.cs,InitializeComponent,The length of the statement  "            this._list.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 138.
Long Statement,Poderosa.Forms,ViewFactoryManager,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\SplittableView.cs,LateCheck,The length of the statement  "            IExtensionPoint fs = WindowManagerPlugin.Instance.PoderosaWorld.PluginManager.FindExtensionPoint(WindowManagerConstants.VIEW_FACTORY_ID); " is 137.
Long Statement,Poderosa.Forms,SplittableViewManager,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\SplittableView.cs,ApplySplitInfo,The length of the statement  "                        sm.AttachDocumentAndView(documents[i]' sm.FindDocumentHost(documents[i]).LastAttachedView); //LastAttachedViewはこの上のループで適用済み " is 123.
Long Statement,Poderosa.Forms,SplittableViewManager,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\SplittableView.cs,FireOnSplit,The length of the statement  "            foreach (IViewFormatEventHandler eh in WindowManagerPlugin.Instance.ViewFactoryManager.ViewFormatChangeHandler.GetExtensions()) { " is 129.
Long Statement,Poderosa.Forms,SplittableViewManager,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\SplittableView.cs,FireOnUnify,The length of the statement  "            foreach (IViewFormatEventHandler eh in WindowManagerPlugin.Instance.ViewFactoryManager.ViewFormatChangeHandler.GetExtensions()) { " is 129.
Long Statement,Poderosa.Forms,SplittableViewPane,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\SplittableView.cs,AssureViewClass,The length of the statement  "            IContentReplaceableViewSite site = (IContentReplaceableViewSite)_content.GetAdapter(typeof(IContentReplaceableViewSite)); " is 121.
Long Statement,Poderosa.Forms,SplittableViewPane,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\SplittableView.cs,AssureViewClass,The length of the statement  "            Debug.WriteLineIf(DebugOpt.ViewManagement' String.Format("Replace ViewClass {0} => {1}"' _content.GetType().Name' viewclass.Name)); " is 131.
Long Statement,Poderosa.Forms,SplittableViewPane,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\SplittableView.cs,AssureEmptyViewClass,The length of the statement  "            IViewManagerFactory[] vm = (IViewManagerFactory[])WindowManagerPlugin.Instance.PoderosaWorld.PluginManager.FindExtensionPoint(WindowManagerConstants.MAINWINDOWCONTENT_ID).GetExtensions(); " is 187.
Long Statement,Poderosa.Forms,PoderosaToolStripContainer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\ToolBar.cs,CreateInternal,The length of the statement  "            IToolBarComponent[] components = (IToolBarComponent[])WindowManagerPlugin.Instance.PoderosaWorld.PluginManager.FindExtensionPoint(WindowManagerConstants.TOOLBARCOMPONENT_ID).GetExtensions(); " is 190.
Long Statement,Poderosa.Forms,PoderosaToolStripContainer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\ToolBar.cs,CreateToolBarComponent,The length of the statement  "            Debug.WriteLineIf(DebugOpt.BuildToolBar' "toolbar " + comp.GetType().Name + " location=" + _currentToolStrip.Location.ToString()); " is 130.
Long Statement,Poderosa.Forms,WindowManagerPlugin,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\WindowManager.cs,RunExtension,The length of the statement  "                _poderosaWorld.Culture.SetCulture(CoreServicePreferenceAdapter.LangToCulture(_preferences.OriginalPreference.Language)); " is 120.
Long Statement,Poderosa.Forms,WindowManagerPlugin,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\WindowManager.cs,BypassDragEnter,The length of the statement  "                IFileDropHandler[] hs = (IFileDropHandler[])_poderosaWorld.PluginManager.FindExtensionPoint(WindowManagerConstants.FILEDROPHANDLER_ID).GetExtensions(); " is 151.
Long Statement,Poderosa.Forms,WindowManagerPlugin,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\WindowManager.cs,BypassDragDrop,The length of the statement  "                IFileDropHandler[] hs = (IFileDropHandler[])_poderosaWorld.PluginManager.FindExtensionPoint(WindowManagerConstants.FILEDROPHANDLER_ID).GetExtensions(); " is 151.
Long Statement,Poderosa.Forms,WindowManagerPlugin,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\WindowManager.cs,TurningOpenFile,The length of the statement  "            IFileDropHandler[] hs = (IFileDropHandler[])_poderosaWorld.PluginManager.FindExtensionPoint(WindowManagerConstants.FILEDROPHANDLER_ID).GetExtensions(); " is 151.
Long Statement,Poderosa.Forms,WindowManagerPlugin,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\WindowManager.cs,NotifyMainWindowLoaded,The length of the statement  "            IMainWindowEventHandler[] hs = (IMainWindowEventHandler[])_poderosaWorld.PluginManager.FindExtensionPoint(WindowManagerConstants.MAINWINDOWEVENTHANDLER_ID).GetExtensions(); " is 172.
Long Statement,Poderosa.Forms,WindowManagerPlugin,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\WindowManager.cs,NotifyMainWindowUnloaded,The length of the statement  "            IMainWindowEventHandler[] hs = (IMainWindowEventHandler[])_poderosaWorld.PluginManager.FindExtensionPoint(WindowManagerConstants.MAINWINDOWEVENTHANDLER_ID).GetExtensions(); " is 172.
Long Statement,Poderosa.Forms,CoreServicePreferenceAdapter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\WindowPreference.cs,DefineItems,The length of the statement  "            _caretInterval = builder.DefineIntValue(_folder' "caretInterval"' 300' PreferenceValidatorUtil.PositiveIntegerValidator); " is 121.
Long Statement,Poderosa.Forms,CoreServicePreferenceAdapter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\WindowPreference.cs,DefineItems,The length of the statement  "            _splitLimitCount = builder.DefineIntValue(_folder' "splitLimitCount"' 16' PreferenceValidatorUtil.IntRangeValidator(1' 50)); " is 124.
Long Statement,Poderosa.Forms,WindowPreference,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\WindowPreference.cs,FormatWindowPreference,The length of the statement  "            _windowArrayPreference.ConvertItem(element' _windowPositionPreference).AsString().Value = String.Format("({0}{1}'{2}'{3}'{4})"' " is 127.
Long Statement,Poderosa.Forms,TabBarDrawing,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\TabBar.cs,CreateNormalStyle,The length of the statement  "            t._roundRectColors.lightlight_color = DrawUtil.MergeColor(t._roundRectColors.border_color' t._roundRectColors.outer_color); " is 123.
Long Statement,Poderosa.Forms,TabBarDrawing,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\TabBar.cs,CreateNormalStyle,The length of the statement  "            t._roundRectColors.light_color = DrawUtil.MergeColor(t._roundRectColors.lightlight_color' t._roundRectColors.border_color); " is 123.
Long Statement,Poderosa.Forms,TabBarDrawing,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\TabBar.cs,CreateActiveStyle,The length of the statement  "            t._roundRectColors.lightlight_color = DrawUtil.MergeColor(t._roundRectColors.border_color' t._roundRectColors.outer_color); " is 123.
Long Statement,Poderosa.Forms,TabBarDrawing,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\TabBar.cs,CreateActiveStyle,The length of the statement  "            t._roundRectColors.light_color = DrawUtil.MergeColor(t._roundRectColors.lightlight_color' t._roundRectColors.border_color); " is 123.
Long Statement,Poderosa.Forms,TabBarButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\TabBar.cs,OnPaint,The length of the statement  "                DrawUtil.FillHorizontalGradation(g' 0' 0' this.Width - 1' this.Height - 1' SystemColors.ControlLightLight' SystemColors.Control); " is 129.
Long Statement,Poderosa.Commands,BasicCommandImplementation,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\BasicCommands.cs,Build,The length of the statement  "                "Command.CloseDocument"' _window' Alt(Keys.W)' new ExecuteDelegate(CmdCloseCurrentDocument)' DoesExistCurrentDocument)); " is 120.
Long Statement,Poderosa.Commands,BasicCommandImplementation,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\BasicCommands.cs,Build,The length of the statement  "                "Command.SplitHorizontal"' _window' Alt(Keys.H)' new ExecuteDelegate(CmdSplitHorizontal)' new CanExecuteDelegate(CanSplit))); " is 125.
Long Statement,Poderosa.Commands,BasicCommandImplementation,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\BasicCommands.cs,Build,The length of the statement  "                "Command.SplitVertical"' _window' Alt(Keys.J)' new ExecuteDelegate(CmdSplitVertical)' new CanExecuteDelegate(CanSplit))); " is 121.
Long Statement,Poderosa.Commands,BasicCommandImplementation,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\BasicCommands.cs,Build,The length of the statement  "                "Command.SplitUnify"' _window' Alt(Keys.U)' new ExecuteDelegate(CmdSplitUnify)' new CanExecuteDelegate(CanSplitUnify))); " is 120.
Long Statement,Poderosa.Commands,BasicCommandImplementation,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\BasicCommands.cs,CmdCloseCurrentDocument,The length of the statement  "            IPoderosaMainWindow window = view == null ? null : (IPoderosaMainWindow)view.ParentForm.GetAdapter(typeof(IPoderosaMainWindow)); " is 128.
Long Statement,Poderosa.Commands,BasicCommandImplementation,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\BasicCommands.cs,CmdCloseAll,The length of the statement  "            PrepareCloseResult r = SessionManagerPlugin.Instance.CloseMultipleDocuments(new ClosingContext(window)' hosted_documents); " is 122.
Long Statement,Poderosa.Commands,CloseDocumentGroup,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\BasicMenus.cs,CreateChildMenus,The length of the statement  "            return new IPoderosaMenu[] { new BasicMenuItem("Menu.ConsoleClose"' "org.poderosa.core.session.closedocument") }; //今や必ずしもConsoleではない " is 133.
Long Statement,Poderosa.Commands,KeyBindConfiguration,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CommandManager.cs,LoadFrom,The length of the statement  "                Keys key = key_description == null ? tag.Command.DefaultShortcutKey : WinFormsUtil.ParseKey(key_description.Split('+')); " is 120.
Long Statement,Poderosa.Commands,PositionDesignationSorter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CommandPositionEx.cs,FindDependencyFor,The length of the statement  "                    throw new ArgumentException("IPositionDesignation#Target must return a member of the argument collection of SortItem()"); " is 121.
Long Statement,Poderosa.Commands,PositionDesignationSorter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CommandPositionEx.cs,FindDependencyFor,The length of the statement  "                if (!(e.designation.DesignationPosition == PositionType.NextTo || e.designation.DesignationPosition == PositionType.PreviousTo)) " is 128.
Long Statement,Poderosa.Commands,PositionDesignationSorter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CommandPositionEx.cs,FindDependencyFor,The length of the statement  "                    throw new ArgumentException("if IPositionDesignation#Target returns an object' #Position must be PreviousTo or NextTo"); " is 120.
Long Statement,Poderosa.View,CharacterDocumentViewer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CharacterDocumentViewer.cs,AdjustScrollBar,The length of the statement  "            int largechange = (int)Math.Floor((this.ClientSize.Height - BORDER * 2 + prof.LineSpacing) / ch); //きちんと表示できる行数をLargeChangeにセット " is 127.
Long Statement,Poderosa.View,CharacterDocumentViewer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CharacterDocumentViewer.cs,MousePosToTextPos,The length of the statement  "            textX = RuntimeUtil.AdjustIntRange((int)Math.Floor((mouseX - CharacterDocumentViewer.BORDER) / pitch.Width)' 0' Int32.MaxValue); " is 128.
Long Statement,Poderosa.View,CharacterDocumentViewer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CharacterDocumentViewer.cs,MousePosToTextPos,The length of the statement  "            textY = RuntimeUtil.AdjustIntRange((int)Math.Floor((mouseY - CharacterDocumentViewer.BORDER) / (pitch.Height + GetRenderProfile().LineSpacing))' 0' Int32.MaxValue); " is 164.
Long Statement,Poderosa.View,CharacterDocumentViewer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CharacterDocumentViewer.cs,OnPaint,The length of the statement  "                    _caret.Enabled = _caret.Enabled && this.Focused; //TODO さらにIME起動中はキャレットを表示しないように. TerminalControlだったらAdjustCaretでIMEをみてるので問題はない " is 127.
Long Statement,Poderosa.View,CharacterDocumentViewer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CharacterDocumentViewer.cs,BuildTransientDocument,The length of the statement  "            //	this.Width - _VScrollBar.Width - sm.ControlBorderWidth + 8' //この８がない値が正当だが、.NETの文字サイズ丸め問題のため行の最終文字が表示されないことがある。これを回避するためにちょっと増やす " is 131.
Long Statement,Poderosa.View,CharacterDocumentViewer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CharacterDocumentViewer.cs,BuildTransientDocument,The length of the statement  "            //Caret画面外にあるなら処理はしなくてよい。２番目の条件は、Attach-ResizeTerminalの流れの中でこのOnPaintを実行した場合にTerminalHeight>lines.Countになるケースがあるのを防止するため " is 120.
Long Statement,Poderosa.View,CharacterDocumentViewer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CharacterDocumentViewer.cs,DrawBarCaret,The length of the statement  "            PointF pt1 = new PointF(profile.Pitch.Width * x + BORDER' (profile.Pitch.Height + profile.LineSpacing) * y + BORDER + 2); " is 121.
Long Statement,Poderosa.View,CharacterDocumentViewer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CharacterDocumentViewer.cs,DrawUnderLineCaret,The length of the statement  "            PointF pt1 = new PointF(profile.Pitch.Width * x + BORDER + 2' (profile.Pitch.Height + profile.LineSpacing) * y + BORDER + profile.Pitch.Height); " is 144.
Long Statement,Poderosa.View,CharacterDocumentViewer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CharacterDocumentViewer.cs,DrawBackgroundImage_Normal,The length of the statement  "                offset_x = (style == ImageStyle.TopLeft || style == ImageStyle.BottomLeft) ? 0 : (this.ClientSize.Width - _VScrollBar.Width - img.Width); " is 137.
Long Statement,Poderosa.View,CharacterDocumentViewer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CharacterDocumentViewer.cs,DrawBackgroundImage_Normal,The length of the statement  "            Rectangle target = Rectangle.Intersect(new Rectangle(clip.Left - offset_x' clip.Top - offset_y' clip.Width' clip.Height)' new Rectangle(0' 0' img.Width' img.Height)); " is 166.
Long Statement,Poderosa.View,CharacterDocumentViewer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CharacterDocumentViewer.cs,DrawBackgroundImage_Normal,The length of the statement  "                g.DrawImage(img' new Rectangle(target.Left + offset_x' target.Top + offset_y' target.Width' target.Height)' target' GraphicsUnit.Pixel); " is 136.
Long Statement,Poderosa.View,TextSelectionUIHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CharacterDocumentViewer.cs,OnMouseDown,The length of the statement  "                        rt = sel.PivotType == RangeType.Char ? RangeType.Word : sel.PivotType == RangeType.Word ? RangeType.Line : RangeType.Char; " is 122.
Long Statement,Poderosa.View,RenderProfile,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,CreateFonts,The length of the statement  "            _cjkBoldUnderlinefont = new FontHandle(new Font(_cjkFont.Font' fs | FontStyle.Underline | FontStyle.Bold)' _useClearType); " is 122.
Long Statement,Poderosa.Document,Unicode,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Unicode.cs,GetCharGroup,The length of the statement  "                    if (0xFF61 <= ch && ch <= 0xFFDC) // FF61-FF64:Halfwidth CJK punctuation FF65-FF9F:Halfwidth Katakana FFA0-FFDC:Halfwidth Hangul " is 128.
Long Statement,Poderosa.Plugins,PluginManager,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Plugin\Plugin.cs,CreateExtensionPoint,The length of the statement  "                throw new InvalidOperationException(InternalPoderosaWorld.Strings.GetString("PluginManager.Messages.NewExtensionPointOutsideInit")); " is 132.
Long Statement,Poderosa.Plugins,PluginManager,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Plugin\Plugin.cs,CreateExtensionPoint,The length of the statement  "                throw new ArgumentException(InternalPoderosaWorld.Strings.GetString("PluginManager.Messages.DuplicatedExtensionPointID")); " is 122.
Long Statement,Poderosa.Plugins,PluginManager,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Plugin\Plugin.cs,EnumeratePlugins,The length of the statement  "            PluginDeclarationAttribute[] decls = (PluginDeclarationAttribute[])assembly.GetCustomAttributes(typeof(PluginDeclarationAttribute)' false); " is 139.
Long Statement,Poderosa.Sessions,SessionManagerPlugin,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Session.cs,InitializePlugin,The length of the statement  "            _docViewRelationHandler = poderosa.PluginManager.CreateExtensionPoint("org.poderosa.core.sessions.docViewRelationHandler"' typeof(IDocViewRelationEventHandler)' this); " is 167.
Long Statement,Poderosa.Sessions,SessionManagerPlugin,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Session.cs,AttachDocumentAndView,The length of the statement  "                Debug.WriteLineIf(DebugOpt.DumpDocumentRelation' String.Format("Detach Destination View doc={0} view={1}"' existing_doc.GetType().Name' ViewName(view))); " is 153.
Long Statement,Poderosa.Sessions,SessionManagerPlugin,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Session.cs,DumpDocumentRelation,The length of the statement  "                Debug.WriteLine(String.Format("  doc {0}' current={1}' last={2}"' dh.Document.GetType().Name' ViewName(dh.CurrentView)' ViewName(dh.LastAttachedView))); " is 152.
Long Statement,Poderosa.Sessions,DocumentHost,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Session.cs,AttachView,The length of the statement  "            IPoderosaView internalview = rv == null ? view : rv.AssureViewClass(vf.GetViewType()); //ContentReplaceableViewのときは中身を使用 " is 120.
Long Statement,Poderosa.Sessions,AutoShellExecutionCommand,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\AutoShellExecutor.cs,ProcessAction,The length of the statement  "            _currentAction.TargetSession.Terminal.ShellCommandExecutor.StartCommandResultProcessor(this' _currentAction.CommandString' true); " is 129.
Long Statement,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The length of the statement  "            this._loginButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The length of the statement  "            this._cancelButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 152.
Long Statement,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The length of the statement  "            this._advancedOptionCheck.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 158.
Long Statement,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The length of the statement  "            this._advancedOptionGroup.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) " is 156.
Long Statement,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,ApplyParam,The length of the statement  "            IAutoExecMacroParameter autoExecParams = parameter.GetAdapter(typeof(IAutoExecMacroParameter)) as IAutoExecMacroParameter; " is 122.
Long Statement,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,ApplyParam,The length of the statement  "                _autoExecMacroPathBox.Text = (autoExecParams.AutoExecMacroPath != null) ? autoExecParams.AutoExecMacroPath : String.Empty; " is 122.
Long Statement,Poderosa.Sessions,CygwinPlugin,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinPlugin.cs,InitializePlugin,The length of the statement  "            poderosa.PluginManager.FindExtensionPoint("org.poderosa.core.window.toolbar").RegisterExtension(_cygwinToolBarComponent); " is 121.
Long Statement,Poderosa.Sessions,CygwinPlugin,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinPlugin.cs,CreateDefaultCygwinTerminalSettings,The length of the statement  "            ITerminalSettings settings = TerminalSessionsPlugin.Instance.TerminalEmulatorService.CreateDefaultTerminalSettings(""' Poderosa.TerminalSession.Properties.Resources.Cygwin16x16); " is 178.
Long Statement,Poderosa.Sessions,CygwinLoginDialogCommand,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinPlugin.cs,InternalExecute,The length of the statement  "                            ISessionManager sm = (ISessionManager)CygwinPlugin.Instance.PoderosaWorld.PluginManager.FindPlugin("org.poderosa.core.sessions"' typeof(ISessionManager)); " is 154.
Long Statement,Poderosa.Sessions,CygwinLoginDialogCommand,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinPlugin.cs,InternalExecute,The length of the statement  "                            IAutoExecMacroParameter autoExecParam = con.Destination.GetAdapter(typeof(IAutoExecMacroParameter)) as IAutoExecMacroParameter; " is 127.
Long Statement,Poderosa.Sessions,LoginDialogBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\LoginDialogBase.cs,CreateSimpleLogSettings,The length of the statement  "            ISimpleLogSettings logsettings = TerminalSessionsPlugin.Instance.TerminalEmulatorService.CreateDefaultSimpleLogSettings(); " is 122.
Long Statement,Poderosa.Sessions,LoginDialogBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\LoginDialogBase.cs,GetTargetView,The length of the statement  "            IContentReplaceableView rv = (IContentReplaceableView)pm.GetCandidateViewForNewDocument().GetAdapter(typeof(IContentReplaceableView)); " is 134.
Long Statement,Poderosa.Sessions,LoginDialogBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\LoginDialogBase.cs,AdjustLoginDialogUISupport,The length of the statement  "            IExtensionPoint ep = TerminalSessionsPlugin.Instance.PoderosaWorld.PluginManager.FindExtensionPoint(extension_point_name); " is 122.
Long Statement,Poderosa.Sessions,LoginDialogBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\LoginDialogBase.cs,AdjustLoginDialogUISupport,The length of the statement  "                string config = TerminalSessionsPlugin.Instance.TerminalSessionOptions.GetDefaultLoginDialogUISupportTypeName(logintype); " is 121.
Long Statement,Poderosa.Sessions,OpenSessionDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionDialog.cs,InitializeComponent,The length of the statement  "            this._cancelButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 152.
Long Statement,Poderosa.Sessions,OpenSessionDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionDialog.cs,InitializeComponent,The length of the statement  "            this._loginButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,Localize,The length of the statement  "            this._x11UseCygwinDomainSocketCheckBox.Text = TEnv.Strings.GetString("Form.LoginDialog._x11UseCygwinDomainSocketCheckBox"); " is 123.
Long Statement,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,Localize,The length of the statement  "            this._x11CygwinX11UnixFolderExampleLabel.Text = TEnv.Strings.GetString("Form.LoginDialog._x11CygwinX11UnixFolderExampleLabel"); " is 127.
Long Statement,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,LoadHistory,The length of the statement  "            IExtensionPoint extp = TerminalSessionsPlugin.Instance.PoderosaWorld.PluginManager.FindExtensionPoint("org.poderosa.terminalsessions.terminalParameterStore"); " is 158.
Long Statement,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,Validate,The length of the statement  "            ISimpleLogSettings logSettings = TerminalSessionsPlugin.Instance.TerminalEmulatorService.CreateDefaultSimpleLogSettings(); " is 122.
Long Statement,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,Validate,The length of the statement  "            ITerminalSettings termSettings = TerminalSessionsPlugin.Instance.TerminalEmulatorService.CreateDefaultTerminalSettings(terminalCaption' terminalIcon); " is 150.
Long Statement,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The length of the statement  "            this._hostBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 141.
Long Statement,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The length of the statement  "            this._userNameBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 145.
Long Statement,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The length of the statement  "            this._authOptions.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 145.
Long Statement,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The length of the statement  "            this._passphraseBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 147.
Long Statement,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The length of the statement  "            this._privateKeyFile.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 148.
Long Statement,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The length of the statement  "            this._privateKeySelect.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 153.
Long Statement,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The length of the statement  "            this._optionsTab.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 147.
Long Statement,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The length of the statement  "            this._logTypeBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 144.
Long Statement,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The length of the statement  "            this._selectLogButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 152.
Long Statement,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The length of the statement  "            this._logFileBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 144.
Long Statement,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The length of the statement  "            this._x11ForwardingOptionsPanel.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 162.
Long Statement,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The length of the statement  "            this._x11CygwinX11UnixFolderButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 165.
Long Statement,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The length of the statement  "            this._x11XauthorityButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 156.
Long Statement,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The length of the statement  "            this._x11CygwinX11UnixFolderText.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 160.
Long Statement,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The length of the statement  "            this._x11UseCygwinDomainSocketCheckBox.CheckedChanged += new System.EventHandler(this._x11UseCygwinDomainSocketCheckBox_CheckedChanged); " is 136.
Long Statement,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The length of the statement  "            this._x11XauthorityText.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 151.
Long Statement,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The length of the statement  "            this._x11DisplayNote.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 148.
Long Statement,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The length of the statement  "            this._useX11ForwardingCheckBox.CheckedChanged += new System.EventHandler(this._useX11ForwardingCheckBox_CheckedChanged); " is 120.
Long Statement,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The length of the statement  "            this._useAgentForwardingCheckBox.CheckedChanged += new System.EventHandler(this._useAgentForwardingCheckBox_CheckedChanged); " is 124.
Long Statement,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,LoadHistory,The length of the statement  "            IExtensionPoint extp = TerminalSessionsPlugin.Instance.PoderosaWorld.PluginManager.FindExtensionPoint("org.poderosa.terminalsessions.terminalParameterStore"); " is 158.
Long Statement,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,Validate,The length of the statement  "            ISimpleLogSettings logSettings = TerminalSessionsPlugin.Instance.TerminalEmulatorService.CreateDefaultSimpleLogSettings(); " is 122.
Long Statement,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,Validate,The length of the statement  "            ITerminalSettings termSettings = TerminalSessionsPlugin.Instance.TerminalEmulatorService.CreateDefaultTerminalSettings(terminalCaption' terminalIcon); " is 150.
Long Statement,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The length of the statement  "            this._hostBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 141.
Long Statement,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The length of the statement  "            this._optionsTab.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 147.
Long Statement,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The length of the statement  "            this._logTypeBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 144.
Long Statement,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The length of the statement  "            this._selectLogButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 152.
Long Statement,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The length of the statement  "            this._logFileBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 144.
Long Statement,Poderosa.Sessions,ReproduceCommand,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\Reproduce.cs,Reproduce,The length of the statement  "            ITerminalSession session = TerminalSessionsPlugin.Instance.TerminalSessionStartCommand.StartTerminalSession(ts.OwnerWindow' param' settings); " is 141.
Long Statement,Poderosa.Sessions,ReproduceCommand,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\Reproduce.cs,ConnectAgain,The length of the statement  "            ITerminalConnection connection = TerminalSessionsPlugin.Instance.TerminalSessionStartCommand.OpenConnection(ts.OwnerWindow' param' ts.TerminalSettings); " is 152.
Long Statement,Poderosa.Sessions,ShortcutFileContent,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\ShortcutFile.cs,ParseOldFormat,The length of the statement  "            ITerminalSettings settings = TerminalSessionsPlugin.Instance.TerminalEmulatorService.CreateDefaultTerminalSettings(""' null); " is 125.
Long Statement,Poderosa.Sessions,ShortcutFileCommands,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\ShortcutFileCommands.cs,Register,The length of the statement  "            GeneralCommandImpl open = new GeneralCommandImpl("org.poderosa.sessions.openShortcutFile"' sr' "Command.OpenShortcutFile"' filecat' new ExecuteDelegate(OpenShortcutFile)); " is 171.
Long Statement,Poderosa.Sessions,ShortcutFileCommands,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\ShortcutFileCommands.cs,Register,The length of the statement  "            GeneralCommandImpl save = new GeneralCommandImpl("org.poderosa.sessions.saveShortcutFile"' sr' "Command.SaveShortcutFile"' filecat' new ExecuteDelegate(SaveShortcutFile)' " is 170.
Long Statement,Poderosa.Sessions,ShortcutFileCommands,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\ShortcutFileCommands.cs,Register,The length of the statement  "                new PoderosaMenuItemImpl(save' sr' "Menu.SaveShortcutFile") }).SetPosition(PositionType.NextTo' CygwinPlugin.Instance.CygwinMenuGroupTemp)); " is 140.
Long Statement,Poderosa.Sessions,ShortcutFileCommands,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\ShortcutFileCommands.cs,OpenShortcutFile,The length of the statement  "                window = (IPoderosaMainWindow)CommandTargetUtil.AsViewOrLastActivatedView(target).ParentForm.GetAdapter(typeof(IPoderosaMainWindow)); " is 133.
Long Statement,Poderosa.Sessions,ShortcutFileCommands,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\ShortcutFileCommands.cs,OpenShortcutFile,The length of the statement  "                    rv = (IContentReplaceableView)window.ViewManager.GetCandidateViewForNewDocument().GetAdapter(typeof(IContentReplaceableView)); " is 126.
Long Statement,Poderosa.Sessions,ShortcutFileCommands,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\ShortcutFileCommands.cs,OpenShortcutFile,The length of the statement  "                    RenderProfile rp = f.TerminalSettings.UsingDefaultRenderProfile ? TerminalSessionsPlugin.Instance.TerminalEmulatorService.TerminalEmulatorOptions.CreateRenderProfile() : f.TerminalSettings.RenderProfile; " is 203.
Long Statement,Poderosa.Sessions,ShortcutFileCommands,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\ShortcutFileCommands.cs,OpenShortcutFile,The length of the statement  "                ITerminalSession s = TerminalSessionsPlugin.Instance.TerminalSessionStartCommand.StartTerminalSession(target' f.TerminalParameter' f.TerminalSettings); " is 151.
Long Statement,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The length of the statement  "            this._loginButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The length of the statement  "            this._cancelButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 152.
Long Statement,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitUI,The length of the statement  "            //if(_sshParam.Port!=22) _methodBox.Text += String.Format(TEnv.Strings.GetString("Caption.SSHShortcutLoginDialog.NotStandardPort")' _sshParam.Port); " is 148.
Long Statement,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitUI,The length of the statement  "            if (_sshParam.PasswordOrPassphrase.Length == 0 && TerminalSessionsPlugin.Instance.ProtocolService.ProtocolOptions.RetainsPassphrase) { " is 134.
Long Statement,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitUI,The length of the statement  "                string p = TerminalSessionsPlugin.Instance.ProtocolService.PassphraseCache.GetOrEmpty(tcp.Destination' _sshParam.Account); " is 122.
Long Statement,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitUI,The length of the statement  "            IAutoExecMacroParameter autoExecParams = _sshParam.GetAdapter(typeof(IAutoExecMacroParameter)) as IAutoExecMacroParameter; " is 122.
Long Statement,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitUI,The length of the statement  "                _autoExecMacroPathBox.Text = (autoExecParams.AutoExecMacroPath != null) ? autoExecParams.AutoExecMacroPath : String.Empty; " is 122.
Long Statement,Poderosa.Sessions,StartCommand,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\StartCommands.cs,StartTerminalSession,The length of the statement  "            ISessionManager sm = (ISessionManager)TerminalSessionsPlugin.Instance.PoderosaWorld.PluginManager.FindPlugin("org.poderosa.core.sessions"' typeof(ISessionManager)); " is 164.
Long Statement,Poderosa.Sessions,StartCommand,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\StartCommands.cs,StartTerminalSession,The length of the statement  "            IAutoExecMacroParameter autoExecParam = connection.Destination.GetAdapter(typeof(IAutoExecMacroParameter)) as IAutoExecMacroParameter; " is 134.
Long Statement,Poderosa.Sessions,StartCommand,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\StartCommands.cs,OpenConnection,The length of the statement  "            ITerminalConnectionFactory[] fs = (ITerminalConnectionFactory[])TerminalSessionsPlugin.Instance.PoderosaWorld.PluginManager.FindExtensionPoint(TerminalSessionsPlugin.TERMINAL_CONNECTION_FACTORY_ID).GetExtensions(); " is 214.
Long Statement,Poderosa.Sessions,CygwinConnectionFactory,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\StartCommands.cs,EstablishConnection,The length of the statement  "                ITerminalConnection con = sc.WaitConnection(t' TerminalSessionsPlugin.Instance.TerminalSessionOptions.TerminalEstablishTimeout); " is 128.
Long Statement,Poderosa.Sessions,TelnetConnectionFactory,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\StartCommands.cs,EstablishConnection,The length of the statement  "                ITerminalConnection con = sc.WaitConnection(t' TerminalSessionsPlugin.Instance.TerminalSessionOptions.TerminalEstablishTimeout); " is 128.
Long Statement,Poderosa.Sessions,SSHConnectionFactory,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\StartCommands.cs,EstablishConnection,The length of the statement  "                if (ssh.LetUserInputPassword && ssh.AuthenticationType != Granados.AuthenticationType.KeyboardInteractive) { //ダイアログで入力を促して接続 " is 125.
Long Statement,Poderosa.Sessions,SSHConnectionFactory,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\StartCommands.cs,EstablishConnection,The length of the statement  "                        AdjustCaptionAndText(settings' ((ITCPParameter)con.Destination.GetAdapter(typeof(ITCPParameter))).Destination' StartCommandIcon.NewConnection); " is 143.
Long Statement,Poderosa.Sessions,SSHConnectionFactory,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\StartCommands.cs,EstablishConnection,The length of the statement  "                    AdjustCaptionAndText(settings' ((ITCPParameter)destination.GetAdapter(typeof(ITCPParameter))).Destination' StartCommandIcon.NewConnection); " is 139.
Long Statement,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeLoginParams,The length of the statement  "            IExtensionPoint extp = TerminalSessionsPlugin.Instance.PoderosaWorld.PluginManager.FindExtensionPoint("org.poderosa.terminalsessions.telnetSSHLoginDialogInitializer"); " is 167.
Long Statement,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,ApplyParam,The length of the statement  "                parameter = (ITerminalParameter)TerminalSessionsPlugin.Instance.ProtocolService.CreateDefaultSSHParameter().GetAdapter(typeof(ITerminalParameter)); " is 147.
Long Statement,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,ApplyParam,The length of the statement  "            IAutoExecMacroParameter autoExecParams = destination.GetAdapter(typeof(IAutoExecMacroParameter)) as IAutoExecMacroParameter; " is 124.
Long Statement,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,ApplyParam,The length of the statement  "                _autoExecMacroPathBox.Text = (autoExecParams.AutoExecMacroPath != null) ? autoExecParams.AutoExecMacroPath : String.Empty; " is 122.
Long Statement,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,OnHostIsSelected,The length of the statement  "                        ssh.PasswordOrPassphrase = TerminalSessionsPlugin.Instance.ProtocolService.PassphraseCache.GetOrEmpty(tcp.Destination' ssh.Account); " is 132.
Long Statement,Poderosa.Sessions,LoginDialogCommand,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHPlugin.cs,InternalExecute,The length of the statement  "                        ISessionManager sm = (ISessionManager)TelnetSSHPlugin.Instance.PoderosaWorld.PluginManager.FindPlugin("org.poderosa.core.sessions"' typeof(ISessionManager)); " is 157.
Long Statement,Poderosa.Sessions,LoginDialogCommand,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHPlugin.cs,InternalExecute,The length of the statement  "                        IAutoExecMacroParameter autoExecParam = con.Destination.GetAdapter(typeof(IAutoExecMacroParameter)) as IAutoExecMacroParameter; " is 127.
Long Statement,Poderosa.Sessions,LoginDialogCommand,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHPlugin.cs,InternalExecute,The length of the statement  "                        IContentReplaceableView view = (IContentReplaceableView)window.ViewManager.GetCandidateViewForNewDocument().GetAdapter(typeof(IContentReplaceableView)); " is 152.
Long Statement,Poderosa.Sessions,LoginDialogCommand,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHPlugin.cs,InternalExecute,The length of the statement  "                        ISessionManager sm = (ISessionManager)TelnetSSHPlugin.Instance.PoderosaWorld.PluginManager.FindPlugin("org.poderosa.core.sessions"' typeof(ISessionManager)); " is 157.
Long Statement,Poderosa.Sessions,LoginDialogCommand,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHPlugin.cs,InternalExecute,The length of the statement  "                        IAutoExecMacroParameter autoExecParam = dlg.TerminalConnection.Destination.GetAdapter(typeof(IAutoExecMacroParameter)) as IAutoExecMacroParameter; " is 146.
Long Statement,Poderosa.Sessions,TerminalSession,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TerminalSession.cs,PrepareCloseSession,The length of the statement  "                if (this.OwnerWindow.AskUserYesNo(String.Format(TEnv.Strings.GetString("Message.AskCloseTerminalSession")' this.Caption)) == DialogResult.Yes) " is 142.
Long Statement,Poderosa.Sessions,TerminalSessionOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TerminalSessionOptions.cs,DefineItems,The length of the statement  "            _terminalEstablishTimeout = builder.DefineIntValue(_folder' "terminalEstablishTimeout"' 5000' PreferenceValidatorUtil.PositiveIntegerValidator); " is 144.
Long Statement,Poderosa.Sessions,TerminalSessionOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TerminalSessionOptions.cs,DefineItems,The length of the statement  "            _telnetSSHLoginDialogUISupportTypeName = builder.DefineStringValue(_folder' "telnetSSHLoginDialogUISupport"' "Poderosa.Usability.MRUList"' null); " is 145.
Long Statement,Poderosa.Sessions,TerminalSessionOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TerminalSessionOptions.cs,DefineItems,The length of the statement  "            _cygwinLoginDialogUISupportTypeName = builder.DefineStringValue(_folder' "cygwinLoginDialogUISupport"' "Poderosa.Usability.MRUList"' null); " is 139.
Long Statement,Poderosa.Sessions,TerminalSessionsPlugin,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TerminalSessionPlugin.cs,InitializePlugin,The length of the statement  "            pm.CreateExtensionPoint("org.poderosa.terminalsessions.telnetSSHLoginDialogInitializer"' typeof(ITelnetSSHLoginDialogInitializer)' this); " is 137.
Long Statement,Poderosa.Sessions,TerminalSessionsPlugin,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TerminalSessionPlugin.cs,InitializePlugin,The length of the statement  "            pm.CreateExtensionPoint("org.poderosa.terminalsessions.terminalParameterStore"' typeof(ITerminalSessionParameterStore)' this); " is 126.
Long Statement,Poderosa.Sessions,TerminalSessionsPlugin,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TerminalSessionPlugin.cs,InitializePlugin,The length of the statement  "            IExtensionPoint factory_point = pm.CreateExtensionPoint(TERMINAL_CONNECTION_FACTORY_ID' typeof(ITerminalConnectionFactory)' this); " is 130.
Long Statement,Poderosa.Sessions,TerminalSessionsPlugin,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TerminalSessionPlugin.cs,InitializePlugin,The length of the statement  "            _pasteCommandExt = pm.CreateExtensionPoint("org.poderosa.terminalsessions.pasteCommand"' typeof(IPoderosaCommand)' this); " is 121.
Long Statement,Poderosa.Serializing,SerializeServicePlugin,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Serialize.cs,InitializePlugin,The length of the statement  "            _serviceElements = poderosa.PluginManager.CreateExtensionPoint(EXTENSIONPOINT_NAME' typeof(ISerializeServiceElement)' this); " is 124.
Long Statement,Poderosa,RuntimeUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Plugin\Util.cs,ReportException,The length of the statement  "                string msg = String.Format(InternalPoderosaWorld.Strings.GetString("Message.Util.InternalError")' errorfile' ex.Message); " is 121.
Long Statement,Poderosa,GUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Util.cs,Warning,The length of the statement  "            MessageBox.Show(owner' msg' GEnv.Strings.GetString("Common.MessageBoxTitle")' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 128.
Long Statement,Poderosa,GUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Util.cs,AskUserYesNo,The length of the statement  "            return MessageBox.Show(owner' msg' GEnv.Strings.GetString("Common.MessageBoxTitle")' MessageBoxButtons.YesNo' MessageBoxIcon.Question); " is 135.
Long Statement,Granados.SSH1,SSH1Connection,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Connection.cs,ListenForwardedPort,The length of the statement  "            string hostToConnect = "granados" + Interlocked.Increment(ref _remotePortForwardCount).ToString(NumberFormatInfo.InvariantInfo); " is 128.
Long Statement,Granados.SSH1,SSH1KeyExchanger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Connection.cs,BuildSessionKeyPacket,The length of the statement  "            BigInteger firstResult = RSAUtil.PKCS1PadType2(sessionKeyXor' firstKeyByteLen' rng).ModPow(firstEncryption.Exponent' firstEncryption.Modulus); " is 142.
Long Statement,Granados.SSH1,SSH1KeyExchanger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Connection.cs,BuildSessionKeyPacket,The length of the statement  "            BigInteger secondResult = RSAUtil.PKCS1PadType2(firstResult.GetBytes()' secondKeyByteLen' rng).ModPow(secondEncryption.Exponent' secondEncryption.Modulus); " is 155.
Long Statement,Granados.Mono.Math,ModulusRing,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,BarrettReduction,The length of the statement  "				Kernel.MultiplyMod2p32pmod (q3.data' (int)kPlusOne' (int)q3.length - (int)kPlusOne' n.data' 0' (int)n.length' r2.data' 0' (int)kPlusOne); " is 137.
Long Statement,Granados.Poderosa.KeyFormat,BERReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\BERReader.cs,ReadTagInfo,The length of the statement  "            return ReadTag(ref tagInfo.ClassBits' ref tagInfo.IsConstructed' ref tagInfo.TagNumber) && ReadLength(ref tagInfo.Length); " is 122.
Long Statement,Granados.Poderosa.KeyFormat,PrivateKeyLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\PrivateKeyLoader.cs,ProbeFormat,The length of the statement  "                || ByteArrayUtil.ByteArrayStartsWith(keyFile' Encoding.ASCII.GetBytes(PrivateKeyFileHeader.SSH2_OPENSSH_HEADER_OPENSSH))) " is 121.
Long Statement,Granados.Poderosa.KeyFormat,PrivateKeyLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\PrivateKeyLoader.cs,LoadSSH1PrivateKey,The length of the statement  "            loader.Load(passphrase' out modulus' out publicExponent' out privateExponent' out primeP' out primeQ' out crtCoefficient' out comment); " is 135.
Long Statement,Granados.SSH2,SSH2Connection,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,DoProcessPacket,The length of the statement  "            if (packetType >= SSH2PacketType.SSH_MSG_CHANNEL_OPEN_CONFIRMATION && packetType <= SSH2PacketType.SSH_MSG_CHANNEL_FAILURE) { " is 125.
Long Statement,Granados.SSH2,SSH2KeyExchanger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,KexDiffieHellman,The length of the statement  "                Debug.Assert(_sequenceStatus == SequenceStatus.WaitNewKeys || _sequenceStatus == SequenceStatus.WaitUpdateCipher);    // already set in FeedReceivedPacket " is 154.
Long Statement,Granados.SSH2,SSH2KeyExchanger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,GetCipherSettings,The length of the statement  "                    DeriveKey(state.secret' state.hash' 'C'' CipherFactory.GetKeySize(_cInfo.OutgoingPacketCipher.Value)' state.hashAlgorithm)' " is 123.
Long Statement,Granados.SSH2,SSH2KeyExchanger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,GetCipherSettings,The length of the statement  "                    DeriveKey(state.secret' state.hash' 'A'' CipherFactory.GetBlockSize(_cInfo.OutgoingPacketCipher.Value)' state.hashAlgorithm) " is 124.
Long Statement,Granados.SSH2,SSH2KeyExchanger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,GetCipherSettings,The length of the statement  "                    DeriveKey(state.secret' state.hash' 'D'' CipherFactory.GetKeySize(_cInfo.IncomingPacketCipher.Value)' state.hashAlgorithm)' " is 123.
Long Statement,Granados.SSH2,SSH2KeyExchanger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,GetCipherSettings,The length of the statement  "                    DeriveKey(state.secret' state.hash' 'B'' CipherFactory.GetBlockSize(_cInfo.IncomingPacketCipher.Value)' state.hashAlgorithm) " is 124.
Long Statement,Granados.SSH2,SSH2KeyExchanger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,GetCipherSettings,The length of the statement  "            settings.macServer = MACFactory.CreateMAC(MACAlgorithm.HMACSHA1' DeriveKey(state.secret' state.hash' 'E'' MACFactory.GetSize(ma)' state.hashAlgorithm)); " is 152.
Long Statement,Granados.SSH2,SSH2KeyExchanger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,GetCipherSettings,The length of the statement  "            settings.macClient = MACFactory.CreateMAC(MACAlgorithm.HMACSHA1' DeriveKey(state.secret' state.hash' 'F'' MACFactory.GetSize(ma)' state.hashAlgorithm)); " is 152.
Long Statement,Granados.SSH2,SSH2RemotePortForwarding,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,CheckForwardedTcpIpPacket,The length of the statement  "            _protocolEventManager.Trace("new port-forwarding channel : local={0} remote={1}"' channel.LocalChannel' channel.RemoteChannel); " is 127.
Long Statement,Granados.SSH2,SSH2OpenSSHAgentForwarding,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,InterceptPacket,The length of the statement  "            _protocolEventManager.Trace("new agent forwarding channel : local={0} remote={1}"' channel.LocalChannel' channel.RemoteChannel); " is 128.
Long Statement,Granados.SSH2,SSH2X11Forwarding,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,InterceptPacket,The length of the statement  "            _protocolEventManager.Trace("new X11 forwarding channel : local={0} remote={1}"' channel.LocalChannel' channel.RemoteChannel); " is 126.
Long Statement,Granados.X11,X11ConnectionManager,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11ConnectionManager.cs,CreateChannelHandler,The length of the statement  "            return new X11ChannelHandler(channel' socket' _spoofedAuthProtocolName' _spoofedAuthCookie' _xAuthProtocolName' _xAuthCookie); " is 126.
Long Statement,Granados.X11,X11CygwinDomainSocket,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Socket.cs,ParseDomainSocketFile,The length of the statement  "            var match = Regex.Match(line' @"^!<socket\s*>(\d+)\s+s\s+([a-fA-F0-9]{8})-([a-fA-F0-9]{8})-([a-fA-F0-9]{8})-([a-fA-F0-9]{8})"); " is 127.
Long Statement,Poderosa.Boot,PoderosaStartup,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Plugin\PoderosaStartup.cs,CreatePoderosaApplication,The length of the statement  "            InternalPoderosaWorld w = new InternalPoderosaWorld(new PoderosaStartupContext(PluginManifest.CreateByText(plugin_manifest)' home_directory' preference_home' args' null)); " is 171.
Long Statement,Poderosa.Boot,PoderosaStartup,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Plugin\PoderosaStartup.cs,CreatePoderosaApplication,The length of the statement  "            InternalPoderosaWorld w = new InternalPoderosaWorld(new PoderosaStartupContext(PluginManifest.CreateByText(plugin_manifest)' home_directory' preference' args' null)); " is 166.
Long Statement,Poderosa.Boot,InternalPoderosaWorld,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Plugin\PoderosaWorld.cs,RunRootExtensions,The length of the statement  "                        _startupContext.Tracer.Trace("PoderosaWorld.Messages.DuplicatedMessageLoopExtension"' message_loop.GetType().Name' extension.GetType().Name); " is 141.
Long Statement,Poderosa.Boot,InternalPoderosaWorld,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Plugin\PoderosaWorld.cs,ReportBootError,The length of the statement  "            System.Windows.Forms.MessageBox.Show(bld.ToString()' "Poderosa"' System.Windows.Forms.MessageBoxButtons.OK' System.Windows.Forms.MessageBoxIcon.Error); " is 151.
Long Statement,Poderosa.Protocols,SSHConnector,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\Connector.cs,Negotiate,The length of the statement  "                ProtocolsPlugin.Instance.PassphraseCache.Add(tcp.Destination' _destination.Account' _destination.PasswordOrPassphrase); //接続成功時のみセット " is 132.
Long Statement,Poderosa.Protocols,HostKeyVerifierBridge,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\HostKeyCheckerEx.cs,FindHostKeyVerifier,The length of the statement  "            ISSHHostKeyVerifier2[] vs = (ISSHHostKeyVerifier2[])ProtocolsPlugin.Instance.PoderosaWorld.PluginManager.FindExtensionPoint(ProtocolsPluginConstants.HOSTKEYCHECKER_EXTENSION).GetExtensions(); " is 191.
Long Statement,Poderosa.Protocols,InterruptableConnector,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\InterruptableConnector.cs,SocksApplicapable,The length of the statement  "                if (address.AvailableAddresses.Length > 0 && NetAddressUtil.NetAddressIncludesIPAddress(netaddress' address.AvailableAddresses[0])) //１個だけで判断、ややさぼり " is 147.
Long Statement,Poderosa.Protocols,Connector,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\LocalShell.cs,Connect,The length of the statement  "                string args = String.Format("-p {0} -v HOME=\"{1}\" -v TERM=\"{2}\" -s \"{3}\""' _localPort' _param.Home' term.TerminalType' _param.ShellName); " is 143.
Long Statement,Poderosa.Protocols,Connector,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\LocalShell.cs,Connect,The length of the statement  "                    throw new LocalShellUtilException(PEnv.Strings.GetString("Message.CygwinUtil.FailedToRunCygterm") + ": " + cygtermPath' ex); " is 124.
Long Statement,Poderosa.Protocols,Connector,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\LocalShell.cs,GetCygtermPath,The length of the statement  "                IPoderosaApplication app = (IPoderosaApplication)ProtocolsPlugin.Instance.PoderosaWorld.GetAdapter(typeof(IPoderosaApplication)); " is 129.
Long Statement,Poderosa.Protocols,NetUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\NetUtil.cs,ConnectTCPSocket,The length of the statement  "            throw new Exception(String.Format(PEnv.Strings.GetString("Message.FailedToConnectAddress")' addrlist.AvailableAddresses[0].ToString())); " is 136.
Long Statement,Poderosa.Protocols,ProtocolOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\ProtocolOptions.cs,DefineItems,The length of the statement  "            _sshWindowSize = builder.DefineIntValue(_folder' "sshWindowSize"' 2097152' PreferenceValidatorUtil.PositiveIntegerValidator); " is 125.
Long Statement,Poderosa.Protocols,ProtocolOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\ProtocolOptions.cs,DefineItems,The length of the statement  "            _hostKeyCheckerVerifierTypeName = builder.DefineStringValue(_folder' "hostKeyCheckerVerifierTypeName"' "Poderosa.Usability.SSHKnownHosts"' null); " is 145.
Long Statement,Poderosa.Protocols,ProtocolOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\ProtocolOptions.cs,DefineItems,The length of the statement  "            _socketConnectTimeout = builder.DefineIntValue(_folder' "socketConnectTimeout"' 3000' PreferenceValidatorUtil.PositiveIntegerValidator); " is 136.
Long Statement,Poderosa.Protocols,ProtocolOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\ProtocolOptions.cs,DefineItems,The length of the statement  "            _ipVersionPriority = new EnumPreferenceItem<IPVersionPriority>(builder.DefineStringValue(_folder' "ipVersionPriority"' "Both"' null)' IPVersionPriority.Both); " is 158.
Long Statement,Poderosa.Protocols,ProtocolOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\ProtocolOptions.cs,DefineItems,The length of the statement  "            _socketBufferSize = builder.DefineIntValue(_folder' "socketBufferSize"' 0x1000' PreferenceValidatorUtil.PositiveIntegerValidator); " is 130.
Long Statement,Poderosa.Protocols,ProtocolsPlugin,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\ProtocolsPlugin.cs,InitializePlugin,The length of the statement  "            _connectionResultEventHandler = pm.CreateExtensionPoint(ProtocolsPluginConstants.RESULTEVENTHANDLER_EXTENSION' typeof(IConnectionResultEventHandler)' this); " is 156.
Long Statement,Poderosa.Protocols,ProtocolsPlugin,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\ProtocolsPlugin.cs,InitializePlugin,The length of the statement  "            pm.CreateExtensionPoint(ProtocolsPluginConstants.HOSTKEYCHECKER_EXTENSION' typeof(ISSHHostKeyVerifier2)' ProtocolsPlugin.Instance); " is 131.
Long Statement,Poderosa.Protocols,SimpleStringEncrypt,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\SimpleStringEncrypt.cs,DecryptString,The length of the statement  "            using (ICryptoTransform transform = this.mCSP.CreateDecryptor(Convert.FromBase64String(CKEY)' Convert.FromBase64String(CIV))) { " is 127.
Long Statement,Poderosa.Protocols,SimpleStringEncrypt,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\SimpleStringEncrypt.cs,EncryptString,The length of the statement  "                using (ICryptoTransform transform = this.mCSP.CreateEncryptor(Convert.FromBase64String(CKEY)' Convert.FromBase64String(CIV))) { " is 127.
Long Statement,Poderosa.Protocols,Socks,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\socks.cs,ConnectBySocks5,The length of the statement  "                throw new IOException(String.Format("The SOCKS server specified an unsupported authentication method [{0}]."' response[0])); " is 124.
Long Statement,Poderosa.Protocols,Socks,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\socks.cs,ConnectBySocks5,The length of the statement  "                throw new IOException(String.Format("The SOCKS server specified an unsupported authentication method [{0}]."' response[1])); " is 124.
Long Statement,Poderosa.Protocols,TelnetNegotiator,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\Telnet.cs,Process,The length of the statement  "                    if (data != (byte)TelnetCode.SE && data != (byte)TelnetOption.NAWS) //IAC SB 0x1F ときてそれっきり、というケースがあった。ホスト側の仕様違反のように見えるが、Poderosaが何かの応答を返すわけではないのでこれで回避 " is 150.
Long Statement,Poderosa.Protocols,SSHParameterSerializer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\TerminalParameterSerialize.cs,Deserialize,The length of the statement  "            tp.AuthenticationType = ParseUtil.ParseEnum<AuthenticationType>(node.Get("authentication"' "")' AuthenticationType.Password); " is 125.
Long Statement,Poderosa.Terminal,CommandResultRecognizer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\CommandResultPopup.cs,ProcessCommandResult,The length of the statement  "                Debug.WriteLineIf(DebugOpt.CommandPopup' String.Format("Ignored for 0-length' start={0} end={1}"' _commandStartLineID' end_line_id)); " is 133.
Long Statement,Poderosa.Terminal,PopupStyleCommandResultRecognizer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\CommandResultPopup.cs,CreateExtensionPointAndDefaultCommands,The length of the statement  "            IExtensionPoint pt = pm.CreateExtensionPoint(POPUP_MENU_EXTENSION_POINT' typeof(ICommandResultProcessorMenuItem)' TerminalEmulatorPlugin.Instance); " is 147.
Long Statement,Poderosa.Terminal,PopupStyleCommandResultRecognizer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\CommandResultPopup.cs,ProcessKey,The length of the statement  "            if (_state == State.Prompt && _lastCommand.Length > 0 && TerminalEmulatorPlugin.Instance.TerminalEmulatorOptions.CommandPopupKey == (modifiers | keybody)) { " is 156.
Long Statement,Poderosa.Terminal,PopupStyleCommandResultRecognizer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\CommandResultPopup.cs,ShowMenu,The length of the statement  "            Point popup = new Point((int)(doc.CaretColumn * pitch.Width)' (int)((doc.CurrentLineNumber - doc.TopLineNumber + 1) * pitch.Height)); " is 133.
Long Statement,Poderosa.Terminal,PopupStyleCommandResultRecognizer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\CommandResultPopup.cs,CreatePopupMenuItems,The length of the statement  "            foreach (ICommandResultProcessorMenuItem item in TerminalEmulatorPlugin.Instance.PoderosaWorld.PluginManager.FindExtensionPoint(POPUP_MENU_EXTENSION_POINT).GetExtensions()) { " is 174.
Long Statement,Poderosa.Terminal,CommandResultSession,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\CommandResultPopupSession.cs,SessionEntryPoint,The length of the statement  "                cp.InitialSize = new Size(tc.ClientSize.Width' (int)(RuntimeUtil.AdjustIntRange(document.Size' 0' 20) * rp.Pitch.Height) + 2); " is 126.
Long Statement,Poderosa.Terminal,IntelliSense,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\IntelliSense.cs,TryParseMultiLineCommand,The length of the statement  "                if (_terminal.PromptRecognizer.DeterminePromptLine(command_start_candidate' current.ID' current.DisplayLength' out prompt' out command)) { " is 138.
Long Statement,Poderosa.Terminal,IntelliSense,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\IntelliSense.cs,PopupMain,The length of the statement  "            IntelliSenseMode mode = line.Length == 0 || ss.IsDelimiter(line[line.Length - 1]) ? IntelliSenseMode.ArgComplement : IntelliSenseMode.CharComplement; " is 149.
Long Statement,Poderosa.Terminal,IntelliSenseContext,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\IntelliSense.cs,Init,The length of the statement  "            _commandStartPoint = new Point(doc.CaretColumn + (append_char == '\0' ? 0 : 1)' doc.CurrentLineNumber - doc.TopLineNumber); " is 123.
Long Statement,Poderosa.Terminal,IntelliSenseContext,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\IntelliSense.cs,Init,The length of the statement  "            Debug.WriteLineIf(DebugOpt.IntelliSense' String.Format("IS CtxInit M={0} CaretC={1}"' mode.ToString()' doc.CaretColumn)); " is 121.
Long Statement,Poderosa.Terminal,IntelliSenseContext,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\IntelliSense.cs,BuildCandidates,The length of the statement  "            IntelliSenseItemCollection col = (IntelliSenseItemCollection)_scheme.CommandHistory.GetAdapter(typeof(IntelliSenseItemCollection)); " is 131.
Long Statement,Poderosa.Terminal,IntelliSenseContext,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\IntelliSense.cs,BuildCandidates,The length of the statement  "                else if (_intelliSenseMode == IntelliSenseMode.CharComplement && r == IntelliSenseItem.MatchForwardResult.PartialChar) { " is 120.
Long Statement,Poderosa.Terminal,IntelliSenseWindow,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\IntelliSenseWindow.cs,DoSpecialKey,The length of the statement  "                _context.SortStyle = _context.SortStyle == IntelliSenseSort.Alphabet ? IntelliSenseSort.Historical : IntelliSenseSort.Alphabet; " is 127.
Long Statement,Poderosa.Terminal,IntelliSenseWindow,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\IntelliSenseWindow.cs,DoSpecialKey,The length of the statement  "                IntelliSenseItemCollection col = (IntelliSenseItemCollection)_context.CurrentScheme.CommandHistory.GetAdapter(typeof(IntelliSenseItemCollection)); " is 146.
Long Statement,Poderosa.Terminal,LogService,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Logger.cs,ApplySimpleLogSetting,The length of the statement  "            FileStream fs = new FileStream(sl.LogPath' sl.LogAppend ? FileMode.Append : FileMode.Create' FileAccess.Write' FileShare.Read); " is 127.
Long Statement,Poderosa.Terminal,LogService,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Logger.cs,CreateAutoLogFileName,The length of the statement  "                filebody = String.Format("{0}\\{1}_{2}{3'2:D2}{4'2:D2}"' opt.DefaultLogDirectory' ReplaceCharForLogFile(settings.Caption)' now.Year' now.Month' now.Day); " is 153.
Long Statement,Poderosa.Terminal,LogService,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Logger.cs,ReplaceCharForLogFile,The length of the statement  "                if (ch == '\\' || ch == '/' || ch == ':' || ch == ';' || ch == ''' || ch == '*' || ch == '?' || ch == '"' || ch == '<' || ch == '>' || ch == '|') " is 145.
Long Statement,Poderosa.Terminal,TerminalOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Options.cs,DefineItems,The length of the statement  "            _fontSize = builder.DefineIntValue(_folder' "fontSize"' 10' PreferenceValidatorUtil.PositiveIntegerValidator); //floatにすべきかなあ " is 125.
Long Statement,Poderosa.Terminal,TerminalOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Options.cs,DefineItems,The length of the statement  "            _textColor = new ColorPreferenceItem(builder.DefineStringValue(_folder' "textColor"' "WindowText"' null)' KnownColor.WindowText); " is 129.
Long Statement,Poderosa.Terminal,TerminalOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Options.cs,DefineItems,The length of the statement  "            _imageStyle = new EnumPreferenceItem<ImageStyle>(builder.DefineStringValue(_folder' "imageStyle"' "Center"' null)' ImageStyle.Center); " is 134.
Long Statement,Poderosa.Terminal,TerminalOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Options.cs,DefineItems,The length of the statement  "            _caretType = new EnumPreferenceItem<CaretType>(builder.DefineStringValue(_folder' "caretType"' "Box"' null)' CaretType.Box); " is 124.
Long Statement,Poderosa.Terminal,TerminalOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Options.cs,DefineItems,The length of the statement  "            _charDecodeErrorBehavior = new EnumPreferenceItem<WarningOption>(builder.DefineStringValue(_folder' "charDecodeErrorBehavior"' "MessageBox"' null)' WarningOption.MessageBox); " is 174.
Long Statement,Poderosa.Terminal,TerminalOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Options.cs,DefineItems,The length of the statement  "            _disconnectNotification = new EnumPreferenceItem<WarningOption>(builder.DefineStringValue(_folder' "disconnectNotification"' "StatusBar"' null)' WarningOption.StatusBar); " is 170.
Long Statement,Poderosa.Terminal,TerminalOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Options.cs,DefineItems,The length of the statement  "            _enableComplementForNewConnections = builder.DefineBoolValue(_folder' "enableComplementForNewConnections"' false' null); " is 120.
Long Statement,Poderosa.Terminal,TerminalOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Options.cs,DefineItems,The length of the statement  "            _terminalBufferSize = builder.DefineIntValue(_folder' "terminalBufferSize"' 1000' PreferenceValidatorUtil.PositiveIntegerValidator); " is 132.
Long Statement,Poderosa.Terminal,TerminalOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Options.cs,DefineItems,The length of the statement  "            _zone0x1F = new EnumPreferenceItem<KeyboardStyle>(builder.DefineStringValue(_folder' "zone0x1F"' "None"' null)' KeyboardStyle.None); " is 132.
Long Statement,Poderosa.Terminal,TerminalOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Options.cs,DefineItems,The length of the statement  "            _keepAliveInterval = builder.DefineIntValue(_folder' "keepAliveInterval"' 60000' PreferenceValidatorUtil.IntRangeValidator(0' 100 * 60000)); " is 140.
Long Statement,Poderosa.Terminal,TerminalOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Options.cs,DefineItems,The length of the statement  "            _leftAltKey = new EnumPreferenceItem<AltKeyAction>(builder.DefineStringValue(_folder' "leftAltKey"' "Menu"' null)' AltKeyAction.Menu); " is 134.
Long Statement,Poderosa.Terminal,TerminalOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Options.cs,DefineItems,The length of the statement  "            _rightAltKey = new EnumPreferenceItem<AltKeyAction>(builder.DefineStringValue(_folder' "rightAltKey"' "Menu"' null)' AltKeyAction.Menu); " is 136.
Long Statement,Poderosa.Terminal,TerminalOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Options.cs,DefineItems,The length of the statement  "            _rightButtonAction = new EnumPreferenceItem<MouseButtonAction>(builder.DefineStringValue(_folder' "rightButtonAction"' "ContextMenu"' null)' MouseButtonAction.ContextMenu); " is 172.
Long Statement,Poderosa.Terminal,TerminalOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Options.cs,DefineItems,The length of the statement  "            _middleButtonAction = new EnumPreferenceItem<MouseButtonAction>(builder.DefineStringValue(_folder' "middleButtonAction"' "None"' null)' MouseButtonAction.None); " is 160.
Long Statement,Poderosa.Terminal,TerminalOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Options.cs,DefineItems,The length of the statement  "            _defaultLogType = new EnumPreferenceItem<LogType>(builder.DefineStringValue(_folder' "defaultLogType"' "None"' null)' LogType.None); " is 132.
Long Statement,Poderosa.Terminal,TerminalOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Options.cs,DefineItems,The length of the statement  "            _intelliSenseKey = builder.DefineStringValue(_folder' "intelliSenseKey"' "Ctrl+OemPeriod"' PreferenceValidatorUtil.KeyWithModifierValidator); " is 141.
Long Statement,Poderosa.Terminal,TerminalOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Options.cs,DefineItems,The length of the statement  "            _commandPopupKey = builder.DefineStringValue(_folder' "commandPopupKey"' "Ctrl+Oemcomma"' PreferenceValidatorUtil.KeyWithModifierValidator); " is 140.
Long Statement,Poderosa.Terminal,TerminalOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Options.cs,DefineItems,The length of the statement  "            _shellHistoryLimitCount = builder.DefineIntValue(_folder' "shellHistoryLimitCount"' 100' PreferenceValidatorUtil.PositiveIntegerValidator); " is 139.
Long Statement,Poderosa.Terminal,PromptRecognizer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\PromptRecognizer.cs,Recognize,The length of the statement  "            if (!DeterminePromptLine(promptCandidate' doc.CurrentLine.ID' doc.CaretColumn' out prompt' out command)) { //プロンプトではないとき " is 120.
Long Statement,Poderosa.Terminal,PromptRecognizerPreferences,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\PromptRecognizer.cs,InitializePreference,The length of the statement  "            _promptSearchMaxLines = builder.DefineIntValue(folder' "promptSearchMaxLines"' DEFAULT_PROMPT_SEARCH_MAX_LINES' PreferenceValidatorUtil.PositiveIntegerValidator); " is 162.
Long Statement,Poderosa.Terminal,ShellSchemeCollection,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\ShellScheme.cs,InitializePreference,The length of the statement  "            _promptPreference = builder.DefineStringValue(_schemeTemplate' "prompt"' GenericShellScheme.DEFAULT_PROMPT_REGEX' null); " is 120.
Long Statement,Poderosa.Terminal,ShellSchemeCollection,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\ShellScheme.cs,PreClose,The length of the statement  "                    _preferenceFolderArray.ConvertItem(content' _backspacePreference).AsString().Value = ((int)ss.BackSpaceChar).ToString("X2"); " is 124.
Long Statement,Poderosa.Terminal,AbstractTerminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalBase.cs,InvalidCharDetected,The length of the statement  "            CharDecodeError(String.Format(GEnv.Strings.GetString("Message.AbstractTerminal.UnexpectedChar")' EncodingProfile.Get(GetTerminalSettings().Encoding).Encoding.WebName)); " is 168.
Long Statement,Poderosa.Terminal,AbstractTerminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalBase.cs,OnReception,The length of the statement  "                        //Debug.WriteLine(String.Format("E={0} C={1} T={2} H={3} LC={4} MAX={5} n={6}"' _transientScrollBarEnabled' _tag.Document.CurrentLineNumber' _tag.Document.TopLineNumber' _tag.Connection.TerminalHeight' _transientScrollBarLargeChange' _transientScrollBarMaximum' n)); " is 266.
Long Statement,Poderosa.Terminal,AbstractTerminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalBase.cs,OnAbnormalTermination,The length of the statement  "            //TODO メッセージを GEnv.Strings.GetString("Message.TerminalDataReceiver.GenericError")'_tag.Connection.Param.ShortDescription' msg " is 125.
Long Statement,Poderosa.Terminal,AbstractTerminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalBase.cs,Cleanup,The length of the statement  "            //NOTE _session.CloseByReceptionThread()は、そのままアプリ終了と直結する場合がある。すると、_logService.Close()の処理が終わらないうちに強制終了になってログが書ききれない可能性がある " is 120.
Long Statement,Poderosa.Terminal,AbstractTerminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalBase.cs,CleanupCommon,The length of the statement  "                TerminalEmulatorPlugin.Instance.ShellSchemeCollection.RemoveDynamicChangeListener((IShellSchemeDynamicChangeListener)GetTerminalSettings().GetAdapter(typeof(IShellSchemeDynamicChangeListener))); " is 194.
Long Statement,Poderosa.Terminal,AbstractTerminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalBase.cs,AdjustTransientScrollBar,The length of the statement  "            int docheight = Math.Max(document.LastLineNumber' document.TopLineNumber + paneheight - 1) - document.FirstLineNumber + 1; " is 122.
Long Statement,Poderosa.Terminal,EscapeSequenceTerminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalBase.cs,ProcessChar,The length of the statement  "                    RuntimeUtil.SilentReportException(new UnknownEscapeSequenceException("Incomplete escape sequence: ESC " + _escapeSequence.ToString())); " is 135.
Long Statement,Poderosa.Terminal,EscapeSequenceTerminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalBase.cs,ProcessChar,The length of the statement  "                    end_flag = ('0' <= ch && ch <= '9') || ('a' <= ch && ch <= 'z') || ('A' <= ch && ch <= 'Z') || ch == '>' || ch == '=' || ch == '|' || ch == '}' || ch == '~'; " is 157.
Long Statement,Poderosa.Terminal,TerminalCommand,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalCommands.cs,Register,The length of the statement  "                "Command.SelectAll"' _terminalEdit' new ExecuteDelegate(CmdSelectAll)' TerminalCommand.DoesExistCharacterDocumentViewer)); " is 122.
Long Statement,Poderosa.Terminal,TerminalCommand,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalCommands.cs,Register,The length of the statement  "            //cm.Register(new TerminalCommand("org.poderosa.terminalemulator.reproduce"' new ExecuteDelegate(CmdReproduce)' new EnabledDelegate(DoesOpenTargetSession))); " is 157.
Long Statement,Poderosa.Terminal,TerminalSettingMenuGroup,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalCommands.cs,GetTerminalSpecialMenuGroups,The length of the statement  "            return (IPoderosaMenuGroup[])TerminalEmulatorPlugin.Instance.PoderosaWorld.PluginManager.FindExtensionPoint(TerminalEmulatorConstants.TERMINALSPECIAL_EXTENSIONPOINT).GetExtensions(); " is 182.
Long Statement,Poderosa.Terminal,TerminalSettingMenuGroup,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalCommands.cs,Initialize,The length of the statement  "            IExtensionPoint p = TerminalEmulatorPlugin.Instance.PoderosaWorld.PluginManager.CreateExtensionPoint(TerminalEmulatorConstants.TERMINALSPECIAL_EXTENSIONPOINT' typeof(IPoderosaMenuGroup)' TerminalEmulatorPlugin.Instance); " is 220.
Long Statement,Poderosa.Terminal,TerminalControl,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,MakeCurrentLineVisible,The length of the statement  "            else if (_VScrollBar.Value + document.TerminalHeight <= document.CurrentLineNumber - document.FirstLineNumber) { //下に隠れた " is 120.
Long Statement,Poderosa.Terminal,TerminalControl,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,OnResize,The length of the statement  "            //Debug.WriteLine(String.Format("TC RESIZE {0} {1} {2}'{3}"' _resizeCount++' DateTime.Now.ToString()' this.Size.Width' this.Size.Height)); " is 138.
Long Statement,Poderosa.Terminal,TerminalControl,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,OnResize,The length of the statement  "            if (this.DesignMode || this.FindForm() == null || this.FindForm().WindowState == FormWindowState.Minimized || _session == null) " is 127.
Long Statement,Poderosa.Terminal,TerminalControl,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,CalcTerminalSize,The length of the statement  "            int width = (int)Math.Floor((float)(this.ClientSize.Width - sm.ScrollBarWidth - CharacterDocumentViewer.BORDER * 2) / charPitch.Width); " is 135.
Long Statement,Poderosa.Terminal,TerminalControl,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,CalcTerminalSize,The length of the statement  "            int height = (int)Math.Floor((float)(this.ClientSize.Height - CharacterDocumentViewer.BORDER * 2 + prof.LineSpacing) / (charPitch.Height + prof.LineSpacing)); " is 158.
Long Statement,Poderosa.Terminal,TerminalControl,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,AdjustIMEComposition,The length of the statement  "            //Debug.WriteLine(String.Format("{0} {1} {2}"' document.CaretColumn' charwidth' document.CurrentLine.CharPosToDisplayPos(document.CaretColumn))); " is 145.
Long Statement,Poderosa.Terminal,TerminalControl,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,AdjustIMEComposition,The length of the statement  "            form.ptCurrentPos.y = sm.ControlBorderHeight + (int)((prof.Pitch.Height + prof.LineSpacing) * (document.CurrentLineNumber - document.TopLineNumber)); " is 149.
Long Statement,Poderosa.Terminal,TerminalControl,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,OnGotFocus,The length of the statement  "                TerminalEmulatorPlugin.Instance.GetSessionManager().ActivateDocument(this.CharacterDocument' ActivateReason.ViewGotFocus); " is 122.
Long Statement,Poderosa.Terminal,TerminalEmulatorMouseHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,OnMouseUp,The length of the statement  "                        TerminalEmulatorPlugin.Instance.GetCommandManager().Execute(vc.Paste' (ICommandTarget)vc.GetAdapter(typeof(ICommandTarget))); " is 125.
Long Statement,Poderosa.Terminal,TerminalEmulatorMouseHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,ShowContextMenu,The length of the statement  "            view.ParentForm.ShowContextMenu(TerminalEmulatorPlugin.Instance.ContextMenu' view' _control.PointToScreen(pt)' ContextMenuFlags.None); " is 134.
Long Statement,Poderosa.Terminal,DrawingPerformance,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,Output,The length of the statement  "            Debug.WriteLine(String.Format("FullInvalidate:{0} PartialInvalidate:{1} 1-Line:{2} AvgLine:{3:F2}"' _fullInvalidateCount' _partialInvalidateCount' _invalidate1LineCount' (double)_totalInvalidatedLineCount / _partialInvalidateCount)); " is 233.
Long Statement,Poderosa.Terminal,TerminalEmulatorPlugin,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalEmulatorPlugin.cs,InitializePlugin,The length of the statement  "            _contextMenu = pm.CreateExtensionPoint(TerminalEmulatorConstants.TERMINAL_CONTEXT_MENU_EXTENSIONPOINT' typeof(IPoderosaMenuGroup)' this); " is 137.
Long Statement,Poderosa.Terminal,TerminalEmulatorPlugin,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalEmulatorPlugin.cs,InitializePlugin,The length of the statement  "            _documentContextMenu = pm.CreateExtensionPoint(TerminalEmulatorConstants.DOCUMENT_CONTEXT_MENU_EXTENSIONPOINT' typeof(IPoderosaMenuGroup)' this); " is 145.
Long Statement,Poderosa.Terminal,TerminalEmulatorPlugin,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalEmulatorPlugin.cs,InitializePlugin,The length of the statement  "            _intelliSenseExtension = pm.CreateExtensionPoint(TerminalEmulatorConstants.INTELLISENSE_CANDIDATE_EXTENSIONPOINT' typeof(IIntelliSenseCandidateExtension)' this); " is 161.
Long Statement,Poderosa.Terminal,TerminalEmulatorPlugin,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalEmulatorPlugin.cs,InitializePlugin,The length of the statement  "            _autoLogFileFormatter = pm.CreateExtensionPoint(TerminalEmulatorConstants.LOG_FILENAME_FORMATTER_EXTENSIONPOINT' typeof(IAutoLogFileFormatter)' this); " is 150.
Long Statement,Poderosa.Terminal,TerminalEmulatorPlugin,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalEmulatorPlugin.cs,InitializePlugin,The length of the statement  "            _dynamicCaptionFormatter = pm.CreateExtensionPoint(TerminalEmulatorConstants.DYNAMIC_CAPTION_FORMATTER_EXTENSIONPOINT' typeof(IDynamicCaptionFormatter)' this); " is 159.
Long Statement,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessDeviceStatusReport,The length of the statement  "                response = String.Format(" [{0};{1}R"' GetDocument().CurrentLineNumber - GetDocument().TopLineNumber + 1' _manipulator.CaretColumn + 1); " is 136.
Long Statement,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,Index,The length of the statement  "            if (current == GetDocument().TopLineNumber + GetDocument().TerminalHeight - 1 || current == GetDocument().ScrollingBottom) " is 122.
Long Statement,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ChangeMode,The length of the statement  "                GetConnection().TerminalOutput.Resize(GetDocument().TerminalWidth' GetDocument().TerminalHeight); //たとえばemacs起動中にリサイズし、シェルへ戻るとシェルは新しいサイズを認識していない " is 144.
Long Statement,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessMouse,The length of the statement  "            MouseTrackingState currentState = _mouseTrackingState;  // copy value because _mouseTrackingState may be changed in another thread. " is 131.
Long Statement,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessMouse,The length of the statement  "            MouseTrackingProtocol protocol = _mouseTrackingProtocol; // copy value because _mouseTrackingProtocol may be changed in another thread. " is 135.
Long Statement,Poderosa.Terminal,XTermPreferences,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,InitializePreference,The length of the statement  "            _modifyCursorKeys = builder.DefineIntValue(folder' "modifyCursorKeys"' DEFAULT_MODIFY_CURSOR_KEYS' PreferenceValidatorUtil.PositiveIntegerValidator); " is 149.
Long Statement,Poderosa.UI,GButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GButton.cs,DrawBackground,The length of the statement  "                    g.DrawRectangle(state == DrawState.Disabled ? SystemPens.ControlDark : SystemPens.ControlDarkDark' rc.Left' rc.Top' rc.Width - 1' rc.Height - 1); " is 145.
Long Statement,Poderosa.UI,GMenuItem,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GMenuItem.cs,DrawMenuText,The length of the statement  "                e.Graphics.DrawLine(_menuLightPen' e.Bounds.X + Consts.PIC_AREA_SIZE + 6' e.Bounds.Y + 2' e.Bounds.Width' e.Bounds.Y + 2); " is 122.
Long Statement,Poderosa.UI,HotKey,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\HotKey.cs,IsTerminalKey,The length of the statement  "                key == Keys.Home || key == Keys.End || key == Keys.Next || key == Keys.Prior || key == Keys.PageDown || key == Keys.PageUp || " is 125.
Long Statement,Poderosa.UI,PaneDivision,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneDivision.cs,CreateDivisionNodeList,The length of the statement  "                    DockStyle dock = tag.Next == null ? (info.Direction == Direction.TB ? DockStyle.Bottom : DockStyle.Right) : DockStyle.Fill; " is 123.
Long Statement,Poderosa.UI,DivisionNode,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneDivision.cs,AdjustSplitPosition,The length of the statement  "                            new Size(size.Width' size.Height - PaneSplitter.SPLITTER_WIDTH - splitpos) : new Size(size.Width - PaneSplitter.SPLITTER_WIDTH - splitpos' size.Height); " is 152.
Long Statement,Poderosa.UI,PaneSplitter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneSplitter.cs,OnPaint,The length of the statement  "                g.FillRectangle(_isHot ? _hotBrush : SystemBrushes.Control' new Rectangle(_tagRect.X' _tagRect.Y' SPLITTER_WIDTH' TAG_LENGTH)); " is 127.
Long Statement,Poderosa.UI,PaneSplitter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneSplitter.cs,OnPaint,The length of the statement  "                g.FillRectangle(_isHot ? _hotBrush : SystemBrushes.Control' new Rectangle(_tagRect.X' _tagRect.Y' TAG_LENGTH' SPLITTER_WIDTH)); " is 127.
Long Statement,Poderosa.UI,SplitMarkSupport,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneSplitter.cs,OnPaint,The length of the statement  "                DrawMark(g' _elementBottom' new Rectangle(mid - size.Width / 2' _output.SplitClientHeight - size.Height' size.Width' size.Height)); " is 131.
Long Statement,Poderosa.UI,SplitMarkSupport,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneSplitter.cs,OnPaint,The length of the statement  "                DrawMark(g' _elementRight' new Rectangle(_output.SplitClientWidth - size.Width' mid - size.Height / 2' size.Width' size.Height)); " is 129.
Long Statement,Poderosa.UI,IconUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\Util.cs,CreateColoredIcon,The length of the statement  "                    g.DrawImage(mask' new Rectangle(0' 0' mask.Width' mask.Height)' 0' 0' mask.Width' mask.Height' GraphicsUnit.Pixel' attr); " is 121.
Complex Conditional,Poderosa.View,CharacterDocumentViewer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CharacterDocumentViewer.cs,BuildTransientDocument,The conditional expression  "pos >= 0 && pos < l.DisplayLength && index >= 0 && index < _transientLines.Count"  is complex.
Complex Conditional,Poderosa.Document,ASCIIWordBreakTable,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\GLine.cs,Reset,The conditional expression  "('0' <= c && c <= '9') || ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z') || c == '_'"  is complex.
Complex Conditional,Granados.Crypto,Bcrypt,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,BcryptPbkdf,The conditional expression  "pass.Length == 0 || salt.Length == 0 || keylen <= 0 || keylen > 1024"  is complex.
Complex Conditional,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,Test,The conditional expression  "w.Length < 3 || w[0].Length != 16 || w[1].Length != 16 || w[2].Length != 16"  is complex.
Complex Conditional,Granados.PKI,EllipticCurve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,TestSignatureVerification,The conditional expression  "msg != null && qx != null && qy != null && r != null && s != null"  is complex.
Complex Conditional,Granados.PKI,EllipticCurveFp,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,ValidatePoint,The conditional expression  "x == 0 || x >= p || y == 0 || y >= p"  is complex.
Complex Conditional,Granados.PKI,ECDSAPublicKey,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,Verify,The conditional expression  "r == 0 || r >= _curve.Order || s == 0 || s >= _curve.Order"  is complex.
Complex Conditional,Granados.Poderosa.KeyFormat,BERReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\BERReader.cs,ReadTag,The conditional expression  "ReadTagInfo(ref tagInfo)                  && tagInfo.ClassBits == (int)tagClass                  && tagInfo.IsConstructed == isConstructed                  && tagInfo.TagNumber == tagNumber"  is complex.
Complex Conditional,Granados.Poderosa.KeyFormat,OpenSSHPKCSFileLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\OpenSSHPrivateKeyLoader.cs,Load,The conditional expression  "!reader.ReadInteger(out v) ||                          !reader.ReadInteger(out n) ||                          !reader.ReadInteger(out e) ||                          !reader.ReadInteger(out d) ||                          !reader.ReadInteger(out p) ||                          !reader.ReadInteger(out q) ||                          !reader.ReadInteger(out dmp1) ||                          !reader.ReadInteger(out dmq1) ||                          !reader.ReadInteger(out iqmp)"  is complex.
Complex Conditional,Granados.Poderosa.KeyFormat,OpenSSHPKCSFileLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\OpenSSHPrivateKeyLoader.cs,Load,The conditional expression  "!reader.ReadInteger(out v) ||                          !reader.ReadInteger(out p) ||                          !reader.ReadInteger(out q) ||                          !reader.ReadInteger(out g) ||                          !reader.ReadInteger(out y) ||                          !reader.ReadInteger(out x)"  is complex.
Complex Conditional,Granados.Poderosa.KeyFormat,OpenSSHPKCSFileLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\OpenSSHPrivateKeyLoader.cs,Load,The conditional expression  "!reader.ReadInteger(out v) ||                          !reader.ReadOctetString(out privateKey) ||                          !reader.ReadTag(BERReader.TagClass.ContextSpecific' true' 0' out len) ||                          !reader.ReadObjectIdentifier(out namedCurve) ||                          !reader.ReadTag(BERReader.TagClass.ContextSpecific' true' 1' out len) ||                          !reader.ReadBitString(out publicKey)"  is complex.
Complex Conditional,Granados.Poderosa.KeyFormat,PrivateKeyLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\PrivateKeyLoader.cs,ProbeFormat,The conditional expression  "ByteArrayUtil.ByteArrayStartsWith(keyFile' Encoding.ASCII.GetBytes(PrivateKeyFileHeader.SSH2_OPENSSH_HEADER_RSA))                  || ByteArrayUtil.ByteArrayStartsWith(keyFile' Encoding.ASCII.GetBytes(PrivateKeyFileHeader.SSH2_OPENSSH_HEADER_DSA))                  || ByteArrayUtil.ByteArrayStartsWith(keyFile' Encoding.ASCII.GetBytes(PrivateKeyFileHeader.SSH2_OPENSSH_HEADER_ECDSA))                  || ByteArrayUtil.ByteArrayStartsWith(keyFile' Encoding.ASCII.GetBytes(PrivateKeyFileHeader.SSH2_OPENSSH_HEADER_OPENSSH))"  is complex.
Complex Conditional,Poderosa.Protocols,TelnetSocket,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\TerminalConnection.cs,WriteEscaping,The conditional expression  "t == 0x0D && !(_telnetNewLine && i + 1 < length && buf[offset + i + 1] == 0x0A)"  is complex.
Complex Conditional,Poderosa.Terminal,LogService,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Logger.cs,ReplaceCharForLogFile,The conditional expression  "ch == '\\' || ch == '/' || ch == ':' || ch == ';' || ch == ''' || ch == '*' || ch == '?' || ch == '"' || ch == '<' || ch == '>' || ch == '|'"  is complex.
Complex Conditional,Poderosa.Terminal,TerminalControl,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,OnResize,The conditional expression  "this.DesignMode || this.FindForm() == null || this.FindForm().WindowState == FormWindowState.Minimized || _session == null"  is complex.
Complex Conditional,Poderosa.Terminal,TerminalSettings,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalSettings.cs,TerminalSettings,The conditional expression  "culture.IsJapaneseOS || culture.IsSimplifiedChineseOS || culture.IsTraditionalChineseOS || culture.IsKoreanOS"  is complex.
Complex Conditional,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessAfterOSC,The conditional expression  "vals.Length == 3                                  && vals[0].Length == vals[1].Length                                  && vals[0].Length == vals[2].Length                                  && vals[0].Length > 0                                  && vals[0].Length <= 4                                  && Int32.TryParse(vals[0]' NumberStyles.AllowHexSpecifier' NumberFormatInfo.InvariantInfo' out r)                                  && Int32.TryParse(vals[1]' NumberStyles.AllowHexSpecifier' NumberFormatInfo.InvariantInfo' out g)                                  && Int32.TryParse(vals[2]' NumberStyles.AllowHexSpecifier' NumberFormatInfo.InvariantInfo' out b)"  is complex.
Empty Catch Block,Poderosa.Sessions,TerminalSession,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TerminalSession.cs,InternalTerminate,The method has an empty catch block.
Empty Catch Block,Granados.X11,X11ChannelHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11ConnectionManager.cs,OnDataFromXServer,The method has an empty catch block.
Empty Catch Block,Poderosa.Protocols,SSHSocket,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\SSHSocket.cs,SendKeepAliveData,The method has an empty catch block.
Empty Catch Block,Poderosa.Protocols,SSHSocket,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\SSHSocket.cs,SendKeepAliveData,The method has an empty catch block.
Empty Catch Block,Poderosa.Protocols,TelnetSocket,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\TerminalConnection.cs,SendKeepAliveData,The method has an empty catch block.
Empty Catch Block,Poderosa.Protocols,TelnetSocket,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\TerminalConnection.cs,SendKeepAliveData,The method has an empty catch block.
Empty Catch Block,Poderosa.Session,StoragePerWindow<T>,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\StoragePerWindow.cs,FindStorageItem,The method has an empty catch block.
Magic Number,Poderosa.Forms,AboutBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Location = new System.Drawing.Point(176' 192);
Magic Number,Poderosa.Forms,AboutBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Location = new System.Drawing.Point(176' 192);
Magic Number,Poderosa.Forms,AboutBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Size = new System.Drawing.Size(88' 23);
Magic Number,Poderosa.Forms,AboutBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Size = new System.Drawing.Size(88' 23);
Magic Number,Poderosa.Forms,AboutBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this._versionText.Location = new System.Drawing.Point(0' 88);
Magic Number,Poderosa.Forms,AboutBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this._versionText.Size = new System.Drawing.Size(280' 96);
Magic Number,Poderosa.Forms,AboutBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this._versionText.Size = new System.Drawing.Size(280' 96);
Magic Number,Poderosa.Forms,AboutBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this._versionText.TabIndex = 2;
Magic Number,Poderosa.Forms,AboutBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this._pictureBox.Size = new System.Drawing.Size(280' 88);
Magic Number,Poderosa.Forms,AboutBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this._pictureBox.Size = new System.Drawing.Size(280' 88);
Magic Number,Poderosa.Forms,AboutBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this._pictureBox.TabIndex = 3;
Magic Number,Poderosa.Forms,AboutBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this._creditButton.Location = new System.Drawing.Point(8' 192);
Magic Number,Poderosa.Forms,AboutBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this._creditButton.Location = new System.Drawing.Point(8' 192);
Magic Number,Poderosa.Forms,AboutBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this._creditButton.Size = new System.Drawing.Size(88' 23);
Magic Number,Poderosa.Forms,AboutBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this._creditButton.Size = new System.Drawing.Size(88' 23);
Magic Number,Poderosa.Forms,AboutBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this._creditButton.TabIndex = 5;
Magic Number,Poderosa.Forms,AboutBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 12);
Magic Number,Poderosa.Forms,AboutBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 12);
Magic Number,Poderosa.Forms,AboutBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(282' 224);
Magic Number,Poderosa.Forms,AboutBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(282' 224);
Magic Number,Poderosa.Forms,AboutBoxUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\AboutBoxEx.cs,GetVersionInfoContent,The following statement contains a magic number: string[] s = new string[6];
Magic Number,Poderosa.Forms,AboutBoxUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\AboutBoxEx.cs,GetVersionInfoContent,The following statement contains a magic number: s[2] = "All Rights Reserved.";
Magic Number,Poderosa.Forms,AboutBoxUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\AboutBoxEx.cs,GetVersionInfoContent,The following statement contains a magic number: s[3] = "";
Magic Number,Poderosa.Forms,AboutBoxUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\AboutBoxEx.cs,GetVersionInfoContent,The following statement contains a magic number: s[4] = " Version : " + VersionInfo.PODEROSA_VERSION;
Magic Number,Poderosa.Forms,AboutBoxUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\AboutBoxEx.cs,GetVersionInfoContent,The following statement contains a magic number: s[5] = " CLR     : " + System.Environment.Version.ToString();
Magic Number,Poderosa.Forms,Credits,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Credits.cs,InitializeComponent,The following statement contains a magic number: this._pictureBox.Size = new System.Drawing.Size(288' 80);
Magic Number,Poderosa.Forms,Credits,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Credits.cs,InitializeComponent,The following statement contains a magic number: this._pictureBox.Size = new System.Drawing.Size(288' 80);
Magic Number,Poderosa.Forms,Credits,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Credits.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Location = new System.Drawing.Point(104' 216);
Magic Number,Poderosa.Forms,Credits,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Credits.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Location = new System.Drawing.Point(104' 216);
Magic Number,Poderosa.Forms,Credits,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Credits.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Poderosa.Forms,Credits,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Credits.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Poderosa.Forms,Credits,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Credits.cs,InitializeComponent,The following statement contains a magic number: this._okButton.TabIndex = 2;
Magic Number,Poderosa.Forms,Credits,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Credits.cs,InitializeComponent,The following statement contains a magic number: this._mainPanel.Location = new System.Drawing.Point(0' 80);
Magic Number,Poderosa.Forms,Credits,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Credits.cs,InitializeComponent,The following statement contains a magic number: this._mainPanel.Size = new System.Drawing.Size(288' 128);
Magic Number,Poderosa.Forms,Credits,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Credits.cs,InitializeComponent,The following statement contains a magic number: this._mainPanel.Size = new System.Drawing.Size(288' 128);
Magic Number,Poderosa.Forms,Credits,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Credits.cs,InitializeComponent,The following statement contains a magic number: this._mainPanel.TabIndex = 3;
Magic Number,Poderosa.Forms,Credits,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Credits.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 12);
Magic Number,Poderosa.Forms,Credits,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Credits.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 12);
Magic Number,Poderosa.Forms,Credits,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Credits.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(290' 242);
Magic Number,Poderosa.Forms,Credits,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Credits.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(290' 242);
Magic Number,Poderosa.Forms,Credits,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Credits.cs,OnLoad,The following statement contains a magic number: _boldFont = new Font(_mainPanel.Font.FontFamily' 11.25f' FontStyle.Bold);
Magic Number,Poderosa.Forms,Credits,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Credits.cs,OnLoad,The following statement contains a magic number: _timer.Interval = 50;
Magic Number,Poderosa.Forms,Credits,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Credits.cs,OnTimer,The following statement contains a magic number: ++_creditStep == 30
Magic Number,Poderosa.Forms,Credits,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Credits.cs,OnPaintCredit,The following statement contains a magic number: col = ColorUtil.CalculateColor(SystemColors.WindowText' SystemColors.Window' _creditStep * (255 / 10));
Magic Number,Poderosa.Forms,Credits,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Credits.cs,OnPaintCredit,The following statement contains a magic number: col = ColorUtil.CalculateColor(SystemColors.WindowText' SystemColors.Window' _creditStep * (255 / 10));
Magic Number,Poderosa.Forms,Credits,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Credits.cs,OnPaintCredit,The following statement contains a magic number: _creditStep < 10
Magic Number,Poderosa.Forms,Credits,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Credits.cs,OnPaintCredit,The following statement contains a magic number: float y = (_mainPanel.Height - (name_size.Height * (1 + grp._credits.Length))) / 2;
Magic Number,Poderosa.Forms,Credits,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Credits.cs,DrawString,The following statement contains a magic number: g.DrawString(text' font' br' (_mainPanel.Width - sz.Width) / 2' y);
Magic Number,Poderosa.Forms,ExtensionPointList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this._list.Size = new System.Drawing.Size(558' 209);
Magic Number,Poderosa.Forms,ExtensionPointList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this._list.Size = new System.Drawing.Size(558' 209);
Magic Number,Poderosa.Forms,ExtensionPointList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this._idHeader.Width = 200;
Magic Number,Poderosa.Forms,ExtensionPointList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this._ownerHeader.Width = 200;
Magic Number,Poderosa.Forms,ExtensionPointList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this._countHeader.Width = 100;
Magic Number,Poderosa.Forms,ExtensionPointList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Location = new System.Drawing.Point(389' 214);
Magic Number,Poderosa.Forms,ExtensionPointList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Location = new System.Drawing.Point(389' 214);
Magic Number,Poderosa.Forms,ExtensionPointList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Poderosa.Forms,ExtensionPointList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Poderosa.Forms,ExtensionPointList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Location = new System.Drawing.Point(470' 214);
Magic Number,Poderosa.Forms,ExtensionPointList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Location = new System.Drawing.Point(470' 214);
Magic Number,Poderosa.Forms,ExtensionPointList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Poderosa.Forms,ExtensionPointList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Poderosa.Forms,ExtensionPointList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.TabIndex = 2;
Magic Number,Poderosa.Forms,ExtensionPointList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 12F);
Magic Number,Poderosa.Forms,ExtensionPointList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 12F);
Magic Number,Poderosa.Forms,ExtensionPointList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(557' 243);
Magic Number,Poderosa.Forms,ExtensionPointList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(557' 243);
Magic Number,Poderosa.Forms,FixedShortcutKeyHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\MainWindow.cs,OnKeyProcess,The following statement contains a magic number: modifier == Keys.Alt && n >= 0 && n <= 8
Magic Number,Poderosa.Forms,PluginList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._list.Size = new System.Drawing.Size(558' 209);
Magic Number,Poderosa.Forms,PluginList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._list.Size = new System.Drawing.Size(558' 209);
Magic Number,Poderosa.Forms,PluginList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._enableHeader.Width = 38;
Magic Number,Poderosa.Forms,PluginList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._idHeader.Width = 200;
Magic Number,Poderosa.Forms,PluginList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._versionHeader.Width = 71;
Magic Number,Poderosa.Forms,PluginList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._venderHeader.Width = 120;
Magic Number,Poderosa.Forms,PluginList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Location = new System.Drawing.Point(389' 214);
Magic Number,Poderosa.Forms,PluginList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Location = new System.Drawing.Point(389' 214);
Magic Number,Poderosa.Forms,PluginList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Poderosa.Forms,PluginList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Poderosa.Forms,PluginList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Location = new System.Drawing.Point(470' 214);
Magic Number,Poderosa.Forms,PluginList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Location = new System.Drawing.Point(470' 214);
Magic Number,Poderosa.Forms,PluginList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Poderosa.Forms,PluginList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Poderosa.Forms,PluginList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.TabIndex = 2;
Magic Number,Poderosa.Forms,PluginList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._createShortcutButton.Location = new System.Drawing.Point(13' 214);
Magic Number,Poderosa.Forms,PluginList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._createShortcutButton.Location = new System.Drawing.Point(13' 214);
Magic Number,Poderosa.Forms,PluginList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._createShortcutButton.Size = new System.Drawing.Size(140' 23);
Magic Number,Poderosa.Forms,PluginList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._createShortcutButton.Size = new System.Drawing.Size(140' 23);
Magic Number,Poderosa.Forms,PluginList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._createShortcutButton.TabIndex = 3;
Magic Number,Poderosa.Forms,PluginList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 12F);
Magic Number,Poderosa.Forms,PluginList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 12F);
Magic Number,Poderosa.Forms,PluginList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(557' 243);
Magic Number,Poderosa.Forms,PluginList,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(557' 243);
Magic Number,Poderosa.Forms,PoderosaForm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\PoderosaForm.cs,ContextMenuStripVisibleChanged,The following statement contains a magic number: _contextMenuDisposeTimer.Interval = 500;
Magic Number,Poderosa.Forms,PopupViewContainer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\PopupViewContainer.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 12F);
Magic Number,Poderosa.Forms,PopupViewContainer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\PopupViewContainer.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 12F);
Magic Number,Poderosa.Forms,PoderosaStatusBar,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\StatusBar.cs,PoderosaStatusBar,The following statement contains a magic number: _timer.Interval = 800;
Magic Number,Poderosa.Forms,PoderosaStatusBar,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\StatusBar.cs,CreateIconPane,The following statement contains a magic number: l.Size = new Size(18' 18);
Magic Number,Poderosa.Forms,PoderosaStatusBar,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\StatusBar.cs,CreateIconPane,The following statement contains a magic number: l.Size = new Size(18' 18);
Magic Number,Poderosa.Forms,PoderosaToolStripContainer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\ToolBar.cs,CreateInternal,The following statement contains a magic number: Point pt = new Point(TryParseInt(locations' index * 2)' TryParseInt(locations' index * 2 + 1));
Magic Number,Poderosa.Forms,PoderosaToolStripContainer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\ToolBar.cs,CreateInternal,The following statement contains a magic number: Point pt = new Point(TryParseInt(locations' index * 2)' TryParseInt(locations' index * 2 + 1));
Magic Number,Poderosa.Forms,PoderosaToolStripContainer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\ToolBar.cs,DefineCommandButton,The following statement contains a magic number: button.Size = new Size(24' 23);
Magic Number,Poderosa.Forms,PoderosaToolStripContainer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\ToolBar.cs,DefineCommandButton,The following statement contains a magic number: button.Size = new Size(24' 23);
Magic Number,Poderosa.Forms,MainWindowArgument,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\WindowManager.cs,ApplyToLoadedWindow,The following statement contains a magic number: const int MARGIN = 3;
Magic Number,Poderosa.Forms,MainWindowArgument,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\WindowManager.cs,ApplyToLoadedWindow,The following statement contains a magic number: Rectangle titlebarRect =                  new Rectangle(_location.X + MARGIN' _location.Y + MARGIN'                                  Math.Max(_location.Width - MARGIN * 2' 1)'                                  Math.Max(SystemInformation.CaptionHeight - MARGIN * 2' 1));
Magic Number,Poderosa.Forms,MainWindowArgument,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\WindowManager.cs,ApplyToLoadedWindow,The following statement contains a magic number: Rectangle titlebarRect =                  new Rectangle(_location.X + MARGIN' _location.Y + MARGIN'                                  Math.Max(_location.Width - MARGIN * 2' 1)'                                  Math.Max(SystemInformation.CaptionHeight - MARGIN * 2' 1));
Magic Number,Poderosa.Forms,MainWindowArgument,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\WindowManager.cs,ApplyToLoadedWindow,The following statement contains a magic number: _location.X = sb.X + (sb.Width - _location.Width) / 2;
Magic Number,Poderosa.Forms,MainWindowArgument,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\WindowManager.cs,ApplyToLoadedWindow,The following statement contains a magic number: _location.Y = sb.Y + (sb.Height - _location.Height) / 2;
Magic Number,Poderosa.Forms,MainWindowArgument,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\WindowManager.cs,GetInitialLocation,The following statement contains a magic number: return new Rectangle(r.X + r.Width / 4' r.Y + r.Height / 4' r.Width / 2' r.Height / 2);
Magic Number,Poderosa.Forms,MainWindowArgument,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\WindowManager.cs,GetInitialLocation,The following statement contains a magic number: return new Rectangle(r.X + r.Width / 4' r.Y + r.Height / 4' r.Width / 2' r.Height / 2);
Magic Number,Poderosa.Forms,MainWindowArgument,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\WindowManager.cs,GetInitialLocation,The following statement contains a magic number: return new Rectangle(r.X + r.Width / 4' r.Y + r.Height / 4' r.Width / 2' r.Height / 2);
Magic Number,Poderosa.Forms,MainWindowArgument,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\WindowManager.cs,GetInitialLocation,The following statement contains a magic number: return new Rectangle(r.X + r.Width / 4' r.Y + r.Height / 4' r.Width / 2' r.Height / 2);
Magic Number,Poderosa.Forms,PopupViewCreationParam,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\WindowManagerEx.cs,PopupViewCreationParam,The following statement contains a magic number: _initialSize = new Size(300' 300);
Magic Number,Poderosa.Forms,PopupViewCreationParam,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\WindowManagerEx.cs,PopupViewCreationParam,The following statement contains a magic number: _initialSize = new Size(300' 300);
Magic Number,Poderosa.Forms,CoreServicePreferenceAdapter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\WindowPreference.cs,DefineItems,The following statement contains a magic number: _caretInterval = builder.DefineIntValue(_folder' "caretInterval"' 300' PreferenceValidatorUtil.PositiveIntegerValidator);
Magic Number,Poderosa.Forms,CoreServicePreferenceAdapter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\WindowPreference.cs,DefineItems,The following statement contains a magic number: _splitLimitCount = builder.DefineIntValue(_folder' "splitLimitCount"' 16' PreferenceValidatorUtil.IntRangeValidator(1' 50));
Magic Number,Poderosa.Forms,CoreServicePreferenceAdapter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\WindowPreference.cs,DefineItems,The following statement contains a magic number: _splitLimitCount = builder.DefineIntValue(_folder' "splitLimitCount"' 16' PreferenceValidatorUtil.IntRangeValidator(1' 50));
Magic Number,Poderosa.Forms,WarningWithDisableOption,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\WarningWithDisableOption.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Location = new System.Drawing.Point(120' 72);
Magic Number,Poderosa.Forms,WarningWithDisableOption,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\WarningWithDisableOption.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Location = new System.Drawing.Point(120' 72);
Magic Number,Poderosa.Forms,WarningWithDisableOption,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\WarningWithDisableOption.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Poderosa.Forms,WarningWithDisableOption,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\WarningWithDisableOption.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Poderosa.Forms,WarningWithDisableOption,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\WarningWithDisableOption.cs,InitializeComponent,The following statement contains a magic number: this._messageLabel.Location = new System.Drawing.Point(56' 8);
Magic Number,Poderosa.Forms,WarningWithDisableOption,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\WarningWithDisableOption.cs,InitializeComponent,The following statement contains a magic number: this._messageLabel.Location = new System.Drawing.Point(56' 8);
Magic Number,Poderosa.Forms,WarningWithDisableOption,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\WarningWithDisableOption.cs,InitializeComponent,The following statement contains a magic number: this._messageLabel.Size = new System.Drawing.Size(248' 40);
Magic Number,Poderosa.Forms,WarningWithDisableOption,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\WarningWithDisableOption.cs,InitializeComponent,The following statement contains a magic number: this._messageLabel.Size = new System.Drawing.Size(248' 40);
Magic Number,Poderosa.Forms,WarningWithDisableOption,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\WarningWithDisableOption.cs,InitializeComponent,The following statement contains a magic number: this._disableCheckBox.Location = new System.Drawing.Point(56' 48);
Magic Number,Poderosa.Forms,WarningWithDisableOption,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\WarningWithDisableOption.cs,InitializeComponent,The following statement contains a magic number: this._disableCheckBox.Location = new System.Drawing.Point(56' 48);
Magic Number,Poderosa.Forms,WarningWithDisableOption,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\WarningWithDisableOption.cs,InitializeComponent,The following statement contains a magic number: this._disableCheckBox.Size = new System.Drawing.Size(248' 24);
Magic Number,Poderosa.Forms,WarningWithDisableOption,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\WarningWithDisableOption.cs,InitializeComponent,The following statement contains a magic number: this._disableCheckBox.Size = new System.Drawing.Size(248' 24);
Magic Number,Poderosa.Forms,WarningWithDisableOption,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\WarningWithDisableOption.cs,InitializeComponent,The following statement contains a magic number: this._disableCheckBox.TabIndex = 2;
Magic Number,Poderosa.Forms,WarningWithDisableOption,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\WarningWithDisableOption.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 12);
Magic Number,Poderosa.Forms,WarningWithDisableOption,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\WarningWithDisableOption.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 12);
Magic Number,Poderosa.Forms,WarningWithDisableOption,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\WarningWithDisableOption.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(314' 103);
Magic Number,Poderosa.Forms,WarningWithDisableOption,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\WarningWithDisableOption.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(314' 103);
Magic Number,Poderosa.Forms,WarningWithDisableOption,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\WarningWithDisableOption.cs,OnPaint,The following statement contains a magic number: a.Graphics.DrawIcon(_warningIcon' 12' 24);
Magic Number,Poderosa.Forms,WarningWithDisableOption,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\WarningWithDisableOption.cs,OnPaint,The following statement contains a magic number: a.Graphics.DrawIcon(_warningIcon' 12' 24);
Magic Number,Poderosa.Forms,TabBarDrawing,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\TabBar.cs,CreateNormalStyle,The following statement contains a magic number: t._font = new Font(SystemFonts.DefaultFont.Name' 9f);
Magic Number,Poderosa.Forms,TabBar,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\TabBar.cs,GetTabAreaWidth,The following statement contains a magic number: return this.Width - 4;
Magic Number,Poderosa.Forms,TabBar,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\TabBar.cs,CreateButton,The following statement contains a magic number: b.Height = UNITHEIGHT - 2;
Magic Number,Poderosa.Forms,TabBar,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\TabBar.cs,OnMouseMove,The following statement contains a magic number: Math.Abs(_dragStartPosX - args.X) + Math.Abs(_dragStartPosY - args.Y) >= 3
Magic Number,Poderosa.Forms,TabBar,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\TabBar.cs,ArrangeButtons,The following statement contains a magic number: int remaining = this.ClientSize.Width - x * 2/*両端マージン*/ - (_buttons.Count - 1) * BUTTON_MARGIN;
Magic Number,Poderosa.Forms,TabBar,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\TabBar.cs,OnPaint,The following statement contains a magic number: DrawDropPointEffect(g' _dragAndDrop.CurrentDropPoint.PosX(2) - 1' BUTTON_Y);
Magic Number,Poderosa.Forms,TabBar,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\TabBar.cs,OnDragOver,The following statement contains a magic number: const int DROP_CAPACITY_WIDTH = 6;
Magic Number,Poderosa.Forms,TabBar,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\TabBar.cs,DrawDropPointEffect,The following statement contains a magic number: int height = UNITHEIGHT - 4;
Magic Number,Poderosa.Forms,TabBar,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\TabBar.cs,DrawDropPointEffect,The following statement contains a magic number: g.DrawLine(SystemPens.ControlText' x - 3' y' x + 4' y);
Magic Number,Poderosa.Forms,TabBar,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\TabBar.cs,DrawDropPointEffect,The following statement contains a magic number: g.DrawLine(SystemPens.ControlText' x - 3' y' x + 4' y);
Magic Number,Poderosa.Forms,TabBar,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\TabBar.cs,DrawDropPointEffect,The following statement contains a magic number: g.DrawLine(SystemPens.ControlText' x - 3' y + height' x + 4' y + height);
Magic Number,Poderosa.Forms,TabBar,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\TabBar.cs,DrawDropPointEffect,The following statement contains a magic number: g.DrawLine(SystemPens.ControlText' x - 3' y + height' x + 4' y + height);
Magic Number,Poderosa.Forms,TabBarButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\TabBar.cs,CalcSufficientWidth,The following statement contains a magic number: _sufficientWidth =                  img_width                  + (int)Math.Floor(index_width)                  + (int)Math.Ceiling(text_width)                  + TEXT_MARGIN * 4 /* 左、右、img-index' index-bodyで４こ */                  + 2 /* border lines */;
Magic Number,Poderosa.Forms,TabBarButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\TabBar.cs,CalcSufficientWidth,The following statement contains a magic number: _sufficientWidth =                  img_width                  + (int)Math.Floor(index_width)                  + (int)Math.Ceiling(text_width)                  + TEXT_MARGIN * 4 /* 左、右、img-index' index-bodyで４こ */                  + 2 /* border lines */;
Magic Number,Poderosa.Forms,TabBarButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\TabBar.cs,CalcSufficientWidth,The following statement contains a magic number: _sufficientWidth += 2;
Magic Number,Poderosa.Forms,TabBarButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\TabBar.cs,AdjustTextAndWidth,The following statement contains a magic number: int remaining = width - (_image == null ? 0 : _image.Width + TEXT_MARGIN) - TEXT_MARGIN * 2 - 2;
Magic Number,Poderosa.Forms,TabBarButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\TabBar.cs,AdjustTextAndWidth,The following statement contains a magic number: int remaining = width - (_image == null ? 0 : _image.Width + TEXT_MARGIN) - TEXT_MARGIN * 2 - 2;
Magic Number,Poderosa.Forms,TabBarButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\TabBar.cs,DrawOrangeBar,The following statement contains a magic number: g.FillRectangle(b' 1' 0' this.Width - 2' 2);
Magic Number,Poderosa.Forms,TabBarButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\TabBar.cs,DrawOrangeBar,The following statement contains a magic number: g.FillRectangle(b' 1' 0' this.Width - 2' 2);
Magic Number,Poderosa.Forms,TabBarButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\TabBar.cs,DrawButtonInternal,The following statement contains a magic number: int y = (clientSize.Height - _image.Height) / 2 + offsetY;
Magic Number,Poderosa.Forms,TabBarButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\TabBar.cs,DrawButtonInternal,The following statement contains a magic number: g.DrawString(                      _indexText'                      drawing.Font'                      SystemBrushes.ControlDark'                      x'                      (clientSize.Height - (int)Math.Ceiling(indexTextSize.Height) + 1) / 2 + offsetY);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._button1.Location = new System.Drawing.Point(8' 56);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._button1.Location = new System.Drawing.Point(8' 56);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._button1.Size = new System.Drawing.Size(96' 23);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._button1.Size = new System.Drawing.Size(96' 23);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._button2.Location = new System.Drawing.Point(112' 56);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._button2.Location = new System.Drawing.Point(112' 56);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._button2.Size = new System.Drawing.Size(96' 23);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._button2.Size = new System.Drawing.Size(96' 23);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._button3.Location = new System.Drawing.Point(216' 56);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._button3.Location = new System.Drawing.Point(216' 56);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._button3.Size = new System.Drawing.Size(96' 23);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._button3.Size = new System.Drawing.Size(96' 23);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._button3.TabIndex = 2;
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._message.Location = new System.Drawing.Point(64' 8);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._message.Location = new System.Drawing.Point(64' 8);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._message.Size = new System.Drawing.Size(232' 48);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._message.Size = new System.Drawing.Size(232' 48);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._message.TabIndex = 3;
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 12);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 12);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(322' 85);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(322' 85);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ThreeButtonMessageBox.cs,OnPaint,The following statement contains a magic number: a.Graphics.DrawIcon(_questionIcon' 16' 8);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ThreeButtonMessageBox.cs,OnPaint,The following statement contains a magic number: a.Graphics.DrawIcon(_questionIcon' 16' 8);
Magic Number,Poderosa.Commands,BasicCommandImplementation,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\BasicCommands.cs,CmdNewWindow,The following statement contains a magic number: location.X += 20;
Magic Number,Poderosa.Commands,BasicCommandImplementation,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\BasicCommands.cs,CmdNewWindow,The following statement contains a magic number: location.Y += 20;
Magic Number,Poderosa.View,CharacterDocumentViewer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CharacterDocumentViewer.cs,AdjustScrollBar,The following statement contains a magic number: int largechange = (int)Math.Floor((this.ClientSize.Height - BORDER * 2 + prof.LineSpacing) / ch);
Magic Number,Poderosa.View,CharacterDocumentViewer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CharacterDocumentViewer.cs,GetHeightInLines,The following statement contains a magic number: int height = (int)Math.Floor((this.ClientSize.Height - BORDER * 2 + prof.LineSpacing) / ch);
Magic Number,Poderosa.View,CharacterDocumentViewer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CharacterDocumentViewer.cs,InitializeComponent,The following statement contains a magic number: this._VScrollBar.Maximum = 2;
Magic Number,Poderosa.View,CharacterDocumentViewer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CharacterDocumentViewer.cs,DrawBarCaret,The following statement contains a magic number: PointF pt1 = new PointF(profile.Pitch.Width * x + BORDER' (profile.Pitch.Height + profile.LineSpacing) * y + BORDER + 2);
Magic Number,Poderosa.View,CharacterDocumentViewer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CharacterDocumentViewer.cs,DrawBarCaret,The following statement contains a magic number: PointF pt2 = new PointF(pt1.X' pt1.Y + profile.Pitch.Height - 2);
Magic Number,Poderosa.View,CharacterDocumentViewer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CharacterDocumentViewer.cs,DrawUnderLineCaret,The following statement contains a magic number: PointF pt1 = new PointF(profile.Pitch.Width * x + BORDER + 2' (profile.Pitch.Height + profile.LineSpacing) * y + BORDER + profile.Pitch.Height);
Magic Number,Poderosa.View,CharacterDocumentViewer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CharacterDocumentViewer.cs,DrawUnderLineCaret,The following statement contains a magic number: PointF pt2 = new PointF(pt1.X + profile.Pitch.Width - 2' pt1.Y);
Magic Number,Poderosa.View,CharacterDocumentViewer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CharacterDocumentViewer.cs,DrawBackgroundImage_Normal,The following statement contains a magic number: offset_x = (this.Width - _VScrollBar.Width - img.Width) / 2;
Magic Number,Poderosa.View,CharacterDocumentViewer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CharacterDocumentViewer.cs,DrawBackgroundImage_Normal,The following statement contains a magic number: offset_y = (this.Height - img.Height) / 2;
Magic Number,Poderosa.View,CharacterDocumentViewer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CharacterDocumentViewer.cs,OnMouseWheelCore,The following statement contains a magic number: int d = e.Delta / 120;
Magic Number,Poderosa.View,CharacterDocumentViewer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\CharacterDocumentViewer.cs,OnMouseWheelCore,The following statement contains a magic number: d *= 3;
Magic Number,Poderosa.View,FontHandle,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,CreateFont,The following statement contains a magic number: major > 5 || (major == 5 && minor >= 1)
Magic Number,Poderosa.View,FontHandle,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,CreateFont,The following statement contains a magic number: major > 5 || (major == 5 && minor >= 1)
Magic Number,Poderosa.View,RenderProfile,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,CreateFonts,The following statement contains a magic number: Win32.GetTextExtentPoint32(hdc' "AAA"' 3' out charsize2);
Magic Number,Poderosa.View,RenderProfile,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,CreateFonts,The following statement contains a magic number: _pitch = new SizeF((charsize2.width - charsize1.width) / 2' charsize1.height);
Magic Number,Poderosa.View,RenderProfile,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,CreateFonts,The following statement contains a magic number: _chargap = (charsize1.width - _pitch.Width) / 2;
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,RenderProfileSerializer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\RenderProfileSerialize.cs,Deserialize,The following statement contains a magic number: prof.FontSize = ParseUtil.ParseFloat(storage.Get("font-size")' 10.0f);
Magic Number,Poderosa.Document,GLine,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\GLine.cs,InvertCharacter,The following statement contains a magic number: List<GWord> list = new List<GWord>(3);
Magic Number,Poderosa.Document,GLine,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\GLine.cs,CreateInvertedClone,The following statement contains a magic number: const int PHASE_RIGHT = 2;
Magic Number,Poderosa.Document,GLine,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\GLine.cs,CreateSimpleGLine,The following statement contains a magic number: char[] buff = new char[text.Length * 2];
Magic Number,Poderosa.Document,GLine,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\GLine.cs,CreateSimpleGLine,The following statement contains a magic number: size == 2
Magic Number,Poderosa.Document,GLineManipulator,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\GLine.cs,Load,The following statement contains a magic number: Clear(80);
Magic Number,Poderosa.Document,CharGroupUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\GLine.cs,GetColumnsPerCharacter,The following statement contains a magic number: return 2;
Magic Number,Poderosa.Document,Unicode,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Unicode.cs,ToPrivate,The following statement contains a magic number: byte upperByte = (byte)((ushort)c >> 8);
Magic Number,Poderosa.Document,Unicode,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Unicode.cs,ToPrivate,The following statement contains a magic number: switch(upperByte) {                  case 0x00:                      switch (WIDTH_MAP_0000_00FF[c]) {                          case 1:                              return (char)(0xe000 + c);  // U+E0XX --> Display as a half-width character (CJK font)                          case 2:                              return (char)(0xe100 + c);  // U+E1XX --> Display as a full-width character (CJK font)                          default:                              return c;   // U+00XX --> Display as a half-width character (Latin font)                      }                    case 0x02:                  case 0x03:                  case 0x04:                      switch (WIDTH_MAP_0200_04FF[c - 0x0200]) {                          case 2:                              return (char)(c + (0xe400 - 0x0200));  // U+E4XX'U+E5XX'U+E6XX --> Display as a full-width character (CJK font)                          default:                              return c;   // U+02XX --> Display as a half-width character (Latin font)                      }                    case 0x25:                      switch (WIDTH_MAP_2500_25FF[c - 0x2500]) {                          case 1:                              return (char)(c + (0xe200 - 0x2500)); // U+E2XX --> Display as half-width character (CJK font)                          case 2:                              return (char)(c + (0xe300 - 0x2500)); // U+E3XX --> Display as full-width character (CJK font)                          default:                              return c;   // U+25XX --> Display as half-width character (Latin font)                      }                    default:                      return c;              }
Magic Number,Poderosa.Document,Unicode,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Unicode.cs,ToPrivate,The following statement contains a magic number: switch(upperByte) {                  case 0x00:                      switch (WIDTH_MAP_0000_00FF[c]) {                          case 1:                              return (char)(0xe000 + c);  // U+E0XX --> Display as a half-width character (CJK font)                          case 2:                              return (char)(0xe100 + c);  // U+E1XX --> Display as a full-width character (CJK font)                          default:                              return c;   // U+00XX --> Display as a half-width character (Latin font)                      }                    case 0x02:                  case 0x03:                  case 0x04:                      switch (WIDTH_MAP_0200_04FF[c - 0x0200]) {                          case 2:                              return (char)(c + (0xe400 - 0x0200));  // U+E4XX'U+E5XX'U+E6XX --> Display as a full-width character (CJK font)                          default:                              return c;   // U+02XX --> Display as a half-width character (Latin font)                      }                    case 0x25:                      switch (WIDTH_MAP_2500_25FF[c - 0x2500]) {                          case 1:                              return (char)(c + (0xe200 - 0x2500)); // U+E2XX --> Display as half-width character (CJK font)                          case 2:                              return (char)(c + (0xe300 - 0x2500)); // U+E3XX --> Display as full-width character (CJK font)                          default:                              return c;   // U+25XX --> Display as half-width character (Latin font)                      }                    default:                      return c;              }
Magic Number,Poderosa.Document,Unicode,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Unicode.cs,ToPrivate,The following statement contains a magic number: switch(upperByte) {                  case 0x00:                      switch (WIDTH_MAP_0000_00FF[c]) {                          case 1:                              return (char)(0xe000 + c);  // U+E0XX --> Display as a half-width character (CJK font)                          case 2:                              return (char)(0xe100 + c);  // U+E1XX --> Display as a full-width character (CJK font)                          default:                              return c;   // U+00XX --> Display as a half-width character (Latin font)                      }                    case 0x02:                  case 0x03:                  case 0x04:                      switch (WIDTH_MAP_0200_04FF[c - 0x0200]) {                          case 2:                              return (char)(c + (0xe400 - 0x0200));  // U+E4XX'U+E5XX'U+E6XX --> Display as a full-width character (CJK font)                          default:                              return c;   // U+02XX --> Display as a half-width character (Latin font)                      }                    case 0x25:                      switch (WIDTH_MAP_2500_25FF[c - 0x2500]) {                          case 1:                              return (char)(c + (0xe200 - 0x2500)); // U+E2XX --> Display as half-width character (CJK font)                          case 2:                              return (char)(c + (0xe300 - 0x2500)); // U+E3XX --> Display as full-width character (CJK font)                          default:                              return c;   // U+25XX --> Display as half-width character (Latin font)                      }                    default:                      return c;              }
Magic Number,Poderosa.Document,Unicode,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Unicode.cs,ToOriginal,The following statement contains a magic number: byte upperByte = (byte)((ushort)c >> 8);
Magic Number,Poderosa.Document,Unicode,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Unicode.cs,GetCharGroup,The following statement contains a magic number: byte upperByte = (byte)((ushort)ch >> 8);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._loginButton.Location = new System.Drawing.Point(144' 311);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._loginButton.Location = new System.Drawing.Point(144' 311);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Location = new System.Drawing.Point(232' 311);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Location = new System.Drawing.Point(232' 311);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logTypeBox.Location = new System.Drawing.Point(114' 8);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logTypeBox.Location = new System.Drawing.Point(114' 8);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logTypeBox.Size = new System.Drawing.Size(160' 20);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logTypeBox.Size = new System.Drawing.Size(160' 20);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logTypeBox.TabIndex = 3;
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logTypeLabel.Location = new System.Drawing.Point(8' 8);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logTypeLabel.Location = new System.Drawing.Point(8' 8);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logTypeLabel.Size = new System.Drawing.Size(100' 19);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logTypeLabel.Size = new System.Drawing.Size(100' 19);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logTypeLabel.TabIndex = 2;
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logFileBox.Location = new System.Drawing.Point(114' 32);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logFileBox.Location = new System.Drawing.Point(114' 32);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logFileBox.Size = new System.Drawing.Size(160' 20);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logFileBox.Size = new System.Drawing.Size(160' 20);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logFileBox.TabIndex = 5;
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logFileLabel.Location = new System.Drawing.Point(8' 32);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logFileLabel.Location = new System.Drawing.Point(8' 32);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logFileLabel.Size = new System.Drawing.Size(100' 19);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logFileLabel.Size = new System.Drawing.Size(100' 19);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logFileLabel.TabIndex = 4;
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectlogButton.Location = new System.Drawing.Point(282' 32);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectlogButton.Location = new System.Drawing.Point(282' 32);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectlogButton.Size = new System.Drawing.Size(19' 19);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectlogButton.Size = new System.Drawing.Size(19' 19);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectlogButton.TabIndex = 6;
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeLabel.Location = new System.Drawing.Point(8' 83);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeLabel.Location = new System.Drawing.Point(8' 83);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeLabel.Size = new System.Drawing.Size(100' 19);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeLabel.Size = new System.Drawing.Size(100' 19);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeLabel.TabIndex = 9;
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeBox.Location = new System.Drawing.Point(114' 80);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeBox.Location = new System.Drawing.Point(114' 80);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeBox.Size = new System.Drawing.Size(96' 20);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeBox.Size = new System.Drawing.Size(96' 20);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeBox.TabIndex = 10;
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._cygwinDirLabel.Location = new System.Drawing.Point(8' 108);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._cygwinDirLabel.Location = new System.Drawing.Point(8' 108);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._cygwinDirLabel.Size = new System.Drawing.Size(256' 16);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._cygwinDirLabel.Size = new System.Drawing.Size(256' 16);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._cygwinDirLabel.TabIndex = 11;
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._cygwinDirBox.Location = new System.Drawing.Point(8' 127);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._cygwinDirBox.Location = new System.Drawing.Point(8' 127);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._cygwinDirBox.Size = new System.Drawing.Size(273' 19);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._cygwinDirBox.Size = new System.Drawing.Size(273' 19);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._cygwinDirBox.TabIndex = 12;
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectCygwinDirButton.Location = new System.Drawing.Point(287' 127);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectCygwinDirButton.Location = new System.Drawing.Point(287' 127);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectCygwinDirButton.Size = new System.Drawing.Size(19' 19);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectCygwinDirButton.Size = new System.Drawing.Size(19' 19);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectCygwinDirButton.TabIndex = 13;
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._advancedOptionCheck.Location = new System.Drawing.Point(20' 191);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._advancedOptionCheck.Location = new System.Drawing.Point(20' 191);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._advancedOptionCheck.Size = new System.Drawing.Size(152' 20);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._advancedOptionCheck.Size = new System.Drawing.Size(152' 20);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._advancedOptionCheck.TabIndex = 17;
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._advancedOptionGroup.Location = new System.Drawing.Point(8' 193);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._advancedOptionGroup.Location = new System.Drawing.Point(8' 193);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._advancedOptionGroup.Size = new System.Drawing.Size(300' 110);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._advancedOptionGroup.Size = new System.Drawing.Size(300' 110);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._advancedOptionGroup.TabIndex = 18;
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._lMessage.Location = new System.Drawing.Point(8' 72);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._lMessage.Location = new System.Drawing.Point(8' 72);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._lMessage.Size = new System.Drawing.Size(288' 32);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._lMessage.Size = new System.Drawing.Size(288' 32);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._lMessage.TabIndex = 4;
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._shellBox.Location = new System.Drawing.Point(120' 48);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._shellBox.Location = new System.Drawing.Point(120' 48);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._shellBox.Size = new System.Drawing.Size(172' 19);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._shellBox.Size = new System.Drawing.Size(172' 19);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._shellBox.TabIndex = 3;
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._shellLabel.Location = new System.Drawing.Point(8' 48);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._shellLabel.Location = new System.Drawing.Point(8' 48);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._shellLabel.Size = new System.Drawing.Size(100' 23);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._shellLabel.Size = new System.Drawing.Size(100' 23);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._shellLabel.TabIndex = 2;
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._homeDirectoryBox.Location = new System.Drawing.Point(120' 24);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._homeDirectoryBox.Location = new System.Drawing.Point(120' 24);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._homeDirectoryBox.Size = new System.Drawing.Size(172' 19);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._homeDirectoryBox.Size = new System.Drawing.Size(172' 19);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._homeDirectoryLabel.Location = new System.Drawing.Point(8' 24);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._homeDirectoryLabel.Location = new System.Drawing.Point(8' 24);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._homeDirectoryLabel.Size = new System.Drawing.Size(112' 23);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._homeDirectoryLabel.Size = new System.Drawing.Size(112' 23);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._encodingLabel.Location = new System.Drawing.Point(8' 56);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._encodingLabel.Location = new System.Drawing.Point(8' 56);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._encodingLabel.Size = new System.Drawing.Size(100' 19);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._encodingLabel.Size = new System.Drawing.Size(100' 19);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._encodingLabel.TabIndex = 7;
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._encodingBox.Location = new System.Drawing.Point(114' 56);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._encodingBox.Location = new System.Drawing.Point(114' 56);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._encodingBox.Size = new System.Drawing.Size(96' 20);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._encodingBox.Size = new System.Drawing.Size(96' 20);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._encodingBox.TabIndex = 8;
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathLabel.Location = new System.Drawing.Point(8' 158);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathLabel.Location = new System.Drawing.Point(8' 158);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathLabel.Size = new System.Drawing.Size(100' 16);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathLabel.Size = new System.Drawing.Size(100' 16);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathLabel.TabIndex = 14;
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathBox.Location = new System.Drawing.Point(112' 157);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathBox.Location = new System.Drawing.Point(112' 157);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathBox.Size = new System.Drawing.Size(169' 19);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathBox.Size = new System.Drawing.Size(169' 19);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathBox.TabIndex = 15;
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectAutoExecMacroButton.Location = new System.Drawing.Point(287' 157);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectAutoExecMacroButton.Location = new System.Drawing.Point(287' 157);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectAutoExecMacroButton.Size = new System.Drawing.Size(19' 19);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectAutoExecMacroButton.Size = new System.Drawing.Size(19' 19);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectAutoExecMacroButton.TabIndex = 16;
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 12);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 12);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(314' 343);
Magic Number,Poderosa.Sessions,LocalShellLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\CygwinLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(314' 343);
Magic Number,Poderosa.Sessions,LoginDialogBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\LoginDialogBase.cs,InitializeComponent,The following statement contains a magic number: this._loginButton.Location = new System.Drawing.Point(103' 219);
Magic Number,Poderosa.Sessions,LoginDialogBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\LoginDialogBase.cs,InitializeComponent,The following statement contains a magic number: this._loginButton.Location = new System.Drawing.Point(103' 219);
Magic Number,Poderosa.Sessions,LoginDialogBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\LoginDialogBase.cs,InitializeComponent,The following statement contains a magic number: this._loginButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Poderosa.Sessions,LoginDialogBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\LoginDialogBase.cs,InitializeComponent,The following statement contains a magic number: this._loginButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Poderosa.Sessions,LoginDialogBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\LoginDialogBase.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Location = new System.Drawing.Point(191' 219);
Magic Number,Poderosa.Sessions,LoginDialogBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\LoginDialogBase.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Location = new System.Drawing.Point(191' 219);
Magic Number,Poderosa.Sessions,LoginDialogBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\LoginDialogBase.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Poderosa.Sessions,LoginDialogBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\LoginDialogBase.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Poderosa.Sessions,LoginDialogBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\LoginDialogBase.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(292' 266);
Magic Number,Poderosa.Sessions,LoginDialogBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\LoginDialogBase.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(292' 266);
Magic Number,Poderosa.Sessions,OpenSessionDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionDialog.cs,OpenSessionDialog_Load,The following statement contains a magic number: this.Location -= new Size(extend.Width / 2' extend.Height / 2);
Magic Number,Poderosa.Sessions,OpenSessionDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionDialog.cs,OpenSessionDialog_Load,The following statement contains a magic number: this.Location -= new Size(extend.Width / 2' extend.Height / 2);
Magic Number,Poderosa.Sessions,OpenSessionDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionDialog.cs,InitializeComponent,The following statement contains a magic number: this._bottomPanel.Location = new System.Drawing.Point(0' 210);
Magic Number,Poderosa.Sessions,OpenSessionDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionDialog.cs,InitializeComponent,The following statement contains a magic number: this._bottomPanel.Size = new System.Drawing.Size(312' 38);
Magic Number,Poderosa.Sessions,OpenSessionDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionDialog.cs,InitializeComponent,The following statement contains a magic number: this._bottomPanel.Size = new System.Drawing.Size(312' 38);
Magic Number,Poderosa.Sessions,OpenSessionDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionDialog.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Location = new System.Drawing.Point(231' 9);
Magic Number,Poderosa.Sessions,OpenSessionDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionDialog.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Location = new System.Drawing.Point(231' 9);
Magic Number,Poderosa.Sessions,OpenSessionDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionDialog.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Margin = new System.Windows.Forms.Padding(6);
Magic Number,Poderosa.Sessions,OpenSessionDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionDialog.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Poderosa.Sessions,OpenSessionDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionDialog.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Poderosa.Sessions,OpenSessionDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionDialog.cs,InitializeComponent,The following statement contains a magic number: this._loginButton.Location = new System.Drawing.Point(131' 9);
Magic Number,Poderosa.Sessions,OpenSessionDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionDialog.cs,InitializeComponent,The following statement contains a magic number: this._loginButton.Location = new System.Drawing.Point(131' 9);
Magic Number,Poderosa.Sessions,OpenSessionDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionDialog.cs,InitializeComponent,The following statement contains a magic number: this._loginButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Poderosa.Sessions,OpenSessionDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionDialog.cs,InitializeComponent,The following statement contains a magic number: this._loginButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Poderosa.Sessions,OpenSessionDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionDialog.cs,InitializeComponent,The following statement contains a magic number: this._sessionTypeTab.Size = new System.Drawing.Size(312' 210);
Magic Number,Poderosa.Sessions,OpenSessionDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionDialog.cs,InitializeComponent,The following statement contains a magic number: this._sessionTypeTab.Size = new System.Drawing.Size(312' 210);
Magic Number,Poderosa.Sessions,OpenSessionDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionDialog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 12F);
Magic Number,Poderosa.Sessions,OpenSessionDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionDialog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 12F);
Magic Number,Poderosa.Sessions,OpenSessionDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(312' 248);
Magic Number,Poderosa.Sessions,OpenSessionDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(312' 248);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,SetIcons,The following statement contains a magic number: _icons.ImageSize = new Size(12' 12);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,SetIcons,The following statement contains a magic number: _icons.ImageSize = new Size(12' 12);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,SetIcons,The following statement contains a magic number: _agentForwardingTabPage.ImageIndex = 2;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,SetIcons,The following statement contains a magic number: _macroTabPage.ImageIndex = 3;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,Localize,The following statement contains a magic number: this._x11CygwinX11UnixFolderExampleLabel.Font = new Font(this._x11CygwinX11UnixFolderExampleLabel.Font.FontFamily' 8f);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,Validate,The following statement contains a magic number: Int32.TryParse(_portBox.Text' out port) && port >= 0 && port <= 65535
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,Validate,The following statement contains a magic number: !Int32.TryParse(_x11DisplayText.Text' out display) || display < 0 || display > (65535 - 6000)
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,Validate,The following statement contains a magic number: !Int32.TryParse(_x11DisplayText.Text' out display) || display < 0 || display > (65535 - 6000)
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._icons.ImageSize = new System.Drawing.Size(12' 12);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._icons.ImageSize = new System.Drawing.Size(12' 12);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._ssh2RadioButton.Size = new System.Drawing.Size(51' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._ssh2RadioButton.Size = new System.Drawing.Size(51' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._ssh1RadioButton.Location = new System.Drawing.Point(70' 0);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._ssh1RadioButton.Size = new System.Drawing.Size(51' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._ssh1RadioButton.Size = new System.Drawing.Size(51' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._sshTypePanel.Location = new System.Drawing.Point(89' 3);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._sshTypePanel.Location = new System.Drawing.Point(89' 3);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._sshTypePanel.Size = new System.Drawing.Size(167' 18);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._sshTypePanel.Size = new System.Drawing.Size(167' 18);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._hostLabel.Location = new System.Drawing.Point(3' 28);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._hostLabel.Location = new System.Drawing.Point(3' 28);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._hostLabel.Size = new System.Drawing.Size(80' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._hostLabel.Size = new System.Drawing.Size(80' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._hostBox.Location = new System.Drawing.Point(89' 27);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._hostBox.Location = new System.Drawing.Point(89' 27);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._hostBox.Size = new System.Drawing.Size(232' 20);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._hostBox.Size = new System.Drawing.Size(232' 20);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._hostBox.TabIndex = 2;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._portLabel.Location = new System.Drawing.Point(3' 54);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._portLabel.Location = new System.Drawing.Point(3' 54);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._portLabel.Size = new System.Drawing.Size(80' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._portLabel.Size = new System.Drawing.Size(80' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._portLabel.TabIndex = 3;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._usernameLabel.Location = new System.Drawing.Point(3' 89);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._usernameLabel.Location = new System.Drawing.Point(3' 89);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._usernameLabel.Size = new System.Drawing.Size(80' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._usernameLabel.Size = new System.Drawing.Size(80' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._usernameLabel.TabIndex = 5;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._userNameBox.Location = new System.Drawing.Point(89' 88);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._userNameBox.Location = new System.Drawing.Point(89' 88);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._userNameBox.Size = new System.Drawing.Size(232' 20);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._userNameBox.Size = new System.Drawing.Size(232' 20);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._userNameBox.TabIndex = 6;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._authenticationLabel.Location = new System.Drawing.Point(3' 113);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._authenticationLabel.Location = new System.Drawing.Point(3' 113);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._authenticationLabel.Size = new System.Drawing.Size(80' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._authenticationLabel.Size = new System.Drawing.Size(80' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._authenticationLabel.TabIndex = 7;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._authOptions.Location = new System.Drawing.Point(89' 112);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._authOptions.Location = new System.Drawing.Point(89' 112);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._authOptions.Size = new System.Drawing.Size(232' 20);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._authOptions.Size = new System.Drawing.Size(232' 20);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._authOptions.TabIndex = 8;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._passphraseLabel.Location = new System.Drawing.Point(3' 137);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._passphraseLabel.Location = new System.Drawing.Point(3' 137);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._passphraseLabel.Size = new System.Drawing.Size(80' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._passphraseLabel.Size = new System.Drawing.Size(80' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._passphraseLabel.TabIndex = 9;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._passphraseBox.Location = new System.Drawing.Point(89' 136);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._passphraseBox.Location = new System.Drawing.Point(89' 136);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._passphraseBox.Size = new System.Drawing.Size(232' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._passphraseBox.Size = new System.Drawing.Size(232' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._passphraseBox.TabIndex = 10;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._privateKeyLabel.Location = new System.Drawing.Point(3' 161);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._privateKeyLabel.Location = new System.Drawing.Point(3' 161);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._privateKeyLabel.Size = new System.Drawing.Size(80' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._privateKeyLabel.Size = new System.Drawing.Size(80' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._privateKeyLabel.TabIndex = 11;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._privateKeyFile.Location = new System.Drawing.Point(89' 160);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._privateKeyFile.Location = new System.Drawing.Point(89' 160);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._privateKeyFile.Size = new System.Drawing.Size(212' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._privateKeyFile.Size = new System.Drawing.Size(212' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._privateKeyFile.TabIndex = 12;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._privateKeySelect.Location = new System.Drawing.Point(301' 160);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._privateKeySelect.Location = new System.Drawing.Point(301' 160);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._privateKeySelect.Size = new System.Drawing.Size(20' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._privateKeySelect.Size = new System.Drawing.Size(20' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._privateKeySelect.TabIndex = 13;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._optionsTab.ItemSize = new System.Drawing.Size(30' 18);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._optionsTab.ItemSize = new System.Drawing.Size(30' 18);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._optionsTab.Location = new System.Drawing.Point(6' 188);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._optionsTab.Location = new System.Drawing.Point(6' 188);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._optionsTab.Size = new System.Drawing.Size(312' 225);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._optionsTab.Size = new System.Drawing.Size(312' 225);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._optionsTab.TabIndex = 14;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._terminalTabPage.Location = new System.Drawing.Point(4' 22);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._terminalTabPage.Location = new System.Drawing.Point(4' 22);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._terminalTabPage.Padding = new System.Windows.Forms.Padding(3);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._terminalTabPage.Size = new System.Drawing.Size(304' 199);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._terminalTabPage.Size = new System.Drawing.Size(304' 199);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._logTypeLabel.Location = new System.Drawing.Point(4' 14);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._logTypeLabel.Location = new System.Drawing.Point(4' 14);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._logTypeLabel.Size = new System.Drawing.Size(96' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._logTypeLabel.Size = new System.Drawing.Size(96' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._logTypeBox.Location = new System.Drawing.Point(108' 14);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._logTypeBox.Location = new System.Drawing.Point(108' 14);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._logTypeBox.Size = new System.Drawing.Size(172' 20);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._logTypeBox.Size = new System.Drawing.Size(172' 20);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._logFileLabel.Location = new System.Drawing.Point(4' 38);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._logFileLabel.Location = new System.Drawing.Point(4' 38);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._logFileLabel.Size = new System.Drawing.Size(88' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._logFileLabel.Size = new System.Drawing.Size(88' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._logFileLabel.TabIndex = 2;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._selectLogButton.Location = new System.Drawing.Point(281' 39);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._selectLogButton.Location = new System.Drawing.Point(281' 39);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._selectLogButton.Size = new System.Drawing.Size(19' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._selectLogButton.Size = new System.Drawing.Size(19' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._selectLogButton.TabIndex = 4;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._encodingLabel.Location = new System.Drawing.Point(4' 62);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._encodingLabel.Location = new System.Drawing.Point(4' 62);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._encodingLabel.Size = new System.Drawing.Size(96' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._encodingLabel.Size = new System.Drawing.Size(96' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._encodingLabel.TabIndex = 5;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._encodingBox.Location = new System.Drawing.Point(108' 62);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._encodingBox.Location = new System.Drawing.Point(108' 62);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._encodingBox.Size = new System.Drawing.Size(96' 20);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._encodingBox.Size = new System.Drawing.Size(96' 20);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._encodingBox.TabIndex = 6;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._localEchoLabel.Location = new System.Drawing.Point(4' 86);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._localEchoLabel.Location = new System.Drawing.Point(4' 86);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._localEchoLabel.Size = new System.Drawing.Size(96' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._localEchoLabel.Size = new System.Drawing.Size(96' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._localEchoLabel.TabIndex = 7;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._localEchoBox.Location = new System.Drawing.Point(108' 86);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._localEchoBox.Location = new System.Drawing.Point(108' 86);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._localEchoBox.Size = new System.Drawing.Size(96' 20);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._localEchoBox.Size = new System.Drawing.Size(96' 20);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._localEchoBox.TabIndex = 8;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._logFileBox.Location = new System.Drawing.Point(108' 38);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._logFileBox.Location = new System.Drawing.Point(108' 38);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._logFileBox.Size = new System.Drawing.Size(172' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._logFileBox.Size = new System.Drawing.Size(172' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._logFileBox.TabIndex = 3;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._newLineLabel.Location = new System.Drawing.Point(4' 110);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._newLineLabel.Location = new System.Drawing.Point(4' 110);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._newLineLabel.Size = new System.Drawing.Size(96' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._newLineLabel.Size = new System.Drawing.Size(96' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._newLineLabel.TabIndex = 9;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._newLineBox.Location = new System.Drawing.Point(108' 110);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._newLineBox.Location = new System.Drawing.Point(108' 110);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._newLineBox.Size = new System.Drawing.Size(96' 20);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._newLineBox.Size = new System.Drawing.Size(96' 20);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._newLineBox.TabIndex = 10;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeLabel.Location = new System.Drawing.Point(4' 134);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeLabel.Location = new System.Drawing.Point(4' 134);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeLabel.Size = new System.Drawing.Size(96' 23);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeLabel.Size = new System.Drawing.Size(96' 23);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeLabel.TabIndex = 11;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeBox.Location = new System.Drawing.Point(108' 134);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeBox.Location = new System.Drawing.Point(108' 134);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeBox.Size = new System.Drawing.Size(96' 20);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeBox.Size = new System.Drawing.Size(96' 20);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeBox.TabIndex = 12;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11ForwardingTabPage.Location = new System.Drawing.Point(4' 22);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11ForwardingTabPage.Location = new System.Drawing.Point(4' 22);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11ForwardingTabPage.Padding = new System.Windows.Forms.Padding(3);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11ForwardingTabPage.Size = new System.Drawing.Size(304' 199);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11ForwardingTabPage.Size = new System.Drawing.Size(304' 199);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11ForwardingOptionsPanel.Location = new System.Drawing.Point(0' 26);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11ForwardingOptionsPanel.Size = new System.Drawing.Size(304' 173);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11ForwardingOptionsPanel.Size = new System.Drawing.Size(304' 173);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11CygwinX11UnixFolderButton.Location = new System.Drawing.Point(280' 131);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11CygwinX11UnixFolderButton.Location = new System.Drawing.Point(280' 131);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11CygwinX11UnixFolderButton.Size = new System.Drawing.Size(20' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11CygwinX11UnixFolderButton.Size = new System.Drawing.Size(20' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11CygwinX11UnixFolderButton.TabIndex = 12;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11XauthorityButton.Location = new System.Drawing.Point(280' 80);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11XauthorityButton.Location = new System.Drawing.Point(280' 80);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11XauthorityButton.Size = new System.Drawing.Size(20' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11XauthorityButton.Size = new System.Drawing.Size(20' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11XauthorityButton.TabIndex = 8;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11CygwinX11UnixFolderExampleLabel.Location = new System.Drawing.Point(108' 153);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11CygwinX11UnixFolderExampleLabel.Location = new System.Drawing.Point(108' 153);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11CygwinX11UnixFolderExampleLabel.Size = new System.Drawing.Size(170' 14);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11CygwinX11UnixFolderExampleLabel.Size = new System.Drawing.Size(170' 14);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11CygwinX11UnixFolderExampleLabel.TabIndex = 13;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11CygwinX11UnixFolderLabel.Location = new System.Drawing.Point(5' 132);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11CygwinX11UnixFolderLabel.Location = new System.Drawing.Point(5' 132);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11CygwinX11UnixFolderLabel.Size = new System.Drawing.Size(100' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11CygwinX11UnixFolderLabel.Size = new System.Drawing.Size(100' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11CygwinX11UnixFolderLabel.TabIndex = 10;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11XauthorityLabel.Location = new System.Drawing.Point(5' 81);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11XauthorityLabel.Location = new System.Drawing.Point(5' 81);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11XauthorityLabel.Size = new System.Drawing.Size(100' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11XauthorityLabel.Size = new System.Drawing.Size(100' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11XauthorityLabel.TabIndex = 6;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11CygwinX11UnixFolderText.Location = new System.Drawing.Point(110' 131);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11CygwinX11UnixFolderText.Location = new System.Drawing.Point(110' 131);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11CygwinX11UnixFolderText.Size = new System.Drawing.Size(168' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11CygwinX11UnixFolderText.Size = new System.Drawing.Size(168' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11CygwinX11UnixFolderText.TabIndex = 11;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11UseCygwinDomainSocketCheckBox.Location = new System.Drawing.Point(3' 109);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11UseCygwinDomainSocketCheckBox.Location = new System.Drawing.Point(3' 109);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11UseCygwinDomainSocketCheckBox.Size = new System.Drawing.Size(15' 14);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11UseCygwinDomainSocketCheckBox.Size = new System.Drawing.Size(15' 14);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11UseCygwinDomainSocketCheckBox.TabIndex = 9;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11XauthorityText.Location = new System.Drawing.Point(110' 80);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11XauthorityText.Location = new System.Drawing.Point(110' 80);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11XauthorityText.Size = new System.Drawing.Size(168' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11XauthorityText.Size = new System.Drawing.Size(168' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11XauthorityText.TabIndex = 7;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11NeedAuthCheckBox.Location = new System.Drawing.Point(3' 58);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11NeedAuthCheckBox.Location = new System.Drawing.Point(3' 58);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11NeedAuthCheckBox.Size = new System.Drawing.Size(15' 14);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11NeedAuthCheckBox.Size = new System.Drawing.Size(15' 14);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11NeedAuthCheckBox.TabIndex = 5;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11ScreenText.Location = new System.Drawing.Point(110' 28);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11ScreenText.Location = new System.Drawing.Point(110' 28);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11ScreenText.Size = new System.Drawing.Size(60' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11ScreenText.Size = new System.Drawing.Size(60' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11ScreenText.TabIndex = 4;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11ScreenLabel.Location = new System.Drawing.Point(5' 29);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11ScreenLabel.Location = new System.Drawing.Point(5' 29);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11ScreenLabel.Size = new System.Drawing.Size(100' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11ScreenLabel.Size = new System.Drawing.Size(100' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11ScreenLabel.TabIndex = 3;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11DisplayText.Location = new System.Drawing.Point(110' 3);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11DisplayText.Location = new System.Drawing.Point(110' 3);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11DisplayText.Size = new System.Drawing.Size(60' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11DisplayText.Size = new System.Drawing.Size(60' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11DisplayNote.Location = new System.Drawing.Point(178' 4);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11DisplayNote.Location = new System.Drawing.Point(178' 4);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11DisplayNote.Size = new System.Drawing.Size(120' 18);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11DisplayNote.Size = new System.Drawing.Size(120' 18);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11DisplayNote.TabIndex = 2;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11DisplayLabel.Location = new System.Drawing.Point(5' 4);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11DisplayLabel.Location = new System.Drawing.Point(5' 4);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11DisplayLabel.Size = new System.Drawing.Size(100' 18);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._x11DisplayLabel.Size = new System.Drawing.Size(100' 18);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._useX11ForwardingCheckBox.Location = new System.Drawing.Point(3' 6);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._useX11ForwardingCheckBox.Location = new System.Drawing.Point(3' 6);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._useX11ForwardingCheckBox.Size = new System.Drawing.Size(15' 14);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._useX11ForwardingCheckBox.Size = new System.Drawing.Size(15' 14);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._agentForwardingTabPage.Location = new System.Drawing.Point(4' 22);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._agentForwardingTabPage.Location = new System.Drawing.Point(4' 22);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._agentForwardingTabPage.Size = new System.Drawing.Size(304' 199);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._agentForwardingTabPage.Size = new System.Drawing.Size(304' 199);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._agentForwardingTabPage.TabIndex = 2;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._agentForwardingConfigButton.Location = new System.Drawing.Point(13' 44);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._agentForwardingConfigButton.Location = new System.Drawing.Point(13' 44);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._agentForwardingConfigButton.Size = new System.Drawing.Size(132' 23);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._agentForwardingConfigButton.Size = new System.Drawing.Size(132' 23);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._agentForwardingConfigButton.TabIndex = 2;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._useAgentForwardingCheckBox.Location = new System.Drawing.Point(3' 14);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._useAgentForwardingCheckBox.Location = new System.Drawing.Point(3' 14);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._useAgentForwardingCheckBox.Size = new System.Drawing.Size(15' 14);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._useAgentForwardingCheckBox.Size = new System.Drawing.Size(15' 14);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._macroTabPage.Location = new System.Drawing.Point(4' 22);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._macroTabPage.Location = new System.Drawing.Point(4' 22);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._macroTabPage.Size = new System.Drawing.Size(304' 199);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._macroTabPage.Size = new System.Drawing.Size(304' 199);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._macroTabPage.TabIndex = 3;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathLabel.Location = new System.Drawing.Point(4' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathLabel.Location = new System.Drawing.Point(4' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathLabel.Size = new System.Drawing.Size(100' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathLabel.Size = new System.Drawing.Size(100' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathBox.Location = new System.Drawing.Point(108' 15);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathBox.Location = new System.Drawing.Point(108' 15);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathBox.Size = new System.Drawing.Size(172' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathBox.Size = new System.Drawing.Size(172' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._selectAutoExecMacroButton.Location = new System.Drawing.Point(281' 15);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._selectAutoExecMacroButton.Location = new System.Drawing.Point(281' 15);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._selectAutoExecMacroButton.Size = new System.Drawing.Size(19' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._selectAutoExecMacroButton.Size = new System.Drawing.Size(19' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._selectAutoExecMacroButton.TabIndex = 2;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._portBox.Location = new System.Drawing.Point(89' 53);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._portBox.Location = new System.Drawing.Point(89' 53);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._portBox.Size = new System.Drawing.Size(84' 20);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._portBox.Size = new System.Drawing.Size(84' 20);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this._portBox.TabIndex = 4;
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 12F);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 12F);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(324' 416);
Magic Number,Poderosa.Sessions,OpenSessionTabPageSSH,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageSSH.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(324' 416);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,SetIcons,The following statement contains a magic number: _icons.ImageSize = new Size(12' 12);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,SetIcons,The following statement contains a magic number: _icons.ImageSize = new Size(12' 12);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,Validate,The following statement contains a magic number: Int32.TryParse(_portBox.Text' out port) && port >= 0 && port <= 65535
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._icons.ImageSize = new System.Drawing.Size(12' 12);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._icons.ImageSize = new System.Drawing.Size(12' 12);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._hostLabel.Location = new System.Drawing.Point(3' 6);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._hostLabel.Location = new System.Drawing.Point(3' 6);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._hostLabel.Size = new System.Drawing.Size(80' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._hostLabel.Size = new System.Drawing.Size(80' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._hostBox.Location = new System.Drawing.Point(89' 5);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._hostBox.Location = new System.Drawing.Point(89' 5);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._hostBox.Size = new System.Drawing.Size(232' 20);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._hostBox.Size = new System.Drawing.Size(232' 20);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._portLabel.Location = new System.Drawing.Point(3' 32);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._portLabel.Location = new System.Drawing.Point(3' 32);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._portLabel.Size = new System.Drawing.Size(80' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._portLabel.Size = new System.Drawing.Size(80' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._portLabel.TabIndex = 2;
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._optionsTab.ItemSize = new System.Drawing.Size(30' 18);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._optionsTab.ItemSize = new System.Drawing.Size(30' 18);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._optionsTab.Location = new System.Drawing.Point(6' 71);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._optionsTab.Location = new System.Drawing.Point(6' 71);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._optionsTab.Size = new System.Drawing.Size(312' 189);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._optionsTab.Size = new System.Drawing.Size(312' 189);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._optionsTab.TabIndex = 4;
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._terminalTabPage.Location = new System.Drawing.Point(4' 22);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._terminalTabPage.Location = new System.Drawing.Point(4' 22);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._terminalTabPage.Padding = new System.Windows.Forms.Padding(3);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._terminalTabPage.Size = new System.Drawing.Size(304' 163);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._terminalTabPage.Size = new System.Drawing.Size(304' 163);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._telnetNewLine.Location = new System.Drawing.Point(208' 103);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._telnetNewLine.Location = new System.Drawing.Point(208' 103);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._telnetNewLine.Size = new System.Drawing.Size(90' 36);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._telnetNewLine.Size = new System.Drawing.Size(90' 36);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._telnetNewLine.TabIndex = 11;
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._logTypeLabel.Location = new System.Drawing.Point(4' 14);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._logTypeLabel.Location = new System.Drawing.Point(4' 14);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._logTypeLabel.Size = new System.Drawing.Size(96' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._logTypeLabel.Size = new System.Drawing.Size(96' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._logTypeBox.Location = new System.Drawing.Point(108' 14);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._logTypeBox.Location = new System.Drawing.Point(108' 14);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._logTypeBox.Size = new System.Drawing.Size(172' 20);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._logTypeBox.Size = new System.Drawing.Size(172' 20);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._logFileLabel.Location = new System.Drawing.Point(4' 38);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._logFileLabel.Location = new System.Drawing.Point(4' 38);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._logFileLabel.Size = new System.Drawing.Size(88' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._logFileLabel.Size = new System.Drawing.Size(88' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._logFileLabel.TabIndex = 2;
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._selectLogButton.Location = new System.Drawing.Point(281' 39);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._selectLogButton.Location = new System.Drawing.Point(281' 39);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._selectLogButton.Size = new System.Drawing.Size(19' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._selectLogButton.Size = new System.Drawing.Size(19' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._selectLogButton.TabIndex = 4;
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._encodingLabel.Location = new System.Drawing.Point(4' 62);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._encodingLabel.Location = new System.Drawing.Point(4' 62);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._encodingLabel.Size = new System.Drawing.Size(96' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._encodingLabel.Size = new System.Drawing.Size(96' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._encodingLabel.TabIndex = 5;
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._encodingBox.Location = new System.Drawing.Point(108' 62);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._encodingBox.Location = new System.Drawing.Point(108' 62);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._encodingBox.Size = new System.Drawing.Size(96' 20);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._encodingBox.Size = new System.Drawing.Size(96' 20);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._encodingBox.TabIndex = 6;
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._localEchoLabel.Location = new System.Drawing.Point(4' 86);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._localEchoLabel.Location = new System.Drawing.Point(4' 86);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._localEchoLabel.Size = new System.Drawing.Size(96' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._localEchoLabel.Size = new System.Drawing.Size(96' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._localEchoLabel.TabIndex = 7;
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._localEchoBox.Location = new System.Drawing.Point(108' 86);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._localEchoBox.Location = new System.Drawing.Point(108' 86);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._localEchoBox.Size = new System.Drawing.Size(96' 20);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._localEchoBox.Size = new System.Drawing.Size(96' 20);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._localEchoBox.TabIndex = 8;
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._logFileBox.Location = new System.Drawing.Point(108' 38);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._logFileBox.Location = new System.Drawing.Point(108' 38);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._logFileBox.Size = new System.Drawing.Size(172' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._logFileBox.Size = new System.Drawing.Size(172' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._logFileBox.TabIndex = 3;
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._newLineLabel.Location = new System.Drawing.Point(4' 110);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._newLineLabel.Location = new System.Drawing.Point(4' 110);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._newLineLabel.Size = new System.Drawing.Size(96' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._newLineLabel.Size = new System.Drawing.Size(96' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._newLineLabel.TabIndex = 9;
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._newLineBox.Location = new System.Drawing.Point(108' 110);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._newLineBox.Location = new System.Drawing.Point(108' 110);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._newLineBox.Size = new System.Drawing.Size(96' 20);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._newLineBox.Size = new System.Drawing.Size(96' 20);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._newLineBox.TabIndex = 10;
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeLabel.Location = new System.Drawing.Point(4' 134);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeLabel.Location = new System.Drawing.Point(4' 134);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeLabel.Size = new System.Drawing.Size(96' 23);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeLabel.Size = new System.Drawing.Size(96' 23);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeLabel.TabIndex = 12;
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeBox.Location = new System.Drawing.Point(108' 134);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeBox.Location = new System.Drawing.Point(108' 134);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeBox.Size = new System.Drawing.Size(96' 20);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeBox.Size = new System.Drawing.Size(96' 20);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeBox.TabIndex = 13;
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._macroTabPage.Location = new System.Drawing.Point(4' 22);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._macroTabPage.Location = new System.Drawing.Point(4' 22);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._macroTabPage.Size = new System.Drawing.Size(304' 163);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._macroTabPage.Size = new System.Drawing.Size(304' 163);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._macroTabPage.TabIndex = 3;
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathLabel.Location = new System.Drawing.Point(4' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathLabel.Location = new System.Drawing.Point(4' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathLabel.Size = new System.Drawing.Size(100' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathLabel.Size = new System.Drawing.Size(100' 16);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathBox.Location = new System.Drawing.Point(108' 15);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathBox.Location = new System.Drawing.Point(108' 15);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathBox.Size = new System.Drawing.Size(172' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathBox.Size = new System.Drawing.Size(172' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._selectAutoExecMacroButton.Location = new System.Drawing.Point(281' 15);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._selectAutoExecMacroButton.Location = new System.Drawing.Point(281' 15);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._selectAutoExecMacroButton.Size = new System.Drawing.Size(19' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._selectAutoExecMacroButton.Size = new System.Drawing.Size(19' 19);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._selectAutoExecMacroButton.TabIndex = 2;
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._portBox.Location = new System.Drawing.Point(89' 31);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._portBox.Location = new System.Drawing.Point(89' 31);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._portBox.Size = new System.Drawing.Size(84' 20);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._portBox.Size = new System.Drawing.Size(84' 20);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this._portBox.TabIndex = 3;
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 12F);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 12F);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(324' 263);
Magic Number,Poderosa.Sessions,OpenSessionTabPageTelnet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\OpenSessionTabPageTelnet.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(324' 263);
Magic Number,Poderosa.Sessions,ShortcutFileContent,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\ShortcutFile.cs,ParseOldFormat,The following statement contains a magic number: switch (attr.Name) {                      case "auth":                          if (ssh != null)                              ssh.AuthenticationType = ParseUtil.ParseEnum<AuthenticationType>(attr.Value' AuthenticationType.Password);                          break;                      case "keyfile":                          if (ssh != null)                              ssh.IdentityFileName = attr.Value;                          break;                      case "encoding":                          settings.Encoding = EncodingType.ISO8859_1;                          foreach (EnumListItem<EncodingType> item in EnumListItem<EncodingType>.GetListItems()) {                              if (attr.Value == item.ToString()) {                                  settings.Encoding = item.Value;                                  break;                              }                          }                          break;                      case "terminal-type":                          settings.TerminalType = ParseUtil.ParseEnum<TerminalType>(attr.Value' TerminalType.XTerm);                          param.SetTerminalName(attr.Value);                          break;                      case "localecho":                          settings.LocalEcho = ParseUtil.ParseBool(attr.Value' false);                          break;                      case "caption":                          settings.Caption = attr.Value;                          break;                      case "transmit-nl":                          settings.TransmitNL = ParseUtil.ParseEnum<NewLine>(attr.Value' NewLine.CR);                          break;                      case "host":                          tcp.Destination = attr.Value;                          break;                      case "port":                          tcp.Port = ParseUtil.ParseInt(attr.Value' ssh != null ? 22 : 23);                          break;                      case "method":                          if (ssh != null)                              ssh.Method = attr.Value == "SSH1" ? SSHProtocol.SSH1 : SSHProtocol.SSH2;                          break;                  }
Magic Number,Poderosa.Sessions,ShortcutFileContent,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\ShortcutFile.cs,ParseOldFormat,The following statement contains a magic number: switch (attr.Name) {                      case "auth":                          if (ssh != null)                              ssh.AuthenticationType = ParseUtil.ParseEnum<AuthenticationType>(attr.Value' AuthenticationType.Password);                          break;                      case "keyfile":                          if (ssh != null)                              ssh.IdentityFileName = attr.Value;                          break;                      case "encoding":                          settings.Encoding = EncodingType.ISO8859_1;                          foreach (EnumListItem<EncodingType> item in EnumListItem<EncodingType>.GetListItems()) {                              if (attr.Value == item.ToString()) {                                  settings.Encoding = item.Value;                                  break;                              }                          }                          break;                      case "terminal-type":                          settings.TerminalType = ParseUtil.ParseEnum<TerminalType>(attr.Value' TerminalType.XTerm);                          param.SetTerminalName(attr.Value);                          break;                      case "localecho":                          settings.LocalEcho = ParseUtil.ParseBool(attr.Value' false);                          break;                      case "caption":                          settings.Caption = attr.Value;                          break;                      case "transmit-nl":                          settings.TransmitNL = ParseUtil.ParseEnum<NewLine>(attr.Value' NewLine.CR);                          break;                      case "host":                          tcp.Destination = attr.Value;                          break;                      case "port":                          tcp.Port = ParseUtil.ParseInt(attr.Value' ssh != null ? 22 : 23);                          break;                      case "method":                          if (ssh != null)                              ssh.Method = attr.Value == "SSH1" ? SSHProtocol.SSH1 : SSHProtocol.SSH2;                          break;                  }
Magic Number,Poderosa.Sessions,ShortcutFileContent,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\ShortcutFile.cs,CreateDefaultWriter,The following statement contains a magic number: wr.Indentation = 2;
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._loginButton.Location = new System.Drawing.Point(123' 229);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._loginButton.Location = new System.Drawing.Point(123' 229);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._loginButton.Size = new System.Drawing.Size(72' 25);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._loginButton.Size = new System.Drawing.Size(72' 25);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._loginButton.TabIndex = 13;
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Location = new System.Drawing.Point(211' 229);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Location = new System.Drawing.Point(211' 229);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Size = new System.Drawing.Size(72' 25);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Size = new System.Drawing.Size(72' 25);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.TabIndex = 14;
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._privateKeyBox.Location = new System.Drawing.Point(110' 128);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._privateKeyBox.Location = new System.Drawing.Point(110' 128);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._privateKeyBox.Size = new System.Drawing.Size(154' 19);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._privateKeyBox.Size = new System.Drawing.Size(154' 19);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._privateKeyBox.TabIndex = 3;
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._privateKeyLabel.Location = new System.Drawing.Point(8' 129);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._privateKeyLabel.Location = new System.Drawing.Point(8' 129);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._privateKeyLabel.Size = new System.Drawing.Size(96' 18);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._privateKeyLabel.Size = new System.Drawing.Size(96' 18);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._privateKeyLabel.TabIndex = 2;
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._passphraseBox.Location = new System.Drawing.Point(110' 104);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._passphraseBox.Location = new System.Drawing.Point(110' 104);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._passphraseBox.Size = new System.Drawing.Size(178' 19);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._passphraseBox.Size = new System.Drawing.Size(178' 19);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._passphraseLabel.Location = new System.Drawing.Point(8' 105);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._passphraseLabel.Location = new System.Drawing.Point(8' 105);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._passphraseLabel.Size = new System.Drawing.Size(96' 18);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._passphraseLabel.Size = new System.Drawing.Size(96' 18);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._privateKeySelect.Location = new System.Drawing.Point(272' 128);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._privateKeySelect.Location = new System.Drawing.Point(272' 128);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._privateKeySelect.Size = new System.Drawing.Size(19' 19);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._privateKeySelect.Size = new System.Drawing.Size(19' 19);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._privateKeySelect.TabIndex = 4;
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logFileBox.Location = new System.Drawing.Point(110' 176);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logFileBox.Location = new System.Drawing.Point(110' 176);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logFileBox.Size = new System.Drawing.Size(154' 20);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logFileBox.Size = new System.Drawing.Size(154' 20);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logFileBox.TabIndex = 8;
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logFileLabel.Location = new System.Drawing.Point(8' 177);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logFileLabel.Location = new System.Drawing.Point(8' 177);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logFileLabel.Size = new System.Drawing.Size(96' 18);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logFileLabel.Size = new System.Drawing.Size(96' 18);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logFileLabel.TabIndex = 7;
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectlogButton.Location = new System.Drawing.Point(272' 176);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectlogButton.Location = new System.Drawing.Point(272' 176);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectlogButton.Size = new System.Drawing.Size(19' 19);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectlogButton.Size = new System.Drawing.Size(19' 19);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectlogButton.TabIndex = 9;
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._hostLabel.Location = new System.Drawing.Point(8' 8);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._hostLabel.Location = new System.Drawing.Point(8' 8);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._hostLabel.Size = new System.Drawing.Size(94' 16);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._hostLabel.Size = new System.Drawing.Size(94' 16);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._hostBox.Location = new System.Drawing.Point(108' 8);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._hostBox.Location = new System.Drawing.Point(108' 8);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._hostBox.Size = new System.Drawing.Size(144' 16);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._hostBox.Size = new System.Drawing.Size(144' 16);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._methodLabel.Location = new System.Drawing.Point(8' 24);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._methodLabel.Location = new System.Drawing.Point(8' 24);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._methodLabel.Size = new System.Drawing.Size(94' 16);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._methodLabel.Size = new System.Drawing.Size(94' 16);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._methodBox.Location = new System.Drawing.Point(108' 24);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._methodBox.Location = new System.Drawing.Point(108' 24);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._methodBox.Size = new System.Drawing.Size(144' 16);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._methodBox.Size = new System.Drawing.Size(144' 16);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._accountLabel.Location = new System.Drawing.Point(8' 40);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._accountLabel.Location = new System.Drawing.Point(8' 40);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._accountLabel.Size = new System.Drawing.Size(94' 16);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._accountLabel.Size = new System.Drawing.Size(94' 16);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._accountBox.Location = new System.Drawing.Point(108' 40);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._accountBox.Location = new System.Drawing.Point(108' 40);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._accountBox.Size = new System.Drawing.Size(144' 16);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._accountBox.Size = new System.Drawing.Size(144' 16);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._authenticationTypeLabel.Location = new System.Drawing.Point(8' 56);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._authenticationTypeLabel.Location = new System.Drawing.Point(8' 56);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._authenticationTypeLabel.Size = new System.Drawing.Size(94' 16);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._authenticationTypeLabel.Size = new System.Drawing.Size(94' 16);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._authenticationTypeBox.Location = new System.Drawing.Point(108' 56);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._authenticationTypeBox.Location = new System.Drawing.Point(108' 56);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._authenticationTypeBox.Size = new System.Drawing.Size(144' 16);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._authenticationTypeBox.Size = new System.Drawing.Size(144' 16);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._encodingLabel.Location = new System.Drawing.Point(8' 72);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._encodingLabel.Location = new System.Drawing.Point(8' 72);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._encodingLabel.Size = new System.Drawing.Size(94' 16);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._encodingLabel.Size = new System.Drawing.Size(94' 16);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._encodingBox.Location = new System.Drawing.Point(108' 72);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._encodingBox.Location = new System.Drawing.Point(108' 72);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._encodingBox.Size = new System.Drawing.Size(144' 16);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._encodingBox.Size = new System.Drawing.Size(144' 16);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logTypeBox.Location = new System.Drawing.Point(110' 151);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logTypeBox.Location = new System.Drawing.Point(110' 151);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logTypeBox.Size = new System.Drawing.Size(154' 20);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logTypeBox.Size = new System.Drawing.Size(154' 20);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logTypeBox.TabIndex = 6;
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logTypeLabel.Location = new System.Drawing.Point(8' 152);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logTypeLabel.Location = new System.Drawing.Point(8' 152);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logTypeLabel.Size = new System.Drawing.Size(96' 19);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logTypeLabel.Size = new System.Drawing.Size(96' 19);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logTypeLabel.TabIndex = 5;
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathLabel.Location = new System.Drawing.Point(8' 202);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathLabel.Location = new System.Drawing.Point(8' 202);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathLabel.Size = new System.Drawing.Size(96' 18);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathLabel.Size = new System.Drawing.Size(96' 18);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathLabel.TabIndex = 10;
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathBox.Location = new System.Drawing.Point(110' 202);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathBox.Location = new System.Drawing.Point(110' 202);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathBox.Size = new System.Drawing.Size(154' 19);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathBox.Size = new System.Drawing.Size(154' 19);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathBox.TabIndex = 11;
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectAutoExecMacroButton.Location = new System.Drawing.Point(272' 202);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectAutoExecMacroButton.Location = new System.Drawing.Point(272' 202);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectAutoExecMacroButton.Size = new System.Drawing.Size(19' 19);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectAutoExecMacroButton.Size = new System.Drawing.Size(19' 19);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectAutoExecMacroButton.TabIndex = 12;
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 12);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 12);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(298' 265);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(298' 265);
Magic Number,Poderosa.Sessions,SSHShortcutLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\SSHShortcutLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this.Padding = new System.Windows.Forms.Padding(5);
Magic Number,Poderosa.Sessions,StartCommand,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\StartCommands.cs,InternalExecute,The following statement contains a magic number: args.Length != 2
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._loginButton.Location = new System.Drawing.Point(160' 424);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._loginButton.Location = new System.Drawing.Point(160' 424);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._loginButton.Size = new System.Drawing.Size(72' 25);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._loginButton.Size = new System.Drawing.Size(72' 25);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._loginButton.TabIndex = 11;
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Location = new System.Drawing.Point(248' 424);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Location = new System.Drawing.Point(248' 424);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Size = new System.Drawing.Size(72' 25);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Size = new System.Drawing.Size(72' 25);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.TabIndex = 12;
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._hostLabel.Location = new System.Drawing.Point(16' 12);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._hostLabel.Location = new System.Drawing.Point(16' 12);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._hostLabel.Size = new System.Drawing.Size(80' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._hostLabel.Size = new System.Drawing.Size(80' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._hostBox.Location = new System.Drawing.Point(104' 8);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._hostBox.Location = new System.Drawing.Point(104' 8);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._hostBox.Size = new System.Drawing.Size(208' 20);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._hostBox.Size = new System.Drawing.Size(208' 20);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._methodLabel.Location = new System.Drawing.Point(16' 36);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._methodLabel.Location = new System.Drawing.Point(16' 36);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._methodLabel.Size = new System.Drawing.Size(80' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._methodLabel.Size = new System.Drawing.Size(80' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._methodLabel.TabIndex = 2;
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._methodBox.Location = new System.Drawing.Point(104' 32);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._methodBox.Location = new System.Drawing.Point(104' 32);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._methodBox.Size = new System.Drawing.Size(208' 20);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._methodBox.Size = new System.Drawing.Size(208' 20);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._methodBox.TabIndex = 3;
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._portLabel.Location = new System.Drawing.Point(16' 60);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._portLabel.Location = new System.Drawing.Point(16' 60);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._portLabel.Size = new System.Drawing.Size(80' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._portLabel.Size = new System.Drawing.Size(80' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._portLabel.TabIndex = 4;
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._portBox.Location = new System.Drawing.Point(104' 56);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._portBox.Location = new System.Drawing.Point(104' 56);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._portBox.Size = new System.Drawing.Size(208' 20);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._portBox.Size = new System.Drawing.Size(208' 20);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._portBox.TabIndex = 5;
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._sshGroup.Location = new System.Drawing.Point(8' 88);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._sshGroup.Location = new System.Drawing.Point(8' 88);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._sshGroup.Size = new System.Drawing.Size(312' 112);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._sshGroup.Size = new System.Drawing.Size(312' 112);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._sshGroup.TabIndex = 6;
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._usernameLabel.Location = new System.Drawing.Point(8' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._usernameLabel.Location = new System.Drawing.Point(8' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._usernameLabel.Size = new System.Drawing.Size(80' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._usernameLabel.Size = new System.Drawing.Size(80' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._userNameBox.Location = new System.Drawing.Point(96' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._userNameBox.Location = new System.Drawing.Point(96' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._userNameBox.Size = new System.Drawing.Size(208' 20);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._userNameBox.Size = new System.Drawing.Size(208' 20);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._authenticationLabel.Location = new System.Drawing.Point(8' 40);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._authenticationLabel.Location = new System.Drawing.Point(8' 40);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._authenticationLabel.Size = new System.Drawing.Size(80' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._authenticationLabel.Size = new System.Drawing.Size(80' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._authenticationLabel.TabIndex = 2;
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._authOptions.Location = new System.Drawing.Point(96' 40);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._authOptions.Location = new System.Drawing.Point(96' 40);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._authOptions.Size = new System.Drawing.Size(208' 20);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._authOptions.Size = new System.Drawing.Size(208' 20);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._authOptions.TabIndex = 3;
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._passphraseLabel.Location = new System.Drawing.Point(8' 64);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._passphraseLabel.Location = new System.Drawing.Point(8' 64);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._passphraseLabel.Size = new System.Drawing.Size(80' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._passphraseLabel.Size = new System.Drawing.Size(80' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._passphraseLabel.TabIndex = 4;
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._passphraseBox.Location = new System.Drawing.Point(96' 64);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._passphraseBox.Location = new System.Drawing.Point(96' 64);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._passphraseBox.Size = new System.Drawing.Size(208' 19);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._passphraseBox.Size = new System.Drawing.Size(208' 19);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._passphraseBox.TabIndex = 5;
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._privateKeyLabel.Location = new System.Drawing.Point(8' 88);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._privateKeyLabel.Location = new System.Drawing.Point(8' 88);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._privateKeyLabel.Size = new System.Drawing.Size(80' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._privateKeyLabel.Size = new System.Drawing.Size(80' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._privateKeyLabel.TabIndex = 6;
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._privateKeyFile.Location = new System.Drawing.Point(96' 88);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._privateKeyFile.Location = new System.Drawing.Point(96' 88);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._privateKeyFile.Size = new System.Drawing.Size(188' 19);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._privateKeyFile.Size = new System.Drawing.Size(188' 19);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._privateKeyFile.TabIndex = 7;
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._privateKeySelect.Location = new System.Drawing.Point(285' 87);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._privateKeySelect.Location = new System.Drawing.Point(285' 87);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._privateKeySelect.Size = new System.Drawing.Size(19' 19);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._privateKeySelect.Size = new System.Drawing.Size(19' 19);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._privateKeySelect.TabIndex = 8;
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._terminalGroup.Location = new System.Drawing.Point(8' 208);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._terminalGroup.Location = new System.Drawing.Point(8' 208);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._terminalGroup.Size = new System.Drawing.Size(312' 168);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._terminalGroup.Size = new System.Drawing.Size(312' 168);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._terminalGroup.TabIndex = 7;
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._telnetNewLine.Location = new System.Drawing.Point(216' 104);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._telnetNewLine.Location = new System.Drawing.Point(216' 104);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._telnetNewLine.Size = new System.Drawing.Size(90' 36);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._telnetNewLine.Size = new System.Drawing.Size(90' 36);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._telnetNewLine.TabIndex = 11;
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logTypeLabel.Location = new System.Drawing.Point(8' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logTypeLabel.Location = new System.Drawing.Point(8' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logTypeLabel.Size = new System.Drawing.Size(96' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logTypeLabel.Size = new System.Drawing.Size(96' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logTypeBox.Location = new System.Drawing.Point(112' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logTypeBox.Location = new System.Drawing.Point(112' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logTypeBox.Size = new System.Drawing.Size(172' 20);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logTypeBox.Size = new System.Drawing.Size(172' 20);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logFileLabel.Location = new System.Drawing.Point(8' 40);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logFileLabel.Location = new System.Drawing.Point(8' 40);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logFileLabel.Size = new System.Drawing.Size(88' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logFileLabel.Size = new System.Drawing.Size(88' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logFileLabel.TabIndex = 2;
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logFileBox.Location = new System.Drawing.Point(112' 40);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logFileBox.Location = new System.Drawing.Point(112' 40);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logFileBox.Size = new System.Drawing.Size(172' 20);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logFileBox.Size = new System.Drawing.Size(172' 20);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._logFileBox.TabIndex = 3;
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectLogButton.Location = new System.Drawing.Point(285' 41);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectLogButton.Location = new System.Drawing.Point(285' 41);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectLogButton.Size = new System.Drawing.Size(19' 19);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectLogButton.Size = new System.Drawing.Size(19' 19);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectLogButton.TabIndex = 4;
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._encodingLabel.Location = new System.Drawing.Point(8' 64);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._encodingLabel.Location = new System.Drawing.Point(8' 64);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._encodingLabel.Size = new System.Drawing.Size(96' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._encodingLabel.Size = new System.Drawing.Size(96' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._encodingLabel.TabIndex = 5;
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._encodingBox.Location = new System.Drawing.Point(112' 64);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._encodingBox.Location = new System.Drawing.Point(112' 64);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._encodingBox.Size = new System.Drawing.Size(96' 20);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._encodingBox.Size = new System.Drawing.Size(96' 20);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._encodingBox.TabIndex = 6;
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._localEchoLabel.Location = new System.Drawing.Point(8' 88);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._localEchoLabel.Location = new System.Drawing.Point(8' 88);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._localEchoLabel.Size = new System.Drawing.Size(96' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._localEchoLabel.Size = new System.Drawing.Size(96' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._localEchoLabel.TabIndex = 7;
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._localEchoBox.Location = new System.Drawing.Point(112' 88);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._localEchoBox.Location = new System.Drawing.Point(112' 88);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._localEchoBox.Size = new System.Drawing.Size(96' 20);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._localEchoBox.Size = new System.Drawing.Size(96' 20);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._localEchoBox.TabIndex = 8;
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._newLineLabel.Location = new System.Drawing.Point(8' 112);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._newLineLabel.Location = new System.Drawing.Point(8' 112);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._newLineLabel.Size = new System.Drawing.Size(96' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._newLineLabel.Size = new System.Drawing.Size(96' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._newLineLabel.TabIndex = 9;
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._newLineBox.Location = new System.Drawing.Point(112' 112);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._newLineBox.Location = new System.Drawing.Point(112' 112);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._newLineBox.Size = new System.Drawing.Size(96' 20);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._newLineBox.Size = new System.Drawing.Size(96' 20);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._newLineBox.TabIndex = 10;
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeLabel.Location = new System.Drawing.Point(8' 136);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeLabel.Location = new System.Drawing.Point(8' 136);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeLabel.Size = new System.Drawing.Size(96' 23);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeLabel.Size = new System.Drawing.Size(96' 23);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeLabel.TabIndex = 12;
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeBox.Location = new System.Drawing.Point(112' 136);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeBox.Location = new System.Drawing.Point(112' 136);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeBox.Size = new System.Drawing.Size(96' 20);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeBox.Size = new System.Drawing.Size(96' 20);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._terminalTypeBox.TabIndex = 13;
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathLabel.Location = new System.Drawing.Point(16' 391);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathLabel.Location = new System.Drawing.Point(16' 391);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathLabel.Size = new System.Drawing.Size(100' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathLabel.Size = new System.Drawing.Size(100' 16);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathLabel.TabIndex = 8;
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathBox.Location = new System.Drawing.Point(120' 390);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathBox.Location = new System.Drawing.Point(120' 390);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathBox.Size = new System.Drawing.Size(172' 19);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathBox.Size = new System.Drawing.Size(172' 19);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._autoExecMacroPathBox.TabIndex = 9;
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectAutoExecMacroButton.Location = new System.Drawing.Point(293' 390);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectAutoExecMacroButton.Location = new System.Drawing.Point(293' 390);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectAutoExecMacroButton.Size = new System.Drawing.Size(19' 19);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectAutoExecMacroButton.Size = new System.Drawing.Size(19' 19);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this._selectAutoExecMacroButton.TabIndex = 10;
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 12);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 12);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(330' 457);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(330' 457);
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,ParsePort,The following statement contains a magic number: return 22;
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,ParsePort,The following statement contains a magic number: return 23;
Magic Number,Poderosa.Sessions,TelnetSSHLoginDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TelnetSSHLoginDialog.cs,PortDescription,The following statement contains a magic number: port == 22
Magic Number,Poderosa.Sessions,TerminalSessionOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TerminalSessionOptions.cs,DefineItems,The following statement contains a magic number: _terminalEstablishTimeout = builder.DefineIntValue(_folder' "terminalEstablishTimeout"' 5000' PreferenceValidatorUtil.PositiveIntegerValidator);
Magic Number,Poderosa.Sessions,LoginDialogInitializeInfo,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TerminalSessionPlugin.cs,LoginDialogInitializeInfo,The following statement contains a magic number: _ports.Add(22);
Magic Number,Poderosa.Sessions,LoginDialogInitializeInfo,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\TerminalSessionPlugin.cs,LoginDialogInitializeInfo,The following statement contains a magic number: _ports.Add(23);
Magic Number,Poderosa,PoderosaLog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Plugin\PoderosaLog.cs,PoderosaLog,The following statement contains a magic number: _capacity = 10000;
Magic Number,Poderosa,StringResourceDictionary,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Plugin\StringResource.cs,Add,The following statement contains a magic number: const int INITIAL_LIST_SIZE = 4;
Magic Number,Granados.AgentForwarding,OpenSSHAgentForwardingMessage,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AgentForwarding.cs,GetImage,The following statement contains a magic number: int messageLength = _payload.Length - 4;
Magic Number,Granados.AgentForwarding,OpenSSHAgentForwardingMessageHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AgentForwarding.cs,OnData,The following statement contains a magic number: DataFragment message = new DataFragment(_buffer.RawBuffer' _buffer.RawBufferOffset + 4' (int)messageLength);
Magic Number,Granados.AgentForwarding,OpenSSHAgentForwardingMessageHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AgentForwarding.cs,OnData,The following statement contains a magic number: _buffer.RemoveHead(4 + (int)messageLength);
Magic Number,Granados.AgentForwarding,OpenSSHAgentForwardingMessageHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AgentForwarding.cs,OnData,The following statement contains a magic number: _buffer.Length >= 4 + messageLength
Magic Number,Granados.AgentForwarding,OpenSSHAgentForwardingMessageHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AgentForwarding.cs,OnData,The following statement contains a magic number: _buffer.Length >= 4
Magic Number,Granados.AgentForwarding,OpenSSHAgentForwardingMessageHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AgentForwarding.cs,ProcessMessage,The following statement contains a magic number: switch (messageType) {                  // for SSH1 keys                  case OpenSSHAgentForwardingMessageType.SSH_AGENTC_REQUEST_RSA_IDENTITIES:                      SSH1Identities();                      break;                  case OpenSSHAgentForwardingMessageType.SSH_AGENTC_RSA_CHALLENGE: {                          reader.ReadUInt32();    // ignored                          BigInteger e = reader.ReadMPInt();                          BigInteger n = reader.ReadMPInt();                          BigInteger encryptedChallenge = reader.ReadMPInt();                          byte[] sessionId = reader.Read(16);                          uint responseType = reader.ReadUInt32();                            SSH1IRSAChallenge(e' n' encryptedChallenge' sessionId' responseType);                      }                      break;                  // for SSH2 keys                  case OpenSSHAgentForwardingMessageType.SSH2_AGENTC_REQUEST_IDENTITIES:                      SSH2Identities();                      break;                  case OpenSSHAgentForwardingMessageType.SSH2_AGENTC_SIGN_REQUEST: {                          byte[] blob = reader.ReadByteString();                          byte[] data = reader.ReadByteString();                          uint flags = reader.ReadUInt32();                            SSH2Sign(blob' data' flags);                      }                      break;                  default:                      SendFailure();                      break;              }
Magic Number,Granados.AgentForwarding,OpenSSHAgentForwardingMessageHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AgentForwarding.cs,SSH1IRSAChallenge,The following statement contains a magic number: byte[] rawchallenge = RSAUtil.StripPKCS1Pad(challenge' 2).GetBytes();
Magic Number,Granados.Crypto,CipherFactory,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,GetKeySize,The following statement contains a magic number: switch (algorithm) {                  case CipherAlgorithm.TripleDES:                      return 24;                  case CipherAlgorithm.Blowfish:                  case CipherAlgorithm.AES128:                  case CipherAlgorithm.AES128CTR:                      return 16;                  case CipherAlgorithm.AES192:                  case CipherAlgorithm.AES192CTR:                      return 24;                  case CipherAlgorithm.AES256:                  case CipherAlgorithm.AES256CTR:                      return 32;                  default:                      throw new SSHException("unknown algorithm " + algorithm);              }
Magic Number,Granados.Crypto,CipherFactory,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,GetKeySize,The following statement contains a magic number: switch (algorithm) {                  case CipherAlgorithm.TripleDES:                      return 24;                  case CipherAlgorithm.Blowfish:                  case CipherAlgorithm.AES128:                  case CipherAlgorithm.AES128CTR:                      return 16;                  case CipherAlgorithm.AES192:                  case CipherAlgorithm.AES192CTR:                      return 24;                  case CipherAlgorithm.AES256:                  case CipherAlgorithm.AES256CTR:                      return 32;                  default:                      throw new SSHException("unknown algorithm " + algorithm);              }
Magic Number,Granados.Crypto,CipherFactory,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,GetKeySize,The following statement contains a magic number: switch (algorithm) {                  case CipherAlgorithm.TripleDES:                      return 24;                  case CipherAlgorithm.Blowfish:                  case CipherAlgorithm.AES128:                  case CipherAlgorithm.AES128CTR:                      return 16;                  case CipherAlgorithm.AES192:                  case CipherAlgorithm.AES192CTR:                      return 24;                  case CipherAlgorithm.AES256:                  case CipherAlgorithm.AES256CTR:                      return 32;                  default:                      throw new SSHException("unknown algorithm " + algorithm);              }
Magic Number,Granados.Crypto,CipherFactory,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,GetKeySize,The following statement contains a magic number: switch (algorithm) {                  case CipherAlgorithm.TripleDES:                      return 24;                  case CipherAlgorithm.Blowfish:                  case CipherAlgorithm.AES128:                  case CipherAlgorithm.AES128CTR:                      return 16;                  case CipherAlgorithm.AES192:                  case CipherAlgorithm.AES192CTR:                      return 24;                  case CipherAlgorithm.AES256:                  case CipherAlgorithm.AES256CTR:                      return 32;                  default:                      throw new SSHException("unknown algorithm " + algorithm);              }
Magic Number,Granados.Crypto,CipherFactory,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,GetBlockSize,The following statement contains a magic number: switch (algorithm) {                  case CipherAlgorithm.TripleDES:                  case CipherAlgorithm.Blowfish:                      return 8;                  case CipherAlgorithm.AES128:                  case CipherAlgorithm.AES192:                  case CipherAlgorithm.AES256:                  case CipherAlgorithm.AES128CTR:                  case CipherAlgorithm.AES192CTR:                  case CipherAlgorithm.AES256CTR:                      return 16;                  default:                      throw new SSHException("unknown algorithm " + algorithm);              }
Magic Number,Granados.Crypto,CipherFactory,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,GetBlockSize,The following statement contains a magic number: switch (algorithm) {                  case CipherAlgorithm.TripleDES:                  case CipherAlgorithm.Blowfish:                      return 8;                  case CipherAlgorithm.AES128:                  case CipherAlgorithm.AES192:                  case CipherAlgorithm.AES256:                  case CipherAlgorithm.AES128CTR:                  case CipherAlgorithm.AES192CTR:                  case CipherAlgorithm.AES256CTR:                      return 16;                  default:                      throw new SSHException("unknown algorithm " + algorithm);              }
Magic Number,Granados.Crypto,MACFactory,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,GetSize,The following statement contains a magic number: return 20;
Magic Number,Granados.Crypto,Bcrypt,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,BcryptHash,The following statement contains a magic number: const int BLOCKSIZE = 8;
Magic Number,Granados.Crypto,Bcrypt,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,BcryptHash,The following statement contains a magic number: i < 64
Magic Number,Granados.Crypto,Bcrypt,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,BcryptHash,The following statement contains a magic number: j < 32
Magic Number,Granados.Crypto,Bcrypt,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,BcryptHash,The following statement contains a magic number: i < 64
Magic Number,Granados.Crypto,Bcrypt,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,BcryptHash,The following statement contains a magic number: byte b2 = cdata[i + 2];
Magic Number,Granados.Crypto,Bcrypt,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,BcryptHash,The following statement contains a magic number: byte b3 = cdata[i + 3];
Magic Number,Granados.Crypto,Bcrypt,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,BcryptHash,The following statement contains a magic number: cdata[i + 3] = b0;
Magic Number,Granados.Crypto,Bcrypt,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,BcryptHash,The following statement contains a magic number: cdata[i + 2] = b1;
Magic Number,Granados.Crypto,Bcrypt,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,BcryptHash,The following statement contains a magic number: i < 32
Magic Number,Granados.Crypto,Bcrypt,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,BcryptPbkdf,The following statement contains a magic number: pass.Length == 0 || salt.Length == 0 || keylen <= 0 || keylen > 1024
Magic Number,Granados.Crypto,Bcrypt,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,BcryptPbkdf,The following statement contains a magic number: int stride = (keylen + 32 - 1) / 32;
Magic Number,Granados.Crypto,Bcrypt,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,BcryptPbkdf,The following statement contains a magic number: int stride = (keylen + 32 - 1) / 32;
Magic Number,Granados.Crypto,Bcrypt,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,BcryptPbkdf,The following statement contains a magic number: byte[] countsalt = new byte[4];
Magic Number,Granados.Crypto,Bcrypt,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,BcryptPbkdf,The following statement contains a magic number: countsalt[0] = (byte)(count >> 24);
Magic Number,Granados.Crypto,Bcrypt,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,BcryptPbkdf,The following statement contains a magic number: countsalt[1] = (byte)(count >> 16);
Magic Number,Granados.Crypto,Bcrypt,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,BcryptPbkdf,The following statement contains a magic number: countsalt[2] = (byte)(count >> 8);
Magic Number,Granados.Crypto,Bcrypt,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,BcryptPbkdf,The following statement contains a magic number: countsalt[2] = (byte)(count >> 8);
Magic Number,Granados.Crypto,Bcrypt,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,BcryptPbkdf,The following statement contains a magic number: countsalt[3] = (byte)(count);
Magic Number,Granados.Crypto,CipherUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\CipherUtil.cs,GetIntLE,The following statement contains a magic number: return ((uint)src[offset] |                  ((uint)(src[offset + 1]) << 8) |                  ((uint)(src[offset + 2]) << 16) |                  ((uint)(src[offset + 3]) << 24));
Magic Number,Granados.Crypto,CipherUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\CipherUtil.cs,GetIntLE,The following statement contains a magic number: return ((uint)src[offset] |                  ((uint)(src[offset + 1]) << 8) |                  ((uint)(src[offset + 2]) << 16) |                  ((uint)(src[offset + 3]) << 24));
Magic Number,Granados.Crypto,CipherUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\CipherUtil.cs,GetIntLE,The following statement contains a magic number: return ((uint)src[offset] |                  ((uint)(src[offset + 1]) << 8) |                  ((uint)(src[offset + 2]) << 16) |                  ((uint)(src[offset + 3]) << 24));
Magic Number,Granados.Crypto,CipherUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\CipherUtil.cs,GetIntLE,The following statement contains a magic number: return ((uint)src[offset] |                  ((uint)(src[offset + 1]) << 8) |                  ((uint)(src[offset + 2]) << 16) |                  ((uint)(src[offset + 3]) << 24));
Magic Number,Granados.Crypto,CipherUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\CipherUtil.cs,GetIntLE,The following statement contains a magic number: return ((uint)src[offset] |                  ((uint)(src[offset + 1]) << 8) |                  ((uint)(src[offset + 2]) << 16) |                  ((uint)(src[offset + 3]) << 24));
Magic Number,Granados.Crypto,CipherUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\CipherUtil.cs,PutIntLE,The following statement contains a magic number: dest[offset + 1] = (byte)((val >> 8) & 0xff);
Magic Number,Granados.Crypto,CipherUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\CipherUtil.cs,PutIntLE,The following statement contains a magic number: dest[offset + 2] = (byte)((val >> 16) & 0xff);
Magic Number,Granados.Crypto,CipherUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\CipherUtil.cs,PutIntLE,The following statement contains a magic number: dest[offset + 2] = (byte)((val >> 16) & 0xff);
Magic Number,Granados.Crypto,CipherUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\CipherUtil.cs,PutIntLE,The following statement contains a magic number: dest[offset + 3] = (byte)((val >> 24) & 0xff);
Magic Number,Granados.Crypto,CipherUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\CipherUtil.cs,PutIntLE,The following statement contains a magic number: dest[offset + 3] = (byte)((val >> 24) & 0xff);
Magic Number,Granados.Crypto,CipherUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\CipherUtil.cs,GetIntBE,The following statement contains a magic number: return (((uint)(src[offset]) << 24) |                  ((uint)(src[offset + 1]) << 16) |                  ((uint)(src[offset + 2]) << 8) |                  ((uint)src[offset + 3]));
Magic Number,Granados.Crypto,CipherUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\CipherUtil.cs,GetIntBE,The following statement contains a magic number: return (((uint)(src[offset]) << 24) |                  ((uint)(src[offset + 1]) << 16) |                  ((uint)(src[offset + 2]) << 8) |                  ((uint)src[offset + 3]));
Magic Number,Granados.Crypto,CipherUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\CipherUtil.cs,GetIntBE,The following statement contains a magic number: return (((uint)(src[offset]) << 24) |                  ((uint)(src[offset + 1]) << 16) |                  ((uint)(src[offset + 2]) << 8) |                  ((uint)src[offset + 3]));
Magic Number,Granados.Crypto,CipherUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\CipherUtil.cs,GetIntBE,The following statement contains a magic number: return (((uint)(src[offset]) << 24) |                  ((uint)(src[offset + 1]) << 16) |                  ((uint)(src[offset + 2]) << 8) |                  ((uint)src[offset + 3]));
Magic Number,Granados.Crypto,CipherUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\CipherUtil.cs,GetIntBE,The following statement contains a magic number: return (((uint)(src[offset]) << 24) |                  ((uint)(src[offset + 1]) << 16) |                  ((uint)(src[offset + 2]) << 8) |                  ((uint)src[offset + 3]));
Magic Number,Granados.Crypto,CipherUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\CipherUtil.cs,PutIntBE,The following statement contains a magic number: dest[offset] = (byte)((val >> 24) & 0xff);
Magic Number,Granados.Crypto,CipherUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\CipherUtil.cs,PutIntBE,The following statement contains a magic number: dest[offset + 1] = (byte)((val >> 16) & 0xff);
Magic Number,Granados.Crypto,CipherUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\CipherUtil.cs,PutIntBE,The following statement contains a magic number: dest[offset + 2] = (byte)((val >> 8) & 0xff);
Magic Number,Granados.Crypto,CipherUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\CipherUtil.cs,PutIntBE,The following statement contains a magic number: dest[offset + 2] = (byte)((val >> 8) & 0xff);
Magic Number,Granados.Crypto,CipherUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\CipherUtil.cs,PutIntBE,The following statement contains a magic number: dest[offset + 3] = (byte)(val & 0xff);
Magic Number,Granados.Crypto,BigIntegerConverter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\CipherUtil.cs,ParseBinary,The following statement contains a magic number: int bytes = (s.Length + 7) / 8;
Magic Number,Granados.Crypto,BigIntegerConverter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\CipherUtil.cs,ParseBinary,The following statement contains a magic number: int bytes = (s.Length + 7) / 8;
Magic Number,Granados.Crypto,BigIntegerConverter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\CipherUtil.cs,ParseBinary,The following statement contains a magic number: byte mask = (byte)(1 << ((s.Length - 1) % 8));
Magic Number,Granados.Crypto,BigIntegerConverter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\CipherUtil.cs,ParseHex,The following statement contains a magic number: int bytes = (s.Length + 1) / 2;
Magic Number,Granados.Crypto,BigIntegerConverter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\CipherUtil.cs,ParseHex,The following statement contains a magic number: bool highbits = (s.Length % 2 == 0);
Magic Number,Granados.Crypto,BigIntegerConverter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\CipherUtil.cs,ParseHex,The following statement contains a magic number: switch (ch) {                      case '0':                      case '1':                      case '2':                      case '3':                      case '4':                      case '5':                      case '6':                      case '7':                      case '8':                      case '9':                          v = (byte)(ch - '0');                          break;                      case 'a':                      case 'b':                      case 'c':                      case 'd':                      case 'e':                      case 'f':                          v = (byte)(ch - 'a' + 10);                          break;                      case 'A':                      case 'B':                      case 'C':                      case 'D':                      case 'E':                      case 'F':                          v = (byte)(ch - 'A' + 10);                          break;                      default:                          throw new ArgumentException("invalid hex number");                  }
Magic Number,Granados.Crypto,BigIntegerConverter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\CipherUtil.cs,ParseHex,The following statement contains a magic number: switch (ch) {                      case '0':                      case '1':                      case '2':                      case '3':                      case '4':                      case '5':                      case '6':                      case '7':                      case '8':                      case '9':                          v = (byte)(ch - '0');                          break;                      case 'a':                      case 'b':                      case 'c':                      case 'd':                      case 'e':                      case 'f':                          v = (byte)(ch - 'a' + 10);                          break;                      case 'A':                      case 'B':                      case 'C':                      case 'D':                      case 'E':                      case 'F':                          v = (byte)(ch - 'A' + 10);                          break;                      default:                          throw new ArgumentException("invalid hex number");                  }
Magic Number,Granados.Crypto,BigIntegerConverter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\CipherUtil.cs,ParseHex,The following statement contains a magic number: b |= (byte)(v << 4);
Magic Number,Granados.Crypto.SSH1,BlowfishCipher1,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,BlowfishCipher1,The following statement contains a magic number: Debug.Assert(key.Length == 32);
Magic Number,Granados.Crypto.SSH1,TripleDESCipher1,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,TripleDESCipher1,The following statement contains a magic number: Debug.Assert(key.Length == 24);
Magic Number,Granados.Crypto.SSH1,TripleDESCipher1,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,TripleDESCipher1,The following statement contains a magic number: _DESCipher2.InitializeKey(key' 8);
Magic Number,Granados.Crypto.SSH1,TripleDESCipher1,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,TripleDESCipher1,The following statement contains a magic number: _DESCipher3.InitializeKey(key' 16);
Magic Number,Granados.Crypto.SSH2,BlowfishCipher2,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,BlowfishCipher2,The following statement contains a magic number: Debug.Assert(key.Length == 32);
Magic Number,Granados.Crypto.SSH2,TripleDESCipher2,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,TripleDESCipher2,The following statement contains a magic number: _DESCipher2.InitializeKey(key' 8);
Magic Number,Granados.Crypto.SSH2,TripleDESCipher2,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,TripleDESCipher2,The following statement contains a magic number: _DESCipher3.InitializeKey(key' 16);
Magic Number,Granados.Crypto.SSH2,TripleDESCipher2,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,Init,The following statement contains a magic number: Debug.Assert(key.Length == 24);
Magic Number,Granados.Crypto.SSH2,TripleDESCipher2,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,Init,The following statement contains a magic number: _buffer = new byte[8];
Magic Number,Granados.Crypto.SSH2,TripleDESCipher2,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,Init,The following statement contains a magic number: _ivSave = new byte[8];
Magic Number,Granados.Crypto.SSH2,TripleDESCipher2,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,Init,The following statement contains a magic number: _DESCipher2.InitializeKey(key' 8);
Magic Number,Granados.Crypto.SSH2,TripleDESCipher2,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,Init,The following statement contains a magic number: _DESCipher3.InitializeKey(key' 16);
Magic Number,Granados.Crypto.SSH2,TripleDESCipher2,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,Encrypt,The following statement contains a magic number: _DESCipher1.EncryptCBC(data' offset + n' 8' result' ro + n);
Magic Number,Granados.Crypto.SSH2,TripleDESCipher2,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,Encrypt,The following statement contains a magic number: _DESCipher2.DecryptCBC(result' ro + n' 8' _buffer' 0);
Magic Number,Granados.Crypto.SSH2,TripleDESCipher2,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,Encrypt,The following statement contains a magic number: _DESCipher3.EncryptCBC(_buffer' 0' 8' result' ro + n);
Magic Number,Granados.Crypto.SSH2,TripleDESCipher2,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,Encrypt,The following statement contains a magic number: n += 8;
Magic Number,Granados.Crypto.SSH2,TripleDESCipher2,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,Decrypt,The following statement contains a magic number: Buffer.BlockCopy(data' offset + n' _ivSave' 0' 8);
Magic Number,Granados.Crypto.SSH2,TripleDESCipher2,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,Decrypt,The following statement contains a magic number: _DESCipher3.DecryptCBC(data' offset + n' 8' result' ro + n);
Magic Number,Granados.Crypto.SSH2,TripleDESCipher2,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,Decrypt,The following statement contains a magic number: _DESCipher2.EncryptCBC(result' ro + n' 8' _buffer' 0);
Magic Number,Granados.Crypto.SSH2,TripleDESCipher2,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,Decrypt,The following statement contains a magic number: _DESCipher1.DecryptCBC(_buffer' 0' 8' result' ro + n);
Magic Number,Granados.Crypto.SSH2,TripleDESCipher2,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\AlgorithmSupport.cs,Decrypt,The following statement contains a magic number: n += 8;
Magic Number,Granados.Util,Base64,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Base64.cs,Decode,The following statement contains a magic number: byte[] data = new byte[(length * 3) / 4];
Magic Number,Granados.Util,Base64,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Base64.cs,Decode,The following statement contains a magic number: byte[] data = new byte[(length * 3) / 4];
Magic Number,Granados.Util,Base64,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Base64.cs,Decode,The following statement contains a magic number: v = (v << 6) | c;
Magic Number,Granados.Util,Base64,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Base64.cs,Decode,The following statement contains a magic number: bits += 6;
Magic Number,Granados.Util,Base64,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Base64.cs,Decode,The following statement contains a magic number: bits -= 8;
Magic Number,Granados.Util,Base64,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Base64.cs,Decode,The following statement contains a magic number: bits >= 8
Magic Number,Granados.Util,Base64,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Base64.cs,Encode,The following statement contains a magic number: r = length % 3;
Magic Number,Granados.Util,Base64,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Base64.cs,Encode,The following statement contains a magic number: encoded = new byte[((length / 3) * 4) + (r != 0 ? 4 : 0)];
Magic Number,Granados.Util,Base64,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Base64.cs,Encode,The following statement contains a magic number: encoded = new byte[((length / 3) * 4) + (r != 0 ? 4 : 0)];
Magic Number,Granados.Util,Base64,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Base64.cs,Encode,The following statement contains a magic number: encoded = new byte[((length / 3) * 4) + (r != 0 ? 4 : 0)];
Magic Number,Granados.Util,Base64,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Base64.cs,Encode,The following statement contains a magic number: x1 = (data[i] & 0xfc) >> 2;
Magic Number,Granados.Util,Base64,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Base64.cs,Encode,The following statement contains a magic number: x2 = (((data[i] & 0x03) << 4) | ((data[i + 1] & 0xf0) >> 4));
Magic Number,Granados.Util,Base64,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Base64.cs,Encode,The following statement contains a magic number: x2 = (((data[i] & 0x03) << 4) | ((data[i + 1] & 0xf0) >> 4));
Magic Number,Granados.Util,Base64,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Base64.cs,Encode,The following statement contains a magic number: x3 = (((data[i + 1] & 0x0f) << 2) | ((data[i + 2] & 0xc0) >> 6));
Magic Number,Granados.Util,Base64,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Base64.cs,Encode,The following statement contains a magic number: x3 = (((data[i + 1] & 0x0f) << 2) | ((data[i + 2] & 0xc0) >> 6));
Magic Number,Granados.Util,Base64,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Base64.cs,Encode,The following statement contains a magic number: x3 = (((data[i + 1] & 0x0f) << 2) | ((data[i + 2] & 0xc0) >> 6));
Magic Number,Granados.Util,Base64,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Base64.cs,Encode,The following statement contains a magic number: x4 = (data[i + 2] & 0x3f);
Magic Number,Granados.Util,Base64,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Base64.cs,Encode,The following statement contains a magic number: encoded[j + 2] = _toBase64[x3];
Magic Number,Granados.Util,Base64,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Base64.cs,Encode,The following statement contains a magic number: encoded[j + 3] = _toBase64[x4];
Magic Number,Granados.Util,Base64,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Base64.cs,Encode,The following statement contains a magic number: x1 = (data[i] & 0xfc) >> 2;
Magic Number,Granados.Util,Base64,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Base64.cs,Encode,The following statement contains a magic number: x2 = (data[i] & 0x03) << 4;
Magic Number,Granados.Util,Base64,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Base64.cs,Encode,The following statement contains a magic number: x2 |= ((data[i + 1] & 0xf0) >> 4);
Magic Number,Granados.Util,Base64,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Base64.cs,Encode,The following statement contains a magic number: x3 = (data[i + 1] & 0x0f) << 2;
Magic Number,Granados.Util,Base64,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Base64.cs,Encode,The following statement contains a magic number: r == 2
Magic Number,Granados.Util,SSHUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSHUtil.cs,ReadUInt32,The following statement contains a magic number: ret <<= 8;
Magic Number,Granados.Util,SSHUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSHUtil.cs,ReadUInt32,The following statement contains a magic number: ret <<= 8;
Magic Number,Granados.Util,SSHUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSHUtil.cs,ReadUInt32,The following statement contains a magic number: ret |= data[offset + 2];
Magic Number,Granados.Util,SSHUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSHUtil.cs,ReadUInt32,The following statement contains a magic number: ret <<= 8;
Magic Number,Granados.Util,SSHUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSHUtil.cs,ReadUInt32,The following statement contains a magic number: ret |= data[offset + 3];
Magic Number,Granados.Util,SSHUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSHUtil.cs,WriteUIntToByteArray,The following statement contains a magic number: dst[pos] = (byte)(data >> 24);
Magic Number,Granados.Util,SSHUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSHUtil.cs,WriteUIntToByteArray,The following statement contains a magic number: dst[pos + 1] = (byte)(data >> 16);
Magic Number,Granados.Util,SSHUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSHUtil.cs,WriteUIntToByteArray,The following statement contains a magic number: dst[pos + 2] = (byte)(data >> 8);
Magic Number,Granados.Util,SSHUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSHUtil.cs,WriteUIntToByteArray,The following statement contains a magic number: dst[pos + 2] = (byte)(data >> 8);
Magic Number,Granados.Util,SSHUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSHUtil.cs,WriteUIntToByteArray,The following statement contains a magic number: dst[pos + 3] = (byte)(data);
Magic Number,Granados.Util,DebugUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSHUtil.cs,DumpByteArray,The following statement contains a magic number: (i % 4) == 3
Magic Number,Granados.Util,DebugUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSHUtil.cs,DumpByteArray,The following statement contains a magic number: (i % 4) == 3
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,Blowfish,The following statement contains a magic number: S0 = new uint[256];
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,Blowfish,The following statement contains a magic number: S1 = new uint[256];
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,Blowfish,The following statement contains a magic number: S2 = new uint[256];
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,Blowfish,The following statement contains a magic number: S3 = new uint[256];
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,Blowfish,The following statement contains a magic number: P = new uint[18];
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,Blowfish,The following statement contains a magic number: IV = new byte[8];
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,Blowfish,The following statement contains a magic number: enc = new byte[8];
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,Blowfish,The following statement contains a magic number: dec = new byte[8];
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: uint temp =                      (((uint)(key[j]) << 24) |                      ((uint)(key[(j + 1) % keyLen]) << 16) |                      ((uint)(key[(j + 2) % keyLen]) << 8) |                      ((uint)(key[(j + 3) % keyLen])));
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: uint temp =                      (((uint)(key[j]) << 24) |                      ((uint)(key[(j + 1) % keyLen]) << 16) |                      ((uint)(key[(j + 2) % keyLen]) << 8) |                      ((uint)(key[(j + 3) % keyLen])));
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: uint temp =                      (((uint)(key[j]) << 24) |                      ((uint)(key[(j + 1) % keyLen]) << 16) |                      ((uint)(key[(j + 2) % keyLen]) << 8) |                      ((uint)(key[(j + 3) % keyLen])));
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: uint temp =                      (((uint)(key[j]) << 24) |                      ((uint)(key[(j + 1) % keyLen]) << 16) |                      ((uint)(key[(j + 2) % keyLen]) << 8) |                      ((uint)(key[(j + 3) % keyLen])));
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: uint temp =                      (((uint)(key[j]) << 24) |                      ((uint)(key[(j + 1) % keyLen]) << 16) |                      ((uint)(key[(j + 2) % keyLen]) << 8) |                      ((uint)(key[(j + 3) % keyLen])));
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: j = (j + 4) % keyLen;
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: i < 16 + 2
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: i < 16 + 2
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: byte[] LR = new byte[8];
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: P[i + 1] = CipherUtil.GetIntBE(LR' 4);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: i < 16 + 2
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: i < 16 + 2
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: S0[j + 1] = CipherUtil.GetIntBE(LR' 4);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: j < 256
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: S1[j + 1] = CipherUtil.GetIntBE(LR' 4);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: j < 256
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: S2[j + 1] = CipherUtil.GetIntBE(LR' 4);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: j < 256
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: S3[j + 1] = CipherUtil.GetIntBE(LR' 4);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: j < 256
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: uint temp =                      (((uint)(key[j]) << 24) |                      ((uint)(key[(j + 1) % keyLen]) << 16) |                      ((uint)(key[(j + 2) % keyLen]) << 8) |                      ((uint)(key[(j + 3) % keyLen])));
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: uint temp =                      (((uint)(key[j]) << 24) |                      ((uint)(key[(j + 1) % keyLen]) << 16) |                      ((uint)(key[(j + 2) % keyLen]) << 8) |                      ((uint)(key[(j + 3) % keyLen])));
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: uint temp =                      (((uint)(key[j]) << 24) |                      ((uint)(key[(j + 1) % keyLen]) << 16) |                      ((uint)(key[(j + 2) % keyLen]) << 8) |                      ((uint)(key[(j + 3) % keyLen])));
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: uint temp =                      (((uint)(key[j]) << 24) |                      ((uint)(key[(j + 1) % keyLen]) << 16) |                      ((uint)(key[(j + 2) % keyLen]) << 8) |                      ((uint)(key[(j + 3) % keyLen])));
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: uint temp =                      (((uint)(key[j]) << 24) |                      ((uint)(key[(j + 1) % keyLen]) << 16) |                      ((uint)(key[(j + 2) % keyLen]) << 8) |                      ((uint)(key[(j + 3) % keyLen])));
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: j = (j + 4) % keyLen;
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: i < 16 + 2
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: i < 16 + 2
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: byte[] LR = new byte[8];
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: k < 8
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: P[i + 1] = CipherUtil.GetIntBE(LR' 4);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: i < 16 + 2
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: i < 16 + 2
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: k < 8
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: S0[j + 1] = CipherUtil.GetIntBE(LR' 4);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: j < 256
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: k < 8
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: S1[j + 1] = CipherUtil.GetIntBE(LR' 4);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: j < 256
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: k < 8
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: S2[j + 1] = CipherUtil.GetIntBE(LR' 4);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: j < 256
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: k < 8
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: S3[j + 1] = CipherUtil.GetIntBE(LR' 4);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,ExpandState,The following statement contains a magic number: j < 256
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,InitializeState,The following statement contains a magic number: Array.Copy(blowfish_pbox' 0' P' 0' 18);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,InitializeState,The following statement contains a magic number: Array.Copy(blowfish_sbox' 0' S0' 0' 256);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,InitializeState,The following statement contains a magic number: Array.Copy(blowfish_sbox' 256' S1' 0' 256);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,InitializeState,The following statement contains a magic number: Array.Copy(blowfish_sbox' 256' S1' 0' 256);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,InitializeState,The following statement contains a magic number: Array.Copy(blowfish_sbox' 512' S2' 0' 256);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,InitializeState,The following statement contains a magic number: Array.Copy(blowfish_sbox' 512' S2' 0' 256);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,InitializeState,The following statement contains a magic number: Array.Copy(blowfish_sbox' 768' S3' 0' 256);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,InitializeState,The following statement contains a magic number: Array.Copy(blowfish_sbox' 768' S3' 0' 256);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: R = CipherUtil.GetIntBE(input' inOffset + 4);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[1]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[1]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[1]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[2]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[2]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[2]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[2]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[3]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[3]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[3]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[3]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[4]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[4]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[4]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[4]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[5]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[5]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[5]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[5]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[6]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[6]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[6]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[6]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[7]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[7]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[7]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[7]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[8]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[8]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[8]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[8]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[9]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[9]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[9]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[9]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[10]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[10]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[10]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[10]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[11]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[11]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[11]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[11]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[12]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[12]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[12]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[12]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[13]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[13]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[13]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[13]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[14]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[14]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[14]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[14]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[15]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[15]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[15]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[15]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[16]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[16]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[16]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[16]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: R ^= P[17];
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockEncrypt,The following statement contains a magic number: CipherUtil.PutIntBE(L' output' outOffset + 4);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: R = CipherUtil.GetIntBE(input' inOffset + 4);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: L ^= P[17];
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[16]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[16]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[16]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[16]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[15]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[15]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[15]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[15]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[14]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[14]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[14]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[14]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[13]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[13]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[13]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[13]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[12]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[12]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[12]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[12]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[11]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[11]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[11]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[11]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[10]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[10]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[10]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[10]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[9]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[9]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[9]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[9]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[8]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[8]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[8]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[8]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[7]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[7]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[7]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[7]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[6]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[6]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[6]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[6]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[5]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[5]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[5]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[5]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[4]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[4]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[4]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[4]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[3]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[3]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[3]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[3]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[2]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[2]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[2]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: R ^= ((((S0[(int)((L >> 24) & 0xff)] + S1[(int)((L >> 16) & 0xff)]) ^                  S2[(int)((L >> 8) & 0xff)]) + S3[(int)(L & 0xff)]) ^ P[2]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[1]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[1]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: L ^= ((((S0[(int)((R >> 24) & 0xff)] + S1[(int)((R >> 16) & 0xff)]) ^                  S2[(int)((R >> 8) & 0xff)]) + S3[(int)(R & 0xff)]) ^ P[1]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,BlockDecrypt,The following statement contains a magic number: CipherUtil.PutIntBE(L' output' outOffset + 4);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,EncryptSSH1Style,The following statement contains a magic number: j = 3 - i;
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,EncryptSSH1Style,The following statement contains a magic number: IV[i + 4] ^= src[si + 4 + j];
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,EncryptSSH1Style,The following statement contains a magic number: IV[i + 4] ^= src[si + 4 + j];
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,EncryptSSH1Style,The following statement contains a magic number: i < 4
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,EncryptSSH1Style,The following statement contains a magic number: j = 3 - i;
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,EncryptSSH1Style,The following statement contains a magic number: dest[di + i + 4] = IV[4 + j];
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,EncryptSSH1Style,The following statement contains a magic number: dest[di + i + 4] = IV[4 + j];
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,EncryptSSH1Style,The following statement contains a magic number: i < 4
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,DecryptSSH1Style,The following statement contains a magic number: j = (3 - i);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,DecryptSSH1Style,The following statement contains a magic number: enc[i + 4] = src[si + 4 + j];
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,DecryptSSH1Style,The following statement contains a magic number: enc[i + 4] = src[si + 4 + j];
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,DecryptSSH1Style,The following statement contains a magic number: i < 4
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,DecryptSSH1Style,The following statement contains a magic number: j = 3 - i;
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,DecryptSSH1Style,The following statement contains a magic number: dest[di + i + 4] = (byte)((IV[4 + j] ^ dec[4 + j]) & 0xff);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,DecryptSSH1Style,The following statement contains a magic number: dest[di + i + 4] = (byte)((IV[4 + j] ^ dec[4 + j]) & 0xff);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,DecryptSSH1Style,The following statement contains a magic number: dest[di + i + 4] = (byte)((IV[4 + j] ^ dec[4 + j]) & 0xff);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,DecryptSSH1Style,The following statement contains a magic number: IV[4 + j] = enc[4 + j];
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,DecryptSSH1Style,The following statement contains a magic number: IV[4 + j] = enc[4 + j];
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,DecryptSSH1Style,The following statement contains a magic number: i < 4
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,Test,The following statement contains a magic number: w.Length < 3 || w[0].Length != 16 || w[1].Length != 16 || w[2].Length != 16
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,Test,The following statement contains a magic number: w.Length < 3 || w[0].Length != 16 || w[1].Length != 16 || w[2].Length != 16
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,Test,The following statement contains a magic number: w.Length < 3 || w[0].Length != 16 || w[1].Length != 16 || w[2].Length != 16
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,Test,The following statement contains a magic number: w.Length < 3 || w[0].Length != 16 || w[1].Length != 16 || w[2].Length != 16
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,Test,The following statement contains a magic number: w.Length < 3 || w[0].Length != 16 || w[1].Length != 16 || w[2].Length != 16
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,Test,The following statement contains a magic number: byte[] cipher = BigIntegerConverter.ParseHex(w[2]);
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,Test,The following statement contains a magic number: tries <= 3
Magic Number,Granados.Algorithms,Blowfish,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Blowfish.cs,Test,The following statement contains a magic number: tries <= 3
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,DES,The following statement contains a magic number: _key = new uint[32];
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,DES,The following statement contains a magic number: _iv = new byte[8];
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,DES,The following statement contains a magic number: _temp = new byte[8];
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: d = CipherUtil.GetIntLE(key' offset + 4);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: t = ((d >> 4) ^ c) & 0x0f0f0f0f;
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: d ^= t << 4;
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: t = (((c << (16 - (-2))) ^ c) & 0xcccc0000);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: t = (((c << (16 - (-2))) ^ c) & 0xcccc0000);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: c = c ^ t ^ (t >> (16 - (-2)));
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: c = c ^ t ^ (t >> (16 - (-2)));
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: t = (((d << (16 - (-2))) ^ d) & 0xcccc0000);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: t = (((d << (16 - (-2))) ^ d) & 0xcccc0000);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: d = d ^ t ^ (t >> (16 - (-2)));
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: d = d ^ t ^ (t >> (16 - (-2)));
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: t = ((c >> 8) ^ d) & 0x00ff00ff;
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: c ^= t << 8;
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: d = ((d & 0xff) << 16) | (d & 0xff00) |                  ((d >> 16) & 0xff) | ((c >> 4) & 0xf000000);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: d = ((d & 0xff) << 16) | (d & 0xff00) |                  ((d >> 16) & 0xff) | ((c >> 4) & 0xf000000);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: d = ((d & 0xff) << 16) | (d & 0xff00) |                  ((d >> 16) & 0xff) | ((c >> 4) & 0xf000000);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: c = ((c >> 2) | (c << 26));
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: c = ((c >> 2) | (c << 26));
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: d = ((d >> 2) | (d << 26));
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: d = ((d >> 2) | (d << 26));
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: s = SKB[0' (c) & 0x3f] |                  SKB[1' ((c >> 6) & 0x03) | ((c >> 7) & 0x3c)] |                  SKB[2' ((c >> 13) & 0x0f) | ((c >> 14) & 0x30)] |                  SKB[3' ((c >> 20) & 0x01) | ((c >> 21) & 0x06) | ((c >> 22) & 0x38)];
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: s = SKB[0' (c) & 0x3f] |                  SKB[1' ((c >> 6) & 0x03) | ((c >> 7) & 0x3c)] |                  SKB[2' ((c >> 13) & 0x0f) | ((c >> 14) & 0x30)] |                  SKB[3' ((c >> 20) & 0x01) | ((c >> 21) & 0x06) | ((c >> 22) & 0x38)];
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: s = SKB[0' (c) & 0x3f] |                  SKB[1' ((c >> 6) & 0x03) | ((c >> 7) & 0x3c)] |                  SKB[2' ((c >> 13) & 0x0f) | ((c >> 14) & 0x30)] |                  SKB[3' ((c >> 20) & 0x01) | ((c >> 21) & 0x06) | ((c >> 22) & 0x38)];
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: s = SKB[0' (c) & 0x3f] |                  SKB[1' ((c >> 6) & 0x03) | ((c >> 7) & 0x3c)] |                  SKB[2' ((c >> 13) & 0x0f) | ((c >> 14) & 0x30)] |                  SKB[3' ((c >> 20) & 0x01) | ((c >> 21) & 0x06) | ((c >> 22) & 0x38)];
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: s = SKB[0' (c) & 0x3f] |                  SKB[1' ((c >> 6) & 0x03) | ((c >> 7) & 0x3c)] |                  SKB[2' ((c >> 13) & 0x0f) | ((c >> 14) & 0x30)] |                  SKB[3' ((c >> 20) & 0x01) | ((c >> 21) & 0x06) | ((c >> 22) & 0x38)];
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: s = SKB[0' (c) & 0x3f] |                  SKB[1' ((c >> 6) & 0x03) | ((c >> 7) & 0x3c)] |                  SKB[2' ((c >> 13) & 0x0f) | ((c >> 14) & 0x30)] |                  SKB[3' ((c >> 20) & 0x01) | ((c >> 21) & 0x06) | ((c >> 22) & 0x38)];
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: s = SKB[0' (c) & 0x3f] |                  SKB[1' ((c >> 6) & 0x03) | ((c >> 7) & 0x3c)] |                  SKB[2' ((c >> 13) & 0x0f) | ((c >> 14) & 0x30)] |                  SKB[3' ((c >> 20) & 0x01) | ((c >> 21) & 0x06) | ((c >> 22) & 0x38)];
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: s = SKB[0' (c) & 0x3f] |                  SKB[1' ((c >> 6) & 0x03) | ((c >> 7) & 0x3c)] |                  SKB[2' ((c >> 13) & 0x0f) | ((c >> 14) & 0x30)] |                  SKB[3' ((c >> 20) & 0x01) | ((c >> 21) & 0x06) | ((c >> 22) & 0x38)];
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: s = SKB[0' (c) & 0x3f] |                  SKB[1' ((c >> 6) & 0x03) | ((c >> 7) & 0x3c)] |                  SKB[2' ((c >> 13) & 0x0f) | ((c >> 14) & 0x30)] |                  SKB[3' ((c >> 20) & 0x01) | ((c >> 21) & 0x06) | ((c >> 22) & 0x38)];
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: t = SKB[4' (d) & 0x3f] |                  SKB[5' ((d >> 7) & 0x03) | ((d >> 8) & 0x3c)] |                  SKB[6' (d >> 15) & 0x3f] |                  SKB[7' ((d >> 21) & 0x0f) | ((d >> 22) & 0x30)];
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: t = SKB[4' (d) & 0x3f] |                  SKB[5' ((d >> 7) & 0x03) | ((d >> 8) & 0x3c)] |                  SKB[6' (d >> 15) & 0x3f] |                  SKB[7' ((d >> 21) & 0x0f) | ((d >> 22) & 0x30)];
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: t = SKB[4' (d) & 0x3f] |                  SKB[5' ((d >> 7) & 0x03) | ((d >> 8) & 0x3c)] |                  SKB[6' (d >> 15) & 0x3f] |                  SKB[7' ((d >> 21) & 0x0f) | ((d >> 22) & 0x30)];
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: t = SKB[4' (d) & 0x3f] |                  SKB[5' ((d >> 7) & 0x03) | ((d >> 8) & 0x3c)] |                  SKB[6' (d >> 15) & 0x3f] |                  SKB[7' ((d >> 21) & 0x0f) | ((d >> 22) & 0x30)];
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: t = SKB[4' (d) & 0x3f] |                  SKB[5' ((d >> 7) & 0x03) | ((d >> 8) & 0x3c)] |                  SKB[6' (d >> 15) & 0x3f] |                  SKB[7' ((d >> 21) & 0x0f) | ((d >> 22) & 0x30)];
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: t = SKB[4' (d) & 0x3f] |                  SKB[5' ((d >> 7) & 0x03) | ((d >> 8) & 0x3c)] |                  SKB[6' (d >> 15) & 0x3f] |                  SKB[7' ((d >> 21) & 0x0f) | ((d >> 22) & 0x30)];
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: t = SKB[4' (d) & 0x3f] |                  SKB[5' ((d >> 7) & 0x03) | ((d >> 8) & 0x3c)] |                  SKB[6' (d >> 15) & 0x3f] |                  SKB[7' ((d >> 21) & 0x0f) | ((d >> 22) & 0x30)];
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: t = SKB[4' (d) & 0x3f] |                  SKB[5' ((d >> 7) & 0x03) | ((d >> 8) & 0x3c)] |                  SKB[6' (d >> 15) & 0x3f] |                  SKB[7' ((d >> 21) & 0x0f) | ((d >> 22) & 0x30)];
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: t = SKB[4' (d) & 0x3f] |                  SKB[5' ((d >> 7) & 0x03) | ((d >> 8) & 0x3c)] |                  SKB[6' (d >> 15) & 0x3f] |                  SKB[7' ((d >> 21) & 0x0f) | ((d >> 22) & 0x30)];
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: _key[i * 2] = ((t << 16) | (s & 0xffff));
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: _key[i * 2] = ((t << 16) | (s & 0xffff));
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: s = ((s >> 16) | (t & 0xffff0000));
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: _key[(i * 2) + 1] = (s << 4) | (s >> 28);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: _key[(i * 2) + 1] = (s << 4) | (s >> 28);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: _key[(i * 2) + 1] = (s << 4) | (s >> 28);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,InitializeKey,The following statement contains a magic number: i < 16
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,BlockEncrypt,The following statement contains a magic number: uint[] lr = new uint[2];
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,BlockEncrypt,The following statement contains a magic number: lr[1] = CipherUtil.GetIntLE(input' inOffset + 4);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,BlockEncrypt,The following statement contains a magic number: t = (lr[1] << 1) | (lr[1] >> 31);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,BlockEncrypt,The following statement contains a magic number: lr[1] = (lr[0] << 1) | (lr[0] >> 31);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,BlockEncrypt,The following statement contains a magic number: desCipher2(lr' i + 2);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,BlockEncrypt,The following statement contains a magic number: i < 32
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,BlockEncrypt,The following statement contains a magic number: lr[0] = (lr[0] >> 1) | (lr[0] << 31);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,BlockEncrypt,The following statement contains a magic number: lr[1] = (lr[1] >> 1) | (lr[1] << 31);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,BlockEncrypt,The following statement contains a magic number: CipherUtil.PutIntLE(lr[1]' output' outOffset + 4);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,BlockDecrypt,The following statement contains a magic number: uint[] lr = new uint[2];
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,BlockDecrypt,The following statement contains a magic number: lr[1] = CipherUtil.GetIntLE(input' inOffset + 4);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,BlockDecrypt,The following statement contains a magic number: t = (lr[1] << 1) | (lr[1] >> 31);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,BlockDecrypt,The following statement contains a magic number: lr[1] = (lr[0] << 1) | (lr[0] >> 31);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,BlockDecrypt,The following statement contains a magic number: desCipher2(lr' i - 2);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,BlockDecrypt,The following statement contains a magic number: lr[0] = (lr[0] >> 1) | (lr[0] << 31);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,BlockDecrypt,The following statement contains a magic number: lr[1] = (lr[1] >> 1) | (lr[1] << 31);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,BlockDecrypt,The following statement contains a magic number: CipherUtil.PutIntLE(lr[1]' output' outOffset + 4);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,desCipher1,The following statement contains a magic number: t = ((t >> 4) + (t << 28));
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,desCipher1,The following statement contains a magic number: t = ((t >> 4) + (t << 28));
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,desCipher1,The following statement contains a magic number: lr[0] ^= (SPTRANS[1' (t) & 0x3f] |                  SPTRANS[3' (t >> 8) & 0x3f] |                  SPTRANS[5' (t >> 16) & 0x3f] |                  SPTRANS[7' (t >> 24) & 0x3f] |                  SPTRANS[0' (u) & 0x3f] |                  SPTRANS[2' (u >> 8) & 0x3f] |                  SPTRANS[4' (u >> 16) & 0x3f] |                  SPTRANS[6' (u >> 24) & 0x3f]);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,desCipher1,The following statement contains a magic number: lr[0] ^= (SPTRANS[1' (t) & 0x3f] |                  SPTRANS[3' (t >> 8) & 0x3f] |                  SPTRANS[5' (t >> 16) & 0x3f] |                  SPTRANS[7' (t >> 24) & 0x3f] |                  SPTRANS[0' (u) & 0x3f] |                  SPTRANS[2' (u >> 8) & 0x3f] |                  SPTRANS[4' (u >> 16) & 0x3f] |                  SPTRANS[6' (u >> 24) & 0x3f]);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,desCipher1,The following statement contains a magic number: lr[0] ^= (SPTRANS[1' (t) & 0x3f] |                  SPTRANS[3' (t >> 8) & 0x3f] |                  SPTRANS[5' (t >> 16) & 0x3f] |                  SPTRANS[7' (t >> 24) & 0x3f] |                  SPTRANS[0' (u) & 0x3f] |                  SPTRANS[2' (u >> 8) & 0x3f] |                  SPTRANS[4' (u >> 16) & 0x3f] |                  SPTRANS[6' (u >> 24) & 0x3f]);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,desCipher1,The following statement contains a magic number: lr[0] ^= (SPTRANS[1' (t) & 0x3f] |                  SPTRANS[3' (t >> 8) & 0x3f] |                  SPTRANS[5' (t >> 16) & 0x3f] |                  SPTRANS[7' (t >> 24) & 0x3f] |                  SPTRANS[0' (u) & 0x3f] |                  SPTRANS[2' (u >> 8) & 0x3f] |                  SPTRANS[4' (u >> 16) & 0x3f] |                  SPTRANS[6' (u >> 24) & 0x3f]);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,desCipher1,The following statement contains a magic number: lr[0] ^= (SPTRANS[1' (t) & 0x3f] |                  SPTRANS[3' (t >> 8) & 0x3f] |                  SPTRANS[5' (t >> 16) & 0x3f] |                  SPTRANS[7' (t >> 24) & 0x3f] |                  SPTRANS[0' (u) & 0x3f] |                  SPTRANS[2' (u >> 8) & 0x3f] |                  SPTRANS[4' (u >> 16) & 0x3f] |                  SPTRANS[6' (u >> 24) & 0x3f]);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,desCipher1,The following statement contains a magic number: lr[0] ^= (SPTRANS[1' (t) & 0x3f] |                  SPTRANS[3' (t >> 8) & 0x3f] |                  SPTRANS[5' (t >> 16) & 0x3f] |                  SPTRANS[7' (t >> 24) & 0x3f] |                  SPTRANS[0' (u) & 0x3f] |                  SPTRANS[2' (u >> 8) & 0x3f] |                  SPTRANS[4' (u >> 16) & 0x3f] |                  SPTRANS[6' (u >> 24) & 0x3f]);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,desCipher1,The following statement contains a magic number: lr[0] ^= (SPTRANS[1' (t) & 0x3f] |                  SPTRANS[3' (t >> 8) & 0x3f] |                  SPTRANS[5' (t >> 16) & 0x3f] |                  SPTRANS[7' (t >> 24) & 0x3f] |                  SPTRANS[0' (u) & 0x3f] |                  SPTRANS[2' (u >> 8) & 0x3f] |                  SPTRANS[4' (u >> 16) & 0x3f] |                  SPTRANS[6' (u >> 24) & 0x3f]);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,desCipher1,The following statement contains a magic number: lr[0] ^= (SPTRANS[1' (t) & 0x3f] |                  SPTRANS[3' (t >> 8) & 0x3f] |                  SPTRANS[5' (t >> 16) & 0x3f] |                  SPTRANS[7' (t >> 24) & 0x3f] |                  SPTRANS[0' (u) & 0x3f] |                  SPTRANS[2' (u >> 8) & 0x3f] |                  SPTRANS[4' (u >> 16) & 0x3f] |                  SPTRANS[6' (u >> 24) & 0x3f]);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,desCipher1,The following statement contains a magic number: lr[0] ^= (SPTRANS[1' (t) & 0x3f] |                  SPTRANS[3' (t >> 8) & 0x3f] |                  SPTRANS[5' (t >> 16) & 0x3f] |                  SPTRANS[7' (t >> 24) & 0x3f] |                  SPTRANS[0' (u) & 0x3f] |                  SPTRANS[2' (u >> 8) & 0x3f] |                  SPTRANS[4' (u >> 16) & 0x3f] |                  SPTRANS[6' (u >> 24) & 0x3f]);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,desCipher1,The following statement contains a magic number: lr[0] ^= (SPTRANS[1' (t) & 0x3f] |                  SPTRANS[3' (t >> 8) & 0x3f] |                  SPTRANS[5' (t >> 16) & 0x3f] |                  SPTRANS[7' (t >> 24) & 0x3f] |                  SPTRANS[0' (u) & 0x3f] |                  SPTRANS[2' (u >> 8) & 0x3f] |                  SPTRANS[4' (u >> 16) & 0x3f] |                  SPTRANS[6' (u >> 24) & 0x3f]);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,desCipher1,The following statement contains a magic number: lr[0] ^= (SPTRANS[1' (t) & 0x3f] |                  SPTRANS[3' (t >> 8) & 0x3f] |                  SPTRANS[5' (t >> 16) & 0x3f] |                  SPTRANS[7' (t >> 24) & 0x3f] |                  SPTRANS[0' (u) & 0x3f] |                  SPTRANS[2' (u >> 8) & 0x3f] |                  SPTRANS[4' (u >> 16) & 0x3f] |                  SPTRANS[6' (u >> 24) & 0x3f]);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,desCipher1,The following statement contains a magic number: lr[0] ^= (SPTRANS[1' (t) & 0x3f] |                  SPTRANS[3' (t >> 8) & 0x3f] |                  SPTRANS[5' (t >> 16) & 0x3f] |                  SPTRANS[7' (t >> 24) & 0x3f] |                  SPTRANS[0' (u) & 0x3f] |                  SPTRANS[2' (u >> 8) & 0x3f] |                  SPTRANS[4' (u >> 16) & 0x3f] |                  SPTRANS[6' (u >> 24) & 0x3f]);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,desCipher2,The following statement contains a magic number: t = ((t >> 4) + (t << 28));
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,desCipher2,The following statement contains a magic number: t = ((t >> 4) + (t << 28));
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,desCipher2,The following statement contains a magic number: lr[1] ^= (SPTRANS[1' (t) & 0x3f] |                  SPTRANS[3' (t >> 8) & 0x3f] |                  SPTRANS[5' (t >> 16) & 0x3f] |                  SPTRANS[7' (t >> 24) & 0x3f] |                  SPTRANS[0' (u) & 0x3f] |                  SPTRANS[2' (u >> 8) & 0x3f] |                  SPTRANS[4' (u >> 16) & 0x3f] |                  SPTRANS[6' (u >> 24) & 0x3f]);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,desCipher2,The following statement contains a magic number: lr[1] ^= (SPTRANS[1' (t) & 0x3f] |                  SPTRANS[3' (t >> 8) & 0x3f] |                  SPTRANS[5' (t >> 16) & 0x3f] |                  SPTRANS[7' (t >> 24) & 0x3f] |                  SPTRANS[0' (u) & 0x3f] |                  SPTRANS[2' (u >> 8) & 0x3f] |                  SPTRANS[4' (u >> 16) & 0x3f] |                  SPTRANS[6' (u >> 24) & 0x3f]);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,desCipher2,The following statement contains a magic number: lr[1] ^= (SPTRANS[1' (t) & 0x3f] |                  SPTRANS[3' (t >> 8) & 0x3f] |                  SPTRANS[5' (t >> 16) & 0x3f] |                  SPTRANS[7' (t >> 24) & 0x3f] |                  SPTRANS[0' (u) & 0x3f] |                  SPTRANS[2' (u >> 8) & 0x3f] |                  SPTRANS[4' (u >> 16) & 0x3f] |                  SPTRANS[6' (u >> 24) & 0x3f]);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,desCipher2,The following statement contains a magic number: lr[1] ^= (SPTRANS[1' (t) & 0x3f] |                  SPTRANS[3' (t >> 8) & 0x3f] |                  SPTRANS[5' (t >> 16) & 0x3f] |                  SPTRANS[7' (t >> 24) & 0x3f] |                  SPTRANS[0' (u) & 0x3f] |                  SPTRANS[2' (u >> 8) & 0x3f] |                  SPTRANS[4' (u >> 16) & 0x3f] |                  SPTRANS[6' (u >> 24) & 0x3f]);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,desCipher2,The following statement contains a magic number: lr[1] ^= (SPTRANS[1' (t) & 0x3f] |                  SPTRANS[3' (t >> 8) & 0x3f] |                  SPTRANS[5' (t >> 16) & 0x3f] |                  SPTRANS[7' (t >> 24) & 0x3f] |                  SPTRANS[0' (u) & 0x3f] |                  SPTRANS[2' (u >> 8) & 0x3f] |                  SPTRANS[4' (u >> 16) & 0x3f] |                  SPTRANS[6' (u >> 24) & 0x3f]);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,desCipher2,The following statement contains a magic number: lr[1] ^= (SPTRANS[1' (t) & 0x3f] |                  SPTRANS[3' (t >> 8) & 0x3f] |                  SPTRANS[5' (t >> 16) & 0x3f] |                  SPTRANS[7' (t >> 24) & 0x3f] |                  SPTRANS[0' (u) & 0x3f] |                  SPTRANS[2' (u >> 8) & 0x3f] |                  SPTRANS[4' (u >> 16) & 0x3f] |                  SPTRANS[6' (u >> 24) & 0x3f]);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,desCipher2,The following statement contains a magic number: lr[1] ^= (SPTRANS[1' (t) & 0x3f] |                  SPTRANS[3' (t >> 8) & 0x3f] |                  SPTRANS[5' (t >> 16) & 0x3f] |                  SPTRANS[7' (t >> 24) & 0x3f] |                  SPTRANS[0' (u) & 0x3f] |                  SPTRANS[2' (u >> 8) & 0x3f] |                  SPTRANS[4' (u >> 16) & 0x3f] |                  SPTRANS[6' (u >> 24) & 0x3f]);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,desCipher2,The following statement contains a magic number: lr[1] ^= (SPTRANS[1' (t) & 0x3f] |                  SPTRANS[3' (t >> 8) & 0x3f] |                  SPTRANS[5' (t >> 16) & 0x3f] |                  SPTRANS[7' (t >> 24) & 0x3f] |                  SPTRANS[0' (u) & 0x3f] |                  SPTRANS[2' (u >> 8) & 0x3f] |                  SPTRANS[4' (u >> 16) & 0x3f] |                  SPTRANS[6' (u >> 24) & 0x3f]);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,desCipher2,The following statement contains a magic number: lr[1] ^= (SPTRANS[1' (t) & 0x3f] |                  SPTRANS[3' (t >> 8) & 0x3f] |                  SPTRANS[5' (t >> 16) & 0x3f] |                  SPTRANS[7' (t >> 24) & 0x3f] |                  SPTRANS[0' (u) & 0x3f] |                  SPTRANS[2' (u >> 8) & 0x3f] |                  SPTRANS[4' (u >> 16) & 0x3f] |                  SPTRANS[6' (u >> 24) & 0x3f]);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,desCipher2,The following statement contains a magic number: lr[1] ^= (SPTRANS[1' (t) & 0x3f] |                  SPTRANS[3' (t >> 8) & 0x3f] |                  SPTRANS[5' (t >> 16) & 0x3f] |                  SPTRANS[7' (t >> 24) & 0x3f] |                  SPTRANS[0' (u) & 0x3f] |                  SPTRANS[2' (u >> 8) & 0x3f] |                  SPTRANS[4' (u >> 16) & 0x3f] |                  SPTRANS[6' (u >> 24) & 0x3f]);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,desCipher2,The following statement contains a magic number: lr[1] ^= (SPTRANS[1' (t) & 0x3f] |                  SPTRANS[3' (t >> 8) & 0x3f] |                  SPTRANS[5' (t >> 16) & 0x3f] |                  SPTRANS[7' (t >> 24) & 0x3f] |                  SPTRANS[0' (u) & 0x3f] |                  SPTRANS[2' (u >> 8) & 0x3f] |                  SPTRANS[4' (u >> 16) & 0x3f] |                  SPTRANS[6' (u >> 24) & 0x3f]);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,desCipher2,The following statement contains a magic number: lr[1] ^= (SPTRANS[1' (t) & 0x3f] |                  SPTRANS[3' (t >> 8) & 0x3f] |                  SPTRANS[5' (t >> 16) & 0x3f] |                  SPTRANS[7' (t >> 24) & 0x3f] |                  SPTRANS[0' (u) & 0x3f] |                  SPTRANS[2' (u >> 8) & 0x3f] |                  SPTRANS[4' (u >> 16) & 0x3f] |                  SPTRANS[6' (u >> 24) & 0x3f]);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,initPerm,The following statement contains a magic number: uint t = ((lr[1] >> 4) ^ lr[0]) & 0x0f0f0f0f;
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,initPerm,The following statement contains a magic number: lr[1] ^= t << 4;
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,initPerm,The following statement contains a magic number: t = ((lr[0] >> 16) ^ lr[1]) & 0x0000ffff;
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,initPerm,The following statement contains a magic number: lr[0] ^= t << 16;
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,initPerm,The following statement contains a magic number: t = ((lr[1] >> 2) ^ lr[0]) & 0x33333333;
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,initPerm,The following statement contains a magic number: lr[1] ^= t << 2;
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,initPerm,The following statement contains a magic number: t = ((lr[0] >> 8) ^ lr[1]) & 0x00ff00ff;
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,initPerm,The following statement contains a magic number: lr[0] ^= t << 8;
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,finalPerm,The following statement contains a magic number: t = ((lr[0] >> 8) ^ lr[1]) & 0x00ff00ff;
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,finalPerm,The following statement contains a magic number: lr[0] ^= t << 8;
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,finalPerm,The following statement contains a magic number: t = ((lr[1] >> 2) ^ lr[0]) & 0x33333333;
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,finalPerm,The following statement contains a magic number: lr[1] ^= t << 2;
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,finalPerm,The following statement contains a magic number: t = ((lr[0] >> 16) ^ lr[1]) & 0x0000ffff;
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,finalPerm,The following statement contains a magic number: lr[0] ^= t << 16;
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,finalPerm,The following statement contains a magic number: t = ((lr[1] >> 4) ^ lr[0]) & 0x0f0f0f0f;
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,finalPerm,The following statement contains a magic number: lr[1] ^= t << 4;
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,EncryptCBC,The following statement contains a magic number: int nBlocks = inputLen / 8;
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,EncryptCBC,The following statement contains a magic number: CipherUtil.BlockXor(input' inputOffset' 8' _iv' 0);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,EncryptCBC,The following statement contains a magic number: Array.Copy(output' outputOffset' _iv' 0' 8);
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,EncryptCBC,The following statement contains a magic number: inputOffset += 8;
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,EncryptCBC,The following statement contains a magic number: outputOffset += 8;
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,DecryptCBC,The following statement contains a magic number: int nBlocks = inputLen / 8;
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,DecryptCBC,The following statement contains a magic number: i < 8
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,DecryptCBC,The following statement contains a magic number: inputOffset += 8;
Magic Number,Granados.Algorithms,DES,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DES.cs,DecryptCBC,The following statement contains a magic number: outputOffset += 8;
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,InitializeKey,The following statement contains a magic number: !(key.Length == 16 || key.Length == 24 || key.Length == 32)
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,InitializeKey,The following statement contains a magic number: !(key.Length == 16 || key.Length == 24 || key.Length == 32)
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,InitializeKey,The following statement contains a magic number: !(key.Length == 16 || key.Length == 24 || key.Length == 32)
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,InitializeKey,The following statement contains a magic number: int KC = key.Length / 4;
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,InitializeKey,The following statement contains a magic number: tk[i++] = (key[j++] & 0xFF) << 24 |                            (key[j++] & 0xFF) << 16 |                            (key[j++] & 0xFF) << 8 |                            (key[j++] & 0xFF);
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,InitializeKey,The following statement contains a magic number: tk[i++] = (key[j++] & 0xFF) << 24 |                            (key[j++] & 0xFF) << 16 |                            (key[j++] & 0xFF) << 8 |                            (key[j++] & 0xFF);
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,InitializeKey,The following statement contains a magic number: tk[i++] = (key[j++] & 0xFF) << 24 |                            (key[j++] & 0xFF) << 16 |                            (key[j++] & 0xFF) << 8 |                            (key[j++] & 0xFF);
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,InitializeKey,The following statement contains a magic number: tk[0] ^= (S[(tt >> 16) & 0xFF] & 0xFF) << 24 ^                           (S[(tt >> 8) & 0xFF] & 0xFF) << 16 ^                           (S[tt & 0xFF] & 0xFF) << 8 ^                           (S[(tt >> 24) & 0xFF] & 0xFF) ^                           (rcon[rconpointer++] & 0xFF) << 24;
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,InitializeKey,The following statement contains a magic number: tk[0] ^= (S[(tt >> 16) & 0xFF] & 0xFF) << 24 ^                           (S[(tt >> 8) & 0xFF] & 0xFF) << 16 ^                           (S[tt & 0xFF] & 0xFF) << 8 ^                           (S[(tt >> 24) & 0xFF] & 0xFF) ^                           (rcon[rconpointer++] & 0xFF) << 24;
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,InitializeKey,The following statement contains a magic number: tk[0] ^= (S[(tt >> 16) & 0xFF] & 0xFF) << 24 ^                           (S[(tt >> 8) & 0xFF] & 0xFF) << 16 ^                           (S[tt & 0xFF] & 0xFF) << 8 ^                           (S[(tt >> 24) & 0xFF] & 0xFF) ^                           (rcon[rconpointer++] & 0xFF) << 24;
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,InitializeKey,The following statement contains a magic number: tk[0] ^= (S[(tt >> 16) & 0xFF] & 0xFF) << 24 ^                           (S[(tt >> 8) & 0xFF] & 0xFF) << 16 ^                           (S[tt & 0xFF] & 0xFF) << 8 ^                           (S[(tt >> 24) & 0xFF] & 0xFF) ^                           (rcon[rconpointer++] & 0xFF) << 24;
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,InitializeKey,The following statement contains a magic number: tk[0] ^= (S[(tt >> 16) & 0xFF] & 0xFF) << 24 ^                           (S[(tt >> 8) & 0xFF] & 0xFF) << 16 ^                           (S[tt & 0xFF] & 0xFF) << 8 ^                           (S[(tt >> 24) & 0xFF] & 0xFF) ^                           (rcon[rconpointer++] & 0xFF) << 24;
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,InitializeKey,The following statement contains a magic number: tk[0] ^= (S[(tt >> 16) & 0xFF] & 0xFF) << 24 ^                           (S[(tt >> 8) & 0xFF] & 0xFF) << 16 ^                           (S[tt & 0xFF] & 0xFF) << 8 ^                           (S[(tt >> 24) & 0xFF] & 0xFF) ^                           (rcon[rconpointer++] & 0xFF) << 24;
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,InitializeKey,The following statement contains a magic number: tk[0] ^= (S[(tt >> 16) & 0xFF] & 0xFF) << 24 ^                           (S[(tt >> 8) & 0xFF] & 0xFF) << 16 ^                           (S[tt & 0xFF] & 0xFF) << 8 ^                           (S[(tt >> 24) & 0xFF] & 0xFF) ^                           (rcon[rconpointer++] & 0xFF) << 24;
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,InitializeKey,The following statement contains a magic number: KC != 8
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,InitializeKey,The following statement contains a magic number: _Kd[r][j] = U1[(tt >> 24) & 0xFF] ^                                 U2[(tt >> 16) & 0xFF] ^                                 U3[(tt >> 8) & 0xFF] ^                                 U4[tt & 0xFF];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,InitializeKey,The following statement contains a magic number: _Kd[r][j] = U1[(tt >> 24) & 0xFF] ^                                 U2[(tt >> 16) & 0xFF] ^                                 U3[(tt >> 8) & 0xFF] ^                                 U4[tt & 0xFF];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,InitializeKey,The following statement contains a magic number: _Kd[r][j] = U1[(tt >> 24) & 0xFF] ^                                 U2[(tt >> 16) & 0xFF] ^                                 U3[(tt >> 8) & 0xFF] ^                                 U4[tt & 0xFF];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,getRounds,The following statement contains a magic number: switch (keySize) {                  case 16:                      return blockSize == 16 ? 10 : (blockSize == 24 ? 12 : 14);                  case 24:                      return blockSize != 32 ? 12 : 14;                  default:                      return 14;              }
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,getRounds,The following statement contains a magic number: switch (keySize) {                  case 16:                      return blockSize == 16 ? 10 : (blockSize == 24 ? 12 : 14);                  case 24:                      return blockSize != 32 ? 12 : 14;                  default:                      return 14;              }
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,getRounds,The following statement contains a magic number: switch (keySize) {                  case 16:                      return blockSize == 16 ? 10 : (blockSize == 24 ? 12 : 14);                  case 24:                      return blockSize != 32 ? 12 : 14;                  default:                      return 14;              }
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,getRounds,The following statement contains a magic number: switch (keySize) {                  case 16:                      return blockSize == 16 ? 10 : (blockSize == 24 ? 12 : 14);                  case 24:                      return blockSize != 32 ? 12 : 14;                  default:                      return 14;              }
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,getRounds,The following statement contains a magic number: switch (keySize) {                  case 16:                      return blockSize == 16 ? 10 : (blockSize == 24 ? 12 : 14);                  case 24:                      return blockSize != 32 ? 12 : 14;                  default:                      return 14;              }
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,getRounds,The following statement contains a magic number: switch (keySize) {                  case 16:                      return blockSize == 16 ? 10 : (blockSize == 24 ? 12 : 14);                  case 24:                      return blockSize != 32 ? 12 : 14;                  default:                      return 14;              }
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,getRounds,The following statement contains a magic number: switch (keySize) {                  case 16:                      return blockSize == 16 ? 10 : (blockSize == 24 ? 12 : 14);                  case 24:                      return blockSize != 32 ? 12 : 14;                  default:                      return 14;              }
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,getRounds,The following statement contains a magic number: switch (keySize) {                  case 16:                      return blockSize == 16 ? 10 : (blockSize == 24 ? 12 : 14);                  case 24:                      return blockSize != 32 ? 12 : 14;                  default:                      return 14;              }
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,getRounds,The following statement contains a magic number: switch (keySize) {                  case 16:                      return blockSize == 16 ? 10 : (blockSize == 24 ? 12 : 14);                  case 24:                      return blockSize != 32 ? 12 : 14;                  default:                      return 14;              }
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,getRounds,The following statement contains a magic number: switch (keySize) {                  case 16:                      return blockSize == 16 ? 10 : (blockSize == 24 ? 12 : 14);                  case 24:                      return blockSize != 32 ? 12 : 14;                  default:                      return 14;              }
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,getRounds,The following statement contains a magic number: switch (keySize) {                  case 16:                      return blockSize == 16 ? 10 : (blockSize == 24 ? 12 : 14);                  case 24:                      return blockSize != 32 ? 12 : 14;                  default:                      return 14;              }
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: int t0 = ((src[inOffset++] & 0xFF) << 24 |                        (src[inOffset++] & 0xFF) << 16 |                        (src[inOffset++] & 0xFF) << 8 |                        (src[inOffset++] & 0xFF)) ^ Ker[0];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: int t0 = ((src[inOffset++] & 0xFF) << 24 |                        (src[inOffset++] & 0xFF) << 16 |                        (src[inOffset++] & 0xFF) << 8 |                        (src[inOffset++] & 0xFF)) ^ Ker[0];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: int t0 = ((src[inOffset++] & 0xFF) << 24 |                        (src[inOffset++] & 0xFF) << 16 |                        (src[inOffset++] & 0xFF) << 8 |                        (src[inOffset++] & 0xFF)) ^ Ker[0];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: int t1 = ((src[inOffset++] & 0xFF) << 24 |                        (src[inOffset++] & 0xFF) << 16 |                        (src[inOffset++] & 0xFF) << 8 |                        (src[inOffset++] & 0xFF)) ^ Ker[1];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: int t1 = ((src[inOffset++] & 0xFF) << 24 |                        (src[inOffset++] & 0xFF) << 16 |                        (src[inOffset++] & 0xFF) << 8 |                        (src[inOffset++] & 0xFF)) ^ Ker[1];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: int t1 = ((src[inOffset++] & 0xFF) << 24 |                        (src[inOffset++] & 0xFF) << 16 |                        (src[inOffset++] & 0xFF) << 8 |                        (src[inOffset++] & 0xFF)) ^ Ker[1];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: int t2 = ((src[inOffset++] & 0xFF) << 24 |                        (src[inOffset++] & 0xFF) << 16 |                        (src[inOffset++] & 0xFF) << 8 |                        (src[inOffset++] & 0xFF)) ^ Ker[2];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: int t2 = ((src[inOffset++] & 0xFF) << 24 |                        (src[inOffset++] & 0xFF) << 16 |                        (src[inOffset++] & 0xFF) << 8 |                        (src[inOffset++] & 0xFF)) ^ Ker[2];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: int t2 = ((src[inOffset++] & 0xFF) << 24 |                        (src[inOffset++] & 0xFF) << 16 |                        (src[inOffset++] & 0xFF) << 8 |                        (src[inOffset++] & 0xFF)) ^ Ker[2];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: int t2 = ((src[inOffset++] & 0xFF) << 24 |                        (src[inOffset++] & 0xFF) << 16 |                        (src[inOffset++] & 0xFF) << 8 |                        (src[inOffset++] & 0xFF)) ^ Ker[2];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: int t3 = ((src[inOffset++] & 0xFF) << 24 |                        (src[inOffset++] & 0xFF) << 16 |                        (src[inOffset++] & 0xFF) << 8 |                        (src[inOffset++] & 0xFF)) ^ Ker[3];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: int t3 = ((src[inOffset++] & 0xFF) << 24 |                        (src[inOffset++] & 0xFF) << 16 |                        (src[inOffset++] & 0xFF) << 8 |                        (src[inOffset++] & 0xFF)) ^ Ker[3];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: int t3 = ((src[inOffset++] & 0xFF) << 24 |                        (src[inOffset++] & 0xFF) << 16 |                        (src[inOffset++] & 0xFF) << 8 |                        (src[inOffset++] & 0xFF)) ^ Ker[3];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: int t3 = ((src[inOffset++] & 0xFF) << 24 |                        (src[inOffset++] & 0xFF) << 16 |                        (src[inOffset++] & 0xFF) << 8 |                        (src[inOffset++] & 0xFF)) ^ Ker[3];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: a0 = (T1[(t0 >> 24) & 0xFF] ^                        T2[(t1 >> 16) & 0xFF] ^                        T3[(t2 >> 8) & 0xFF] ^                        T4[t3 & 0xFF]) ^ Ker[0];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: a0 = (T1[(t0 >> 24) & 0xFF] ^                        T2[(t1 >> 16) & 0xFF] ^                        T3[(t2 >> 8) & 0xFF] ^                        T4[t3 & 0xFF]) ^ Ker[0];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: a0 = (T1[(t0 >> 24) & 0xFF] ^                        T2[(t1 >> 16) & 0xFF] ^                        T3[(t2 >> 8) & 0xFF] ^                        T4[t3 & 0xFF]) ^ Ker[0];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: a1 = (T1[(t1 >> 24) & 0xFF] ^                        T2[(t2 >> 16) & 0xFF] ^                        T3[(t3 >> 8) & 0xFF] ^                        T4[t0 & 0xFF]) ^ Ker[1];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: a1 = (T1[(t1 >> 24) & 0xFF] ^                        T2[(t2 >> 16) & 0xFF] ^                        T3[(t3 >> 8) & 0xFF] ^                        T4[t0 & 0xFF]) ^ Ker[1];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: a1 = (T1[(t1 >> 24) & 0xFF] ^                        T2[(t2 >> 16) & 0xFF] ^                        T3[(t3 >> 8) & 0xFF] ^                        T4[t0 & 0xFF]) ^ Ker[1];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: a2 = (T1[(t2 >> 24) & 0xFF] ^                        T2[(t3 >> 16) & 0xFF] ^                        T3[(t0 >> 8) & 0xFF] ^                        T4[t1 & 0xFF]) ^ Ker[2];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: a2 = (T1[(t2 >> 24) & 0xFF] ^                        T2[(t3 >> 16) & 0xFF] ^                        T3[(t0 >> 8) & 0xFF] ^                        T4[t1 & 0xFF]) ^ Ker[2];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: a2 = (T1[(t2 >> 24) & 0xFF] ^                        T2[(t3 >> 16) & 0xFF] ^                        T3[(t0 >> 8) & 0xFF] ^                        T4[t1 & 0xFF]) ^ Ker[2];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: a2 = (T1[(t2 >> 24) & 0xFF] ^                        T2[(t3 >> 16) & 0xFF] ^                        T3[(t0 >> 8) & 0xFF] ^                        T4[t1 & 0xFF]) ^ Ker[2];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: a3 = (T1[(t3 >> 24) & 0xFF] ^                        T2[(t0 >> 16) & 0xFF] ^                        T3[(t1 >> 8) & 0xFF] ^                        T4[t2 & 0xFF]) ^ Ker[3];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: a3 = (T1[(t3 >> 24) & 0xFF] ^                        T2[(t0 >> 16) & 0xFF] ^                        T3[(t1 >> 8) & 0xFF] ^                        T4[t2 & 0xFF]) ^ Ker[3];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: a3 = (T1[(t3 >> 24) & 0xFF] ^                        T2[(t0 >> 16) & 0xFF] ^                        T3[(t1 >> 8) & 0xFF] ^                        T4[t2 & 0xFF]) ^ Ker[3];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: a3 = (T1[(t3 >> 24) & 0xFF] ^                        T2[(t0 >> 16) & 0xFF] ^                        T3[(t1 >> 8) & 0xFF] ^                        T4[t2 & 0xFF]) ^ Ker[3];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 0] = (byte)(S[(t0 >> 24) & 0xFF] ^ (tt >> 24));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 0] = (byte)(S[(t0 >> 24) & 0xFF] ^ (tt >> 24));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 1] = (byte)(S[(t1 >> 16) & 0xFF] ^ (tt >> 16));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 1] = (byte)(S[(t1 >> 16) & 0xFF] ^ (tt >> 16));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 2] = (byte)(S[(t2 >> 8) & 0xFF] ^ (tt >> 8));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 2] = (byte)(S[(t2 >> 8) & 0xFF] ^ (tt >> 8));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 2] = (byte)(S[(t2 >> 8) & 0xFF] ^ (tt >> 8));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 3] = (byte)(S[t3 & 0xFF] ^ tt);
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 4] = (byte)(S[(t1 >> 24) & 0xFF] ^ (tt >> 24));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 4] = (byte)(S[(t1 >> 24) & 0xFF] ^ (tt >> 24));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 4] = (byte)(S[(t1 >> 24) & 0xFF] ^ (tt >> 24));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 5] = (byte)(S[(t2 >> 16) & 0xFF] ^ (tt >> 16));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 5] = (byte)(S[(t2 >> 16) & 0xFF] ^ (tt >> 16));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 5] = (byte)(S[(t2 >> 16) & 0xFF] ^ (tt >> 16));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 6] = (byte)(S[(t3 >> 8) & 0xFF] ^ (tt >> 8));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 6] = (byte)(S[(t3 >> 8) & 0xFF] ^ (tt >> 8));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 6] = (byte)(S[(t3 >> 8) & 0xFF] ^ (tt >> 8));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 7] = (byte)(S[t0 & 0xFF] ^ tt);
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: tt = Ker[2];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 8] = (byte)(S[(t2 >> 24) & 0xFF] ^ (tt >> 24));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 8] = (byte)(S[(t2 >> 24) & 0xFF] ^ (tt >> 24));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 8] = (byte)(S[(t2 >> 24) & 0xFF] ^ (tt >> 24));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 9] = (byte)(S[(t3 >> 16) & 0xFF] ^ (tt >> 16));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 9] = (byte)(S[(t3 >> 16) & 0xFF] ^ (tt >> 16));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 9] = (byte)(S[(t3 >> 16) & 0xFF] ^ (tt >> 16));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 10] = (byte)(S[(t0 >> 8) & 0xFF] ^ (tt >> 8));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 10] = (byte)(S[(t0 >> 8) & 0xFF] ^ (tt >> 8));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 10] = (byte)(S[(t0 >> 8) & 0xFF] ^ (tt >> 8));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 11] = (byte)(S[t1 & 0xFF] ^ tt);
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: tt = Ker[3];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 12] = (byte)(S[(t3 >> 24) & 0xFF] ^ (tt >> 24));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 12] = (byte)(S[(t3 >> 24) & 0xFF] ^ (tt >> 24));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 12] = (byte)(S[(t3 >> 24) & 0xFF] ^ (tt >> 24));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 13] = (byte)(S[(t0 >> 16) & 0xFF] ^ (tt >> 16));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 13] = (byte)(S[(t0 >> 16) & 0xFF] ^ (tt >> 16));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 13] = (byte)(S[(t0 >> 16) & 0xFF] ^ (tt >> 16));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 14] = (byte)(S[(t1 >> 8) & 0xFF] ^ (tt >> 8));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 14] = (byte)(S[(t1 >> 8) & 0xFF] ^ (tt >> 8));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 14] = (byte)(S[(t1 >> 8) & 0xFF] ^ (tt >> 8));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockEncrypt,The following statement contains a magic number: dst[outOffset + 15] = (byte)(S[t2 & 0xFF] ^ tt);
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: int t0 = ((src[inOffset++] & 0xFF) << 24 |                        (src[inOffset++] & 0xFF) << 16 |                        (src[inOffset++] & 0xFF) << 8 |                        (src[inOffset++] & 0xFF)) ^ Kdr[0];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: int t0 = ((src[inOffset++] & 0xFF) << 24 |                        (src[inOffset++] & 0xFF) << 16 |                        (src[inOffset++] & 0xFF) << 8 |                        (src[inOffset++] & 0xFF)) ^ Kdr[0];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: int t0 = ((src[inOffset++] & 0xFF) << 24 |                        (src[inOffset++] & 0xFF) << 16 |                        (src[inOffset++] & 0xFF) << 8 |                        (src[inOffset++] & 0xFF)) ^ Kdr[0];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: int t1 = ((src[inOffset++] & 0xFF) << 24 |                        (src[inOffset++] & 0xFF) << 16 |                        (src[inOffset++] & 0xFF) << 8 |                        (src[inOffset++] & 0xFF)) ^ Kdr[1];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: int t1 = ((src[inOffset++] & 0xFF) << 24 |                        (src[inOffset++] & 0xFF) << 16 |                        (src[inOffset++] & 0xFF) << 8 |                        (src[inOffset++] & 0xFF)) ^ Kdr[1];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: int t1 = ((src[inOffset++] & 0xFF) << 24 |                        (src[inOffset++] & 0xFF) << 16 |                        (src[inOffset++] & 0xFF) << 8 |                        (src[inOffset++] & 0xFF)) ^ Kdr[1];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: int t2 = ((src[inOffset++] & 0xFF) << 24 |                        (src[inOffset++] & 0xFF) << 16 |                        (src[inOffset++] & 0xFF) << 8 |                        (src[inOffset++] & 0xFF)) ^ Kdr[2];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: int t2 = ((src[inOffset++] & 0xFF) << 24 |                        (src[inOffset++] & 0xFF) << 16 |                        (src[inOffset++] & 0xFF) << 8 |                        (src[inOffset++] & 0xFF)) ^ Kdr[2];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: int t2 = ((src[inOffset++] & 0xFF) << 24 |                        (src[inOffset++] & 0xFF) << 16 |                        (src[inOffset++] & 0xFF) << 8 |                        (src[inOffset++] & 0xFF)) ^ Kdr[2];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: int t2 = ((src[inOffset++] & 0xFF) << 24 |                        (src[inOffset++] & 0xFF) << 16 |                        (src[inOffset++] & 0xFF) << 8 |                        (src[inOffset++] & 0xFF)) ^ Kdr[2];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: int t3 = ((src[inOffset++] & 0xFF) << 24 |                        (src[inOffset++] & 0xFF) << 16 |                        (src[inOffset++] & 0xFF) << 8 |                        (src[inOffset++] & 0xFF)) ^ Kdr[3];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: int t3 = ((src[inOffset++] & 0xFF) << 24 |                        (src[inOffset++] & 0xFF) << 16 |                        (src[inOffset++] & 0xFF) << 8 |                        (src[inOffset++] & 0xFF)) ^ Kdr[3];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: int t3 = ((src[inOffset++] & 0xFF) << 24 |                        (src[inOffset++] & 0xFF) << 16 |                        (src[inOffset++] & 0xFF) << 8 |                        (src[inOffset++] & 0xFF)) ^ Kdr[3];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: int t3 = ((src[inOffset++] & 0xFF) << 24 |                        (src[inOffset++] & 0xFF) << 16 |                        (src[inOffset++] & 0xFF) << 8 |                        (src[inOffset++] & 0xFF)) ^ Kdr[3];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: a0 = (T5[(t0 >> 24) & 0xFF] ^                        T6[(t3 >> 16) & 0xFF] ^                        T7[(t2 >> 8) & 0xFF] ^                        T8[t1 & 0xFF]) ^ Kdr[0];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: a0 = (T5[(t0 >> 24) & 0xFF] ^                        T6[(t3 >> 16) & 0xFF] ^                        T7[(t2 >> 8) & 0xFF] ^                        T8[t1 & 0xFF]) ^ Kdr[0];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: a0 = (T5[(t0 >> 24) & 0xFF] ^                        T6[(t3 >> 16) & 0xFF] ^                        T7[(t2 >> 8) & 0xFF] ^                        T8[t1 & 0xFF]) ^ Kdr[0];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: a1 = (T5[(t1 >> 24) & 0xFF] ^                        T6[(t0 >> 16) & 0xFF] ^                        T7[(t3 >> 8) & 0xFF] ^                        T8[t2 & 0xFF]) ^ Kdr[1];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: a1 = (T5[(t1 >> 24) & 0xFF] ^                        T6[(t0 >> 16) & 0xFF] ^                        T7[(t3 >> 8) & 0xFF] ^                        T8[t2 & 0xFF]) ^ Kdr[1];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: a1 = (T5[(t1 >> 24) & 0xFF] ^                        T6[(t0 >> 16) & 0xFF] ^                        T7[(t3 >> 8) & 0xFF] ^                        T8[t2 & 0xFF]) ^ Kdr[1];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: a2 = (T5[(t2 >> 24) & 0xFF] ^                        T6[(t1 >> 16) & 0xFF] ^                        T7[(t0 >> 8) & 0xFF] ^                        T8[t3 & 0xFF]) ^ Kdr[2];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: a2 = (T5[(t2 >> 24) & 0xFF] ^                        T6[(t1 >> 16) & 0xFF] ^                        T7[(t0 >> 8) & 0xFF] ^                        T8[t3 & 0xFF]) ^ Kdr[2];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: a2 = (T5[(t2 >> 24) & 0xFF] ^                        T6[(t1 >> 16) & 0xFF] ^                        T7[(t0 >> 8) & 0xFF] ^                        T8[t3 & 0xFF]) ^ Kdr[2];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: a2 = (T5[(t2 >> 24) & 0xFF] ^                        T6[(t1 >> 16) & 0xFF] ^                        T7[(t0 >> 8) & 0xFF] ^                        T8[t3 & 0xFF]) ^ Kdr[2];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: a3 = (T5[(t3 >> 24) & 0xFF] ^                        T6[(t2 >> 16) & 0xFF] ^                        T7[(t1 >> 8) & 0xFF] ^                        T8[t0 & 0xFF]) ^ Kdr[3];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: a3 = (T5[(t3 >> 24) & 0xFF] ^                        T6[(t2 >> 16) & 0xFF] ^                        T7[(t1 >> 8) & 0xFF] ^                        T8[t0 & 0xFF]) ^ Kdr[3];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: a3 = (T5[(t3 >> 24) & 0xFF] ^                        T6[(t2 >> 16) & 0xFF] ^                        T7[(t1 >> 8) & 0xFF] ^                        T8[t0 & 0xFF]) ^ Kdr[3];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: a3 = (T5[(t3 >> 24) & 0xFF] ^                        T6[(t2 >> 16) & 0xFF] ^                        T7[(t1 >> 8) & 0xFF] ^                        T8[t0 & 0xFF]) ^ Kdr[3];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 0] = (byte)(Si[(t0 >> 24) & 0xFF] ^ (tt >> 24));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 0] = (byte)(Si[(t0 >> 24) & 0xFF] ^ (tt >> 24));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 1] = (byte)(Si[(t3 >> 16) & 0xFF] ^ (tt >> 16));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 1] = (byte)(Si[(t3 >> 16) & 0xFF] ^ (tt >> 16));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 2] = (byte)(Si[(t2 >> 8) & 0xFF] ^ (tt >> 8));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 2] = (byte)(Si[(t2 >> 8) & 0xFF] ^ (tt >> 8));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 2] = (byte)(Si[(t2 >> 8) & 0xFF] ^ (tt >> 8));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 3] = (byte)(Si[t1 & 0xFF] ^ tt);
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 4] = (byte)(Si[(t1 >> 24) & 0xFF] ^ (tt >> 24));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 4] = (byte)(Si[(t1 >> 24) & 0xFF] ^ (tt >> 24));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 4] = (byte)(Si[(t1 >> 24) & 0xFF] ^ (tt >> 24));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 5] = (byte)(Si[(t0 >> 16) & 0xFF] ^ (tt >> 16));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 5] = (byte)(Si[(t0 >> 16) & 0xFF] ^ (tt >> 16));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 5] = (byte)(Si[(t0 >> 16) & 0xFF] ^ (tt >> 16));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 6] = (byte)(Si[(t3 >> 8) & 0xFF] ^ (tt >> 8));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 6] = (byte)(Si[(t3 >> 8) & 0xFF] ^ (tt >> 8));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 6] = (byte)(Si[(t3 >> 8) & 0xFF] ^ (tt >> 8));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 7] = (byte)(Si[t2 & 0xFF] ^ tt);
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: tt = Kdr[2];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 8] = (byte)(Si[(t2 >> 24) & 0xFF] ^ (tt >> 24));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 8] = (byte)(Si[(t2 >> 24) & 0xFF] ^ (tt >> 24));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 8] = (byte)(Si[(t2 >> 24) & 0xFF] ^ (tt >> 24));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 9] = (byte)(Si[(t1 >> 16) & 0xFF] ^ (tt >> 16));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 9] = (byte)(Si[(t1 >> 16) & 0xFF] ^ (tt >> 16));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 9] = (byte)(Si[(t1 >> 16) & 0xFF] ^ (tt >> 16));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 10] = (byte)(Si[(t0 >> 8) & 0xFF] ^ (tt >> 8));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 10] = (byte)(Si[(t0 >> 8) & 0xFF] ^ (tt >> 8));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 10] = (byte)(Si[(t0 >> 8) & 0xFF] ^ (tt >> 8));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 11] = (byte)(Si[t3 & 0xFF] ^ tt);
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: tt = Kdr[3];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 12] = (byte)(Si[(t3 >> 24) & 0xFF] ^ (tt >> 24));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 12] = (byte)(Si[(t3 >> 24) & 0xFF] ^ (tt >> 24));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 12] = (byte)(Si[(t3 >> 24) & 0xFF] ^ (tt >> 24));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 13] = (byte)(Si[(t2 >> 16) & 0xFF] ^ (tt >> 16));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 13] = (byte)(Si[(t2 >> 16) & 0xFF] ^ (tt >> 16));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 13] = (byte)(Si[(t2 >> 16) & 0xFF] ^ (tt >> 16));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 14] = (byte)(Si[(t1 >> 8) & 0xFF] ^ (tt >> 8));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 14] = (byte)(Si[(t1 >> 8) & 0xFF] ^ (tt >> 8));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 14] = (byte)(Si[(t1 >> 8) & 0xFF] ^ (tt >> 8));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,blockDecrypt,The following statement contains a magic number: dst[outOffset + 15] = (byte)(Si[t0 & 0xFF] ^ tt);
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: i < 256
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: i < 255
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: byte['] box = new byte[256' 8];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: byte['] box = new byte[256' 8];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: box[1' 7] = 1;
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: j = alog[255 - log[i]];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: box[i' t] = (byte)((j >> (7 - t)) & 0x01);
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: t < 8
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: i < 256
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: byte['] cox = new byte[256' 8];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: byte['] cox = new byte[256' 8];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: j < 8
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: t < 8
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: i < 256
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: S[i] = (byte)(cox[i' 0] << 7);
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: S[i] ^= (byte)(cox[i' t] << (7 - t));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: t < 8
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: i < 256
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: byte[][] G = new byte[4][];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: G[0] = new byte[] { 2' 1' 1' 3 };
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: G[0] = new byte[] { 2' 1' 1' 3 };
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: G[1] = new byte[] { 3' 2' 1' 1 };
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: G[1] = new byte[] { 3' 2' 1' 1 };
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: G[2] = new byte[] { 1' 3' 2' 1 };
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: G[2] = new byte[] { 1' 3' 2' 1 };
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: G[2] = new byte[] { 1' 3' 2' 1 };
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: G[3] = new byte[] { 1' 1' 3' 2 };
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: G[3] = new byte[] { 1' 1' 3' 2 };
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: G[3] = new byte[] { 1' 1' 3' 2 };
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: byte['] AA = new byte[4' 8];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: byte['] AA = new byte[4' 8];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: j < 4
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: AA[i' i + 4] = 1;
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: i < 4
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: byte[][] iG = new byte[4][];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: iG[i] = new byte[4];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: i < 4
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: (AA[t' i] == 0) && (t < 4)
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: j < 8
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: t != 4
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: AA[i' j] = (byte)                              alog[(255 + log[AA[i' j] & 0xFF] - log[pivot & 0xFF]) % 255];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: AA[i' j] = (byte)                              alog[(255 + log[AA[i' j] & 0xFF] - log[pivot & 0xFF]) % 255];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: j < 8
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: t < 4
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: i < 4
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: iG[i][j] = AA[i' j + 4];
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: i < 4
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: T3[t] = mul4(s' G[2]);
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: T4[t] = mul4(s' G[3]);
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: T7[t] = mul4(s' iG[2]);
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: T8[t] = mul4(s' iG[3]);
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: U3[t] = mul4(t' iG[2]);
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: U4[t] = mul4(t' iG[3]);
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: t < 256
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: rcon[t++] = (byte)(r = mul(2' r));
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,Rijndael,The following statement contains a magic number: t < 30
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,mul,The following statement contains a magic number: return (a != 0 && b != 0) ?                      alog[(log[a & 0xFF] + log[b & 0xFF]) % 255] :                      0;
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,mul4,The following statement contains a magic number: int a0 = (b[0] != 0) ? alog[(a + log[b[0] & 0xFF]) % 255] & 0xFF : 0;
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,mul4,The following statement contains a magic number: int a1 = (b[1] != 0) ? alog[(a + log[b[1] & 0xFF]) % 255] & 0xFF : 0;
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,mul4,The following statement contains a magic number: int a2 = (b[2] != 0) ? alog[(a + log[b[2] & 0xFF]) % 255] & 0xFF : 0;
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,mul4,The following statement contains a magic number: int a2 = (b[2] != 0) ? alog[(a + log[b[2] & 0xFF]) % 255] & 0xFF : 0;
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,mul4,The following statement contains a magic number: int a2 = (b[2] != 0) ? alog[(a + log[b[2] & 0xFF]) % 255] & 0xFF : 0;
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,mul4,The following statement contains a magic number: int a3 = (b[3] != 0) ? alog[(a + log[b[3] & 0xFF]) % 255] & 0xFF : 0;
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,mul4,The following statement contains a magic number: int a3 = (b[3] != 0) ? alog[(a + log[b[3] & 0xFF]) % 255] & 0xFF : 0;
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,mul4,The following statement contains a magic number: int a3 = (b[3] != 0) ? alog[(a + log[b[3] & 0xFF]) % 255] & 0xFF : 0;
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,mul4,The following statement contains a magic number: return a0 << 24 | a1 << 16 | a2 << 8 | a3;
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,mul4,The following statement contains a magic number: return a0 << 24 | a1 << 16 | a2 << 8 | a3;
Magic Number,Granados.Algorithms,Rijndael,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rijndael.cs,mul4,The following statement contains a magic number: return a0 << 24 | a1 << 16 | a2 << 8 | a3;
Magic Number,Granados,SecureRng,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rng.cs,GetInt,The following statement contains a magic number: byte[] rbits = new byte[4];
Magic Number,Granados,SecureRng,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Rng.cs,GetInt,The following statement contains a magic number: return (int)((((long)r) * maxValue) >> 32);
Magic Number,Granados,SSHConnection,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSHConnection.cs,Connect,The following statement contains a magic number: protoVerReceiver.Receive(psocket' 5000);
Magic Number,Granados.SSH1,CRC,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\CRC.cs,Calc,The following statement contains a magic number: val = table[(int)((val ^ buf[off + i]) & 0xff)] ^ (val >> 8);
Magic Number,Granados.SSH1,SSH1KeyExchanger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Connection.cs,DoKeyExchange,The following statement contains a magic number: byte[] sessionKey = new byte[32];
Magic Number,Granados.SSH1,SSH1KeyExchanger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Connection.cs,ReceiveServerKey,The following statement contains a magic number: _cInfo.AntiSpoofingCookie = reader.Read(8);
Magic Number,Granados.SSH1,SSH1KeyExchanger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Connection.cs,BuildSessionKeyPacket,The following statement contains a magic number: firstKeyByteLen = (_cInfo.ServerKeyBits + 7) / 8;
Magic Number,Granados.SSH1,SSH1KeyExchanger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Connection.cs,BuildSessionKeyPacket,The following statement contains a magic number: firstKeyByteLen = (_cInfo.ServerKeyBits + 7) / 8;
Magic Number,Granados.SSH1,SSH1KeyExchanger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Connection.cs,BuildSessionKeyPacket,The following statement contains a magic number: secondKeyByteLen = (_cInfo.HostKeyBits + 7) / 8;
Magic Number,Granados.SSH1,SSH1KeyExchanger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Connection.cs,BuildSessionKeyPacket,The following statement contains a magic number: secondKeyByteLen = (_cInfo.HostKeyBits + 7) / 8;
Magic Number,Granados.SSH1,SSH1UserAuthentication,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Connection.cs,PublickeyAuthentication,The following statement contains a magic number: byte[] rawchallenge = RSAUtil.StripPKCS1Pad(challenge' 2).GetBytes();
Magic Number,Granados.SSH1,SSH1X11Forwarding,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Connection.cs,CheckX11OpenRequestPacket,The following statement contains a magic number: _connectionInfo.ServerProtocolFlags.HasFlag(SSH1ProtocolFlags.SSH_PROTOFLAG_HOST_IN_FWD_OPEN)                  && _connectionInfo.ClientProtocolFlags.HasFlag(SSH1ProtocolFlags.SSH_PROTOFLAG_HOST_IN_FWD_OPEN)                  && reader.RemainingDataLength >= 4
Magic Number,Granados.SSH1,SSH1Packet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Packet.cs,BuildImage,The following statement contains a magic number: int packetLength = _payload.Length + 5;
Magic Number,Granados.SSH1,SSH1Packet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Packet.cs,BuildImage,The following statement contains a magic number: int paddingLength = 8 - (packetLength % 8);
Magic Number,Granados.SSH1,SSH1Packet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Packet.cs,BuildImage,The following statement contains a magic number: int paddingLength = 8 - (packetLength % 8);
Magic Number,Granados.SSH1,SSH1PacketBuilderMixin,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Packet.cs,WriteBigInteger,The following statement contains a magic number: int bits = image.Length * 8;
Magic Number,Granados.SSH1,SSH1Packetizer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Packet.cs,ConstructPacket,The following statement contains a magic number: const int PACKET_LENGTH_FIELD_LEN = 4;
Magic Number,Granados.SSH1,SSH1Packetizer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Packet.cs,ConstructPacket,The following statement contains a magic number: const int CHECK_BYTES_FIELD_LEN = 4;
Magic Number,Granados.SSH1,SSH1Packetizer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Packet.cs,ConstructPacket,The following statement contains a magic number: int paddingLength = 8 - (_packetLength % 8);
Magic Number,Granados.SSH1,SSH1Packetizer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Packet.cs,ConstructPacket,The following statement contains a magic number: int paddingLength = 8 - (_packetLength % 8);
Magic Number,Granados.IO,SimpleMemoryStream,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,SimpleMemoryStream,The following statement contains a magic number: Init(512);
Magic Number,Granados.IO,SimpleMemoryStream,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,AssureSize,The following statement contains a magic number: byte[] t = new byte[Math.Max(size' _buffer.Length * 2)];
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,RoundUp,The following statement contains a magic number: return 16;
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,RoundUp,The following statement contains a magic number: size <= 16
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,RoundUp,The following statement contains a magic number: size |= size >> 2;
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,RoundUp,The following statement contains a magic number: size |= size >> 4;
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,RoundUp,The following statement contains a magic number: size |= size >> 8;
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,RoundUp,The following statement contains a magic number: size |= size >> 16;
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,WriteUInt16,The following statement contains a magic number: const int LENGTH = 2;
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,WriteUInt16,The following statement contains a magic number: _buff[index + 0] = (byte)(val >> 8);
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,WriteUInt32,The following statement contains a magic number: const int LENGTH = 4;
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,WriteUInt32,The following statement contains a magic number: _buff[index + 0] = (byte)(val >> 24);
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,WriteUInt32,The following statement contains a magic number: _buff[index + 1] = (byte)(val >> 16);
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,WriteUInt32,The following statement contains a magic number: _buff[index + 2] = (byte)(val >> 8);
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,WriteUInt32,The following statement contains a magic number: _buff[index + 2] = (byte)(val >> 8);
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,WriteUInt32,The following statement contains a magic number: _buff[index + 3] = (byte)(val);
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,OverwriteUInt32,The following statement contains a magic number: const int LENGTH = 4;
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,OverwriteUInt32,The following statement contains a magic number: _buff[index + 0] = (byte)(val >> 24);
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,OverwriteUInt32,The following statement contains a magic number: _buff[index + 1] = (byte)(val >> 16);
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,OverwriteUInt32,The following statement contains a magic number: _buff[index + 2] = (byte)(val >> 8);
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,OverwriteUInt32,The following statement contains a magic number: _buff[index + 2] = (byte)(val >> 8);
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,OverwriteUInt32,The following statement contains a magic number: _buff[index + 3] = (byte)(val);
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,WriteUInt64,The following statement contains a magic number: const int LENGTH = 8;
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,WriteUInt64,The following statement contains a magic number: _buff[index + 0] = (byte)(val >> 56);
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,WriteUInt64,The following statement contains a magic number: _buff[index + 1] = (byte)(val >> 48);
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,WriteUInt64,The following statement contains a magic number: _buff[index + 2] = (byte)(val >> 40);
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,WriteUInt64,The following statement contains a magic number: _buff[index + 2] = (byte)(val >> 40);
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,WriteUInt64,The following statement contains a magic number: _buff[index + 3] = (byte)(val >> 32);
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,WriteUInt64,The following statement contains a magic number: _buff[index + 3] = (byte)(val >> 32);
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,WriteUInt64,The following statement contains a magic number: _buff[index + 4] = (byte)(val >> 24);
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,WriteUInt64,The following statement contains a magic number: _buff[index + 4] = (byte)(val >> 24);
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,WriteUInt64,The following statement contains a magic number: _buff[index + 5] = (byte)(val >> 16);
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,WriteUInt64,The following statement contains a magic number: _buff[index + 5] = (byte)(val >> 16);
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,WriteUInt64,The following statement contains a magic number: _buff[index + 6] = (byte)(val >> 8);
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,WriteUInt64,The following statement contains a magic number: _buff[index + 6] = (byte)(val >> 8);
Magic Number,Granados.IO,ByteBuffer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DataFragment.cs,WriteUInt64,The following statement contains a magic number: _buff[index + 7] = (byte)(val);
Magic Number,Granados.IO,SSHDataReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ReaderWriter.cs,ReadUInt16,The following statement contains a magic number: const int LENGTH = 2;
Magic Number,Granados.IO,SSHDataReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ReaderWriter.cs,ReadUInt16,The following statement contains a magic number: uint ret =                    ((uint)_data[_currentIndex] << 8)                  | ((uint)_data[_currentIndex + 1]);
Magic Number,Granados.IO,SSHDataReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ReaderWriter.cs,ReadUInt32,The following statement contains a magic number: const int LENGTH = 4;
Magic Number,Granados.IO,SSHDataReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ReaderWriter.cs,ReadUInt32,The following statement contains a magic number: uint ret =                    ((uint)_data[_currentIndex] << 24)                  | ((uint)_data[_currentIndex + 1] << 16)                  | ((uint)_data[_currentIndex + 2] << 8)                  | ((uint)_data[_currentIndex + 3]);
Magic Number,Granados.IO,SSHDataReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ReaderWriter.cs,ReadUInt32,The following statement contains a magic number: uint ret =                    ((uint)_data[_currentIndex] << 24)                  | ((uint)_data[_currentIndex + 1] << 16)                  | ((uint)_data[_currentIndex + 2] << 8)                  | ((uint)_data[_currentIndex + 3]);
Magic Number,Granados.IO,SSHDataReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ReaderWriter.cs,ReadUInt32,The following statement contains a magic number: uint ret =                    ((uint)_data[_currentIndex] << 24)                  | ((uint)_data[_currentIndex + 1] << 16)                  | ((uint)_data[_currentIndex + 2] << 8)                  | ((uint)_data[_currentIndex + 3]);
Magic Number,Granados.IO,SSHDataReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ReaderWriter.cs,ReadUInt32,The following statement contains a magic number: uint ret =                    ((uint)_data[_currentIndex] << 24)                  | ((uint)_data[_currentIndex + 1] << 16)                  | ((uint)_data[_currentIndex + 2] << 8)                  | ((uint)_data[_currentIndex + 3]);
Magic Number,Granados.IO,SSHDataReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ReaderWriter.cs,ReadUInt32,The following statement contains a magic number: uint ret =                    ((uint)_data[_currentIndex] << 24)                  | ((uint)_data[_currentIndex + 1] << 16)                  | ((uint)_data[_currentIndex + 2] << 8)                  | ((uint)_data[_currentIndex + 3]);
Magic Number,Granados.IO,SSHDataReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ReaderWriter.cs,ReadUInt64,The following statement contains a magic number: const int LENGTH = 8;
Magic Number,Granados.IO,SSHDataReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ReaderWriter.cs,ReadUInt64,The following statement contains a magic number: uint i1 =                    ((uint)_data[_currentIndex] << 24)                  | ((uint)_data[_currentIndex + 1] << 16)                  | ((uint)_data[_currentIndex + 2] << 8)                  | ((uint)_data[_currentIndex + 3]);
Magic Number,Granados.IO,SSHDataReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ReaderWriter.cs,ReadUInt64,The following statement contains a magic number: uint i1 =                    ((uint)_data[_currentIndex] << 24)                  | ((uint)_data[_currentIndex + 1] << 16)                  | ((uint)_data[_currentIndex + 2] << 8)                  | ((uint)_data[_currentIndex + 3]);
Magic Number,Granados.IO,SSHDataReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ReaderWriter.cs,ReadUInt64,The following statement contains a magic number: uint i1 =                    ((uint)_data[_currentIndex] << 24)                  | ((uint)_data[_currentIndex + 1] << 16)                  | ((uint)_data[_currentIndex + 2] << 8)                  | ((uint)_data[_currentIndex + 3]);
Magic Number,Granados.IO,SSHDataReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ReaderWriter.cs,ReadUInt64,The following statement contains a magic number: uint i1 =                    ((uint)_data[_currentIndex] << 24)                  | ((uint)_data[_currentIndex + 1] << 16)                  | ((uint)_data[_currentIndex + 2] << 8)                  | ((uint)_data[_currentIndex + 3]);
Magic Number,Granados.IO,SSHDataReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ReaderWriter.cs,ReadUInt64,The following statement contains a magic number: uint i1 =                    ((uint)_data[_currentIndex] << 24)                  | ((uint)_data[_currentIndex + 1] << 16)                  | ((uint)_data[_currentIndex + 2] << 8)                  | ((uint)_data[_currentIndex + 3]);
Magic Number,Granados.IO,SSHDataReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ReaderWriter.cs,ReadUInt64,The following statement contains a magic number: uint i2 =                    ((uint)_data[_currentIndex + 4] << 24)                  | ((uint)_data[_currentIndex + 5] << 16)                  | ((uint)_data[_currentIndex + 6] << 8)                  | ((uint)_data[_currentIndex + 7]);
Magic Number,Granados.IO,SSHDataReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ReaderWriter.cs,ReadUInt64,The following statement contains a magic number: uint i2 =                    ((uint)_data[_currentIndex + 4] << 24)                  | ((uint)_data[_currentIndex + 5] << 16)                  | ((uint)_data[_currentIndex + 6] << 8)                  | ((uint)_data[_currentIndex + 7]);
Magic Number,Granados.IO,SSHDataReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ReaderWriter.cs,ReadUInt64,The following statement contains a magic number: uint i2 =                    ((uint)_data[_currentIndex + 4] << 24)                  | ((uint)_data[_currentIndex + 5] << 16)                  | ((uint)_data[_currentIndex + 6] << 8)                  | ((uint)_data[_currentIndex + 7]);
Magic Number,Granados.IO,SSHDataReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ReaderWriter.cs,ReadUInt64,The following statement contains a magic number: uint i2 =                    ((uint)_data[_currentIndex + 4] << 24)                  | ((uint)_data[_currentIndex + 5] << 16)                  | ((uint)_data[_currentIndex + 6] << 8)                  | ((uint)_data[_currentIndex + 7]);
Magic Number,Granados.IO,SSHDataReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ReaderWriter.cs,ReadUInt64,The following statement contains a magic number: uint i2 =                    ((uint)_data[_currentIndex + 4] << 24)                  | ((uint)_data[_currentIndex + 5] << 16)                  | ((uint)_data[_currentIndex + 6] << 8)                  | ((uint)_data[_currentIndex + 7]);
Magic Number,Granados.IO,SSHDataReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ReaderWriter.cs,ReadUInt64,The following statement contains a magic number: uint i2 =                    ((uint)_data[_currentIndex + 4] << 24)                  | ((uint)_data[_currentIndex + 5] << 16)                  | ((uint)_data[_currentIndex + 6] << 8)                  | ((uint)_data[_currentIndex + 7]);
Magic Number,Granados.IO,SSHDataReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ReaderWriter.cs,ReadUInt64,The following statement contains a magic number: uint i2 =                    ((uint)_data[_currentIndex + 4] << 24)                  | ((uint)_data[_currentIndex + 5] << 16)                  | ((uint)_data[_currentIndex + 6] << 8)                  | ((uint)_data[_currentIndex + 7]);
Magic Number,Granados.IO,SSHDataReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ReaderWriter.cs,ReadUInt64,The following statement contains a magic number: ulong ret = ((ulong)i1 << 32) | i2;
Magic Number,Granados.IO,SSHDataWriter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ReaderWriter.cs,WriteUInt32,The following statement contains a magic number: _strm.WriteByte((byte)(data >> 24));
Magic Number,Granados.IO,SSHDataWriter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ReaderWriter.cs,WriteUInt32,The following statement contains a magic number: _strm.WriteByte((byte)(data >> 16));
Magic Number,Granados.IO,SSHDataWriter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ReaderWriter.cs,WriteUInt32,The following statement contains a magic number: _strm.WriteByte((byte)(data >> 8));
Magic Number,Granados.IO,SSHDataWriter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ReaderWriter.cs,WriteUInt64,The following statement contains a magic number: WriteUInt32((uint)(data >> 32));
Magic Number,Granados.PKI,DSAKeyPair,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DSA.cs,Sign,The following statement contains a magic number: byte[] result = new byte[data.Length * 2];
Magic Number,Granados.PKI,DSAKeyPair,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DSA.cs,Sign,The following statement contains a magic number: Array.Copy(bs' 0' result' data.Length * 2 - bs.Length' bs.Length);
Magic Number,Granados.PKI,DSAKeyPair,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DSA.cs,GenerateNew,The following statement contains a magic number: BigInteger[] pq = findRandomStrongPrime(bits' 160' random);
Magic Number,Granados.PKI,DSAKeyPair,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DSA.cs,findRandomStrongPrime,The following statement contains a magic number: PrimeSieve sieve = new PrimeSieve(16000);
Magic Number,Granados.PKI,DSAKeyPair,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DSA.cs,findRandomStrongPrime,The following statement contains a magic number: table_q[i] =                      ((AsUInt64(order % new BigInteger(prime_table[i]))) *                      2UL) % prime_table[i];
Magic Number,Granados.PKI,DSAKeyPair,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DSA.cs,findRandomStrongPrime,The following statement contains a magic number: i < (1 << 24)
Magic Number,Granados.PKI,DSAKeyPair,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DSA.cs,findRandomStrongPrime,The following statement contains a magic number: i < (1 << 24)
Magic Number,Granados.PKI,DSAKeyPair,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DSA.cs,AsUInt64,The following statement contains a magic number: bits >= 64
Magic Number,Granados.PKI,DSAKeyPair,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DSA.cs,AsUInt64,The following statement contains a magic number: val = (val << 8) | b;
Magic Number,Granados.PKI,DSAPublicKey,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DSA.cs,Verify,The following statement contains a magic number: byte[] first = new byte[data.Length / 2];
Magic Number,Granados.PKI,DSAPublicKey,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\DSA.cs,Verify,The following statement contains a magic number: byte[] second = new byte[data.Length / 2];
Magic Number,Granados.PKI,ECPoint,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,ParseUncompressed,The following statement contains a magic number: data.Length < 3
Magic Number,Granados.PKI,ECPoint,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,ParseUncompressed,The following statement contains a magic number: (data.Length - 1) % 2 != 0
Magic Number,Granados.PKI,ECPoint,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,ParseUncompressed,The following statement contains a magic number: int elementLen = (data.Length - 1) / 2;
Magic Number,Granados.PKI,ECPoint,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,Parse,The following statement contains a magic number: data.Length < 2
Magic Number,Granados.PKI,EllipticCurve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,ConvertPointToOctetString,The following statement contains a magic number: int byteLength = (this.Order.BitCount() + 7) / 8;
Magic Number,Granados.PKI,EllipticCurve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,ConvertPointToOctetString,The following statement contains a magic number: int byteLength = (this.Order.BitCount() + 7) / 8;
Magic Number,Granados.PKI,EllipticCurve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,ConvertPointToOctetString,The following statement contains a magic number: byte[] buff = new byte[1 + byteLength * 2];
Magic Number,Granados.PKI,EllipticCurve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,ConvertPointToOctetString,The following statement contains a magic number: Buffer.BlockCopy(y' 0' buff' 1 + byteLength * 2 - y.Length' y.Length);
Magic Number,Granados.PKI,EllipticCurve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,TestPointMultiplication,The following statement contains a magic number: ks = line.Substring(4).Trim();
Magic Number,Granados.PKI,EllipticCurve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,TestPointMultiplication,The following statement contains a magic number: x = new BigInteger(BigIntegerConverter.ParseHex(line.Substring(4).Trim()));
Magic Number,Granados.PKI,EllipticCurve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,TestPointMultiplication,The following statement contains a magic number: y = new BigInteger(BigIntegerConverter.ParseHex(line.Substring(4).Trim()));
Magic Number,Granados.PKI,EllipticCurve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,TestPKV,The following statement contains a magic number: qxs = line.Substring(5).Trim();
Magic Number,Granados.PKI,EllipticCurve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,TestPKV,The following statement contains a magic number: qy = new BigInteger(BigIntegerConverter.ParseHex(line.Substring(5).Trim()));
Magic Number,Granados.PKI,EllipticCurve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,TestPKV,The following statement contains a magic number: result = line.Substring(9' 1);
Magic Number,Granados.PKI,EllipticCurve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,TestKeyPair,The following statement contains a magic number: ds = line.Substring(4).Trim();
Magic Number,Granados.PKI,EllipticCurve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,TestKeyPair,The following statement contains a magic number: qx = new BigInteger(BigIntegerConverter.ParseHex(line.Substring(5).Trim()));
Magic Number,Granados.PKI,EllipticCurve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,TestKeyPair,The following statement contains a magic number: qy = new BigInteger(BigIntegerConverter.ParseHex(line.Substring(5).Trim()));
Magic Number,Granados.PKI,EllipticCurve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,TestSignatureVerification,The following statement contains a magic number: hashName == match.Groups[2].Value
Magic Number,Granados.PKI,EllipticCurve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,TestSignatureVerification,The following statement contains a magic number: msg = BigIntegerConverter.ParseHex(line.Substring(6).Trim());
Magic Number,Granados.PKI,EllipticCurve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,TestSignatureVerification,The following statement contains a magic number: qx = new BigInteger(BigIntegerConverter.ParseHex(line.Substring(5).Trim()));
Magic Number,Granados.PKI,EllipticCurve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,TestSignatureVerification,The following statement contains a magic number: qy = new BigInteger(BigIntegerConverter.ParseHex(line.Substring(5).Trim()));
Magic Number,Granados.PKI,EllipticCurve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,TestSignatureVerification,The following statement contains a magic number: r = new BigInteger(BigIntegerConverter.ParseHex(line.Substring(4).Trim()));
Magic Number,Granados.PKI,EllipticCurve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,TestSignatureVerification,The following statement contains a magic number: s = new BigInteger(BigIntegerConverter.ParseHex(line.Substring(4).Trim()));
Magic Number,Granados.PKI,EllipticCurve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,TestSignatureVerification,The following statement contains a magic number: result = line.Substring(9' 1);
Magic Number,Granados.PKI,EllipticCurveFp,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,PointMul,The following statement contains a magic number: const int W = 6;
Magic Number,Granados.PKI,EllipticCurveFp,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,PointMul,The following statement contains a magic number: bitBuffer += (uint)((d[byteOffset - bitIndex / 8] >> (bitIndex % 8)) & 1) << W;
Magic Number,Granados.PKI,EllipticCurveFp,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,PointMul,The following statement contains a magic number: bitBuffer += (uint)((d[byteOffset - bitIndex / 8] >> (bitIndex % 8)) & 1) << W;
Magic Number,Granados.PKI,ECDSAPublicKey,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,ExtractLeftBits,The following statement contains a magic number: src.Length * 8 <= bits
Magic Number,Granados.PKI,ECDSAPublicKey,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,ExtractLeftBits,The following statement contains a magic number: int bytes = (bits + 7) / 8;
Magic Number,Granados.PKI,ECDSAPublicKey,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,ExtractLeftBits,The following statement contains a magic number: int bytes = (bits + 7) / 8;
Magic Number,Granados.PKI,ECDSAPublicKey,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,ExtractLeftBits,The following statement contains a magic number: int shift = (8 - bits % 8) % 8;
Magic Number,Granados.PKI,ECDSAPublicKey,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,ExtractLeftBits,The following statement contains a magic number: int shift = (8 - bits % 8) % 8;
Magic Number,Granados.PKI,ECDSAPublicKey,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,ExtractLeftBits,The following statement contains a magic number: int shift = (8 - bits % 8) % 8;
Magic Number,Granados.PKI,ECDSAPublicKey,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,ExtractLeftBits,The following statement contains a magic number: buff[i] = (byte)((byte)(prev << (8 - shift)) | (byte)(b >> shift));
Magic Number,Granados.PKI,ECDSAKeyPair,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,Sign,The following statement contains a magic number: tries < 10
Magic Number,Granados.PKI,ECDSAHashAlgorithmChooser,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\EC.cs,Choose,The following statement contains a magic number: orderBits <= 256
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,IsValidKeyPair,The following statement contains a magic number: privateKey.Length != 32
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,IsValidKeyPair,The following statement contains a magic number: publicKey.Length != 32
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,IsValidKeyPair,The following statement contains a magic number: byte[] sdata = new byte[32];
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,IsValidKeyPair,The following statement contains a magic number: Buffer.BlockCopy(hash' 0' sdata' 0' 32);
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,IsValidKeyPair,The following statement contains a magic number: sdata[31] &= (byte)((1 << (_n % 8)) - 1);
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,IsValidKeyPair,The following statement contains a magic number: sdata[31] &= (byte)((1 << (_n % 8)) - 1);
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,IsValidKeyPair,The following statement contains a magic number: sdata[31] |= (byte)(1 << (_n % 8));
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,IsValidKeyPair,The following statement contains a magic number: sdata[31] |= (byte)(1 << (_n % 8));
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,Sign,The following statement contains a magic number: privateKey.Length != 32
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,Sign,The following statement contains a magic number: byte[] sdata = new byte[32];
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,Sign,The following statement contains a magic number: Buffer.BlockCopy(hash' 0' sdata' 0' 32);
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,Sign,The following statement contains a magic number: sdata[31] &= (byte)((1 << (_n % 8)) - 1);
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,Sign,The following statement contains a magic number: sdata[31] &= (byte)((1 << (_n % 8)) - 1);
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,Sign,The following statement contains a magic number: sdata[31] |= (byte)(1 << (_n % 8));
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,Sign,The following statement contains a magic number: sdata[31] |= (byte)(1 << (_n % 8));
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,Sign,The following statement contains a magic number: sha512.TransformBlock(hash' 32' 32' null' 0);
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,Sign,The following statement contains a magic number: sha512.TransformBlock(hash' 32' 32' null' 0);
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,Sign,The following statement contains a magic number: byte[] sig = new byte[64];
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,Sign,The following statement contains a magic number: Buffer.BlockCopy(wS' 0' sig' 32' wS.Length);
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,Verify,The following statement contains a magic number: signature.Length != 64
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,Verify,The following statement contains a magic number: byte[] Rs = new byte[32];
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,Verify,The following statement contains a magic number: Buffer.BlockCopy(signature' 0' Rs' 0' 32);
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,Verify,The following statement contains a magic number: byte[] Ss = new byte[32];
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,Verify,The following statement contains a magic number: Buffer.BlockCopy(signature' 32' Ss' 0' 32);
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,Verify,The following statement contains a magic number: Buffer.BlockCopy(signature' 32' Ss' 0' 32);
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,EncodePoint,The following statement contains a magic number: const int DATALEN = 32;
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,EncodePoint,The following statement contains a magic number: x % 2u != 0
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,DecodePoint,The following statement contains a magic number: const int DATALEN = 32;
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,DecodePoint,The following statement contains a magic number: int sign = w[DATALEN - 1] >> 7;
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,PointMul,The following statement contains a magic number: (kBytes[kOffset - i / 8] & (byte)(1 << (i % 8))) != 0
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,PointMul,The following statement contains a magic number: (kBytes[kOffset - i / 8] & (byte)(1 << (i % 8))) != 0
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,Test,The following statement contains a magic number: byte[] privateKey = new byte[32];
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,Test,The following statement contains a magic number: Buffer.BlockCopy(b[0]' 0' privateKey' 0' 32);
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,Test,The following statement contains a magic number: byte[] message = b[2];
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,Test,The following statement contains a magic number: byte[] signature = new byte[64];
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,Test,The following statement contains a magic number: Buffer.BlockCopy(b[3]' 0' signature' 0' 64);
Magic Number,Granados.PKI,CurveEd25519,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ED.cs,Test,The following statement contains a magic number: Buffer.BlockCopy(b[3]' 0' signature' 0' 64);
Magic Number,Granados.PKI,PrimeSieve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\PrimeSieve.cs,PrimeSieve,The following statement contains a magic number: x = 4;
Magic Number,Granados.PKI,PrimeSieve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\PrimeSieve.cs,PrimeSieve,The following statement contains a magic number: x < 4
Magic Number,Granados.PKI,PrimeSieve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\PrimeSieve.cs,PrimeSieve,The following statement contains a magic number: int len = (x - 3) / (32 * 2);
Magic Number,Granados.PKI,PrimeSieve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\PrimeSieve.cs,PrimeSieve,The following statement contains a magic number: int len = (x - 3) / (32 * 2);
Magic Number,Granados.PKI,PrimeSieve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\PrimeSieve.cs,PrimeSieve,The following statement contains a magic number: int len = (x - 3) / (32 * 2);
Magic Number,Granados.PKI,PrimeSieve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\PrimeSieve.cs,PrimeSieve,The following statement contains a magic number: int max = len * 32;
Magic Number,Granados.PKI,PrimeSieve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\PrimeSieve.cs,PrimeSieve,The following statement contains a magic number: int k = 3 + i * 2;
Magic Number,Granados.PKI,PrimeSieve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\PrimeSieve.cs,PrimeSieve,The following statement contains a magic number: int k = 3 + i * 2;
Magic Number,Granados.PKI,PrimeSieve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\PrimeSieve.cs,PrimeSieve,The following statement contains a magic number: table[j / 32] |= ((uint)1 << (j & (32 - 1)));
Magic Number,Granados.PKI,PrimeSieve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\PrimeSieve.cs,PrimeSieve,The following statement contains a magic number: table[j / 32] |= ((uint)1 << (j & (32 - 1)));
Magic Number,Granados.PKI,PrimeSieve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\PrimeSieve.cs,PrimeSieve,The following statement contains a magic number: (table[i / 32] & (1 << (i & (32 - 1)))) == 0
Magic Number,Granados.PKI,PrimeSieve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\PrimeSieve.cs,PrimeSieve,The following statement contains a magic number: (table[i / 32] & (1 << (i & (32 - 1)))) == 0
Magic Number,Granados.PKI,PrimeSieve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\PrimeSieve.cs,AvailablePrimes,The following statement contains a magic number: primes += (32 - bits);
Magic Number,Granados.PKI,PrimeSieve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\PrimeSieve.cs,getNextPrime,The following statement contains a magic number: switch (x) {                  /* Trivial cases. */                  case 0:                      return 2;                  case 1:                      return 2;                  case 2:                      return 3;                  /* Cases above 2 are handled with the table. */                  default:                      uint p = ((x - 3) / 2) + 1;                      while (true) {                          if ((p / 32) >= table.Length)                              return 0;                            if ((table[p / 32] & (1u << (int)(p & (32 - 1)))) == 0)                              return p * 2 + 3;                          p++;                      }              }
Magic Number,Granados.PKI,PrimeSieve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\PrimeSieve.cs,getNextPrime,The following statement contains a magic number: switch (x) {                  /* Trivial cases. */                  case 0:                      return 2;                  case 1:                      return 2;                  case 2:                      return 3;                  /* Cases above 2 are handled with the table. */                  default:                      uint p = ((x - 3) / 2) + 1;                      while (true) {                          if ((p / 32) >= table.Length)                              return 0;                            if ((table[p / 32] & (1u << (int)(p & (32 - 1)))) == 0)                              return p * 2 + 3;                          p++;                      }              }
Magic Number,Granados.PKI,PrimeSieve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\PrimeSieve.cs,getNextPrime,The following statement contains a magic number: switch (x) {                  /* Trivial cases. */                  case 0:                      return 2;                  case 1:                      return 2;                  case 2:                      return 3;                  /* Cases above 2 are handled with the table. */                  default:                      uint p = ((x - 3) / 2) + 1;                      while (true) {                          if ((p / 32) >= table.Length)                              return 0;                            if ((table[p / 32] & (1u << (int)(p & (32 - 1)))) == 0)                              return p * 2 + 3;                          p++;                      }              }
Magic Number,Granados.PKI,PrimeSieve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\PrimeSieve.cs,getNextPrime,The following statement contains a magic number: switch (x) {                  /* Trivial cases. */                  case 0:                      return 2;                  case 1:                      return 2;                  case 2:                      return 3;                  /* Cases above 2 are handled with the table. */                  default:                      uint p = ((x - 3) / 2) + 1;                      while (true) {                          if ((p / 32) >= table.Length)                              return 0;                            if ((table[p / 32] & (1u << (int)(p & (32 - 1)))) == 0)                              return p * 2 + 3;                          p++;                      }              }
Magic Number,Granados.PKI,PrimeSieve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\PrimeSieve.cs,getNextPrime,The following statement contains a magic number: switch (x) {                  /* Trivial cases. */                  case 0:                      return 2;                  case 1:                      return 2;                  case 2:                      return 3;                  /* Cases above 2 are handled with the table. */                  default:                      uint p = ((x - 3) / 2) + 1;                      while (true) {                          if ((p / 32) >= table.Length)                              return 0;                            if ((table[p / 32] & (1u << (int)(p & (32 - 1)))) == 0)                              return p * 2 + 3;                          p++;                      }              }
Magic Number,Granados.PKI,PrimeSieve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\PrimeSieve.cs,getNextPrime,The following statement contains a magic number: switch (x) {                  /* Trivial cases. */                  case 0:                      return 2;                  case 1:                      return 2;                  case 2:                      return 3;                  /* Cases above 2 are handled with the table. */                  default:                      uint p = ((x - 3) / 2) + 1;                      while (true) {                          if ((p / 32) >= table.Length)                              return 0;                            if ((table[p / 32] & (1u << (int)(p & (32 - 1)))) == 0)                              return p * 2 + 3;                          p++;                      }              }
Magic Number,Granados.PKI,PrimeSieve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\PrimeSieve.cs,getNextPrime,The following statement contains a magic number: switch (x) {                  /* Trivial cases. */                  case 0:                      return 2;                  case 1:                      return 2;                  case 2:                      return 3;                  /* Cases above 2 are handled with the table. */                  default:                      uint p = ((x - 3) / 2) + 1;                      while (true) {                          if ((p / 32) >= table.Length)                              return 0;                            if ((table[p / 32] & (1u << (int)(p & (32 - 1)))) == 0)                              return p * 2 + 3;                          p++;                      }              }
Magic Number,Granados.PKI,PrimeSieve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\PrimeSieve.cs,getNextPrime,The following statement contains a magic number: switch (x) {                  /* Trivial cases. */                  case 0:                      return 2;                  case 1:                      return 2;                  case 2:                      return 3;                  /* Cases above 2 are handled with the table. */                  default:                      uint p = ((x - 3) / 2) + 1;                      while (true) {                          if ((p / 32) >= table.Length)                              return 0;                            if ((table[p / 32] & (1u << (int)(p & (32 - 1)))) == 0)                              return p * 2 + 3;                          p++;                      }              }
Magic Number,Granados.PKI,PrimeSieve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\PrimeSieve.cs,getNextPrime,The following statement contains a magic number: switch (x) {                  /* Trivial cases. */                  case 0:                      return 2;                  case 1:                      return 2;                  case 2:                      return 3;                  /* Cases above 2 are handled with the table. */                  default:                      uint p = ((x - 3) / 2) + 1;                      while (true) {                          if ((p / 32) >= table.Length)                              return 0;                            if ((table[p / 32] & (1u << (int)(p & (32 - 1)))) == 0)                              return p * 2 + 3;                          p++;                      }              }
Magic Number,Granados.PKI,PrimeSieve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\PrimeSieve.cs,getNextPrime,The following statement contains a magic number: switch (x) {                  /* Trivial cases. */                  case 0:                      return 2;                  case 1:                      return 2;                  case 2:                      return 3;                  /* Cases above 2 are handled with the table. */                  default:                      uint p = ((x - 3) / 2) + 1;                      while (true) {                          if ((p / 32) >= table.Length)                              return 0;                            if ((table[p / 32] & (1u << (int)(p & (32 - 1)))) == 0)                              return p * 2 + 3;                          p++;                      }              }
Magic Number,Granados.PKI,PrimeSieve,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\PrimeSieve.cs,getNextPrime,The following statement contains a magic number: switch (x) {                  /* Trivial cases. */                  case 0:                      return 2;                  case 1:                      return 2;                  case 2:                      return 3;                  /* Cases above 2 are handled with the table. */                  default:                      uint p = ((x - 3) / 2) + 1;                      while (true) {                          if ((p / 32) >= table.Length)                              return 0;                            if ((table[p / 32] & (1u << (int)(p & (32 - 1)))) == 0)                              return p * 2 + 3;                          p++;                      }              }
Magic Number,Granados.PKI,RSAKeyPair,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\RSA.cs,SignWithSHA1,The following statement contains a magic number: int padLen = (_publickey._n.BitCount() + 7) / 8;
Magic Number,Granados.PKI,RSAKeyPair,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\RSA.cs,SignWithSHA1,The following statement contains a magic number: int padLen = (_publickey._n.BitCount() + 7) / 8;
Magic Number,Granados.PKI,RSAKeyPair,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\RSA.cs,GenerateNew,The following statement contains a magic number: p = BigInteger.GeneratePseudoPrime(bits / 2);
Magic Number,Granados.PKI,RSAKeyPair,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\RSA.cs,GenerateNew,The following statement contains a magic number: q = BigInteger.GeneratePseudoPrime(bits - (bits / 2));
Magic Number,Granados.PKI,RSAKeyPair,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\RSA.cs,GenerateNew,The following statement contains a magic number: e = one << 5;
Magic Number,Granados.PKI,RSAUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\RSA.cs,PKCS1PadType2,The following statement contains a magic number: int padLen = len - input.Length - 3;
Magic Number,Granados.PKI,RSAUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\RSA.cs,PKCS1PadType2,The following statement contains a magic number: padLen < 8
Magic Number,Granados.PKI,RSAUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\RSA.cs,PKCS1PadType2,The following statement contains a magic number: pad[i] = (byte)(1 + rng.GetInt(255));
Magic Number,Granados.PKI,RSAUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\RSA.cs,PKCS1PadType2,The following statement contains a magic number: buf[1] = 2;
Magic Number,Granados.PKI,RSAUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\RSA.cs,PKCS1PadType2,The following statement contains a magic number: Buffer.BlockCopy(pad' 0' buf' 2' pad.Length);
Magic Number,Granados.PKI,RSAUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\RSA.cs,PKCS1PadType2,The following statement contains a magic number: Buffer.BlockCopy(input' 0' buf' padLen + 3' input.Length);
Magic Number,Granados.PKI,RSAUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\RSA.cs,PKCS1PadType1,The following statement contains a magic number: int padLen = len - input.Length - 3;
Magic Number,Granados.PKI,RSAUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\RSA.cs,PKCS1PadType1,The following statement contains a magic number: padLen < 8
Magic Number,Granados.PKI,RSAUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\RSA.cs,PKCS1PadType1,The following statement contains a magic number: buf[i + 2] = 0xff;
Magic Number,Granados.PKI,RSAUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\RSA.cs,PKCS1PadType1,The following statement contains a magic number: Buffer.BlockCopy(input' 0' buf' padLen + 3' input.Length);
Magic Number,Granados.PKI,RSAUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\RSA.cs,StripPKCS1Pad,The following statement contains a magic number: padLen < 8
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,BigInteger,The following statement contains a magic number: length = (uint)inData.Length >> 2;
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,BigInteger,The following statement contains a magic number: data [j] = (uint)(  					(inData [i-3] << (3*8)) |  					(inData [i-2] << (2*8)) |  					(inData [i-1] << (1*8)) |  					(inData [i])  					);
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,BigInteger,The following statement contains a magic number: data [j] = (uint)(  					(inData [i-3] << (3*8)) |  					(inData [i-2] << (2*8)) |  					(inData [i-1] << (1*8)) |  					(inData [i])  					);
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,BigInteger,The following statement contains a magic number: data [j] = (uint)(  					(inData [i-3] << (3*8)) |  					(inData [i-2] << (2*8)) |  					(inData [i-1] << (1*8)) |  					(inData [i])  					);
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,BigInteger,The following statement contains a magic number: data [j] = (uint)(  					(inData [i-3] << (3*8)) |  					(inData [i-2] << (2*8)) |  					(inData [i-1] << (1*8)) |  					(inData [i])  					);
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,BigInteger,The following statement contains a magic number: data [j] = (uint)(  					(inData [i-3] << (3*8)) |  					(inData [i-2] << (2*8)) |  					(inData [i-1] << (1*8)) |  					(inData [i])  					);
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,BigInteger,The following statement contains a magic number: data [j] = (uint)(  					(inData [i-3] << (3*8)) |  					(inData [i-2] << (2*8)) |  					(inData [i-1] << (1*8)) |  					(inData [i])  					);
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,BigInteger,The following statement contains a magic number: data [j] = (uint)(  					(inData [i-3] << (3*8)) |  					(inData [i-2] << (2*8)) |  					(inData [i-1] << (1*8)) |  					(inData [i])  					);
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,BigInteger,The following statement contains a magic number: i >= 3
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,BigInteger,The following statement contains a magic number: switch (leftOver) {  			case 1: data [length-1] = (uint)inData [0]; break;  			case 2: data [length-1] = (uint)((inData [0] << 8) | inData [1]); break;  			case 3: data [length-1] = (uint)((inData [0] << 16) | (inData [1] << 8) | inData [2]); break;  			}
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,BigInteger,The following statement contains a magic number: switch (leftOver) {  			case 1: data [length-1] = (uint)inData [0]; break;  			case 2: data [length-1] = (uint)((inData [0] << 8) | inData [1]); break;  			case 3: data [length-1] = (uint)((inData [0] << 16) | (inData [1] << 8) | inData [2]); break;  			}
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,BigInteger,The following statement contains a magic number: switch (leftOver) {  			case 1: data [length-1] = (uint)inData [0]; break;  			case 2: data [length-1] = (uint)((inData [0] << 8) | inData [1]); break;  			case 3: data [length-1] = (uint)((inData [0] << 16) | (inData [1] << 8) | inData [2]); break;  			}
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,BigInteger,The following statement contains a magic number: switch (leftOver) {  			case 1: data [length-1] = (uint)inData [0]; break;  			case 2: data [length-1] = (uint)((inData [0] << 8) | inData [1]); break;  			case 3: data [length-1] = (uint)((inData [0] << 16) | (inData [1] << 8) | inData [2]); break;  			}
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,BigInteger,The following statement contains a magic number: switch (leftOver) {  			case 1: data [length-1] = (uint)inData [0]; break;  			case 2: data [length-1] = (uint)((inData [0] << 8) | inData [1]); break;  			case 3: data [length-1] = (uint)((inData [0] << 16) | (inData [1] << 8) | inData [2]); break;  			}
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,BigInteger,The following statement contains a magic number: switch (leftOver) {  			case 1: data [length-1] = (uint)inData [0]; break;  			case 2: data [length-1] = (uint)((inData [0] << 8) | inData [1]); break;  			case 3: data [length-1] = (uint)((inData [0] << 16) | (inData [1] << 8) | inData [2]); break;  			}
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,BigInteger,The following statement contains a magic number: data = new uint [2] { (uint)ul' (uint)(ul >> 32)};
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,BigInteger,The following statement contains a magic number: data = new uint [2] { (uint)ul' (uint)(ul >> 32)};
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,BigInteger,The following statement contains a magic number: length = 2;
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,Parse,The following statement contains a magic number: val = val * 10 + (c - '0');
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,GenerateRandom,The following statement contains a magic number: int dwords = bits >> 5;
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,GenerateRandom,The following statement contains a magic number: byte [] random = new byte [dwords << 2];
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,GenerateRandom,The following statement contains a magic number: Buffer.BlockCopy (random' 0' ret.data' 0' (int)dwords << 2);
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,GenerateRandom,The following statement contains a magic number: mask = (uint)(0xFFFFFFFF >> (32 - remBits));
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,Randomize,The following statement contains a magic number: int dwords = bits >> 5;
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,Randomize,The following statement contains a magic number: byte [] random = new byte [dwords << 2];
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,Randomize,The following statement contains a magic number: Buffer.BlockCopy (random' 0' data' 0' (int)dwords << 2);
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,Randomize,The following statement contains a magic number: mask = (uint)(0xFFFFFFFF >> (32 - remBits));
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,BitCount,The following statement contains a magic number: uint bits = 32;
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,BitCount,The following statement contains a magic number: bits += ((length - 1) << 5);
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,TestBit,The following statement contains a magic number: uint bytePos = bitNum >> 5;
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,TestBit,The following statement contains a magic number: uint bytePos = (uint)bitNum >> 5;
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,SetBit,The following statement contains a magic number: uint bytePos = bitNum >> 5;
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,GetBytes,The following statement contains a magic number: int numBytes = numBits >> 3;
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,GetBytes,The following statement contains a magic number: numBytesInWord = 4;
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,GetBytes,The following statement contains a magic number: val >>= 8;
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,GetBytes,The following statement contains a magic number: numBytesInWord = 4;
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,ToString,The following statement contains a magic number: return ToString (10);
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,Incr2,The following statement contains a magic number: data [0] += 2;
Magic Number,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,Incr2,The following statement contains a magic number: data [0] < 2
Magic Number,Granados.Mono.Math,Kernel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,AddSameSign,The following statement contains a magic number: sum >>= 32;
Magic Number,Granados.Mono.Math,Kernel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,PlusEq,The following statement contains a magic number: sum >>= 32;
Magic Number,Granados.Mono.Math,Kernel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,SingleByteDivideInPlace,The following statement contains a magic number: r <<= 32;
Magic Number,Granados.Mono.Math,Kernel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,DwordMod,The following statement contains a magic number: r <<= 32;
Magic Number,Granados.Mono.Math,Kernel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,DwordDiv,The following statement contains a magic number: r <<= 32;
Magic Number,Granados.Mono.Math,Kernel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,DwordDivMod,The following statement contains a magic number: r <<= 32;
Magic Number,Granados.Mono.Math,Kernel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,multiByteDivide,The following statement contains a magic number: return new BigInteger [2] { 0' new BigInteger (bi1) };
Magic Number,Granados.Mono.Math,Kernel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,multiByteDivide,The following statement contains a magic number: ulong secondDivisorByte = bi2.data [bi2.length-2];
Magic Number,Granados.Mono.Math,Kernel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,multiByteDivide,The following statement contains a magic number: ulong dividend = ((ulong)remainder [pos] << 32) + (ulong)remainder [pos-1];
Magic Number,Granados.Mono.Math,Kernel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,multiByteDivide,The following statement contains a magic number: q_hat == 0x100000000 ||  							(q_hat * secondDivisorByte) > ((r_hat << 32) + remainder [pos-2])
Magic Number,Granados.Mono.Math,Kernel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,multiByteDivide,The following statement contains a magic number: q_hat == 0x100000000 ||  							(q_hat * secondDivisorByte) > ((r_hat << 32) + remainder [pos-2])
Magic Number,Granados.Mono.Math,Kernel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,multiByteDivide,The following statement contains a magic number: mc >>= 32;
Magic Number,Granados.Mono.Math,Kernel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,multiByteDivide,The following statement contains a magic number: sum >>= 32;
Magic Number,Granados.Mono.Math,Kernel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,multiByteDivide,The following statement contains a magic number: BigInteger [] ret = new BigInteger [2] { quot' rem };
Magic Number,Granados.Mono.Math,Kernel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,LeftShift,The following statement contains a magic number: int w = n >> 5;
Magic Number,Granados.Mono.Math,Kernel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,LeftShift,The following statement contains a magic number: n &= ((1 << 5) - 1);
Magic Number,Granados.Mono.Math,Kernel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,LeftShift,The following statement contains a magic number: carry = x >> (32 - n);
Magic Number,Granados.Mono.Math,Kernel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,RightShift,The following statement contains a magic number: int w = n >> 5;
Magic Number,Granados.Mono.Math,Kernel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,RightShift,The following statement contains a magic number: int s = n & ((1 << 5) - 1);
Magic Number,Granados.Mono.Math,Kernel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,RightShift,The following statement contains a magic number: carry = x << (32 - n);
Magic Number,Granados.Mono.Math,Kernel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,MultiplyByDword,The following statement contains a magic number: c >>= 32;
Magic Number,Granados.Mono.Math,Kernel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,Multiply,The following statement contains a magic number: mcarry >>= 32;
Magic Number,Granados.Mono.Math,Kernel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,MultiplyMod2p32pmod,The following statement contains a magic number: mcarry >>= 32;
Magic Number,Granados.Mono.Math,Kernel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,SquarePositive,The following statement contains a magic number: uint* dP2 = dP + 1' tP2 = tP + 2*i + 1;
Magic Number,Granados.Mono.Math,Kernel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,SquarePositive,The following statement contains a magic number: mcarry >>= 32;
Magic Number,Granados.Mono.Math,Kernel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,SquarePositive,The following statement contains a magic number: carry = x >> (32 - 1);
Magic Number,Granados.Mono.Math,Kernel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,SquarePositive,The following statement contains a magic number: val >>= 32;
Magic Number,Granados.Mono.Math,Kernel,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,modInverse,The following statement contains a magic number: BigInteger [] q = new BigInteger [2];
Magic Number,Granados.Mono.Math.Prime,PrimalityTests,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: Rounds = 27;
Magic Number,Granados.Mono.Math.Prime,PrimalityTests,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: bc <= 100
Magic Number,Granados.Mono.Math.Prime,PrimalityTests,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: switch (confidence) {  				case ConfidenceFactor.ExtraLow:  					Rounds >>= 2;  					return Rounds != 0 ? Rounds : 1;  				case ConfidenceFactor.Low:  					Rounds >>= 1;  					return Rounds != 0 ? Rounds : 1;  				case ConfidenceFactor.Medium:  					return Rounds;  				case ConfidenceFactor.High:  					return Rounds << 1;  				case ConfidenceFactor.ExtraHigh:  					return Rounds << 2;  				case ConfidenceFactor.Provable:  					throw new Exception ("The Rabin-Miller test can not be executed in a way such that its results are provable");  				default:  					throw new ArgumentOutOfRangeException ("confidence");  			}
Magic Number,Granados.Mono.Math.Prime,PrimalityTests,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: switch (confidence) {  				case ConfidenceFactor.ExtraLow:  					Rounds >>= 2;  					return Rounds != 0 ? Rounds : 1;  				case ConfidenceFactor.Low:  					Rounds >>= 1;  					return Rounds != 0 ? Rounds : 1;  				case ConfidenceFactor.Medium:  					return Rounds;  				case ConfidenceFactor.High:  					return Rounds << 1;  				case ConfidenceFactor.ExtraHigh:  					return Rounds << 2;  				case ConfidenceFactor.Provable:  					throw new Exception ("The Rabin-Miller test can not be executed in a way such that its results are provable");  				default:  					throw new ArgumentOutOfRangeException ("confidence");  			}
Magic Number,Granados.Mono.Math.Prime,PrimalityTests,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\PrimalityTests.cs,Test,The following statement contains a magic number: n.BitCount () < 33
Magic Number,Granados.Mono.Math.Prime,PrimalityTests,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\PrimalityTests.cs,RabinMillerTest,The following statement contains a magic number: y = mr.Pow (2' r);
Magic Number,Granados.Mono.Math.Prime,PrimalityTests,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\PrimalityTests.cs,RabinMillerTest,The following statement contains a magic number: n.BitCount () > 100
Magic Number,Granados.Mono.Math.Prime,PrimalityTests,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\PrimalityTests.cs,RabinMillerTest,The following statement contains a magic number: y = mr.Pow (y' 2);
Magic Number,Granados.Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: const uint primeProd1 = 3u* 5u * 7u * 11u * 13u * 17u * 19u * 23u * 29u;
Magic Number,Granados.Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: const uint primeProd1 = 3u* 5u * 7u * 11u * 13u * 17u * 19u * 23u * 29u;
Magic Number,Granados.Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: const uint primeProd1 = 3u* 5u * 7u * 11u * 13u * 17u * 19u * 23u * 29u;
Magic Number,Granados.Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: const uint primeProd1 = 3u* 5u * 7u * 11u * 13u * 17u * 19u * 23u * 29u;
Magic Number,Granados.Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: const uint primeProd1 = 3u* 5u * 7u * 11u * 13u * 17u * 19u * 23u * 29u;
Magic Number,Granados.Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: const uint primeProd1 = 3u* 5u * 7u * 11u * 13u * 17u * 19u * 23u * 29u;
Magic Number,Granados.Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: const uint primeProd1 = 3u* 5u * 7u * 11u * 13u * 17u * 19u * 23u * 29u;
Magic Number,Granados.Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: const uint primeProd1 = 3u* 5u * 7u * 11u * 13u * 17u * 19u * 23u * 29u;
Magic Number,Granados.Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: const uint primeProd1 = 3u* 5u * 7u * 11u * 13u * 17u * 19u * 23u * 29u;
Magic Number,Granados.Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: pMod1 %  3 == 0
Magic Number,Granados.Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: pMod1 %  5 == 0
Magic Number,Granados.Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: pMod1 %  7 == 0
Magic Number,Granados.Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: pMod1 % 11 == 0
Magic Number,Granados.Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: pMod1 % 13 == 0
Magic Number,Granados.Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: pMod1 % 17 == 0
Magic Number,Granados.Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: pMod1 % 19 == 0
Magic Number,Granados.Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: pMod1 % 23 == 0
Magic Number,Granados.Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: pMod1 % 29 == 0
Magic Number,Granados.Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: pMod1 += 2;
Magic Number,Granados.Poderosa.KeyFormat,BERReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\BERReader.cs,ReadObjectIdentifier,The following statement contains a magic number: s.Append((data[0] / 40).ToString(NumberFormatInfo.InvariantInfo));
Magic Number,Granados.Poderosa.KeyFormat,BERReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\BERReader.cs,ReadObjectIdentifier,The following statement contains a magic number: s.Append('.').Append((data[0] % 40).ToString(NumberFormatInfo.InvariantInfo));
Magic Number,Granados.Poderosa.KeyFormat,BERReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\BERReader.cs,ReadObjectIdentifier,The following statement contains a magic number: val = (val << 7) | (data[i] & 0x7fu);
Magic Number,Granados.Poderosa.KeyFormat,BERReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\BERReader.cs,ReadBitString,The following statement contains a magic number: int offsetBytes = unusedBits / 8;
Magic Number,Granados.Poderosa.KeyFormat,BERReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\BERReader.cs,ReadBitString,The following statement contains a magic number: int offsetBits = unusedBits % 8;
Magic Number,Granados.Poderosa.KeyFormat,BERReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\BERReader.cs,ReadBitString,The following statement contains a magic number: w = (ushort)((w << 8) | data[i + 1]);
Magic Number,Granados.Poderosa.KeyFormat,BERReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\BERReader.cs,ReadTag,The following statement contains a magic number: cls = (n >> 6) & 0x3;
Magic Number,Granados.Poderosa.KeyFormat,BERReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\BERReader.cs,ReadTag,The following statement contains a magic number: num = (num << 7) | (n & 0x7f);
Magic Number,Granados.Poderosa.KeyFormat,BERReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\BERReader.cs,ReadTag,The following statement contains a magic number: bits = 7;
Magic Number,Granados.Poderosa.KeyFormat,BERReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\BERReader.cs,ReadLength,The following statement contains a magic number: num = (num << 8) | (n & 0xff);
Magic Number,Granados.Poderosa.KeyFormat,BERReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\BERReader.cs,ReadLength,The following statement contains a magic number: bits += 8;
Magic Number,Granados.Poderosa.KeyFormat,BERReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\BERReader.cs,ReadLength,The following statement contains a magic number: bits > 31
Magic Number,Granados.Poderosa.KeyFormat,OpenSSHPKCSFileLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\OpenSSHPrivateKeyLoader.cs,Load,The following statement contains a magic number: w.Length >= 2 && w[1] == "ENCRYPTED"
Magic Number,Granados.Poderosa.KeyFormat,OpenSSHPKCSFileLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\OpenSSHPrivateKeyLoader.cs,HexToByteArray,The following statement contains a magic number: text.Length % 2 != 0
Magic Number,Granados.Poderosa.KeyFormat,OpenSSHPKCSFileLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\OpenSSHPrivateKeyLoader.cs,PassphraseToKey,The following statement contains a magic number: const int HASH_SIZE = 16;
Magic Number,Granados.Poderosa.KeyFormat,OpenSSHPKCSFileLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\OpenSSHPrivateKeyLoader.cs,PassphraseToKey,The following statement contains a magic number: const int SALT_SIZE = 8;
Magic Number,Granados.Poderosa.KeyFormat,OpenSSHFileLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\OpenSSHPrivateKeyLoader.cs,Load,The following statement contains a magic number: switch (cipherName) {                      case "none":                          cipherAlgorithm = null;                          cipherKeySize = 0;                          cipherIVSize = 0;                          break;                      case "aes128-cbc":                          cipherAlgorithm = CipherAlgorithm.AES128;                          cipherKeySize = 16;                          cipherIVSize = 16;  // use block size                          break;                      case "aes192-cbc":                          cipherAlgorithm = CipherAlgorithm.AES192;                          cipherKeySize = 24;                          cipherIVSize = 16;  // use block size                          break;                      case "aes256-cbc":                          cipherAlgorithm = CipherAlgorithm.AES256;                          cipherKeySize = 32;                          cipherIVSize = 16;  // use block size                          break;                      default:                          throw new SSHException(Strings.GetString("NotValidPrivateKeyFile") + " (unsupported cipher)");                  }
Magic Number,Granados.Poderosa.KeyFormat,OpenSSHFileLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\OpenSSHPrivateKeyLoader.cs,Load,The following statement contains a magic number: switch (cipherName) {                      case "none":                          cipherAlgorithm = null;                          cipherKeySize = 0;                          cipherIVSize = 0;                          break;                      case "aes128-cbc":                          cipherAlgorithm = CipherAlgorithm.AES128;                          cipherKeySize = 16;                          cipherIVSize = 16;  // use block size                          break;                      case "aes192-cbc":                          cipherAlgorithm = CipherAlgorithm.AES192;                          cipherKeySize = 24;                          cipherIVSize = 16;  // use block size                          break;                      case "aes256-cbc":                          cipherAlgorithm = CipherAlgorithm.AES256;                          cipherKeySize = 32;                          cipherIVSize = 16;  // use block size                          break;                      default:                          throw new SSHException(Strings.GetString("NotValidPrivateKeyFile") + " (unsupported cipher)");                  }
Magic Number,Granados.Poderosa.KeyFormat,OpenSSHFileLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\OpenSSHPrivateKeyLoader.cs,Load,The following statement contains a magic number: switch (cipherName) {                      case "none":                          cipherAlgorithm = null;                          cipherKeySize = 0;                          cipherIVSize = 0;                          break;                      case "aes128-cbc":                          cipherAlgorithm = CipherAlgorithm.AES128;                          cipherKeySize = 16;                          cipherIVSize = 16;  // use block size                          break;                      case "aes192-cbc":                          cipherAlgorithm = CipherAlgorithm.AES192;                          cipherKeySize = 24;                          cipherIVSize = 16;  // use block size                          break;                      case "aes256-cbc":                          cipherAlgorithm = CipherAlgorithm.AES256;                          cipherKeySize = 32;                          cipherIVSize = 16;  // use block size                          break;                      default:                          throw new SSHException(Strings.GetString("NotValidPrivateKeyFile") + " (unsupported cipher)");                  }
Magic Number,Granados.Poderosa.KeyFormat,OpenSSHFileLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\OpenSSHPrivateKeyLoader.cs,Load,The following statement contains a magic number: switch (cipherName) {                      case "none":                          cipherAlgorithm = null;                          cipherKeySize = 0;                          cipherIVSize = 0;                          break;                      case "aes128-cbc":                          cipherAlgorithm = CipherAlgorithm.AES128;                          cipherKeySize = 16;                          cipherIVSize = 16;  // use block size                          break;                      case "aes192-cbc":                          cipherAlgorithm = CipherAlgorithm.AES192;                          cipherKeySize = 24;                          cipherIVSize = 16;  // use block size                          break;                      case "aes256-cbc":                          cipherAlgorithm = CipherAlgorithm.AES256;                          cipherKeySize = 32;                          cipherIVSize = 16;  // use block size                          break;                      default:                          throw new SSHException(Strings.GetString("NotValidPrivateKeyFile") + " (unsupported cipher)");                  }
Magic Number,Granados.Poderosa.KeyFormat,OpenSSHFileLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\OpenSSHPrivateKeyLoader.cs,Load,The following statement contains a magic number: switch (cipherName) {                      case "none":                          cipherAlgorithm = null;                          cipherKeySize = 0;                          cipherIVSize = 0;                          break;                      case "aes128-cbc":                          cipherAlgorithm = CipherAlgorithm.AES128;                          cipherKeySize = 16;                          cipherIVSize = 16;  // use block size                          break;                      case "aes192-cbc":                          cipherAlgorithm = CipherAlgorithm.AES192;                          cipherKeySize = 24;                          cipherIVSize = 16;  // use block size                          break;                      case "aes256-cbc":                          cipherAlgorithm = CipherAlgorithm.AES256;                          cipherKeySize = 32;                          cipherIVSize = 16;  // use block size                          break;                      default:                          throw new SSHException(Strings.GetString("NotValidPrivateKeyFile") + " (unsupported cipher)");                  }
Magic Number,Granados.Poderosa.KeyFormat,OpenSSHFileLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\OpenSSHPrivateKeyLoader.cs,Load,The following statement contains a magic number: switch (cipherName) {                      case "none":                          cipherAlgorithm = null;                          cipherKeySize = 0;                          cipherIVSize = 0;                          break;                      case "aes128-cbc":                          cipherAlgorithm = CipherAlgorithm.AES128;                          cipherKeySize = 16;                          cipherIVSize = 16;  // use block size                          break;                      case "aes192-cbc":                          cipherAlgorithm = CipherAlgorithm.AES192;                          cipherKeySize = 24;                          cipherIVSize = 16;  // use block size                          break;                      case "aes256-cbc":                          cipherAlgorithm = CipherAlgorithm.AES256;                          cipherKeySize = 32;                          cipherIVSize = 16;  // use block size                          break;                      default:                          throw new SSHException(Strings.GetString("NotValidPrivateKeyFile") + " (unsupported cipher)");                  }
Magic Number,Granados.Poderosa.KeyFormat,OpenSSHFileLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\OpenSSHPrivateKeyLoader.cs,Load,The following statement contains a magic number: switch (privateKeyType) {                              case "ssh-ed25519": {                                      byte[] pk = ReadBytes(privateKeysStream);                                      if (pk == null) {                                          throw new SSHException(Strings.GetString("NotValidPrivateKeyFile"));                                      }                                      byte[] sk = ReadBytes(privateKeysStream);                                      if (sk == null) {                                          throw new SSHException(Strings.GetString("NotValidPrivateKeyFile"));                                      }                                      string cmnt = ReadString(privateKeysStream);   // comment                                      if (cmnt == null) {                                          throw new SSHException(Strings.GetString("NotValidPrivateKeyFile"));                                      }                                        byte[] publicKey = ReadBytes(publicKeyBlobStream);                                      if (publicKey == null) {                                          throw new SSHException(Strings.GetString("NotValidPrivateKeyFile"));                                      }                                        // sanity check                                      if (!AreEqual(publicKey' pk)) {                                          throw new SSHException(Strings.GetString("WrongPassphrase"));                                      }                                        // first 32 bytes of secret key is used as a private key for ed25519                                      byte[] privateKey = new byte[32];                                      if (sk.Length < privateKey.Length) {                                          throw new SSHException(Strings.GetString("NotValidPrivateKeyFile"));                                      }                                      Buffer.BlockCopy(sk' 0' privateKey' 0' privateKey.Length);                                        var curve = EdwardsCurve.FindByAlgorithm(PublicKeyAlgorithm.ED25519);                                      if (curve != null) {                                          var kp = new EDDSAKeyPair(curve' new EDDSAPublicKey(curve' publicKey)' privateKey);                                          if (!kp.CheckKeyConsistency()) {                                              throw new SSHException(Strings.GetString("NotValidPrivateKeyFile"));                                          }                                          keyPair = kp;                                          comment = cmnt;                                          return;                                      }                                  }                                  break;                              default:                                  // unsupported key type; check the next key.                                  break;                          }
Magic Number,Granados.Poderosa.KeyFormat,OpenSSHFileLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\OpenSSHPrivateKeyLoader.cs,ReadUInt32,The following statement contains a magic number: v = (v << 8) | (uint)(n & 0xff);
Magic Number,Granados.Poderosa.KeyFormat,OpenSSHFileLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\OpenSSHPrivateKeyLoader.cs,ReadUInt32,The following statement contains a magic number: i < 4
Magic Number,Granados.Poderosa.KeyFormat,PuTTYPrivateKeyLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\PuTTYPrivateKeyLoader.cs,Load,The following statement contains a magic number: byte[] iv = new byte[16];
Magic Number,Granados.Poderosa.KeyFormat,PuTTYPrivateKeyLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\PuTTYPrivateKeyLoader.cs,PuTTYPassphraseToKey,The following statement contains a magic number: const int HASH_SIZE = 20;
Magic Number,Granados.Poderosa.KeyFormat,PuTTYPrivateKeyLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\PuTTYPrivateKeyLoader.cs,PuTTYPassphraseToKey,The following statement contains a magic number: byte[] buf = new byte[HASH_SIZE * 2];
Magic Number,Granados.Poderosa.KeyFormat,PuTTYPrivateKeyLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\PuTTYPrivateKeyLoader.cs,PuTTYPassphraseToKey,The following statement contains a magic number: sha1.TransformBlock(new byte[] { 0' 0' 0' 0 }' 0' 4' null' 0);
Magic Number,Granados.Poderosa.KeyFormat,PuTTYPrivateKeyLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\PuTTYPrivateKeyLoader.cs,PuTTYPassphraseToKey,The following statement contains a magic number: sha1.TransformBlock(new byte[] { 0' 0' 0' 1 }' 0' 4' null' 0);
Magic Number,Granados.Poderosa.KeyFormat,PuTTYPrivateKeyLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\PuTTYPrivateKeyLoader.cs,PuTTYPassphraseToKey,The following statement contains a magic number: byte[] key = new byte[32];
Magic Number,Granados.Poderosa.KeyFormat,PuTTYPrivateKeyLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\PuTTYPrivateKeyLoader.cs,GetValueOf,The following statement contains a magic number: return line.Substring(p + 2);
Magic Number,Granados.Poderosa.KeyFormat,SSH1PrivateKeyLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\SSH1PrivateKeyLoader.cs,Load,The following statement contains a magic number: byte[] cipher = reader.Read(2);
Magic Number,Granados.Poderosa.KeyFormat,SSH1PrivateKeyLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\SSH1PrivateKeyLoader.cs,Load,The following statement contains a magic number: reader.Read(8);
Magic Number,Granados.Poderosa.KeyFormat,SSH1PrivateKeyLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\SSH1PrivateKeyLoader.cs,Load,The following statement contains a magic number: byte[] mark = prvtreader.Read(4);
Magic Number,Granados.Poderosa.KeyFormat,SSH1PrivateKeyLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\SSH1PrivateKeyLoader.cs,Load,The following statement contains a magic number: mark[0] != mark[2] || mark[1] != mark[3]
Magic Number,Granados.Poderosa.KeyFormat,SSH1PrivateKeyLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\SSH1PrivateKeyLoader.cs,Load,The following statement contains a magic number: mark[0] != mark[2] || mark[1] != mark[3]
Magic Number,Granados.Poderosa.KeyFormat,SSH1PrivateKeyLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\SSH1PrivateKeyLoader.cs,SSH1PassphraseToKey,The following statement contains a magic number: byte[] result = new byte[24];
Magic Number,Granados.Poderosa.KeyFormat,SSH1PrivateKeyLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\SSH1PrivateKeyLoader.cs,SSH1PassphraseToKey,The following statement contains a magic number: Buffer.BlockCopy(md5' 0' result' 0' 16);
Magic Number,Granados.Poderosa.KeyFormat,SSH1PrivateKeyLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\SSH1PrivateKeyLoader.cs,SSH1PassphraseToKey,The following statement contains a magic number: Buffer.BlockCopy(md5' 0' result' 16' 8);
Magic Number,Granados.Poderosa.KeyFormat,SSH1PrivateKeyLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\SSH1PrivateKeyLoader.cs,SSH1PassphraseToKey,The following statement contains a magic number: Buffer.BlockCopy(md5' 0' result' 16' 8);
Magic Number,Granados.Poderosa.KeyFormat,SSHComPrivateKeyLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\SSHComPrivateKeyLoader.cs,ReadBigIntWithBits,The following statement contains a magic number: int bytes = (bits + 7) / 8;
Magic Number,Granados.Poderosa.KeyFormat,SSHComPrivateKeyLoader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\KeyFormat\SSHComPrivateKeyLoader.cs,ReadBigIntWithBits,The following statement contains a magic number: int bytes = (bits + 7) / 8;
Magic Number,Granados.Poderosa.SCP,SCPChannelStream,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPChannelStream.cs,GetPreferredDatagramSize,The following statement contains a magic number: return (_channel != null) ? Math.Max(1024' _channel.MaxChannelDatagramSize) : 1024;
Magic Number,Granados.Poderosa.SCP,SCPChannelStream,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPChannelStream.cs,GetPreferredDatagramSize,The following statement contains a magic number: return (_channel != null) ? Math.Max(1024' _channel.MaxChannelDatagramSize) : 1024;
Magic Number,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,SendModTime,The following statement contains a magic number: DateTime epoch = new DateTime(1970' 1' 1' 0' 0' 0);
Magic Number,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,SendModTime,The following statement contains a magic number: long mtimeSec = (mtime.Ticks - epoch.Ticks) / 10000000L;
Magic Number,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,SendModTime,The following statement contains a magic number: long mtimeUSec = ((mtime.Ticks - epoch.Ticks) % 10000000L) / 10L;
Magic Number,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,SendModTime,The following statement contains a magic number: long mtimeUSec = ((mtime.Ticks - epoch.Ticks) % 10000000L) / 10L;
Magic Number,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,SendModTime,The following statement contains a magic number: long atimeSec = (atime.Ticks - epoch.Ticks) / 10000000L;
Magic Number,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,SendModTime,The following statement contains a magic number: long atimeUSec = ((atime.Ticks - epoch.Ticks) % 10000000L) / 10L;
Magic Number,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,SendModTime,The following statement contains a magic number: long atimeUSec = ((atime.Ticks - epoch.Ticks) % 10000000L) / 10L;
Magic Number,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,Download,The following statement contains a magic number: string message = _encoding.GetString(lineBytes' 1' lineBytes.Length - 2);
Magic Number,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,Download,The following statement contains a magic number: lineBytes[0] == 1 || lineBytes[0] == 2
Magic Number,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,ParseEntry,The following statement contains a magic number: permissions = (permissions << 3) | ((int)c - (int)'0');
Magic Number,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,ParseEntry,The following statement contains a magic number: m.Groups[2].Value.ToCharArray()
Magic Number,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,ParseEntry,The following statement contains a magic number: long fileSize = Int64.Parse(m.Groups[3].Value);
Magic Number,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,ParseEntry,The following statement contains a magic number: string name = m.Groups[4].Value;
Magic Number,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,ParseModTime,The following statement contains a magic number: long mtimeUSec = Int64.Parse(m.Groups[2].Value);
Magic Number,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,ParseModTime,The following statement contains a magic number: long atimeSec = Int64.Parse(m.Groups[3].Value);
Magic Number,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,ParseModTime,The following statement contains a magic number: long atimeUSec = Int64.Parse(m.Groups[4].Value);
Magic Number,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,ParseModTime,The following statement contains a magic number: DateTime mtime = new DateTime(EPOCH.Ticks + mtimeSec * 10000000L + mtimeUSec * 10);
Magic Number,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,ParseModTime,The following statement contains a magic number: DateTime mtime = new DateTime(EPOCH.Ticks + mtimeSec * 10000000L + mtimeUSec * 10);
Magic Number,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,ParseModTime,The following statement contains a magic number: DateTime atime = new DateTime(EPOCH.Ticks + atimeSec * 10000000L + atimeUSec * 10);
Magic Number,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,ParseModTime,The following statement contains a magic number: DateTime atime = new DateTime(EPOCH.Ticks + atimeSec * 10000000L + atimeUSec * 10);
Magic Number,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,SendError,The following statement contains a magic number: byte[] data = new byte[messageBytes.Length + 2];
Magic Number,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,CheckResponse,The following statement contains a magic number: response == 1 || response == 2
Magic Number,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,GetPermissionsText,The following statement contains a magic number: return new StringBuilder()                  .Append("01234567"[(perm >> 9) & 0x7])                  .Append("01234567"[(perm >> 6) & 0x7])                  .Append("01234567"[(perm >> 3) & 0x7])                  .Append("01234567"[perm & 0x7])                  .ToString();
Magic Number,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,GetPermissionsText,The following statement contains a magic number: return new StringBuilder()                  .Append("01234567"[(perm >> 9) & 0x7])                  .Append("01234567"[(perm >> 6) & 0x7])                  .Append("01234567"[(perm >> 3) & 0x7])                  .Append("01234567"[perm & 0x7])                  .ToString();
Magic Number,Granados.Poderosa.SCP,SCPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SCP\SCPClient.cs,GetPermissionsText,The following statement contains a magic number: return new StringBuilder()                  .Append("01234567"[(perm >> 9) & 0x7])                  .Append("01234567"[(perm >> 6) & 0x7])                  .Append("01234567"[(perm >> 3) & 0x7])                  .Append("01234567"[perm & 0x7])                  .ToString();
Magic Number,Granados.Poderosa.SFTP,SFTPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SFTP\SFTPClient.cs,Init,The following statement contains a magic number: _eventHandler.WaitResponse(                  (packetType' dataReader) => {                      if (packetType == SFTPPacketType.SSH_FXP_VERSION) {                          int version = dataReader.ReadInt32();                          Debug.WriteLine("SFTP: SSH_FXP_VERSION => " + version);                            result = true;   // OK' received SSH_FXP_VERSION                            while (dataReader.RemainingDataLength > 4) {                              string extensionText = dataReader.ReadUTF8String();                              Debug.WriteLine("SFTP: SSH_FXP_VERSION => " + extensionText);                          }                            return true;    // processed                      }                        return false;   // ignored                  }'                  _protocolTimeout              );
Magic Number,Granados.Poderosa.SFTP,SFTPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SFTP\SFTPClient.cs,DownloadFile,The following statement contains a magic number: Task writeFileTask = Task.Run(() => {                          while (true) {                              DataFragment df = null;                              while (true) {                                  if (dataToSave.TryGet(ref df' 500)) {                                      break;                                  }                                  if (cancelToken.IsCancellationRequested) {                                      return;                                  }                              }                                if (df == null) {                                  dataFinished = true;                                  return; // end of file                              }                                fileStream.Write(df.Data' df.Offset' df.Length);                          }                      }' cancelToken);
Magic Number,Granados.Poderosa.SFTP,SFTPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SFTP\SFTPClient.cs,DownloadFile,The following statement contains a magic number: buffIndex = (buffIndex + 1) % 3;
Magic Number,Granados.Poderosa.SFTP,SFTPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SFTP\SFTPClient.cs,DownloadFile,The following statement contains a magic number: !dataToSave.TrySet(df' 1000)
Magic Number,Granados.Poderosa.SFTP,SFTPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SFTP\SFTPClient.cs,DownloadFile,The following statement contains a magic number: writeFileTask.Wait(1000);
Magic Number,Granados.Poderosa.SFTP,SFTPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SFTP\SFTPClient.cs,UploadFile,The following statement contains a magic number: Task readFileTask = Task.Run(() => {                          // SSH_FXP_WRITE header part                          //   4 bytes : packet length                          //   1 byte  : message type (SSH_FXP_WRITE)                          //   4 bytes : request id                          //   4 bytes : handle length                          //   n bytes : handle                          //   8 bytes : offset                          //   4 bytes : length of the datagram                          int buffSize = _channel.MaxChannelDatagramSize - 25 - handle.Length;                          // use multiple buffers cyclically.                          // at least 3 buffers are required.                          DataFragment[] dataFrags =                              {                                  new DataFragment(new byte[buffSize]' 0' buffSize)'                                  new DataFragment(new byte[buffSize]' 0' buffSize)'                                  new DataFragment(new byte[buffSize]' 0' buffSize)'                              };                          int buffIndex = 0;                            while (true) {                              if (cancelToken.IsCancellationRequested) {                                  return;                              }                                DataFragment df = dataFrags[buffIndex];                              buffIndex = (buffIndex + 1) % 3;                                int length = fileStream.Read(df.Data' 0' df.Data.Length);                              if (length == 0) {                                  df = null;  // end of file                              }                              else {                                  df.SetLength(0' length);                              }                                // pass to the sending loop                              while (true) {                                  if (dataToSend.TrySet(df' 500)) {                                      break;                                  }                                  if (cancelToken.IsCancellationRequested) {                                      return;                                  }                              }                                if (length == 0) {                                  return; // end of file                              }                          }                      }' cancelToken);
Magic Number,Granados.Poderosa.SFTP,SFTPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SFTP\SFTPClient.cs,UploadFile,The following statement contains a magic number: Task readFileTask = Task.Run(() => {                          // SSH_FXP_WRITE header part                          //   4 bytes : packet length                          //   1 byte  : message type (SSH_FXP_WRITE)                          //   4 bytes : request id                          //   4 bytes : handle length                          //   n bytes : handle                          //   8 bytes : offset                          //   4 bytes : length of the datagram                          int buffSize = _channel.MaxChannelDatagramSize - 25 - handle.Length;                          // use multiple buffers cyclically.                          // at least 3 buffers are required.                          DataFragment[] dataFrags =                              {                                  new DataFragment(new byte[buffSize]' 0' buffSize)'                                  new DataFragment(new byte[buffSize]' 0' buffSize)'                                  new DataFragment(new byte[buffSize]' 0' buffSize)'                              };                          int buffIndex = 0;                            while (true) {                              if (cancelToken.IsCancellationRequested) {                                  return;                              }                                DataFragment df = dataFrags[buffIndex];                              buffIndex = (buffIndex + 1) % 3;                                int length = fileStream.Read(df.Data' 0' df.Data.Length);                              if (length == 0) {                                  df = null;  // end of file                              }                              else {                                  df.SetLength(0' length);                              }                                // pass to the sending loop                              while (true) {                                  if (dataToSend.TrySet(df' 500)) {                                      break;                                  }                                  if (cancelToken.IsCancellationRequested) {                                      return;                                  }                              }                                if (length == 0) {                                  return; // end of file                              }                          }                      }' cancelToken);
Magic Number,Granados.Poderosa.SFTP,SFTPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SFTP\SFTPClient.cs,UploadFile,The following statement contains a magic number: Task readFileTask = Task.Run(() => {                          // SSH_FXP_WRITE header part                          //   4 bytes : packet length                          //   1 byte  : message type (SSH_FXP_WRITE)                          //   4 bytes : request id                          //   4 bytes : handle length                          //   n bytes : handle                          //   8 bytes : offset                          //   4 bytes : length of the datagram                          int buffSize = _channel.MaxChannelDatagramSize - 25 - handle.Length;                          // use multiple buffers cyclically.                          // at least 3 buffers are required.                          DataFragment[] dataFrags =                              {                                  new DataFragment(new byte[buffSize]' 0' buffSize)'                                  new DataFragment(new byte[buffSize]' 0' buffSize)'                                  new DataFragment(new byte[buffSize]' 0' buffSize)'                              };                          int buffIndex = 0;                            while (true) {                              if (cancelToken.IsCancellationRequested) {                                  return;                              }                                DataFragment df = dataFrags[buffIndex];                              buffIndex = (buffIndex + 1) % 3;                                int length = fileStream.Read(df.Data' 0' df.Data.Length);                              if (length == 0) {                                  df = null;  // end of file                              }                              else {                                  df.SetLength(0' length);                              }                                // pass to the sending loop                              while (true) {                                  if (dataToSend.TrySet(df' 500)) {                                      break;                                  }                                  if (cancelToken.IsCancellationRequested) {                                      return;                                  }                              }                                if (length == 0) {                                  return; // end of file                              }                          }                      }' cancelToken);
Magic Number,Granados.Poderosa.SFTP,SFTPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SFTP\SFTPClient.cs,UploadFile,The following statement contains a magic number: !dataToSend.TryGet(ref dataFrag' 1000)
Magic Number,Granados.Poderosa.SFTP,SFTPClient,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SFTP\SFTPClient.cs,ReadFileAttributes,The following statement contains a magic number: uint permissions = 0666;
Magic Number,Granados.Poderosa.SFTP,SFTPClientChannelEventHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SFTP\SFTPClient.cs,WaitResponse,The following statement contains a magic number: _dataBuffer.Length < 4
Magic Number,Granados.Poderosa.SFTP,SFTPClientChannelEventHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SFTP\SFTPClient.cs,WaitResponse,The following statement contains a magic number: _dataBuffer.Length < 4 + totalSize
Magic Number,Granados.Poderosa.SFTP,SFTPClientChannelEventHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Poderosa\SFTP\SFTPClient.cs,WaitResponse,The following statement contains a magic number: _dataBuffer.RemoveHead(4);
Magic Number,Granados.IO.SSH1,SSH1DataReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ReaderWriter.cs,ReadMPInt,The following statement contains a magic number: int bytes = (bits + 7) / 8;
Magic Number,Granados.IO.SSH1,SSH1DataReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\ReaderWriter.cs,ReadMPInt,The following statement contains a magic number: int bytes = (bits + 7) / 8;
Magic Number,Granados.SSH2,SSH2ChannelBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Channel.cs,WaitResponseAsync,The following statement contains a magic number: const int RESPONSE_TIMEOUT = 10000;
Magic Number,Granados.SSH2,SSH2ChannelBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Channel.cs,ProcessPacket,The following statement contains a magic number: switch (_state) {                      case State.InitiatedByServer:                          break;                      case State.InitiatedByClient:                          if (packetType == SSH2PacketType.SSH_MSG_CHANNEL_OPEN_CONFIRMATION) {                              SSH2DataReader reader = new SSH2DataReader(packetFragment);                              RemoteChannel = reader.ReadUInt32();                              _serverWindowSizeLeft = reader.ReadUInt32();                              _serverMaxPacketSize = reader.ReadUInt32();                                _state = State.Established;                              Monitor.PulseAll(_stateSync);   // notifies state change                              dataFragmentArg = reader.GetRemainingDataView();                              goto OnEstablished; // do it out of the lock block                          }                          if (packetType == SSH2PacketType.SSH_MSG_CHANNEL_OPEN_FAILURE) {                              SSH2DataReader reader = new SSH2DataReader(packetFragment);                              uint reasonCode = reader.ReadUInt32();                              string description = reader.ReadUTF8String();                              string lang = reader.ReadString();                              goto RequestFailed; // do it out of the lock block                          }                          break;                      case State.Closing:                          if (packetType == SSH2PacketType.SSH_MSG_CHANNEL_CLOSE) {                              goto SetStateClosedByClient;    // do it out of the lock block                          }                          break;                      case State.Established:                      case State.Ready:                          if (ProcessPacketSub(packetType' packetFragment) == SubPacketProcessResult.Consumed) {                              return;                          }                          switch (packetType) {                              case SSH2PacketType.SSH_MSG_CHANNEL_DATA: {                                      SSH2DataReader reader = new SSH2DataReader(packetFragment);                                      int len = reader.ReadInt32();                                      dataFragmentArg = reader.GetRemainingDataView(len);                                      AdjustWindowSize(len);                                  }                                  goto OnData;    // do it out of the lock block                              case SSH2PacketType.SSH_MSG_CHANNEL_EXTENDED_DATA: {                                      SSH2DataReader reader = new SSH2DataReader(packetFragment);                                      dataTypeCodeArg = reader.ReadUInt32();                                      int len = reader.ReadInt32();                                      dataFragmentArg = reader.GetRemainingDataView(len);                                      AdjustWindowSize(len);                                  }                                  goto OnExtendedData;    // do it out of the lock block                              case SSH2PacketType.SSH_MSG_CHANNEL_REQUEST: {                                      SSH2DataReader reader = new SSH2DataReader(packetFragment);                                      string request = reader.ReadString();                                      bool wantReply = reader.ReadBool();                                      if (wantReply) { //we reject unknown requests including keep-alive check                                          Transmit(                                              0'                                              new SSH2Packet(SSH2PacketType.SSH_MSG_CHANNEL_FAILURE)                                                  .WriteUInt32(RemoteChannel)                                          );                                      }                                  }                                  break;                              case SSH2PacketType.SSH_MSG_CHANNEL_EOF:                                  goto OnEOF; // do it out of the lock block                              case SSH2PacketType.SSH_MSG_CHANNEL_CLOSE:                                  Transmit(                                      0'                                      new SSH2Packet(SSH2PacketType.SSH_MSG_CHANNEL_CLOSE)                                          .WriteUInt32(RemoteChannel)                                  );                                  goto SetStateClosedByServer;    // do it out of the lock block                              case SSH2PacketType.SSH_MSG_CHANNEL_WINDOW_ADJUST: {                                      SSH2DataReader reader = new SSH2DataReader(packetFragment);                                      uint bytesToAdd = reader.ReadUInt32();                                      // some servers may not send SSH_MSG_CHANNEL_WINDOW_ADJUST.                                      // it is dangerous to wait this message in send procedure                                      _serverWindowSizeLeft += bytesToAdd;                                  }                                  goto OnWindowAdjust;                              case SSH2PacketType.SSH_MSG_CHANNEL_SUCCESS:                              case SSH2PacketType.SSH_MSG_CHANNEL_FAILURE: {                                      _channelRequestResult.TrySet(packetType == SSH2PacketType.SSH_MSG_CHANNEL_SUCCESS' 1000);                                  }                                  break;                              default:                                  goto OnUnhandledPacket;                          }                          break;  // case State.Ready                  }
Magic Number,Granados.SSH2,SSH2ChannelBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Channel.cs,AdjustWindowSize,The following statement contains a magic number: _localWindowSizeLeft < _localWindowSize / 2
Magic Number,Granados.SSH2,SSH2KeyExchanger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,BuildKEXINITPacket,The following statement contains a magic number: SSH2Packet packet =                  new SSH2Packet(SSH2PacketType.SSH_MSG_KEXINIT)                      .WriteSecureRandomBytes(16) // cookie                      .WriteString(GetSupportedKexAlgorithms()) // kex_algorithms                      .WriteString(FormatHostKeyAlgorithmDescription()) // server_host_key_algorithms                      .WriteString(FormatCipherAlgorithmDescription()) // encryption_algorithms_client_to_server                      .WriteString(FormatCipherAlgorithmDescription()) // encryption_algorithms_server_to_client                      .WriteString(MAC_ALGORITHM) // mac_algorithms_client_to_server                      .WriteString(MAC_ALGORITHM) // mac_algorithms_server_to_client                      .WriteString("none") // compression_algorithms_client_to_server                      .WriteString("none") // compression_algorithms_server_to_client                      .WriteString("") // languages_client_to_server                      .WriteString("") // languages_server_to_client                      .WriteBool(false) // indicates whether a guessed key exchange packet follows                      .WriteInt32(0);
Magic Number,Granados.SSH2,SSH2KeyExchanger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,ProcessKEXINIT,The following statement contains a magic number: reader.Read(17);
Magic Number,Granados.SSH2,SSH2KeyExchanger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,BuildKEXDHINITPacket,The following statement contains a magic number: int xBytes = (state.p.BitCount() - 2) / 8;
Magic Number,Granados.SSH2,SSH2KeyExchanger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,BuildKEXDHINITPacket,The following statement contains a magic number: int xBytes = (state.p.BitCount() - 2) / 8;
Magic Number,Granados.SSH2,SSH2KeyExchanger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,BuildKEXDHINITPacket,The following statement contains a magic number: state.e = new BigInteger(2).ModPow(x' state.p);
Magic Number,Granados.SSH2,SSH2KeyExchanger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,DeriveKey,The following statement contains a magic number: ByteBuffer hashBuff = new ByteBuffer(length * 2' -1);
Magic Number,Granados.SSH2,SSH2Packet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Packet.cs,BuildImage,The following statement contains a magic number: int blockSize = (cipher != null) ? cipher.BlockSize : 8;
Magic Number,Granados.SSH2,SSH2Packet,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Packet.cs,BuildImage,The following statement contains a magic number: paddingLength < 4
Magic Number,Granados.SSH2,SSH2Packetizer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Packet.cs,ConstructPacket,The following statement contains a magic number: const int SEQUENCE_NUMBER_FIELD_LEN = 4;
Magic Number,Granados.SSH2,SSH2Packetizer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Packet.cs,ConstructPacket,The following statement contains a magic number: const int PACKET_LENGTH_FIELD_LEN = 4;
Magic Number,Granados.SSH2,SSH2Packetizer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Packet.cs,ConstructPacket,The following statement contains a magic number: int headLen = (_cipher != null) ? _cipher.BlockSize : 4;
Magic Number,Granados.SSH2,SSH2Packetizer,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Packet.cs,ConstructPacket,The following statement contains a magic number: paddingLength < 4
Magic Number,Granados.SSH2,SSH2UserAuthKey,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2UserAuthKey.cs,PassphraseToKey,The following statement contains a magic number: int hashlen = md5.HashSize / 8;
Magic Number,Granados.SSH2,SSH2UserAuthKey,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2UserAuthKey.cs,WritePrivatePartInSECSHStyleFile,The following statement contains a magic number: padding_len = 8 - (int)wr.Length % 8;
Magic Number,Granados.SSH2,SSH2UserAuthKey,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2UserAuthKey.cs,WritePrivatePartInSECSHStyleFile,The following statement contains a magic number: padding_len = 8 - (int)wr.Length % 8;
Magic Number,Granados.SSH2,SSH2UserAuthKey,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2UserAuthKey.cs,WritePrivatePartInSECSHStyleFile,The following statement contains a magic number: SSHUtil.WriteIntToByteArray(encrypted_body' 0' encrypted_body.Length - padding_len - 4);
Magic Number,Granados.SSH2,SSH2UserAuthKey,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2UserAuthKey.cs,WritePrivatePartInSECSHStyleFile,The following statement contains a magic number: Cipher c = CipherFactory.CreateCipher(SSHProtocol.SSH2' CipherAlgorithm.TripleDES' PassphraseToKey(passphrase' 24));
Magic Number,Granados.SSH2,SSH2UserAuthKey,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2UserAuthKey.cs,WritePrivatePartInSECSHStyleFile,The following statement contains a magic number: Debug.Assert(encrypted_body.Length % 8 == 0);
Magic Number,Granados.SSH2,SSH2UserAuthKey,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2UserAuthKey.cs,WritePrivatePartInSECSHStyleFile,The following statement contains a magic number: SSHUtil.WriteIntToByteArray(rawdata' 4' rawdata.Length);
Magic Number,Granados.SSH2,SSH2UserAuthKey,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2UserAuthKey.cs,WriteKeyFileBlock,The following statement contains a magic number: const int maxlen = 70;
Magic Number,Granados.SSH,SSHProtocolVersionReceiver,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSHConnection.cs,Receive,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,Granados.SSH,SSHProtocolVersionReceiver,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSHConnection.cs,Verify,The following statement contains a magic number: pv.Length >= 2
Magic Number,Granados.SSH,SSHProtocolVersionReceiver,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSHConnection.cs,Verify,The following statement contains a magic number: sv.Length >= 3 && sv[0] == "SSH"
Magic Number,Granados.X11,X11ConnectionManager,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11ConnectionManager.cs,GetUntrustedAccessCookie,The following statement contains a magic number: byte[] recv = new byte[100];
Magic Number,Granados.X11,X11ConnectionManager,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11ConnectionManager.cs,GetUntrustedAccessCookie,The following statement contains a magic number: xmsg.Clear()                          .AppendByte(0x42)   // MSB first                          .AppendByte(0)  // unused                          .AppendUInt16(11)   // protocol-major-version                          .AppendUInt16(0)    // protocol-minor-version                          .AppendUInt16((ushort)authName.Length) // length of authorization-protocol-name                          .AppendUInt16((ushort)entry.Data.Length)    // length of authorization-protocol-data                          .AppendUInt16(0)    // unused                          .AppendBytes(authName)  // authorization-protocol-name                          .AppendPaddingBytesOf(authName)                          .AppendBytes(entry.Data)    // authorization-protocol-data                          .AppendPaddingBytesOf(entry.Data);
Magic Number,Granados.X11,X11ConnectionManager,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11ConnectionManager.cs,GetUntrustedAccessCookie,The following statement contains a magic number: int extraDataLen = reader.ReadUInt16(recv' 6) * 4;
Magic Number,Granados.X11,X11ConnectionManager,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11ConnectionManager.cs,GetUntrustedAccessCookie,The following statement contains a magic number: int extraDataLen = reader.ReadUInt16(recv' 6) * 4;
Magic Number,Granados.X11,X11ConnectionManager,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11ConnectionManager.cs,GenerateCookie,The following statement contains a magic number: byte[] cookie = new byte[16];
Magic Number,Granados.X11,X11ChannelHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11ConnectionManager.cs,ProcessSetupMessage,The following statement contains a magic number: _messageBuffer.Length < 12
Magic Number,Granados.X11,X11ChannelHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11ConnectionManager.cs,ProcessSetupMessage,The following statement contains a magic number: ushort majorVersion = reader.ReadUInt16(_messageBuffer.RawBuffer' _messageBuffer.RawBufferOffset + 2);
Magic Number,Granados.X11,X11ChannelHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11ConnectionManager.cs,ProcessSetupMessage,The following statement contains a magic number: ushort minorVersion = reader.ReadUInt16(_messageBuffer.RawBuffer' _messageBuffer.RawBufferOffset + 4);
Magic Number,Granados.X11,X11ChannelHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11ConnectionManager.cs,ProcessSetupMessage,The following statement contains a magic number: int nameLen = reader.ReadUInt16(_messageBuffer.RawBuffer' _messageBuffer.RawBufferOffset + 6);
Magic Number,Granados.X11,X11ChannelHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11ConnectionManager.cs,ProcessSetupMessage,The following statement contains a magic number: int namePadLen = (4 - (nameLen % 4)) % 4;
Magic Number,Granados.X11,X11ChannelHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11ConnectionManager.cs,ProcessSetupMessage,The following statement contains a magic number: int namePadLen = (4 - (nameLen % 4)) % 4;
Magic Number,Granados.X11,X11ChannelHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11ConnectionManager.cs,ProcessSetupMessage,The following statement contains a magic number: int namePadLen = (4 - (nameLen % 4)) % 4;
Magic Number,Granados.X11,X11ChannelHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11ConnectionManager.cs,ProcessSetupMessage,The following statement contains a magic number: int dataLen = reader.ReadUInt16(_messageBuffer.RawBuffer' _messageBuffer.RawBufferOffset + 8);
Magic Number,Granados.X11,X11ChannelHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11ConnectionManager.cs,ProcessSetupMessage,The following statement contains a magic number: int dataPadLen = (4 - (dataLen % 4)) % 4;
Magic Number,Granados.X11,X11ChannelHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11ConnectionManager.cs,ProcessSetupMessage,The following statement contains a magic number: int dataPadLen = (4 - (dataLen % 4)) % 4;
Magic Number,Granados.X11,X11ChannelHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11ConnectionManager.cs,ProcessSetupMessage,The following statement contains a magic number: int dataPadLen = (4 - (dataLen % 4)) % 4;
Magic Number,Granados.X11,X11ChannelHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11ConnectionManager.cs,ProcessSetupMessage,The following statement contains a magic number: int messageLen = 12 + nameLen + namePadLen + dataLen + dataPadLen;
Magic Number,Granados.X11,X11ChannelHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11ConnectionManager.cs,ProcessSetupMessage,The following statement contains a magic number: nameLen != _spoofedAuthProtocolName.Length                  || !CompareBytes(_messageBuffer' 12' _spoofedAuthProtocolName)
Magic Number,Granados.X11,X11ChannelHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11ConnectionManager.cs,ProcessSetupMessage,The following statement contains a magic number: dataLen != _spoofedAuthCookie.Length                  || !CompareBytes(_messageBuffer' 12 + nameLen + namePadLen' _spoofedAuthCookie)
Magic Number,Granados.X11,X11ChannelHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11ConnectionManager.cs,OnDataFromXServer,The following statement contains a magic number: SpinWait.SpinUntil(() => _state == Status.Established' 2000);
Magic Number,Granados.X11,X11CygwinDomainSocket,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Socket.cs,ParseDomainSocketFile,The following statement contains a magic number: uint[] guid = {                      UInt32.Parse(match.Groups[2].Value' NumberStyles.AllowHexSpecifier' NumberFormatInfo.InvariantInfo)'                      UInt32.Parse(match.Groups[3].Value' NumberStyles.AllowHexSpecifier' NumberFormatInfo.InvariantInfo)'                      UInt32.Parse(match.Groups[4].Value' NumberStyles.AllowHexSpecifier' NumberFormatInfo.InvariantInfo)'                      UInt32.Parse(match.Groups[5].Value' NumberStyles.AllowHexSpecifier' NumberFormatInfo.InvariantInfo)                  };
Magic Number,Granados.X11,X11CygwinDomainSocket,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Socket.cs,ParseDomainSocketFile,The following statement contains a magic number: uint[] guid = {                      UInt32.Parse(match.Groups[2].Value' NumberStyles.AllowHexSpecifier' NumberFormatInfo.InvariantInfo)'                      UInt32.Parse(match.Groups[3].Value' NumberStyles.AllowHexSpecifier' NumberFormatInfo.InvariantInfo)'                      UInt32.Parse(match.Groups[4].Value' NumberStyles.AllowHexSpecifier' NumberFormatInfo.InvariantInfo)'                      UInt32.Parse(match.Groups[5].Value' NumberStyles.AllowHexSpecifier' NumberFormatInfo.InvariantInfo)                  };
Magic Number,Granados.X11,X11CygwinDomainSocket,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Socket.cs,ParseDomainSocketFile,The following statement contains a magic number: uint[] guid = {                      UInt32.Parse(match.Groups[2].Value' NumberStyles.AllowHexSpecifier' NumberFormatInfo.InvariantInfo)'                      UInt32.Parse(match.Groups[3].Value' NumberStyles.AllowHexSpecifier' NumberFormatInfo.InvariantInfo)'                      UInt32.Parse(match.Groups[4].Value' NumberStyles.AllowHexSpecifier' NumberFormatInfo.InvariantInfo)'                      UInt32.Parse(match.Groups[5].Value' NumberStyles.AllowHexSpecifier' NumberFormatInfo.InvariantInfo)                  };
Magic Number,Granados.X11,X11CygwinDomainSocket,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Socket.cs,ParseDomainSocketFile,The following statement contains a magic number: uint[] guid = {                      UInt32.Parse(match.Groups[2].Value' NumberStyles.AllowHexSpecifier' NumberFormatInfo.InvariantInfo)'                      UInt32.Parse(match.Groups[3].Value' NumberStyles.AllowHexSpecifier' NumberFormatInfo.InvariantInfo)'                      UInt32.Parse(match.Groups[4].Value' NumberStyles.AllowHexSpecifier' NumberFormatInfo.InvariantInfo)'                      UInt32.Parse(match.Groups[5].Value' NumberStyles.AllowHexSpecifier' NumberFormatInfo.InvariantInfo)                  };
Magic Number,Granados.X11,X11CygwinDomainSocket,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Socket.cs,Negotiate,The following statement contains a magic number: byte[] secret = new byte[16];
Magic Number,Granados.X11,X11CygwinDomainSocket,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Socket.cs,Negotiate,The following statement contains a magic number: putUInt32LE(secret' 4' guid[1]);
Magic Number,Granados.X11,X11CygwinDomainSocket,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Socket.cs,Negotiate,The following statement contains a magic number: putUInt32LE(secret' 8' guid[2]);
Magic Number,Granados.X11,X11CygwinDomainSocket,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Socket.cs,Negotiate,The following statement contains a magic number: putUInt32LE(secret' 8' guid[2]);
Magic Number,Granados.X11,X11CygwinDomainSocket,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Socket.cs,Negotiate,The following statement contains a magic number: putUInt32LE(secret' 12' guid[3]);
Magic Number,Granados.X11,X11CygwinDomainSocket,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Socket.cs,Negotiate,The following statement contains a magic number: putUInt32LE(secret' 12' guid[3]);
Magic Number,Granados.X11,X11CygwinDomainSocket,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Socket.cs,Negotiate,The following statement contains a magic number: byte[] secretRsp = new byte[16];
Magic Number,Granados.X11,X11CygwinDomainSocket,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Socket.cs,Negotiate,The following statement contains a magic number: byte[] credentials = new byte[12];
Magic Number,Granados.X11,X11CygwinDomainSocket,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Socket.cs,Negotiate,The following statement contains a magic number: putUInt32LE(credentials' 4' uid);
Magic Number,Granados.X11,X11CygwinDomainSocket,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Socket.cs,Negotiate,The following statement contains a magic number: putUInt32LE(credentials' 8' gid);
Magic Number,Granados.X11,X11CygwinDomainSocket,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Socket.cs,Negotiate,The following statement contains a magic number: byte[] credentialsRsp = new byte[12];
Magic Number,Granados.X11,X11CygwinDomainSocket,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Socket.cs,putUInt32LE,The following statement contains a magic number: value >>= 8;
Magic Number,Granados.X11,X11CygwinDomainSocket,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Socket.cs,putUInt32LE,The following statement contains a magic number: value >>= 8;
Magic Number,Granados.X11,X11CygwinDomainSocket,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Socket.cs,putUInt32LE,The following statement contains a magic number: value >>= 8;
Magic Number,Granados.X11,XProtocolMessage,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Utils.cs,AppendUInt16,The following statement contains a magic number: workbuf[0] = (byte)(v >> 8);
Magic Number,Granados.X11,XProtocolMessage,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Utils.cs,AppendUInt16,The following statement contains a magic number: _buffer.Append(workbuf' 0' 2);
Magic Number,Granados.X11,XProtocolMessage,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Utils.cs,AppendUInt32,The following statement contains a magic number: workbuf[0] = (byte)(v >> 24);
Magic Number,Granados.X11,XProtocolMessage,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Utils.cs,AppendUInt32,The following statement contains a magic number: workbuf[1] = (byte)(v >> 16);
Magic Number,Granados.X11,XProtocolMessage,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Utils.cs,AppendUInt32,The following statement contains a magic number: workbuf[2] = (byte)(v >> 8);
Magic Number,Granados.X11,XProtocolMessage,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Utils.cs,AppendUInt32,The following statement contains a magic number: workbuf[2] = (byte)(v >> 8);
Magic Number,Granados.X11,XProtocolMessage,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Utils.cs,AppendUInt32,The following statement contains a magic number: workbuf[3] = (byte)v;
Magic Number,Granados.X11,XProtocolMessage,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Utils.cs,AppendUInt32,The following statement contains a magic number: _buffer.Append(workbuf' 0' 4);
Magic Number,Granados.X11,XProtocolMessage,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Utils.cs,AppendPaddingBytesOf,The following statement contains a magic number: int pad = (4 - (s.Length % 4)) % 4;
Magic Number,Granados.X11,XProtocolMessage,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Utils.cs,AppendPaddingBytesOf,The following statement contains a magic number: int pad = (4 - (s.Length % 4)) % 4;
Magic Number,Granados.X11,XProtocolMessage,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Utils.cs,AppendPaddingBytesOf,The following statement contains a magic number: int pad = (4 - (s.Length % 4)) % 4;
Magic Number,Granados.X11,XDataReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Utils.cs,ReadUInt16,The following statement contains a magic number: return (ushort)((v1 << 8) | v2);
Magic Number,Granados.X11,XDataReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Utils.cs,ReadUInt32,The following statement contains a magic number: byte v3 = buff[offset + 2];
Magic Number,Granados.X11,XDataReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Utils.cs,ReadUInt32,The following statement contains a magic number: byte v4 = buff[offset + 3];
Magic Number,Granados.X11,XDataReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Utils.cs,ReadUInt32,The following statement contains a magic number: return ((uint)v1 << 24)                       | ((uint)v2 << 16)                       | ((uint)v3 << 8)                       | ((uint)v4);
Magic Number,Granados.X11,XDataReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Utils.cs,ReadUInt32,The following statement contains a magic number: return ((uint)v1 << 24)                       | ((uint)v2 << 16)                       | ((uint)v3 << 8)                       | ((uint)v4);
Magic Number,Granados.X11,XDataReader,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Utils.cs,ReadUInt32,The following statement contains a magic number: return ((uint)v1 << 24)                       | ((uint)v2 << 16)                       | ((uint)v3 << 8)                       | ((uint)v4);
Magic Number,Granados.X11,XauthorityParser,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Utils.cs,FindBest,The following statement contains a magic number: const ushort FamilyWild = 65535;
Magic Number,Granados.X11,XauthorityParser,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Utils.cs,ReadEntries,The following statement contains a magic number: !ReadString(fs' 256' out address)
Magic Number,Granados.X11,XauthorityParser,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Utils.cs,ReadEntries,The following statement contains a magic number: !ReadNumber(fs' 5' out number)
Magic Number,Granados.X11,XauthorityParser,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Utils.cs,ReadEntries,The following statement contains a magic number: !ReadString(fs' 40' out name)
Magic Number,Granados.X11,XauthorityParser,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Utils.cs,ReadEntries,The following statement contains a magic number: !ReadBytes(fs' 1024' out data)
Magic Number,Granados.X11,XauthorityParser,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Utils.cs,ReadUInt16BE,The following statement contains a magic number: int len = fs.Read(_workbuf' 0' 2);
Magic Number,Granados.X11,XauthorityParser,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\X11Utils.cs,ReadUInt16BE,The following statement contains a magic number: len != 2
Magic Number,Poderosa.Boot,PoderosaStartup,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Plugin\PoderosaStartup.cs,CreatePoderosaApplication,The following statement contains a magic number: switch (t) {                      case "-p":                      case "--profile":                          preference_home = ResolveProfileDirectory(v);                          i += 2;                          break;                      case "-a":                      case "--addasm":                          pm.AddAssembly(home_directory' v.Split(';'));                          i += 2;                          break;                      case "-r":                      case "--remasm":                          pm.RemoveAssembly(home_directory' v.Split(';'));                          i += 2;                          break;                      case "-open":                          open_file = v;                          i += 2;                          break;                      default:                          i++;                          break;                  }
Magic Number,Poderosa.Boot,PoderosaStartup,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Plugin\PoderosaStartup.cs,CreatePoderosaApplication,The following statement contains a magic number: switch (t) {                      case "-p":                      case "--profile":                          preference_home = ResolveProfileDirectory(v);                          i += 2;                          break;                      case "-a":                      case "--addasm":                          pm.AddAssembly(home_directory' v.Split(';'));                          i += 2;                          break;                      case "-r":                      case "--remasm":                          pm.RemoveAssembly(home_directory' v.Split(';'));                          i += 2;                          break;                      case "-open":                          open_file = v;                          i += 2;                          break;                      default:                          i++;                          break;                  }
Magic Number,Poderosa.Boot,PoderosaStartup,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Plugin\PoderosaStartup.cs,CreatePoderosaApplication,The following statement contains a magic number: switch (t) {                      case "-p":                      case "--profile":                          preference_home = ResolveProfileDirectory(v);                          i += 2;                          break;                      case "-a":                      case "--addasm":                          pm.AddAssembly(home_directory' v.Split(';'));                          i += 2;                          break;                      case "-r":                      case "--remasm":                          pm.RemoveAssembly(home_directory' v.Split(';'));                          i += 2;                          break;                      case "-open":                          open_file = v;                          i += 2;                          break;                      default:                          i++;                          break;                  }
Magic Number,Poderosa.Boot,PoderosaStartup,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Plugin\PoderosaStartup.cs,CreatePoderosaApplication,The following statement contains a magic number: switch (t) {                      case "-p":                      case "--profile":                          preference_home = ResolveProfileDirectory(v);                          i += 2;                          break;                      case "-a":                      case "--addasm":                          pm.AddAssembly(home_directory' v.Split(';'));                          i += 2;                          break;                      case "-r":                      case "--remasm":                          pm.RemoveAssembly(home_directory' v.Split(';'));                          i += 2;                          break;                      case "-open":                          open_file = v;                          i += 2;                          break;                      default:                          i++;                          break;                  }
Magic Number,Poderosa.Boot,PoderosaStartup,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Plugin\PoderosaStartup.cs,TryToSendOpenFileMessage,The following statement contains a magic number: char[] name = new char[256];
Magic Number,Poderosa.Boot,PoderosaStartup,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Plugin\PoderosaStartup.cs,TryToSendOpenFileMessage,The following statement contains a magic number: char[] mf = new char[256];
Magic Number,Poderosa.Boot,PoderosaStartup,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Plugin\PoderosaStartup.cs,TryToSendOpenFileMessage,The following statement contains a magic number: int len = Win32.GetWindowText(hwnd' name' 256);
Magic Number,Poderosa.Protocols,LocalShellUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\LocalShell.cs,PrepareListener,The following statement contains a magic number: _localPort = 20345;
Magic Number,Poderosa.Protocols,Connector,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\LocalShell.cs,Connect,The following statement contains a magic number: Socket.Select(chk' null' null' 100);
Magic Number,Poderosa.Protocols,CygwinUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\LocalShell.cs,GuessRootDirectory,The following statement contains a magic number: IntPtr.Size == 8
Magic Number,Poderosa.Protocols,NetAddressUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\NetUtil.cs,NetAddressIncludesIPAddress,The following statement contains a magic number: bits -= 8;
Magic Number,Poderosa.Protocols,ProtocolOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\ProtocolOptions.cs,DefineItems,The following statement contains a magic number: _sshWindowSize = builder.DefineIntValue(_folder' "sshWindowSize"' 2097152' PreferenceValidatorUtil.PositiveIntegerValidator);
Magic Number,Poderosa.Protocols,ProtocolOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\ProtocolOptions.cs,DefineItems,The following statement contains a magic number: _socketConnectTimeout = builder.DefineIntValue(_folder' "socketConnectTimeout"' 3000' PreferenceValidatorUtil.PositiveIntegerValidator);
Magic Number,Poderosa.Protocols,ProtocolOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\ProtocolOptions.cs,DefineItems,The following statement contains a magic number: _socksPort = builder.DefineIntValue(_folder' "socksPort"' 1080' PreferenceValidatorUtil.PositiveIntegerValidator);
Magic Number,Poderosa.Protocols,Socks,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\socks.cs,Socks,The following statement contains a magic number: _version = 5;
Magic Number,Poderosa.Protocols,Socks,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\socks.cs,Connect,The following statement contains a magic number: _version == 4
Magic Number,Poderosa.Protocols,Socks,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\socks.cs,ConnectBySocks4,The following statement contains a magic number: wr.Write((byte)4);
Magic Number,Poderosa.Protocols,Socks,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\socks.cs,ConnectBySocks4,The following statement contains a magic number: byte[] response = new byte[8];
Magic Number,Poderosa.Protocols,Socks,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\socks.cs,ConnectBySocks4,The following statement contains a magic number: response[1] != 90
Magic Number,Poderosa.Protocols,Socks,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\socks.cs,ConnectBySocks5,The following statement contains a magic number: byte[] first = new byte[] { 5' 2' 0' 2 };
Magic Number,Poderosa.Protocols,Socks,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\socks.cs,ConnectBySocks5,The following statement contains a magic number: byte[] first = new byte[] { 5' 2' 0' 2 };
Magic Number,Poderosa.Protocols,Socks,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\socks.cs,ConnectBySocks5,The following statement contains a magic number: byte[] first = new byte[] { 5' 2' 0' 2 };
Magic Number,Poderosa.Protocols,Socks,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\socks.cs,ConnectBySocks5,The following statement contains a magic number: s.Send(first' 0' 4' SocketFlags.None);
Magic Number,Poderosa.Protocols,Socks,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\socks.cs,ConnectBySocks5,The following statement contains a magic number: byte[] response = new byte[4];
Magic Number,Poderosa.Protocols,Socks,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\socks.cs,ConnectBySocks5,The following statement contains a magic number: int r = s.Receive(response' 0' 2' SocketFlags.None);
Magic Number,Poderosa.Protocols,Socks,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\socks.cs,ConnectBySocks5,The following statement contains a magic number: r != 2
Magic Number,Poderosa.Protocols,Socks,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\socks.cs,ConnectBySocks5,The following statement contains a magic number: response[0] != 5
Magic Number,Poderosa.Protocols,Socks,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\socks.cs,ConnectBySocks5,The following statement contains a magic number: wr.Write((byte)5);
Magic Number,Poderosa.Protocols,Socks,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\socks.cs,ConnectBySocks5,The following statement contains a magic number: wr.Write((byte)3);
Magic Number,Poderosa.Protocols,Socks,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\socks.cs,ConnectBySocks5,The following statement contains a magic number: r = s.Receive(response' 0' 4' SocketFlags.None);
Magic Number,Poderosa.Protocols,Socks,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\socks.cs,ConnectBySocks5,The following statement contains a magic number: response[3] == 3
Magic Number,Poderosa.Protocols,Socks,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\socks.cs,ConnectBySocks5,The following statement contains a magic number: response[3] == 3
Magic Number,Poderosa.Protocols,Socks,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\socks.cs,Sock5Auth,The following statement contains a magic number: byte[] response = new byte[2];
Magic Number,Poderosa.Protocols,Socks,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\socks.cs,Sock5Auth,The following statement contains a magic number: int r = s.Receive(response' 0' 2' SocketFlags.None);
Magic Number,Poderosa.Protocols,Socks,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\socks.cs,Sock5Auth,The following statement contains a magic number: r != 2 || response[1] != 0
Magic Number,Poderosa.Protocols,Socks,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\socks.cs,GetSocks5ErrorMessage,The following statement contains a magic number: switch (code) {                  case 1:                      return "SOCKS server error";                  case 2:                      return "The connection is not allowed.";                  case 3:                      return "Failed to reach the destination network.";                  case 4:                      return "Failed to reach the destination host.";                  case 5:                      return "The access is denied.";                  case 6:                      return "TTL is disposed.";                  case 7:                      return "The SOCKS command is not supported.";                  case 8:                      return "The type of address is not supported.";                  default:                      return String.Format("Unknown Code {0}"' code);              }
Magic Number,Poderosa.Protocols,Socks,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\socks.cs,GetSocks5ErrorMessage,The following statement contains a magic number: switch (code) {                  case 1:                      return "SOCKS server error";                  case 2:                      return "The connection is not allowed.";                  case 3:                      return "Failed to reach the destination network.";                  case 4:                      return "Failed to reach the destination host.";                  case 5:                      return "The access is denied.";                  case 6:                      return "TTL is disposed.";                  case 7:                      return "The SOCKS command is not supported.";                  case 8:                      return "The type of address is not supported.";                  default:                      return String.Format("Unknown Code {0}"' code);              }
Magic Number,Poderosa.Protocols,Socks,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\socks.cs,GetSocks5ErrorMessage,The following statement contains a magic number: switch (code) {                  case 1:                      return "SOCKS server error";                  case 2:                      return "The connection is not allowed.";                  case 3:                      return "Failed to reach the destination network.";                  case 4:                      return "Failed to reach the destination host.";                  case 5:                      return "The access is denied.";                  case 6:                      return "TTL is disposed.";                  case 7:                      return "The SOCKS command is not supported.";                  case 8:                      return "The type of address is not supported.";                  default:                      return String.Format("Unknown Code {0}"' code);              }
Magic Number,Poderosa.Protocols,Socks,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\socks.cs,GetSocks5ErrorMessage,The following statement contains a magic number: switch (code) {                  case 1:                      return "SOCKS server error";                  case 2:                      return "The connection is not allowed.";                  case 3:                      return "Failed to reach the destination network.";                  case 4:                      return "Failed to reach the destination host.";                  case 5:                      return "The access is denied.";                  case 6:                      return "TTL is disposed.";                  case 7:                      return "The SOCKS command is not supported.";                  case 8:                      return "The type of address is not supported.";                  default:                      return String.Format("Unknown Code {0}"' code);              }
Magic Number,Poderosa.Protocols,Socks,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\socks.cs,GetSocks5ErrorMessage,The following statement contains a magic number: switch (code) {                  case 1:                      return "SOCKS server error";                  case 2:                      return "The connection is not allowed.";                  case 3:                      return "Failed to reach the destination network.";                  case 4:                      return "Failed to reach the destination host.";                  case 5:                      return "The access is denied.";                  case 6:                      return "TTL is disposed.";                  case 7:                      return "The SOCKS command is not supported.";                  case 8:                      return "The type of address is not supported.";                  default:                      return String.Format("Unknown Code {0}"' code);              }
Magic Number,Poderosa.Protocols,Socks,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\socks.cs,GetSocks5ErrorMessage,The following statement contains a magic number: switch (code) {                  case 1:                      return "SOCKS server error";                  case 2:                      return "The connection is not allowed.";                  case 3:                      return "Failed to reach the destination network.";                  case 4:                      return "Failed to reach the destination host.";                  case 5:                      return "The access is denied.";                  case 6:                      return "TTL is disposed.";                  case 7:                      return "The SOCKS command is not supported.";                  case 8:                      return "The type of address is not supported.";                  default:                      return String.Format("Unknown Code {0}"' code);              }
Magic Number,Poderosa.Protocols,Socks,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\socks.cs,GetSocks5ErrorMessage,The following statement contains a magic number: switch (code) {                  case 1:                      return "SOCKS server error";                  case 2:                      return "The connection is not allowed.";                  case 3:                      return "Failed to reach the destination network.";                  case 4:                      return "Failed to reach the destination host.";                  case 5:                      return "The access is denied.";                  case 6:                      return "TTL is disposed.";                  case 7:                      return "The SOCKS command is not supported.";                  case 8:                      return "The type of address is not supported.";                  default:                      return String.Format("Unknown Code {0}"' code);              }
Magic Number,Poderosa.Protocols,LocalSSHUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\SSH.cs,SimpleEncrypt,The following statement contains a magic number: byte[] t2 = new byte[t.Length + (16 - (t.Length % 16))];
Magic Number,Poderosa.Protocols,LocalSSHUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\SSH.cs,SimpleEncrypt,The following statement contains a magic number: byte[] t2 = new byte[t.Length + (16 - (t.Length % 16))];
Magic Number,Poderosa.Protocols,LocalSSHUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\SSH.cs,SimpleEncrypt,The following statement contains a magic number: (t.Length % 16) != 0
Magic Number,Poderosa.Protocols,KeyboardInteractiveAuthHanlder,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\SSHSocket.cs,OnData,The following statement contains a magic number: b == 13 || b == 10
Magic Number,Poderosa.Protocols,KeyboardInteractiveAuthHanlder,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\SSHSocket.cs,OnData,The following statement contains a magic number: b == 13 || b == 10
Magic Number,Poderosa.Protocols,KeyboardInteractiveAuthHanlder,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\SSHSocket.cs,OnData,The following statement contains a magic number: _output(new byte[] { 13' 10 });
Magic Number,Poderosa.Protocols,KeyboardInteractiveAuthHanlder,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\SSHSocket.cs,OnData,The following statement contains a magic number: _output(new byte[] { 13' 10 });
Magic Number,Poderosa.Protocols,TelnetOptionWriter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\Telnet.cs,WriteTerminalSize,The following statement contains a magic number: _strm.WriteByte((byte)(width >> 8));
Magic Number,Poderosa.Protocols,TelnetOptionWriter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\Telnet.cs,WriteTerminalSize,The following statement contains a magic number: _strm.WriteByte((byte)(height >> 8));
Magic Number,Poderosa.Protocols,TelnetSocket,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\TerminalConnection.cs,WriteEscaping,The following statement contains a magic number: byte[] newbuf = new byte[length * 2];
Magic Number,Poderosa.Protocols,TelnetSocket,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\TerminalConnection.cs,AreYouThere,The following statement contains a magic number: byte[] data = new byte[2];
Magic Number,Poderosa.Protocols,TelnetSocket,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\TerminalConnection.cs,SendBreak,The following statement contains a magic number: byte[] data = new byte[2];
Magic Number,Poderosa.Protocols,TelnetSocket,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\TerminalConnection.cs,SendKeepAliveData,The following statement contains a magic number: byte[] data = new byte[2];
Magic Number,Poderosa.Protocols,TerminalParameter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\TerminalParameter.cs,TerminalParameter,The following statement contains a magic number: SetTerminalSize(80' 25);
Magic Number,Poderosa.Protocols,TerminalParameter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\TerminalParameter.cs,TerminalParameter,The following statement contains a magic number: SetTerminalSize(80' 25);
Magic Number,Poderosa.Protocols,TelnetParameter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\TerminalParameter.cs,TelnetParameter,The following statement contains a magic number: this.Port = 23;
Magic Number,Poderosa.Protocols,SSHLoginParameter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\TerminalParameter.cs,SSHLoginParameter,The following statement contains a magic number: this.Port = 22;
Magic Number,Poderosa.Terminal,CommandResultProcessorBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\CommandResultPopup.cs,AsyncResultQuickHack,The following statement contains a magic number: ar.AsyncWaitHandle.WaitOne(100' false)
Magic Number,Poderosa.Terminal,CommandResultSession,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\CommandResultPopupSession.cs,SessionEntryPoint,The following statement contains a magic number: cp.InitialSize = new Size(tc.ClientSize.Width' (int)(RuntimeUtil.AdjustIntRange(document.Size' 0' 20) * rp.Pitch.Height) + 2);
Magic Number,Poderosa.Terminal,CommandResultSession,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\CommandResultPopupSession.cs,SessionEntryPoint,The following statement contains a magic number: cp.InitialSize = new Size(tc.ClientSize.Width' (int)(RuntimeUtil.AdjustIntRange(document.Size' 0' 20) * rp.Pitch.Height) + 2);
Magic Number,Poderosa.Terminal,EncodingProfile,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Encoding.cs,EncodingProfile,The following statement contains a magic number: _buffer = new byte[3];
Magic Number,Poderosa.Terminal,EncodingProfile,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Encoding.cs,IsInterestingByte,The following statement contains a magic number: return _cursor == 0 ? IsLeadByte(b) : b >= 33;
Magic Number,Poderosa.Terminal,ShiftJISProfile,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Encoding.cs,GetCharLength,The following statement contains a magic number: return (b >= 0xA1 && b <= 0xDF) ? 1 : 2;
Magic Number,Poderosa.Terminal,EUCJPProfile,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Encoding.cs,GetCharLength,The following statement contains a magic number: return b == 0x8F ? 3 : b >= 0x8E ? 2 : 1;
Magic Number,Poderosa.Terminal,EUCJPProfile,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Encoding.cs,GetCharLength,The following statement contains a magic number: return b == 0x8F ? 3 : b >= 0x8E ? 2 : 1;
Magic Number,Poderosa.Terminal,UTF8Profile,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Encoding.cs,GetCharLength,The following statement contains a magic number: return b >= 0xE0 ? 3 : b >= 0x80 ? 2 : 1;
Magic Number,Poderosa.Terminal,UTF8Profile,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Encoding.cs,GetCharLength,The following statement contains a magic number: return b >= 0xE0 ? 3 : b >= 0x80 ? 2 : 1;
Magic Number,Poderosa.Terminal,UTF8_LatinProfile,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Encoding.cs,GetCharLength,The following statement contains a magic number: return b >= 0xE0 ? 3 : b >= 0x80 ? 2 : 1;
Magic Number,Poderosa.Terminal,UTF8_LatinProfile,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Encoding.cs,GetCharLength,The following statement contains a magic number: return b >= 0xE0 ? 3 : b >= 0x80 ? 2 : 1;
Magic Number,Poderosa.Terminal,GB2312Profile,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Encoding.cs,GetCharLength,The following statement contains a magic number: return 2;
Magic Number,Poderosa.Terminal,Big5Profile,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Encoding.cs,GetCharLength,The following statement contains a magic number: return 2;
Magic Number,Poderosa.Terminal,EUCCNProfile,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Encoding.cs,GetCharLength,The following statement contains a magic number: return 2;
Magic Number,Poderosa.Terminal,EUCKRProfile,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Encoding.cs,GetCharLength,The following statement contains a magic number: return 2;
Magic Number,Poderosa.Terminal,CharQueue,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\IntelliSense.cs,CharQueue,The following statement contains a magic number: _buffer = new char[80];
Magic Number,Poderosa.Terminal,IntelliSense,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\IntelliSense.cs,OnNotPromptLine,The following statement contains a magic number: ar.AsyncWaitHandle.WaitOne(100' false)
Magic Number,Poderosa.Terminal,IntelliSenseWindow,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\IntelliSenseWindow.cs,AdjustListBox,The following statement contains a magic number: _listBox.MaximumSize = new Size((int)(pitch.Width * 80)' (int)(pitch.Height * 10));
Magic Number,Poderosa.Terminal,IntelliSenseWindow,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\IntelliSenseWindow.cs,AdjustListBox,The following statement contains a magic number: _listBox.MaximumSize = new Size((int)(pitch.Width * 80)' (int)(pitch.Height * 10));
Magic Number,Poderosa.Terminal,IntelliSenseWindow,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\IntelliSenseWindow.cs,ToControlPoint,The following statement contains a magic number: int x = (int)(textPoint.X * pitch.Width) - 2;
Magic Number,Poderosa.Terminal,Entry,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\KeyFunction.cs,ParseData,The following statement contains a magic number: Int32.TryParse(s.Substring(c + 2' 2)' NumberStyles.HexNumber' null' out t)
Magic Number,Poderosa.Terminal,Entry,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\KeyFunction.cs,ParseData,The following statement contains a magic number: Int32.TryParse(s.Substring(c + 2' 2)' NumberStyles.HexNumber' null' out t)
Magic Number,Poderosa.Terminal,Entry,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\KeyFunction.cs,ParseData,The following statement contains a magic number: c += 4;
Magic Number,Poderosa.Terminal,Entry,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\KeyFunction.cs,ParseData,The following statement contains a magic number: ch == '0' && c + 3 <= s.Length && s[c + 1] == 'x'
Magic Number,Poderosa.Terminal,DefaultLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Logger.cs,DefaultLogger,The following statement contains a magic number: _timestampBuffer = new char[26];
Magic Number,Poderosa.Terminal,DefaultLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Logger.cs,WriteTimestamp,The following statement contains a magic number: offset = WriteInt(buff' offset' 4' dt.Year);
Magic Number,Poderosa.Terminal,DefaultLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Logger.cs,WriteTimestamp,The following statement contains a magic number: offset = WriteInt(buff' offset' 2' dt.Month);
Magic Number,Poderosa.Terminal,DefaultLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Logger.cs,WriteTimestamp,The following statement contains a magic number: offset = WriteInt(buff' offset' 2' dt.Day);
Magic Number,Poderosa.Terminal,DefaultLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Logger.cs,WriteTimestamp,The following statement contains a magic number: offset = WriteInt(buff' offset' 2' dt.Hour);
Magic Number,Poderosa.Terminal,DefaultLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Logger.cs,WriteTimestamp,The following statement contains a magic number: offset = WriteInt(buff' offset' 2' dt.Minute);
Magic Number,Poderosa.Terminal,DefaultLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Logger.cs,WriteTimestamp,The following statement contains a magic number: offset = WriteInt(buff' offset' 2' dt.Second);
Magic Number,Poderosa.Terminal,DefaultLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Logger.cs,WriteTimestamp,The following statement contains a magic number: offset = WriteInt(buff' offset' 3' dt.Millisecond);
Magic Number,Poderosa.Terminal,DefaultLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Logger.cs,WriteInt,The following statement contains a magic number: buff[--index] = (char)('0' + value % 10);
Magic Number,Poderosa.Terminal,DefaultLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Logger.cs,WriteInt,The following statement contains a magic number: value /= 10;
Magic Number,Poderosa.Terminal,TerminalOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Options.cs,DefineItems,The following statement contains a magic number: _fontSize = builder.DefineIntValue(_folder' "fontSize"' 10' PreferenceValidatorUtil.PositiveIntegerValidator);
Magic Number,Poderosa.Terminal,TerminalOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Options.cs,DefineItems,The following statement contains a magic number: _lineSpacing = builder.DefineIntValue(_folder' "lineSpacing"' 0' PreferenceValidatorUtil.IntRangeValidator(0' 10));
Magic Number,Poderosa.Terminal,TerminalOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Options.cs,DefineItems,The following statement contains a magic number: _terminalBufferSize = builder.DefineIntValue(_folder' "terminalBufferSize"' 1000' PreferenceValidatorUtil.PositiveIntegerValidator);
Magic Number,Poderosa.Terminal,TerminalOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Options.cs,DefineItems,The following statement contains a magic number: _keepAliveInterval = builder.DefineIntValue(_folder' "keepAliveInterval"' 60000' PreferenceValidatorUtil.IntRangeValidator(0' 100 * 60000));
Magic Number,Poderosa.Terminal,TerminalOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Options.cs,DefineItems,The following statement contains a magic number: _keepAliveInterval = builder.DefineIntValue(_folder' "keepAliveInterval"' 60000' PreferenceValidatorUtil.IntRangeValidator(0' 100 * 60000));
Magic Number,Poderosa.Terminal,TerminalOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Options.cs,DefineItems,The following statement contains a magic number: _keepAliveInterval = builder.DefineIntValue(_folder' "keepAliveInterval"' 60000' PreferenceValidatorUtil.IntRangeValidator(0' 100 * 60000));
Magic Number,Poderosa.Terminal,TerminalOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Options.cs,DefineItems,The following statement contains a magic number: _wheelAmount = builder.DefineIntValue(_folder' "wheelAmount"' 3' PreferenceValidatorUtil.PositiveIntegerValidator);
Magic Number,Poderosa.Terminal,TerminalOptions,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Options.cs,DefineItems,The following statement contains a magic number: _shellHistoryLimitCount = builder.DefineIntValue(_folder' "shellHistoryLimitCount"' 100' PreferenceValidatorUtil.PositiveIntegerValidator);
Magic Number,Poderosa.Terminal,GenericShellScheme,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\ShellScheme.cs,ParseCommandList,The following statement contains a magic number: cursor += 2;
Magic Number,Poderosa.Terminal,EscapeSequenceTerminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalBase.cs,GetNextTabStop,The following statement contains a magic number: t += (8 - t % 8);
Magic Number,Poderosa.Terminal,EscapeSequenceTerminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalBase.cs,GetNextTabStop,The following statement contains a magic number: t += (8 - t % 8);
Magic Number,Poderosa.Terminal,EscapeSequenceTerminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalBase.cs,ParseIntPair,The following statement contains a magic number: s.Length >= 2 && s[1].Length > 0
Magic Number,Poderosa.Terminal,TerminalControl,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,TerminalControl,The following statement contains a magic number: _sizeTipTimer.Interval = 2000;
Magic Number,Poderosa.Terminal,TerminalControl,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,InitializeComponent,The following statement contains a magic number: this._sizeTip.Size = new Size(64' 16);
Magic Number,Poderosa.Terminal,TerminalControl,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,InitializeComponent,The following statement contains a magic number: this._sizeTip.Size = new Size(64' 16);
Magic Number,Poderosa.Terminal,TerminalControl,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,SmartInvalidate,The following statement contains a magic number: switch (_drawOptimizingState) {                  case 0:                      _drawOptimizingState = 1;                      InvalidateEx();                      break;                  case 1:                      if (_session.TerminalConnection.Socket.Available)                          Interlocked.Exchange(ref _drawOptimizingState' 2); //間引きモードへ                      else                          InvalidateEx();                      break;                  case 2:                      break; //do nothing              }
Magic Number,Poderosa.Terminal,TerminalControl,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,SmartInvalidate,The following statement contains a magic number: switch (_drawOptimizingState) {                  case 0:                      _drawOptimizingState = 1;                      InvalidateEx();                      break;                  case 1:                      if (_session.TerminalConnection.Socket.Available)                          Interlocked.Exchange(ref _drawOptimizingState' 2); //間引きモードへ                      else                          InvalidateEx();                      break;                  case 2:                      break; //do nothing              }
Magic Number,Poderosa.Terminal,TerminalControl,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,OnWindowManagerTimer,The following statement contains a magic number: switch (_drawOptimizingState) {                  case 0:                      break; //do nothing                  case 1:                      Interlocked.CompareExchange(ref _drawOptimizingState' 0' 1);                      break;                  case 2: //忙しくても偶には描画                      _drawOptimizingState = 1;                      InvalidateEx();                      break;              }
Magic Number,Poderosa.Terminal,TerminalControl,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,ProcessSpecialAltKey,The following statement contains a magic number: ch = (char)((int)ch % 32);
Magic Number,Poderosa.Terminal,TerminalControl,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,ProcessSpecialAltKey,The following statement contains a magic number: byte[] t = new byte[2];
Magic Number,Poderosa.Terminal,TerminalControl,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,CalcTerminalSize,The following statement contains a magic number: int width = (int)Math.Floor((float)(this.ClientSize.Width - sm.ScrollBarWidth - CharacterDocumentViewer.BORDER * 2) / charPitch.Width);
Magic Number,Poderosa.Terminal,TerminalControl,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,CalcTerminalSize,The following statement contains a magic number: int height = (int)Math.Floor((float)(this.ClientSize.Height - CharacterDocumentViewer.BORDER * 2 + prof.LineSpacing) / (charPitch.Height + prof.LineSpacing));
Magic Number,Poderosa.Terminal,TerminalControl,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,ShowSizeTip,The following statement contains a magic number: const int MARGIN = 8;
Magic Number,Poderosa.Terminal,TerminalControl,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,SplitterDragging,The following statement contains a magic number: width = (int)Math.Floor(((float)width - sm.ScrollBarWidth - sm.ControlBorderWidth * 2) / charSize.Width);
Magic Number,Poderosa.Terminal,TerminalControl,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,SplitterDragging,The following statement contains a magic number: height = (int)Math.Floor((float)(height - sm.ControlBorderHeight * 2) / charSize.Height);
Magic Number,Poderosa.Terminal,TerminalControl,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,ProcessVScrollMessage,The following statement contains a magic number: switch (cmd) {                  case 0: //SB_LINEUP                      newval--;                      break;                  case 1: //SB_LINEDOWN                      newval++;                      break;                  case 2: //SB_PAGEUP                      newval -= GetDocument().TerminalHeight;                      break;                  case 3: //SB_PAGEDOWN                      newval += GetDocument().TerminalHeight;                      break;              }
Magic Number,Poderosa.Terminal,TerminalControl,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,ProcessVScrollMessage,The following statement contains a magic number: switch (cmd) {                  case 0: //SB_LINEUP                      newval--;                      break;                  case 1: //SB_LINEDOWN                      newval++;                      break;                  case 2: //SB_PAGEUP                      newval -= GetDocument().TerminalHeight;                      break;                  case 3: //SB_PAGEDOWN                      newval += GetDocument().TerminalHeight;                      break;              }
Magic Number,Poderosa.Terminal,MouseWheelHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,OnMouseWheel,The following statement contains a magic number: int d = args.Delta / 120;
Magic Number,Poderosa.Terminal,DrawingPerformance,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,MarkReceiveData,The following statement contains a magic number: now - _lastReceivedTime < 10 * 1000 * 100
Magic Number,Poderosa.Terminal,DrawingPerformance,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,MarkReceiveData,The following statement contains a magic number: now - _lastReceivedTime < 10 * 1000 * 100
Magic Number,Poderosa.Terminal,DrawingPerformance,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,MarkReceiveData,The following statement contains a magic number: now - _lastReceivedTime < 10 * 1000 * 100
Magic Number,Poderosa.Terminal,TerminalUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalUtil.cs,NewLineChars,The following statement contains a magic number: switch (nl) {                  case NewLine.CR:                      return new char[1] { '\r' };                  case NewLine.LF:                      return new char[1] { '\n' };                  case NewLine.CRLF:                      return new char[2] { '\r'' '\n' };                  default:                      throw new ArgumentException("Unknown NewLine " + nl);              }
Magic Number,Poderosa.Terminal,TerminalUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalUtil.cs,NewLineBytes,The following statement contains a magic number: switch (nl) {                  case NewLine.CR:                      return new byte[1] { (byte)'\r' };                  case NewLine.LF:                      return new byte[1] { (byte)'\n' };                  case NewLine.CRLF:                      return new byte[2] { (byte)'\r'' (byte)'\n' };                  default:                      throw new ArgumentException("Unknown NewLine " + nl);              }
Magic Number,Poderosa.Terminal,KeyboardInfo,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalUtil.cs,Init,The following statement contains a magic number: _defaultGroup = new char[256];
Magic Number,Poderosa.Terminal,KeyboardInfo,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalUtil.cs,Init,The following statement contains a magic number: _shiftGroup = new char[256];
Magic Number,Poderosa.Terminal,KeyboardInfo,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalUtil.cs,Init,The following statement contains a magic number: i < 128
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessSGRParameterANSI,The following statement contains a magic number: switch (code) {                  case 0: // default rendition (implementation-defined) (ECMA-48'VT100'VT220)                      dec = TextDecoration.Default;                      break;                  case 1: // bold or increased intensity (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithBold(true);                      break;                  case 2: // faint' decreased intensity or second colour (ECMA-48)                      dec = dec.GetCopyWithTextColor(DrawUtil.DarkColor(dec.TextColor));                      break;                  case 3: // italicized (ECMA-48)                      break;                  case 4: // singly underlined (ECMA-48'VT100'VT220)                      dec = dec.GetCopyWithUnderline(true);                      break;                  case 5: // slowly blinking (ECMA-48'VT100'VT220)                  case 6: // rapidly blinking (ECMA-48)                      // use bold instead of blinking                      dec = dec.GetCopyWithBold(true);                      break;                  case 7: // negative image (ECMA-48'VT100'VT220)                      dec = dec.GetInvertedCopy();                      break;                  case 8: // concealed characters (ECMA-48'VT300)                  case 9: // crossed-out (ECMA-48)                  case 10: // primary (default) font (ECMA-48)                  case 11: // first alternative font (ECMA-48)                  case 12: // second alternative font (ECMA-48)                  case 13: // third alternative font (ECMA-48)                  case 14: // fourth alternative font (ECMA-48)                  case 15: // fifth alternative font (ECMA-48)                  case 16: // sixth alternative font (ECMA-48)                  case 17: // seventh alternative font (ECMA-48)                  case 18: // eighth alternative font (ECMA-48)                  case 19: // ninth alternative font (ECMA-48)                  case 20: // Fraktur (Gothic) (ECMA-48)                  case 21: // doubly underlined (ECMA-48)                      break;                  case 22: // normal colour or normal intensity (neither bold nor faint) (ECMA-48'VT220'VT300)                      dec = TextDecoration.Default;                      break;                  case 23: // not italicized' not fraktur (ECMA-48)                      break;                  case 24: // not underlined (neither singly nor doubly) (ECMA-48'VT220'VT300)                      dec = dec.GetCopyWithUnderline(false);                      break;                  case 25: // steady (not blinking) (ECMA-48'VT220'VT300)                      // disable bold instead of disabling blinking                      dec = dec.GetCopyWithBold(false);                      break;                  case 26: // reserved (ECMA-48)                      break;                  case 27: // positive image (ECMA-48'VT220'VT300)                      // actually' there is no guarantee that this operation displays a positive attributes...                      dec = dec.GetInvertedCopy();                      break;                  case 28: // revealed characters (ECMA-48)                  case 29: // not crossed out (ECMA-48)                      break;                  case 30: // black display (ECMA-48)                  case 31: // red display (ECMA-48)                  case 32: // green display (ECMA-48)                  case 33: // yellow display (ECMA-48)                  case 34: // blue display (ECMA-48)                  case 35: // magenta display (ECMA-48)                  case 36: // cyan display (ECMA-48)                  case 37: // white display (ECMA-48)                      dec = SelectForeColor(dec' code - 30);                      break;                  case 38: // reserved (ECMA-48)                      break;                  case 39: // default display colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultTextColor();                      break;                  case 40: // black background (ECMA-48)                  case 41: // red background (ECMA-48)                  case 42: // green background (ECMA-48)                  case 43: // yellow background (ECMA-48)                  case 44: // blue background (ECMA-48)                  case 45: // magenta background (ECMA-48)                  case 46: // cyan background (ECMA-48)                  case 47: // white background (ECMA-48)                      dec = SelectBackgroundColor(dec' code - 40);                      break;                  case 48: // reserved (ECMA-48)                      break;                  case 49: // default background colour (implementation-defined) (ECMA-48)                      dec = dec.GetCopyWithDefaultBackColor();                      break;                  case 50: // reserved (ECMA-48)                  case 51: // framed (ECMA-48)                  case 52: // encircled (ECMA-48)                  case 53: // overlined (ECMA-48)                  case 54: // not framed' not encircled (ECMA-48)                  case 55: // not overlined (ECMA-48)                  case 56: // reserved (ECMA-48)                  case 57: // reserved (ECMA-48)                  case 58: // reserved (ECMA-48)                  case 59: // reserved (ECMA-48)                  case 60: // ideogram underline or right side line (ECMA-48)                  case 61: // ideogram double underline or double line on the right side (ECMA-48)                  case 62: // ideogram overline or left side line (ECMA-48)                  case 63: // ideogram double overline or double line on the left side (ECMA-48)                  case 64: // ideogram stress marking (ECMA-48)                  case 65: // cancels the effect of the rendition aspects established by parameter values 60 to 64 (ECMA-48)                      break;                  default:                      // other values are ignored without notification to the user                      Debug.WriteLine("unknown SGR code (ANSI) : {0}"' code);                      break;              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessEraseInDisplay,The following statement contains a magic number: switch (d) {                  case 0: //erase below                      {                          if (col == 0 && cur == top)                              goto ERASE_ALL;                            EraseRight();                          doc.ReplaceCurrentLine(_manipulator.Export());                          doc.EnsureLine(bottom - 1);                          doc.RemoveAfter(bottom);                          doc.ClearRange(cur + 1' bottom' _currentdecoration);                          _manipulator.Load(doc.CurrentLine' col);                      }                      break;                  case 1: //erase above                      {                          if (col == doc.TerminalWidth - 1 && cur == bottom - 1)                              goto ERASE_ALL;                            EraseLeft();                          doc.ReplaceCurrentLine(_manipulator.Export());                          doc.ClearRange(top' cur' _currentdecoration);                          _manipulator.Load(doc.CurrentLine' col);                      }                      break;                  case 2: //erase all                  ERASE_ALL:                      {                          GetDocument().ApplicationModeBackColor = (_currentdecoration != null) ? _currentdecoration.BackColor : Color.Empty;                            doc.ReplaceCurrentLine(_manipulator.Export());                          //if(_homePositionOnCSIJ2) { //SFUではこうなる                          //	ProcessCursorPosition(1'1);                           //	col = 0;                          //}                          doc.EnsureLine(bottom - 1);                          doc.RemoveAfter(bottom);                          doc.ClearRange(top' bottom' _currentdecoration);                          _manipulator.Load(doc.CurrentLine' col);                      }                      break;                  default:                      throw new UnknownEscapeSequenceException(String.Format("unknown ED option {0}"' param));              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessEraseInLine,The following statement contains a magic number: switch (d) {                  case 0: //erase right                      EraseRight();                      break;                  case 1: //erase left                      EraseLeft();                      break;                  case 2: //erase all                      EraseLine();                      break;                  default:                      throw new UnknownEscapeSequenceException(String.Format("unknown EL option {0}"' param));              }
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,SequenceKeyData,The following statement contains a magic number: byte[] r = new byte[5];
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,SequenceKeyData,The following statement contains a magic number: n += 10;
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,SequenceKeyData,The following statement contains a magic number: n >= 20
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,SequenceKeyData,The following statement contains a magic number: r[2] = (byte)f[0];
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,SequenceKeyData,The following statement contains a magic number: r[3] = (byte)f[1];
Magic Number,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,SequenceKeyData,The following statement contains a magic number: r[4] = (byte)tail;
Magic Number,Poderosa.Terminal,XmlLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XmlLogger.cs,Write,The following statement contains a magic number: switch (ch) {                      case (char)0:                          WriteSPChar("NUL");                          break;                      case (char)1:                          WriteSPChar("SOH");                          break;                      case (char)2:                          WriteSPChar("STX");                          break;                      case (char)3:                          WriteSPChar("ETX");                          break;                      case (char)4:                          WriteSPChar("EOT");                          break;                      case (char)5:                          WriteSPChar("ENQ");                          break;                      case (char)6:                          WriteSPChar("ACK");                          break;                      case (char)7:                          WriteSPChar("BEL");                          break;                      case (char)8:                          WriteSPChar("BS");                          break;                      case (char)11:                          WriteSPChar("VT");                          break;                      case (char)12:                          WriteSPChar("FF");                          break;                      case (char)14:                          WriteSPChar("SO");                          break;                      case (char)15:                          WriteSPChar("SI");                          break;                      case (char)16:                          WriteSPChar("DLE");                          break;                      case (char)17:                          WriteSPChar("DC1");                          break;                      case (char)18:                          WriteSPChar("DC2");                          break;                      case (char)19:                          WriteSPChar("DC3");                          break;                      case (char)20:                          WriteSPChar("DC4");                          break;                      case (char)21:                          WriteSPChar("NAK");                          break;                      case (char)22:                          WriteSPChar("SYN");                          break;                      case (char)23:                          WriteSPChar("ETB");                          break;                      case (char)24:                          WriteSPChar("CAN");                          break;                      case (char)25:                          WriteSPChar("EM");                          break;                      case (char)26:                          WriteSPChar("SUB");                          break;                      case (char)27:                          WriteSPChar("ESC");                          break;                      case (char)28:                          WriteSPChar("FS");                          break;                      case (char)29:                          WriteSPChar("GS");                          break;                      case (char)30:                          WriteSPChar("RS");                          break;                      case (char)31:                          WriteSPChar("US");                          break;                      default:                          _buffer[0] = ch;                          _writer.WriteChars(_buffer' 0' 1);                          break;                  }
Magic Number,Poderosa.Terminal,XmlLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XmlLogger.cs,Write,The following statement contains a magic number: switch (ch) {                      case (char)0:                          WriteSPChar("NUL");                          break;                      case (char)1:                          WriteSPChar("SOH");                          break;                      case (char)2:                          WriteSPChar("STX");                          break;                      case (char)3:                          WriteSPChar("ETX");                          break;                      case (char)4:                          WriteSPChar("EOT");                          break;                      case (char)5:                          WriteSPChar("ENQ");                          break;                      case (char)6:                          WriteSPChar("ACK");                          break;                      case (char)7:                          WriteSPChar("BEL");                          break;                      case (char)8:                          WriteSPChar("BS");                          break;                      case (char)11:                          WriteSPChar("VT");                          break;                      case (char)12:                          WriteSPChar("FF");                          break;                      case (char)14:                          WriteSPChar("SO");                          break;                      case (char)15:                          WriteSPChar("SI");                          break;                      case (char)16:                          WriteSPChar("DLE");                          break;                      case (char)17:                          WriteSPChar("DC1");                          break;                      case (char)18:                          WriteSPChar("DC2");                          break;                      case (char)19:                          WriteSPChar("DC3");                          break;                      case (char)20:                          WriteSPChar("DC4");                          break;                      case (char)21:                          WriteSPChar("NAK");                          break;                      case (char)22:                          WriteSPChar("SYN");                          break;                      case (char)23:                          WriteSPChar("ETB");                          break;                      case (char)24:                          WriteSPChar("CAN");                          break;                      case (char)25:                          WriteSPChar("EM");                          break;                      case (char)26:                          WriteSPChar("SUB");                          break;                      case (char)27:                          WriteSPChar("ESC");                          break;                      case (char)28:                          WriteSPChar("FS");                          break;                      case (char)29:                          WriteSPChar("GS");                          break;                      case (char)30:                          WriteSPChar("RS");                          break;                      case (char)31:                          WriteSPChar("US");                          break;                      default:                          _buffer[0] = ch;                          _writer.WriteChars(_buffer' 0' 1);                          break;                  }
Magic Number,Poderosa.Terminal,XmlLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XmlLogger.cs,Write,The following statement contains a magic number: switch (ch) {                      case (char)0:                          WriteSPChar("NUL");                          break;                      case (char)1:                          WriteSPChar("SOH");                          break;                      case (char)2:                          WriteSPChar("STX");                          break;                      case (char)3:                          WriteSPChar("ETX");                          break;                      case (char)4:                          WriteSPChar("EOT");                          break;                      case (char)5:                          WriteSPChar("ENQ");                          break;                      case (char)6:                          WriteSPChar("ACK");                          break;                      case (char)7:                          WriteSPChar("BEL");                          break;                      case (char)8:                          WriteSPChar("BS");                          break;                      case (char)11:                          WriteSPChar("VT");                          break;                      case (char)12:                          WriteSPChar("FF");                          break;                      case (char)14:                          WriteSPChar("SO");                          break;                      case (char)15:                          WriteSPChar("SI");                          break;                      case (char)16:                          WriteSPChar("DLE");                          break;                      case (char)17:                          WriteSPChar("DC1");                          break;                      case (char)18:                          WriteSPChar("DC2");                          break;                      case (char)19:                          WriteSPChar("DC3");                          break;                      case (char)20:                          WriteSPChar("DC4");                          break;                      case (char)21:                          WriteSPChar("NAK");                          break;                      case (char)22:                          WriteSPChar("SYN");                          break;                      case (char)23:                          WriteSPChar("ETB");                          break;                      case (char)24:                          WriteSPChar("CAN");                          break;                      case (char)25:                          WriteSPChar("EM");                          break;                      case (char)26:                          WriteSPChar("SUB");                          break;                      case (char)27:                          WriteSPChar("ESC");                          break;                      case (char)28:                          WriteSPChar("FS");                          break;                      case (char)29:                          WriteSPChar("GS");                          break;                      case (char)30:                          WriteSPChar("RS");                          break;                      case (char)31:                          WriteSPChar("US");                          break;                      default:                          _buffer[0] = ch;                          _writer.WriteChars(_buffer' 0' 1);                          break;                  }
Magic Number,Poderosa.Terminal,XmlLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XmlLogger.cs,Write,The following statement contains a magic number: switch (ch) {                      case (char)0:                          WriteSPChar("NUL");                          break;                      case (char)1:                          WriteSPChar("SOH");                          break;                      case (char)2:                          WriteSPChar("STX");                          break;                      case (char)3:                          WriteSPChar("ETX");                          break;                      case (char)4:                          WriteSPChar("EOT");                          break;                      case (char)5:                          WriteSPChar("ENQ");                          break;                      case (char)6:                          WriteSPChar("ACK");                          break;                      case (char)7:                          WriteSPChar("BEL");                          break;                      case (char)8:                          WriteSPChar("BS");                          break;                      case (char)11:                          WriteSPChar("VT");                          break;                      case (char)12:                          WriteSPChar("FF");                          break;                      case (char)14:                          WriteSPChar("SO");                          break;                      case (char)15:                          WriteSPChar("SI");                          break;                      case (char)16:                          WriteSPChar("DLE");                          break;                      case (char)17:                          WriteSPChar("DC1");                          break;                      case (char)18:                          WriteSPChar("DC2");                          break;                      case (char)19:                          WriteSPChar("DC3");                          break;                      case (char)20:                          WriteSPChar("DC4");                          break;                      case (char)21:                          WriteSPChar("NAK");                          break;                      case (char)22:                          WriteSPChar("SYN");                          break;                      case (char)23:                          WriteSPChar("ETB");                          break;                      case (char)24:                          WriteSPChar("CAN");                          break;                      case (char)25:                          WriteSPChar("EM");                          break;                      case (char)26:                          WriteSPChar("SUB");                          break;                      case (char)27:                          WriteSPChar("ESC");                          break;                      case (char)28:                          WriteSPChar("FS");                          break;                      case (char)29:                          WriteSPChar("GS");                          break;                      case (char)30:                          WriteSPChar("RS");                          break;                      case (char)31:                          WriteSPChar("US");                          break;                      default:                          _buffer[0] = ch;                          _writer.WriteChars(_buffer' 0' 1);                          break;                  }
Magic Number,Poderosa.Terminal,XmlLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XmlLogger.cs,Write,The following statement contains a magic number: switch (ch) {                      case (char)0:                          WriteSPChar("NUL");                          break;                      case (char)1:                          WriteSPChar("SOH");                          break;                      case (char)2:                          WriteSPChar("STX");                          break;                      case (char)3:                          WriteSPChar("ETX");                          break;                      case (char)4:                          WriteSPChar("EOT");                          break;                      case (char)5:                          WriteSPChar("ENQ");                          break;                      case (char)6:                          WriteSPChar("ACK");                          break;                      case (char)7:                          WriteSPChar("BEL");                          break;                      case (char)8:                          WriteSPChar("BS");                          break;                      case (char)11:                          WriteSPChar("VT");                          break;                      case (char)12:                          WriteSPChar("FF");                          break;                      case (char)14:                          WriteSPChar("SO");                          break;                      case (char)15:                          WriteSPChar("SI");                          break;                      case (char)16:                          WriteSPChar("DLE");                          break;                      case (char)17:                          WriteSPChar("DC1");                          break;                      case (char)18:                          WriteSPChar("DC2");                          break;                      case (char)19:                          WriteSPChar("DC3");                          break;                      case (char)20:                          WriteSPChar("DC4");                          break;                      case (char)21:                          WriteSPChar("NAK");                          break;                      case (char)22:                          WriteSPChar("SYN");                          break;                      case (char)23:                          WriteSPChar("ETB");                          break;                      case (char)24:                          WriteSPChar("CAN");                          break;                      case (char)25:                          WriteSPChar("EM");                          break;                      case (char)26:                          WriteSPChar("SUB");                          break;                      case (char)27:                          WriteSPChar("ESC");                          break;                      case (char)28:                          WriteSPChar("FS");                          break;                      case (char)29:                          WriteSPChar("GS");                          break;                      case (char)30:                          WriteSPChar("RS");                          break;                      case (char)31:                          WriteSPChar("US");                          break;                      default:                          _buffer[0] = ch;                          _writer.WriteChars(_buffer' 0' 1);                          break;                  }
Magic Number,Poderosa.Terminal,XmlLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XmlLogger.cs,Write,The following statement contains a magic number: switch (ch) {                      case (char)0:                          WriteSPChar("NUL");                          break;                      case (char)1:                          WriteSPChar("SOH");                          break;                      case (char)2:                          WriteSPChar("STX");                          break;                      case (char)3:                          WriteSPChar("ETX");                          break;                      case (char)4:                          WriteSPChar("EOT");                          break;                      case (char)5:                          WriteSPChar("ENQ");                          break;                      case (char)6:                          WriteSPChar("ACK");                          break;                      case (char)7:                          WriteSPChar("BEL");                          break;                      case (char)8:                          WriteSPChar("BS");                          break;                      case (char)11:                          WriteSPChar("VT");                          break;                      case (char)12:                          WriteSPChar("FF");                          break;                      case (char)14:                          WriteSPChar("SO");                          break;                      case (char)15:                          WriteSPChar("SI");                          break;                      case (char)16:                          WriteSPChar("DLE");                          break;                      case (char)17:                          WriteSPChar("DC1");                          break;                      case (char)18:                          WriteSPChar("DC2");                          break;                      case (char)19:                          WriteSPChar("DC3");                          break;                      case (char)20:                          WriteSPChar("DC4");                          break;                      case (char)21:                          WriteSPChar("NAK");                          break;                      case (char)22:                          WriteSPChar("SYN");                          break;                      case (char)23:                          WriteSPChar("ETB");                          break;                      case (char)24:                          WriteSPChar("CAN");                          break;                      case (char)25:                          WriteSPChar("EM");                          break;                      case (char)26:                          WriteSPChar("SUB");                          break;                      case (char)27:                          WriteSPChar("ESC");                          break;                      case (char)28:                          WriteSPChar("FS");                          break;                      case (char)29:                          WriteSPChar("GS");                          break;                      case (char)30:                          WriteSPChar("RS");                          break;                      case (char)31:                          WriteSPChar("US");                          break;                      default:                          _buffer[0] = ch;                          _writer.WriteChars(_buffer' 0' 1);                          break;                  }
Magic Number,Poderosa.Terminal,XmlLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XmlLogger.cs,Write,The following statement contains a magic number: switch (ch) {                      case (char)0:                          WriteSPChar("NUL");                          break;                      case (char)1:                          WriteSPChar("SOH");                          break;                      case (char)2:                          WriteSPChar("STX");                          break;                      case (char)3:                          WriteSPChar("ETX");                          break;                      case (char)4:                          WriteSPChar("EOT");                          break;                      case (char)5:                          WriteSPChar("ENQ");                          break;                      case (char)6:                          WriteSPChar("ACK");                          break;                      case (char)7:                          WriteSPChar("BEL");                          break;                      case (char)8:                          WriteSPChar("BS");                          break;                      case (char)11:                          WriteSPChar("VT");                          break;                      case (char)12:                          WriteSPChar("FF");                          break;                      case (char)14:                          WriteSPChar("SO");                          break;                      case (char)15:                          WriteSPChar("SI");                          break;                      case (char)16:                          WriteSPChar("DLE");                          break;                      case (char)17:                          WriteSPChar("DC1");                          break;                      case (char)18:                          WriteSPChar("DC2");                          break;                      case (char)19:                          WriteSPChar("DC3");                          break;                      case (char)20:                          WriteSPChar("DC4");                          break;                      case (char)21:                          WriteSPChar("NAK");                          break;                      case (char)22:                          WriteSPChar("SYN");                          break;                      case (char)23:                          WriteSPChar("ETB");                          break;                      case (char)24:                          WriteSPChar("CAN");                          break;                      case (char)25:                          WriteSPChar("EM");                          break;                      case (char)26:                          WriteSPChar("SUB");                          break;                      case (char)27:                          WriteSPChar("ESC");                          break;                      case (char)28:                          WriteSPChar("FS");                          break;                      case (char)29:                          WriteSPChar("GS");                          break;                      case (char)30:                          WriteSPChar("RS");                          break;                      case (char)31:                          WriteSPChar("US");                          break;                      default:                          _buffer[0] = ch;                          _writer.WriteChars(_buffer' 0' 1);                          break;                  }
Magic Number,Poderosa.Terminal,XmlLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XmlLogger.cs,Write,The following statement contains a magic number: switch (ch) {                      case (char)0:                          WriteSPChar("NUL");                          break;                      case (char)1:                          WriteSPChar("SOH");                          break;                      case (char)2:                          WriteSPChar("STX");                          break;                      case (char)3:                          WriteSPChar("ETX");                          break;                      case (char)4:                          WriteSPChar("EOT");                          break;                      case (char)5:                          WriteSPChar("ENQ");                          break;                      case (char)6:                          WriteSPChar("ACK");                          break;                      case (char)7:                          WriteSPChar("BEL");                          break;                      case (char)8:                          WriteSPChar("BS");                          break;                      case (char)11:                          WriteSPChar("VT");                          break;                      case (char)12:                          WriteSPChar("FF");                          break;                      case (char)14:                          WriteSPChar("SO");                          break;                      case (char)15:                          WriteSPChar("SI");                          break;                      case (char)16:                          WriteSPChar("DLE");                          break;                      case (char)17:                          WriteSPChar("DC1");                          break;                      case (char)18:                          WriteSPChar("DC2");                          break;                      case (char)19:                          WriteSPChar("DC3");                          break;                      case (char)20:                          WriteSPChar("DC4");                          break;                      case (char)21:                          WriteSPChar("NAK");                          break;                      case (char)22:                          WriteSPChar("SYN");                          break;                      case (char)23:                          WriteSPChar("ETB");                          break;                      case (char)24:                          WriteSPChar("CAN");                          break;                      case (char)25:                          WriteSPChar("EM");                          break;                      case (char)26:                          WriteSPChar("SUB");                          break;                      case (char)27:                          WriteSPChar("ESC");                          break;                      case (char)28:                          WriteSPChar("FS");                          break;                      case (char)29:                          WriteSPChar("GS");                          break;                      case (char)30:                          WriteSPChar("RS");                          break;                      case (char)31:                          WriteSPChar("US");                          break;                      default:                          _buffer[0] = ch;                          _writer.WriteChars(_buffer' 0' 1);                          break;                  }
Magic Number,Poderosa.Terminal,XmlLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XmlLogger.cs,Write,The following statement contains a magic number: switch (ch) {                      case (char)0:                          WriteSPChar("NUL");                          break;                      case (char)1:                          WriteSPChar("SOH");                          break;                      case (char)2:                          WriteSPChar("STX");                          break;                      case (char)3:                          WriteSPChar("ETX");                          break;                      case (char)4:                          WriteSPChar("EOT");                          break;                      case (char)5:                          WriteSPChar("ENQ");                          break;                      case (char)6:                          WriteSPChar("ACK");                          break;                      case (char)7:                          WriteSPChar("BEL");                          break;                      case (char)8:                          WriteSPChar("BS");                          break;                      case (char)11:                          WriteSPChar("VT");                          break;                      case (char)12:                          WriteSPChar("FF");                          break;                      case (char)14:                          WriteSPChar("SO");                          break;                      case (char)15:                          WriteSPChar("SI");                          break;                      case (char)16:                          WriteSPChar("DLE");                          break;                      case (char)17:                          WriteSPChar("DC1");                          break;                      case (char)18:                          WriteSPChar("DC2");                          break;                      case (char)19:                          WriteSPChar("DC3");                          break;                      case (char)20:                          WriteSPChar("DC4");                          break;                      case (char)21:                          WriteSPChar("NAK");                          break;                      case (char)22:                          WriteSPChar("SYN");                          break;                      case (char)23:                          WriteSPChar("ETB");                          break;                      case (char)24:                          WriteSPChar("CAN");                          break;                      case (char)25:                          WriteSPChar("EM");                          break;                      case (char)26:                          WriteSPChar("SUB");                          break;                      case (char)27:                          WriteSPChar("ESC");                          break;                      case (char)28:                          WriteSPChar("FS");                          break;                      case (char)29:                          WriteSPChar("GS");                          break;                      case (char)30:                          WriteSPChar("RS");                          break;                      case (char)31:                          WriteSPChar("US");                          break;                      default:                          _buffer[0] = ch;                          _writer.WriteChars(_buffer' 0' 1);                          break;                  }
Magic Number,Poderosa.Terminal,XmlLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XmlLogger.cs,Write,The following statement contains a magic number: switch (ch) {                      case (char)0:                          WriteSPChar("NUL");                          break;                      case (char)1:                          WriteSPChar("SOH");                          break;                      case (char)2:                          WriteSPChar("STX");                          break;                      case (char)3:                          WriteSPChar("ETX");                          break;                      case (char)4:                          WriteSPChar("EOT");                          break;                      case (char)5:                          WriteSPChar("ENQ");                          break;                      case (char)6:                          WriteSPChar("ACK");                          break;                      case (char)7:                          WriteSPChar("BEL");                          break;                      case (char)8:                          WriteSPChar("BS");                          break;                      case (char)11:                          WriteSPChar("VT");                          break;                      case (char)12:                          WriteSPChar("FF");                          break;                      case (char)14:                          WriteSPChar("SO");                          break;                      case (char)15:                          WriteSPChar("SI");                          break;                      case (char)16:                          WriteSPChar("DLE");                          break;                      case (char)17:                          WriteSPChar("DC1");                          break;                      case (char)18:                          WriteSPChar("DC2");                          break;                      case (char)19:                          WriteSPChar("DC3");                          break;                      case (char)20:                          WriteSPChar("DC4");                          break;                      case (char)21:                          WriteSPChar("NAK");                          break;                      case (char)22:                          WriteSPChar("SYN");                          break;                      case (char)23:                          WriteSPChar("ETB");                          break;                      case (char)24:                          WriteSPChar("CAN");                          break;                      case (char)25:                          WriteSPChar("EM");                          break;                      case (char)26:                          WriteSPChar("SUB");                          break;                      case (char)27:                          WriteSPChar("ESC");                          break;                      case (char)28:                          WriteSPChar("FS");                          break;                      case (char)29:                          WriteSPChar("GS");                          break;                      case (char)30:                          WriteSPChar("RS");                          break;                      case (char)31:                          WriteSPChar("US");                          break;                      default:                          _buffer[0] = ch;                          _writer.WriteChars(_buffer' 0' 1);                          break;                  }
Magic Number,Poderosa.Terminal,XmlLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XmlLogger.cs,Write,The following statement contains a magic number: switch (ch) {                      case (char)0:                          WriteSPChar("NUL");                          break;                      case (char)1:                          WriteSPChar("SOH");                          break;                      case (char)2:                          WriteSPChar("STX");                          break;                      case (char)3:                          WriteSPChar("ETX");                          break;                      case (char)4:                          WriteSPChar("EOT");                          break;                      case (char)5:                          WriteSPChar("ENQ");                          break;                      case (char)6:                          WriteSPChar("ACK");                          break;                      case (char)7:                          WriteSPChar("BEL");                          break;                      case (char)8:                          WriteSPChar("BS");                          break;                      case (char)11:                          WriteSPChar("VT");                          break;                      case (char)12:                          WriteSPChar("FF");                          break;                      case (char)14:                          WriteSPChar("SO");                          break;                      case (char)15:                          WriteSPChar("SI");                          break;                      case (char)16:                          WriteSPChar("DLE");                          break;                      case (char)17:                          WriteSPChar("DC1");                          break;                      case (char)18:                          WriteSPChar("DC2");                          break;                      case (char)19:                          WriteSPChar("DC3");                          break;                      case (char)20:                          WriteSPChar("DC4");                          break;                      case (char)21:                          WriteSPChar("NAK");                          break;                      case (char)22:                          WriteSPChar("SYN");                          break;                      case (char)23:                          WriteSPChar("ETB");                          break;                      case (char)24:                          WriteSPChar("CAN");                          break;                      case (char)25:                          WriteSPChar("EM");                          break;                      case (char)26:                          WriteSPChar("SUB");                          break;                      case (char)27:                          WriteSPChar("ESC");                          break;                      case (char)28:                          WriteSPChar("FS");                          break;                      case (char)29:                          WriteSPChar("GS");                          break;                      case (char)30:                          WriteSPChar("RS");                          break;                      case (char)31:                          WriteSPChar("US");                          break;                      default:                          _buffer[0] = ch;                          _writer.WriteChars(_buffer' 0' 1);                          break;                  }
Magic Number,Poderosa.Terminal,XmlLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XmlLogger.cs,Write,The following statement contains a magic number: switch (ch) {                      case (char)0:                          WriteSPChar("NUL");                          break;                      case (char)1:                          WriteSPChar("SOH");                          break;                      case (char)2:                          WriteSPChar("STX");                          break;                      case (char)3:                          WriteSPChar("ETX");                          break;                      case (char)4:                          WriteSPChar("EOT");                          break;                      case (char)5:                          WriteSPChar("ENQ");                          break;                      case (char)6:                          WriteSPChar("ACK");                          break;                      case (char)7:                          WriteSPChar("BEL");                          break;                      case (char)8:                          WriteSPChar("BS");                          break;                      case (char)11:                          WriteSPChar("VT");                          break;                      case (char)12:                          WriteSPChar("FF");                          break;                      case (char)14:                          WriteSPChar("SO");                          break;                      case (char)15:                          WriteSPChar("SI");                          break;                      case (char)16:                          WriteSPChar("DLE");                          break;                      case (char)17:                          WriteSPChar("DC1");                          break;                      case (char)18:                          WriteSPChar("DC2");                          break;                      case (char)19:                          WriteSPChar("DC3");                          break;                      case (char)20:                          WriteSPChar("DC4");                          break;                      case (char)21:                          WriteSPChar("NAK");                          break;                      case (char)22:                          WriteSPChar("SYN");                          break;                      case (char)23:                          WriteSPChar("ETB");                          break;                      case (char)24:                          WriteSPChar("CAN");                          break;                      case (char)25:                          WriteSPChar("EM");                          break;                      case (char)26:                          WriteSPChar("SUB");                          break;                      case (char)27:                          WriteSPChar("ESC");                          break;                      case (char)28:                          WriteSPChar("FS");                          break;                      case (char)29:                          WriteSPChar("GS");                          break;                      case (char)30:                          WriteSPChar("RS");                          break;                      case (char)31:                          WriteSPChar("US");                          break;                      default:                          _buffer[0] = ch;                          _writer.WriteChars(_buffer' 0' 1);                          break;                  }
Magic Number,Poderosa.Terminal,XmlLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XmlLogger.cs,Write,The following statement contains a magic number: switch (ch) {                      case (char)0:                          WriteSPChar("NUL");                          break;                      case (char)1:                          WriteSPChar("SOH");                          break;                      case (char)2:                          WriteSPChar("STX");                          break;                      case (char)3:                          WriteSPChar("ETX");                          break;                      case (char)4:                          WriteSPChar("EOT");                          break;                      case (char)5:                          WriteSPChar("ENQ");                          break;                      case (char)6:                          WriteSPChar("ACK");                          break;                      case (char)7:                          WriteSPChar("BEL");                          break;                      case (char)8:                          WriteSPChar("BS");                          break;                      case (char)11:                          WriteSPChar("VT");                          break;                      case (char)12:                          WriteSPChar("FF");                          break;                      case (char)14:                          WriteSPChar("SO");                          break;                      case (char)15:                          WriteSPChar("SI");                          break;                      case (char)16:                          WriteSPChar("DLE");                          break;                      case (char)17:                          WriteSPChar("DC1");                          break;                      case (char)18:                          WriteSPChar("DC2");                          break;                      case (char)19:                          WriteSPChar("DC3");                          break;                      case (char)20:                          WriteSPChar("DC4");                          break;                      case (char)21:                          WriteSPChar("NAK");                          break;                      case (char)22:                          WriteSPChar("SYN");                          break;                      case (char)23:                          WriteSPChar("ETB");                          break;                      case (char)24:                          WriteSPChar("CAN");                          break;                      case (char)25:                          WriteSPChar("EM");                          break;                      case (char)26:                          WriteSPChar("SUB");                          break;                      case (char)27:                          WriteSPChar("ESC");                          break;                      case (char)28:                          WriteSPChar("FS");                          break;                      case (char)29:                          WriteSPChar("GS");                          break;                      case (char)30:                          WriteSPChar("RS");                          break;                      case (char)31:                          WriteSPChar("US");                          break;                      default:                          _buffer[0] = ch;                          _writer.WriteChars(_buffer' 0' 1);                          break;                  }
Magic Number,Poderosa.Terminal,XmlLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XmlLogger.cs,Write,The following statement contains a magic number: switch (ch) {                      case (char)0:                          WriteSPChar("NUL");                          break;                      case (char)1:                          WriteSPChar("SOH");                          break;                      case (char)2:                          WriteSPChar("STX");                          break;                      case (char)3:                          WriteSPChar("ETX");                          break;                      case (char)4:                          WriteSPChar("EOT");                          break;                      case (char)5:                          WriteSPChar("ENQ");                          break;                      case (char)6:                          WriteSPChar("ACK");                          break;                      case (char)7:                          WriteSPChar("BEL");                          break;                      case (char)8:                          WriteSPChar("BS");                          break;                      case (char)11:                          WriteSPChar("VT");                          break;                      case (char)12:                          WriteSPChar("FF");                          break;                      case (char)14:                          WriteSPChar("SO");                          break;                      case (char)15:                          WriteSPChar("SI");                          break;                      case (char)16:                          WriteSPChar("DLE");                          break;                      case (char)17:                          WriteSPChar("DC1");                          break;                      case (char)18:                          WriteSPChar("DC2");                          break;                      case (char)19:                          WriteSPChar("DC3");                          break;                      case (char)20:                          WriteSPChar("DC4");                          break;                      case (char)21:                          WriteSPChar("NAK");                          break;                      case (char)22:                          WriteSPChar("SYN");                          break;                      case (char)23:                          WriteSPChar("ETB");                          break;                      case (char)24:                          WriteSPChar("CAN");                          break;                      case (char)25:                          WriteSPChar("EM");                          break;                      case (char)26:                          WriteSPChar("SUB");                          break;                      case (char)27:                          WriteSPChar("ESC");                          break;                      case (char)28:                          WriteSPChar("FS");                          break;                      case (char)29:                          WriteSPChar("GS");                          break;                      case (char)30:                          WriteSPChar("RS");                          break;                      case (char)31:                          WriteSPChar("US");                          break;                      default:                          _buffer[0] = ch;                          _writer.WriteChars(_buffer' 0' 1);                          break;                  }
Magic Number,Poderosa.Terminal,XmlLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XmlLogger.cs,Write,The following statement contains a magic number: switch (ch) {                      case (char)0:                          WriteSPChar("NUL");                          break;                      case (char)1:                          WriteSPChar("SOH");                          break;                      case (char)2:                          WriteSPChar("STX");                          break;                      case (char)3:                          WriteSPChar("ETX");                          break;                      case (char)4:                          WriteSPChar("EOT");                          break;                      case (char)5:                          WriteSPChar("ENQ");                          break;                      case (char)6:                          WriteSPChar("ACK");                          break;                      case (char)7:                          WriteSPChar("BEL");                          break;                      case (char)8:                          WriteSPChar("BS");                          break;                      case (char)11:                          WriteSPChar("VT");                          break;                      case (char)12:                          WriteSPChar("FF");                          break;                      case (char)14:                          WriteSPChar("SO");                          break;                      case (char)15:                          WriteSPChar("SI");                          break;                      case (char)16:                          WriteSPChar("DLE");                          break;                      case (char)17:                          WriteSPChar("DC1");                          break;                      case (char)18:                          WriteSPChar("DC2");                          break;                      case (char)19:                          WriteSPChar("DC3");                          break;                      case (char)20:                          WriteSPChar("DC4");                          break;                      case (char)21:                          WriteSPChar("NAK");                          break;                      case (char)22:                          WriteSPChar("SYN");                          break;                      case (char)23:                          WriteSPChar("ETB");                          break;                      case (char)24:                          WriteSPChar("CAN");                          break;                      case (char)25:                          WriteSPChar("EM");                          break;                      case (char)26:                          WriteSPChar("SUB");                          break;                      case (char)27:                          WriteSPChar("ESC");                          break;                      case (char)28:                          WriteSPChar("FS");                          break;                      case (char)29:                          WriteSPChar("GS");                          break;                      case (char)30:                          WriteSPChar("RS");                          break;                      case (char)31:                          WriteSPChar("US");                          break;                      default:                          _buffer[0] = ch;                          _writer.WriteChars(_buffer' 0' 1);                          break;                  }
Magic Number,Poderosa.Terminal,XmlLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XmlLogger.cs,Write,The following statement contains a magic number: switch (ch) {                      case (char)0:                          WriteSPChar("NUL");                          break;                      case (char)1:                          WriteSPChar("SOH");                          break;                      case (char)2:                          WriteSPChar("STX");                          break;                      case (char)3:                          WriteSPChar("ETX");                          break;                      case (char)4:                          WriteSPChar("EOT");                          break;                      case (char)5:                          WriteSPChar("ENQ");                          break;                      case (char)6:                          WriteSPChar("ACK");                          break;                      case (char)7:                          WriteSPChar("BEL");                          break;                      case (char)8:                          WriteSPChar("BS");                          break;                      case (char)11:                          WriteSPChar("VT");                          break;                      case (char)12:                          WriteSPChar("FF");                          break;                      case (char)14:                          WriteSPChar("SO");                          break;                      case (char)15:                          WriteSPChar("SI");                          break;                      case (char)16:                          WriteSPChar("DLE");                          break;                      case (char)17:                          WriteSPChar("DC1");                          break;                      case (char)18:                          WriteSPChar("DC2");                          break;                      case (char)19:                          WriteSPChar("DC3");                          break;                      case (char)20:                          WriteSPChar("DC4");                          break;                      case (char)21:                          WriteSPChar("NAK");                          break;                      case (char)22:                          WriteSPChar("SYN");                          break;                      case (char)23:                          WriteSPChar("ETB");                          break;                      case (char)24:                          WriteSPChar("CAN");                          break;                      case (char)25:                          WriteSPChar("EM");                          break;                      case (char)26:                          WriteSPChar("SUB");                          break;                      case (char)27:                          WriteSPChar("ESC");                          break;                      case (char)28:                          WriteSPChar("FS");                          break;                      case (char)29:                          WriteSPChar("GS");                          break;                      case (char)30:                          WriteSPChar("RS");                          break;                      case (char)31:                          WriteSPChar("US");                          break;                      default:                          _buffer[0] = ch;                          _writer.WriteChars(_buffer' 0' 1);                          break;                  }
Magic Number,Poderosa.Terminal,XmlLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XmlLogger.cs,Write,The following statement contains a magic number: switch (ch) {                      case (char)0:                          WriteSPChar("NUL");                          break;                      case (char)1:                          WriteSPChar("SOH");                          break;                      case (char)2:                          WriteSPChar("STX");                          break;                      case (char)3:                          WriteSPChar("ETX");                          break;                      case (char)4:                          WriteSPChar("EOT");                          break;                      case (char)5:                          WriteSPChar("ENQ");                          break;                      case (char)6:                          WriteSPChar("ACK");                          break;                      case (char)7:                          WriteSPChar("BEL");                          break;                      case (char)8:                          WriteSPChar("BS");                          break;                      case (char)11:                          WriteSPChar("VT");                          break;                      case (char)12:                          WriteSPChar("FF");                          break;                      case (char)14:                          WriteSPChar("SO");                          break;                      case (char)15:                          WriteSPChar("SI");                          break;                      case (char)16:                          WriteSPChar("DLE");                          break;                      case (char)17:                          WriteSPChar("DC1");                          break;                      case (char)18:                          WriteSPChar("DC2");                          break;                      case (char)19:                          WriteSPChar("DC3");                          break;                      case (char)20:                          WriteSPChar("DC4");                          break;                      case (char)21:                          WriteSPChar("NAK");                          break;                      case (char)22:                          WriteSPChar("SYN");                          break;                      case (char)23:                          WriteSPChar("ETB");                          break;                      case (char)24:                          WriteSPChar("CAN");                          break;                      case (char)25:                          WriteSPChar("EM");                          break;                      case (char)26:                          WriteSPChar("SUB");                          break;                      case (char)27:                          WriteSPChar("ESC");                          break;                      case (char)28:                          WriteSPChar("FS");                          break;                      case (char)29:                          WriteSPChar("GS");                          break;                      case (char)30:                          WriteSPChar("RS");                          break;                      case (char)31:                          WriteSPChar("US");                          break;                      default:                          _buffer[0] = ch;                          _writer.WriteChars(_buffer' 0' 1);                          break;                  }
Magic Number,Poderosa.Terminal,XmlLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XmlLogger.cs,Write,The following statement contains a magic number: switch (ch) {                      case (char)0:                          WriteSPChar("NUL");                          break;                      case (char)1:                          WriteSPChar("SOH");                          break;                      case (char)2:                          WriteSPChar("STX");                          break;                      case (char)3:                          WriteSPChar("ETX");                          break;                      case (char)4:                          WriteSPChar("EOT");                          break;                      case (char)5:                          WriteSPChar("ENQ");                          break;                      case (char)6:                          WriteSPChar("ACK");                          break;                      case (char)7:                          WriteSPChar("BEL");                          break;                      case (char)8:                          WriteSPChar("BS");                          break;                      case (char)11:                          WriteSPChar("VT");                          break;                      case (char)12:                          WriteSPChar("FF");                          break;                      case (char)14:                          WriteSPChar("SO");                          break;                      case (char)15:                          WriteSPChar("SI");                          break;                      case (char)16:                          WriteSPChar("DLE");                          break;                      case (char)17:                          WriteSPChar("DC1");                          break;                      case (char)18:                          WriteSPChar("DC2");                          break;                      case (char)19:                          WriteSPChar("DC3");                          break;                      case (char)20:                          WriteSPChar("DC4");                          break;                      case (char)21:                          WriteSPChar("NAK");                          break;                      case (char)22:                          WriteSPChar("SYN");                          break;                      case (char)23:                          WriteSPChar("ETB");                          break;                      case (char)24:                          WriteSPChar("CAN");                          break;                      case (char)25:                          WriteSPChar("EM");                          break;                      case (char)26:                          WriteSPChar("SUB");                          break;                      case (char)27:                          WriteSPChar("ESC");                          break;                      case (char)28:                          WriteSPChar("FS");                          break;                      case (char)29:                          WriteSPChar("GS");                          break;                      case (char)30:                          WriteSPChar("RS");                          break;                      case (char)31:                          WriteSPChar("US");                          break;                      default:                          _buffer[0] = ch;                          _writer.WriteChars(_buffer' 0' 1);                          break;                  }
Magic Number,Poderosa.Terminal,XmlLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XmlLogger.cs,Write,The following statement contains a magic number: switch (ch) {                      case (char)0:                          WriteSPChar("NUL");                          break;                      case (char)1:                          WriteSPChar("SOH");                          break;                      case (char)2:                          WriteSPChar("STX");                          break;                      case (char)3:                          WriteSPChar("ETX");                          break;                      case (char)4:                          WriteSPChar("EOT");                          break;                      case (char)5:                          WriteSPChar("ENQ");                          break;                      case (char)6:                          WriteSPChar("ACK");                          break;                      case (char)7:                          WriteSPChar("BEL");                          break;                      case (char)8:                          WriteSPChar("BS");                          break;                      case (char)11:                          WriteSPChar("VT");                          break;                      case (char)12:                          WriteSPChar("FF");                          break;                      case (char)14:                          WriteSPChar("SO");                          break;                      case (char)15:                          WriteSPChar("SI");                          break;                      case (char)16:                          WriteSPChar("DLE");                          break;                      case (char)17:                          WriteSPChar("DC1");                          break;                      case (char)18:                          WriteSPChar("DC2");                          break;                      case (char)19:                          WriteSPChar("DC3");                          break;                      case (char)20:                          WriteSPChar("DC4");                          break;                      case (char)21:                          WriteSPChar("NAK");                          break;                      case (char)22:                          WriteSPChar("SYN");                          break;                      case (char)23:                          WriteSPChar("ETB");                          break;                      case (char)24:                          WriteSPChar("CAN");                          break;                      case (char)25:                          WriteSPChar("EM");                          break;                      case (char)26:                          WriteSPChar("SUB");                          break;                      case (char)27:                          WriteSPChar("ESC");                          break;                      case (char)28:                          WriteSPChar("FS");                          break;                      case (char)29:                          WriteSPChar("GS");                          break;                      case (char)30:                          WriteSPChar("RS");                          break;                      case (char)31:                          WriteSPChar("US");                          break;                      default:                          _buffer[0] = ch;                          _writer.WriteChars(_buffer' 0' 1);                          break;                  }
Magic Number,Poderosa.Terminal,XmlLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XmlLogger.cs,Write,The following statement contains a magic number: switch (ch) {                      case (char)0:                          WriteSPChar("NUL");                          break;                      case (char)1:                          WriteSPChar("SOH");                          break;                      case (char)2:                          WriteSPChar("STX");                          break;                      case (char)3:                          WriteSPChar("ETX");                          break;                      case (char)4:                          WriteSPChar("EOT");                          break;                      case (char)5:                          WriteSPChar("ENQ");                          break;                      case (char)6:                          WriteSPChar("ACK");                          break;                      case (char)7:                          WriteSPChar("BEL");                          break;                      case (char)8:                          WriteSPChar("BS");                          break;                      case (char)11:                          WriteSPChar("VT");                          break;                      case (char)12:                          WriteSPChar("FF");                          break;                      case (char)14:                          WriteSPChar("SO");                          break;                      case (char)15:                          WriteSPChar("SI");                          break;                      case (char)16:                          WriteSPChar("DLE");                          break;                      case (char)17:                          WriteSPChar("DC1");                          break;                      case (char)18:                          WriteSPChar("DC2");                          break;                      case (char)19:                          WriteSPChar("DC3");                          break;                      case (char)20:                          WriteSPChar("DC4");                          break;                      case (char)21:                          WriteSPChar("NAK");                          break;                      case (char)22:                          WriteSPChar("SYN");                          break;                      case (char)23:                          WriteSPChar("ETB");                          break;                      case (char)24:                          WriteSPChar("CAN");                          break;                      case (char)25:                          WriteSPChar("EM");                          break;                      case (char)26:                          WriteSPChar("SUB");                          break;                      case (char)27:                          WriteSPChar("ESC");                          break;                      case (char)28:                          WriteSPChar("FS");                          break;                      case (char)29:                          WriteSPChar("GS");                          break;                      case (char)30:                          WriteSPChar("RS");                          break;                      case (char)31:                          WriteSPChar("US");                          break;                      default:                          _buffer[0] = ch;                          _writer.WriteChars(_buffer' 0' 1);                          break;                  }
Magic Number,Poderosa.Terminal,XmlLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XmlLogger.cs,Write,The following statement contains a magic number: switch (ch) {                      case (char)0:                          WriteSPChar("NUL");                          break;                      case (char)1:                          WriteSPChar("SOH");                          break;                      case (char)2:                          WriteSPChar("STX");                          break;                      case (char)3:                          WriteSPChar("ETX");                          break;                      case (char)4:                          WriteSPChar("EOT");                          break;                      case (char)5:                          WriteSPChar("ENQ");                          break;                      case (char)6:                          WriteSPChar("ACK");                          break;                      case (char)7:                          WriteSPChar("BEL");                          break;                      case (char)8:                          WriteSPChar("BS");                          break;                      case (char)11:                          WriteSPChar("VT");                          break;                      case (char)12:                          WriteSPChar("FF");                          break;                      case (char)14:                          WriteSPChar("SO");                          break;                      case (char)15:                          WriteSPChar("SI");                          break;                      case (char)16:                          WriteSPChar("DLE");                          break;                      case (char)17:                          WriteSPChar("DC1");                          break;                      case (char)18:                          WriteSPChar("DC2");                          break;                      case (char)19:                          WriteSPChar("DC3");                          break;                      case (char)20:                          WriteSPChar("DC4");                          break;                      case (char)21:                          WriteSPChar("NAK");                          break;                      case (char)22:                          WriteSPChar("SYN");                          break;                      case (char)23:                          WriteSPChar("ETB");                          break;                      case (char)24:                          WriteSPChar("CAN");                          break;                      case (char)25:                          WriteSPChar("EM");                          break;                      case (char)26:                          WriteSPChar("SUB");                          break;                      case (char)27:                          WriteSPChar("ESC");                          break;                      case (char)28:                          WriteSPChar("FS");                          break;                      case (char)29:                          WriteSPChar("GS");                          break;                      case (char)30:                          WriteSPChar("RS");                          break;                      case (char)31:                          WriteSPChar("US");                          break;                      default:                          _buffer[0] = ch;                          _writer.WriteChars(_buffer' 0' 1);                          break;                  }
Magic Number,Poderosa.Terminal,XmlLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XmlLogger.cs,Write,The following statement contains a magic number: switch (ch) {                      case (char)0:                          WriteSPChar("NUL");                          break;                      case (char)1:                          WriteSPChar("SOH");                          break;                      case (char)2:                          WriteSPChar("STX");                          break;                      case (char)3:                          WriteSPChar("ETX");                          break;                      case (char)4:                          WriteSPChar("EOT");                          break;                      case (char)5:                          WriteSPChar("ENQ");                          break;                      case (char)6:                          WriteSPChar("ACK");                          break;                      case (char)7:                          WriteSPChar("BEL");                          break;                      case (char)8:                          WriteSPChar("BS");                          break;                      case (char)11:                          WriteSPChar("VT");                          break;                      case (char)12:                          WriteSPChar("FF");                          break;                      case (char)14:                          WriteSPChar("SO");                          break;                      case (char)15:                          WriteSPChar("SI");                          break;                      case (char)16:                          WriteSPChar("DLE");                          break;                      case (char)17:                          WriteSPChar("DC1");                          break;                      case (char)18:                          WriteSPChar("DC2");                          break;                      case (char)19:                          WriteSPChar("DC3");                          break;                      case (char)20:                          WriteSPChar("DC4");                          break;                      case (char)21:                          WriteSPChar("NAK");                          break;                      case (char)22:                          WriteSPChar("SYN");                          break;                      case (char)23:                          WriteSPChar("ETB");                          break;                      case (char)24:                          WriteSPChar("CAN");                          break;                      case (char)25:                          WriteSPChar("EM");                          break;                      case (char)26:                          WriteSPChar("SUB");                          break;                      case (char)27:                          WriteSPChar("ESC");                          break;                      case (char)28:                          WriteSPChar("FS");                          break;                      case (char)29:                          WriteSPChar("GS");                          break;                      case (char)30:                          WriteSPChar("RS");                          break;                      case (char)31:                          WriteSPChar("US");                          break;                      default:                          _buffer[0] = ch;                          _writer.WriteChars(_buffer' 0' 1);                          break;                  }
Magic Number,Poderosa.Terminal,XmlLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XmlLogger.cs,Write,The following statement contains a magic number: switch (ch) {                      case (char)0:                          WriteSPChar("NUL");                          break;                      case (char)1:                          WriteSPChar("SOH");                          break;                      case (char)2:                          WriteSPChar("STX");                          break;                      case (char)3:                          WriteSPChar("ETX");                          break;                      case (char)4:                          WriteSPChar("EOT");                          break;                      case (char)5:                          WriteSPChar("ENQ");                          break;                      case (char)6:                          WriteSPChar("ACK");                          break;                      case (char)7:                          WriteSPChar("BEL");                          break;                      case (char)8:                          WriteSPChar("BS");                          break;                      case (char)11:                          WriteSPChar("VT");                          break;                      case (char)12:                          WriteSPChar("FF");                          break;                      case (char)14:                          WriteSPChar("SO");                          break;                      case (char)15:                          WriteSPChar("SI");                          break;                      case (char)16:                          WriteSPChar("DLE");                          break;                      case (char)17:                          WriteSPChar("DC1");                          break;                      case (char)18:                          WriteSPChar("DC2");                          break;                      case (char)19:                          WriteSPChar("DC3");                          break;                      case (char)20:                          WriteSPChar("DC4");                          break;                      case (char)21:                          WriteSPChar("NAK");                          break;                      case (char)22:                          WriteSPChar("SYN");                          break;                      case (char)23:                          WriteSPChar("ETB");                          break;                      case (char)24:                          WriteSPChar("CAN");                          break;                      case (char)25:                          WriteSPChar("EM");                          break;                      case (char)26:                          WriteSPChar("SUB");                          break;                      case (char)27:                          WriteSPChar("ESC");                          break;                      case (char)28:                          WriteSPChar("FS");                          break;                      case (char)29:                          WriteSPChar("GS");                          break;                      case (char)30:                          WriteSPChar("RS");                          break;                      case (char)31:                          WriteSPChar("US");                          break;                      default:                          _buffer[0] = ch;                          _writer.WriteChars(_buffer' 0' 1);                          break;                  }
Magic Number,Poderosa.Terminal,XmlLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XmlLogger.cs,Write,The following statement contains a magic number: switch (ch) {                      case (char)0:                          WriteSPChar("NUL");                          break;                      case (char)1:                          WriteSPChar("SOH");                          break;                      case (char)2:                          WriteSPChar("STX");                          break;                      case (char)3:                          WriteSPChar("ETX");                          break;                      case (char)4:                          WriteSPChar("EOT");                          break;                      case (char)5:                          WriteSPChar("ENQ");                          break;                      case (char)6:                          WriteSPChar("ACK");                          break;                      case (char)7:                          WriteSPChar("BEL");                          break;                      case (char)8:                          WriteSPChar("BS");                          break;                      case (char)11:                          WriteSPChar("VT");                          break;                      case (char)12:                          WriteSPChar("FF");                          break;                      case (char)14:                          WriteSPChar("SO");                          break;                      case (char)15:                          WriteSPChar("SI");                          break;                      case (char)16:                          WriteSPChar("DLE");                          break;                      case (char)17:                          WriteSPChar("DC1");                          break;                      case (char)18:                          WriteSPChar("DC2");                          break;                      case (char)19:                          WriteSPChar("DC3");                          break;                      case (char)20:                          WriteSPChar("DC4");                          break;                      case (char)21:                          WriteSPChar("NAK");                          break;                      case (char)22:                          WriteSPChar("SYN");                          break;                      case (char)23:                          WriteSPChar("ETB");                          break;                      case (char)24:                          WriteSPChar("CAN");                          break;                      case (char)25:                          WriteSPChar("EM");                          break;                      case (char)26:                          WriteSPChar("SUB");                          break;                      case (char)27:                          WriteSPChar("ESC");                          break;                      case (char)28:                          WriteSPChar("FS");                          break;                      case (char)29:                          WriteSPChar("GS");                          break;                      case (char)30:                          WriteSPChar("RS");                          break;                      case (char)31:                          WriteSPChar("US");                          break;                      default:                          _buffer[0] = ch;                          _writer.WriteChars(_buffer' 0' 1);                          break;                  }
Magic Number,Poderosa.Terminal,XmlLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XmlLogger.cs,Write,The following statement contains a magic number: switch (ch) {                      case (char)0:                          WriteSPChar("NUL");                          break;                      case (char)1:                          WriteSPChar("SOH");                          break;                      case (char)2:                          WriteSPChar("STX");                          break;                      case (char)3:                          WriteSPChar("ETX");                          break;                      case (char)4:                          WriteSPChar("EOT");                          break;                      case (char)5:                          WriteSPChar("ENQ");                          break;                      case (char)6:                          WriteSPChar("ACK");                          break;                      case (char)7:                          WriteSPChar("BEL");                          break;                      case (char)8:                          WriteSPChar("BS");                          break;                      case (char)11:                          WriteSPChar("VT");                          break;                      case (char)12:                          WriteSPChar("FF");                          break;                      case (char)14:                          WriteSPChar("SO");                          break;                      case (char)15:                          WriteSPChar("SI");                          break;                      case (char)16:                          WriteSPChar("DLE");                          break;                      case (char)17:                          WriteSPChar("DC1");                          break;                      case (char)18:                          WriteSPChar("DC2");                          break;                      case (char)19:                          WriteSPChar("DC3");                          break;                      case (char)20:                          WriteSPChar("DC4");                          break;                      case (char)21:                          WriteSPChar("NAK");                          break;                      case (char)22:                          WriteSPChar("SYN");                          break;                      case (char)23:                          WriteSPChar("ETB");                          break;                      case (char)24:                          WriteSPChar("CAN");                          break;                      case (char)25:                          WriteSPChar("EM");                          break;                      case (char)26:                          WriteSPChar("SUB");                          break;                      case (char)27:                          WriteSPChar("ESC");                          break;                      case (char)28:                          WriteSPChar("FS");                          break;                      case (char)29:                          WriteSPChar("GS");                          break;                      case (char)30:                          WriteSPChar("RS");                          break;                      case (char)31:                          WriteSPChar("US");                          break;                      default:                          _buffer[0] = ch;                          _writer.WriteChars(_buffer' 0' 1);                          break;                  }
Magic Number,Poderosa.Terminal,XmlLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XmlLogger.cs,Write,The following statement contains a magic number: switch (ch) {                      case (char)0:                          WriteSPChar("NUL");                          break;                      case (char)1:                          WriteSPChar("SOH");                          break;                      case (char)2:                          WriteSPChar("STX");                          break;                      case (char)3:                          WriteSPChar("ETX");                          break;                      case (char)4:                          WriteSPChar("EOT");                          break;                      case (char)5:                          WriteSPChar("ENQ");                          break;                      case (char)6:                          WriteSPChar("ACK");                          break;                      case (char)7:                          WriteSPChar("BEL");                          break;                      case (char)8:                          WriteSPChar("BS");                          break;                      case (char)11:                          WriteSPChar("VT");                          break;                      case (char)12:                          WriteSPChar("FF");                          break;                      case (char)14:                          WriteSPChar("SO");                          break;                      case (char)15:                          WriteSPChar("SI");                          break;                      case (char)16:                          WriteSPChar("DLE");                          break;                      case (char)17:                          WriteSPChar("DC1");                          break;                      case (char)18:                          WriteSPChar("DC2");                          break;                      case (char)19:                          WriteSPChar("DC3");                          break;                      case (char)20:                          WriteSPChar("DC4");                          break;                      case (char)21:                          WriteSPChar("NAK");                          break;                      case (char)22:                          WriteSPChar("SYN");                          break;                      case (char)23:                          WriteSPChar("ETB");                          break;                      case (char)24:                          WriteSPChar("CAN");                          break;                      case (char)25:                          WriteSPChar("EM");                          break;                      case (char)26:                          WriteSPChar("SUB");                          break;                      case (char)27:                          WriteSPChar("ESC");                          break;                      case (char)28:                          WriteSPChar("FS");                          break;                      case (char)29:                          WriteSPChar("GS");                          break;                      case (char)30:                          WriteSPChar("RS");                          break;                      case (char)31:                          WriteSPChar("US");                          break;                      default:                          _buffer[0] = ch;                          _writer.WriteChars(_buffer' 0' 1);                          break;                  }
Magic Number,Poderosa.Terminal,XmlLogger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XmlLogger.cs,Write,The following statement contains a magic number: switch (ch) {                      case (char)0:                          WriteSPChar("NUL");                          break;                      case (char)1:                          WriteSPChar("SOH");                          break;                      case (char)2:                          WriteSPChar("STX");                          break;                      case (char)3:                          WriteSPChar("ETX");                          break;                      case (char)4:                          WriteSPChar("EOT");                          break;                      case (char)5:                          WriteSPChar("ENQ");                          break;                      case (char)6:                          WriteSPChar("ACK");                          break;                      case (char)7:                          WriteSPChar("BEL");                          break;                      case (char)8:                          WriteSPChar("BS");                          break;                      case (char)11:                          WriteSPChar("VT");                          break;                      case (char)12:                          WriteSPChar("FF");                          break;                      case (char)14:                          WriteSPChar("SO");                          break;                      case (char)15:                          WriteSPChar("SI");                          break;                      case (char)16:                          WriteSPChar("DLE");                          break;                      case (char)17:                          WriteSPChar("DC1");                          break;                      case (char)18:                          WriteSPChar("DC2");                          break;                      case (char)19:                          WriteSPChar("DC3");                          break;                      case (char)20:                          WriteSPChar("DC4");                          break;                      case (char)21:                          WriteSPChar("NAK");                          break;                      case (char)22:                          WriteSPChar("SYN");                          break;                      case (char)23:                          WriteSPChar("ETB");                          break;                      case (char)24:                          WriteSPChar("CAN");                          break;                      case (char)25:                          WriteSPChar("EM");                          break;                      case (char)26:                          WriteSPChar("SUB");                          break;                      case (char)27:                          WriteSPChar("ESC");                          break;                      case (char)28:                          WriteSPChar("FS");                          break;                      case (char)29:                          WriteSPChar("GS");                          break;                      case (char)30:                          WriteSPChar("RS");                          break;                      case (char)31:                          WriteSPChar("US");                          break;                      default:                          _buffer[0] = ch;                          _writer.WriteChars(_buffer' 0' 1);                          break;                  }
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessMouse,The following statement contains a magic number: switch (protocol) {                    case MouseTrackingProtocol.Normal:                      data = new byte[] {                          (byte)27' // ESCAPE                          (byte)91' // [                          (byte)77' // M                          (byte)statBits'                          (col == posLimit) ?                              (byte)0 :                   // emulate xterm's bug                              (byte)(col + (1 + 0x20))'   // column 0 --> send as 1                          (row == posLimit) ?                              (byte)0 :                   // emulate xterm's bug                              (byte)(row + (1 + 0x20))'   // row 0 --> send as 1                      };                      dataLen = 6;                      break;                    case MouseTrackingProtocol.Utf8:                      data = new byte[8] {                          (byte)27' // ESCAPE                          (byte)91' // [                          (byte)77' // M                          (byte)statBits'                          0'0'0'0'                      };                        dataLen = 4;                        if (col < MOUSE_POS_EXT_START)                          data[dataLen++] = (byte)(col + (1 + 0x20));     // column 0 --> send as 1                      else { // encode in UTF-8                          int val = col + 1 + 0x20;                          data[dataLen++] = (byte)(0xc0 + (val >> 6));                          data[dataLen++] = (byte)(0x80 + (val & 0x3f));                      }                        if (row < MOUSE_POS_EXT_START)                          data[dataLen++] = (byte)(row + (1 + 0x20));     // row 0 --> send as 1                      else { // encode in UTF-8                          int val = row + (1 + 0x20);                          data[dataLen++] = (byte)(0xc0 + (val >> 6));                          data[dataLen++] = (byte)(0x80 + (val & 0x3f));                      }                      break;                    case MouseTrackingProtocol.Urxvt:                      data = Encoding.ASCII.GetBytes(                          new StringBuilder()                              .Append("\x1b[")                              .Append(statBits.ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((col+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((row+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append("M")                              .ToString());                      dataLen = data.Length;                      break;                    case MouseTrackingProtocol.Sgr:                      data = Encoding.ASCII.GetBytes(                          new StringBuilder()                              .Append("\x1b[<")                              .Append(statBits.ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((col+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((row+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append(action == TerminalMouseAction.ButtonUp ? 'm' : 'M')                              .ToString());                      dataLen = data.Length;                      break;                    default:                      return true;    // unknown protocol              }
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessMouse,The following statement contains a magic number: switch (protocol) {                    case MouseTrackingProtocol.Normal:                      data = new byte[] {                          (byte)27' // ESCAPE                          (byte)91' // [                          (byte)77' // M                          (byte)statBits'                          (col == posLimit) ?                              (byte)0 :                   // emulate xterm's bug                              (byte)(col + (1 + 0x20))'   // column 0 --> send as 1                          (row == posLimit) ?                              (byte)0 :                   // emulate xterm's bug                              (byte)(row + (1 + 0x20))'   // row 0 --> send as 1                      };                      dataLen = 6;                      break;                    case MouseTrackingProtocol.Utf8:                      data = new byte[8] {                          (byte)27' // ESCAPE                          (byte)91' // [                          (byte)77' // M                          (byte)statBits'                          0'0'0'0'                      };                        dataLen = 4;                        if (col < MOUSE_POS_EXT_START)                          data[dataLen++] = (byte)(col + (1 + 0x20));     // column 0 --> send as 1                      else { // encode in UTF-8                          int val = col + 1 + 0x20;                          data[dataLen++] = (byte)(0xc0 + (val >> 6));                          data[dataLen++] = (byte)(0x80 + (val & 0x3f));                      }                        if (row < MOUSE_POS_EXT_START)                          data[dataLen++] = (byte)(row + (1 + 0x20));     // row 0 --> send as 1                      else { // encode in UTF-8                          int val = row + (1 + 0x20);                          data[dataLen++] = (byte)(0xc0 + (val >> 6));                          data[dataLen++] = (byte)(0x80 + (val & 0x3f));                      }                      break;                    case MouseTrackingProtocol.Urxvt:                      data = Encoding.ASCII.GetBytes(                          new StringBuilder()                              .Append("\x1b[")                              .Append(statBits.ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((col+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((row+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append("M")                              .ToString());                      dataLen = data.Length;                      break;                    case MouseTrackingProtocol.Sgr:                      data = Encoding.ASCII.GetBytes(                          new StringBuilder()                              .Append("\x1b[<")                              .Append(statBits.ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((col+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((row+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append(action == TerminalMouseAction.ButtonUp ? 'm' : 'M')                              .ToString());                      dataLen = data.Length;                      break;                    default:                      return true;    // unknown protocol              }
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessMouse,The following statement contains a magic number: switch (protocol) {                    case MouseTrackingProtocol.Normal:                      data = new byte[] {                          (byte)27' // ESCAPE                          (byte)91' // [                          (byte)77' // M                          (byte)statBits'                          (col == posLimit) ?                              (byte)0 :                   // emulate xterm's bug                              (byte)(col + (1 + 0x20))'   // column 0 --> send as 1                          (row == posLimit) ?                              (byte)0 :                   // emulate xterm's bug                              (byte)(row + (1 + 0x20))'   // row 0 --> send as 1                      };                      dataLen = 6;                      break;                    case MouseTrackingProtocol.Utf8:                      data = new byte[8] {                          (byte)27' // ESCAPE                          (byte)91' // [                          (byte)77' // M                          (byte)statBits'                          0'0'0'0'                      };                        dataLen = 4;                        if (col < MOUSE_POS_EXT_START)                          data[dataLen++] = (byte)(col + (1 + 0x20));     // column 0 --> send as 1                      else { // encode in UTF-8                          int val = col + 1 + 0x20;                          data[dataLen++] = (byte)(0xc0 + (val >> 6));                          data[dataLen++] = (byte)(0x80 + (val & 0x3f));                      }                        if (row < MOUSE_POS_EXT_START)                          data[dataLen++] = (byte)(row + (1 + 0x20));     // row 0 --> send as 1                      else { // encode in UTF-8                          int val = row + (1 + 0x20);                          data[dataLen++] = (byte)(0xc0 + (val >> 6));                          data[dataLen++] = (byte)(0x80 + (val & 0x3f));                      }                      break;                    case MouseTrackingProtocol.Urxvt:                      data = Encoding.ASCII.GetBytes(                          new StringBuilder()                              .Append("\x1b[")                              .Append(statBits.ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((col+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((row+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append("M")                              .ToString());                      dataLen = data.Length;                      break;                    case MouseTrackingProtocol.Sgr:                      data = Encoding.ASCII.GetBytes(                          new StringBuilder()                              .Append("\x1b[<")                              .Append(statBits.ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((col+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((row+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append(action == TerminalMouseAction.ButtonUp ? 'm' : 'M')                              .ToString());                      dataLen = data.Length;                      break;                    default:                      return true;    // unknown protocol              }
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessMouse,The following statement contains a magic number: switch (protocol) {                    case MouseTrackingProtocol.Normal:                      data = new byte[] {                          (byte)27' // ESCAPE                          (byte)91' // [                          (byte)77' // M                          (byte)statBits'                          (col == posLimit) ?                              (byte)0 :                   // emulate xterm's bug                              (byte)(col + (1 + 0x20))'   // column 0 --> send as 1                          (row == posLimit) ?                              (byte)0 :                   // emulate xterm's bug                              (byte)(row + (1 + 0x20))'   // row 0 --> send as 1                      };                      dataLen = 6;                      break;                    case MouseTrackingProtocol.Utf8:                      data = new byte[8] {                          (byte)27' // ESCAPE                          (byte)91' // [                          (byte)77' // M                          (byte)statBits'                          0'0'0'0'                      };                        dataLen = 4;                        if (col < MOUSE_POS_EXT_START)                          data[dataLen++] = (byte)(col + (1 + 0x20));     // column 0 --> send as 1                      else { // encode in UTF-8                          int val = col + 1 + 0x20;                          data[dataLen++] = (byte)(0xc0 + (val >> 6));                          data[dataLen++] = (byte)(0x80 + (val & 0x3f));                      }                        if (row < MOUSE_POS_EXT_START)                          data[dataLen++] = (byte)(row + (1 + 0x20));     // row 0 --> send as 1                      else { // encode in UTF-8                          int val = row + (1 + 0x20);                          data[dataLen++] = (byte)(0xc0 + (val >> 6));                          data[dataLen++] = (byte)(0x80 + (val & 0x3f));                      }                      break;                    case MouseTrackingProtocol.Urxvt:                      data = Encoding.ASCII.GetBytes(                          new StringBuilder()                              .Append("\x1b[")                              .Append(statBits.ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((col+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((row+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append("M")                              .ToString());                      dataLen = data.Length;                      break;                    case MouseTrackingProtocol.Sgr:                      data = Encoding.ASCII.GetBytes(                          new StringBuilder()                              .Append("\x1b[<")                              .Append(statBits.ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((col+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((row+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append(action == TerminalMouseAction.ButtonUp ? 'm' : 'M')                              .ToString());                      dataLen = data.Length;                      break;                    default:                      return true;    // unknown protocol              }
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessMouse,The following statement contains a magic number: switch (protocol) {                    case MouseTrackingProtocol.Normal:                      data = new byte[] {                          (byte)27' // ESCAPE                          (byte)91' // [                          (byte)77' // M                          (byte)statBits'                          (col == posLimit) ?                              (byte)0 :                   // emulate xterm's bug                              (byte)(col + (1 + 0x20))'   // column 0 --> send as 1                          (row == posLimit) ?                              (byte)0 :                   // emulate xterm's bug                              (byte)(row + (1 + 0x20))'   // row 0 --> send as 1                      };                      dataLen = 6;                      break;                    case MouseTrackingProtocol.Utf8:                      data = new byte[8] {                          (byte)27' // ESCAPE                          (byte)91' // [                          (byte)77' // M                          (byte)statBits'                          0'0'0'0'                      };                        dataLen = 4;                        if (col < MOUSE_POS_EXT_START)                          data[dataLen++] = (byte)(col + (1 + 0x20));     // column 0 --> send as 1                      else { // encode in UTF-8                          int val = col + 1 + 0x20;                          data[dataLen++] = (byte)(0xc0 + (val >> 6));                          data[dataLen++] = (byte)(0x80 + (val & 0x3f));                      }                        if (row < MOUSE_POS_EXT_START)                          data[dataLen++] = (byte)(row + (1 + 0x20));     // row 0 --> send as 1                      else { // encode in UTF-8                          int val = row + (1 + 0x20);                          data[dataLen++] = (byte)(0xc0 + (val >> 6));                          data[dataLen++] = (byte)(0x80 + (val & 0x3f));                      }                      break;                    case MouseTrackingProtocol.Urxvt:                      data = Encoding.ASCII.GetBytes(                          new StringBuilder()                              .Append("\x1b[")                              .Append(statBits.ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((col+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((row+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append("M")                              .ToString());                      dataLen = data.Length;                      break;                    case MouseTrackingProtocol.Sgr:                      data = Encoding.ASCII.GetBytes(                          new StringBuilder()                              .Append("\x1b[<")                              .Append(statBits.ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((col+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((row+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append(action == TerminalMouseAction.ButtonUp ? 'm' : 'M')                              .ToString());                      dataLen = data.Length;                      break;                    default:                      return true;    // unknown protocol              }
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessMouse,The following statement contains a magic number: switch (protocol) {                    case MouseTrackingProtocol.Normal:                      data = new byte[] {                          (byte)27' // ESCAPE                          (byte)91' // [                          (byte)77' // M                          (byte)statBits'                          (col == posLimit) ?                              (byte)0 :                   // emulate xterm's bug                              (byte)(col + (1 + 0x20))'   // column 0 --> send as 1                          (row == posLimit) ?                              (byte)0 :                   // emulate xterm's bug                              (byte)(row + (1 + 0x20))'   // row 0 --> send as 1                      };                      dataLen = 6;                      break;                    case MouseTrackingProtocol.Utf8:                      data = new byte[8] {                          (byte)27' // ESCAPE                          (byte)91' // [                          (byte)77' // M                          (byte)statBits'                          0'0'0'0'                      };                        dataLen = 4;                        if (col < MOUSE_POS_EXT_START)                          data[dataLen++] = (byte)(col + (1 + 0x20));     // column 0 --> send as 1                      else { // encode in UTF-8                          int val = col + 1 + 0x20;                          data[dataLen++] = (byte)(0xc0 + (val >> 6));                          data[dataLen++] = (byte)(0x80 + (val & 0x3f));                      }                        if (row < MOUSE_POS_EXT_START)                          data[dataLen++] = (byte)(row + (1 + 0x20));     // row 0 --> send as 1                      else { // encode in UTF-8                          int val = row + (1 + 0x20);                          data[dataLen++] = (byte)(0xc0 + (val >> 6));                          data[dataLen++] = (byte)(0x80 + (val & 0x3f));                      }                      break;                    case MouseTrackingProtocol.Urxvt:                      data = Encoding.ASCII.GetBytes(                          new StringBuilder()                              .Append("\x1b[")                              .Append(statBits.ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((col+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((row+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append("M")                              .ToString());                      dataLen = data.Length;                      break;                    case MouseTrackingProtocol.Sgr:                      data = Encoding.ASCII.GetBytes(                          new StringBuilder()                              .Append("\x1b[<")                              .Append(statBits.ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((col+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((row+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append(action == TerminalMouseAction.ButtonUp ? 'm' : 'M')                              .ToString());                      dataLen = data.Length;                      break;                    default:                      return true;    // unknown protocol              }
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessMouse,The following statement contains a magic number: switch (protocol) {                    case MouseTrackingProtocol.Normal:                      data = new byte[] {                          (byte)27' // ESCAPE                          (byte)91' // [                          (byte)77' // M                          (byte)statBits'                          (col == posLimit) ?                              (byte)0 :                   // emulate xterm's bug                              (byte)(col + (1 + 0x20))'   // column 0 --> send as 1                          (row == posLimit) ?                              (byte)0 :                   // emulate xterm's bug                              (byte)(row + (1 + 0x20))'   // row 0 --> send as 1                      };                      dataLen = 6;                      break;                    case MouseTrackingProtocol.Utf8:                      data = new byte[8] {                          (byte)27' // ESCAPE                          (byte)91' // [                          (byte)77' // M                          (byte)statBits'                          0'0'0'0'                      };                        dataLen = 4;                        if (col < MOUSE_POS_EXT_START)                          data[dataLen++] = (byte)(col + (1 + 0x20));     // column 0 --> send as 1                      else { // encode in UTF-8                          int val = col + 1 + 0x20;                          data[dataLen++] = (byte)(0xc0 + (val >> 6));                          data[dataLen++] = (byte)(0x80 + (val & 0x3f));                      }                        if (row < MOUSE_POS_EXT_START)                          data[dataLen++] = (byte)(row + (1 + 0x20));     // row 0 --> send as 1                      else { // encode in UTF-8                          int val = row + (1 + 0x20);                          data[dataLen++] = (byte)(0xc0 + (val >> 6));                          data[dataLen++] = (byte)(0x80 + (val & 0x3f));                      }                      break;                    case MouseTrackingProtocol.Urxvt:                      data = Encoding.ASCII.GetBytes(                          new StringBuilder()                              .Append("\x1b[")                              .Append(statBits.ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((col+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((row+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append("M")                              .ToString());                      dataLen = data.Length;                      break;                    case MouseTrackingProtocol.Sgr:                      data = Encoding.ASCII.GetBytes(                          new StringBuilder()                              .Append("\x1b[<")                              .Append(statBits.ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((col+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((row+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append(action == TerminalMouseAction.ButtonUp ? 'm' : 'M')                              .ToString());                      dataLen = data.Length;                      break;                    default:                      return true;    // unknown protocol              }
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessMouse,The following statement contains a magic number: switch (protocol) {                    case MouseTrackingProtocol.Normal:                      data = new byte[] {                          (byte)27' // ESCAPE                          (byte)91' // [                          (byte)77' // M                          (byte)statBits'                          (col == posLimit) ?                              (byte)0 :                   // emulate xterm's bug                              (byte)(col + (1 + 0x20))'   // column 0 --> send as 1                          (row == posLimit) ?                              (byte)0 :                   // emulate xterm's bug                              (byte)(row + (1 + 0x20))'   // row 0 --> send as 1                      };                      dataLen = 6;                      break;                    case MouseTrackingProtocol.Utf8:                      data = new byte[8] {                          (byte)27' // ESCAPE                          (byte)91' // [                          (byte)77' // M                          (byte)statBits'                          0'0'0'0'                      };                        dataLen = 4;                        if (col < MOUSE_POS_EXT_START)                          data[dataLen++] = (byte)(col + (1 + 0x20));     // column 0 --> send as 1                      else { // encode in UTF-8                          int val = col + 1 + 0x20;                          data[dataLen++] = (byte)(0xc0 + (val >> 6));                          data[dataLen++] = (byte)(0x80 + (val & 0x3f));                      }                        if (row < MOUSE_POS_EXT_START)                          data[dataLen++] = (byte)(row + (1 + 0x20));     // row 0 --> send as 1                      else { // encode in UTF-8                          int val = row + (1 + 0x20);                          data[dataLen++] = (byte)(0xc0 + (val >> 6));                          data[dataLen++] = (byte)(0x80 + (val & 0x3f));                      }                      break;                    case MouseTrackingProtocol.Urxvt:                      data = Encoding.ASCII.GetBytes(                          new StringBuilder()                              .Append("\x1b[")                              .Append(statBits.ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((col+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((row+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append("M")                              .ToString());                      dataLen = data.Length;                      break;                    case MouseTrackingProtocol.Sgr:                      data = Encoding.ASCII.GetBytes(                          new StringBuilder()                              .Append("\x1b[<")                              .Append(statBits.ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((col+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((row+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append(action == TerminalMouseAction.ButtonUp ? 'm' : 'M')                              .ToString());                      dataLen = data.Length;                      break;                    default:                      return true;    // unknown protocol              }
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessMouse,The following statement contains a magic number: switch (protocol) {                    case MouseTrackingProtocol.Normal:                      data = new byte[] {                          (byte)27' // ESCAPE                          (byte)91' // [                          (byte)77' // M                          (byte)statBits'                          (col == posLimit) ?                              (byte)0 :                   // emulate xterm's bug                              (byte)(col + (1 + 0x20))'   // column 0 --> send as 1                          (row == posLimit) ?                              (byte)0 :                   // emulate xterm's bug                              (byte)(row + (1 + 0x20))'   // row 0 --> send as 1                      };                      dataLen = 6;                      break;                    case MouseTrackingProtocol.Utf8:                      data = new byte[8] {                          (byte)27' // ESCAPE                          (byte)91' // [                          (byte)77' // M                          (byte)statBits'                          0'0'0'0'                      };                        dataLen = 4;                        if (col < MOUSE_POS_EXT_START)                          data[dataLen++] = (byte)(col + (1 + 0x20));     // column 0 --> send as 1                      else { // encode in UTF-8                          int val = col + 1 + 0x20;                          data[dataLen++] = (byte)(0xc0 + (val >> 6));                          data[dataLen++] = (byte)(0x80 + (val & 0x3f));                      }                        if (row < MOUSE_POS_EXT_START)                          data[dataLen++] = (byte)(row + (1 + 0x20));     // row 0 --> send as 1                      else { // encode in UTF-8                          int val = row + (1 + 0x20);                          data[dataLen++] = (byte)(0xc0 + (val >> 6));                          data[dataLen++] = (byte)(0x80 + (val & 0x3f));                      }                      break;                    case MouseTrackingProtocol.Urxvt:                      data = Encoding.ASCII.GetBytes(                          new StringBuilder()                              .Append("\x1b[")                              .Append(statBits.ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((col+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((row+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append("M")                              .ToString());                      dataLen = data.Length;                      break;                    case MouseTrackingProtocol.Sgr:                      data = Encoding.ASCII.GetBytes(                          new StringBuilder()                              .Append("\x1b[<")                              .Append(statBits.ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((col+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((row+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append(action == TerminalMouseAction.ButtonUp ? 'm' : 'M')                              .ToString());                      dataLen = data.Length;                      break;                    default:                      return true;    // unknown protocol              }
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessMouse,The following statement contains a magic number: switch (protocol) {                    case MouseTrackingProtocol.Normal:                      data = new byte[] {                          (byte)27' // ESCAPE                          (byte)91' // [                          (byte)77' // M                          (byte)statBits'                          (col == posLimit) ?                              (byte)0 :                   // emulate xterm's bug                              (byte)(col + (1 + 0x20))'   // column 0 --> send as 1                          (row == posLimit) ?                              (byte)0 :                   // emulate xterm's bug                              (byte)(row + (1 + 0x20))'   // row 0 --> send as 1                      };                      dataLen = 6;                      break;                    case MouseTrackingProtocol.Utf8:                      data = new byte[8] {                          (byte)27' // ESCAPE                          (byte)91' // [                          (byte)77' // M                          (byte)statBits'                          0'0'0'0'                      };                        dataLen = 4;                        if (col < MOUSE_POS_EXT_START)                          data[dataLen++] = (byte)(col + (1 + 0x20));     // column 0 --> send as 1                      else { // encode in UTF-8                          int val = col + 1 + 0x20;                          data[dataLen++] = (byte)(0xc0 + (val >> 6));                          data[dataLen++] = (byte)(0x80 + (val & 0x3f));                      }                        if (row < MOUSE_POS_EXT_START)                          data[dataLen++] = (byte)(row + (1 + 0x20));     // row 0 --> send as 1                      else { // encode in UTF-8                          int val = row + (1 + 0x20);                          data[dataLen++] = (byte)(0xc0 + (val >> 6));                          data[dataLen++] = (byte)(0x80 + (val & 0x3f));                      }                      break;                    case MouseTrackingProtocol.Urxvt:                      data = Encoding.ASCII.GetBytes(                          new StringBuilder()                              .Append("\x1b[")                              .Append(statBits.ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((col+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((row+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append("M")                              .ToString());                      dataLen = data.Length;                      break;                    case MouseTrackingProtocol.Sgr:                      data = Encoding.ASCII.GetBytes(                          new StringBuilder()                              .Append("\x1b[<")                              .Append(statBits.ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((col+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((row+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append(action == TerminalMouseAction.ButtonUp ? 'm' : 'M')                              .ToString());                      dataLen = data.Length;                      break;                    default:                      return true;    // unknown protocol              }
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessMouse,The following statement contains a magic number: switch (protocol) {                    case MouseTrackingProtocol.Normal:                      data = new byte[] {                          (byte)27' // ESCAPE                          (byte)91' // [                          (byte)77' // M                          (byte)statBits'                          (col == posLimit) ?                              (byte)0 :                   // emulate xterm's bug                              (byte)(col + (1 + 0x20))'   // column 0 --> send as 1                          (row == posLimit) ?                              (byte)0 :                   // emulate xterm's bug                              (byte)(row + (1 + 0x20))'   // row 0 --> send as 1                      };                      dataLen = 6;                      break;                    case MouseTrackingProtocol.Utf8:                      data = new byte[8] {                          (byte)27' // ESCAPE                          (byte)91' // [                          (byte)77' // M                          (byte)statBits'                          0'0'0'0'                      };                        dataLen = 4;                        if (col < MOUSE_POS_EXT_START)                          data[dataLen++] = (byte)(col + (1 + 0x20));     // column 0 --> send as 1                      else { // encode in UTF-8                          int val = col + 1 + 0x20;                          data[dataLen++] = (byte)(0xc0 + (val >> 6));                          data[dataLen++] = (byte)(0x80 + (val & 0x3f));                      }                        if (row < MOUSE_POS_EXT_START)                          data[dataLen++] = (byte)(row + (1 + 0x20));     // row 0 --> send as 1                      else { // encode in UTF-8                          int val = row + (1 + 0x20);                          data[dataLen++] = (byte)(0xc0 + (val >> 6));                          data[dataLen++] = (byte)(0x80 + (val & 0x3f));                      }                      break;                    case MouseTrackingProtocol.Urxvt:                      data = Encoding.ASCII.GetBytes(                          new StringBuilder()                              .Append("\x1b[")                              .Append(statBits.ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((col+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((row+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append("M")                              .ToString());                      dataLen = data.Length;                      break;                    case MouseTrackingProtocol.Sgr:                      data = Encoding.ASCII.GetBytes(                          new StringBuilder()                              .Append("\x1b[<")                              .Append(statBits.ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((col+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append(';')                              .Append((row+1).ToString(NumberFormatInfo.InvariantInfo))                              .Append(action == TerminalMouseAction.ButtonUp ? 'm' : 'M')                              .ToString());                      dataLen = data.Length;                      break;                    default:                      return true;    // unknown protocol              }
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessSGR,The following statement contains a magic number: switch (state) {                          case 1:                              if (code == 5) { // select indexed color                                  state = 2;                              }                              else if (code == 2) { // select RGB color                                  state = 3;  // read R value                              }                              else {                                  Debug.WriteLine("Invalid SGR code : {0}"' code);                                  goto Apply;                              }                              break;                          case 2:                              if (code < 256) {                                  if (target == 3) {                                      dec = SelectForeColor(dec' code);                                  }                                  else if (target == 4) {                                      dec = SelectBackgroundColor(dec' code);                                  }                              }                              state = 0;                              target = 0;                              break;                          case 3:                              if (code < 256) {                                  r = code;                                  state = 4;  // read G value                              }                              else {                                  Debug.WriteLine("Invalid SGR R value : {0}"' code);                                  goto Apply;                              }                              break;                          case 4:                              if (code < 256) {                                  g = code;                                  state = 5;  // read B value                              }                              else {                                  Debug.WriteLine("Invalid SGR G value : {0}"' code);                                  goto Apply;                              }                              break;                          case 5:                              if (code < 256) {                                  b = code;                                  if (target == 3) {                                      dec = SetForeColorByRGB(dec' r' g' b);                                  }                                  else if (target == 4) {                                      dec = SetBackColorByRGB(dec' r' g' b);                                  }                                  state = 0;                                  target = 0;                              }                              else {                                  Debug.WriteLine("Invalid SGR B value : {0}"' code);                                  goto Apply;                              }                              break;                      }
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessSGR,The following statement contains a magic number: switch (state) {                          case 1:                              if (code == 5) { // select indexed color                                  state = 2;                              }                              else if (code == 2) { // select RGB color                                  state = 3;  // read R value                              }                              else {                                  Debug.WriteLine("Invalid SGR code : {0}"' code);                                  goto Apply;                              }                              break;                          case 2:                              if (code < 256) {                                  if (target == 3) {                                      dec = SelectForeColor(dec' code);                                  }                                  else if (target == 4) {                                      dec = SelectBackgroundColor(dec' code);                                  }                              }                              state = 0;                              target = 0;                              break;                          case 3:                              if (code < 256) {                                  r = code;                                  state = 4;  // read G value                              }                              else {                                  Debug.WriteLine("Invalid SGR R value : {0}"' code);                                  goto Apply;                              }                              break;                          case 4:                              if (code < 256) {                                  g = code;                                  state = 5;  // read B value                              }                              else {                                  Debug.WriteLine("Invalid SGR G value : {0}"' code);                                  goto Apply;                              }                              break;                          case 5:                              if (code < 256) {                                  b = code;                                  if (target == 3) {                                      dec = SetForeColorByRGB(dec' r' g' b);                                  }                                  else if (target == 4) {                                      dec = SetBackColorByRGB(dec' r' g' b);                                  }                                  state = 0;                                  target = 0;                              }                              else {                                  Debug.WriteLine("Invalid SGR B value : {0}"' code);                                  goto Apply;                              }                              break;                      }
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessSGR,The following statement contains a magic number: switch (state) {                          case 1:                              if (code == 5) { // select indexed color                                  state = 2;                              }                              else if (code == 2) { // select RGB color                                  state = 3;  // read R value                              }                              else {                                  Debug.WriteLine("Invalid SGR code : {0}"' code);                                  goto Apply;                              }                              break;                          case 2:                              if (code < 256) {                                  if (target == 3) {                                      dec = SelectForeColor(dec' code);                                  }                                  else if (target == 4) {                                      dec = SelectBackgroundColor(dec' code);                                  }                              }                              state = 0;                              target = 0;                              break;                          case 3:                              if (code < 256) {                                  r = code;                                  state = 4;  // read G value                              }                              else {                                  Debug.WriteLine("Invalid SGR R value : {0}"' code);                                  goto Apply;                              }                              break;                          case 4:                              if (code < 256) {                                  g = code;                                  state = 5;  // read B value                              }                              else {                                  Debug.WriteLine("Invalid SGR G value : {0}"' code);                                  goto Apply;                              }                              break;                          case 5:                              if (code < 256) {                                  b = code;                                  if (target == 3) {                                      dec = SetForeColorByRGB(dec' r' g' b);                                  }                                  else if (target == 4) {                                      dec = SetBackColorByRGB(dec' r' g' b);                                  }                                  state = 0;                                  target = 0;                              }                              else {                                  Debug.WriteLine("Invalid SGR B value : {0}"' code);                                  goto Apply;                              }                              break;                      }
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessSGR,The following statement contains a magic number: switch (state) {                          case 1:                              if (code == 5) { // select indexed color                                  state = 2;                              }                              else if (code == 2) { // select RGB color                                  state = 3;  // read R value                              }                              else {                                  Debug.WriteLine("Invalid SGR code : {0}"' code);                                  goto Apply;                              }                              break;                          case 2:                              if (code < 256) {                                  if (target == 3) {                                      dec = SelectForeColor(dec' code);                                  }                                  else if (target == 4) {                                      dec = SelectBackgroundColor(dec' code);                                  }                              }                              state = 0;                              target = 0;                              break;                          case 3:                              if (code < 256) {                                  r = code;                                  state = 4;  // read G value                              }                              else {                                  Debug.WriteLine("Invalid SGR R value : {0}"' code);                                  goto Apply;                              }                              break;                          case 4:                              if (code < 256) {                                  g = code;                                  state = 5;  // read B value                              }                              else {                                  Debug.WriteLine("Invalid SGR G value : {0}"' code);                                  goto Apply;                              }                              break;                          case 5:                              if (code < 256) {                                  b = code;                                  if (target == 3) {                                      dec = SetForeColorByRGB(dec' r' g' b);                                  }                                  else if (target == 4) {                                      dec = SetBackColorByRGB(dec' r' g' b);                                  }                                  state = 0;                                  target = 0;                              }                              else {                                  Debug.WriteLine("Invalid SGR B value : {0}"' code);                                  goto Apply;                              }                              break;                      }
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessSGR,The following statement contains a magic number: switch (state) {                          case 1:                              if (code == 5) { // select indexed color                                  state = 2;                              }                              else if (code == 2) { // select RGB color                                  state = 3;  // read R value                              }                              else {                                  Debug.WriteLine("Invalid SGR code : {0}"' code);                                  goto Apply;                              }                              break;                          case 2:                              if (code < 256) {                                  if (target == 3) {                                      dec = SelectForeColor(dec' code);                                  }                                  else if (target == 4) {                                      dec = SelectBackgroundColor(dec' code);                                  }                              }                              state = 0;                              target = 0;                              break;                          case 3:                              if (code < 256) {                                  r = code;                                  state = 4;  // read G value                              }                              else {                                  Debug.WriteLine("Invalid SGR R value : {0}"' code);                                  goto Apply;                              }                              break;                          case 4:                              if (code < 256) {                                  g = code;                                  state = 5;  // read B value                              }                              else {                                  Debug.WriteLine("Invalid SGR G value : {0}"' code);                                  goto Apply;                              }                              break;                          case 5:                              if (code < 256) {                                  b = code;                                  if (target == 3) {                                      dec = SetForeColorByRGB(dec' r' g' b);                                  }                                  else if (target == 4) {                                      dec = SetBackColorByRGB(dec' r' g' b);                                  }                                  state = 0;                                  target = 0;                              }                              else {                                  Debug.WriteLine("Invalid SGR B value : {0}"' code);                                  goto Apply;                              }                              break;                      }
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessSGR,The following statement contains a magic number: switch (state) {                          case 1:                              if (code == 5) { // select indexed color                                  state = 2;                              }                              else if (code == 2) { // select RGB color                                  state = 3;  // read R value                              }                              else {                                  Debug.WriteLine("Invalid SGR code : {0}"' code);                                  goto Apply;                              }                              break;                          case 2:                              if (code < 256) {                                  if (target == 3) {                                      dec = SelectForeColor(dec' code);                                  }                                  else if (target == 4) {                                      dec = SelectBackgroundColor(dec' code);                                  }                              }                              state = 0;                              target = 0;                              break;                          case 3:                              if (code < 256) {                                  r = code;                                  state = 4;  // read G value                              }                              else {                                  Debug.WriteLine("Invalid SGR R value : {0}"' code);                                  goto Apply;                              }                              break;                          case 4:                              if (code < 256) {                                  g = code;                                  state = 5;  // read B value                              }                              else {                                  Debug.WriteLine("Invalid SGR G value : {0}"' code);                                  goto Apply;                              }                              break;                          case 5:                              if (code < 256) {                                  b = code;                                  if (target == 3) {                                      dec = SetForeColorByRGB(dec' r' g' b);                                  }                                  else if (target == 4) {                                      dec = SetBackColorByRGB(dec' r' g' b);                                  }                                  state = 0;                                  target = 0;                              }                              else {                                  Debug.WriteLine("Invalid SGR B value : {0}"' code);                                  goto Apply;                              }                              break;                      }
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessSGR,The following statement contains a magic number: switch (state) {                          case 1:                              if (code == 5) { // select indexed color                                  state = 2;                              }                              else if (code == 2) { // select RGB color                                  state = 3;  // read R value                              }                              else {                                  Debug.WriteLine("Invalid SGR code : {0}"' code);                                  goto Apply;                              }                              break;                          case 2:                              if (code < 256) {                                  if (target == 3) {                                      dec = SelectForeColor(dec' code);                                  }                                  else if (target == 4) {                                      dec = SelectBackgroundColor(dec' code);                                  }                              }                              state = 0;                              target = 0;                              break;                          case 3:                              if (code < 256) {                                  r = code;                                  state = 4;  // read G value                              }                              else {                                  Debug.WriteLine("Invalid SGR R value : {0}"' code);                                  goto Apply;                              }                              break;                          case 4:                              if (code < 256) {                                  g = code;                                  state = 5;  // read B value                              }                              else {                                  Debug.WriteLine("Invalid SGR G value : {0}"' code);                                  goto Apply;                              }                              break;                          case 5:                              if (code < 256) {                                  b = code;                                  if (target == 3) {                                      dec = SetForeColorByRGB(dec' r' g' b);                                  }                                  else if (target == 4) {                                      dec = SetBackColorByRGB(dec' r' g' b);                                  }                                  state = 0;                                  target = 0;                              }                              else {                                  Debug.WriteLine("Invalid SGR B value : {0}"' code);                                  goto Apply;                              }                              break;                      }
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessSGR,The following statement contains a magic number: switch (state) {                          case 1:                              if (code == 5) { // select indexed color                                  state = 2;                              }                              else if (code == 2) { // select RGB color                                  state = 3;  // read R value                              }                              else {                                  Debug.WriteLine("Invalid SGR code : {0}"' code);                                  goto Apply;                              }                              break;                          case 2:                              if (code < 256) {                                  if (target == 3) {                                      dec = SelectForeColor(dec' code);                                  }                                  else if (target == 4) {                                      dec = SelectBackgroundColor(dec' code);                                  }                              }                              state = 0;                              target = 0;                              break;                          case 3:                              if (code < 256) {                                  r = code;                                  state = 4;  // read G value                              }                              else {                                  Debug.WriteLine("Invalid SGR R value : {0}"' code);                                  goto Apply;                              }                              break;                          case 4:                              if (code < 256) {                                  g = code;                                  state = 5;  // read B value                              }                              else {                                  Debug.WriteLine("Invalid SGR G value : {0}"' code);                                  goto Apply;                              }                              break;                          case 5:                              if (code < 256) {                                  b = code;                                  if (target == 3) {                                      dec = SetForeColorByRGB(dec' r' g' b);                                  }                                  else if (target == 4) {                                      dec = SetBackColorByRGB(dec' r' g' b);                                  }                                  state = 0;                                  target = 0;                              }                              else {                                  Debug.WriteLine("Invalid SGR B value : {0}"' code);                                  goto Apply;                              }                              break;                      }
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessSGR,The following statement contains a magic number: switch (state) {                          case 1:                              if (code == 5) { // select indexed color                                  state = 2;                              }                              else if (code == 2) { // select RGB color                                  state = 3;  // read R value                              }                              else {                                  Debug.WriteLine("Invalid SGR code : {0}"' code);                                  goto Apply;                              }                              break;                          case 2:                              if (code < 256) {                                  if (target == 3) {                                      dec = SelectForeColor(dec' code);                                  }                                  else if (target == 4) {                                      dec = SelectBackgroundColor(dec' code);                                  }                              }                              state = 0;                              target = 0;                              break;                          case 3:                              if (code < 256) {                                  r = code;                                  state = 4;  // read G value                              }                              else {                                  Debug.WriteLine("Invalid SGR R value : {0}"' code);                                  goto Apply;                              }                              break;                          case 4:                              if (code < 256) {                                  g = code;                                  state = 5;  // read B value                              }                              else {                                  Debug.WriteLine("Invalid SGR G value : {0}"' code);                                  goto Apply;                              }                              break;                          case 5:                              if (code < 256) {                                  b = code;                                  if (target == 3) {                                      dec = SetForeColorByRGB(dec' r' g' b);                                  }                                  else if (target == 4) {                                      dec = SetBackColorByRGB(dec' r' g' b);                                  }                                  state = 0;                                  target = 0;                              }                              else {                                  Debug.WriteLine("Invalid SGR B value : {0}"' code);                                  goto Apply;                              }                              break;                      }
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessSGR,The following statement contains a magic number: switch (state) {                          case 1:                              if (code == 5) { // select indexed color                                  state = 2;                              }                              else if (code == 2) { // select RGB color                                  state = 3;  // read R value                              }                              else {                                  Debug.WriteLine("Invalid SGR code : {0}"' code);                                  goto Apply;                              }                              break;                          case 2:                              if (code < 256) {                                  if (target == 3) {                                      dec = SelectForeColor(dec' code);                                  }                                  else if (target == 4) {                                      dec = SelectBackgroundColor(dec' code);                                  }                              }                              state = 0;                              target = 0;                              break;                          case 3:                              if (code < 256) {                                  r = code;                                  state = 4;  // read G value                              }                              else {                                  Debug.WriteLine("Invalid SGR R value : {0}"' code);                                  goto Apply;                              }                              break;                          case 4:                              if (code < 256) {                                  g = code;                                  state = 5;  // read B value                              }                              else {                                  Debug.WriteLine("Invalid SGR G value : {0}"' code);                                  goto Apply;                              }                              break;                          case 5:                              if (code < 256) {                                  b = code;                                  if (target == 3) {                                      dec = SetForeColorByRGB(dec' r' g' b);                                  }                                  else if (target == 4) {                                      dec = SetBackColorByRGB(dec' r' g' b);                                  }                                  state = 0;                                  target = 0;                              }                              else {                                  Debug.WriteLine("Invalid SGR B value : {0}"' code);                                  goto Apply;                              }                              break;                      }
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessSGR,The following statement contains a magic number: switch (state) {                          case 1:                              if (code == 5) { // select indexed color                                  state = 2;                              }                              else if (code == 2) { // select RGB color                                  state = 3;  // read R value                              }                              else {                                  Debug.WriteLine("Invalid SGR code : {0}"' code);                                  goto Apply;                              }                              break;                          case 2:                              if (code < 256) {                                  if (target == 3) {                                      dec = SelectForeColor(dec' code);                                  }                                  else if (target == 4) {                                      dec = SelectBackgroundColor(dec' code);                                  }                              }                              state = 0;                              target = 0;                              break;                          case 3:                              if (code < 256) {                                  r = code;                                  state = 4;  // read G value                              }                              else {                                  Debug.WriteLine("Invalid SGR R value : {0}"' code);                                  goto Apply;                              }                              break;                          case 4:                              if (code < 256) {                                  g = code;                                  state = 5;  // read B value                              }                              else {                                  Debug.WriteLine("Invalid SGR G value : {0}"' code);                                  goto Apply;                              }                              break;                          case 5:                              if (code < 256) {                                  b = code;                                  if (target == 3) {                                      dec = SetForeColorByRGB(dec' r' g' b);                                  }                                  else if (target == 4) {                                      dec = SetBackColorByRGB(dec' r' g' b);                                  }                                  state = 0;                                  target = 0;                              }                              else {                                  Debug.WriteLine("Invalid SGR B value : {0}"' code);                                  goto Apply;                              }                              break;                      }
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessSGR,The following statement contains a magic number: switch (state) {                          case 1:                              if (code == 5) { // select indexed color                                  state = 2;                              }                              else if (code == 2) { // select RGB color                                  state = 3;  // read R value                              }                              else {                                  Debug.WriteLine("Invalid SGR code : {0}"' code);                                  goto Apply;                              }                              break;                          case 2:                              if (code < 256) {                                  if (target == 3) {                                      dec = SelectForeColor(dec' code);                                  }                                  else if (target == 4) {                                      dec = SelectBackgroundColor(dec' code);                                  }                              }                              state = 0;                              target = 0;                              break;                          case 3:                              if (code < 256) {                                  r = code;                                  state = 4;  // read G value                              }                              else {                                  Debug.WriteLine("Invalid SGR R value : {0}"' code);                                  goto Apply;                              }                              break;                          case 4:                              if (code < 256) {                                  g = code;                                  state = 5;  // read B value                              }                              else {                                  Debug.WriteLine("Invalid SGR G value : {0}"' code);                                  goto Apply;                              }                              break;                          case 5:                              if (code < 256) {                                  b = code;                                  if (target == 3) {                                      dec = SetForeColorByRGB(dec' r' g' b);                                  }                                  else if (target == 4) {                                      dec = SetBackColorByRGB(dec' r' g' b);                                  }                                  state = 0;                                  target = 0;                              }                              else {                                  Debug.WriteLine("Invalid SGR B value : {0}"' code);                                  goto Apply;                              }                              break;                      }
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessSGR,The following statement contains a magic number: switch (state) {                          case 1:                              if (code == 5) { // select indexed color                                  state = 2;                              }                              else if (code == 2) { // select RGB color                                  state = 3;  // read R value                              }                              else {                                  Debug.WriteLine("Invalid SGR code : {0}"' code);                                  goto Apply;                              }                              break;                          case 2:                              if (code < 256) {                                  if (target == 3) {                                      dec = SelectForeColor(dec' code);                                  }                                  else if (target == 4) {                                      dec = SelectBackgroundColor(dec' code);                                  }                              }                              state = 0;                              target = 0;                              break;                          case 3:                              if (code < 256) {                                  r = code;                                  state = 4;  // read G value                              }                              else {                                  Debug.WriteLine("Invalid SGR R value : {0}"' code);                                  goto Apply;                              }                              break;                          case 4:                              if (code < 256) {                                  g = code;                                  state = 5;  // read B value                              }                              else {                                  Debug.WriteLine("Invalid SGR G value : {0}"' code);                                  goto Apply;                              }                              break;                          case 5:                              if (code < 256) {                                  b = code;                                  if (target == 3) {                                      dec = SetForeColorByRGB(dec' r' g' b);                                  }                                  else if (target == 4) {                                      dec = SetBackColorByRGB(dec' r' g' b);                                  }                                  state = 0;                                  target = 0;                              }                              else {                                  Debug.WriteLine("Invalid SGR B value : {0}"' code);                                  goto Apply;                              }                              break;                      }
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessSGR,The following statement contains a magic number: switch (state) {                          case 1:                              if (code == 5) { // select indexed color                                  state = 2;                              }                              else if (code == 2) { // select RGB color                                  state = 3;  // read R value                              }                              else {                                  Debug.WriteLine("Invalid SGR code : {0}"' code);                                  goto Apply;                              }                              break;                          case 2:                              if (code < 256) {                                  if (target == 3) {                                      dec = SelectForeColor(dec' code);                                  }                                  else if (target == 4) {                                      dec = SelectBackgroundColor(dec' code);                                  }                              }                              state = 0;                              target = 0;                              break;                          case 3:                              if (code < 256) {                                  r = code;                                  state = 4;  // read G value                              }                              else {                                  Debug.WriteLine("Invalid SGR R value : {0}"' code);                                  goto Apply;                              }                              break;                          case 4:                              if (code < 256) {                                  g = code;                                  state = 5;  // read B value                              }                              else {                                  Debug.WriteLine("Invalid SGR G value : {0}"' code);                                  goto Apply;                              }                              break;                          case 5:                              if (code < 256) {                                  b = code;                                  if (target == 3) {                                      dec = SetForeColorByRGB(dec' r' g' b);                                  }                                  else if (target == 4) {                                      dec = SetBackColorByRGB(dec' r' g' b);                                  }                                  state = 0;                                  target = 0;                              }                              else {                                  Debug.WriteLine("Invalid SGR B value : {0}"' code);                                  goto Apply;                              }                              break;                      }
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessSGR,The following statement contains a magic number: switch (state) {                          case 1:                              if (code == 5) { // select indexed color                                  state = 2;                              }                              else if (code == 2) { // select RGB color                                  state = 3;  // read R value                              }                              else {                                  Debug.WriteLine("Invalid SGR code : {0}"' code);                                  goto Apply;                              }                              break;                          case 2:                              if (code < 256) {                                  if (target == 3) {                                      dec = SelectForeColor(dec' code);                                  }                                  else if (target == 4) {                                      dec = SelectBackgroundColor(dec' code);                                  }                              }                              state = 0;                              target = 0;                              break;                          case 3:                              if (code < 256) {                                  r = code;                                  state = 4;  // read G value                              }                              else {                                  Debug.WriteLine("Invalid SGR R value : {0}"' code);                                  goto Apply;                              }                              break;                          case 4:                              if (code < 256) {                                  g = code;                                  state = 5;  // read B value                              }                              else {                                  Debug.WriteLine("Invalid SGR G value : {0}"' code);                                  goto Apply;                              }                              break;                          case 5:                              if (code < 256) {                                  b = code;                                  if (target == 3) {                                      dec = SetForeColorByRGB(dec' r' g' b);                                  }                                  else if (target == 4) {                                      dec = SetBackColorByRGB(dec' r' g' b);                                  }                                  state = 0;                                  target = 0;                              }                              else {                                  Debug.WriteLine("Invalid SGR B value : {0}"' code);                                  goto Apply;                              }                              break;                      }
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessSGR,The following statement contains a magic number: switch (state) {                          case 1:                              if (code == 5) { // select indexed color                                  state = 2;                              }                              else if (code == 2) { // select RGB color                                  state = 3;  // read R value                              }                              else {                                  Debug.WriteLine("Invalid SGR code : {0}"' code);                                  goto Apply;                              }                              break;                          case 2:                              if (code < 256) {                                  if (target == 3) {                                      dec = SelectForeColor(dec' code);                                  }                                  else if (target == 4) {                                      dec = SelectBackgroundColor(dec' code);                                  }                              }                              state = 0;                              target = 0;                              break;                          case 3:                              if (code < 256) {                                  r = code;                                  state = 4;  // read G value                              }                              else {                                  Debug.WriteLine("Invalid SGR R value : {0}"' code);                                  goto Apply;                              }                              break;                          case 4:                              if (code < 256) {                                  g = code;                                  state = 5;  // read B value                              }                              else {                                  Debug.WriteLine("Invalid SGR G value : {0}"' code);                                  goto Apply;                              }                              break;                          case 5:                              if (code < 256) {                                  b = code;                                  if (target == 3) {                                      dec = SetForeColorByRGB(dec' r' g' b);                                  }                                  else if (target == 4) {                                      dec = SetBackColorByRGB(dec' r' g' b);                                  }                                  state = 0;                                  target = 0;                              }                              else {                                  Debug.WriteLine("Invalid SGR B value : {0}"' code);                                  goto Apply;                              }                              break;                      }
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessSGR,The following statement contains a magic number: switch (state) {                          case 1:                              if (code == 5) { // select indexed color                                  state = 2;                              }                              else if (code == 2) { // select RGB color                                  state = 3;  // read R value                              }                              else {                                  Debug.WriteLine("Invalid SGR code : {0}"' code);                                  goto Apply;                              }                              break;                          case 2:                              if (code < 256) {                                  if (target == 3) {                                      dec = SelectForeColor(dec' code);                                  }                                  else if (target == 4) {                                      dec = SelectBackgroundColor(dec' code);                                  }                              }                              state = 0;                              target = 0;                              break;                          case 3:                              if (code < 256) {                                  r = code;                                  state = 4;  // read G value                              }                              else {                                  Debug.WriteLine("Invalid SGR R value : {0}"' code);                                  goto Apply;                              }                              break;                          case 4:                              if (code < 256) {                                  g = code;                                  state = 5;  // read B value                              }                              else {                                  Debug.WriteLine("Invalid SGR G value : {0}"' code);                                  goto Apply;                              }                              break;                          case 5:                              if (code < 256) {                                  b = code;                                  if (target == 3) {                                      dec = SetForeColorByRGB(dec' r' g' b);                                  }                                  else if (target == 4) {                                      dec = SetBackColorByRGB(dec' r' g' b);                                  }                                  state = 0;                                  target = 0;                              }                              else {                                  Debug.WriteLine("Invalid SGR B value : {0}"' code);                                  goto Apply;                              }                              break;                      }
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessSGR,The following statement contains a magic number: switch (state) {                          case 1:                              if (code == 5) { // select indexed color                                  state = 2;                              }                              else if (code == 2) { // select RGB color                                  state = 3;  // read R value                              }                              else {                                  Debug.WriteLine("Invalid SGR code : {0}"' code);                                  goto Apply;                              }                              break;                          case 2:                              if (code < 256) {                                  if (target == 3) {                                      dec = SelectForeColor(dec' code);                                  }                                  else if (target == 4) {                                      dec = SelectBackgroundColor(dec' code);                                  }                              }                              state = 0;                              target = 0;                              break;                          case 3:                              if (code < 256) {                                  r = code;                                  state = 4;  // read G value                              }                              else {                                  Debug.WriteLine("Invalid SGR R value : {0}"' code);                                  goto Apply;                              }                              break;                          case 4:                              if (code < 256) {                                  g = code;                                  state = 5;  // read B value                              }                              else {                                  Debug.WriteLine("Invalid SGR G value : {0}"' code);                                  goto Apply;                              }                              break;                          case 5:                              if (code < 256) {                                  b = code;                                  if (target == 3) {                                      dec = SetForeColorByRGB(dec' r' g' b);                                  }                                  else if (target == 4) {                                      dec = SetBackColorByRGB(dec' r' g' b);                                  }                                  state = 0;                                  target = 0;                              }                              else {                                  Debug.WriteLine("Invalid SGR B value : {0}"' code);                                  goto Apply;                              }                              break;                      }
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,InitTabStops,The following statement contains a magic number: _tabStops[i] = (i % 8) == 0;
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,EnsureTabStops,The following statement contains a magic number: bool[] newarray = new bool[Math.Max(length' _tabStops.Length * 2)];
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,EnsureTabStops,The following statement contains a magic number: newarray[i] = (i % 8) == 0;
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,XtermFunctionKey,The following statement contains a magic number: m += 2;
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,XtermFunctionKey,The following statement contains a magic number: m += 4;
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ModifyCursorKey,The following statement contains a magic number: m += 2;
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ModifyCursorKey,The following statement contains a magic number: m += 4;
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ModifyCursorKey,The following statement contains a magic number: m == 1 || m == 8
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ModifyCursorKey,The following statement contains a magic number: switch (XTermPreferences.Instance.modifyCursorKeys) {                  // only modifyCursorKeys=2 and modifyCursorKeys=3 are supported                  case 2: {                          byte[] data = new byte[] {                              0x1b' (byte)'['' (byte)'1'' (byte)';'' (byte)('0' + m)' (byte)c                          };                          return data;                      }                  case 3: {                          byte[] data = new byte[] {                              0x1b' (byte)'['' (byte)'>'' (byte)'1'' (byte)';'' (byte)('0' + m)' (byte)c                          };                          return data;                      }              }
Magic Number,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ModifyCursorKey,The following statement contains a magic number: switch (XTermPreferences.Instance.modifyCursorKeys) {                  // only modifyCursorKeys=2 and modifyCursorKeys=3 are supported                  case 2: {                          byte[] data = new byte[] {                              0x1b' (byte)'['' (byte)'1'' (byte)';'' (byte)('0' + m)' (byte)c                          };                          return data;                      }                  case 3: {                          byte[] data = new byte[] {                              0x1b' (byte)'['' (byte)'>'' (byte)'1'' (byte)';'' (byte)('0' + m)' (byte)c                          };                          return data;                      }              }
Magic Number,Poderosa.UI,ColorButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: const int border = 3;
Magic Number,Poderosa.UI,ColorButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: const int right_border = 15;
Magic Number,Poderosa.UI,ColorButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: Rectangle rc = new Rectangle(border' border'                                          r.Width - border - right_border - 1' r.Height - border * 2 - 1);
Magic Number,Poderosa.UI,ColorButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: Point p1 = new Point(r.Width - 9' r.Height / 2 - 1);
Magic Number,Poderosa.UI,ColorButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: Point p1 = new Point(r.Width - 9' r.Height / 2 - 1);
Magic Number,Poderosa.UI,ColorButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: Point p2 = new Point(r.Width - 5' r.Height / 2 - 1);
Magic Number,Poderosa.UI,ColorButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: Point p2 = new Point(r.Width - 5' r.Height / 2 - 1);
Magic Number,Poderosa.UI,ColorButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: p1 = new Point(r.Width - 8' r.Height / 2);
Magic Number,Poderosa.UI,ColorButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: p1 = new Point(r.Width - 8' r.Height / 2);
Magic Number,Poderosa.UI,ColorButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: p2 = new Point(r.Width - 6' r.Height / 2);
Magic Number,Poderosa.UI,ColorButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: p2 = new Point(r.Width - 6' r.Height / 2);
Magic Number,Poderosa.UI,ColorButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: p1 = new Point(r.Width - 7' r.Height / 2);
Magic Number,Poderosa.UI,ColorButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: p1 = new Point(r.Width - 7' r.Height / 2);
Magic Number,Poderosa.UI,ColorButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: p2 = new Point(r.Width - 7' r.Height / 2 + 1);
Magic Number,Poderosa.UI,ColorButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: p2 = new Point(r.Width - 7' r.Height / 2 + 1);
Magic Number,Poderosa.UI,ColorButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: p1 = new Point(r.Width - 12' 4);
Magic Number,Poderosa.UI,ColorButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: p1 = new Point(r.Width - 12' 4);
Magic Number,Poderosa.UI,ColorButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: p2 = new Point(r.Width - 12' r.Height - 5);
Magic Number,Poderosa.UI,ColorButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: p2 = new Point(r.Width - 12' r.Height - 5);
Magic Number,Poderosa.UI,ColorButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: p1 = new Point(r.Width - 11' 4);
Magic Number,Poderosa.UI,ColorButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: p1 = new Point(r.Width - 11' 4);
Magic Number,Poderosa.UI,ColorButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: p2 = new Point(r.Width - 11' r.Height - 5);
Magic Number,Poderosa.UI,ColorButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: p2 = new Point(r.Width - 11' r.Height - 5);
Magic Number,Poderosa.UI,ColorPaletteDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorDialog.cs,ColorPaletteDialog,The following statement contains a magic number: Size = new Size(158' 132);
Magic Number,Poderosa.UI,ColorPaletteDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorDialog.cs,ColorPaletteDialog,The following statement contains a magic number: Size = new Size(158' 132);
Magic Number,Poderosa.UI,ColorPaletteDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorDialog.cs,ColorPaletteDialog,The following statement contains a magic number: moreColorsButton.Size = new Size(142' 22);
Magic Number,Poderosa.UI,ColorPaletteDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorDialog.cs,ColorPaletteDialog,The following statement contains a magic number: moreColorsButton.Size = new Size(142' 22);
Magic Number,Poderosa.UI,ColorPaletteDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorDialog.cs,ColorPaletteDialog,The following statement contains a magic number: moreColorsButton.Location = new Point(5' 99);
Magic Number,Poderosa.UI,ColorPaletteDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorDialog.cs,ColorPaletteDialog,The following statement contains a magic number: moreColorsButton.Location = new Point(5' 99);
Magic Number,Poderosa.UI,ColorPaletteDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorDialog.cs,ColorPaletteDialog,The following statement contains a magic number: cancelButton.Size = new Size(5' 5);
Magic Number,Poderosa.UI,ColorPaletteDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorDialog.cs,ColorPaletteDialog,The following statement contains a magic number: cancelButton.Size = new Size(5' 5);
Magic Number,Poderosa.UI,ColorPaletteDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorDialog.cs,ColorPaletteDialog,The following statement contains a magic number: cancelButton.Location = new Point(-10' -10);
Magic Number,Poderosa.UI,ColorPaletteDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorDialog.cs,ColorPaletteDialog,The following statement contains a magic number: cancelButton.Location = new Point(-10' -10);
Magic Number,Poderosa.UI,ColorPaletteDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorDialog.cs,BuildPalette,The following statement contains a magic number: byte pwidth = 16;
Magic Number,Poderosa.UI,ColorPaletteDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorDialog.cs,BuildPalette,The following statement contains a magic number: byte pheight = 16;
Magic Number,Poderosa.UI,ColorPaletteDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorDialog.cs,BuildPalette,The following statement contains a magic number: byte pdistance = 2;
Magic Number,Poderosa.UI,ColorPaletteDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorDialog.cs,BuildPalette,The following statement contains a magic number: byte border = 5;
Magic Number,Poderosa.UI,ColorPaletteDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorDialog.cs,BuildPalette,The following statement contains a magic number: x < (7 * (pwidth + pdistance))
Magic Number,Poderosa.UI,ColorPaletteDialog,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorDialog.cs,OnMouseDownPanel,The following statement contains a magic number: DrawPanel(sender' 2);
Magic Number,Poderosa.UI,ColorUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorUtil.cs,CalculateColor,The following statement contains a magic number: Color frontColor = Color.FromArgb(255' front);
Magic Number,Poderosa.UI,ColorUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorUtil.cs,CalculateColor,The following statement contains a magic number: Color backColor = Color.FromArgb(255' back);
Magic Number,Poderosa.UI,ColorUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorUtil.cs,CalculateColor,The following statement contains a magic number: float fRed = frontRed * alpha / 255 + backRed * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,ColorUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorUtil.cs,CalculateColor,The following statement contains a magic number: float fRed = frontRed * alpha / 255 + backRed * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,ColorUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorUtil.cs,CalculateColor,The following statement contains a magic number: float fRed = frontRed * alpha / 255 + backRed * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,ColorUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorUtil.cs,CalculateColor,The following statement contains a magic number: float fGreen = frontGreen * alpha / 255 + backGreen * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,ColorUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorUtil.cs,CalculateColor,The following statement contains a magic number: float fGreen = frontGreen * alpha / 255 + backGreen * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,ColorUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorUtil.cs,CalculateColor,The following statement contains a magic number: float fGreen = frontGreen * alpha / 255 + backGreen * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,ColorUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorUtil.cs,CalculateColor,The following statement contains a magic number: float fBlue = frontBlue * alpha / 255 + backBlue * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,ColorUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorUtil.cs,CalculateColor,The following statement contains a magic number: float fBlue = frontBlue * alpha / 255 + backBlue * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,ColorUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorUtil.cs,CalculateColor,The following statement contains a magic number: float fBlue = frontBlue * alpha / 255 + backBlue * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,ColorUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\ColorUtil.cs,CalculateColor,The following statement contains a magic number: return Color.FromArgb(255' newRed' newGreen' newBlue);
Magic Number,Poderosa.UI,GButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GButton.cs,DrawButtonState,The following statement contains a magic number: x = BodyWidth / 2;
Magic Number,Poderosa.UI,GButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GButton.cs,DrawButtonState,The following statement contains a magic number: y = Height / 2;
Magic Number,Poderosa.UI,GButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GButton.cs,DrawComboStyleTriangle,The following statement contains a magic number: int y = this.Height / 2;
Magic Number,Poderosa.UI,GButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GButton.cs,DrawComboStyleTriangle,The following statement contains a magic number: g.DrawLine(p' x' y - 1' x + 5' y - 1);
Magic Number,Poderosa.UI,GButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GButton.cs,DrawComboStyleTriangle,The following statement contains a magic number: g.DrawLine(p' x + 1' y' x + 4' y);
Magic Number,Poderosa.UI,GButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GButton.cs,DrawComboStyleTriangle,The following statement contains a magic number: g.DrawLine(p' x + 2' y + 1' x + 3' y + 1);
Magic Number,Poderosa.UI,GButton,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GButton.cs,DrawComboStyleTriangle,The following statement contains a magic number: g.DrawLine(p' x + 2' y + 1' x + 3' y + 1);
Magic Number,Poderosa.UI,GMainMenuItem,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GMenuItem.cs,DrawHoverRect,The following statement contains a magic number: Rectangle rect = new Rectangle(e.Bounds.X'                  e.Bounds.Y + 1'                  e.Bounds.Width'                  e.Bounds.Height - 2);
Magic Number,Poderosa.UI,GMainMenuItem,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GMenuItem.cs,DrawHoverRect,The following statement contains a magic number: Brush b = new LinearGradientBrush(rect'                  Color.White'                  Consts.CheckBoxColor'                  90f' false);
Magic Number,Poderosa.UI,GMainMenuItem,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GMenuItem.cs,DrawSelectionRect,The following statement contains a magic number: Rectangle rect = new Rectangle(e.Bounds.X'                  e.Bounds.Y + 1'                  e.Bounds.Width'                  e.Bounds.Height - 2);
Magic Number,Poderosa.UI,GMainMenuItem,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GMenuItem.cs,DrawSelectionRect,The following statement contains a magic number: Brush b = new LinearGradientBrush(rect'                  Consts.MenuBgColor'                  Consts.MenuDarkColor2'                  90f' false);
Magic Number,Poderosa.UI,GMenuItem,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GMenuItem.cs,OnMeasureItem,The following statement contains a magic number: e.ItemHeight = 7;
Magic Number,Poderosa.UI,GMenuItem,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GMenuItem.cs,OnMeasureItem,The following statement contains a magic number: e.ItemWidth = 16;
Magic Number,Poderosa.UI,GMenuItem,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GMenuItem.cs,DrawMenuText,The following statement contains a magic number: e.Graphics.DrawLine(_menuLightPen' e.Bounds.X + Consts.PIC_AREA_SIZE + 6' e.Bounds.Y + 2' e.Bounds.Width' e.Bounds.Y + 2);
Magic Number,Poderosa.UI,GMenuItem,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GMenuItem.cs,DrawMenuText,The following statement contains a magic number: e.Graphics.DrawLine(_menuLightPen' e.Bounds.X + Consts.PIC_AREA_SIZE + 6' e.Bounds.Y + 2' e.Bounds.Width' e.Bounds.Y + 2);
Magic Number,Poderosa.UI,GMenuItem,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GMenuItem.cs,DrawMenuText,The following statement contains a magic number: e.Graphics.DrawLine(_menuLightPen' e.Bounds.X + Consts.PIC_AREA_SIZE + 6' e.Bounds.Y + 2' e.Bounds.Width' e.Bounds.Y + 2);
Magic Number,Poderosa.UI,GMenuItem,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GMenuItem.cs,DrawShortCutText,The following statement contains a magic number: Rectangle rect =                      new Rectangle(e.Bounds.Width - Convert.ToInt32(scSize.Width) - 3'                      e.Bounds.Y'                      Convert.ToInt32(scSize.Width) + 3'                      e.Bounds.Height);
Magic Number,Poderosa.UI,GMenuItem,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GMenuItem.cs,DrawShortCutText,The following statement contains a magic number: Rectangle rect =                      new Rectangle(e.Bounds.Width - Convert.ToInt32(scSize.Width) - 3'                      e.Bounds.Y'                      Convert.ToInt32(scSize.Width) + 3'                      e.Bounds.Height);
Magic Number,Poderosa.UI,GMenuItem,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GMenuItem.cs,DrawPictureArea,The following statement contains a magic number: Brush b = new LinearGradientBrush(rect'                  Consts.MenuDarkColor2'                  Consts.MenuLightColor2'                  180f'                  false);
Magic Number,Poderosa.UI,GMenuItem,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GMenuItem.cs,DrawItemPicture,The following statement contains a magic number: const int MAX_PIC_SIZE = 16;
Magic Number,Poderosa.UI,GMenuItem,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GMenuItem.cs,DrawItemPicture,The following statement contains a magic number: int x = e.Bounds.X + 2;
Magic Number,Poderosa.UI,GMenuItem,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GMenuItem.cs,DrawItemPicture,The following statement contains a magic number: int y = e.Bounds.Y + ((e.Bounds.Height - height) / 2);
Magic Number,Poderosa.UI,GMenuItem,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GMenuItem.cs,DrawCheckBox,The following statement contains a magic number: int cbSize = Consts.PIC_AREA_SIZE - 5;
Magic Number,Poderosa.UI,GMenuItem,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GMenuItem.cs,DrawCheckBox,The following statement contains a magic number: Rectangle rect = new Rectangle(e.Bounds.X + 1'                  e.Bounds.Y + ((e.Bounds.Height - cbSize) / 2)'                  cbSize'                  cbSize);
Magic Number,Poderosa.UI,GMenuItem,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GMenuItem.cs,DrawCheckBox,The following statement contains a magic number: Pen pen = new Pen(Color.Black' 1.7f);
Magic Number,Poderosa.UI,GMenuItem,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GMenuItem.cs,DrawCheckBox,The following statement contains a magic number: e.Graphics.DrawLine(pen' e.Bounds.X + 7'                      e.Bounds.Y + 10'                      e.Bounds.X + 10'                      e.Bounds.Y + 14);
Magic Number,Poderosa.UI,GMenuItem,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GMenuItem.cs,DrawCheckBox,The following statement contains a magic number: e.Graphics.DrawLine(pen' e.Bounds.X + 7'                      e.Bounds.Y + 10'                      e.Bounds.X + 10'                      e.Bounds.Y + 14);
Magic Number,Poderosa.UI,GMenuItem,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GMenuItem.cs,DrawCheckBox,The following statement contains a magic number: e.Graphics.DrawLine(pen' e.Bounds.X + 7'                      e.Bounds.Y + 10'                      e.Bounds.X + 10'                      e.Bounds.Y + 14);
Magic Number,Poderosa.UI,GMenuItem,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GMenuItem.cs,DrawCheckBox,The following statement contains a magic number: e.Graphics.DrawLine(pen' e.Bounds.X + 7'                      e.Bounds.Y + 10'                      e.Bounds.X + 10'                      e.Bounds.Y + 14);
Magic Number,Poderosa.UI,GMenuItem,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GMenuItem.cs,DrawCheckBox,The following statement contains a magic number: e.Graphics.DrawLine(pen'                      e.Bounds.X + 10'                      e.Bounds.Y + 14'                      e.Bounds.X + 15'                      e.Bounds.Y + 9);
Magic Number,Poderosa.UI,GMenuItem,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GMenuItem.cs,DrawCheckBox,The following statement contains a magic number: e.Graphics.DrawLine(pen'                      e.Bounds.X + 10'                      e.Bounds.Y + 14'                      e.Bounds.X + 15'                      e.Bounds.Y + 9);
Magic Number,Poderosa.UI,GMenuItem,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GMenuItem.cs,DrawCheckBox,The following statement contains a magic number: e.Graphics.DrawLine(pen'                      e.Bounds.X + 10'                      e.Bounds.Y + 14'                      e.Bounds.X + 15'                      e.Bounds.Y + 9);
Magic Number,Poderosa.UI,GMenuItem,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\GMenuItem.cs,DrawCheckBox,The following statement contains a magic number: e.Graphics.DrawLine(pen'                      e.Bounds.X + 10'                      e.Bounds.Y + 14'                      e.Bounds.X + 15'                      e.Bounds.Y + 9);
Magic Number,Poderosa.UI,HotKey,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\HotKey.cs,AppendDebugText,The following statement contains a magic number: string[] n = new string[5];
Magic Number,Poderosa.UI,HotKey,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\HotKey.cs,AppendDebugText,The following statement contains a magic number: Array.Copy(data' data.Length - 4' n' 0' 4);
Magic Number,Poderosa.UI,HotKey,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\HotKey.cs,AppendDebugText,The following statement contains a magic number: Array.Copy(data' data.Length - 4' n' 0' 4);
Magic Number,Poderosa.UI,HotKey,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\HotKey.cs,AppendDebugText,The following statement contains a magic number: n[4] = text;
Magic Number,Poderosa.UI,HotKey,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\HotKey.cs,AppendDebugText,The following statement contains a magic number: data.Length >= 5
Magic Number,Poderosa.UI,PaneDivision,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneDivision.cs,PaneDivision,The following statement contains a magic number: _countLimit = 16;
Magic Number,Poderosa.UI,PaneDivision,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneDivision.cs,PaneDivision,The following statement contains a magic number: _minimumEdgeLength = 24;
Magic Number,Poderosa.UI,PaneDivision,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneDivision.cs,SplitPane,The following statement contains a magic number: SizeToLength(target.Size' direction) < _minimumEdgeLength * 2 + PaneSplitter.SPLITTER_WIDTH
Magic Number,Poderosa.UI,PaneDivision,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneDivision.cs,UnifyPane,The following statement contains a magic number: bool unifying_root = node.ParentList == _rootList && _rootList.NodeCount == 2;
Magic Number,Poderosa.UI,DivisionNode,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneDivision.cs,InsertNext,The following statement contains a magic number: _ratio /= 2;
Magic Number,Poderosa.UI,Node,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneDivision.cs,ToString,The following statement contains a magic number: bld.Append(_ratio == ALL_OF_REST ? "L" : ((int)(_ratio * 100)).ToString());
Magic Number,Poderosa.UI,Node,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneDivision.cs,Parse,The following statement contains a magic number: int l = SplitFormat.FindChar2(format' colon + 2' '''' ')');
Magic Number,Poderosa.UI,Node,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneDivision.cs,Parse,The following statement contains a magic number: _label = new string(format' colon + 2' l - (colon + 2));
Magic Number,Poderosa.UI,Node,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneDivision.cs,Parse,The following statement contains a magic number: _label = new string(format' colon + 2' l - (colon + 2));
Magic Number,Poderosa.UI,PaneSplitter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneSplitter.cs,PaneSplitter,The following statement contains a magic number: _hotColor = CalculateColor(SystemColors.Highlight' SystemColors.Window' 70);
Magic Number,Poderosa.UI,PaneSplitter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneSplitter.cs,PaneSplitter,The following statement contains a magic number: this.MinSize = 32;
Magic Number,Poderosa.UI,PaneSplitter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneSplitter.cs,PaneSplitter,The following statement contains a magic number: this.MinExtra = 32;
Magic Number,Poderosa.UI,PaneSplitter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneSplitter.cs,OnResize,The following statement contains a magic number: _tagRect = this.IsVSplitter ?                  new Rectangle(0' ((this.ClientSize.Height - TAG_LENGTH) / 2)' SPLITTER_WIDTH' TAG_LENGTH) :                  new Rectangle(((this.ClientSize.Width - TAG_LENGTH) / 2)' 0' TAG_LENGTH' SPLITTER_WIDTH);
Magic Number,Poderosa.UI,PaneSplitter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneSplitter.cs,OnResize,The following statement contains a magic number: _tagRect = this.IsVSplitter ?                  new Rectangle(0' ((this.ClientSize.Height - TAG_LENGTH) / 2)' SPLITTER_WIDTH' TAG_LENGTH) :                  new Rectangle(((this.ClientSize.Width - TAG_LENGTH) / 2)' 0' TAG_LENGTH' SPLITTER_WIDTH);
Magic Number,Poderosa.UI,PaneSplitter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneSplitter.cs,OnPaint,The following statement contains a magic number: g.DrawLine(SystemPens.ControlDark' _tagRect.X + 1' _tagRect.Y' _tagRect.X + _tagRect.Width - 2' _tagRect.Y);
Magic Number,Poderosa.UI,PaneSplitter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneSplitter.cs,OnPaint,The following statement contains a magic number: g.DrawLine(SystemPens.ControlDark' _tagRect.X + 1' _tagRect.Bottom' _tagRect.X + _tagRect.Width - 2' _tagRect.Bottom);
Magic Number,Poderosa.UI,PaneSplitter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneSplitter.cs,OnPaint,The following statement contains a magic number: int y = _tagRect.Y + 14;
Magic Number,Poderosa.UI,PaneSplitter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneSplitter.cs,OnPaint,The following statement contains a magic number: g.DrawLine(SystemPens.ControlDarkDark' x + 1' y + 1' x + 1' y + 2);
Magic Number,Poderosa.UI,PaneSplitter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneSplitter.cs,OnPaint,The following statement contains a magic number: y += 3;
Magic Number,Poderosa.UI,PaneSplitter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneSplitter.cs,OnPaint,The following statement contains a magic number: i < 30
Magic Number,Poderosa.UI,PaneSplitter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneSplitter.cs,CalculateColor,The following statement contains a magic number: Color frontColor = Color.FromArgb(255' front);
Magic Number,Poderosa.UI,PaneSplitter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneSplitter.cs,CalculateColor,The following statement contains a magic number: Color backColor = Color.FromArgb(255' back);
Magic Number,Poderosa.UI,PaneSplitter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneSplitter.cs,CalculateColor,The following statement contains a magic number: float fRed = frontRed * alpha / 255 + backRed * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,PaneSplitter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneSplitter.cs,CalculateColor,The following statement contains a magic number: float fRed = frontRed * alpha / 255 + backRed * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,PaneSplitter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneSplitter.cs,CalculateColor,The following statement contains a magic number: float fRed = frontRed * alpha / 255 + backRed * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,PaneSplitter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneSplitter.cs,CalculateColor,The following statement contains a magic number: float fGreen = frontGreen * alpha / 255 + backGreen * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,PaneSplitter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneSplitter.cs,CalculateColor,The following statement contains a magic number: float fGreen = frontGreen * alpha / 255 + backGreen * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,PaneSplitter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneSplitter.cs,CalculateColor,The following statement contains a magic number: float fGreen = frontGreen * alpha / 255 + backGreen * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,PaneSplitter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneSplitter.cs,CalculateColor,The following statement contains a magic number: float fBlue = frontBlue * alpha / 255 + backBlue * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,PaneSplitter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneSplitter.cs,CalculateColor,The following statement contains a magic number: float fBlue = frontBlue * alpha / 255 + backBlue * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,PaneSplitter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneSplitter.cs,CalculateColor,The following statement contains a magic number: float fBlue = frontBlue * alpha / 255 + backBlue * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,PaneSplitter,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneSplitter.cs,CalculateColor,The following statement contains a magic number: return Color.FromArgb(255' newRed' newGreen' newBlue);
Magic Number,Poderosa.UI,SplitMarkSupport,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneSplitter.cs,OnPaint,The following statement contains a magic number: int mid = _output.SplitClientWidth / 2;
Magic Number,Poderosa.UI,SplitMarkSupport,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneSplitter.cs,OnPaint,The following statement contains a magic number: DrawMark(g' _elementTop' new Rectangle(mid - size.Width / 2' 0' size.Width' size.Height));
Magic Number,Poderosa.UI,SplitMarkSupport,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneSplitter.cs,OnPaint,The following statement contains a magic number: DrawMark(g' _elementBottom' new Rectangle(mid - size.Width / 2' _output.SplitClientHeight - size.Height' size.Width' size.Height));
Magic Number,Poderosa.UI,SplitMarkSupport,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\PaneSplitter.cs,OnMouseMove,The following statement contains a magic number: Near(x' y' _output.SplitClientWidth / 2' MIN_DISTANCE)
Magic Number,Poderosa.UI,IconUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\Util.cs,CreateColoredIcon,The following statement contains a magic number: var rval = color.R / 255f;
Magic Number,Poderosa.UI,IconUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\Util.cs,CreateColoredIcon,The following statement contains a magic number: var gval = color.G / 255f;
Magic Number,Poderosa.UI,IconUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\Util.cs,CreateColoredIcon,The following statement contains a magic number: var bval = color.B / 255f;
Magic Number,Poderosa.Util.Drawing,DrawUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\DrawUtil.cs,DrawRoundRect,The following statement contains a magic number: const int ROUND_SIZE = 3;
Magic Number,Poderosa.Util.Drawing,DrawUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\DrawUtil.cs,DrawRoundCorner,The following statement contains a magic number: i < 3
Magic Number,Poderosa.Util.Drawing,DrawUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\DrawUtil.cs,DrawRoundCorner,The following statement contains a magic number: j < 3
Magic Number,Poderosa.Util.Drawing,DrawUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\DrawUtil.cs,DarkColor,The following statement contains a magic number: return Color.FromArgb(src.R / 2' src.G / 2' src.B / 2);
Magic Number,Poderosa.Util.Drawing,DrawUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\DrawUtil.cs,DarkColor,The following statement contains a magic number: return Color.FromArgb(src.R / 2' src.G / 2' src.B / 2);
Magic Number,Poderosa.Util.Drawing,DrawUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\DrawUtil.cs,DarkColor,The following statement contains a magic number: return Color.FromArgb(src.R / 2' src.G / 2' src.B / 2);
Magic Number,Poderosa.Util.Drawing,DrawUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\DrawUtil.cs,LightColor,The following statement contains a magic number: return Color.FromArgb(src.R / 2 + 128' src.G / 2 + 128' src.B / 2 + 128);
Magic Number,Poderosa.Util.Drawing,DrawUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\DrawUtil.cs,LightColor,The following statement contains a magic number: return Color.FromArgb(src.R / 2 + 128' src.G / 2 + 128' src.B / 2 + 128);
Magic Number,Poderosa.Util.Drawing,DrawUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\DrawUtil.cs,LightColor,The following statement contains a magic number: return Color.FromArgb(src.R / 2 + 128' src.G / 2 + 128' src.B / 2 + 128);
Magic Number,Poderosa.Util.Drawing,DrawUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\DrawUtil.cs,LightColor,The following statement contains a magic number: return Color.FromArgb(src.R / 2 + 128' src.G / 2 + 128' src.B / 2 + 128);
Magic Number,Poderosa.Util.Drawing,DrawUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\DrawUtil.cs,LightColor,The following statement contains a magic number: return Color.FromArgb(src.R / 2 + 128' src.G / 2 + 128' src.B / 2 + 128);
Magic Number,Poderosa.Util.Drawing,DrawUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\DrawUtil.cs,LightColor,The following statement contains a magic number: return Color.FromArgb(src.R / 2 + 128' src.G / 2 + 128' src.B / 2 + 128);
Magic Number,Poderosa.Util.Drawing,DrawUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\DrawUtil.cs,ToCOLORREF,The following statement contains a magic number: return ((t & 0x000000FF) << 16) | (t & 0x0000FF00) | ((t & 0x00FF0000) >> 16);
Magic Number,Poderosa.Util.Drawing,DrawUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\DrawUtil.cs,ToCOLORREF,The following statement contains a magic number: return ((t & 0x000000FF) << 16) | (t & 0x0000FF00) | ((t & 0x00FF0000) >> 16);
Magic Number,Poderosa.Util.Drawing,DrawUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\DrawUtil.cs,DrawOmittedMark,The following statement contains a magic number: Win32.SetPixel(hdc' x + 3' y' c);
Magic Number,Poderosa.Util.Drawing,DrawUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\DrawUtil.cs,DrawOmittedMark,The following statement contains a magic number: Win32.SetPixel(hdc' x + 4' y' c);
Magic Number,Poderosa.Util.Drawing,DrawUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\DrawUtil.cs,DrawOmittedMark,The following statement contains a magic number: Win32.SetPixel(hdc' x + 6' y' c);
Magic Number,Poderosa.Util.Drawing,DrawUtil,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\DrawUtil.cs,DrawOmittedMark,The following statement contains a magic number: Win32.SetPixel(hdc' x + 7' y' c);
Duplicate Code,Granados.SSH2,SSH2KeyExchanger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,GetDiffieHellmanPrime,The method contains a code clone-set at the following line numbers (starting from the method definition): ((41' 60)' (71' 90))
Missing Default,Poderosa.View,TextSelection,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\TextSelection.cs,StartSelection,The following switch statement is missing a default case: switch (type) {                  case RangeType.Char:                      _forwardPivot.Column = position;                      _backwardPivot.Column = position;                      break;                  case RangeType.Word:                      _forwardPivot.Column = line.FindPrevWordBreak(position) + 1;                      _backwardPivot.Column = line.FindNextWordBreak(position);                      break;                  case RangeType.Line:                      _forwardPivot.Column = 0;                      _backwardPivot.Column = line.DisplayLength;                      break;              }
Missing Default,Poderosa.View,TextSelection,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\TextSelection.cs,ExpandTo,The following switch statement is missing a default case: switch (type) {                  case RangeType.Char:                      _forwardDestination.Column = position;                      _backwardDestination.Column = position;                      break;                  case RangeType.Word:                      _forwardDestination.Column = line.FindPrevWordBreak(position) + 1;                      _backwardDestination.Column = line.FindNextWordBreak(position);                      break;                  case RangeType.Line:                      _forwardDestination.Column = 0;                      _backwardDestination.Column = line.DisplayLength;                      break;              }
Missing Default,Poderosa.Document,Unicode,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Core\Unicode.cs,GetCharGroup,The following switch statement is missing a default case: switch (upperByte) {                  case 0x20:                      if (ch == '\u2017') // for OEM850                          return CharGroup.LatinHankaku;                      break;                  case 0x25:  // 0x2500 <= ch <= 0x25ff (Box Drawing | Block Elements | Geometric Shapes)                      return CharGroup.LatinHankaku;                  case 0xe0:                  case 0xe2:  // Half-width caharacters (private character code)                      return CharGroup.CJKHankaku;                  case 0xe1:                  case 0xe3:                  case 0xe4:                  case 0xe5:                  case 0xe6:  // Full-width caharacters (private character code)                      return CharGroup.CJKZenkaku;                  case 0xff:                      if (0xFF61 <= ch && ch <= 0xFFDC) // FF61-FF64:Halfwidth CJK punctuation FF65-FF9F:Halfwidth Katakana FFA0-FFDC:Halfwidth Hangul                          return CharGroup.CJKHankaku;                      else if (0xFFE8 <= ch && ch <= 0xFFEE) // Halfwidth Symbol                          return CharGroup.CJKHankaku;                      else                          return CharGroup.CJKZenkaku;              }
Missing Default,Poderosa.Sessions,ShortcutFileContent,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\ShortcutFile.cs,ParseOldFormat,The following switch statement is missing a default case: switch (attr.Name) {                      case "auth":                          if (ssh != null)                              ssh.AuthenticationType = ParseUtil.ParseEnum<AuthenticationType>(attr.Value' AuthenticationType.Password);                          break;                      case "keyfile":                          if (ssh != null)                              ssh.IdentityFileName = attr.Value;                          break;                      case "encoding":                          settings.Encoding = EncodingType.ISO8859_1;                          foreach (EnumListItem<EncodingType> item in EnumListItem<EncodingType>.GetListItems()) {                              if (attr.Value == item.ToString()) {                                  settings.Encoding = item.Value;                                  break;                              }                          }                          break;                      case "terminal-type":                          settings.TerminalType = ParseUtil.ParseEnum<TerminalType>(attr.Value' TerminalType.XTerm);                          param.SetTerminalName(attr.Value);                          break;                      case "localecho":                          settings.LocalEcho = ParseUtil.ParseBool(attr.Value' false);                          break;                      case "caption":                          settings.Caption = attr.Value;                          break;                      case "transmit-nl":                          settings.TransmitNL = ParseUtil.ParseEnum<NewLine>(attr.Value' NewLine.CR);                          break;                      case "host":                          tcp.Destination = attr.Value;                          break;                      case "port":                          tcp.Port = ParseUtil.ParseInt(attr.Value' ssh != null ? 22 : 23);                          break;                      case "method":                          if (ssh != null)                              ssh.Method = attr.Value == "SSH1" ? SSHProtocol.SSH1 : SSHProtocol.SSH2;                          break;                  }
Missing Default,Poderosa.Sessions,StartCommand,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalSession\StartCommands.cs,AdjustCaptionAndText,The following switch statement is missing a default case: switch (icon) {                      case StartCommandIcon.NewConnection:                          terminal_settings.Icon = Poderosa.TerminalSession.Properties.Resources.NewConnection16x16;                          break;                      case StartCommandIcon.Cygwin:                          terminal_settings.Icon = Poderosa.TerminalSession.Properties.Resources.Cygwin16x16;                          break;                  }
Missing Default,Granados.SSH1,SSH1InteractiveSession,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Channel.cs,ProcessPacket,The following switch statement is missing a default case: switch (_state) {                      case State.Initial:                          break;                      case State.WaitStartPTYResponse:                          if (packetType == SSH1PacketType.SSH_SMSG_SUCCESS) {                              _state = State.StartPTYSuccess;                              Monitor.PulseAll(_stateSync);   // notifies state change                              _receivedPacket.TrySet(packetFragment' PASSING_TIMEOUT);                          }                          else if (packetType == SSH1PacketType.SSH_SMSG_FAILURE) {                              _state = State.StartPTYFailure;                              Monitor.PulseAll(_stateSync);   // notifies state change                              _receivedPacket.TrySet(packetFragment' PASSING_TIMEOUT);                          }                          break;                      case State.Established:                          break;                      case State.Ready:                          switch (packetType) {                              case SSH1PacketType.SSH_SMSG_STDOUT_DATA: {                                      SSH1DataReader reader = new SSH1DataReader(packetFragment);                                      int len = reader.ReadInt32();                                      dataFragmentArg = reader.GetRemainingDataView(len);                                  }                                  goto OnData;    // do it out of the lock block                              case SSH1PacketType.SSH_SMSG_STDERR_DATA: {                                      SSH1DataReader reader = new SSH1DataReader(packetFragment);                                      int len = reader.ReadInt32();                                      dataFragmentArg = reader.GetRemainingDataView(len);                                  }                                  goto OnData;    // do it out of the lock block                              case SSH1PacketType.SSH_SMSG_EXITSTATUS:                                  Transmit(                                      new SSH1Packet(SSH1PacketType.SSH_CMSG_EXIT_CONFIRMATION)                                  );                                  goto SetStateClosedByServer;    // do it out of the lock block                          }                          goto OnUnhandledPacket; // do it out of the lock block                  }
Missing Default,Granados.SSH1,SSH1InteractiveSession,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Channel.cs,ProcessPacket,The following switch statement is missing a default case: switch (packetType) {                              case SSH1PacketType.SSH_SMSG_STDOUT_DATA: {                                      SSH1DataReader reader = new SSH1DataReader(packetFragment);                                      int len = reader.ReadInt32();                                      dataFragmentArg = reader.GetRemainingDataView(len);                                  }                                  goto OnData;    // do it out of the lock block                              case SSH1PacketType.SSH_SMSG_STDERR_DATA: {                                      SSH1DataReader reader = new SSH1DataReader(packetFragment);                                      int len = reader.ReadInt32();                                      dataFragmentArg = reader.GetRemainingDataView(len);                                  }                                  goto OnData;    // do it out of the lock block                              case SSH1PacketType.SSH_SMSG_EXITSTATUS:                                  Transmit(                                      new SSH1Packet(SSH1PacketType.SSH_CMSG_EXIT_CONFIRMATION)                                  );                                  goto SetStateClosedByServer;    // do it out of the lock block                          }
Missing Default,Granados.SSH1,SSH1SubChannelBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Channel.cs,ProcessPacket,The following switch statement is missing a default case: switch (_state) {                      case State.InitiatedByServer:                          break;                      case State.InitiatedByClient:                          if (packetType == SSH1PacketType.SSH_MSG_CHANNEL_OPEN_CONFIRMATION) {                              SSH1DataReader reader = new SSH1DataReader(packetFragment);                              SetRemoteChannel(reader.ReadUInt32());                              _state = State.Established;                              Monitor.PulseAll(_stateSync);   // notifies state change                              dataFragmentArg = new DataFragment(0);                              goto OnEstablished; // do it out of the lock block                          }                          if (packetType == SSH1PacketType.SSH_MSG_CHANNEL_OPEN_FAILURE) {                              goto RequestFailed; // do it out of the lock block                          }                          break;                      case State.Closing:                          if (packetType == SSH1PacketType.SSH_MSG_CHANNEL_CLOSE_CONFIRMATION) {                              goto SetStateClosedByClient;    // do it out of the lock block                          }                          break;                      case State.Established:                      case State.Ready:                          if (ProcessPacketSub(packetType' packetFragment) == SubPacketProcessResult.Consumed) {                              return;                          }                          switch (packetType) {                              case SSH1PacketType.SSH_MSG_CHANNEL_DATA: {                                      SSH1DataReader reader = new SSH1DataReader(packetFragment);                                      int len = reader.ReadInt32();                                      dataFragmentArg = reader.GetRemainingDataView(len);                                  }                                  goto OnData;    // do it out of the lock block                              case SSH1PacketType.SSH_MSG_CHANNEL_CLOSE:                                  Transmit(                                      new SSH1Packet(SSH1PacketType.SSH_MSG_CHANNEL_CLOSE_CONFIRMATION)                                          .WriteUInt32(RemoteChannel)                                  );                                  goto SetStateClosedByServer;    // do it out of the lock block                          }                          goto OnUnhandledPacket; // do it out of the lock block                  }
Missing Default,Granados.SSH1,SSH1SubChannelBase,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Channel.cs,ProcessPacket,The following switch statement is missing a default case: switch (packetType) {                              case SSH1PacketType.SSH_MSG_CHANNEL_DATA: {                                      SSH1DataReader reader = new SSH1DataReader(packetFragment);                                      int len = reader.ReadInt32();                                      dataFragmentArg = reader.GetRemainingDataView(len);                                  }                                  goto OnData;    // do it out of the lock block                              case SSH1PacketType.SSH_MSG_CHANNEL_CLOSE:                                  Transmit(                                      new SSH1Packet(SSH1PacketType.SSH_MSG_CHANNEL_CLOSE_CONFIRMATION)                                          .WriteUInt32(RemoteChannel)                                  );                                  goto SetStateClosedByServer;    // do it out of the lock block                          }
Missing Default,Granados.SSH1,SSH1SynchronousPacketHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Connection.cs,BeforeSend,The following switch statement is missing a default case: switch (packetType) {                  case SSH1PacketType.SSH_CMSG_STDIN_DATA:                  case SSH1PacketType.SSH_SMSG_STDOUT_DATA:                  case SSH1PacketType.SSH_SMSG_STDERR_DATA:                  case SSH1PacketType.SSH_MSG_CHANNEL_DATA:                  case SSH1PacketType.SSH_MSG_IGNORE:                  case SSH1PacketType.SSH_MSG_DEBUG:                      return;              }
Missing Default,Granados.SSH1,SSH1SynchronousPacketHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Connection.cs,AfterReceived,The following switch statement is missing a default case: switch (packetType) {                  case SSH1PacketType.SSH_CMSG_STDIN_DATA:                  case SSH1PacketType.SSH_SMSG_STDOUT_DATA:                  case SSH1PacketType.SSH_SMSG_STDERR_DATA:                  case SSH1PacketType.SSH_MSG_CHANNEL_DATA:                  case SSH1PacketType.SSH_MSG_IGNORE:                  case SSH1PacketType.SSH_MSG_DEBUG:                      return;              }
Missing Default,Granados.SSH1,SSH1RemotePortForwarding,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Connection.cs,InterceptPacket,The following switch statement is missing a default case: switch (_sequenceStatus) {                      case SequenceStatus.WaitPortForwardResponse:                          if (packetType == SSH1PacketType.SSH_SMSG_SUCCESS) {                              _sequenceStatus = SequenceStatus.PortForwardSuccess;                              _receivedPacket.TrySet(packet' PASSING_TIMEOUT);                              return SSHPacketInterceptorResult.Consumed;                          }                          if (packetType == SSH1PacketType.SSH_SMSG_FAILURE) {                              _sequenceStatus = SequenceStatus.PortForwardFailure;                              _receivedPacket.TrySet(packet' PASSING_TIMEOUT);                              return SSHPacketInterceptorResult.Consumed;                          }                          break;                  }
Missing Default,Granados.SSH1,SSH1AgentForwarding,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Connection.cs,InterceptPacket,The following switch statement is missing a default case: switch (_sequenceStatus) {                      case SequenceStatus.WaitAgentForwardingResponse:                          if (packetType == SSH1PacketType.SSH_SMSG_SUCCESS) {                              _sequenceStatus = SequenceStatus.AgentForwardingSuccess;                              _receivedPacket.TrySet(packet' PASSING_TIMEOUT);                              return SSHPacketInterceptorResult.Consumed;                          }                          if (packetType == SSH1PacketType.SSH_SMSG_FAILURE) {                              _sequenceStatus = SequenceStatus.AgentForwardingFailure;                              _receivedPacket.TrySet(packet' PASSING_TIMEOUT);                              return SSHPacketInterceptorResult.Consumed;                          }                          break;                  }
Missing Default,Granados.SSH1,SSH1X11Forwarding,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH1Connection.cs,InterceptPacket,The following switch statement is missing a default case: switch (_sequenceStatus) {                      case SequenceStatus.WaitX11ForwardResponse:                          if (packetType == SSH1PacketType.SSH_SMSG_SUCCESS) {                              _sequenceStatus = SequenceStatus.X11ForwardSuccess;                              _receivedPacket.TrySet(packet' PASSING_TIMEOUT);                              return SSHPacketInterceptorResult.Consumed;                          }                          if (packetType == SSH1PacketType.SSH_SMSG_FAILURE) {                              _sequenceStatus = SequenceStatus.X11ForwardFailure;                              _receivedPacket.TrySet(packet' PASSING_TIMEOUT);                              return SSHPacketInterceptorResult.Consumed;                          }                          break;                  }
Missing Default,Granados.Mono.Math,BigInteger,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\Mono\BigInteger.cs,BigInteger,The following switch statement is missing a default case: switch (leftOver) {  			case 1: data [length-1] = (uint)inData [0]; break;  			case 2: data [length-1] = (uint)((inData [0] << 8) | inData [1]); break;  			case 3: data [length-1] = (uint)((inData [0] << 16) | (inData [1] << 8) | inData [2]); break;  			}
Missing Default,Granados.SSH2,SSH2Connection,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,DoProcessPacket,The following switch statement is missing a default case: switch (packetType) {                  case SSH2PacketType.SSH_MSG_DISCONNECT: {                          int errorcode = reader.ReadInt32();                          _eventHandler.OnConnectionClosed();                      }                      return;                  case SSH2PacketType.SSH_MSG_IGNORE: {                          _eventHandler.OnIgnoreMessage(reader.ReadByteString());                      }                      return;                  case SSH2PacketType.SSH_MSG_DEBUG: {                          bool alwaysDisplay = reader.ReadBool();                          string message = reader.ReadUTF8String();                          string languageTag = reader.ReadString();                          _eventHandler.OnDebugMessage(alwaysDisplay' message);                      }                      return;                  case SSH2PacketType.SSH_MSG_GLOBAL_REQUEST: {                          string requestName = reader.ReadString();                          bool wantReply = reader.ReadBool();                          _protocolEventManager.Trace("Unhandled request: name={0} wantReply={1}"' requestName' wantReply);                          if (wantReply) {                              Transmit(                                  new SSH2Packet(SSH2PacketType.SSH_MSG_REQUEST_FAILURE)                              );                          }                      }                      return;                  case SSH2PacketType.SSH_MSG_CHANNEL_OPEN: { // unhandled channel-open request                          string channelType = reader.ReadString();                          uint remoteChannel = reader.ReadUInt32();                          _protocolEventManager.Trace("Unhandled channel open: channelType={0} remoteChannel={1}"' channelType' remoteChannel);                          _syncHandler.Send(                              new SSH2ChannelOpenFailurePacket(                                  remoteChannel'                                  "Unknown channel type"'                                  SSH2ChannelOpenFailureCode.SSH_OPEN_UNKNOWN_CHANNEL_TYPE                              )                          );                      }                      return;              }
Missing Default,Granados.SSH2,SSH2SynchronousPacketHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,BeforeSend,The following switch statement is missing a default case: switch (packetType) {                  case SSH2PacketType.SSH_MSG_CHANNEL_DATA:                  case SSH2PacketType.SSH_MSG_CHANNEL_EXTENDED_DATA:                  case SSH2PacketType.SSH_MSG_IGNORE:                  case SSH2PacketType.SSH_MSG_DEBUG:                      return;              }
Missing Default,Granados.SSH2,SSH2SynchronousPacketHandler,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,AfterReceived,The following switch statement is missing a default case: switch (packetType) {                  case SSH2PacketType.SSH_MSG_CHANNEL_DATA:                  case SSH2PacketType.SSH_MSG_CHANNEL_EXTENDED_DATA:                  case SSH2PacketType.SSH_MSG_IGNORE:                  case SSH2PacketType.SSH_MSG_DEBUG:                      return;              }
Missing Default,Granados.SSH2,SSH2RemotePortForwarding,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Granados\SSH2Connection.cs,InterceptPacket,The following switch statement is missing a default case: switch (_sequenceStatus) {                      case SequenceStatus.WaitTcpIpForwardResponse:                          if (packetType == SSH2PacketType.SSH_MSG_REQUEST_SUCCESS) {                              _sequenceStatus = SequenceStatus.TcpIpForwardSuccess;                              _receivedPacket.TrySet(packet' PASSING_TIMEOUT);                              return SSHPacketInterceptorResult.Consumed;                          }                          if (packetType == SSH2PacketType.SSH_MSG_REQUEST_FAILURE) {                              _sequenceStatus = SequenceStatus.TcpIpForwardFailure;                              _receivedPacket.TrySet(packet' PASSING_TIMEOUT);                              return SSHPacketInterceptorResult.Consumed;                          }                          break;                        case SequenceStatus.WaitCancelTcpIpForwardResponse:                          if (packetType == SSH2PacketType.SSH_MSG_REQUEST_SUCCESS) {                              _sequenceStatus = SequenceStatus.CancelTcpIpForwardSuccess;                              _receivedPacket.TrySet(packet' PASSING_TIMEOUT);                              return SSHPacketInterceptorResult.Consumed;                          }                          if (packetType == SSH2PacketType.SSH_MSG_REQUEST_FAILURE) {                              _sequenceStatus = SequenceStatus.CancelTcpIpForwardFailure;                              _receivedPacket.TrySet(packet' PASSING_TIMEOUT);                              return SSHPacketInterceptorResult.Consumed;                          }                          break;                  }
Missing Default,Poderosa.Protocols,TelnetNegotiator,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\Protocols\Telnet.cs,Process,The following switch statement is missing a default case: switch (_state) {                  case TelnetCode.IAC:                      if (data == (byte)TelnetCode.SB || ((byte)TelnetCode.WILL <= data && data <= (byte)TelnetCode.DONT))                          _state = (TelnetCode)data;                      else if (data == (byte)TelnetCode.IAC) {                          _state = TelnetCode.NA;                          return ProcessResult.REAL_0xFF;                      }                      else                          _state = TelnetCode.NA;                      break;                  case TelnetCode.SB:                      if (data != (byte)TelnetCode.SE && data != (byte)TelnetOption.NAWS) //IAC SB 0x1F ときてそれっきり、というケースがあった。ホスト側の仕様違反のように見えるが、Poderosaが何かの応答を返すわけではないのでこれで回避                          _sequenceBuffer.WriteByte(data);                      else {                          ProcessSequence(_sequenceBuffer.ToArray());                          _state = TelnetCode.NA;                          _sequenceBuffer.SetLength(0);                      }                      break;                  case TelnetCode.DO:                  case TelnetCode.DONT:                  case TelnetCode.WILL:                  case TelnetCode.WONT:                      ProcessOptionRequest(data);                      _state = TelnetCode.NA;                      break;              }
Missing Default,Poderosa.Terminal,EncodingProfile,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Encoding.cs,Get,The following switch statement is missing a default case: switch (et) {                  case EncodingType.ISO8859_1:                      p = new ISO8859_1Profile();                      break;                  case EncodingType.EUC_JP:                      p = new EUCJPProfile();                      break;                  case EncodingType.SHIFT_JIS:                      p = new ShiftJISProfile();                      break;                  case EncodingType.UTF8:                      p = new UTF8Profile();                      break;                  case EncodingType.UTF8_Latin:                      p = new UTF8_LatinProfile();                      break;                  case EncodingType.GB2312:                      p = new GB2312Profile();                      break;                  case EncodingType.BIG5:                      p = new Big5Profile();                      break;                  case EncodingType.EUC_CN:                      p = new EUCCNProfile();                      break;                  case EncodingType.EUC_KR:                      p = new EUCKRProfile();                      break;                  case EncodingType.OEM850:                      p = new OEM850Profile();                      break;              }
Missing Default,Poderosa.Terminal,LogService,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\Logger.cs,ApplySimpleLogSetting,The following switch statement is missing a default case: switch (sl.LogType) {                  case LogType.Binary:                      AddBinaryLogger(new BinaryLogger(loginfo' fs));                      break;                  case LogType.Default:                  case LogType.PlainTextWithTimestamp:                      bool withTimestamp = (sl.LogType == LogType.PlainTextWithTimestamp);                      AddTextLogger(new DefaultLogger(loginfo' new StreamWriter(fs' Encoding.Default)' withTimestamp));                      break;                  case LogType.Xml:                      AddXmlLogger(new XmlLogger(loginfo' new StreamWriter(fs' Encoding.Default)));                      break;              }
Missing Default,Poderosa.Terminal,GenericShellScheme,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\ShellScheme.cs,DetermineDelimiter,The following switch statement is missing a default case: switch (value[cursor + 1]) {                      case '[':                          return ']';                      case '<':                          return '>';                      case '{':                          return '}';                  }
Missing Default,Poderosa.Terminal,AbstractTerminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalBase.cs,CharDecodeError,The following switch statement is missing a default case: switch (GEnv.Options.CharDecodeErrorBehavior) {                  case WarningOption.StatusBar:                      window.StatusBar.SetMainText(msg);                      break;                  case WarningOption.MessageBox:                      window.AsForm().Invoke(new CharDecodeErrorDialogDelegate(CharDecodeErrorDialog)' window' msg);                      break;              }
Missing Default,Poderosa.Terminal,AbstractTerminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalBase.cs,ShowAbnormalTerminationMessage,The following switch statement is missing a default case: switch (GEnv.Options.DisconnectNotification) {                          case WarningOption.StatusBar:                              window.StatusBar.SetMainText(msg);                              break;                          case WarningOption.MessageBox:                              window.Warning(msg); //TODO Disableオプションつきのサポート                              break;                      }
Missing Default,Poderosa.Terminal,TerminalControl,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,SmartInvalidate,The following switch statement is missing a default case: switch (_drawOptimizingState) {                  case 0:                      _drawOptimizingState = 1;                      InvalidateEx();                      break;                  case 1:                      if (_session.TerminalConnection.Socket.Available)                          Interlocked.Exchange(ref _drawOptimizingState' 2); //間引きモードへ                      else                          InvalidateEx();                      break;                  case 2:                      break; //do nothing              }
Missing Default,Poderosa.Terminal,TerminalControl,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,OnWindowManagerTimer,The following switch statement is missing a default case: switch (_drawOptimizingState) {                  case 0:                      break; //do nothing                  case 1:                      Interlocked.CompareExchange(ref _drawOptimizingState' 0' 1);                      break;                  case 2: //忙しくても偶には描画                      _drawOptimizingState = 1;                      InvalidateEx();                      break;              }
Missing Default,Poderosa.Terminal,TerminalControl,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,ProcessScrollKey,The following switch statement is missing a default case: switch (key) {                  case Keys.Up:                      newvalue = current - 1;                      break;                  case Keys.Down:                      newvalue = current + 1;                      break;                  case Keys.PageUp:                      newvalue = current - doc.TerminalHeight;                      break;                  case Keys.PageDown:                      newvalue = current + doc.TerminalHeight;                      break;                  case Keys.Home:                      newvalue = 0;                      break;                  case Keys.End:                      newvalue = doc.LastLineNumber - doc.FirstLineNumber + 1 - doc.TerminalHeight;                      break;              }
Missing Default,Poderosa.Terminal,TerminalControl,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\TerminalControl.cs,ProcessVScrollMessage,The following switch statement is missing a default case: switch (cmd) {                  case 0: //SB_LINEUP                      newval--;                      break;                  case 1: //SB_LINEDOWN                      newval++;                      break;                  case 2: //SB_PAGEUP                      newval -= GetDocument().TerminalHeight;                      break;                  case 3: //SB_PAGEDOWN                      newval += GetDocument().TerminalHeight;                      break;              }
Missing Default,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessEscapeSequence,The following switch statement is missing a default case: switch (code) {                  case '[':                      if (seq.Length - offset - 1 >= 0) {                          param = new string(seq' offset' seq.Length - offset - 1);                          return ProcessAfterCSI(param' seq[seq.Length - 1]);                      }                      break;                  //throw new UnknownEscapeSequenceException(String.Format("unknown command after CSI {0}"' code));                  case ']':                      if (seq.Length - offset - 1 >= 0) {                          param = new string(seq' offset' seq.Length - offset - 1);                          return ProcessAfterOSC(param' seq[seq.Length - 1]);                      }                      break;                  case '=':                      ChangeMode(TerminalMode.Application);                      return ProcessCharResult.Processed;                  case '>':                      ChangeMode(TerminalMode.Normal);                      return ProcessCharResult.Processed;                  case 'E':                      ProcessNextLine();                      return ProcessCharResult.Processed;                  case 'M':                      ReverseIndex();                      return ProcessCharResult.Processed;                  case 'D':                      Index();                      return ProcessCharResult.Processed;                  case '7':                      SaveCursor();                      return ProcessCharResult.Processed;                  case '8':                      RestoreCursor();                      return ProcessCharResult.Processed;                  case 'c':                      FullReset();                      return ProcessCharResult.Processed;              }
Missing Default,Poderosa.Terminal,VT100Terminal,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\VT100.cs,ProcessCursorMove,The following switch statement is missing a default case: switch (method) {                  case 'A':                      GetDocument().ReplaceCurrentLine(_manipulator.Export());                      GetDocument().CurrentLineNumber = (GetDocument().CurrentLineNumber - count);                      _manipulator.Load(GetDocument().CurrentLine' column);                      break;                  case 'B':                      GetDocument().ReplaceCurrentLine(_manipulator.Export());                      GetDocument().CurrentLineNumber = (GetDocument().CurrentLineNumber + count);                      _manipulator.Load(GetDocument().CurrentLine' column);                      break;                  case 'C': {                          int newvalue = column + count;                          if (newvalue >= GetDocument().TerminalWidth)                              newvalue = GetDocument().TerminalWidth - 1;                          _manipulator.CaretColumn = newvalue;                      }                      break;                  case 'D': {                          int newvalue = column - count;                          if (newvalue < 0)                              newvalue = 0;                          _manipulator.CaretColumn = newvalue;                      }                      break;              }
Missing Default,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessMouse,The following switch statement is missing a default case: switch (action) {                      case TerminalMouseAction.ButtonUp:                      case TerminalMouseAction.ButtonDown:                          _mouseButton = MouseButtons.None;                          break;                  }
Missing Default,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessEscapeSequence,The following switch statement is missing a default case: switch (code) {                  case 'F':                      if (seq.Length == offset) { //パラメータなしの場合                          ProcessCursorPosition(1' 1);                          return ProcessCharResult.Processed;                      }                      else if (seq.Length > offset && seq[offset] == ' ')                          return ProcessCharResult.Processed; //7/8ビットコントロールは常に両方をサポート                      break;                  case 'G':                      if (seq.Length > offset && seq[offset] == ' ')                          return ProcessCharResult.Processed; //7/8ビットコントロールは常に両方をサポート                      break;                  case 'L':                      if (seq.Length > offset && seq[offset] == ' ')                          return ProcessCharResult.Processed; //VT100は最初からOK                      break;                  case 'H':                      SetTabStop(_manipulator.CaretColumn' true);                      return ProcessCharResult.Processed;              }
Missing Default,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessAfterOSC,The following switch statement is missing a default case: switch (vals[0].Length) {                                      case 1:                                          r <<= 4;                                          g <<= 4;                                          b <<= 4;                                          break;                                      case 3:                                          r >>= 4;                                          g >>= 4;                                          b >>= 4;                                          break;                                      case 4:                                          r >>= 8;                                          g >>= 8;                                          b >>= 8;                                          break;                                  }
Missing Default,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessSGR,The following switch statement is missing a default case: switch (state) {                          case 1:                              if (code == 5) { // select indexed color                                  state = 2;                              }                              else if (code == 2) { // select RGB color                                  state = 3;  // read R value                              }                              else {                                  Debug.WriteLine("Invalid SGR code : {0}"' code);                                  goto Apply;                              }                              break;                          case 2:                              if (code < 256) {                                  if (target == 3) {                                      dec = SelectForeColor(dec' code);                                  }                                  else if (target == 4) {                                      dec = SelectBackgroundColor(dec' code);                                  }                              }                              state = 0;                              target = 0;                              break;                          case 3:                              if (code < 256) {                                  r = code;                                  state = 4;  // read G value                              }                              else {                                  Debug.WriteLine("Invalid SGR R value : {0}"' code);                                  goto Apply;                              }                              break;                          case 4:                              if (code < 256) {                                  g = code;                                  state = 5;  // read B value                              }                              else {                                  Debug.WriteLine("Invalid SGR G value : {0}"' code);                                  goto Apply;                              }                              break;                          case 5:                              if (code < 256) {                                  b = code;                                  if (target == 3) {                                      dec = SetForeColorByRGB(dec' r' g' b);                                  }                                  else if (target == 4) {                                      dec = SetBackColorByRGB(dec' r' g' b);                                  }                                  state = 0;                                  target = 0;                              }                              else {                                  Debug.WriteLine("Invalid SGR B value : {0}"' code);                                  goto Apply;                              }                              break;                      }
Missing Default,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessSaveDECSET,The following switch statement is missing a default case: switch (param) {                  case "1047":                  case "47":                      _savedMode_isAlternateBuffer = _isAlternateBuffer;                      break;              }
Missing Default,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ProcessRestoreDECSET,The following switch statement is missing a default case: switch (param) {                  case "1047":                  case "47":                      SwitchBuffer(_savedMode_isAlternateBuffer);                      break;              }
Missing Default,Poderosa.Terminal,XTerm,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\TerminalEmulator\XTerm.cs,ModifyCursorKey,The following switch statement is missing a default case: switch (XTermPreferences.Instance.modifyCursorKeys) {                  // only modifyCursorKeys=2 and modifyCursorKeys=3 are supported                  case 2: {                          byte[] data = new byte[] {                              0x1b' (byte)'['' (byte)'1'' (byte)';'' (byte)('0' + m)' (byte)c                          };                          return data;                      }                  case 3: {                          byte[] data = new byte[] {                              0x1b' (byte)'['' (byte)'>'' (byte)'1'' (byte)';'' (byte)('0' + m)' (byte)c                          };                          return data;                      }              }
Missing Default,Poderosa.Util.Drawing,RoundRectColors,D:\research\architectureSmells\repos\lstratman_EasyConnect\lib\TerminalControl\UI\DrawUtil.cs,GetColor,The following switch statement is missing a default case: switch (e) {                      case RoundBorderElement.Inner:                          return inner_color;                      case RoundBorderElement.Outer:                          return outer_color;                      case RoundBorderElement.Light:                          return light_color;                      case RoundBorderElement.LightLight:                          return lightlight_color;                  }
