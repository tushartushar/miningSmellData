Implementation smell,Namespace,Class,File,Method,Description
Complex Method,iFixit.W8.UI.Common,RichTextColumns,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Common\RichTextColumns.cs,MeasureOverride,Cyclomatic complexity of the method is 8
Long Identifier,iFixit.UI.Shared,VariableGridView,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\VariableGridView.cs,,The length of the parameter ItemRowSpanPropertyPathProperty is 31.
Long Identifier,iFixit.UI.Shared,VariableGridView,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\VariableGridView.cs,,The length of the parameter ItemColSpanPropertyPathProperty is 31.
Long Statement,iFixit.W8.UI,App,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\App.xaml.cs,App_CommandsRequested,The length of the statement  "                SettingsCommand newsCommand = new SettingsCommand("logout"' International.Translation.Logout' (uiCommand) => { Logout(); }); " is 124.
Long Statement,iFixit.W8.UI,App,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\App.xaml.cs,App_CommandsRequested,The length of the statement  "            SettingsCommand logout = new SettingsCommand("logout"' International.Translation.News' (uiCommand) => { LaunchPrivacyPolicyUrl("http://ifixit.org/"); }); " is 153.
Long Statement,iFixit.W8.UI,App,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\App.xaml.cs,App_CommandsRequested,The length of the statement  "            SettingsCommand privacyPolicyCommand = new SettingsCommand("privacyPolicy"' "Privacy Policy"' (uiCommand) => { LaunchPrivacyPolicyUrl("http://www.ifixit.com/Info/Privacy"); }); " is 176.
Long Statement,iFixit.W8.UI,App,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\App.xaml.cs,Logout,The length of the statement  "            Domain.Services.V2_0.ServiceBroker Broker = new Domain.Services.V2_0.ServiceBroker(_settingsService.AppKey()' _settingsService.AppVersion()); " is 141.
Long Statement,iFixit.W8.UI.Common,SuspensionManager,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Common\SuspensionManager.cs,SaveAsync,The length of the statement  "                StorageFile file = await ApplicationData.Current.LocalFolder.CreateFileAsync(sessionStateFilename' CreationCollisionOption.ReplaceExisting); " is 140.
Long Statement,iFixit.W8.UI.Common,SuspensionManager,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Common\SuspensionManager.cs,RegisterFrame,The length of the statement  "                throw new InvalidOperationException("Frames must be either be registered before accessing frame session state' or not registered at all"); " is 138.
Long Statement,iFixit.UI.Shared,Properties,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\RichTextBlockProperties.cs,GenerateHyperLink,The length of the statement  "            hb = new HyperlinkButton() { NavigateUri = new Uri(lk' UriKind.RelativeOrAbsolute)' Content = CleanText(node.InnerText)'  }; " is 124.
Long Statement,iFixit.UI.Shared,Properties,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\RichTextBlockProperties.cs,GenerateHyperLink,The length of the statement  "            else if ((node.NextSibling == null || string.IsNullOrWhiteSpace(node.NextSibling.InnerText)) && (node.PreviousSibling == null || string.IsNullOrWhiteSpace(node.PreviousSibling.InnerText))) " is 188.
Long Statement,iFixit.UI.Shared,Properties,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\RichTextBlockProperties.cs,ConvertHtmlToXamlRichTextBlock,The length of the statement  "                catch { } // For some reason code in catch is not executed when an exception occurs in design mode' so we can't display a friendly error here. " is 142.
Long Statement,iFixit.UI.Shared,Properties,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\RichTextBlockProperties.cs,ConvertHtmlToXamlRichTextBlock2,The length of the statement  "            string xaml = "<?xml version=\"1.0\"?><RichTextBlock xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">"; " is 180.
Long Statement,iFixit.UI.Shared,Properties,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\RichTextBlockProperties.cs,GenerateBlockForNode_old,The length of the statement  "                        //    result = "<Span><InlineUIContainer><Image Style=\"{StaticResource RTImage}\" Width=\"500\" Source=\"" + node.Attributes["src"].Value + "\"></Image></InlineUIContainer></Span>"; " is 182.
Long Statement,iFixit.UI.Shared,Properties,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\RichTextBlockProperties.cs,GenerateBlockForNode_old,The length of the statement  "                        result = "<Span><InlineUIContainer><Image Style=\"{StaticResource RTImage}\" Source=\"" + node.Attributes["src"].Value + "\"></Image></InlineUIContainer></Span>"; " is 162.
Long Statement,iFixit.UI.Shared,Properties,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\RichTextBlockProperties.cs,GenerateBlockForNode_old,The length of the statement  "                            result = "<Span><InlineUIContainer><HyperlinkButton Style=\"{StaticResource RTLinkLI}\" NavigateUri=\"" + node.Attributes["href"].Value + "\">" + CleanText(node.InnerText) + "</HyperlinkButton></InlineUIContainer></Span>"; " is 222.
Long Statement,iFixit.UI.Shared,Properties,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\RichTextBlockProperties.cs,GenerateBlockForNode_old,The length of the statement  "                        else if ((node.NextSibling == null || string.IsNullOrWhiteSpace(node.NextSibling.InnerText)) && (node.PreviousSibling == null || string.IsNullOrWhiteSpace(node.PreviousSibling.InnerText))) " is 188.
Long Statement,iFixit.UI.Shared,Properties,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\RichTextBlockProperties.cs,GenerateBlockForNode_old,The length of the statement  "                            result = "<Span><InlineUIContainer><HyperlinkButton Style=\"{StaticResource RTLinkOnly}\" NavigateUri=\"" + node.Attributes["href"].Value + "\">" + CleanText(node.InnerText) + "</HyperlinkButton></InlineUIContainer></Span>"; " is 224.
Long Statement,iFixit.UI.Shared,Properties,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\RichTextBlockProperties.cs,GenerateBlockForNode_old,The length of the statement  "                            result = "<Span><InlineUIContainer><HyperlinkButton Style=\"{StaticResource RTLink}\" NavigateUri=\"" + node.Attributes["href"].Value + "\">" + CleanText(node.InnerText) + "</HyperlinkButton></InlineUIContainer></Span>"; " is 220.
Long Statement,iFixit.UI.Shared,Properties,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\RichTextBlockProperties.cs,GenerateBlockForNode_old,The length of the statement  "                    result = "<Span><InlineUIContainer><Ellipse Style=\"{StaticResource RTBullet}\"/></InlineUIContainer>" + GenerateBlockForChildren(node) + "<LineBreak /></Span>"; " is 161.
Long Statement,iFixit.Shared,TileCanvas,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\TileCanvas.cs,ImageOnImageFailed,The length of the statement  "            Children.Add(new TextBlock { Text = exceptionRoutedEventArgs.ErrorMessage' Foreground = new SolidColorBrush(Colors.Red) }); " is 123.
Long Statement,iFixit.W8.UI.Views,GuideDetails,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Views\GuideDetails.xaml.cs,OnNavigatedTo,The length of the statement  "            dataTransferManager.DataRequested += new TypedEventHandler<DataTransferManager' DataRequestedEventArgs>(this.OnDataRequested); " is 126.
Long Statement,iFixit.W8.UI.Views,GuideDetails,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Views\GuideDetails.xaml.cs,OnNavigatedFrom,The length of the statement  "            dataTransferManager.DataRequested -= new TypedEventHandler<DataTransferManager' DataRequestedEventArgs>(this.OnDataRequested); " is 126.
Long Statement,iFixit.W8.UI.Views,GuideDetails,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Views\GuideDetails.xaml.cs,SuperImage_Tapped,The length of the statement  "            iFixit.Domain.Models.UI.GuideStepItem item = (iFixit.Domain.Models.UI.GuideStepItem)((Coding4Fun.Toolkit.Controls.SuperImage)sender).DataContext; " is 145.
Complex Conditional,iFixit.W8.UI.Common,LayoutAwarePage,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "(args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167)"  is complex.
Complex Conditional,iFixit.W8.UI.Common,LayoutAwarePage,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt)"  is complex.
Complex Conditional,iFixit.W8.UI.Common,LayoutAwarePage,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt)"  is complex.
Complex Conditional,iFixit.UI.Shared,Properties,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\RichTextBlockProperties.cs,GenerateHyperLink,The conditional expression  "(node.NextSibling == null || string.IsNullOrWhiteSpace(node.NextSibling.InnerText)) && (node.PreviousSibling == null || string.IsNullOrWhiteSpace(node.PreviousSibling.InnerText))"  is complex.
Complex Conditional,iFixit.UI.Shared,Properties,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\RichTextBlockProperties.cs,GenerateBlockForNode_old,The conditional expression  "(node.NextSibling == null || string.IsNullOrWhiteSpace(node.NextSibling.InnerText)) && (node.PreviousSibling == null || string.IsNullOrWhiteSpace(node.PreviousSibling.InnerText))"  is complex.
Empty Catch Block,iFixit.W8.UI,App,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\App.xaml.cs,OnLaunched,The method has an empty catch block.
Empty Catch Block,iFixit.W8.UI,App,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\App.xaml.cs,OnSearchActivated,The method has an empty catch block.
Empty Catch Block,iFixit.UI.Shared,Properties,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\RichTextBlockProperties.cs,GenerateBlocksForHtml,The method has an empty catch block.
Empty Catch Block,iFixit.UI.Shared,Properties,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\RichTextBlockProperties.cs,GenerateImage,The method has an empty catch block.
Empty Catch Block,iFixit.UI.Shared,Properties,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\RichTextBlockProperties.cs,ConvertHtmlToXamlRichTextBlock,The method has an empty catch block.
Empty Catch Block,iFixit.UI.Shared,Properties,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\RichTextBlockProperties.cs,ConvertHtmlToXamlRichTextBlock2,The method has an empty catch block.
Magic Number,iFixit.W8.UI,App,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\App.xaml.cs,App_CommandsRequested,The following statement contains a magic number: if (AppBase.Current.User == null)              {                  Callisto.Controls.SettingsFlyout LoginFlyout = new Callisto.Controls.SettingsFlyout();                  SettingsCommand aboutsc = new SettingsCommand("LoginW"' International.Translation.Login' (x) =>                  {                        LoginFlyout.FlyoutWidth = Callisto.Controls.SettingsFlyout.SettingsFlyoutWidth.Wide;                      LoginFlyout.HeaderText = International.Translation.Login;                      LoginFlyout.Content = new Views.UC.Login();                      LoginFlyout.HeaderBrush = new SolidColorBrush(Color.FromArgb(255' 0' 113' 206));                        LoginFlyout.IsOpen = true;                        });                    args.Request.ApplicationCommands.Add(aboutsc);              }              else              {                  Callisto.Controls.SettingsFlyout ProfileFlyout = new Callisto.Controls.SettingsFlyout();                  SettingsCommand aboutsc = new SettingsCommand("ProfileFlyout"' International.Translation.Profile' (x) =>                  {                        ProfileFlyout.FlyoutWidth = Callisto.Controls.SettingsFlyout.SettingsFlyoutWidth.Wide;                      ProfileFlyout.HeaderText = International.Translation.Profile;                      ProfileFlyout.Content = new Views.UC.Profile();                      ProfileFlyout.HeaderBrush = new SolidColorBrush(Color.FromArgb(255' 0' 113' 206));                      ProfileFlyout.IsOpen = true;                        });                    args.Request.ApplicationCommands.Add(aboutsc);                      SettingsCommand newsCommand = new SettingsCommand("logout"' International.Translation.Logout' (uiCommand) => { Logout(); });                  args.Request.ApplicationCommands.Add(newsCommand);                }
Magic Number,iFixit.W8.UI,App,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\App.xaml.cs,App_CommandsRequested,The following statement contains a magic number: if (AppBase.Current.User == null)              {                  Callisto.Controls.SettingsFlyout LoginFlyout = new Callisto.Controls.SettingsFlyout();                  SettingsCommand aboutsc = new SettingsCommand("LoginW"' International.Translation.Login' (x) =>                  {                        LoginFlyout.FlyoutWidth = Callisto.Controls.SettingsFlyout.SettingsFlyoutWidth.Wide;                      LoginFlyout.HeaderText = International.Translation.Login;                      LoginFlyout.Content = new Views.UC.Login();                      LoginFlyout.HeaderBrush = new SolidColorBrush(Color.FromArgb(255' 0' 113' 206));                        LoginFlyout.IsOpen = true;                        });                    args.Request.ApplicationCommands.Add(aboutsc);              }              else              {                  Callisto.Controls.SettingsFlyout ProfileFlyout = new Callisto.Controls.SettingsFlyout();                  SettingsCommand aboutsc = new SettingsCommand("ProfileFlyout"' International.Translation.Profile' (x) =>                  {                        ProfileFlyout.FlyoutWidth = Callisto.Controls.SettingsFlyout.SettingsFlyoutWidth.Wide;                      ProfileFlyout.HeaderText = International.Translation.Profile;                      ProfileFlyout.Content = new Views.UC.Profile();                      ProfileFlyout.HeaderBrush = new SolidColorBrush(Color.FromArgb(255' 0' 113' 206));                      ProfileFlyout.IsOpen = true;                        });                    args.Request.ApplicationCommands.Add(aboutsc);                      SettingsCommand newsCommand = new SettingsCommand("logout"' International.Translation.Logout' (uiCommand) => { Logout(); });                  args.Request.ApplicationCommands.Add(newsCommand);                }
Magic Number,iFixit.W8.UI,App,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\App.xaml.cs,App_CommandsRequested,The following statement contains a magic number: if (AppBase.Current.User == null)              {                  Callisto.Controls.SettingsFlyout LoginFlyout = new Callisto.Controls.SettingsFlyout();                  SettingsCommand aboutsc = new SettingsCommand("LoginW"' International.Translation.Login' (x) =>                  {                        LoginFlyout.FlyoutWidth = Callisto.Controls.SettingsFlyout.SettingsFlyoutWidth.Wide;                      LoginFlyout.HeaderText = International.Translation.Login;                      LoginFlyout.Content = new Views.UC.Login();                      LoginFlyout.HeaderBrush = new SolidColorBrush(Color.FromArgb(255' 0' 113' 206));                        LoginFlyout.IsOpen = true;                        });                    args.Request.ApplicationCommands.Add(aboutsc);              }              else              {                  Callisto.Controls.SettingsFlyout ProfileFlyout = new Callisto.Controls.SettingsFlyout();                  SettingsCommand aboutsc = new SettingsCommand("ProfileFlyout"' International.Translation.Profile' (x) =>                  {                        ProfileFlyout.FlyoutWidth = Callisto.Controls.SettingsFlyout.SettingsFlyoutWidth.Wide;                      ProfileFlyout.HeaderText = International.Translation.Profile;                      ProfileFlyout.Content = new Views.UC.Profile();                      ProfileFlyout.HeaderBrush = new SolidColorBrush(Color.FromArgb(255' 0' 113' 206));                      ProfileFlyout.IsOpen = true;                        });                    args.Request.ApplicationCommands.Add(aboutsc);                      SettingsCommand newsCommand = new SettingsCommand("logout"' International.Translation.Logout' (uiCommand) => { Logout(); });                  args.Request.ApplicationCommands.Add(newsCommand);                }
Magic Number,iFixit.W8.UI,App,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\App.xaml.cs,App_CommandsRequested,The following statement contains a magic number: if (AppBase.Current.User == null)              {                  Callisto.Controls.SettingsFlyout LoginFlyout = new Callisto.Controls.SettingsFlyout();                  SettingsCommand aboutsc = new SettingsCommand("LoginW"' International.Translation.Login' (x) =>                  {                        LoginFlyout.FlyoutWidth = Callisto.Controls.SettingsFlyout.SettingsFlyoutWidth.Wide;                      LoginFlyout.HeaderText = International.Translation.Login;                      LoginFlyout.Content = new Views.UC.Login();                      LoginFlyout.HeaderBrush = new SolidColorBrush(Color.FromArgb(255' 0' 113' 206));                        LoginFlyout.IsOpen = true;                        });                    args.Request.ApplicationCommands.Add(aboutsc);              }              else              {                  Callisto.Controls.SettingsFlyout ProfileFlyout = new Callisto.Controls.SettingsFlyout();                  SettingsCommand aboutsc = new SettingsCommand("ProfileFlyout"' International.Translation.Profile' (x) =>                  {                        ProfileFlyout.FlyoutWidth = Callisto.Controls.SettingsFlyout.SettingsFlyoutWidth.Wide;                      ProfileFlyout.HeaderText = International.Translation.Profile;                      ProfileFlyout.Content = new Views.UC.Profile();                      ProfileFlyout.HeaderBrush = new SolidColorBrush(Color.FromArgb(255' 0' 113' 206));                      ProfileFlyout.IsOpen = true;                        });                    args.Request.ApplicationCommands.Add(aboutsc);                      SettingsCommand newsCommand = new SettingsCommand("logout"' International.Translation.Logout' (uiCommand) => { Logout(); });                  args.Request.ApplicationCommands.Add(newsCommand);                }
Magic Number,iFixit.W8.UI,App,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\App.xaml.cs,App_CommandsRequested,The following statement contains a magic number: if (AppBase.Current.User == null)              {                  Callisto.Controls.SettingsFlyout LoginFlyout = new Callisto.Controls.SettingsFlyout();                  SettingsCommand aboutsc = new SettingsCommand("LoginW"' International.Translation.Login' (x) =>                  {                        LoginFlyout.FlyoutWidth = Callisto.Controls.SettingsFlyout.SettingsFlyoutWidth.Wide;                      LoginFlyout.HeaderText = International.Translation.Login;                      LoginFlyout.Content = new Views.UC.Login();                      LoginFlyout.HeaderBrush = new SolidColorBrush(Color.FromArgb(255' 0' 113' 206));                        LoginFlyout.IsOpen = true;                        });                    args.Request.ApplicationCommands.Add(aboutsc);              }              else              {                  Callisto.Controls.SettingsFlyout ProfileFlyout = new Callisto.Controls.SettingsFlyout();                  SettingsCommand aboutsc = new SettingsCommand("ProfileFlyout"' International.Translation.Profile' (x) =>                  {                        ProfileFlyout.FlyoutWidth = Callisto.Controls.SettingsFlyout.SettingsFlyoutWidth.Wide;                      ProfileFlyout.HeaderText = International.Translation.Profile;                      ProfileFlyout.Content = new Views.UC.Profile();                      ProfileFlyout.HeaderBrush = new SolidColorBrush(Color.FromArgb(255' 0' 113' 206));                      ProfileFlyout.IsOpen = true;                        });                    args.Request.ApplicationCommands.Add(aboutsc);                      SettingsCommand newsCommand = new SettingsCommand("logout"' International.Translation.Logout' (uiCommand) => { Logout(); });                  args.Request.ApplicationCommands.Add(newsCommand);                }
Magic Number,iFixit.W8.UI,App,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\App.xaml.cs,App_CommandsRequested,The following statement contains a magic number: if (AppBase.Current.User == null)              {                  Callisto.Controls.SettingsFlyout LoginFlyout = new Callisto.Controls.SettingsFlyout();                  SettingsCommand aboutsc = new SettingsCommand("LoginW"' International.Translation.Login' (x) =>                  {                        LoginFlyout.FlyoutWidth = Callisto.Controls.SettingsFlyout.SettingsFlyoutWidth.Wide;                      LoginFlyout.HeaderText = International.Translation.Login;                      LoginFlyout.Content = new Views.UC.Login();                      LoginFlyout.HeaderBrush = new SolidColorBrush(Color.FromArgb(255' 0' 113' 206));                        LoginFlyout.IsOpen = true;                        });                    args.Request.ApplicationCommands.Add(aboutsc);              }              else              {                  Callisto.Controls.SettingsFlyout ProfileFlyout = new Callisto.Controls.SettingsFlyout();                  SettingsCommand aboutsc = new SettingsCommand("ProfileFlyout"' International.Translation.Profile' (x) =>                  {                        ProfileFlyout.FlyoutWidth = Callisto.Controls.SettingsFlyout.SettingsFlyoutWidth.Wide;                      ProfileFlyout.HeaderText = International.Translation.Profile;                      ProfileFlyout.Content = new Views.UC.Profile();                      ProfileFlyout.HeaderBrush = new SolidColorBrush(Color.FromArgb(255' 0' 113' 206));                      ProfileFlyout.IsOpen = true;                        });                    args.Request.ApplicationCommands.Add(aboutsc);                      SettingsCommand newsCommand = new SettingsCommand("logout"' International.Translation.Logout' (uiCommand) => { Logout(); });                  args.Request.ApplicationCommands.Add(newsCommand);                }
Magic Number,iFixit.W8.UI.Common,LayoutAwarePage,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      args.Handled = true;                      this.GoBack(this' new RoutedEventArgs());                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      args.Handled = true;                      this.GoForward(this' new RoutedEventArgs());                  }              }
Magic Number,iFixit.W8.UI.Common,LayoutAwarePage,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      args.Handled = true;                      this.GoBack(this' new RoutedEventArgs());                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      args.Handled = true;                      this.GoForward(this' new RoutedEventArgs());                  }              }
Magic Number,iFixit.W8.UI.Common,LayoutAwarePage,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      args.Handled = true;                      this.GoBack(this' new RoutedEventArgs());                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      args.Handled = true;                      this.GoForward(this' new RoutedEventArgs());                  }              }
Magic Number,iFixit.W8.UI.Common,LayoutAwarePage,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      args.Handled = true;                      this.GoBack(this' new RoutedEventArgs());                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      args.Handled = true;                      this.GoForward(this' new RoutedEventArgs());                  }              }
Magic Number,iFixit.UI.Shared,TextIdentConverter,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\Converters.cs,Convert,The following statement contains a magic number: return new Thickness((int.Parse(value.ToString())) * 12' 0' 0' 6);
Magic Number,iFixit.UI.Shared,TextIdentConverter,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\Converters.cs,Convert,The following statement contains a magic number: return new Thickness((int.Parse(value.ToString())) * 12' 0' 0' 6);
Magic Number,iFixit.UI.Shared,Properties,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\RichTextBlockProperties.cs,GenerateLI,The following statement contains a magic number: ellipse.Width = 6;
Magic Number,iFixit.UI.Shared,Properties,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\RichTextBlockProperties.cs,GenerateLI,The following statement contains a magic number: ellipse.Height = 6;
Magic Number,iFixit.UI.Shared,Properties,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\RichTextBlockProperties.cs,GenerateLI,The following statement contains a magic number: ellipse.Margin = new Thickness(-30' 0' 0' 1);
Magic Number,iFixit.UI.Shared,Properties,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\RichTextBlockProperties.cs,img_ImageFailed,The following statement contains a magic number: var i = 5;
Magic Number,iFixit.UI.Shared,Properties,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\RichTextBlockProperties.cs,img_ImageOpened,The following statement contains a magic number: if (bimg.PixelWidth > 800 || bimg.PixelHeight > 600)              {                  img.Width = 800; img.Height = 600;                  if (bimg.PixelWidth > 800)                  {                      img.Width = 800;                      img.Height = (800.0 / (double)bimg.PixelWidth) * bimg.PixelHeight;                  }                  if (img.Height > 600)                  {                      img.Height = 600;                      img.Width = (600.0 / (double)img.Height) * img.Width;                  }              }              else              {                  img.Height = bimg.PixelHeight;                  img.Width = bimg.PixelWidth;              }
Magic Number,iFixit.UI.Shared,Properties,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\RichTextBlockProperties.cs,img_ImageOpened,The following statement contains a magic number: if (bimg.PixelWidth > 800 || bimg.PixelHeight > 600)              {                  img.Width = 800; img.Height = 600;                  if (bimg.PixelWidth > 800)                  {                      img.Width = 800;                      img.Height = (800.0 / (double)bimg.PixelWidth) * bimg.PixelHeight;                  }                  if (img.Height > 600)                  {                      img.Height = 600;                      img.Width = (600.0 / (double)img.Height) * img.Width;                  }              }              else              {                  img.Height = bimg.PixelHeight;                  img.Width = bimg.PixelWidth;              }
Magic Number,iFixit.UI.Shared,Properties,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\RichTextBlockProperties.cs,img_ImageOpened,The following statement contains a magic number: if (bimg.PixelWidth > 800 || bimg.PixelHeight > 600)              {                  img.Width = 800; img.Height = 600;                  if (bimg.PixelWidth > 800)                  {                      img.Width = 800;                      img.Height = (800.0 / (double)bimg.PixelWidth) * bimg.PixelHeight;                  }                  if (img.Height > 600)                  {                      img.Height = 600;                      img.Width = (600.0 / (double)img.Height) * img.Width;                  }              }              else              {                  img.Height = bimg.PixelHeight;                  img.Width = bimg.PixelWidth;              }
Magic Number,iFixit.UI.Shared,Properties,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\RichTextBlockProperties.cs,img_ImageOpened,The following statement contains a magic number: if (bimg.PixelWidth > 800 || bimg.PixelHeight > 600)              {                  img.Width = 800; img.Height = 600;                  if (bimg.PixelWidth > 800)                  {                      img.Width = 800;                      img.Height = (800.0 / (double)bimg.PixelWidth) * bimg.PixelHeight;                  }                  if (img.Height > 600)                  {                      img.Height = 600;                      img.Width = (600.0 / (double)img.Height) * img.Width;                  }              }              else              {                  img.Height = bimg.PixelHeight;                  img.Width = bimg.PixelWidth;              }
Magic Number,iFixit.UI.Shared,Properties,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\RichTextBlockProperties.cs,img_ImageOpened,The following statement contains a magic number: if (bimg.PixelWidth > 800 || bimg.PixelHeight > 600)              {                  img.Width = 800; img.Height = 600;                  if (bimg.PixelWidth > 800)                  {                      img.Width = 800;                      img.Height = (800.0 / (double)bimg.PixelWidth) * bimg.PixelHeight;                  }                  if (img.Height > 600)                  {                      img.Height = 600;                      img.Width = (600.0 / (double)img.Height) * img.Width;                  }              }              else              {                  img.Height = bimg.PixelHeight;                  img.Width = bimg.PixelWidth;              }
Magic Number,iFixit.UI.Shared,Properties,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\RichTextBlockProperties.cs,img_ImageOpened,The following statement contains a magic number: if (bimg.PixelWidth > 800 || bimg.PixelHeight > 600)              {                  img.Width = 800; img.Height = 600;                  if (bimg.PixelWidth > 800)                  {                      img.Width = 800;                      img.Height = (800.0 / (double)bimg.PixelWidth) * bimg.PixelHeight;                  }                  if (img.Height > 600)                  {                      img.Height = 600;                      img.Width = (600.0 / (double)img.Height) * img.Width;                  }              }              else              {                  img.Height = bimg.PixelHeight;                  img.Width = bimg.PixelWidth;              }
Magic Number,iFixit.UI.Shared,Properties,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\RichTextBlockProperties.cs,img_ImageOpened,The following statement contains a magic number: if (bimg.PixelWidth > 800 || bimg.PixelHeight > 600)              {                  img.Width = 800; img.Height = 600;                  if (bimg.PixelWidth > 800)                  {                      img.Width = 800;                      img.Height = (800.0 / (double)bimg.PixelWidth) * bimg.PixelHeight;                  }                  if (img.Height > 600)                  {                      img.Height = 600;                      img.Width = (600.0 / (double)img.Height) * img.Width;                  }              }              else              {                  img.Height = bimg.PixelHeight;                  img.Width = bimg.PixelWidth;              }
Magic Number,iFixit.UI.Shared,Properties,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\RichTextBlockProperties.cs,img_ImageOpened,The following statement contains a magic number: if (bimg.PixelWidth > 800 || bimg.PixelHeight > 600)              {                  img.Width = 800; img.Height = 600;                  if (bimg.PixelWidth > 800)                  {                      img.Width = 800;                      img.Height = (800.0 / (double)bimg.PixelWidth) * bimg.PixelHeight;                  }                  if (img.Height > 600)                  {                      img.Height = 600;                      img.Width = (600.0 / (double)img.Height) * img.Width;                  }              }              else              {                  img.Height = bimg.PixelHeight;                  img.Width = bimg.PixelWidth;              }
Magic Number,iFixit.UI.Shared,Properties,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\RichTextBlockProperties.cs,img_ImageOpened,The following statement contains a magic number: if (bimg.PixelWidth > 800 || bimg.PixelHeight > 600)              {                  img.Width = 800; img.Height = 600;                  if (bimg.PixelWidth > 800)                  {                      img.Width = 800;                      img.Height = (800.0 / (double)bimg.PixelWidth) * bimg.PixelHeight;                  }                  if (img.Height > 600)                  {                      img.Height = 600;                      img.Width = (600.0 / (double)img.Height) * img.Width;                  }              }              else              {                  img.Height = bimg.PixelHeight;                  img.Width = bimg.PixelWidth;              }
Magic Number,iFixit.UI.Shared,Properties,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\RichTextBlockProperties.cs,img_ImageOpened,The following statement contains a magic number: if (bimg.PixelWidth > 800 || bimg.PixelHeight > 600)              {                  img.Width = 800; img.Height = 600;                  if (bimg.PixelWidth > 800)                  {                      img.Width = 800;                      img.Height = (800.0 / (double)bimg.PixelWidth) * bimg.PixelHeight;                  }                  if (img.Height > 600)                  {                      img.Height = 600;                      img.Width = (600.0 / (double)img.Height) * img.Width;                  }              }              else              {                  img.Height = bimg.PixelHeight;                  img.Width = bimg.PixelWidth;              }
Magic Number,iFixit.UI.Shared,Properties,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\RichTextBlockProperties.cs,GenerateIFrame,The following statement contains a magic number: try              {                  Span s = new Span();                  s.Inlines.Add(new LineBreak());                  InlineUIContainer iui = new InlineUIContainer();                  //WebView ww = new WebView() { Source = new Uri(node.Attributes["src"].Value' UriKind.Absolute)                  //    ' Width = Int32.Parse(node.Attributes["width"].Value)' Height = Int32.Parse(node.Attributes["height"].Value) };                    int height = 160;                  int width = 300;                                   WebView ww = new WebView()                  {                      Source = new Uri(node.Attributes["src"].Value' UriKind.Absolute)                      '                      Width = width'                      Height = height                  };                                    iui.Child = ww;                  s.Inlines.Add(iui);                  s.Inlines.Add(new LineBreak());                  return s;              }              catch (Exception ex)              {                  return null;              }
Magic Number,iFixit.UI.Shared,Properties,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Shared\RichTextBlockProperties.cs,GenerateIFrame,The following statement contains a magic number: try              {                  Span s = new Span();                  s.Inlines.Add(new LineBreak());                  InlineUIContainer iui = new InlineUIContainer();                  //WebView ww = new WebView() { Source = new Uri(node.Attributes["src"].Value' UriKind.Absolute)                  //    ' Width = Int32.Parse(node.Attributes["width"].Value)' Height = Int32.Parse(node.Attributes["height"].Value) };                    int height = 160;                  int width = 300;                                   WebView ww = new WebView()                  {                      Source = new Uri(node.Attributes["src"].Value' UriKind.Absolute)                      '                      Width = width'                      Height = height                  };                                    iui.Child = ww;                  s.Inlines.Add(iui);                  s.Inlines.Add(new LineBreak());                  return s;              }              catch (Exception ex)              {                  return null;              }
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\MetroGridHelper.cs,GetMarginForCurrentView,The following statement contains a magic number: if (isSnapped)                  return 20;
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\MetroGridHelper.cs,GetMarginForCurrentView,The following statement contains a magic number: if (isPortrait)                  return 100;
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\MetroGridHelper.cs,GetMarginForCurrentView,The following statement contains a magic number: return 120;
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: const double strokeWidth = 2.0;
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var horizontalLine = new Line                                       {                                           IsHitTestVisible = false'                                           Stroke = brush'                                           X1 = 0'                                           X2 = max'                                           Y1 = 100 + (strokeWidth/2)'                                           Y2 = 100 + (strokeWidth/2)'                                           StrokeThickness = strokeWidth'                                       };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var horizontalLine = new Line                                       {                                           IsHitTestVisible = false'                                           Stroke = brush'                                           X1 = 0'                                           X2 = max'                                           Y1 = 100 + (strokeWidth/2)'                                           Y2 = 100 + (strokeWidth/2)'                                           StrokeThickness = strokeWidth'                                       };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var horizontalLine = new Line                                       {                                           IsHitTestVisible = false'                                           Stroke = brush'                                           X1 = 0'                                           X2 = max'                                           Y1 = 100 + (strokeWidth/2)'                                           Y2 = 100 + (strokeWidth/2)'                                           StrokeThickness = strokeWidth'                                       };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var horizontalLine = new Line                                       {                                           IsHitTestVisible = false'                                           Stroke = brush'                                           X1 = 0'                                           X2 = max'                                           Y1 = 100 + (strokeWidth/2)'                                           Y2 = 100 + (strokeWidth/2)'                                           StrokeThickness = strokeWidth'                                       };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var horizontalLine2 = new Line                                        {                                            IsHitTestVisible = false'                                            Stroke = brush'                                            X1 = 0'                                            X2 = max'                                            Y1 = 140 + (strokeWidth/2)'                                            Y2 = 140 + (strokeWidth/2)'                                            StrokeThickness = strokeWidth'                                        };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var horizontalLine2 = new Line                                        {                                            IsHitTestVisible = false'                                            Stroke = brush'                                            X1 = 0'                                            X2 = max'                                            Y1 = 140 + (strokeWidth/2)'                                            Y2 = 140 + (strokeWidth/2)'                                            StrokeThickness = strokeWidth'                                        };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var horizontalLine2 = new Line                                        {                                            IsHitTestVisible = false'                                            Stroke = brush'                                            X1 = 0'                                            X2 = max'                                            Y1 = 140 + (strokeWidth/2)'                                            Y2 = 140 + (strokeWidth/2)'                                            StrokeThickness = strokeWidth'                                        };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var horizontalLine2 = new Line                                        {                                            IsHitTestVisible = false'                                            Stroke = brush'                                            X1 = 0'                                            X2 = max'                                            Y1 = 140 + (strokeWidth/2)'                                            Y2 = 140 + (strokeWidth/2)'                                            StrokeThickness = strokeWidth'                                        };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var verticalLine = new Line                                     {                                         IsHitTestVisible = false'                                         Stroke = brush'                                         X1 = margin - (strokeWidth / 2)'                                         X2 = margin - (strokeWidth / 2)'                                         Y1 = 0'                                         Y2 = max'                                         StrokeThickness = strokeWidth'                                     };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var verticalLine = new Line                                     {                                         IsHitTestVisible = false'                                         Stroke = brush'                                         X1 = margin - (strokeWidth / 2)'                                         X2 = margin - (strokeWidth / 2)'                                         Y1 = 0'                                         Y2 = max'                                         StrokeThickness = strokeWidth'                                     };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var horizontalBottomLine = new Line                                             {                                                 IsHitTestVisible = false'                                                 Stroke = brush'                                                 X1 = 0'                                                 X2 = max'                                                 Y1 = height - 130 + (strokeWidth/2)'                                                 Y2 = height - 130 + (strokeWidth/2)'                                                 StrokeThickness = strokeWidth'                                             };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var horizontalBottomLine = new Line                                             {                                                 IsHitTestVisible = false'                                                 Stroke = brush'                                                 X1 = 0'                                                 X2 = max'                                                 Y1 = height - 130 + (strokeWidth/2)'                                                 Y2 = height - 130 + (strokeWidth/2)'                                                 StrokeThickness = strokeWidth'                                             };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var horizontalBottomLine = new Line                                             {                                                 IsHitTestVisible = false'                                                 Stroke = brush'                                                 X1 = 0'                                                 X2 = max'                                                 Y1 = height - 130 + (strokeWidth/2)'                                                 Y2 = height - 130 + (strokeWidth/2)'                                                 StrokeThickness = strokeWidth'                                             };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var horizontalBottomLine = new Line                                             {                                                 IsHitTestVisible = false'                                                 Stroke = brush'                                                 X1 = 0'                                                 X2 = max'                                                 Y1 = height - 130 + (strokeWidth/2)'                                                 Y2 = height - 130 + (strokeWidth/2)'                                                 StrokeThickness = strokeWidth'                                             };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var horizontalBottomLine2 = new Line                                              {                                                  IsHitTestVisible = false'                                                  Stroke = brush'                                                  X1 = 0'                                                  X2 = max'                                                  Y1 = height - 50 + (strokeWidth/2)'                                                  Y2 = height - 50 + (strokeWidth/2)'                                                  StrokeThickness = strokeWidth'                                              };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var horizontalBottomLine2 = new Line                                              {                                                  IsHitTestVisible = false'                                                  Stroke = brush'                                                  X1 = 0'                                                  X2 = max'                                                  Y1 = height - 50 + (strokeWidth/2)'                                                  Y2 = height - 50 + (strokeWidth/2)'                                                  StrokeThickness = strokeWidth'                                              };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var horizontalBottomLine2 = new Line                                              {                                                  IsHitTestVisible = false'                                                  Stroke = brush'                                                  X1 = 0'                                                  X2 = max'                                                  Y1 = height - 50 + (strokeWidth/2)'                                                  Y2 = height - 50 + (strokeWidth/2)'                                                  StrokeThickness = strokeWidth'                                              };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: var horizontalBottomLine2 = new Line                                              {                                                  IsHitTestVisible = false'                                                  Stroke = brush'                                                  X1 = 0'                                                  X2 = max'                                                  Y1 = height - 50 + (strokeWidth/2)'                                                  Y2 = height - 50 + (strokeWidth/2)'                                                  StrokeThickness = strokeWidth'                                              };
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: const int tileHeight = 20;
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: for (int x = margin; x < /*width*/ max; x += (tileHeight*2))              {                  for (int y = 140; y < /*height*/ max; y += (tileHeight*2))                  {                      var rect = new Rectangle                                     {                                         Width = tileHeight'                                         Height = tileHeight'                                         VerticalAlignment = VerticalAlignment.Top'                                         HorizontalAlignment = HorizontalAlignment.Left'                                         Margin = new Thickness(x' y' 0' 0)'                                         IsHitTestVisible = false'                                         Fill = brush'                                     };                      yield return rect;                  }              }
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: for (int x = margin; x < /*width*/ max; x += (tileHeight*2))              {                  for (int y = 140; y < /*height*/ max; y += (tileHeight*2))                  {                      var rect = new Rectangle                                     {                                         Width = tileHeight'                                         Height = tileHeight'                                         VerticalAlignment = VerticalAlignment.Top'                                         HorizontalAlignment = HorizontalAlignment.Left'                                         Margin = new Thickness(x' y' 0' 0)'                                         IsHitTestVisible = false'                                         Fill = brush'                                     };                      yield return rect;                  }              }
Magic Number,MC.MetroGridHelper,MetroGridHelper,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\MetroGridHelper.cs,GetGridShapesForMargin,The following statement contains a magic number: for (int x = margin; x < /*width*/ max; x += (tileHeight*2))              {                  for (int y = 140; y < /*height*/ max; y += (tileHeight*2))                  {                      var rect = new Rectangle                                     {                                         Width = tileHeight'                                         Height = tileHeight'                                         VerticalAlignment = VerticalAlignment.Top'                                         HorizontalAlignment = HorizontalAlignment.Left'                                         Margin = new Thickness(x' y' 0' 0)'                                         IsHitTestVisible = false'                                         Fill = brush'                                     };                      yield return rect;                  }              }
Magic Number,iFixit.W8.UI.Views,GuideDetails,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Views\GuideDetails.xaml.cs,GuideDetails_Loaded,The following statement contains a magic number: SuperImage.Width = this.ActualWidth - 240;
Magic Number,iFixit.W8.UI.Views,Home,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Views\Home.xaml.cs,FeaturedZoom_Tapped,The following statement contains a magic number: MainGridView.ScrollIntoView(MainGridView.Items[2]);
Magic Number,iFixit.W8.UI.Views,Home,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Views\Home.xaml.cs,FavoritesZoom_Tapped,The following statement contains a magic number: MainGridView.ScrollIntoView(MainGridView.Items[3]);
Magic Number,iFixit.W8.UI.Views,SearchResult,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Views\SearchResult.xaml.cs,OnScrollViewerViewChanged,The following statement contains a magic number: if (!vm.IsLoading)              {                  var verticalOffset = sv.VerticalOffset;                  var maxVerticalOffset = sv.ExtentHeight - sv.ViewportHeight;                    if (maxVerticalOffset < 0 ||                      verticalOffset == maxVerticalOffset)                  {                      // Scrolled to bottom                      if (vm.Guides.Count > 18)                          await vm.MoreGuides();                    }                  else                  {                      // Not scrolled to bottom                      // rect.Fill = new SolidColorBrush(Colors.Yellow);                  }                }
Magic Number,iFixit.W8.UI.Views,SearchResult,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Views\SearchResult.xaml.cs,Products_OnScrollViewerViewChanged,The following statement contains a magic number: if (!vm.IsLoading)              {                  var verticalOffset = sv.VerticalOffset;                  var maxVerticalOffset = sv.ExtentHeight - sv.ViewportHeight;                    if (maxVerticalOffset < 0 ||                      verticalOffset == maxVerticalOffset)                  {                      // Scrolled to bottom                      if (vm.Products.Count > 18)                          await vm.MoreProducts();                    }                  else                  {                      // Not scrolled to bottom                      // rect.Fill = new SolidColorBrush(Colors.Yellow);                  }                }
Magic Number,iFixit.W8.UI.Views,SearchResult,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Views\SearchResult.xaml.cs,Devices_OnScrollViewerViewChanged,The following statement contains a magic number: if (!vm.IsLoading)              {                  var verticalOffset = sv.VerticalOffset;                  var maxVerticalOffset = sv.ExtentHeight - sv.ViewportHeight;                    if (maxVerticalOffset < 0 ||                      verticalOffset == maxVerticalOffset)                  {                      // Scrolled to bottom                      if (vm.Devices.Count > 18)                          await vm.MoreDevices();                    }                  else                  {                      // Not scrolled to bottom                      // rect.Fill = new SolidColorBrush(Colors.Yellow);                  }                }
Magic Number,iFixit.W8.UI.Services,UiUx,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Services\UiUx.cs,GoToLogin,The following statement contains a magic number: AboutFlyout.HeaderBrush = new SolidColorBrush(Color.FromArgb(255' 0' 113' 206));
Magic Number,iFixit.W8.UI.Services,UiUx,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Services\UiUx.cs,GoToLogin,The following statement contains a magic number: AboutFlyout.HeaderBrush = new SolidColorBrush(Color.FromArgb(255' 0' 113' 206));
Magic Number,iFixit.W8.UI.Services,UiUx,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Services\UiUx.cs,GoToLogin,The following statement contains a magic number: AboutFlyout.HeaderBrush = new SolidColorBrush(Color.FromArgb(255' 0' 113' 206));
Magic Number,iFixit.W8.UI.Services,UiUx,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Services\UiUx.cs,GoToProfile,The following statement contains a magic number: AboutFlyout.HeaderBrush = new SolidColorBrush(Color.FromArgb(255' 0' 113' 206));
Magic Number,iFixit.W8.UI.Services,UiUx,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Services\UiUx.cs,GoToProfile,The following statement contains a magic number: AboutFlyout.HeaderBrush = new SolidColorBrush(Color.FromArgb(255' 0' 113' 206));
Magic Number,iFixit.W8.UI.Services,UiUx,C:\repos\iFixit_ifixit-microsoft\iFixit.W8.UI\Services\UiUx.cs,GoToProfile,The following statement contains a magic number: AboutFlyout.HeaderBrush = new SolidColorBrush(Color.FromArgb(255' 0' 113' 206));
Missing Default,iFixit.UI.Services,SimplePeerConnector,C:\repos\iFixit_ifixit-microsoft\iFixit.WP8.UI\Services\SimplePeerConnector.cs,TriggeredConnectionStateChanged,The following switch statement is missing a default case: switch (e.State)              {                  case TriggeredConnectState.PeerFound:                      UpdateConnectionStatus(ConnectionStatus.PeerFound);                      break;                  case TriggeredConnectState.Canceled:                      UpdateConnectionStatus(ConnectionStatus.Canceled);                      break;                  case TriggeredConnectState.Failed:                      UpdateConnectionStatus(ConnectionStatus.Failed);                      break;                  case TriggeredConnectState.Completed:                      StartSendReceive(e.Socket);                      UpdateConnectionStatus(ConnectionStatus.Completed);                        // Stop advertising since we have connected                      PeerFinder.Stop();                      _peerFinderStarted = false;                      break;              }
