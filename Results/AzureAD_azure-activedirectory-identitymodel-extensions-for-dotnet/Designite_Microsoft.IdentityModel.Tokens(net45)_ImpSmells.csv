Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.IdentityModel.Json.Bson,BsonBinaryWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonBinaryWriter.cs,WriteTokenInternal,The method has 114 lines of code.
Long Method,Microsoft.IdentityModel.Json.Bson,BsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonReader.cs,ReadType,The method has 102 lines of code.
Long Method,Microsoft.IdentityModel.Json,JsonSerializer,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonSerializer.cs,ApplySerializerSettings,The method has 128 lines of code.
Long Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseValueAsync,The method has 120 lines of code.
Long Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadStringIntoBufferAsync,The method has 135 lines of code.
Long Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadStringValueAsync,The method has 123 lines of code.
Long Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadNumberValueAsync,The method has 104 lines of code.
Long Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,DoReadAsBooleanAsync,The method has 112 lines of code.
Long Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadStringValue,The method has 123 lines of code.
Long Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadAsBoolean,The method has 113 lines of code.
Long Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadNumberValue,The method has 104 lines of code.
Long Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadStringIntoBuffer,The method has 135 lines of code.
Long Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseValue,The method has 122 lines of code.
Long Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The method has 236 lines of code.
Long Method,Microsoft.IdentityModel.Json,JsonValidatingReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonValidatingReader.cs,ValidateCurrentToken,The method has 113 lines of code.
Long Method,Microsoft.IdentityModel.Json,JsonWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonWriter.Async.cs,WriteValueAsync,The method has 108 lines of code.
Long Method,Microsoft.IdentityModel.Json,JsonWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonWriter.Async.cs,WriteToken,The method has 109 lines of code.
Long Method,Microsoft.IdentityModel.Json,JsonWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonWriter.Async.cs,WriteValue,The method has 151 lines of code.
Long Method,Microsoft.IdentityModel.Json.Converters,XmlNodeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,SerializeNode,The method has 142 lines of code.
Long Method,Microsoft.IdentityModel.Json.Converters,XmlNodeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,ReadAttributeElements,The method has 101 lines of code.
Long Method,Microsoft.IdentityModel.Json.Linq,JContainer,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JContainer.Async.cs,ReadContentFromAsync,The method has 107 lines of code.
Long Method,Microsoft.IdentityModel.Json.Linq,JContainer,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JContainer.Async.cs,ReadContentFrom,The method has 108 lines of code.
Long Method,Microsoft.IdentityModel.Json.Linq,JToken,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JToken.Async.cs,ToObject,The method has 111 lines of code.
Long Method,Microsoft.IdentityModel.Json.Linq,JValue,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JValue.Async.cs,Compare,The method has 135 lines of code.
Long Method,Microsoft.IdentityModel.Json.Linq,JValue,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JValue.Async.cs,Operation,The method has 134 lines of code.
Long Method,Microsoft.IdentityModel.Json.Linq.JsonPath,JPath,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JsonPath\JPath.cs,ParseArrayIndexer,The method has 129 lines of code.
Long Method,Microsoft.IdentityModel.Json.Schema,JsonSchemaGenerator,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Schema\JsonSchemaGenerator.cs,GenerateInternal,The method has 120 lines of code.
Long Method,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,SetPropertySettingsFromAttributes,The method has 148 lines of code.
Long Method,Microsoft.IdentityModel.Json.Serialization,JsonArrayContract,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonArrayContract.cs,JsonArrayContract,The method has 127 lines of code.
Long Method,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateObject,The method has 146 lines of code.
Long Method,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,PopulateDictionary,The method has 106 lines of code.
Long Method,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,PopulateMultidimensionalArray,The method has 116 lines of code.
Long Method,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateObjectUsingCreatorWithParameters,The method has 198 lines of code.
Long Method,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,PopulateObject,The method has 112 lines of code.
Long Method,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,TryConvertInternal,The method has 138 lines of code.
Long Method,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,DecimalTryParse,The method has 219 lines of code.
Long Method,Microsoft.IdentityModel.Json.Utilities,DynamicReflectionDelegateFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DynamicReflectionDelegateFactory.cs,GenerateCreateMethodCallIL,The method has 138 lines of code.
Long Method,Microsoft.IdentityModel.Json.Utilities,EnumUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\EnumUtils.cs,ParseEnum,The method has 102 lines of code.
Long Method,Microsoft.IdentityModel.Json.Utilities,JavaScriptUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The method has 147 lines of code.
Long Method,Microsoft.IdentityModel.Json.Utilities,JavaScriptUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\JavaScriptUtils.cs,WriteDefinitelyEscapedJavaScriptStringWithoutDelimitersAsync,The method has 112 lines of code.
Complex Method,Microsoft.IdentityModel.Tokens,AsymmetricAdapter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\AsymmetricAdapter.cs,AsymmetricAdapter,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.IdentityModel.Tokens,AsymmetricSignatureProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\AsymmetricSignatureProvider.cs,ValidateAsymmetricSecurityKeySize,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.IdentityModel.Tokens,CryptoProviderFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\CryptoProviderFactory.cs,CreateKeyWrapProvider,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.IdentityModel.Tokens,CryptoProviderFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\CryptoProviderFactory.cs,CreateKeyedHashAlgorithm,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IdentityModel.Tokens,CryptoProviderFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\CryptoProviderFactory.cs,CreateSignatureProvider,Cyclomatic complexity of the method is 20
Complex Method,Microsoft.IdentityModel.Tokens,ECDsaAdapter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\ECDsaAdapter.cs,CreateECDsaUsingCNGKey,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.IdentityModel.Tokens,ECDsaAdapter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\ECDsaAdapter.cs,GetMagicValue,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IdentityModel.Tokens,AuthenticatedEncryptionProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\AuthenticatedEncryptionProvider.cs,ValidateKeySize,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.IdentityModel.Tokens,JsonWebKeySet,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\JsonWebKeySet.cs,GetSigningKeys,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.IdentityModel.Tokens,SupportedAlgorithms,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\SupportedAlgorithms.cs,IsSupportedAlgorithm,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.IdentityModel.Tokens,Validators,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Validators.cs,ValidateAudience,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.IdentityModel.Tokens,Validators,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Validators.cs,ValidateIssuer,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.IdentityModel.Tokens,Validators,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Validators.cs,ValidateIssuerSecurityKey,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.IdentityModel.Tokens,Validators,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Validators.cs,ValidateLifetime,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.IdentityModel.Tokens,Validators,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Validators.cs,ValidateTokenReplay,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.IdentityModel.Json.Bson,BsonBinaryWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonBinaryWriter.cs,WriteTokenInternal,Cyclomatic complexity of the method is 18
Complex Method,Microsoft.IdentityModel.Json.Bson,BsonBinaryWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonBinaryWriter.cs,CalculateSize,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.IdentityModel.Json.Bson,BsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonReader.cs,ReadCodeWScope,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IdentityModel.Json.Bson,BsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonReader.cs,ReadReference,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IdentityModel.Json.Bson,BsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonReader.cs,ReadNormal,Cyclomatic complexity of the method is 16
Complex Method,Microsoft.IdentityModel.Json.Bson,BsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonReader.cs,ReadType,Cyclomatic complexity of the method is 20
Complex Method,Microsoft.IdentityModel.Json,JsonConvert,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonConvert.cs,ToString,Cyclomatic complexity of the method is 22
Complex Method,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,ReadAsBytes,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,SetToken,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,ReadForType,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.IdentityModel.Json,JsonSerializer,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonSerializer.cs,ApplySerializerSettings,Cyclomatic complexity of the method is 31
Complex Method,Microsoft.IdentityModel.Json,JsonSerializer,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonSerializer.cs,SetupReader,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.IdentityModel.Json,JsonSerializer,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonSerializer.cs,ResetReader,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IdentityModel.Json,JsonSerializer,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonSerializer.cs,SerializeInternal,Cyclomatic complexity of the method is 16
Complex Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,DoReadAsync,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParsePostValueAsync,Cyclomatic complexity of the method is 16
Complex Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseValueAsync,Cyclomatic complexity of the method is 28
Complex Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadStringIntoBufferAsync,Cyclomatic complexity of the method is 20
Complex Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseObjectAsync,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseCommentAsync,Cyclomatic complexity of the method is 17
Complex Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,EatWhitespaceAsync,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseConstructorAsync,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadStringValueAsync,Cyclomatic complexity of the method is 27
Complex Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadNumberValueAsync,Cyclomatic complexity of the method is 23
Complex Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,DoReadAsBooleanAsync,Cyclomatic complexity of the method is 22
Complex Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,DoReadAsBytesAsync,Cyclomatic complexity of the method is 22
Complex Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadString,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadAsBytes,Cyclomatic complexity of the method is 22
Complex Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadStringValue,Cyclomatic complexity of the method is 27
Complex Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadAsBoolean,Cyclomatic complexity of the method is 22
Complex Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadNumberValue,Cyclomatic complexity of the method is 23
Complex Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadStringIntoBuffer,Cyclomatic complexity of the method is 20
Complex Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParsePostValue,Cyclomatic complexity of the method is 16
Complex Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseObject,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseValue,Cyclomatic complexity of the method is 28
Complex Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,EatWhitespace,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseConstructor,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,Cyclomatic complexity of the method is 27
Complex Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseComment,Cyclomatic complexity of the method is 17
Complex Method,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,IsSeparator,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IdentityModel.Json,JsonValidatingReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonValidatingReader.cs,GetCurrentNodeSchemaType,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IdentityModel.Json,JsonValidatingReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonValidatingReader.cs,ValidateCurrentToken,Cyclomatic complexity of the method is 26
Complex Method,Microsoft.IdentityModel.Json,JsonValidatingReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonValidatingReader.cs,WriteToken,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.IdentityModel.Json,JsonValidatingReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonValidatingReader.cs,ValidateString,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IdentityModel.Json,JsonValidatingReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonValidatingReader.cs,ValidateInteger,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.IdentityModel.Json,JsonValidatingReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonValidatingReader.cs,ValidateFloat,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.IdentityModel.Json,JsonWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonWriter.Async.cs,AutoCompleteAsync,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.IdentityModel.Json,JsonWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonWriter.Async.cs,InternalWriteEndAsync,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.IdentityModel.Json,JsonWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonWriter.Async.cs,WriteTokenAsync,Cyclomatic complexity of the method is 25
Complex Method,Microsoft.IdentityModel.Json,JsonWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonWriter.Async.cs,SetWriteStateAsync,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.IdentityModel.Json,JsonWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonWriter.Async.cs,WriteValueAsync,Cyclomatic complexity of the method is 44
Complex Method,Microsoft.IdentityModel.Json,JsonWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonWriter.Async.cs,WriteToken,Cyclomatic complexity of the method is 25
Complex Method,Microsoft.IdentityModel.Json,JsonWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonWriter.Async.cs,WriteValue,Cyclomatic complexity of the method is 44
Complex Method,Microsoft.IdentityModel.Json,JsonWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonWriter.Async.cs,SetWriteState,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.IdentityModel.Json.Converters,DataTableConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\DataTableConverter.cs,CreateRow,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.IdentityModel.Json.Converters,DiscriminatedUnionConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\DiscriminatedUnionConverter.cs,ReadJson,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.IdentityModel.Json.Converters,IsoDateTimeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\IsoDateTimeConverter.cs,ReadJson,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.IdentityModel.Json.Converters,RegexConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\RegexConverter.cs,ReadRegexObject,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IdentityModel.Json.Converters,UnixDateTimeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\UnixDateTimeConverter.cs,ReadJson,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IdentityModel.Json.Converters,XContainerWrapper,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,WrapNode,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.IdentityModel.Json.Converters,XmlNodeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,PushParentNamespaces,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IdentityModel.Json.Converters,XmlNodeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,GetPropertyName,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.IdentityModel.Json.Converters,XmlNodeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,SerializeGroupedNodes,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.IdentityModel.Json.Converters,XmlNodeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,SerializeNode,Cyclomatic complexity of the method is 27
Complex Method,Microsoft.IdentityModel.Json.Converters,XmlNodeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,ReadJson,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.IdentityModel.Json.Converters,XmlNodeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,DeserializeValue,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.IdentityModel.Json.Converters,XmlNodeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,ConvertTokenToXmlValue,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.IdentityModel.Json.Converters,XmlNodeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,ReadAttributeElements,Cyclomatic complexity of the method is 16
Complex Method,Microsoft.IdentityModel.Json.Linq,JContainer,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JContainer.Async.cs,SetItem,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IdentityModel.Json.Linq,JContainer,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JContainer.Async.cs,MergeEnumerableContent,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.IdentityModel.Json.Linq,JPropertyKeyedCollection,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JPropertyKeyedCollection.cs,Compare,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.IdentityModel.Json.Linq,JToken,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JToken.Async.cs,ReadFromAsync,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.IdentityModel.Json.Linq,JToken,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JToken.Async.cs,ToObject,Cyclomatic complexity of the method is 42
Complex Method,Microsoft.IdentityModel.Json.Linq,JToken,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JToken.Async.cs,ReadFrom,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.IdentityModel.Json.Linq,JToken,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JToken.Async.cs,Annotation,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IdentityModel.Json.Linq,JToken,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JToken.Async.cs,Annotations,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IdentityModel.Json.Linq,JToken,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JToken.Async.cs,RemoveAnnotations,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.IdentityModel.Json.Linq,JToken,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JToken.Async.cs,RemoveAnnotations,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.IdentityModel.Json.Linq,JTokenReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JTokenReader.cs,SetToken,Cyclomatic complexity of the method is 19
Complex Method,Microsoft.IdentityModel.Json.Linq,JValue,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JValue.Async.cs,WriteToAsync,Cyclomatic complexity of the method is 23
Complex Method,Microsoft.IdentityModel.Json.Linq,JValue,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JValue.Async.cs,Compare,Cyclomatic complexity of the method is 27
Complex Method,Microsoft.IdentityModel.Json.Linq,JValue,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JValue.Async.cs,Operation,Cyclomatic complexity of the method is 23
Complex Method,Microsoft.IdentityModel.Json.Linq,JValue,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JValue.Async.cs,GetValueType,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.IdentityModel.Json.Linq,JValue,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JValue.Async.cs,WriteTo,Cyclomatic complexity of the method is 23
Complex Method,Microsoft.IdentityModel.Json.Linq,JValueDynamicProxy,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JValue.cs,TryBinaryOperation,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IdentityModel.Json.Linq.JsonPath,ArraySliceFilter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JsonPath\ArraySliceFilter.cs,ExecuteFilter,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.IdentityModel.Json.Linq.JsonPath,FieldFilter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JsonPath\FieldFilter.cs,ExecuteFilter,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IdentityModel.Json.Linq.JsonPath,JPath,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JsonPath\JPath.cs,ParsePath,Cyclomatic complexity of the method is 17
Complex Method,Microsoft.IdentityModel.Json.Linq.JsonPath,JPath,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JsonPath\JPath.cs,ParseArrayIndexer,Cyclomatic complexity of the method is 21
Complex Method,Microsoft.IdentityModel.Json.Linq.JsonPath,JPath,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JsonPath\JPath.cs,ParseExpression,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.IdentityModel.Json.Linq.JsonPath,JPath,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JsonPath\JPath.cs,TryParseValue,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.IdentityModel.Json.Linq.JsonPath,JPath,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JsonPath\JPath.cs,ReadQuotedString,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.IdentityModel.Json.Linq.JsonPath,JPath,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JsonPath\JPath.cs,ParseOperator,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.IdentityModel.Json.Linq.JsonPath,PathFilter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JsonPath\PathFilter.cs,GetTokenIndex,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IdentityModel.Json.Linq.JsonPath,BooleanQueryExpression,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JsonPath\QueryExpression.cs,MatchTokens,Cyclomatic complexity of the method is 20
Complex Method,Microsoft.IdentityModel.Json.Linq.JsonPath,BooleanQueryExpression,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JsonPath\QueryExpression.cs,EqualsWithStringCoercion,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.IdentityModel.Json.Linq.JsonPath,ScanFilter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JsonPath\ScanFilter.cs,ExecuteFilter,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IdentityModel.Json.Schema,JsonSchemaBuilder,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Schema\JsonSchemaBuilder.cs,ResolveReferences,Cyclomatic complexity of the method is 23
Complex Method,Microsoft.IdentityModel.Json.Schema,JsonSchemaBuilder,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Schema\JsonSchemaBuilder.cs,ProcessSchemaProperties,Cyclomatic complexity of the method is 30
Complex Method,Microsoft.IdentityModel.Json.Schema,JsonSchemaGenerator,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Schema\JsonSchemaGenerator.cs,GenerateInternal,Cyclomatic complexity of the method is 21
Complex Method,Microsoft.IdentityModel.Json.Schema,JsonSchemaGenerator,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Schema\JsonSchemaGenerator.cs,GetJsonSchemaType,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.IdentityModel.Json.Schema,JsonSchemaModelBuilder,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Schema\JsonSchemaModelBuilder.cs,AddSchema,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.IdentityModel.Json.Schema,JsonSchemaModelBuilder,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Schema\JsonSchemaModelBuilder.cs,BuildNodeModel,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.IdentityModel.Json.Schema,JsonSchemaWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Schema\JsonSchemaWriter.cs,WriteSchema,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,GetSerializableMembers,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,CreateObjectContract,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,GetCallbackMethodsForType,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,CreateContract,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,IsValidCallback,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,SetPropertySettingsFromAttributes,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.IdentityModel.Json.Serialization,DefaultSerializationBinder,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultSerializationBinder.cs,GetTypeFromTypeNameKey,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.IdentityModel.Json.Serialization,JsonArrayContract,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonArrayContract.cs,JsonArrayContract,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.IdentityModel.Json.Serialization,JsonDictionaryContract,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonDictionaryContract.cs,JsonDictionaryContract,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.IdentityModel.Json.Serialization,JsonPropertyCollection,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonPropertyCollection.cs,AddProperty,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,Populate,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,Deserialize,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,GetConverter,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateObject,Cyclomatic complexity of the method is 23
Complex Method,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,ReadMetadataPropertiesToken,Cyclomatic complexity of the method is 16
Complex Method,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateList,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,EnsureType,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,SetPropertyValue,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CalculatePropertyDetails,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateNewList,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateNewDictionary,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateObjectUsingCreatorWithParameters,Cyclomatic complexity of the method is 36
Complex Method,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,EndProcessProperty,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,SerializeValue,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,CheckForCircularReference,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,CalculatePropertyValues,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,SerializeDynamic,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,ShouldWriteType,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,GetPropertyName,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IdentityModel.Json.Serialization,JsonTypeReflector,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonTypeReflector.cs,GetAttribute,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,ToBigInteger,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,TryConvertInternal,Cyclomatic complexity of the method is 26
Complex Method,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,Int32TryParse,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,Int64TryParse,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,DecimalTryParse,Cyclomatic complexity of the method is 39
Complex Method,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,ParseTime,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,ParseZone,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,TryParseDateTimeIso,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,TryParseDateTime,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,TryParseDateTime,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,TryParseDateTimeOffset,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,TryParseDateTimeOffset,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.IdentityModel.Json.Utilities,DynamicReflectionDelegateFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DynamicReflectionDelegateFactory.cs,GenerateCreateMethodCallIL,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.IdentityModel.Json.Utilities,EnumUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\EnumUtils.cs,InternalFlagsFormat,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IdentityModel.Json.Utilities,EnumUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\EnumUtils.cs,ToUInt64,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.IdentityModel.Json.Utilities,EnumUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\EnumUtils.cs,ParseEnum,Cyclomatic complexity of the method is 16
Complex Method,Microsoft.IdentityModel.Json.Utilities,ExpressionReflectionDelegateFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ExpressionReflectionDelegateFactory.cs,BuildMethodCall,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.IdentityModel.Json.Utilities,JavaScriptUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,Cyclomatic complexity of the method is 29
Complex Method,Microsoft.IdentityModel.Json.Utilities,JavaScriptUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\JavaScriptUtils.cs,WriteDefinitelyEscapedJavaScriptStringWithoutDelimitersAsync,Cyclomatic complexity of the method is 23
Complex Method,Microsoft.IdentityModel.Json.Utilities,JavaScriptUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\JavaScriptUtils.cs,TryGetDateFromConstructorJson,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.IdentityModel.Json.Utilities,MathUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\MathUtils.cs,IntLength,Cyclomatic complexity of the method is 20
Complex Method,Microsoft.IdentityModel.Json.Utilities,ReflectionObject,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ReflectionObject.cs,Create,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.IdentityModel.Json.Utilities,ReflectionUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ReflectionUtils.cs,ImplementsGenericDefinition,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IdentityModel.Json.Utilities,ReflectionUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ReflectionUtils.cs,CanSetMemberValue,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.IdentityModel.Json.Utilities,ReflectionUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ReflectionUtils.cs,GetChildPrivateProperties,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.IdentityModel.Json.Utilities,ReflectionUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ReflectionUtils.cs,GetDefaultValue,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.IdentityModel.Json.Utilities,StringUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\StringUtils.cs,ToSnakeCase,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.IdentityModel.Json.Utilities,StringUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\StringUtils.cs,Trim,Cyclomatic complexity of the method is 9
Long Parameter List,Microsoft.IdentityModel.Tokens,CryptoProviderCache,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\CryptoProviderCache.cs,TryGetSignatureProvider,The method has 5 parameters. Parameters: securityKey' algorithm' typeofProvider' willCreateSignatures' signatureProvider
Long Parameter List,Microsoft.IdentityModel.Tokens,InMemoryCryptoProviderCache,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\InMemoryCryptoProviderCache.cs,TryGetSignatureProvider,The method has 5 parameters. Parameters: securityKey' algorithm' typeofProvider' willCreateSignatures' signatureProvider
Long Parameter List,Microsoft.IdentityModel.Json,JsonConvert,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonConvert.cs,EnsureFloatFormat,The method has 5 parameters. Parameters: value' text' floatFormatHandling' quoteChar' nullable
Long Parameter List,Microsoft.IdentityModel.Json,JsonConverter<T>,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonConverter.cs,ReadJson,The method has 5 parameters. Parameters: reader' objectType' existingValue' hasExistingValue' serializer
Long Parameter List,Microsoft.IdentityModel.Json,JsonReaderException,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReaderException.cs,JsonReaderException,The method has 5 parameters. Parameters: message' path' lineNumber' linePosition' innerException
Long Parameter List,Microsoft.IdentityModel.Json,JsonSerializationException,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonSerializationException.cs,JsonSerializationException,The method has 5 parameters. Parameters: message' path' lineNumber' linePosition' innerException
Long Parameter List,Microsoft.IdentityModel.Json,JsonSerializer,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonSerializer.cs,SetupReader,The method has 7 parameters. Parameters: reader' previousCulture' previousDateTimeZoneHandling' previousDateParseHandling' previousFloatParseHandling' previousMaxDepth' previousDateFormatString
Long Parameter List,Microsoft.IdentityModel.Json,JsonSerializer,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonSerializer.cs,ResetReader,The method has 7 parameters. Parameters: reader' previousCulture' previousDateTimeZoneHandling' previousDateParseHandling' previousFloatParseHandling' previousMaxDepth' previousDateFormatString
Long Parameter List,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,BlockCopyChars,The method has 5 parameters. Parameters: src' srcOffset' dst' dstOffset' count
Long Parameter List,Microsoft.IdentityModel.Json,JsonWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonWriter.Async.cs,WriteTokenAsync,The method has 5 parameters. Parameters: reader' writeChildren' writeDateConstructorAsDate' writeComments' cancellationToken
Long Parameter List,Microsoft.IdentityModel.Json.Converters,XmlNodeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,WriteGroupedNodes,The method has 5 parameters. Parameters: writer' manager' writePropertyName' groupedNodes' elementNames
Long Parameter List,Microsoft.IdentityModel.Json.Converters,XmlNodeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,WriteGroupedNodes,The method has 5 parameters. Parameters: writer' manager' writePropertyName' node' elementNames
Long Parameter List,Microsoft.IdentityModel.Json.Converters,XmlNodeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,DeserializeValue,The method has 5 parameters. Parameters: reader' document' manager' propertyName' currentNode
Long Parameter List,Microsoft.IdentityModel.Json.Converters,XmlNodeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,ReadElement,The method has 5 parameters. Parameters: reader' document' currentNode' propertyName' manager
Long Parameter List,Microsoft.IdentityModel.Json.Converters,XmlNodeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,CreateElement,The method has 7 parameters. Parameters: reader' document' currentNode' elementName' manager' elementPrefix' attributeNameValues
Long Parameter List,Microsoft.IdentityModel.Json.Converters,XmlNodeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,AddAttribute,The method has 7 parameters. Parameters: reader' document' currentNode' propertyName' attributeName' manager' attributePrefix
Long Parameter List,Microsoft.IdentityModel.Json.Converters,XmlNodeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,ReadArrayElements,The method has 5 parameters. Parameters: reader' document' propertyName' currentNode' manager
Long Parameter List,Microsoft.IdentityModel.Json.Linq,JTokenWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JTokenWriter.Async.cs,WriteTokenAsync,The method has 5 parameters. Parameters: reader' writeChildren' writeDateConstructorAsDate' writeComments' cancellationToken
Long Parameter List,Microsoft.IdentityModel.Json.Schema,JsonSchemaException,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Schema\JsonSchemaException.cs,JsonSchemaException,The method has 5 parameters. Parameters: message' innerException' path' lineNumber' linePosition
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,GetCallbackMethodsForType,The method has 6 parameters. Parameters: type' onSerializing' onSerialized' onDeserializing' onDeserialized' onError
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,IsValidCallback,The method has 5 parameters. Parameters: method' parameters' attributeType' currentCallback' prevAttributeType
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,SetPropertySettingsFromAttributes,The method has 6 parameters. Parameters: property' attributeProvider' name' declaringType' memberSerialization' allowNonPublicAccess
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalBase,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalBase.cs,IsErrorHandled,The method has 6 parameters. Parameters: currentObject' contract' keyValue' lineInfo' path' ex
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateValueInternal,The method has 7 parameters. Parameters: reader' objectType' contract' member' containerContract' containerMember' existingValue
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateObject,The method has 7 parameters. Parameters: reader' objectType' contract' member' containerContract' containerMember' existingValue
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,ReadMetadataPropertiesToken,The method has 9 parameters. Parameters: reader' objectType' contract' member' containerContract' containerMember' existingValue' newValue' id
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,ReadMetadataProperties,The method has 9 parameters. Parameters: reader' objectType' contract' member' containerContract' containerMember' existingValue' newValue' id
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,ResolveTypeName,The method has 7 parameters. Parameters: reader' objectType' contract' member' containerContract' containerMember' qualifiedTypeName
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateList,The method has 6 parameters. Parameters: reader' objectType' contract' member' existingValue' id
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,EnsureType,The method has 5 parameters. Parameters: reader' value' culture' contract' targetType
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,SetPropertyValue,The method has 6 parameters. Parameters: property' propertyConverter' containerContract' containerProperty' reader' target
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CalculatePropertyDetails,The method has 11 parameters. Parameters: property' propertyConverter' containerContract' containerProperty' reader' target' useExistingValue' currentValue' propertyContract' gottenCurrentValue' ignoredValue
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,PopulateDictionary,The method has 5 parameters. Parameters: dictionary' reader' contract' containerProperty' id
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,PopulateMultidimensionalArray,The method has 5 parameters. Parameters: list' reader' contract' containerProperty' id
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,PopulateList,The method has 5 parameters. Parameters: list' reader' contract' containerProperty' id
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateObjectUsingCreatorWithParameters,The method has 5 parameters. Parameters: reader' contract' containerProperty' creator' id
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateNewObject,The method has 6 parameters. Parameters: reader' objectContract' containerMember' containerProperty' id' createdFromNonDefaultCreator
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,PopulateObject,The method has 5 parameters. Parameters: newObject' reader' contract' member' id
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,SetExtensionData,The method has 5 parameters. Parameters: contract' member' reader' memberName' o
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,EndProcessProperty,The method has 7 parameters. Parameters: newObject' reader' contract' initialDepth' property' presence' setDefaultValue
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,SerializePrimitive,The method has 6 parameters. Parameters: writer' value' contract' member' containerContract' containerProperty
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,SerializeValue,The method has 6 parameters. Parameters: writer' value' valueContract' member' containerContract' containerProperty
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,ShouldWriteReference,The method has 5 parameters. Parameters: value' property' valueContract' collectionContract' containerProperty
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,CheckForCircularReference,The method has 6 parameters. Parameters: writer' value' property' contract' containerContract' containerProperty
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,SerializeObject,The method has 6 parameters. Parameters: writer' value' contract' member' collectionContract' containerProperty
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,CalculatePropertyValues,The method has 7 parameters. Parameters: writer' value' contract' member' property' memberContract' memberValue
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,WriteObjectStart,The method has 6 parameters. Parameters: writer' value' contract' member' collectionContract' containerProperty
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,SerializeConvertable,The method has 6 parameters. Parameters: writer' converter' value' contract' collectionContract' containerProperty
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,SerializeList,The method has 6 parameters. Parameters: writer' values' contract' member' collectionContract' containerProperty
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,SerializeMultidimensionalArray,The method has 6 parameters. Parameters: writer' values' contract' member' collectionContract' containerProperty
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,SerializeMultidimensionalArray,The method has 6 parameters. Parameters: writer' values' contract' member' initialDepth' indices
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,WriteStartArray,The method has 6 parameters. Parameters: writer' values' contract' member' containerContract' containerProperty
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,SerializeISerializable,The method has 6 parameters. Parameters: writer' value' contract' member' collectionContract' containerProperty
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,SerializeDynamic,The method has 6 parameters. Parameters: writer' value' contract' member' collectionContract' containerProperty
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,ShouldWriteType,The method has 5 parameters. Parameters: typeNameHandlingFlag' contract' member' containerContract' containerProperty
Long Parameter List,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,SerializeDictionary,The method has 6 parameters. Parameters: writer' values' contract' member' collectionContract' containerProperty
Long Parameter List,Microsoft.IdentityModel.Json.Utilities,AsyncUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\AsyncUtils.cs,WriteAsync,The method has 5 parameters. Parameters: writer' value' start' count' cancellationToken
Long Parameter List,Microsoft.IdentityModel.Json.Utilities,AsyncUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\AsyncUtils.cs,ReadAsync,The method has 5 parameters. Parameters: reader' buffer' index' count' cancellationToken
Long Parameter List,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,TryParseDateTime,The method has 5 parameters. Parameters: s' dateTimeZoneHandling' dateFormatString' culture' dt
Long Parameter List,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,TryParseDateTime,The method has 5 parameters. Parameters: s' dateTimeZoneHandling' dateFormatString' culture' dt
Long Parameter List,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,TryParseDateTimeExact,The method has 5 parameters. Parameters: text' dateTimeZoneHandling' dateFormatString' culture' dt
Long Parameter List,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDateTimeString,The method has 5 parameters. Parameters: writer' value' format' formatString' culture
Long Parameter List,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDateTimeString,The method has 6 parameters. Parameters: chars' start' value' offset' kind' format
Long Parameter List,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDateTimeOffsetString,The method has 5 parameters. Parameters: writer' value' format' formatString' culture
Long Parameter List,Microsoft.IdentityModel.Json.Utilities,DynamicProxyMetaObject<T>,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DynamicProxyMetaObject.cs,CallMethodWithResult,The method has 5 parameters. Parameters: methodName' binder' args' fallback' fallbackInvoke
Long Parameter List,Microsoft.IdentityModel.Json.Utilities,DynamicProxyMetaObject<T>,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DynamicProxyMetaObject.cs,BuildCallMethodWithResult,The method has 5 parameters. Parameters: methodName' binder' args' fallbackResult' fallbackInvoke
Long Parameter List,Microsoft.IdentityModel.Json.Utilities,EnumUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\EnumUtils.cs,MatchName,The method has 6 parameters. Parameters: value' enumNames' resolvedNames' valueIndex' valueSubstringLength' comparison
Long Parameter List,Microsoft.IdentityModel.Json.Utilities,EnumUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\EnumUtils.cs,FindIndexByName,The method has 5 parameters. Parameters: enumNames' value' valueIndex' valueSubstringLength' comparison
Long Parameter List,Microsoft.IdentityModel.Json.Utilities,ImmutableCollectionsUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ImmutableCollectionsUtils.cs,TryBuildImmutableForDictionaryContract,The method has 5 parameters. Parameters: underlyingType' keyItemType' valueItemType' createdType' parameterizedCreator
Long Parameter List,Microsoft.IdentityModel.Json.Utilities,JavaScriptUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The method has 8 parameters. Parameters: writer' s' delimiter' appendDelimiters' charEscapeFlags' stringEscapeHandling' bufferPool' writeBuffer
Long Parameter List,Microsoft.IdentityModel.Json.Utilities,JavaScriptUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptStringAsync,The method has 9 parameters. Parameters: writer' s' delimiter' appendDelimiters' charEscapeFlags' stringEscapeHandling' client' writeBuffer' cancellationToken
Long Parameter List,Microsoft.IdentityModel.Json.Utilities,JavaScriptUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptStringWithDelimitersAsync,The method has 8 parameters. Parameters: writer' s' delimiter' charEscapeFlags' stringEscapeHandling' client' writeBuffer' cancellationToken
Long Parameter List,Microsoft.IdentityModel.Json.Utilities,JavaScriptUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptStringWithDelimitersAsync,The method has 9 parameters. Parameters: task' writer' s' delimiter' charEscapeFlags' stringEscapeHandling' client' writeBuffer' cancellationToken
Long Parameter List,Microsoft.IdentityModel.Json.Utilities,JavaScriptUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptStringWithoutDelimitersAsync,The method has 7 parameters. Parameters: writer' s' charEscapeFlags' stringEscapeHandling' client' writeBuffer' cancellationToken
Long Parameter List,Microsoft.IdentityModel.Json.Utilities,JavaScriptUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\JavaScriptUtils.cs,WriteDefinitelyEscapedJavaScriptStringWithoutDelimitersAsync,The method has 8 parameters. Parameters: writer' s' lastWritePosition' charEscapeFlags' stringEscapeHandling' client' writeBuffer' cancellationToken
Long Parameter List,Microsoft.IdentityModel.Json.Utilities,StringUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\StringUtils.cs,FormatWith,The method has 5 parameters. Parameters: format' provider' arg0' arg1' arg2
Long Parameter List,Microsoft.IdentityModel.Json.Utilities,StringUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\StringUtils.cs,FormatWith,The method has 6 parameters. Parameters: format' provider' arg0' arg1' arg2' arg3
Long Identifier,Microsoft.IdentityModel.Tokens,AsymmetricSignatureProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\AsymmetricSignatureProvider.cs,,The length of the parameter _minimumAsymmetricKeySizeInBitsForSigningMap is 44.
Long Identifier,Microsoft.IdentityModel.Tokens,AsymmetricSignatureProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\AsymmetricSignatureProvider.cs,,The length of the parameter _minimumAsymmetricKeySizeInBitsForVerifyingMap is 46.
Long Identifier,Microsoft.IdentityModel.Tokens,AsymmetricSignatureProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\AsymmetricSignatureProvider.cs,,The length of the parameter DefaultMinimumAsymmetricKeySizeInBitsForSigningMap is 50.
Long Identifier,Microsoft.IdentityModel.Tokens,AsymmetricSignatureProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\AsymmetricSignatureProvider.cs,,The length of the parameter DefaultMinimumAsymmetricKeySizeInBitsForVerifyingMap is 52.
Long Identifier,Microsoft.IdentityModel.Tokens,JsonWebKeySet,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\JsonWebKeySet.cs,,The length of the parameter DefaultSkipUnresolvedJsonWebKeys is 32.
Long Identifier,Microsoft.IdentityModel.Tokens,SecurityAlgorithms,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\SecurityAlgorithms.cs,,The length of the parameter DefaultAsymmetricKeyWrapAlgorithm is 33.
Long Identifier,Microsoft.IdentityModel.Tokens,SecurityAlgorithms,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\SecurityAlgorithms.cs,,The length of the parameter DefaultSymmetricEncryptionAlgorithm is 35.
Long Identifier,Microsoft.IdentityModel.Tokens,SymmetricSignatureProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\SymmetricSignatureProvider.cs,,The length of the parameter DefaultMinimumSymmetricKeySizeInBits is 36.
Long Identifier,Microsoft.IdentityModel.Tokens,SymmetricSignatureProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\SymmetricSignatureProvider.cs,,The length of the parameter _minimumSymmetricKeySizeInBits is 30.
Long Identifier,Microsoft.IdentityModel.Tokens,TokenHandler,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\TokenHandler.cs,,The length of the parameter _defaultTokenLifetimeInMinutes is 30.
Long Identifier,Microsoft.IdentityModel.Tokens,TokenValidationParameters,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\TokenValidationParameters.cs,,The length of the parameter DefaultMaximumTokenSizeInBytes is 30.
Long Identifier,Microsoft.IdentityModel.Tokens,X509SecurityKey,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\X509SecurityKey.cs,,The length of the parameter _privateKeyAvailabilityDetermined is 33.
Long Identifier,Microsoft.IdentityModel.Json,JsonSerializer,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonSerializer.cs,,The length of the parameter _typeNameAssemblyFormatHandling is 31.
Long Identifier,Microsoft.IdentityModel.Json,JsonSerializerSettings,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonSerializerSettings.cs,,The length of the parameter DefaultPreserveReferencesHandling is 33.
Long Identifier,Microsoft.IdentityModel.Json,JsonSerializerSettings,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonSerializerSettings.cs,,The length of the parameter DefaultMetadataPropertyHandling is 31.
Long Identifier,Microsoft.IdentityModel.Json,JsonSerializerSettings,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonSerializerSettings.cs,,The length of the parameter DefaultTypeNameAssemblyFormatHandling is 37.
Long Identifier,Microsoft.IdentityModel.Json,JsonSerializerSettings,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonSerializerSettings.cs,,The length of the parameter _typeNameAssemblyFormatHandling is 31.
Long Identifier,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,,The length of the parameter MaximumJavascriptIntegerCharacterLength is 39.
Long Identifier,Microsoft.IdentityModel.Json.Schema,JsonSchemaConstants,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Schema\JsonSchemaConstants.cs,,The length of the parameter AdditionalPropertiesPropertyName is 32.
Long Identifier,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,SetExtensionDataDelegates,The length of the parameter setExtensionDataDictionaryValue is 31.
Long Identifier,Microsoft.IdentityModel.Json.Serialization,JsonArrayContract,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonArrayContract.cs,,The length of the parameter _genericCollectionDefinitionType is 32.
Long Identifier,Microsoft.IdentityModel.Json.Serialization,JsonArrayContract,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonArrayContract.cs,,The length of the parameter _genericTemporaryCollectionCreator is 34.
Long Identifier,Microsoft.IdentityModel.Json.Serialization,JsonDictionaryContract,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonDictionaryContract.cs,,The length of the parameter _genericCollectionDefinitionType is 32.
Long Identifier,Microsoft.IdentityModel.Json.Serialization,JsonDictionaryContract,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonDictionaryContract.cs,,The length of the parameter _genericTemporaryDictionaryCreator is 34.
Long Identifier,Microsoft.IdentityModel.Json.Serialization,JsonObjectContract,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonObjectContract.cs,,The length of the parameter _hasRequiredOrDefaultValueProperties is 36.
Long Identifier,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateObjectUsingCreatorWithParameters,The length of the parameter createdObjectCollectionWrapper is 30.
Long Identifier,Microsoft.IdentityModel.Json.Serialization,JsonTypeReflector,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonTypeReflector.cs,,The length of the parameter _metadataTypeAttributeReflectionObject is 38.
Long Identifier,Microsoft.IdentityModel.Json.Utilities,BinderWrapper,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DynamicUtils.cs,CreateMemberCalls,The length of the parameter csharpArgumentInfoTypeEnumerableType is 36.
Long Identifier,Microsoft.IdentityModel.Json.Utilities,BinderWrapper,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DynamicUtils.cs,,The length of the parameter CSharpArgumentInfoFlagsTypeName is 31.
Long Identifier,Microsoft.IdentityModel.Json.Utilities,ImmutableCollectionsUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ImmutableCollectionsUtils.cs,,The length of the parameter ImmutableListGenericInterfaceTypeName is 37.
Long Identifier,Microsoft.IdentityModel.Json.Utilities,ImmutableCollectionsUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ImmutableCollectionsUtils.cs,,The length of the parameter ImmutableQueueGenericInterfaceTypeName is 38.
Long Identifier,Microsoft.IdentityModel.Json.Utilities,ImmutableCollectionsUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ImmutableCollectionsUtils.cs,,The length of the parameter ImmutableStackGenericInterfaceTypeName is 38.
Long Identifier,Microsoft.IdentityModel.Json.Utilities,ImmutableCollectionsUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ImmutableCollectionsUtils.cs,,The length of the parameter ImmutableSetGenericInterfaceTypeName is 36.
Long Identifier,Microsoft.IdentityModel.Json.Utilities,ImmutableCollectionsUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ImmutableCollectionsUtils.cs,,The length of the parameter ImmutableSortedSetGenericTypeName is 33.
Long Identifier,Microsoft.IdentityModel.Json.Utilities,ImmutableCollectionsUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ImmutableCollectionsUtils.cs,,The length of the parameter ImmutableHashSetGenericTypeName is 31.
Long Identifier,Microsoft.IdentityModel.Json.Utilities,ImmutableCollectionsUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ImmutableCollectionsUtils.cs,,The length of the parameter ArrayContractImmutableCollectionDefinitions is 43.
Long Identifier,Microsoft.IdentityModel.Json.Utilities,ImmutableCollectionsUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ImmutableCollectionsUtils.cs,,The length of the parameter ImmutableDictionaryGenericInterfaceTypeName is 43.
Long Identifier,Microsoft.IdentityModel.Json.Utilities,ImmutableCollectionsUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ImmutableCollectionsUtils.cs,,The length of the parameter ImmutableDictionaryGenericTypeName is 34.
Long Identifier,Microsoft.IdentityModel.Json.Utilities,ImmutableCollectionsUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ImmutableCollectionsUtils.cs,,The length of the parameter ImmutableSortedDictionaryTypeName is 33.
Long Identifier,Microsoft.IdentityModel.Json.Utilities,ImmutableCollectionsUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ImmutableCollectionsUtils.cs,,The length of the parameter ImmutableSortedDictionaryGenericTypeName is 40.
Long Identifier,Microsoft.IdentityModel.Json.Utilities,ImmutableCollectionsUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ImmutableCollectionsUtils.cs,,The length of the parameter DictionaryContractImmutableCollectionDefinitions is 48.
Long Statement,Microsoft.IdentityModel.Tokens,AsymmetricAdapter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\AsymmetricAdapter.cs,InitializeUsingRsa,The length of the statement  "                throw LogHelper.LogExceptionMessage(new NotSupportedException(LogHelper.FormatInvariant(LogMessages.IDX10687' typeof(RSACryptoServiceProvider).ToString()' _rsaCngTypeName' rsa.GetType().ToString()))); " is 200.
Long Statement,Microsoft.IdentityModel.Tokens,AsymmetricAdapter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\AsymmetricAdapter.cs,InitializeUsingRsa,The length of the statement  "            _rsaEncryptionPadding = (algorithm.Equals(SecurityAlgorithms.RsaOAEP' StringComparison.Ordinal) || algorithm.Equals(SecurityAlgorithms.RsaOaepKeyWrap' StringComparison.Ordinal)) " is 177.
Long Statement,Microsoft.IdentityModel.Tokens,AsymmetricAdapter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\AsymmetricAdapter.cs,Pkcs1VerifyData,The length of the statement  "                // [ ] VerifyData(byte[] data' int offset' int count' byte[] signature' HashAlgorithmName hashAlgorithmName' RSASignaturePadding padding) " is 137.
Long Statement,Microsoft.IdentityModel.Tokens,AsymmetricSignatureProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\AsymmetricSignatureProvider.cs,GetHashAlgorithmString,The length of the statement  "            throw LogHelper.LogExceptionMessage(new ArgumentException(LogHelper.FormatInvariant(LogMessages.IDX10652' algorithm)' nameof(algorithm))); " is 138.
Long Statement,Microsoft.IdentityModel.Tokens,AsymmetricSignatureProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\AsymmetricSignatureProvider.cs,ResolveAsymmetricAdapter,The length of the statement  "            return new AsymmetricAdapter(key' algorithm' _cryptoProviderFactory.CreateHashAlgorithm(GetHashAlgorithmString(algorithm))' requirePrivateKey); " is 143.
Long Statement,Microsoft.IdentityModel.Tokens,AsymmetricSignatureProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\AsymmetricSignatureProvider.cs,ValidateAsymmetricSecurityKeySize,The length of the statement  "                    throw LogHelper.LogExceptionMessage(new ArgumentOutOfRangeException("key.KeySize"' LogHelper.FormatInvariant(LogMessages.IDX10630' key' MinimumAsymmetricKeySizeInBitsForSigningMap[algorithm]' keySize))); " is 203.
Long Statement,Microsoft.IdentityModel.Tokens,AsymmetricSignatureProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\AsymmetricSignatureProvider.cs,ValidateAsymmetricSecurityKeySize,The length of the statement  "                throw LogHelper.LogExceptionMessage(new ArgumentOutOfRangeException("key.KeySize"' LogHelper.FormatInvariant(LogMessages.IDX10631' key' MinimumAsymmetricKeySizeInBitsForVerifyingMap[algorithm]' keySize))); " is 205.
Long Statement,Microsoft.IdentityModel.Tokens,CompressionProviderFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\CompressionProviderFactory.cs,CreateCompressionProvider,The length of the statement  "            throw LogHelper.LogExceptionMessage(new NotSupportedException(LogHelper.FormatInvariant(LogMessages.IDX10652' algorithm))); " is 123.
Long Statement,Microsoft.IdentityModel.Tokens,CryptoProviderFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\CryptoProviderFactory.cs,CreateAuthenticatedEncryptionProvider,The length of the statement  "                    throw LogHelper.LogExceptionMessage(new InvalidOperationException(LogHelper.FormatInvariant(LogMessages.IDX10646' algorithm' key' typeof(AuthenticatedEncryptionProvider)))); " is 173.
Long Statement,Microsoft.IdentityModel.Tokens,CryptoProviderFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\CryptoProviderFactory.cs,CreateAuthenticatedEncryptionProvider,The length of the statement  "            throw LogHelper.LogExceptionMessage(new ArgumentException(LogHelper.FormatInvariant(LogMessages.IDX10652' algorithm)' nameof(algorithm))); " is 138.
Long Statement,Microsoft.IdentityModel.Tokens,CryptoProviderFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\CryptoProviderFactory.cs,CreateKeyWrapProvider,The length of the statement  "                    throw LogHelper.LogExceptionMessage(new InvalidOperationException(LogHelper.FormatInvariant(LogMessages.IDX10646' algorithm' key' typeof(SignatureProvider)))); " is 159.
Long Statement,Microsoft.IdentityModel.Tokens,CryptoProviderFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\CryptoProviderFactory.cs,CreateKeyWrapProvider,The length of the statement  "                else if (jsonWebKey.Kty == JsonWebAlgorithmsKeyTypes.Octet && SupportedAlgorithms.IsSupportedSymmetricAlgorithm(algorithm)) " is 123.
Long Statement,Microsoft.IdentityModel.Tokens,CryptoProviderFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\CryptoProviderFactory.cs,CreateKeyWrapProvider,The length of the statement  "            throw LogHelper.LogExceptionMessage(new NotSupportedException(LogHelper.FormatInvariant(LogMessages.IDX10661' algorithm' key))); " is 128.
Long Statement,Microsoft.IdentityModel.Tokens,CryptoProviderFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\CryptoProviderFactory.cs,CreateHashAlgorithm,The length of the statement  "                    throw LogHelper.LogExceptionMessage(new InvalidOperationException(LogHelper.FormatInvariant(LogMessages.IDX10647' algorithm' typeof(HashAlgorithm)))); " is 150.
Long Statement,Microsoft.IdentityModel.Tokens,CryptoProviderFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\CryptoProviderFactory.cs,CreateHashAlgorithm,The length of the statement  "            throw LogHelper.LogExceptionMessage(new NotSupportedException(LogHelper.FormatInvariant(LogMessages.IDX10640' algorithm))); " is 123.
Long Statement,Microsoft.IdentityModel.Tokens,CryptoProviderFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\CryptoProviderFactory.cs,CreateKeyedHashAlgorithm,The length of the statement  "                    throw LogHelper.LogExceptionMessage(new InvalidOperationException(LogHelper.FormatInvariant(LogMessages.IDX10647' algorithm' typeof(KeyedHashAlgorithm)))); " is 155.
Long Statement,Microsoft.IdentityModel.Tokens,CryptoProviderFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\CryptoProviderFactory.cs,CreateKeyedHashAlgorithm,The length of the statement  "                    throw LogHelper.LogExceptionMessage(new NotSupportedException(LogHelper.FormatInvariant(LogMessages.IDX10666' algorithm))); " is 123.
Long Statement,Microsoft.IdentityModel.Tokens,CryptoProviderFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\CryptoProviderFactory.cs,CreateSignatureProvider,The length of the statement  "                    throw LogHelper.LogExceptionMessage(new InvalidOperationException(LogHelper.FormatInvariant(LogMessages.IDX10646' algorithm' key' typeof(SignatureProvider)))); " is 159.
Long Statement,Microsoft.IdentityModel.Tokens,CryptoProviderFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\CryptoProviderFactory.cs,CreateSignatureProvider,The length of the statement  "                    throw LogHelper.LogExceptionMessage(new InvalidOperationException(LogHelper.FormatInvariant(LogMessages.IDX10694' key' ex)' ex)); " is 129.
Long Statement,Microsoft.IdentityModel.Tokens,CryptoProviderFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\CryptoProviderFactory.cs,CreateSignatureProvider,The length of the statement  "                throw LogHelper.LogExceptionMessage(new NotSupportedException(LogHelper.FormatInvariant(LogMessages.IDX10621' typeof(SymmetricSignatureProvider)' typeof(SecurityKey)' typeof(AsymmetricSecurityKey)' typeof(SymmetricSecurityKey)' key.GetType()))); " is 245.
Long Statement,Microsoft.IdentityModel.Tokens,CryptoProviderFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\CryptoProviderFactory.cs,CreateSignatureProvider,The length of the statement  "                throw LogHelper.LogExceptionMessage(new NotSupportedException(LogHelper.FormatInvariant(LogMessages.IDX10634' algorithm' key))); " is 128.
Long Statement,Microsoft.IdentityModel.Tokens,CryptoProviderFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\CryptoProviderFactory.cs,CreateSignatureProvider,The length of the statement  "                if (CryptoProviderCache.TryGetSignatureProvider(key' algorithm' typeofSignatureProvider' willCreateSignatures' out signatureProvider)) " is 134.
Long Statement,Microsoft.IdentityModel.Tokens,CryptoProviderFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\CryptoProviderFactory.cs,CreateSignatureProvider,The length of the statement  "                    if (CryptoProviderCache.TryGetSignatureProvider(key' algorithm' typeofSignatureProvider' willCreateSignatures' out signatureProvider)) " is 134.
Long Statement,Microsoft.IdentityModel.Tokens,CryptoProviderFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\CryptoProviderFactory.cs,ReleaseHashAlgorithm,The length of the statement  "            else if (CustomCryptoProvider != null && _typeToAlgorithmMap.TryGetValue(hashAlgorithm.GetType().ToString()' out var algorithm) && CustomCryptoProvider.IsSupportedAlgorithm(algorithm)) " is 184.
Long Statement,Microsoft.IdentityModel.Tokens,ECDsaAdapter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\ECDsaAdapter.cs,CreateECDsaUsingCNGKey,The length of the statement  "                    throw LogHelper.LogExceptionMessage(new ArgumentOutOfRangeException("x.Length"' LogHelper.FormatInvariant(LogMessages.IDX10675' nameof(x)' cbKey' x.Length))); " is 158.
Long Statement,Microsoft.IdentityModel.Tokens,ECDsaAdapter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\ECDsaAdapter.cs,CreateECDsaUsingCNGKey,The length of the statement  "                    throw LogHelper.LogExceptionMessage(new ArgumentOutOfRangeException("y.Length"' LogHelper.FormatInvariant(LogMessages.IDX10675' nameof(y)' cbKey' y.Length))); " is 158.
Long Statement,Microsoft.IdentityModel.Tokens,ECDsaAdapter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\ECDsaAdapter.cs,CreateECDsaUsingCNGKey,The length of the statement  "                        throw LogHelper.LogExceptionMessage(new ArgumentOutOfRangeException("d.Length"' LogHelper.FormatInvariant(LogMessages.IDX10675' nameof(d)' cbKey' d.Length))); " is 158.
Long Statement,Microsoft.IdentityModel.Tokens,ECDsaAdapter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\ECDsaAdapter.cs,GetKeyByteCount,The length of the statement  "                case JsonWebKeyECTypes.P512: // treat 512 as 521. 512 doesn't exist' but we released with "512" instead of "521"' so don't break now. " is 133.
Long Statement,Microsoft.IdentityModel.Tokens,ECDsaAdapter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\ECDsaAdapter.cs,GetKeySize,The length of the statement  "                case JsonWebKeyECTypes.P512: // treat 512 as 521. 512 doesn't exist' but we released with "512" instead of "521"' so don't break now. " is 133.
Long Statement,Microsoft.IdentityModel.Tokens,ECDsaAdapter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\ECDsaAdapter.cs,GetMagicValue,The length of the statement  "                case JsonWebKeyECTypes.P512: // treat 512 as 521. 512 doesn't exist' but we released with "512" instead of "521"' so don't break now. " is 133.
Long Statement,Microsoft.IdentityModel.Tokens,AuthenticatedEncryptionProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\AuthenticatedEncryptionProvider.cs,Encrypt,The length of the statement  "                throw LogHelper.LogExceptionMessage(new SecurityTokenEncryptionFailedException(LogHelper.FormatInvariant(LogMessages.IDX10654' ex))); " is 133.
Long Statement,Microsoft.IdentityModel.Tokens,AuthenticatedEncryptionProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\AuthenticatedEncryptionProvider.cs,Decrypt,The length of the statement  "                throw LogHelper.LogExceptionMessage(new SecurityTokenDecryptionFailedException(LogHelper.FormatInvariant(LogMessages.IDX10650' Base64UrlEncoder.Encode(authenticatedData)' Base64UrlEncoder.Encode(iv)' Base64UrlEncoder.Encode(authenticationTag)))); " is 246.
Long Statement,Microsoft.IdentityModel.Tokens,AuthenticatedEncryptionProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\AuthenticatedEncryptionProvider.cs,Decrypt,The length of the statement  "                throw LogHelper.LogExceptionMessage(new SecurityTokenDecryptionFailedException(LogHelper.FormatInvariant(LogMessages.IDX10654' ex))); " is 133.
Long Statement,Microsoft.IdentityModel.Tokens,AuthenticatedEncryptionProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\AuthenticatedEncryptionProvider.cs,GetAlgorithmParameters,The length of the statement  "                throw LogHelper.LogExceptionMessage(new ArgumentException(LogHelper.FormatInvariant(LogMessages.IDX10668' GetType()' algorithm' key))); " is 135.
Long Statement,Microsoft.IdentityModel.Tokens,AuthenticatedEncryptionProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\AuthenticatedEncryptionProvider.cs,GetHmacAlgorithm,The length of the statement  "            throw LogHelper.LogExceptionMessage(new ArgumentException(LogHelper.FormatInvariant(LogMessages.IDX10652' algorithm)' nameof(algorithm))); " is 138.
Long Statement,Microsoft.IdentityModel.Tokens,AuthenticatedEncryptionProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\AuthenticatedEncryptionProvider.cs,ValidateKeySize,The length of the statement  "                    throw LogHelper.LogExceptionMessage(new ArgumentOutOfRangeException("key.KeySize"' LogHelper.FormatInvariant(LogMessages.IDX10653' SecurityAlgorithms.Aes128CbcHmacSha256' 256' key.KeyId' key.KeySize))); " is 202.
Long Statement,Microsoft.IdentityModel.Tokens,AuthenticatedEncryptionProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\AuthenticatedEncryptionProvider.cs,ValidateKeySize,The length of the statement  "                    throw LogHelper.LogExceptionMessage(new ArgumentOutOfRangeException("key.KeySize"' LogHelper.FormatInvariant(LogMessages.IDX10653' SecurityAlgorithms.Aes192CbcHmacSha384' 384' key.KeyId' key.KeySize))); " is 202.
Long Statement,Microsoft.IdentityModel.Tokens,AuthenticatedEncryptionProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\AuthenticatedEncryptionProvider.cs,ValidateKeySize,The length of the statement  "                    throw LogHelper.LogExceptionMessage(new ArgumentOutOfRangeException("key.KeySize"' LogHelper.FormatInvariant(LogMessages.IDX10653' SecurityAlgorithms.Aes256CbcHmacSha512' 512' key.KeyId' key.KeySize))); " is 202.
Long Statement,Microsoft.IdentityModel.Tokens,RsaKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\RsaKeyWrapProvider.cs,UnwrapKey,The length of the statement  "                throw LogHelper.LogExceptionMessage(new SecurityTokenKeyWrapException(LogHelper.FormatInvariant(LogMessages.IDX10659' ex))); " is 124.
Long Statement,Microsoft.IdentityModel.Tokens,RsaKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\RsaKeyWrapProvider.cs,WrapKey,The length of the statement  "                throw LogHelper.LogExceptionMessage(new SecurityTokenKeyWrapException(LogHelper.FormatInvariant(LogMessages.IDX10658' ex))); " is 124.
Long Statement,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,GetSymmetricAlgorithm,The length of the statement  "                throw LogHelper.LogExceptionMessage(new ArgumentException(LogHelper.FormatInvariant(LogMessages.IDX10657' key.GetType()))); " is 123.
Long Statement,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,GetSymmetricAlgorithm,The length of the statement  "                throw LogHelper.LogExceptionMessage(new InvalidOperationException(LogHelper.FormatInvariant(LogMessages.IDX10663' key' algorithm)' ex)); " is 136.
Long Statement,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,IsSupportedAlgorithm,The length of the statement  "            if (algorithm.Equals(SecurityAlgorithms.Aes128KW' StringComparison.Ordinal) || algorithm.Equals(SecurityAlgorithms.Aes256KW' StringComparison.Ordinal)) " is 151.
Long Statement,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,UnwrapKey,The length of the statement  "                throw LogHelper.LogExceptionMessage(new ArgumentException(LogHelper.FormatInvariant(LogMessages.IDX10664' keyBytes.Length << 3)' nameof(keyBytes))); " is 148.
Long Statement,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,UnwrapKey,The length of the statement  "                throw LogHelper.LogExceptionMessage(new SecurityTokenKeyWrapException(LogHelper.FormatInvariant(LogMessages.IDX10659' ex))); " is 124.
Long Statement,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,ValidateKeySize,The length of the statement  "                    throw LogHelper.LogExceptionMessage(new ArgumentOutOfRangeException(nameof(key.Length)' LogHelper.FormatInvariant(LogMessages.IDX10662' SecurityAlgorithms.Aes128KW' 128' Key.KeyId' key.Length << 3))); " is 200.
Long Statement,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,ValidateKeySize,The length of the statement  "                    throw LogHelper.LogExceptionMessage(new ArgumentOutOfRangeException(nameof(key.Length)' LogHelper.FormatInvariant(LogMessages.IDX10662' SecurityAlgorithms.Aes256KW' 256' Key.KeyId' key.Length << 3))); " is 200.
Long Statement,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,ValidateKeySize,The length of the statement  "            throw LogHelper.LogExceptionMessage(new ArgumentOutOfRangeException(nameof(algorithm)' LogHelper.FormatInvariant(LogMessages.IDX10652' algorithm))); " is 148.
Long Statement,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,WrapKey,The length of the statement  "                throw LogHelper.LogExceptionMessage(new ArgumentException(LogHelper.FormatInvariant(LogMessages.IDX10664' keyBytes.Length << 3)' nameof(keyBytes))); " is 148.
Long Statement,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,WrapKey,The length of the statement  "                throw LogHelper.LogExceptionMessage(new SecurityTokenKeyWrapException(LogHelper.FormatInvariant(LogMessages.IDX10658' ex))); " is 124.
Long Statement,Microsoft.IdentityModel.Tokens,JsonWebKey,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\JsonWebKey.cs,CreateRsaParameters,The length of the statement  "                throw LogHelper.LogExceptionMessage(new ArgumentException(LogHelper.FormatInvariant(LogMessages.IDX10700' this' "Modulus"))); " is 125.
Long Statement,Microsoft.IdentityModel.Tokens,JsonWebKey,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\JsonWebKey.cs,CreateRsaParameters,The length of the statement  "                throw LogHelper.LogExceptionMessage(new ArgumentException(LogHelper.FormatInvariant(LogMessages.IDX10700' this)' "Exponent")); " is 126.
Long Statement,Microsoft.IdentityModel.Tokens,JsonWebKeyConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\JsonWebKeyConverter.cs,ConvertFromSecurityKey,The length of the statement  "                throw LogHelper.LogExceptionMessage(new NotSupportedException(LogHelper.FormatInvariant(LogMessages.IDX10674' key.GetType().FullName))); " is 136.
Long Statement,Microsoft.IdentityModel.Tokens,JsonWebKeyConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\JsonWebKeyConverter.cs,TryConvertToSymmetricSecurityKey,The length of the statement  "                LogHelper.LogExceptionMessage(new InvalidOperationException(LogHelper.FormatInvariant(LogMessages.IDX10813' typeof(SymmetricSecurityKey)' webKey' ex)' ex)); " is 156.
Long Statement,Microsoft.IdentityModel.Tokens,JsonWebKeyConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\JsonWebKeyConverter.cs,TryConvertToX509SecurityKey,The length of the statement  "                LogHelper.LogExceptionMessage(new InvalidOperationException(LogHelper.FormatInvariant(LogMessages.IDX10813' typeof(X509SecurityKey)' webKey' ex)' ex)); " is 151.
Long Statement,Microsoft.IdentityModel.Tokens,JsonWebKeyConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\JsonWebKeyConverter.cs,TryCreateToRsaSecurityKey,The length of the statement  "                LogHelper.LogExceptionMessage(new InvalidOperationException(LogHelper.FormatInvariant(LogMessages.IDX10813' typeof(RsaSecurityKey)' webKey' ex)' ex)); " is 150.
Long Statement,Microsoft.IdentityModel.Tokens,JsonWebKeyConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\JsonWebKeyConverter.cs,TryConvertToECDsaSecurityKey,The length of the statement  "                LogHelper.LogExceptionMessage(new InvalidOperationException(LogHelper.FormatInvariant(LogMessages.IDX10813' typeof(ECDsaSecurityKey)' webKey' ex)' ex)); " is 152.
Long Statement,Microsoft.IdentityModel.Tokens,JsonWebKeySet,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\JsonWebKeySet.cs,GetSigningKeys,The length of the statement  "                    if ((webKey.X5c == null || webKey.X5c.Count == 0) && (string.IsNullOrEmpty(webKey.E) && string.IsNullOrEmpty(webKey.N))) " is 120.
Long Statement,Microsoft.IdentityModel.Tokens,RsaSecurityKey,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\RsaSecurityKey.cs,IntializeWithRsaParameters,The length of the statement  "                throw LogHelper.LogExceptionMessage(new ArgumentException(LogHelper.FormatInvariant(LogMessages.IDX10700' this' "Modulus"))); " is 125.
Long Statement,Microsoft.IdentityModel.Tokens,RsaSecurityKey,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\RsaSecurityKey.cs,IntializeWithRsaParameters,The length of the statement  "                throw LogHelper.LogExceptionMessage(new ArgumentException(LogHelper.FormatInvariant(LogMessages.IDX10700' this' "Exponent"))); " is 126.
Long Statement,Microsoft.IdentityModel.Tokens,RsaSecurityKey,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\RsaSecurityKey.cs,IntializeWithRsaParameters,The length of the statement  "            _hasPrivateKey = rsaParameters.D != null && rsaParameters.DP != null && rsaParameters.DQ != null && rsaParameters.P != null && rsaParameters.Q != null && rsaParameters.InverseQ != null; " is 185.
Long Statement,Microsoft.IdentityModel.Tokens,SymmetricSignatureProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\SymmetricSignatureProvider.cs,GetKeyedHashAlgorithm,The length of the statement  "                    throw LogHelper.LogExceptionMessage(new InvalidOperationException(LogHelper.FormatInvariant(LogMessages.IDX10677' Key' (algorithm ?? "null"))' ex)); " is 148.
Long Statement,Microsoft.IdentityModel.Tokens,TokenValidationParameters,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\TokenValidationParameters.cs,CreateClaimsIdentity,The length of the statement  "            return new ClaimsIdentity(authenticationType: AuthenticationType ?? DefaultAuthenticationType' nameType: nameClaimType ?? ClaimsIdentity.DefaultNameClaimType' roleType: roleClaimType ?? ClaimsIdentity.DefaultRoleClaimType); " is 223.
Long Statement,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The length of the statement  "            byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 }; " is 150.
Long Statement,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The length of the statement  "            byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 }; " is 150.
Long Statement,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The length of the statement  "            byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 }; " is 150.
Long Statement,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The length of the statement  "            byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 }; " is 150.
Long Statement,Microsoft.IdentityModel.Tokens,Validators,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Validators.cs,ValidateAudience,The length of the statement  "                    throw LogHelper.LogExceptionMessage(new SecurityTokenInvalidAudienceException(LogHelper.FormatInvariant(LogMessages.IDX10231' securityToken)) " is 141.
Long Statement,Microsoft.IdentityModel.Tokens,Validators,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Validators.cs,ValidateAudience,The length of the statement  "                throw LogHelper.LogExceptionMessage(new SecurityTokenInvalidAudienceException(LogMessages.IDX10207) { InvalidAudience = null }); " is 128.
Long Statement,Microsoft.IdentityModel.Tokens,Validators,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Validators.cs,ValidateAudience,The length of the statement  "                throw LogHelper.LogExceptionMessage(new SecurityTokenInvalidAudienceException(LogMessages.IDX10208) { InvalidAudience = Utility.SerializeAsSingleCommaDelimitedString(audiences) }); " is 180.
Long Statement,Microsoft.IdentityModel.Tokens,Validators,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Validators.cs,ValidateAudience,The length of the statement  "                new SecurityTokenInvalidAudienceException(LogHelper.FormatInvariant(LogMessages.IDX10214' Utility.SerializeAsSingleCommaDelimitedString(audiences)' (validationParameters.ValidAudience ?? "null")' Utility.SerializeAsSingleCommaDelimitedString(validationParameters.ValidAudiences))) " is 280.
Long Statement,Microsoft.IdentityModel.Tokens,Validators,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Validators.cs,ValidateIssuer,The length of the statement  "                new SecurityTokenInvalidIssuerException(LogHelper.FormatInvariant(LogMessages.IDX10205' issuer' (validationParameters.ValidIssuer ?? "null")' Utility.SerializeAsSingleCommaDelimitedString(validationParameters.ValidIssuers))) " is 224.
Long Statement,Microsoft.IdentityModel.Tokens,Validators,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Validators.cs,ValidateIssuerSecurityKey,The length of the statement  "                    throw LogHelper.LogExceptionMessage(new SecurityTokenInvalidSigningKeyException(LogHelper.FormatInvariant(LogMessages.IDX10232' securityKey)){ SigningKey = securityKey }); " is 171.
Long Statement,Microsoft.IdentityModel.Tokens,Validators,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Validators.cs,ValidateIssuerSecurityKey,The length of the statement  "                    throw LogHelper.LogExceptionMessage(new SecurityTokenInvalidSigningKeyException(LogHelper.FormatInvariant(LogMessages.IDX10248' notBeforeUtc' utcNow))); " is 152.
Long Statement,Microsoft.IdentityModel.Tokens,Validators,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Validators.cs,ValidateIssuerSecurityKey,The length of the statement  "                    throw LogHelper.LogExceptionMessage(new SecurityTokenInvalidSigningKeyException(LogHelper.FormatInvariant(LogMessages.IDX10249' notAfterUtc' utcNow))); " is 151.
Long Statement,Microsoft.IdentityModel.Tokens,Validators,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Validators.cs,ValidateLifetime,The length of the statement  "                    throw LogHelper.LogExceptionMessage(new SecurityTokenInvalidLifetimeException(LogHelper.FormatInvariant(LogMessages.IDX10230' securityToken)) " is 141.
Long Statement,Microsoft.IdentityModel.Tokens,Validators,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Validators.cs,ValidateLifetime,The length of the statement  "                throw LogHelper.LogExceptionMessage(new SecurityTokenNoExpirationException(LogHelper.FormatInvariant(LogMessages.IDX10225' securityToken == null ? "null" : securityToken.GetType().ToString()))); " is 194.
Long Statement,Microsoft.IdentityModel.Tokens,Validators,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Validators.cs,ValidateLifetime,The length of the statement  "                throw LogHelper.LogExceptionMessage(new SecurityTokenInvalidLifetimeException(LogHelper.FormatInvariant(LogMessages.IDX10224' notBefore.Value' expires.Value)) " is 158.
Long Statement,Microsoft.IdentityModel.Tokens,Validators,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Validators.cs,ValidateLifetime,The length of the statement  "                throw LogHelper.LogExceptionMessage(new SecurityTokenNotYetValidException(LogHelper.FormatInvariant(LogMessages.IDX10222' notBefore.Value' utcNow)) " is 147.
Long Statement,Microsoft.IdentityModel.Tokens,Validators,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Validators.cs,ValidateLifetime,The length of the statement  "                throw LogHelper.LogExceptionMessage(new SecurityTokenExpiredException(LogHelper.FormatInvariant(LogMessages.IDX10223' expires.Value' utcNow)) " is 141.
Long Statement,Microsoft.IdentityModel.Tokens,Validators,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Validators.cs,ValidateTokenReplay,The length of the statement  "                    throw LogHelper.LogExceptionMessage(new SecurityTokenReplayDetectedException(LogHelper.FormatInvariant(LogMessages.IDX10228' securityToken))); " is 142.
Long Statement,Microsoft.IdentityModel.Tokens,Validators,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Validators.cs,ValidateTokenReplay,The length of the statement  "                    throw LogHelper.LogExceptionMessage(new SecurityTokenNoExpirationException(LogHelper.FormatInvariant(LogMessages.IDX10227' securityToken))); " is 140.
Long Statement,Microsoft.IdentityModel.Tokens,Validators,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Validators.cs,ValidateTokenReplay,The length of the statement  "                    throw LogHelper.LogExceptionMessage(new SecurityTokenReplayDetectedException(LogHelper.FormatInvariant(LogMessages.IDX10228' securityToken))); " is 142.
Long Statement,Microsoft.IdentityModel.Tokens,Validators,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Validators.cs,ValidateTokenReplay,The length of the statement  "                    throw LogHelper.LogExceptionMessage(new SecurityTokenReplayAddFailedException(LogHelper.FormatInvariant(LogMessages.IDX10229' securityToken))); " is 143.
Long Statement,Microsoft.IdentityModel.Json.Bson,BsonBinaryWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonBinaryWriter.cs,WriteTokenInternal,The length of the statement  "                    throw new ArgumentOutOfRangeException(nameof(t)' "Unexpected token when writing BSON: {0}".FormatWith(CultureInfo.InvariantCulture' t.Type)); " is 141.
Long Statement,Microsoft.IdentityModel.Json.Bson,BsonBinaryWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonBinaryWriter.cs,CalculateSize,The length of the statement  "                    throw new ArgumentOutOfRangeException(nameof(t)' "Unexpected token when writing BSON: {0}".FormatWith(CultureInfo.InvariantCulture' t.Type)); " is 141.
Long Statement,Microsoft.IdentityModel.Json.Bson,BsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonReader.cs,Read,The length of the statement  "                        throw JsonReaderException.Create(this' "Unexpected state: {0}".FormatWith(CultureInfo.InvariantCulture' _bsonReaderState)); " is 123.
Long Statement,Microsoft.IdentityModel.Json.Bson,BsonWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonWriter.cs,AddToken,The length of the statement  "                    throw JsonWriterException.Create(this' "Error writing {0} value. BSON must start with an Object or Array.".FormatWith(CultureInfo.InvariantCulture' token.Type)' null); " is 167.
Long Statement,Microsoft.IdentityModel.Json.Bson,BsonWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonWriter.cs,WriteValue,The length of the statement  "                throw JsonWriterException.Create(this' "Value is too large to fit in a signed 32 bit integer. BSON does not support unsigned values."' null); " is 141.
Long Statement,Microsoft.IdentityModel.Json.Bson,BsonWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonWriter.cs,WriteValue,The length of the statement  "                throw JsonWriterException.Create(this' "Value is too large to fit in a signed 64 bit integer. BSON does not support unsigned values."' null); " is 141.
Long Statement,Microsoft.IdentityModel.Json,DefaultJsonNameTable,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\DefaultJsonNameTable.cs,Get,The length of the statement  "            // make sure index is evaluated before accessing _entries' otherwise potential race condition causing IndexOutOfRangeException " is 126.
Long Statement,Microsoft.IdentityModel.Json,JsonConvert,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonConvert.cs,ToString,The length of the statement  "            return EnsureFloatFormat(value' EnsureDecimalPlace(value' value.ToString("R"' CultureInfo.InvariantCulture))' floatFormatHandling' quoteChar' nullable); " is 152.
Long Statement,Microsoft.IdentityModel.Json,JsonConvert,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonConvert.cs,ToString,The length of the statement  "            return EnsureFloatFormat(value' EnsureDecimalPlace(value' value.ToString("R"' CultureInfo.InvariantCulture))' floatFormatHandling' quoteChar' nullable); " is 152.
Long Statement,Microsoft.IdentityModel.Json,JsonConvert,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonConvert.cs,EnsureDecimalPlace,The length of the statement  "            if (double.IsNaN(value) || double.IsInfinity(value) || text.IndexOf('.') != -1 || text.IndexOf('E') != -1 || text.IndexOf('e') != -1) " is 133.
Long Statement,Microsoft.IdentityModel.Json,JsonConvert,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonConvert.cs,ToString,The length of the statement  "            throw new ArgumentException("Unsupported type: {0}. Use the JsonSerializer class to get the object's JSON representation.".FormatWith(CultureInfo.InvariantCulture' value.GetType())); " is 182.
Long Statement,Microsoft.IdentityModel.Json,JsonConvert,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonConvert.cs,PopulateObject,The length of the statement  "                            throw JsonSerializationException.Create(jsonReader' "Additional text found in JSON string after finishing deserializing object."); " is 130.
Long Statement,Microsoft.IdentityModel.Json,JsonConverter<T>,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonConverter.cs,WriteJson,The length of the statement  "                throw new JsonSerializationException("Converter cannot write specified value to JSON. {0} is required.".FormatWith(CultureInfo.InvariantCulture' typeof(T))); " is 157.
Long Statement,Microsoft.IdentityModel.Json,JsonConverter<T>,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonConverter.cs,ReadJson,The length of the statement  "                throw new JsonSerializationException("Converter cannot read JSON with the specified existing value. {0} is required.".FormatWith(CultureInfo.InvariantCulture' typeof(T))); " is 171.
Long Statement,Microsoft.IdentityModel.Json,JsonPosition,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonPosition.cs,WriteTo,The length of the statement  "                        JavaScriptUtils.WriteEscapedJavaScriptString(writer' propertyName' '\''' false' JavaScriptUtils.SingleQuoteCharEscapeFlags' StringEscapeHandling.Default' null' ref buffer); " is 172.
Long Statement,Microsoft.IdentityModel.Json,JsonPosition,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonPosition.cs,FormatMessage,The length of the statement  "                message += "' line {0}' position {1}".FormatWith(CultureInfo.InvariantCulture' lineInfo.LineNumber' lineInfo.LinePosition); " is 123.
Long Statement,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,ReadAndMoveToContentAsync,The length of the statement  "            return await ReadAsync(cancellationToken).ConfigureAwait(false) && await MoveToContentAsync(cancellationToken).ConfigureAwait(false); " is 133.
Long Statement,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,Push,The length of the statement  "                // this is a little hacky because Depth increases when first property/value is written but only testing here is faster/simpler " is 126.
Long Statement,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,Push,The length of the statement  "                    throw JsonReaderException.Create(this' "The reader's MaxDepth of {0} has been exceeded.".FormatWith(CultureInfo.InvariantCulture' _maxDepth)); " is 142.
Long Statement,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,ReadAsInt32,The length of the statement  "                            throw JsonReaderException.Create(this' "Could not convert to integer: {0}.".FormatWith(CultureInfo.InvariantCulture' v)' ex); " is 125.
Long Statement,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,ReadAsInt32,The length of the statement  "            throw JsonReaderException.Create(this' "Error reading integer. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture' t)); " is 132.
Long Statement,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,ReadInt32String,The length of the statement  "                throw JsonReaderException.Create(this' "Could not convert string to integer: {0}.".FormatWith(CultureInfo.InvariantCulture' s)); " is 128.
Long Statement,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,ReadAsString,The length of the statement  "            throw JsonReaderException.Create(this' "Error reading string. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture' t)); " is 131.
Long Statement,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,ReadAsBytes,The length of the statement  "                        throw JsonReaderException.Create(this' "Error reading bytes. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture' TokenType)); " is 138.
Long Statement,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,ReadAsBytes,The length of the statement  "            throw JsonReaderException.Create(this' "Error reading bytes. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture' t)); " is 130.
Long Statement,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,ReadArrayElementIntoByteArrayReportDone,The length of the statement  "                    throw JsonReaderException.Create(this' "Unexpected token when reading bytes: {0}.".FormatWith(CultureInfo.InvariantCulture' TokenType)); " is 136.
Long Statement,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,ReadAsDouble,The length of the statement  "            throw JsonReaderException.Create(this' "Error reading double. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture' t)); " is 131.
Long Statement,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,ReadDoubleString,The length of the statement  "                throw JsonReaderException.Create(this' "Could not convert string to double: {0}.".FormatWith(CultureInfo.InvariantCulture' s)); " is 127.
Long Statement,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,ReadAsBoolean,The length of the statement  "            throw JsonReaderException.Create(this' "Error reading boolean. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture' t)); " is 132.
Long Statement,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,ReadBooleanString,The length of the statement  "                throw JsonReaderException.Create(this' "Could not convert string to boolean: {0}.".FormatWith(CultureInfo.InvariantCulture' s)); " is 128.
Long Statement,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,ReadAsDecimal,The length of the statement  "                            throw JsonReaderException.Create(this' "Could not convert to decimal: {0}.".FormatWith(CultureInfo.InvariantCulture' v)' ex); " is 125.
Long Statement,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,ReadAsDecimal,The length of the statement  "            throw JsonReaderException.Create(this' "Error reading decimal. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture' t)); " is 132.
Long Statement,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,ReadDecimalString,The length of the statement  "                throw JsonReaderException.Create(this' "Could not convert string to decimal: {0}.".FormatWith(CultureInfo.InvariantCulture' s)); " is 128.
Long Statement,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,ReadAsDateTime,The length of the statement  "            throw JsonReaderException.Create(this' "Error reading date. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture' TokenType)); " is 137.
Long Statement,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,ReadDateTimeString,The length of the statement  "            throw JsonReaderException.Create(this' "Could not convert string to DateTime: {0}.".FormatWith(CultureInfo.InvariantCulture' s)); " is 129.
Long Statement,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,ReadAsDateTimeOffset,The length of the statement  "                    throw JsonReaderException.Create(this' "Error reading date. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture' t)); " is 129.
Long Statement,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,ReadDateTimeOffsetString,The length of the statement  "            throw JsonReaderException.Create(this' "Could not convert string to DateTimeOffset: {0}.".FormatWith(CultureInfo.InvariantCulture' s)); " is 135.
Long Statement,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,ReadIntoWrappedTypeObject,The length of the statement  "            throw JsonReaderException.Create(this' "Error reading bytes. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture' JsonToken.StartObject)); " is 150.
Long Statement,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,ValidateEnd,The length of the statement  "                throw JsonReaderException.Create(this' "JsonToken {0} is not valid for closing JsonType {1}.".FormatWith(CultureInfo.InvariantCulture' endToken' currentObject)); " is 161.
Long Statement,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,SetStateBasedOnCurrent,The length of the statement  "                    throw JsonReaderException.Create(this' "While setting the reader state back to current object an unexpected JsonType was encountered: {0}".FormatWith(CultureInfo.InvariantCulture' currentObject)); " is 196.
Long Statement,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,GetTypeForCloseToken,The length of the statement  "                    throw JsonReaderException.Create(this' "Not a valid close JsonToken: {0}".FormatWith(CultureInfo.InvariantCulture' token)); " is 123.
Long Statement,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,ReadForType,The length of the statement  "                        throw JsonReaderException.Create(this' "An undefined token is not a valid {0}.".FormatWith(CultureInfo.InvariantCulture' contract?.UnderlyingType ?? typeof(long))); " is 164.
Long Statement,Microsoft.IdentityModel.Json,JsonSerializer,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonSerializer.cs,PopulateInternal,The length of the statement  "            ResetReader(reader' previousCulture' previousDateTimeZoneHandling' previousDateParseHandling' previousFloatParseHandling' previousMaxDepth' previousDateFormatString); " is 166.
Long Statement,Microsoft.IdentityModel.Json,JsonSerializer,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonSerializer.cs,DeserializeInternal,The length of the statement  "            ResetReader(reader' previousCulture' previousDateTimeZoneHandling' previousDateParseHandling' previousFloatParseHandling' previousMaxDepth' previousDateFormatString); " is 166.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,DoReadAsync,The length of the statement  "                        throw JsonReaderException.Create(this' "Unexpected state: {0}.".FormatWith(CultureInfo.InvariantCulture' CurrentState)); " is 120.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParsePostValueAsync,The length of the statement  "                            throw JsonReaderException.Create(this' "After parsing a value an unexpected character was encountered: {0}.".FormatWith(CultureInfo.InvariantCulture' currentChar)); " is 164.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadFromFinishedAsync,The length of the statement  "                throw JsonReaderException.Create(this' "Additional text encountered after finished reading JSON content: {0}.".FormatWith(CultureInfo.InvariantCulture' _chars[_charPos])); " is 171.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadDataAsync,The length of the statement  "            int charsRead = await _reader.ReadAsync(_chars' _charsUsed' _chars.Length - _charsUsed - 1' cancellationToken).ConfigureAwait(false); " is 133.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadStringIntoBufferAsync,The length of the statement  "                                throw JsonReaderException.Create(this' "Unterminated string. Expected delimiter: {0}.".FormatWith(CultureInfo.InvariantCulture' quote)); " is 136.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadStringIntoBufferAsync,The length of the statement  "                            throw JsonReaderException.Create(this' "Unterminated string. Expected delimiter: {0}.".FormatWith(CultureInfo.InvariantCulture' quote)); " is 136.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadStringIntoBufferAsync,The length of the statement  "                                        if (await EnsureCharsAsync(2' true' cancellationToken).ConfigureAwait(false) && _chars[_charPos] == '\\' && _chars[_charPos + 1] == 'u') " is 136.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadStringIntoBufferAsync,The length of the statement  "                                throw JsonReaderException.Create(this' "Bad JSON escape sequence: {0}.".FormatWith(CultureInfo.InvariantCulture' @"\" + currentChar)); " is 134.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseCommentAsync,The length of the statement  "                throw JsonReaderException.Create(this' "Error parsing comment. Expected: *' got {0}.".FormatWith(CultureInfo.InvariantCulture' _chars[_charPos])); " is 146.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseConstructorAsync,The length of the statement  "                        throw JsonReaderException.Create(this' "Unexpected character while parsing constructor: {0}.".FormatWith(CultureInfo.InvariantCulture' currentChar)); " is 149.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseConstructorAsync,The length of the statement  "                    throw JsonReaderException.Create(this' "Unexpected character while parsing constructor: {0}.".FormatWith(CultureInfo.InvariantCulture' _chars[_charPos])); " is 154.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseNumberNaNAsync,The length of the statement  "            return ParseNumberNaN(readType' await MatchValueWithTrailingSeparatorAsync(JsonConvert.NaN' cancellationToken).ConfigureAwait(false)); " is 134.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseNumberPositiveInfinityAsync,The length of the statement  "            return ParseNumberPositiveInfinity(readType' await MatchValueWithTrailingSeparatorAsync(JsonConvert.PositiveInfinity' cancellationToken).ConfigureAwait(false)); " is 160.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseNumberNegativeInfinityAsync,The length of the statement  "            return ParseNumberNegativeInfinity(readType' await MatchValueWithTrailingSeparatorAsync(JsonConvert.NegativeInfinity' cancellationToken).ConfigureAwait(false)); " is 160.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParsePropertyAsync,The length of the statement  "                throw JsonReaderException.Create(this' "Invalid property identifier character: {0}.".FormatWith(CultureInfo.InvariantCulture' _chars[_charPos])); " is 145.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParsePropertyAsync,The length of the statement  "                throw JsonReaderException.Create(this' "Invalid character after parsing property name. Expected ':' but got: {0}.".FormatWith(CultureInfo.InvariantCulture' _chars[_charPos])); " is 175.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadFinishedAsync,The length of the statement  "                    throw JsonReaderException.Create(this' "Additional text encountered after finished reading JSON content: {0}.".FormatWith(CultureInfo.InvariantCulture' _chars[_charPos])); " is 171.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadStringValueAsync,The length of the statement  "                    throw JsonReaderException.Create(this' "Unexpected state: {0}.".FormatWith(CultureInfo.InvariantCulture' CurrentState)); " is 120.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadNumberValueAsync,The length of the statement  "                    throw JsonReaderException.Create(this' "Unexpected state: {0}.".FormatWith(CultureInfo.InvariantCulture' CurrentState)); " is 120.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,DoReadAsBooleanAsync,The length of the statement  "                                if (!await MatchValueWithTrailingSeparatorAsync(isTrue ? JsonConvert.True : JsonConvert.False' cancellationToken).ConfigureAwait(false)) " is 136.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,DoReadAsBooleanAsync,The length of the statement  "                    throw JsonReaderException.Create(this' "Unexpected state: {0}.".FormatWith(CultureInfo.InvariantCulture' CurrentState)); " is 120.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,DoReadAsBytesAsync,The length of the statement  "                                        throw JsonReaderException.Create(this' "Error reading bytes. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture' TokenType)); " is 138.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,DoReadAsBytesAsync,The length of the statement  "                    throw JsonReaderException.Create(this' "Unexpected state: {0}.".FormatWith(CultureInfo.InvariantCulture' CurrentState)); " is 120.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadIntoWrappedTypeObjectAsync,The length of the statement  "            throw JsonReaderException.Create(this' "Error reading bytes. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture' JsonToken.StartObject)); " is 150.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,DoReadAsDateTimeOffsetAsync,The length of the statement  "            return (DateTimeOffset?)await ReadStringValueAsync(ReadType.ReadAsDateTimeOffset' cancellationToken).ConfigureAwait(false); " is 123.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,Read,The length of the statement  "                            throw JsonReaderException.Create(this' "Additional text encountered after finished reading JSON content: {0}.".FormatWith(CultureInfo.InvariantCulture' _chars[_charPos])); " is 171.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,Read,The length of the statement  "                        throw JsonReaderException.Create(this' "Unexpected state: {0}.".FormatWith(CultureInfo.InvariantCulture' CurrentState)); " is 120.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadAsBytes,The length of the statement  "                                        throw JsonReaderException.Create(this' "Error reading bytes. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture' TokenType)); " is 138.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadAsBytes,The length of the statement  "                    throw JsonReaderException.Create(this' "Unexpected state: {0}.".FormatWith(CultureInfo.InvariantCulture' CurrentState)); " is 120.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadStringValue,The length of the statement  "                    throw JsonReaderException.Create(this' "Unexpected state: {0}.".FormatWith(CultureInfo.InvariantCulture' CurrentState)); " is 120.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,CreateUnexpectedCharacterException,The length of the statement  "            return JsonReaderException.Create(this' "Unexpected character encountered while parsing value: {0}.".FormatWith(CultureInfo.InvariantCulture' c)); " is 146.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadAsBoolean,The length of the statement  "                    throw JsonReaderException.Create(this' "Unexpected state: {0}.".FormatWith(CultureInfo.InvariantCulture' CurrentState)); " is 120.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadNumberValue,The length of the statement  "                    throw JsonReaderException.Create(this' "Unexpected state: {0}.".FormatWith(CultureInfo.InvariantCulture' CurrentState)); " is 120.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadFinished,The length of the statement  "                    throw JsonReaderException.Create(this' "Additional text encountered after finished reading JSON content: {0}.".FormatWith(CultureInfo.InvariantCulture' _chars[_charPos])); " is 171.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadStringIntoBuffer,The length of the statement  "                                throw JsonReaderException.Create(this' "Unterminated string. Expected delimiter: {0}.".FormatWith(CultureInfo.InvariantCulture' quote)); " is 136.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadStringIntoBuffer,The length of the statement  "                            throw JsonReaderException.Create(this' "Unterminated string. Expected delimiter: {0}.".FormatWith(CultureInfo.InvariantCulture' quote)); " is 136.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadStringIntoBuffer,The length of the statement  "                                throw JsonReaderException.Create(this' "Bad JSON escape sequence: {0}.".FormatWith(CultureInfo.InvariantCulture' @"\" + currentChar)); " is 134.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ConvertUnicode,The length of the statement  "                    throw JsonReaderException.Create(this' @"Invalid Unicode escape sequence: \u{0}.".FormatWith(CultureInfo.InvariantCulture' new string(_chars' _charPos' 4))); " is 157.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadNumberCharIntoBuffer,The length of the statement  "                    if (char.IsWhiteSpace(currentChar) || currentChar == ''' || currentChar == '}' || currentChar == ']' || currentChar == ')' || currentChar == '/') " is 145.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadNumberCharIntoBuffer,The length of the statement  "                    throw JsonReaderException.Create(this' "Unexpected character encountered while parsing number: {0}.".FormatWith(CultureInfo.InvariantCulture' currentChar)); " is 156.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParsePostValue,The length of the statement  "                            throw JsonReaderException.Create(this' "After parsing a value an unexpected character was encountered: {0}.".FormatWith(CultureInfo.InvariantCulture' currentChar)); " is 164.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseProperty,The length of the statement  "                throw JsonReaderException.Create(this' "Invalid property identifier character: {0}.".FormatWith(CultureInfo.InvariantCulture' _chars[_charPos])); " is 145.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseProperty,The length of the statement  "                throw JsonReaderException.Create(this' "Invalid character after parsing property name. Expected ':' but got: {0}.".FormatWith(CultureInfo.InvariantCulture' _chars[_charPos])); " is 175.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadUnquotedPropertyReportIfDone,The length of the statement  "            throw JsonReaderException.Create(this' "Invalid JavaScript property identifier character: {0}.".FormatWith(CultureInfo.InvariantCulture' currentChar)); " is 151.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseConstructor,The length of the statement  "                        throw JsonReaderException.Create(this' "Unexpected character while parsing constructor: {0}.".FormatWith(CultureInfo.InvariantCulture' currentChar)); " is 149.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseConstructor,The length of the statement  "                    throw JsonReaderException.Create(this' "Unexpected character while parsing constructor: {0}.".FormatWith(CultureInfo.InvariantCulture' _chars[_charPos])); " is 154.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The length of the statement  "            bool nonBase10 = (firstChar == '0' && _stringReference.Length > 1 && _stringReference.Chars[_stringReference.StartIndex + 1] != '.' && _stringReference.Chars[_stringReference.StartIndex + 1] != 'e' && _stringReference.Chars[_stringReference.StartIndex + 1] != 'E'); " is 265.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The length of the statement  "                                throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex); " is 121.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The length of the statement  "                                throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); " is 138.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The length of the statement  "                                int integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt32(number' 16) : Convert.ToInt32(number' 8); " is 133.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The length of the statement  "                                throw ThrowReaderError("Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' number)' ex); " is 122.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The length of the statement  "                            ParseResult parseResult = ConvertUtils.Int32TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out int value); " is 146.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The length of the statement  "                                throw ThrowReaderError("JSON integer {0} is too large or small for an Int32.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); " is 149.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The length of the statement  "                                throw ThrowReaderError("Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); " is 139.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The length of the statement  "                                long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8); " is 134.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The length of the statement  "                                throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number)' ex); " is 122.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The length of the statement  "                            ParseResult parseResult = ConvertUtils.DecimalTryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out decimal value); " is 152.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The length of the statement  "                                throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); " is 139.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The length of the statement  "                                long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8); " is 134.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The length of the statement  "                                throw ThrowReaderError("Input string '{0}' is not a valid double.".FormatWith(CultureInfo.InvariantCulture' number)' ex); " is 121.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The length of the statement  "                                throw ThrowReaderError("Input string '{0}' is not a valid double.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); " is 138.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The length of the statement  "                                numberValue = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8); " is 133.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The length of the statement  "                                throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex); " is 121.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The length of the statement  "                            ParseResult parseResult = ConvertUtils.Int64TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out long value); " is 147.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The length of the statement  "                                    throw ThrowReaderError("JSON integer {0} is too large to parse.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); " is 136.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The length of the statement  "                                throw ThrowReaderError("JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); " is 149.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The length of the statement  "                                    parseResult = ConvertUtils.DecimalTryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out decimal d); " is 136.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The length of the statement  "                                        throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); " is 139.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The length of the statement  "                                        throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString())); " is 138.
Long Statement,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseComment,The length of the statement  "                throw JsonReaderException.Create(this' "Error parsing comment. Expected: *' got {0}.".FormatWith(CultureInfo.InvariantCulture' _chars[_charPos])); " is 146.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,WriteIndentAsync,The length of the statement  "            await _writer.WriteAsync(_indentChars' 0' newLineLen + Math.Min(currentIndentCount' IndentCharBufferSize)' cancellationToken).ConfigureAwait(false); " is 148.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,WriteIndentAsync,The length of the statement  "                await _writer.WriteAsync(_indentChars' newLineLen' Math.Min(currentIndentCount' IndentCharBufferSize)' cancellationToken).ConfigureAwait(false); " is 144.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,WriteEscapedStringAsync,The length of the statement  "            return JavaScriptUtils.WriteEscapedJavaScriptStringAsync(_writer' value' _quoteChar' quote' _charEscapeFlags' StringEscapeHandling' this' _writeBuffer' cancellationToken); " is 171.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,WritePropertyNameAsync,The length of the statement  "            return _safeAsync ? DoWritePropertyNameAsync(name' cancellationToken) : base.WritePropertyNameAsync(name' cancellationToken); " is 125.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,WritePropertyNameAsync,The length of the statement  "            return _safeAsync ? DoWritePropertyNameAsync(name' escape' cancellationToken) : base.WritePropertyNameAsync(name' escape' cancellationToken); " is 141.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,WriteStartConstructorAsync,The length of the statement  "            return _safeAsync ? DoWriteStartConstructorAsync(name' cancellationToken) : base.WriteStartConstructorAsync(name' cancellationToken); " is 133.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,DoWriteStartConstructorAsync,The length of the statement  "            await InternalWriteStartAsync(JsonToken.StartConstructor' JsonContainerType.Constructor' cancellationToken).ConfigureAwait(false); " is 130.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,DoWriteValueAsync,The length of the statement  "            return value == null ? DoWriteNullAsync(cancellationToken) : DoWriteValueAsync(value.GetValueOrDefault()' cancellationToken); " is 125.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,DoWriteValueAsync,The length of the statement  "            return value == null ? DoWriteNullAsync(cancellationToken) : WriteIntegerValueAsync(value.GetValueOrDefault()' cancellationToken); " is 130.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,WriteValueAsync,The length of the statement  "            return _safeAsync ? (value == null ? WriteNullAsync(cancellationToken) : WriteValueNonNullAsync(value' cancellationToken)) : base.WriteValueAsync(value' cancellationToken); " is 172.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,DoWriteValueAsync,The length of the statement  "            return value == null ? DoWriteNullAsync(cancellationToken) : DoWriteValueAsync(value.GetValueOrDefault()' cancellationToken); " is 125.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,DoWriteValueAsync,The length of the statement  "            return value == null ? DoWriteNullAsync(cancellationToken) : DoWriteValueAsync(value.GetValueOrDefault()' cancellationToken); " is 125.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,DoWriteValueAsync,The length of the statement  "            return value == null ? DoWriteNullAsync(cancellationToken) : DoWriteValueAsync(value.GetValueOrDefault()' cancellationToken); " is 125.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,DoWriteValueAsync,The length of the statement  "            return value == null ? DoWriteNullAsync(cancellationToken) : DoWriteValueAsync(value.GetValueOrDefault()' cancellationToken); " is 125.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,WriteValueAsync,The length of the statement  "            return WriteValueInternalAsync(JsonToken.Float' JsonConvert.ToString(value' FloatFormatHandling' QuoteChar' nullable)' cancellationToken); " is 138.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,WriteValueAsync,The length of the statement  "            return _safeAsync ? (value.HasValue ? WriteValueAsync(value.GetValueOrDefault()' true' cancellationToken) : WriteNullAsync(cancellationToken)) : base.WriteValueAsync(value' cancellationToken); " is 192.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,WriteValueAsync,The length of the statement  "            return WriteValueInternalAsync(JsonToken.Float' JsonConvert.ToString(value' FloatFormatHandling' QuoteChar' nullable)' cancellationToken); " is 138.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,WriteValueAsync,The length of the statement  "            return _safeAsync ? (value.HasValue ? WriteValueAsync(value.GetValueOrDefault()' true' cancellationToken) : WriteNullAsync(cancellationToken)) : base.WriteValueAsync(value' cancellationToken); " is 192.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,DoWriteValueAsync,The length of the statement  "            return value == null ? DoWriteNullAsync(cancellationToken) : DoWriteValueAsync(value.GetValueOrDefault()' cancellationToken); " is 125.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,DoWriteValueAsync,The length of the statement  "            return value == null ? DoWriteNullAsync(cancellationToken) : WriteIntegerValueAsync(value.GetValueOrDefault()' cancellationToken); " is 130.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,DoWriteValueAsync,The length of the statement  "            return value == null ? DoWriteNullAsync(cancellationToken) : WriteIntegerValueAsync(value.GetValueOrDefault()' cancellationToken); " is 130.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,DoWriteValueAsync,The length of the statement  "            return value == null ? DoWriteNullAsync(cancellationToken) : WriteIntegerValueAsync(value.GetValueOrDefault()' cancellationToken); " is 130.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,DoWriteValueAsync,The length of the statement  "            return value == null ? DoWriteNullAsync(cancellationToken) : WriteIntegerValueAsync(value.GetValueOrDefault()' cancellationToken); " is 130.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,DoWriteValueAsync,The length of the statement  "                return value == null ? _writer.WriteAsync(JsonConvert.Null' cancellationToken) : WriteEscapedStringAsync(value' true' cancellationToken); " is 137.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,DoWriteValueAsync,The length of the statement  "            await (value == null ? _writer.WriteAsync(JsonConvert.Null' cancellationToken) : WriteEscapedStringAsync(value' true' cancellationToken)).ConfigureAwait(false); " is 160.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,DoWriteValueAsync,The length of the statement  "            return value == null ? DoWriteNullAsync(cancellationToken) : DoWriteValueAsync(value.GetValueOrDefault()' cancellationToken); " is 125.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,DoWriteValueAsync,The length of the statement  "            return value == null ? DoWriteNullAsync(cancellationToken) : WriteIntegerValueAsync(value.GetValueOrDefault()' cancellationToken); " is 130.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,DoWriteValueAsync,The length of the statement  "            return value == null ? DoWriteNullAsync(cancellationToken) : WriteIntegerValueAsync(value.GetValueOrDefault()' cancellationToken); " is 130.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,WriteValueAsync,The length of the statement  "            return _safeAsync ? (value == null ? WriteNullAsync(cancellationToken) : WriteValueNotNullAsync(value' cancellationToken)) : base.WriteValueAsync(value' cancellationToken); " is 172.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,DoWriteValueAsync,The length of the statement  "            return value == null ? DoWriteNullAsync(cancellationToken) : WriteIntegerValueAsync(value.GetValueOrDefault()' cancellationToken); " is 130.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,WriteEndArrayAsync,The length of the statement  "            return _safeAsync ? InternalWriteEndAsync(JsonContainerType.Array' cancellationToken) : base.WriteEndArrayAsync(cancellationToken); " is 131.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,WriteEndConstructorAsync,The length of the statement  "            return _safeAsync ? InternalWriteEndAsync(JsonContainerType.Constructor' cancellationToken) : base.WriteEndConstructorAsync(cancellationToken); " is 143.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,WriteEndObjectAsync,The length of the statement  "            return _safeAsync ? InternalWriteEndAsync(JsonContainerType.Object' cancellationToken) : base.WriteEndObjectAsync(cancellationToken); " is 133.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,WriteEscapedString,The length of the statement  "            JavaScriptUtils.WriteEscapedJavaScriptString(_writer' value' _quoteChar' quote' _charEscapeFlags' StringEscapeHandling' _arrayPool' ref _writeBuffer); " is 150.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,WriteValue,The length of the statement  "                WriteValueInternal(JsonConvert.ToString(value.GetValueOrDefault()' FloatFormatHandling' QuoteChar' true)' JsonToken.Float); " is 123.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,WriteValue,The length of the statement  "                WriteValueInternal(JsonConvert.ToString(value.GetValueOrDefault()' FloatFormatHandling' QuoteChar' true)' JsonToken.Float); " is 123.
Long Statement,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,WriteValueToBuffer,The length of the statement  "            pos = DateTimeUtils.WriteDateTimeString(_writeBuffer' pos' (DateFormatHandling == DateFormatHandling.IsoDateFormat) ? value.DateTime : value.UtcDateTime' value.Offset' DateTimeKind.Local' DateFormatHandling); " is 208.
Long Statement,Microsoft.IdentityModel.Json,JsonValidatingReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonValidatingReader.cs,RaiseError,The length of the statement  "                ? message + " Line {0}' position {1}.".FormatWith(CultureInfo.InvariantCulture' lineInfo.LineNumber' lineInfo.LinePosition) " is 123.
Long Statement,Microsoft.IdentityModel.Json,JsonValidatingReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonValidatingReader.cs,WriteToken,The length of the statement  "                bool isInUniqueArray = (schemaScope.TokenType == JTokenType.Array && schemaScope.IsUniqueArray && schemaScope.ArrayItemCount > 0); " is 130.
Long Statement,Microsoft.IdentityModel.Json,JsonValidatingReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonValidatingReader.cs,WriteToken,The length of the statement  "                                RaiseError("Non-unique array item at index {0}.".FormatWith(CultureInfo.InvariantCulture' schemaScope.ArrayItemCount - 1)' schemaScope.Schemas.First(s => s.UniqueItems)); " is 170.
Long Statement,Microsoft.IdentityModel.Json,JsonValidatingReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonValidatingReader.cs,ValidateEndObject,The length of the statement  "                RaiseError("Required properties are missing from object: {0}.".FormatWith(CultureInfo.InvariantCulture' string.Join("' "' unmatchedRequiredProperties " is 149.
Long Statement,Microsoft.IdentityModel.Json,JsonValidatingReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonValidatingReader.cs,ValidateEndArray,The length of the statement  "                RaiseError("Array item count {0} exceeds maximum count of {1}.".FormatWith(CultureInfo.InvariantCulture' arrayItemCount' schema.MaximumItems)' schema); " is 151.
Long Statement,Microsoft.IdentityModel.Json,JsonValidatingReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonValidatingReader.cs,ValidateEndArray,The length of the statement  "                RaiseError("Array item count {0} is less than minimum count of {1}.".FormatWith(CultureInfo.InvariantCulture' arrayItemCount' schema.MinimumItems)' schema); " is 156.
Long Statement,Microsoft.IdentityModel.Json,JsonValidatingReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonValidatingReader.cs,ValidateString,The length of the statement  "                RaiseError("String '{0}' exceeds maximum length of {1}.".FormatWith(CultureInfo.InvariantCulture' value' schema.MaximumLength)' schema); " is 136.
Long Statement,Microsoft.IdentityModel.Json,JsonValidatingReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonValidatingReader.cs,ValidateString,The length of the statement  "                RaiseError("String '{0}' is less than minimum length of {1}.".FormatWith(CultureInfo.InvariantCulture' value' schema.MinimumLength)' schema); " is 141.
Long Statement,Microsoft.IdentityModel.Json,JsonValidatingReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonValidatingReader.cs,ValidateString,The length of the statement  "                        RaiseError("String '{0}' does not match regex pattern '{1}'.".FormatWith(CultureInfo.InvariantCulture' value' pattern)' schema); " is 128.
Long Statement,Microsoft.IdentityModel.Json,JsonValidatingReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonValidatingReader.cs,ValidateInteger,The length of the statement  "                    RaiseError("Integer {0} exceeds maximum value of {1}.".FormatWith(CultureInfo.InvariantCulture' value' schema.Maximum)' schema); " is 128.
Long Statement,Microsoft.IdentityModel.Json,JsonValidatingReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonValidatingReader.cs,ValidateInteger,The length of the statement  "                    RaiseError("Integer {0} equals maximum value of {1} and exclusive maximum is true.".FormatWith(CultureInfo.InvariantCulture' value' schema.Maximum)' schema); " is 157.
Long Statement,Microsoft.IdentityModel.Json,JsonValidatingReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonValidatingReader.cs,ValidateInteger,The length of the statement  "                    RaiseError("Integer {0} is less than minimum value of {1}.".FormatWith(CultureInfo.InvariantCulture' value' schema.Minimum)' schema); " is 133.
Long Statement,Microsoft.IdentityModel.Json,JsonValidatingReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonValidatingReader.cs,ValidateInteger,The length of the statement  "                    RaiseError("Integer {0} equals minimum value of {1} and exclusive minimum is true.".FormatWith(CultureInfo.InvariantCulture' value' schema.Minimum)' schema); " is 157.
Long Statement,Microsoft.IdentityModel.Json,JsonValidatingReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonValidatingReader.cs,ValidateInteger,The length of the statement  "                    RaiseError("Integer {0} is not evenly divisible by {1}.".FormatWith(CultureInfo.InvariantCulture' JsonConvert.ToString(value)' schema.DivisibleBy)' schema); " is 156.
Long Statement,Microsoft.IdentityModel.Json,JsonValidatingReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonValidatingReader.cs,ProcessValue,The length of the statement  "                    // if there is positional validation and the array index is past the number of item validation schemas and there are no additional items then error " is 147.
Long Statement,Microsoft.IdentityModel.Json,JsonValidatingReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonValidatingReader.cs,ProcessValue,The length of the statement  "                        RaiseError("Index {0} has not been defined and the schema does not allow additional items.".FormatWith(CultureInfo.InvariantCulture' _currentScope.ArrayItemCount)' currentSchema); " is 179.
Long Statement,Microsoft.IdentityModel.Json,JsonValidatingReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonValidatingReader.cs,ValidateFloat,The length of the statement  "                    RaiseError("Float {0} exceeds maximum value of {1}.".FormatWith(CultureInfo.InvariantCulture' JsonConvert.ToString(value)' schema.Maximum)' schema); " is 148.
Long Statement,Microsoft.IdentityModel.Json,JsonValidatingReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonValidatingReader.cs,ValidateFloat,The length of the statement  "                    RaiseError("Float {0} equals maximum value of {1} and exclusive maximum is true.".FormatWith(CultureInfo.InvariantCulture' JsonConvert.ToString(value)' schema.Maximum)' schema); " is 177.
Long Statement,Microsoft.IdentityModel.Json,JsonValidatingReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonValidatingReader.cs,ValidateFloat,The length of the statement  "                    RaiseError("Float {0} is less than minimum value of {1}.".FormatWith(CultureInfo.InvariantCulture' JsonConvert.ToString(value)' schema.Minimum)' schema); " is 153.
Long Statement,Microsoft.IdentityModel.Json,JsonValidatingReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonValidatingReader.cs,ValidateFloat,The length of the statement  "                    RaiseError("Float {0} equals minimum value of {1} and exclusive minimum is true.".FormatWith(CultureInfo.InvariantCulture' JsonConvert.ToString(value)' schema.Minimum)' schema); " is 177.
Long Statement,Microsoft.IdentityModel.Json,JsonValidatingReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonValidatingReader.cs,ValidateFloat,The length of the statement  "                    RaiseError("Float {0} is not evenly divisible by {1}.".FormatWith(CultureInfo.InvariantCulture' JsonConvert.ToString(value)' schema.DivisibleBy)' schema); " is 154.
Long Statement,Microsoft.IdentityModel.Json,JsonValidatingReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonValidatingReader.cs,ValidatePropertyName,The length of the statement  "                    RaiseError("Property '{0}' has not been defined and the schema does not allow additional properties.".FormatWith(CultureInfo.InvariantCulture' propertyName)' schema); " is 166.
Long Statement,Microsoft.IdentityModel.Json,JsonValidatingReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonValidatingReader.cs,TestType,The length of the statement  "                RaiseError("Invalid type. Expected {0} but got {1}.".FormatWith(CultureInfo.InvariantCulture' currentSchema.Type' currentType)' currentSchema); " is 143.
Long Statement,Microsoft.IdentityModel.Json,JsonWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonWriter.Async.cs,AutoCompleteAsync,The length of the statement  "                throw JsonWriterException.Create(this' "Token {0} in state {1} would result in an invalid JSON object.".FormatWith(CultureInfo.InvariantCulture' tokenBeingWritten.ToString()' oldState.ToString())' null); " is 203.
Long Statement,Microsoft.IdentityModel.Json,JsonWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonWriter.Async.cs,AutoCompleteAsync,The length of the statement  "                        return tokenBeingWritten == JsonToken.Comment ? WriteIndentAsync(cancellationToken) : AutoCompleteAsync(cancellationToken); " is 123.
Long Statement,Microsoft.IdentityModel.Json,JsonWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonWriter.Async.cs,WriteTokenAsync,The length of the statement  "                if (writeDateConstructorAsDate && reader.TokenType == JsonToken.StartConstructor && string.Equals(reader.Value.ToString()' "Date"' StringComparison.Ordinal)) " is 157.
Long Statement,Microsoft.IdentityModel.Json,JsonWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonWriter.Async.cs,WriteTokenSyncReadingAsync,The length of the statement  "                if (reader.TokenType == JsonToken.StartConstructor && string.Equals(reader.Value.ToString()' "Date"' StringComparison.Ordinal)) " is 127.
Long Statement,Microsoft.IdentityModel.Json,JsonWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonWriter.Async.cs,WriteConstructorDateAsync,The length of the statement  "                throw JsonWriterException.Create(this' "Unexpected token when reading date constructor. Expected Integer' got " + reader.TokenType' null); " is 138.
Long Statement,Microsoft.IdentityModel.Json,JsonWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonWriter.Async.cs,WriteConstructorDateAsync,The length of the statement  "                throw JsonWriterException.Create(this' "Unexpected token when reading date constructor. Expected EndConstructor' got " + reader.TokenType' null); " is 145.
Long Statement,Microsoft.IdentityModel.Json,JsonWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonWriter.Async.cs,WriteToken,The length of the statement  "                if (writeDateConstructorAsDate && reader.TokenType == JsonToken.StartConstructor && string.Equals(reader.Value.ToString()' "Date"' StringComparison.Ordinal)) " is 157.
Long Statement,Microsoft.IdentityModel.Json,JsonWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonWriter.Async.cs,AutoComplete,The length of the statement  "                throw JsonWriterException.Create(this' "Token {0} in state {1} would result in an invalid JSON object.".FormatWith(CultureInfo.InvariantCulture' tokenBeingWritten.ToString()' _currentState.ToString())' null); " is 208.
Long Statement,Microsoft.IdentityModel.Json,JsonWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonWriter.Async.cs,AutoComplete,The length of the statement  "            if ((_currentState == State.Object || _currentState == State.Array || _currentState == State.Constructor) && tokenBeingWritten != JsonToken.Comment) " is 148.
Long Statement,Microsoft.IdentityModel.Json,JsonWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonWriter.Async.cs,AutoComplete,The length of the statement  "                if ((_currentState == State.Array || _currentState == State.ArrayStart || _currentState == State.Constructor || _currentState == State.ConstructorStart) " is 152.
Long Statement,Microsoft.IdentityModel.Json,JsonWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonWriter.Async.cs,CreateUnsupportedTypeException,The length of the statement  "            return JsonWriterException.Create(writer' "Unsupported type: {0}. Use the JsonSerializer class to get the object's JSON representation.".FormatWith(CultureInfo.InvariantCulture' value.GetType())' null); " is 202.
Long Statement,Microsoft.IdentityModel.Json.Converters,BinaryConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\BinaryConverter.cs,GetByteArray,The length of the statement  "            throw new JsonSerializationException("Unexpected value type when writing binary: {0}".FormatWith(CultureInfo.InvariantCulture' value.GetType())); " is 145.
Long Statement,Microsoft.IdentityModel.Json.Converters,BinaryConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\BinaryConverter.cs,ReadJson,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Cannot convert null value to {0}.".FormatWith(CultureInfo.InvariantCulture' objectType)); " is 138.
Long Statement,Microsoft.IdentityModel.Json.Converters,BinaryConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\BinaryConverter.cs,ReadJson,The length of the statement  "                throw JsonSerializationException.Create(reader' "Unexpected token parsing binary. Expected String or StartArray' got {0}.".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 183.
Long Statement,Microsoft.IdentityModel.Json.Converters,BinaryConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\BinaryConverter.cs,ReadJson,The length of the statement  "            throw JsonSerializationException.Create(reader' "Unexpected object type when writing binary: {0}".FormatWith(CultureInfo.InvariantCulture' objectType)); " is 152.
Long Statement,Microsoft.IdentityModel.Json.Converters,BinaryConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\BinaryConverter.cs,ReadByteArray,The length of the statement  "                        throw JsonSerializationException.Create(reader' "Unexpected token when reading bytes: {0}".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 151.
Long Statement,Microsoft.IdentityModel.Json.Converters,BsonObjectIdConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\BsonObjectIdConverter.cs,ReadJson,The length of the statement  "                throw new JsonSerializationException("Expected Bytes but got {0}.".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 127.
Long Statement,Microsoft.IdentityModel.Json.Converters,DataTableConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\DataTableConverter.cs,ReadJson,The length of the statement  "                throw JsonSerializationException.Create(reader' "Unexpected JSON token when reading DataTable. Expected StartArray' got {0}.".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 186.
Long Statement,Microsoft.IdentityModel.Json.Converters,DataTableConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\DataTableConverter.cs,GetColumnDataType,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Unexpected JSON token when reading DataTable: {0}".FormatWith(CultureInfo.InvariantCulture' tokenType)); " is 153.
Long Statement,Microsoft.IdentityModel.Json.Converters,DiscriminatedUnionConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\DiscriminatedUnionConverter.cs,WriteJson,The length of the statement  "                writer.WritePropertyName((resolver != null) ? resolver.GetResolvedPropertyName(FieldsPropertyName) : FieldsPropertyName); " is 121.
Long Statement,Microsoft.IdentityModel.Json.Converters,DiscriminatedUnionConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\DiscriminatedUnionConverter.cs,ReadJson,The length of the statement  "                        throw JsonSerializationException.Create(reader' "No union type found with the name '{0}'.".FormatWith(CultureInfo.InvariantCulture' caseName)); " is 143.
Long Statement,Microsoft.IdentityModel.Json.Converters,DiscriminatedUnionConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\DiscriminatedUnionConverter.cs,ReadJson,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Unexpected property '{0}' found when reading union.".FormatWith(CultureInfo.InvariantCulture' propertyName)); " is 158.
Long Statement,Microsoft.IdentityModel.Json.Converters,DiscriminatedUnionConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\DiscriminatedUnionConverter.cs,ReadJson,The length of the statement  "                throw JsonSerializationException.Create(reader' "No '{0}' property with union name found.".FormatWith(CultureInfo.InvariantCulture' CasePropertyName)); " is 151.
Long Statement,Microsoft.IdentityModel.Json.Converters,DiscriminatedUnionConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\DiscriminatedUnionConverter.cs,ReadJson,The length of the statement  "                throw JsonSerializationException.Create(reader' "No '{0}' property with union fields found.".FormatWith(CultureInfo.InvariantCulture' FieldsPropertyName)); " is 155.
Long Statement,Microsoft.IdentityModel.Json.Converters,DiscriminatedUnionConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\DiscriminatedUnionConverter.cs,ReadJson,The length of the statement  "                    throw JsonSerializationException.Create(reader' "The number of field values does not match the number of properties defined by union '{0}'.".FormatWith(CultureInfo.InvariantCulture' caseName)); " is 193.
Long Statement,Microsoft.IdentityModel.Json.Converters,EntityKeyMemberConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\EntityKeyMemberConverter.cs,ReadAndAssertProperty,The length of the statement  "            if (reader.TokenType != JsonToken.PropertyName || !string.Equals(reader.Value.ToString()' propertyName' StringComparison.OrdinalIgnoreCase)) " is 140.
Long Statement,Microsoft.IdentityModel.Json.Converters,EntityKeyMemberConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\EntityKeyMemberConverter.cs,ReadAndAssertProperty,The length of the statement  "                throw new JsonSerializationException("Expected JSON property '{0}'.".FormatWith(CultureInfo.InvariantCulture' propertyName)); " is 125.
Long Statement,Microsoft.IdentityModel.Json.Converters,ExpandoObjectConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\ExpandoObjectConverter.cs,ReadValue,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Unexpected token when converting ExpandoObject: {0}".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 162.
Long Statement,Microsoft.IdentityModel.Json.Converters,IsoDateTimeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\IsoDateTimeConverter.cs,WriteJson,The length of the statement  "                throw new JsonSerializationException("Unexpected value when converting date. Expected DateTime or DateTimeOffset' got {0}.".FormatWith(CultureInfo.InvariantCulture' ReflectionUtils.GetObjectType(value))); " is 204.
Long Statement,Microsoft.IdentityModel.Json.Converters,IsoDateTimeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\IsoDateTimeConverter.cs,ReadJson,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Cannot convert null value to {0}.".FormatWith(CultureInfo.InvariantCulture' objectType)); " is 138.
Long Statement,Microsoft.IdentityModel.Json.Converters,IsoDateTimeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\IsoDateTimeConverter.cs,ReadJson,The length of the statement  "                throw JsonSerializationException.Create(reader' "Unexpected token parsing date. Expected String' got {0}.".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 167.
Long Statement,Microsoft.IdentityModel.Json.Converters,JavaScriptDateTimeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\JavaScriptDateTimeConverter.cs,ReadJson,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Cannot convert null value to {0}.".FormatWith(CultureInfo.InvariantCulture' objectType)); " is 138.
Long Statement,Microsoft.IdentityModel.Json.Converters,JavaScriptDateTimeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\JavaScriptDateTimeConverter.cs,ReadJson,The length of the statement  "            if (reader.TokenType != JsonToken.StartConstructor || !string.Equals(reader.Value.ToString()' "Date"' StringComparison.Ordinal)) " is 128.
Long Statement,Microsoft.IdentityModel.Json.Converters,JavaScriptDateTimeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\JavaScriptDateTimeConverter.cs,ReadJson,The length of the statement  "                throw JsonSerializationException.Create(reader' "Unexpected token or value when parsing date. Token: {0}' Value: {1}".FormatWith(CultureInfo.InvariantCulture' reader.TokenType' reader.Value)); " is 192.
Long Statement,Microsoft.IdentityModel.Json.Converters,StringEnumConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\StringEnumConverter.cs,WriteJson,The length of the statement  "                    throw JsonSerializationException.Create(null' writer.ContainerPath' "Integer value {0} is not allowed.".FormatWith(CultureInfo.InvariantCulture' e.ToString("D"))' null); " is 169.
Long Statement,Microsoft.IdentityModel.Json.Converters,StringEnumConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\StringEnumConverter.cs,ReadJson,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Cannot convert null value to {0}.".FormatWith(CultureInfo.InvariantCulture' objectType)); " is 138.
Long Statement,Microsoft.IdentityModel.Json.Converters,StringEnumConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\StringEnumConverter.cs,ReadJson,The length of the statement  "                        throw JsonSerializationException.Create(reader' "Integer value {0} is not allowed.".FormatWith(CultureInfo.InvariantCulture' reader.Value)); " is 140.
Long Statement,Microsoft.IdentityModel.Json.Converters,StringEnumConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\StringEnumConverter.cs,ReadJson,The length of the statement  "                throw JsonSerializationException.Create(reader' "Error converting value {0} to type '{1}'.".FormatWith(CultureInfo.InvariantCulture' MiscellaneousUtils.ToString(reader.Value)' objectType)' ex); " is 193.
Long Statement,Microsoft.IdentityModel.Json.Converters,StringEnumConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\StringEnumConverter.cs,ReadJson,The length of the statement  "            throw JsonSerializationException.Create(reader' "Unexpected token {0} when parsing enum.".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 150.
Long Statement,Microsoft.IdentityModel.Json.Converters,UnixDateTimeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\UnixDateTimeConverter.cs,WriteJson,The length of the statement  "                throw new JsonSerializationException("Cannot convert date value that is before Unix epoch of 00:00:00 UTC on 1 January 1970."); " is 127.
Long Statement,Microsoft.IdentityModel.Json.Converters,UnixDateTimeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\UnixDateTimeConverter.cs,ReadJson,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Cannot convert null value to {0}.".FormatWith(CultureInfo.InvariantCulture' objectType)); " is 138.
Long Statement,Microsoft.IdentityModel.Json.Converters,UnixDateTimeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\UnixDateTimeConverter.cs,ReadJson,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Cannot convert invalid value to {0}.".FormatWith(CultureInfo.InvariantCulture' objectType)); " is 141.
Long Statement,Microsoft.IdentityModel.Json.Converters,UnixDateTimeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\UnixDateTimeConverter.cs,ReadJson,The length of the statement  "                throw JsonSerializationException.Create(reader' "Unexpected token parsing date. Expected Integer or String' got {0}.".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 178.
Long Statement,Microsoft.IdentityModel.Json.Converters,UnixDateTimeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\UnixDateTimeConverter.cs,ReadJson,The length of the statement  "                throw JsonSerializationException.Create(reader' "Cannot convert value that is before Unix epoch of 00:00:00 UTC on 1 January 1970 to {0}.".FormatWith(CultureInfo.InvariantCulture' objectType)); " is 193.
Long Statement,Microsoft.IdentityModel.Json.Converters,VersionConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\VersionConverter.cs,ReadJson,The length of the statement  "                        throw JsonSerializationException.Create(reader' "Error parsing version string: {0}".FormatWith(CultureInfo.InvariantCulture' reader.Value)' ex); " is 144.
Long Statement,Microsoft.IdentityModel.Json.Converters,VersionConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\VersionConverter.cs,ReadJson,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Unexpected token or value when parsing version. Token: {0}' Value: {1}".FormatWith(CultureInfo.InvariantCulture' reader.TokenType' reader.Value)); " is 195.
Long Statement,Microsoft.IdentityModel.Json.Converters,XElementWrapper,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,HasImplicitNamespaceAttribute,The length of the statement  "                            if (attribute.Name.LocalName == "xmlns" && string.IsNullOrEmpty(attribute.Name.NamespaceName) && attribute.Value == namespaceUri) " is 129.
Long Statement,Microsoft.IdentityModel.Json.Converters,XmlNodeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,ResolveFullName,The length of the statement  "            string prefix = (node.NamespaceUri == null || (node.LocalName == "xmlns" && node.NamespaceUri == "http://www.w3.org/2000/xmlns/")) " is 130.
Long Statement,Microsoft.IdentityModel.Json.Converters,XmlNodeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,ReadJson,The length of the statement  "                    throw JsonSerializationException.Create(reader' "XmlNodeConverter only supports deserializing XDocument' XElement' XContainer' XNode or XObject."); " is 147.
Long Statement,Microsoft.IdentityModel.Json.Converters,XmlNodeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,ReadJson,The length of the statement  "                    throw JsonSerializationException.Create(reader' "XmlNodeConverter only supports deserializing XmlDocument' XmlElement or XmlNode."); " is 132.
Long Statement,Microsoft.IdentityModel.Json.Converters,XmlNodeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,ReadElement,The length of the statement  "                throw JsonSerializationException.Create(reader' "XmlNodeConverter cannot convert JSON with an empty property name to XML."); " is 124.
Long Statement,Microsoft.IdentityModel.Json.Converters,XmlNodeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,CreateElement,The length of the statement  "                    IXmlNode attribute = (!string.IsNullOrEmpty(attributePrefix)) ? document.CreateAttribute(encodedName' manager.LookupNamespace(attributePrefix) ?? string.Empty' nameValue.Value) : document.CreateAttribute(encodedName' nameValue.Value); " is 234.
Long Statement,Microsoft.IdentityModel.Json.Converters,XmlNodeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,AddAttribute,The length of the statement  "                throw JsonSerializationException.Create(reader' "JSON root object has property '{0}' that will be converted to an attribute. A root object cannot have any attribute properties. Consider specifying a DeserializeRootElementName.".FormatWith(CultureInfo.InvariantCulture' propertyName)); " is 284.
Long Statement,Microsoft.IdentityModel.Json.Converters,XmlNodeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,ConvertTokenToXmlValue,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Cannot get an XML string value from token type '{0}'.".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 164.
Long Statement,Microsoft.IdentityModel.Json.Converters,XmlNodeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,CreateInstruction,The length of the statement  "                            throw JsonSerializationException.Create(reader' "Unexpected property name encountered while deserializing XmlDeclaration: " + reader.Value); " is 140.
Long Statement,Microsoft.IdentityModel.Json.Converters,XmlNodeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,CreateDocumentType,The length of the statement  "                        throw JsonSerializationException.Create(reader' "Unexpected property name encountered while deserializing XmlDeclaration: " + reader.Value); " is 140.
Long Statement,Microsoft.IdentityModel.Json.Converters,XmlNodeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,CreateElement,The length of the statement  "            string encodeName = EncodeSpecialCharacters ? XmlConvert.EncodeLocalName(elementName) : XmlConvert.EncodeName(elementName); " is 123.
Long Statement,Microsoft.IdentityModel.Json.Converters,XmlNodeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,CreateElement,The length of the statement  "            IXmlElement element = (!string.IsNullOrEmpty(ns)) ? document.CreateElement(encodeName' ns) : document.CreateElement(encodeName); " is 128.
Long Statement,Microsoft.IdentityModel.Json.Converters,XmlNodeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,DeserializeNode,The length of the statement  "                            throw JsonSerializationException.Create(reader' "JSON root object has multiple properties. The root object must have a single property in order to create a valid XML document. Consider specifying a DeserializeRootElementName."); " is 228.
Long Statement,Microsoft.IdentityModel.Json.Linq,Extensions,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\Extensions.cs,Convert,The length of the statement  "                    throw new InvalidCastException("Cannot cast {0} to {1}.".FormatWith(CultureInfo.InvariantCulture' token.GetType()' typeof(T))); " is 127.
Long Statement,Microsoft.IdentityModel.Json.Linq,JArray,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JArray.Async.cs,LoadAsync,The length of the statement  "                throw JsonReaderException.Create(reader' "Error reading JArray from JsonReader. Current JsonReader item is not an array: {0}".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 186.
Long Statement,Microsoft.IdentityModel.Json.Linq,JArray,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JArray.Async.cs,Load,The length of the statement  "                throw JsonReaderException.Create(reader' "Error reading JArray from JsonReader. Current JsonReader item is not an array: {0}".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 186.
Long Statement,Microsoft.IdentityModel.Json.Linq,JArray,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JArray.Async.cs,FromObject,The length of the statement  "                throw new ArgumentException("Object serialized to {0}. JArray instance expected.".FormatWith(CultureInfo.InvariantCulture' token.Type)); " is 136.
Long Statement,Microsoft.IdentityModel.Json.Linq,JConstructor,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JConstructor.Async.cs,LoadAsync,The length of the statement  "                throw JsonReaderException.Create(reader' "Error reading JConstructor from JsonReader. Current JsonReader item is not a constructor: {0}".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 197.
Long Statement,Microsoft.IdentityModel.Json.Linq,JConstructor,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JConstructor.Async.cs,Load,The length of the statement  "                throw JsonReaderException.Create(reader' "Error reading JConstructor from JsonReader. Current JsonReader item is not a constructor: {0}".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 197.
Long Statement,Microsoft.IdentityModel.Json.Linq,JContainer,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JContainer.Async.cs,ReadTokenFromAsync,The length of the statement  "                throw JsonReaderException.Create(reader' "Error reading {0} from JsonReader.".FormatWith(CultureInfo.InvariantCulture' GetType().Name)); " is 136.
Long Statement,Microsoft.IdentityModel.Json.Linq,JContainer,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JContainer.Async.cs,ReadTokenFromAsync,The length of the statement  "                throw JsonReaderException.Create(reader' "Unexpected end of content while loading {0}.".FormatWith(CultureInfo.InvariantCulture' GetType().Name)); " is 146.
Long Statement,Microsoft.IdentityModel.Json.Linq,JContainer,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JContainer.Async.cs,ReadContentFromAsync,The length of the statement  "                        throw new InvalidOperationException("The JsonReader should not be on a token of type {0}.".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 151.
Long Statement,Microsoft.IdentityModel.Json.Linq,JContainer,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JContainer.Async.cs,CheckReentrancy,The length of the statement  "                throw new InvalidOperationException("Cannot change {0} during a collection change event.".FormatWith(CultureInfo.InvariantCulture' GetType())); " is 143.
Long Statement,Microsoft.IdentityModel.Json.Linq,JContainer,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JContainer.Async.cs,SetItem,The length of the statement  "                OnCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Replace' item' existing' index)); " is 120.
Long Statement,Microsoft.IdentityModel.Json.Linq,JContainer,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JContainer.Async.cs,CopyItemsTo,The length of the statement  "                throw new ArgumentException("The number of elements in the source JObject is greater than the available space from arrayIndex to the end of the destination array."); " is 165.
Long Statement,Microsoft.IdentityModel.Json.Linq,JContainer,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JContainer.Async.cs,ValidateToken,The length of the statement  "                throw new ArgumentException("Can not add {0} to {1}.".FormatWith(CultureInfo.InvariantCulture' o.GetType()' GetType())); " is 120.
Long Statement,Microsoft.IdentityModel.Json.Linq,JContainer,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JContainer.Async.cs,ReadTokenFrom,The length of the statement  "                throw JsonReaderException.Create(reader' "Error reading {0} from JsonReader.".FormatWith(CultureInfo.InvariantCulture' GetType().Name)); " is 136.
Long Statement,Microsoft.IdentityModel.Json.Linq,JContainer,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JContainer.Async.cs,ReadTokenFrom,The length of the statement  "                throw JsonReaderException.Create(reader' "Unexpected end of content while loading {0}.".FormatWith(CultureInfo.InvariantCulture' GetType().Name)); " is 146.
Long Statement,Microsoft.IdentityModel.Json.Linq,JContainer,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JContainer.Async.cs,ReadContentFrom,The length of the statement  "                        throw new InvalidOperationException("The JsonReader should not be on a token of type {0}.".FormatWith(CultureInfo.InvariantCulture' r.TokenType)); " is 146.
Long Statement,Microsoft.IdentityModel.Json.Linq,JContainer,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JContainer.Async.cs,AddNew,The length of the statement  "                throw new JsonException("Could not determine new value to add to '{0}'.".FormatWith(CultureInfo.InvariantCulture' GetType())); " is 126.
Long Statement,Microsoft.IdentityModel.Json.Linq,JContainer,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JContainer.Async.cs,AddNew,The length of the statement  "                throw new JsonException("New item to be added to collection must be compatible with {0}.".FormatWith(CultureInfo.InvariantCulture' typeof(JToken))); " is 148.
Long Statement,Microsoft.IdentityModel.Json.Linq,JObject,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JObject.Async.cs,WriteToAsync,The length of the statement  "            async Task AwaitProperties(Task task' int i' JsonWriter Writer' CancellationToken CancellationToken' JsonConverter[] Converters) " is 128.
Long Statement,Microsoft.IdentityModel.Json.Linq,JObject,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JObject.Async.cs,LoadAsync,The length of the statement  "                throw JsonReaderException.Create(reader' "Error reading JObject from JsonReader. Current JsonReader item is not an object: {0}".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 188.
Long Statement,Microsoft.IdentityModel.Json.Linq,JObject,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JObject.Async.cs,ValidateToken,The length of the statement  "                throw new ArgumentException("Can not add {0} to {1}.".FormatWith(CultureInfo.InvariantCulture' o.GetType()' GetType())); " is 120.
Long Statement,Microsoft.IdentityModel.Json.Linq,JObject,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JObject.Async.cs,ValidateToken,The length of the statement  "                throw new ArgumentException("Can not add property {0} to {1}. Property with the same name already exists on object.".FormatWith(CultureInfo.InvariantCulture' newProperty.Name' GetType())); " is 188.
Long Statement,Microsoft.IdentityModel.Json.Linq,JObject,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JObject.Async.cs,InternalPropertyChanged,The length of the statement  "                OnCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Replace' childProperty' childProperty' IndexOfItem(childProperty))); " is 155.
Long Statement,Microsoft.IdentityModel.Json.Linq,JObject,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JObject.Async.cs,Load,The length of the statement  "                throw JsonReaderException.Create(reader' "Error reading JObject from JsonReader. Current JsonReader item is not an object: {0}".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 188.
Long Statement,Microsoft.IdentityModel.Json.Linq,JObject,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JObject.Async.cs,FromObject,The length of the statement  "                throw new ArgumentException("Object serialized to {0}. JObject instance expected.".FormatWith(CultureInfo.InvariantCulture' token.Type)); " is 137.
Long Statement,Microsoft.IdentityModel.Json.Linq,JObject,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JObject.Async.cs,CopyTo,The length of the statement  "                throw new ArgumentException("The number of elements in the source JObject is greater than the available space from arrayIndex to the end of the destination array."); " is 165.
Long Statement,Microsoft.IdentityModel.Json.Linq,JProperty,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JProperty.Async.cs,LoadAsync,The length of the statement  "                throw JsonReaderException.Create(reader' "Error reading JProperty from JsonReader. Current JsonReader item is not a property: {0}".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 191.
Long Statement,Microsoft.IdentityModel.Json.Linq,JProperty,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JProperty.Async.cs,RemoveItem,The length of the statement  "            throw new JsonException("Cannot add or remove items from {0}.".FormatWith(CultureInfo.InvariantCulture' typeof(JProperty))); " is 124.
Long Statement,Microsoft.IdentityModel.Json.Linq,JProperty,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JProperty.Async.cs,RemoveItemAt,The length of the statement  "            throw new JsonException("Cannot add or remove items from {0}.".FormatWith(CultureInfo.InvariantCulture' typeof(JProperty))); " is 124.
Long Statement,Microsoft.IdentityModel.Json.Linq,JProperty,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JProperty.Async.cs,InsertItem,The length of the statement  "                throw new JsonException("{0} cannot have multiple values.".FormatWith(CultureInfo.InvariantCulture' typeof(JProperty))); " is 120.
Long Statement,Microsoft.IdentityModel.Json.Linq,JProperty,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JProperty.Async.cs,ClearItems,The length of the statement  "            throw new JsonException("Cannot add or remove items from {0}.".FormatWith(CultureInfo.InvariantCulture' typeof(JProperty))); " is 124.
Long Statement,Microsoft.IdentityModel.Json.Linq,JProperty,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JProperty.Async.cs,Load,The length of the statement  "                throw JsonReaderException.Create(reader' "Error reading JProperty from JsonReader. Current JsonReader item is not a property: {0}".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 191.
Long Statement,Microsoft.IdentityModel.Json.Linq,JToken,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JToken.Async.cs,ReadFromAsync,The length of the statement  "                if (!await (settings != null && settings.CommentHandling == CommentHandling.Ignore ? reader.ReadAndMoveToContentAsync(cancellationToken) : reader.ReadAsync(cancellationToken)).ConfigureAwait(false)) " is 198.
Long Statement,Microsoft.IdentityModel.Json.Linq,JToken,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JToken.Async.cs,ReadFromAsync,The length of the statement  "                    throw JsonReaderException.Create(reader' "Error reading JToken from JsonReader. Unexpected token: {0}".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 163.
Long Statement,Microsoft.IdentityModel.Json.Linq,JToken,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JToken.Async.cs,Value,The length of the statement  "            // null check to fix MonoTouch issue - https://github.com/dolbz/Microsoft.IdentityModel.Json/commit/a24e3062846b30ee505f3271ac08862bb471b822 " is 140.
Long Statement,Microsoft.IdentityModel.Json.Linq,JToken,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JToken.Async.cs,Values,The length of the statement  "            throw new InvalidOperationException("Cannot access child value on {0}.".FormatWith(CultureInfo.InvariantCulture' GetType())); " is 125.
Long Statement,Microsoft.IdentityModel.Json.Linq,JToken,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JToken.Async.cs,ValidateToken,The length of the statement  "            return (Array.IndexOf(validTypes' o.Type) != -1) || (nullable && (o.Type == JTokenType.Null || o.Type == JTokenType.Undefined)); " is 128.
Long Statement,Microsoft.IdentityModel.Json.Linq,JToken,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JToken.Async.cs,ToBigInteger,The length of the statement  "                throw new ArgumentException("Can not convert {0} to BigInteger.".FormatWith(CultureInfo.InvariantCulture' GetType(value))); " is 123.
Long Statement,Microsoft.IdentityModel.Json.Linq,JToken,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JToken.Async.cs,ToBigIntegerNullable,The length of the statement  "                throw new ArgumentException("Can not convert {0} to BigInteger.".FormatWith(CultureInfo.InvariantCulture' GetType(value))); " is 123.
Long Statement,Microsoft.IdentityModel.Json.Linq,JToken,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JToken.Async.cs,ToObject,The length of the statement  "                            throw new ArgumentException("Could not convert '{0}' to {1}.".FormatWith(CultureInfo.InvariantCulture' (string)this' enumType.Name)' ex); " is 137.
Long Statement,Microsoft.IdentityModel.Json.Linq,JToken,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JToken.Async.cs,ReadFrom,The length of the statement  "                    throw JsonReaderException.Create(reader' "Error reading JToken from JsonReader. Unexpected token: {0}".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 163.
Long Statement,Microsoft.IdentityModel.Json.Linq,JValue,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JValue.Async.cs,Compare,The length of the statement  "                        return Convert.ToDecimal(objA' CultureInfo.InvariantCulture).CompareTo(Convert.ToDecimal(objB' CultureInfo.InvariantCulture)); " is 126.
Long Statement,Microsoft.IdentityModel.Json.Linq,JValue,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JValue.Async.cs,Compare,The length of the statement  "                        return Convert.ToInt64(objA' CultureInfo.InvariantCulture).CompareTo(Convert.ToInt64(objB' CultureInfo.InvariantCulture)); " is 122.
Long Statement,Microsoft.IdentityModel.Json.Linq,JValue,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JValue.Async.cs,Compare,The length of the statement  "                        return Convert.ToDecimal(objA' CultureInfo.InvariantCulture).CompareTo(Convert.ToDecimal(objB' CultureInfo.InvariantCulture)); " is 126.
Long Statement,Microsoft.IdentityModel.Json.Linq,JValue,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JValue.Async.cs,Compare,The length of the statement  "                    throw MiscellaneousUtils.CreateArgumentOutOfRangeException(nameof(valueType)' valueType' "Unexpected value type: {0}".FormatWith(CultureInfo.InvariantCulture' valueType)); " is 171.
Long Statement,Microsoft.IdentityModel.Json.Linq,JValue,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JValue.Async.cs,Operation,The length of the statement  "                else if (objA is int || objA is uint || objA is long || objA is short || objA is ushort || objA is sbyte || objA is byte || " is 123.
Long Statement,Microsoft.IdentityModel.Json.Linq,JValue,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JValue.Async.cs,GetValueType,The length of the statement  "            throw new ArgumentException("Could not determine JSON object type for type {0}.".FormatWith(CultureInfo.InvariantCulture' value.GetType())); " is 140.
Long Statement,Microsoft.IdentityModel.Json.Linq.JsonPath,FieldFilter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JsonPath\FieldFilter.cs,ExecuteFilter,The length of the statement  "                        throw new JsonException("Property '{0}' not valid on {1}.".FormatWith(CultureInfo.InvariantCulture' Name ?? "*"' t.GetType().Name)); " is 132.
Long Statement,Microsoft.IdentityModel.Json.Linq.JsonPath,FieldMultipleFilter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JsonPath\FieldMultipleFilter.cs,ExecuteFilter,The length of the statement  "                        throw new JsonException("Properties {0} not valid on {1}.".FormatWith(CultureInfo.InvariantCulture' string.Join("' "' Names.Select(n => "'" + n + "'") " is 150.
Long Statement,Microsoft.IdentityModel.Json.Linq.JsonPath,JPath,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JsonPath\JPath.cs,ParsePath,The length of the statement  "                        if (query && (currentChar == '=' || currentChar == '<' || currentChar == '!' || currentChar == '>' || currentChar == '|' || currentChar == '&')) " is 144.
Long Statement,Microsoft.IdentityModel.Json.Linq.JsonPath,JPath,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JsonPath\JPath.cs,TryParseValue,The length of the statement  "                            bool result = double.TryParse(numberText' NumberStyles.Float | NumberStyles.AllowThousands' CultureInfo.InvariantCulture' out var d); " is 133.
Long Statement,Microsoft.IdentityModel.Json.Linq.JsonPath,PathFilter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JsonPath\PathFilter.cs,GetTokenIndex,The length of the statement  "                        throw new JsonException("Index {0} outside the bounds of JConstructor.".FormatWith(CultureInfo.InvariantCulture' index)); " is 121.
Long Statement,Microsoft.IdentityModel.Json.Linq.JsonPath,PathFilter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JsonPath\PathFilter.cs,GetTokenIndex,The length of the statement  "                    throw new JsonException("Index {0} not valid on {1}.".FormatWith(CultureInfo.InvariantCulture' index' t.GetType().Name)); " is 121.
Long Statement,Microsoft.IdentityModel.Json.Linq.JsonPath,BooleanQueryExpression,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JsonPath\QueryExpression.cs,EqualsWithStringCoercion,The length of the statement  "                            DateTimeUtils.WriteDateTimeOffsetString(writer' offset' DateFormatHandling.IsoDateFormat' null' CultureInfo.InvariantCulture); " is 126.
Long Statement,Microsoft.IdentityModel.Json.Linq.JsonPath,BooleanQueryExpression,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JsonPath\QueryExpression.cs,EqualsWithStringCoercion,The length of the statement  "                            DateTimeUtils.WriteDateTimeString(writer' (DateTime)value.Value' DateFormatHandling.IsoDateFormat' null' CultureInfo.InvariantCulture); " is 135.
Long Statement,Microsoft.IdentityModel.Json.Schema,JsonSchemaBuilder,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Schema\JsonSchemaBuilder.cs,ResolveReferences,The length of the statement  "                        string[] escapedParts = schema.DeferredReference.TrimStart('#').Split(new[] { '/' }' StringSplitOptions.RemoveEmptyEntries); " is 124.
Long Statement,Microsoft.IdentityModel.Json.Schema,JsonSchemaBuilder,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Schema\JsonSchemaBuilder.cs,ResolveReferences,The length of the statement  "                        throw new JsonException("Could not resolve schema reference '{0}'.".FormatWith(CultureInfo.InvariantCulture' schema.DeferredReference)); " is 136.
Long Statement,Microsoft.IdentityModel.Json.Schema,JsonSchemaBuilder,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Schema\JsonSchemaBuilder.cs,BuildSchema,The length of the statement  "                throw JsonException.Create(token' token.Path' "Expected object while parsing schema object' got {0}.".FormatWith(CultureInfo.InvariantCulture' token.Type)); " is 156.
Long Statement,Microsoft.IdentityModel.Json.Schema,JsonSchemaBuilder,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Schema\JsonSchemaBuilder.cs,ProcessEnum,The length of the statement  "                throw JsonException.Create(token' token.Path' "Expected Array token while parsing enum values' got {0}.".FormatWith(CultureInfo.InvariantCulture' token.Type)); " is 159.
Long Statement,Microsoft.IdentityModel.Json.Schema,JsonSchemaBuilder,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Schema\JsonSchemaBuilder.cs,ProcessProperties,The length of the statement  "                throw JsonException.Create(token' token.Path' "Expected Object token while parsing schema properties' got {0}.".FormatWith(CultureInfo.InvariantCulture' token.Type)); " is 166.
Long Statement,Microsoft.IdentityModel.Json.Schema,JsonSchemaBuilder,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Schema\JsonSchemaBuilder.cs,ProcessProperties,The length of the statement  "                    throw new JsonException("Property {0} has already been defined in schema.".FormatWith(CultureInfo.InvariantCulture' propertyToken.Name)); " is 137.
Long Statement,Microsoft.IdentityModel.Json.Schema,JsonSchemaBuilder,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Schema\JsonSchemaBuilder.cs,ProcessItems,The length of the statement  "                    throw JsonException.Create(token' token.Path' "Expected array or JSON schema object' got {0}.".FormatWith(CultureInfo.InvariantCulture' token.Type)); " is 149.
Long Statement,Microsoft.IdentityModel.Json.Schema,JsonSchemaBuilder,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Schema\JsonSchemaBuilder.cs,ProcessType,The length of the statement  "                            throw JsonException.Create(typeToken' typeToken.Path' "Expected JSON schema type string token' got {0}.".FormatWith(CultureInfo.InvariantCulture' token.Type)); " is 159.
Long Statement,Microsoft.IdentityModel.Json.Schema,JsonSchemaBuilder,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Schema\JsonSchemaBuilder.cs,ProcessType,The length of the statement  "                    throw JsonException.Create(token' token.Path' "Expected array or JSON schema type string token' got {0}.".FormatWith(CultureInfo.InvariantCulture' token.Type)); " is 160.
Long Statement,Microsoft.IdentityModel.Json.Schema,JsonSchemaGenerator,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Schema\JsonSchemaGenerator.cs,GenerateInternal,The length of the statement  "                throw new JsonException("Unresolved circular reference for type '{0}'. Explicitly define an Id for the type using a JsonObject/JsonArray attribute or automatically generate a type Id using the UndefinedSchemaIdHandling property.".FormatWith(CultureInfo.InvariantCulture' type)); " is 278.
Long Statement,Microsoft.IdentityModel.Json.Schema,JsonSchemaGenerator,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Schema\JsonSchemaGenerator.cs,GenerateInternal,The length of the statement  "                            CurrentSchema.Items.Add(GenerateInternal(collectionItemType' (!allowNullItem) ? Required.Always : Required.Default' false)); " is 124.
Long Statement,Microsoft.IdentityModel.Json.Schema,JsonSchemaGenerator,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Schema\JsonSchemaGenerator.cs,GetJsonSchemaType,The length of the statement  "                    throw new JsonException("Unexpected type code '{0}' for type '{1}'.".FormatWith(CultureInfo.InvariantCulture' typeCode' type)); " is 127.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,GetSerializableMembers,The length of the statement  "            MemberSerialization memberSerialization = JsonTypeReflector.GetObjectMemberSerialization(objectType' ignoreSerializableAttribute); " is 130.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,GetSerializableMembers,The length of the statement  "            IEnumerable<MemberInfo> allMembers = ReflectionUtils.GetFieldsAndProperties(objectType' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static) " is 179.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,GetSerializableMembers,The length of the statement  "                    serializableMembers = serializableMembers.Where(m => !string.Equals(m.Name' "TargetSite"' StringComparison.Ordinal)).ToList(); " is 126.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,ShouldSerializeEntityMember,The length of the statement  "                if (propertyInfo.PropertyType.IsGenericType() && propertyInfo.PropertyType.GetGenericTypeDefinition().FullName == "System.Data.Objects.DataClasses.EntityReference`1") " is 166.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,CreateObjectContract,The length of the statement  "            contract.MemberSerialization = JsonTypeReflector.GetObjectMemberSerialization(contract.NonNullableUnderlyingType' ignoreSerializableAttribute); " is 143.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,CreateObjectContract,The length of the statement  "            JsonObjectAttribute attribute = JsonTypeReflector.GetCachedAttribute<JsonObjectAttribute>(contract.NonNullableUnderlyingType); " is 126.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,CreateObjectContract,The length of the statement  "                    contract.OverrideCreator = JsonTypeReflector.ReflectionDelegateFactory.CreateParameterizedConstructor(overrideConstructor); " is 123.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,CreateObjectContract,The length of the statement  "                    // mimic DataContractSerializer behaviour when populating fields by overriding default creator to create an uninitialized object " is 128.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,CreateObjectContract,The length of the statement  "                    // note that this is only possible when the application is fully trusted so fall back to using the default constructor (if available) in partial trust " is 150.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,CreateObjectContract,The length of the statement  "                        contract.ParameterizedCreator = JsonTypeReflector.ReflectionDelegateFactory.CreateParameterizedConstructor(constructor); " is 120.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,ThrowUnableToSerializeError,The length of the statement  "            throw new JsonSerializationException("Unable to serialize instance of '{0}'.".FormatWith(CultureInfo.InvariantCulture' o.GetType())); " is 133.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,GetExtensionDataMemberForType,The length of the statement  "                m.AddRange(baseType.GetProperties(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly)); " is 133.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,GetExtensionDataMemberForType,The length of the statement  "                m.AddRange(baseType.GetFields(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly)); " is 129.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,GetExtensionDataMemberForType,The length of the statement  "                    throw new JsonException("Invalid extension data attribute on '{0}'. Member '{1}' must have a getter.".FormatWith(CultureInfo.InvariantCulture' GetClrTypeFullName(m.DeclaringType)' m.Name)); " is 189.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,GetExtensionDataMemberForType,The length of the statement  "                throw new JsonException("Invalid extension data attribute on '{0}'. Member '{1}' type must implement IDictionary<string' JToken>.".FormatWith(CultureInfo.InvariantCulture' GetClrTypeFullName(m.DeclaringType)' m.Name)); " is 218.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,SetExtensionDataDelegates,The length of the statement  "            Func<object' object> getExtensionDataDictionary = JsonTypeReflector.ReflectionDelegateFactory.CreateGet<object>(member); " is 120.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,SetExtensionDataDelegates,The length of the statement  "                Func<object> createExtensionDataDictionary = JsonTypeReflector.ReflectionDelegateFactory.CreateDefaultConstructor<object>(createdType); " is 135.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,SetExtensionDataDelegates,The length of the statement  "                MethodInfo setMethod = t.GetProperty("Item"' BindingFlags.Public | BindingFlags.Instance' null' valueType' new[] { keyType }' null)?.GetSetMethod(); " is 148.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,SetExtensionDataDelegates,The length of the statement  "                    setMethod = dictionaryType.GetProperty("Item"' BindingFlags.Public | BindingFlags.Instance' null' valueType' new[] { keyType }' null)?.GetSetMethod(); " is 150.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,SetExtensionDataDelegates,The length of the statement  "                MethodCall<object' object> setExtensionDataDictionaryValue = JsonTypeReflector.ReflectionDelegateFactory.CreateMethodCall<object>(setMethod); " is 141.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,SetExtensionDataDelegates,The length of the statement  "                            throw new JsonSerializationException("Cannot set value onto extension data member '{0}'. The extension data collection is null and it cannot be set.".FormatWith(CultureInfo.InvariantCulture' member.Name)); " is 205.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,SetExtensionDataDelegates,The length of the statement  "                ObjectConstructor<object> createEnumerableWrapper = JsonTypeReflector.ReflectionDelegateFactory.CreateParameterizedConstructor(constructors); " is 141.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,GetAttributeConstructor,The length of the statement  "            IEnumerator<ConstructorInfo> en = objectType.GetConstructors(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic).Where(c => c.IsDefined(typeof(JsonConstructorAttribute)' true)).GetEnumerator(); " is 211.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,CreatePropertyFromConstructorParameter,The length of the statement  "            SetPropertySettingsFromAttributes(property' parameterInfo' parameterInfo.Name' parameterInfo.Member.DeclaringType' MemberSerialization.OptOut' out _); " is 150.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,CreatePropertyFromConstructorParameter,The length of the statement  "                property.PropertyName = (property.PropertyName != parameterInfo.Name) ? property.PropertyName : matchingMemberProperty.PropertyName; " is 132.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,InitializeContract,The length of the statement  "            JsonContainerAttribute containerAttribute = JsonTypeReflector.GetCachedAttribute<JsonContainerAttribute>(contract.NonNullableUnderlyingType); " is 141.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,InitializeContract,The length of the statement  "                DataContractAttribute dataContractAttribute = JsonTypeReflector.GetDataContractAttribute(contract.NonNullableUnderlyingType); " is 125.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,InitializeContract,The length of the statement  "            contract.InternalConverter = JsonSerializer.GetMatchingConverter(BuiltInConverters' contract.NonNullableUnderlyingType); " is 120.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,GetCallbackMethodsForType,The length of the statement  "                foreach (MethodInfo method in baseType.GetMethods(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly)) " is 148.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,GetCallbackMethodsForType,The length of the statement  "                    if (!skipSerializing && IsValidCallback(method' parameters' typeof(OnSerializingAttribute)' currentOnSerializing' ref prevAttributeType)) " is 137.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,GetCallbackMethodsForType,The length of the statement  "                    if (IsValidCallback(method' parameters' typeof(OnDeserializingAttribute)' currentOnDeserializing' ref prevAttributeType)) " is 121.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,GetCallbackMethodsForType,The length of the statement  "                    if (!skipDeserialized && IsValidCallback(method' parameters' typeof(OnDeserializedAttribute)' currentOnDeserialized' ref prevAttributeType)) " is 140.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,CreateDictionaryContract,The length of the statement  "                    ? typeof(IEnumerable<>).MakeGenericType(typeof(KeyValuePair<'>).MakeGenericType(contract.DictionaryKeyType' contract.DictionaryValueType)) " is 138.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,CreateDictionaryContract,The length of the statement  "                    throw new JsonException("Constructor for '{0}' must have no parameters or a single parameter that implements '{1}'.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType' expectedParameterType)); " is 207.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,CreateDictionaryContract,The length of the statement  "                contract.OverrideCreator = JsonTypeReflector.ReflectionDelegateFactory.CreateParameterizedConstructor(overrideConstructor); " is 123.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,CreateArrayContract,The length of the statement  "                    throw new JsonException("Constructor for '{0}' must have no parameters or a single parameter that implements '{1}'.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType' expectedParameterType)); " is 207.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,CreateArrayContract,The length of the statement  "                contract.OverrideCreator = JsonTypeReflector.ReflectionDelegateFactory.CreateParameterizedConstructor(overrideConstructor); " is 123.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,CreateISerializableContract,The length of the statement  "                ConstructorInfo constructorInfo = contract.NonNullableUnderlyingType.GetConstructor(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance' null' new[] {typeof(SerializationInfo)' typeof(StreamingContext)}' null); " is 227.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,CreateISerializableContract,The length of the statement  "                    ObjectConstructor<object> creator = JsonTypeReflector.ReflectionDelegateFactory.CreateParameterizedConstructor(constructorInfo); " is 128.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,IsValidCallback,The length of the statement  "                throw new JsonException("Invalid attribute. Both '{0}' and '{1}' in type '{2}' have '{3}'.".FormatWith(CultureInfo.InvariantCulture' method' currentCallback' GetClrTypeFullName(method.DeclaringType)' attributeType)); " is 216.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,IsValidCallback,The length of the statement  "                throw new JsonException("Invalid Callback. Method '{3}' in type '{2}' has both '{0}' and '{1}'.".FormatWith(CultureInfo.InvariantCulture' prevAttributeType' attributeType' GetClrTypeFullName(method.DeclaringType)' method)); " is 223.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,IsValidCallback,The length of the statement  "                throw new JsonException("Virtual Method '{0}' of type '{1}' cannot be marked with '{2}' attribute.".FormatWith(CultureInfo.InvariantCulture' method' GetClrTypeFullName(method.DeclaringType)' attributeType)); " is 207.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,IsValidCallback,The length of the statement  "                throw new JsonException("Serialization Callback '{1}' in type '{0}' must return void.".FormatWith(CultureInfo.InvariantCulture' GetClrTypeFullName(method.DeclaringType)' method)); " is 179.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,IsValidCallback,The length of the statement  "                if (parameters == null || parameters.Length != 2 || parameters[0].ParameterType != typeof(StreamingContext) || parameters[1].ParameterType != typeof(ErrorContext)) " is 163.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,IsValidCallback,The length of the statement  "                    throw new JsonException("Serialization Error Callback '{1}' in type '{0}' must have two parameters of type '{2}' and '{3}'.".FormatWith(CultureInfo.InvariantCulture' GetClrTypeFullName(method.DeclaringType)' method' typeof(StreamingContext)' typeof(ErrorContext))); " is 265.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,IsValidCallback,The length of the statement  "                    throw new JsonException("Serialization Callback '{1}' in type '{0}' must have a single parameter of type '{2}'.".FormatWith(CultureInfo.InvariantCulture' GetClrTypeFullName(method.DeclaringType)' method' typeof(StreamingContext))); " is 231.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,CreateProperty,The length of the statement  "            SetPropertySettingsFromAttributes(property' member' member.Name' member.DeclaringType' memberSerialization' out bool allowNonPublicAccess); " is 139.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,SetPropertySettingsFromAttributes,The length of the statement  "                namingStrategy = JsonTypeReflector.CreateNamingStrategyInstance(propertyAttribute.NamingStrategyType' propertyAttribute.NamingStrategyParameters); " is 146.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,SetPropertySettingsFromAttributes,The length of the statement  "                property.ItemConverter = propertyAttribute.ItemConverterType != null ? JsonTypeReflector.CreateJsonConverterInstance(propertyAttribute.ItemConverterType' propertyAttribute.ItemConverterParameters) : null; " is 204.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,SetPropertySettingsFromAttributes,The length of the statement  "                    property.DefaultValueHandling = (!dataMemberAttribute.EmitDefaultValue) ? (DefaultValueHandling?)DefaultValueHandling.Ignore : null; " is 132.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,CreateShouldSerializeTest,The length of the statement  "            MethodInfo shouldSerializeMethod = member.DeclaringType.GetMethod(JsonTypeReflector.ShouldSerializePrefix + member.Name' ReflectionUtils.EmptyTypes); " is 149.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,SetIsSpecifiedActions,The length of the statement  "            MemberInfo specifiedMember = member.DeclaringType.GetProperty(member.Name + JsonTypeReflector.SpecifiedPostfix' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic); " is 182.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,SetIsSpecifiedActions,The length of the statement  "                specifiedMember = member.DeclaringType.GetField(member.Name + JsonTypeReflector.SpecifiedPostfix' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic); " is 168.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,SetIsSpecifiedActions,The length of the statement  "            Func<object' object> specifiedPropertyGet = JsonTypeReflector.ReflectionDelegateFactory.CreateGet<object>(specifiedMember); " is 123.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultSerializationBinder,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultSerializationBinder.cs,GetTypeFromTypeNameKey,The length of the statement  "                    throw new JsonSerializationException("Could not load assembly '{0}'.".FormatWith(CultureInfo.InvariantCulture' assemblyName)); " is 126.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultSerializationBinder,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultSerializationBinder.cs,GetTypeFromTypeNameKey,The length of the statement  "                    // example generic typeName format: System.Collections.Generic.Dictionary`2[[System.String' mscorlib' Version=2.0.0.0' Culture=neutral' PublicKeyToken=b77a5c561934e089]'[System.String' mscorlib' Version=2.0.0.0' Culture=neutral' PublicKeyToken=b77a5c561934e089]] " is 262.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultSerializationBinder,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultSerializationBinder.cs,GetTypeFromTypeNameKey,The length of the statement  "                            throw new JsonSerializationException("Could not find type '{0}' in assembly '{1}'.".FormatWith(CultureInfo.InvariantCulture' typeName' assembly.FullName)' ex); " is 159.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DefaultSerializationBinder,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultSerializationBinder.cs,GetTypeFromTypeNameKey,The length of the statement  "                        throw new JsonSerializationException("Could not find type '{0}' in assembly '{1}'.".FormatWith(CultureInfo.InvariantCulture' typeName' assembly.FullName)); " is 155.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DynamicValueProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DynamicValueProvider.cs,SetValue,The length of the statement  "                        throw new JsonSerializationException("Incompatible value. Cannot set {0} to null.".FormatWith(CultureInfo.InvariantCulture' _memberInfo)); " is 138.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DynamicValueProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DynamicValueProvider.cs,SetValue,The length of the statement  "                    throw new JsonSerializationException("Incompatible value. Cannot set {0} to type {1}.".FormatWith(CultureInfo.InvariantCulture' _memberInfo' value.GetType())); " is 159.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DynamicValueProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DynamicValueProvider.cs,SetValue,The length of the statement  "                throw new JsonSerializationException("Error setting value to '{0}' on '{1}'.".FormatWith(CultureInfo.InvariantCulture' _memberInfo.Name' target.GetType())' ex); " is 160.
Long Statement,Microsoft.IdentityModel.Json.Serialization,DynamicValueProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DynamicValueProvider.cs,GetValue,The length of the statement  "                throw new JsonSerializationException("Error getting value from '{0}' on '{1}'.".FormatWith(CultureInfo.InvariantCulture' _memberInfo.Name' target.GetType())' ex); " is 162.
Long Statement,Microsoft.IdentityModel.Json.Serialization,ExpressionValueProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\ExpressionValueProvider.cs,SetValue,The length of the statement  "                        throw new JsonSerializationException("Incompatible value. Cannot set {0} to null.".FormatWith(CultureInfo.InvariantCulture' _memberInfo)); " is 138.
Long Statement,Microsoft.IdentityModel.Json.Serialization,ExpressionValueProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\ExpressionValueProvider.cs,SetValue,The length of the statement  "                    throw new JsonSerializationException("Incompatible value. Cannot set {0} to type {1}.".FormatWith(CultureInfo.InvariantCulture' _memberInfo' value.GetType())); " is 159.
Long Statement,Microsoft.IdentityModel.Json.Serialization,ExpressionValueProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\ExpressionValueProvider.cs,SetValue,The length of the statement  "                throw new JsonSerializationException("Error setting value to '{0}' on '{1}'.".FormatWith(CultureInfo.InvariantCulture' _memberInfo.Name' target.GetType())' ex); " is 160.
Long Statement,Microsoft.IdentityModel.Json.Serialization,ExpressionValueProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\ExpressionValueProvider.cs,GetValue,The length of the statement  "                throw new JsonSerializationException("Error getting value from '{0}' on '{1}'.".FormatWith(CultureInfo.InvariantCulture' _memberInfo.Name' target.GetType())' ex); " is 162.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonArrayContract,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonArrayContract.cs,CreateWrapper,The length of the statement  "                _genericWrapperCreator = JsonTypeReflector.ReflectionDelegateFactory.CreateParameterizedConstructor(genericWrapperConstructor); " is 127.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonArrayContract,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonArrayContract.cs,CreateTemporaryCollection,The length of the statement  "                _genericTemporaryCollectionCreator = JsonTypeReflector.ReflectionDelegateFactory.CreateDefaultConstructor<object>(temporaryListType); " is 133.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonDictionaryContract,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonDictionaryContract.cs,CreateWrapper,The length of the statement  "                ConstructorInfo genericWrapperConstructor = _genericWrapperType.GetConstructor(new[] { _genericCollectionDefinitionType }); " is 123.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonDictionaryContract,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonDictionaryContract.cs,CreateWrapper,The length of the statement  "                _genericWrapperCreator = JsonTypeReflector.ReflectionDelegateFactory.CreateParameterizedConstructor(genericWrapperConstructor); " is 127.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonDictionaryContract,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonDictionaryContract.cs,CreateTemporaryDictionary,The length of the statement  "                Type temporaryDictionaryType = typeof(Dictionary<'>).MakeGenericType(DictionaryKeyType ?? typeof(object)' DictionaryValueType ?? typeof(object)); " is 145.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonDictionaryContract,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonDictionaryContract.cs,CreateTemporaryDictionary,The length of the statement  "                _genericTemporaryDictionaryCreator = JsonTypeReflector.ReflectionDelegateFactory.CreateDefaultConstructor<object>(temporaryDictionaryType); " is 139.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonObjectContract,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonObjectContract.cs,GetUninitializedObject,The length of the statement  "                throw new JsonException("Insufficient permissions. Creating an uninitialized '{0}' type requires full trust.".FormatWith(CultureInfo.InvariantCulture' NonNullableUnderlyingType)); " is 179.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonPropertyCollection,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonPropertyCollection.cs,AddProperty,The length of the statement  "                            || (existingProperty.DeclaringType.IsInterface() && property.DeclaringType.ImplementInterface(existingProperty.DeclaringType))) " is 127.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonPropertyCollection,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonPropertyCollection.cs,AddProperty,The length of the statement  "                    throw new JsonSerializationException("A member with the name '{0}' already exists on '{1}'. Use the JsonPropertyAttribute to specify another name.".FormatWith(CultureInfo.InvariantCulture' property.PropertyName' _type)); " is 220.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,Populate,The length of the statement  "                    PopulateList((arrayContract.ShouldCreateWrapper) ? arrayContract.CreateWrapper(target) : (IList)target' reader' arrayContract' null' null); " is 139.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,Populate,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Cannot populate JSON array onto type '{0}'.".FormatWith(CultureInfo.InvariantCulture' objectType)); " is 148.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,Populate,The length of the statement  "                    PopulateDictionary((dictionaryContract.ShouldCreateWrapper) ? dictionaryContract.CreateWrapper(target) : (IDictionary)target' reader' dictionaryContract' null' id); " is 164.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,Populate,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Cannot populate JSON object onto type '{0}'.".FormatWith(CultureInfo.InvariantCulture' objectType)); " is 149.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,Populate,The length of the statement  "                throw JsonSerializationException.Create(reader' "Unexpected initial token '{0}' when populating object. Expected JSON object or array.".FormatWith(CultureInfo.InvariantCulture' reader.TokenType)); " is 196.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,Deserialize,The length of the statement  "                        throw JsonSerializationException.Create(reader' "No JSON content found and type '{0}' is not nullable.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 171.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,Deserialize,The length of the statement  "                            throw JsonSerializationException.Create(reader' "Additional text found in JSON string after finishing deserializing object."); " is 126.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CoerceEmptyStringToNull,The length of the statement  "            return string.IsNullOrEmpty(s) && objectType != null && objectType != typeof(string) && objectType != typeof(object) && contract != null && contract.IsNullable; " is 160.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the statement  "                if (ReadMetadataPropertiesToken(tokenReader' ref resolvedObjectType' ref contract' member' containerContract' containerMember' existingValue' out object newValue' out id)) " is 171.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the statement  "                if (ReadMetadataProperties(reader' ref resolvedObjectType' ref contract' member' containerContract' containerMember' existingValue' out object newValue' out id)) " is 161.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the statement  "                    if (existingValue != null && (resolvedObjectType == objectType || resolvedObjectType.IsAssignableFrom(existingValue.GetType()))) " is 128.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the statement  "                            throw JsonSerializationException.Create(reader' "Unexpected token when deserializing primitive value: " + reader.TokenType); " is 124.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the statement  "                                throw JsonSerializationException.Create(reader' "Cannot preserve reference to readonly dictionary' or dictionary created from a non-default constructor: {0}.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 226.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the statement  "                                throw JsonSerializationException.Create(reader' "Cannot call OnSerializing on readonly dictionary' or dictionary created from a non-default constructor: {0}.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 226.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the statement  "                                throw JsonSerializationException.Create(reader' "Cannot call OnError on readonly list' or dictionary created from a non-default constructor: {0}.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 214.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the statement  "                                throw JsonSerializationException.Create(reader' "Cannot deserialize readonly or fixed size dictionary: {0}.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 176.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the statement  "                        targetDictionary = PopulateDictionary(dictionaryContract.ShouldCreateWrapper || !(existingValue is IDictionary) ? dictionaryContract.CreateWrapper(existingValue) : (IDictionary)existingValue' reader' dictionaryContract' member' id); " is 232.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the statement  "            string message = @"Cannot deserialize the current JSON object (e.g. {{""name"":""value""}}) into type '{0}' because the type requires a {1} to deserialize correctly." + Environment.NewLine + " is 190.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateObject,The length of the statement  "                             @"To fix this error either change the JSON to a {1} or change the deserialized type so that it is a normal .NET type (e.g. not a primitive type like integer' not a collection type like an array or List<T>) that can be deserialized from a JSON object. JsonObjectAttribute can also be added to the type to force it to deserialize from a JSON object." + Environment.NewLine; " is 371.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,ReadMetadataPropertiesToken,The length of the statement  "                        throw JsonSerializationException.Create(refToken' refToken.Path' "JSON reference {0} property must have a string or null value.".FormatWith(CultureInfo.InvariantCulture' JsonTypeReflector.RefPropertyName)' null); " is 212.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,ReadMetadataPropertiesToken,The length of the statement  "                            throw JsonSerializationException.Create(additionalContent' additionalContent.Path' "Additional content found in JSON reference object. A JSON reference object should only have a {0} property.".FormatWith(CultureInfo.InvariantCulture' JsonTypeReflector.RefPropertyName)' null); " is 276.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,ReadMetadataPropertiesToken,The length of the statement  "                            TraceWriter.Trace(TraceLevel.Info' JsonPosition.FormatMessage(reader' reader.Path' "Resolved object reference '{0}' to {1}.".FormatWith(CultureInfo.InvariantCulture' reference' newValue.GetType()))' null); " is 205.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,ReadMetadataPropertiesToken,The length of the statement  "                    ResolveTypeName(typeTokenReader' ref objectType' ref contract' member' containerContract' containerMember' qualifiedTypeName); " is 126.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,ReadMetadataProperties,The length of the statement  "                                throw JsonSerializationException.Create(reader' "JSON reference {0} property must have a string or null value.".FormatWith(CultureInfo.InvariantCulture' JsonTypeReflector.RefPropertyName)); " is 189.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,ReadMetadataProperties,The length of the statement  "                                    throw JsonSerializationException.Create(reader' "Additional content found in JSON reference object. A JSON reference object should only have a {0} property.".FormatWith(CultureInfo.InvariantCulture' JsonTypeReflector.RefPropertyName)); " is 235.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,ReadMetadataProperties,The length of the statement  "                                    TraceWriter.Trace(TraceLevel.Info' JsonPosition.FormatMessage(reader as IJsonLineInfo' reader.Path' "Resolved object reference '{0}' to {1}.".FormatWith(CultureInfo.InvariantCulture' reference' newValue.GetType()))' null); " is 222.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,ResolveTypeName,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Error resolving type specified in JSON '{0}'.".FormatWith(CultureInfo.InvariantCulture' qualifiedTypeName)' ex); " is 161.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,ResolveTypeName,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Type specified in JSON '{0}' was not resolved.".FormatWith(CultureInfo.InvariantCulture' qualifiedTypeName)); " is 158.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,ResolveTypeName,The length of the statement  "                    TraceWriter.Trace(TraceLevel.Verbose' JsonPosition.FormatMessage(reader as IJsonLineInfo' reader.Path' "Resolved type '{0}' to {1}.".FormatWith(CultureInfo.InvariantCulture' qualifiedTypeName' specifiedType))' null); " is 216.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,ResolveTypeName,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Type specified in JSON '{0}' is not compatible with '{1}'.".FormatWith(CultureInfo.InvariantCulture' specifiedType.AssemblyQualifiedName' objectType.AssemblyQualifiedName)); " is 222.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,EnsureArrayContract,The length of the statement  "                throw JsonSerializationException.Create(reader' "Could not resolve type '{0}' to a JsonContract.".FormatWith(CultureInfo.InvariantCulture' objectType)); " is 152.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,EnsureArrayContract,The length of the statement  "                string message = @"Cannot deserialize the current JSON array (e.g. [1'2'3]) into type '{0}' because the type requires a {1} to deserialize correctly." + Environment.NewLine + " is 174.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,EnsureArrayContract,The length of the statement  "                                 @"To fix this error either change the JSON to a {1} or change the deserialized type to an array or a type that implements a collection interface (e.g. ICollection' IList) like List<T> that can be deserialized from a JSON array. JsonArrayAttribute can also be added to the type to force it to deserialize from a JSON array." + Environment.NewLine; " is 346.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateList,The length of the statement  "                        throw JsonSerializationException.Create(reader' "Cannot preserve reference to array or readonly list' or list created from a non-default constructor: {0}.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 223.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateList,The length of the statement  "                        throw JsonSerializationException.Create(reader' "Cannot call OnSerializing on an array or readonly list' or list created from a non-default constructor: {0}.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 226.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateList,The length of the statement  "                        throw JsonSerializationException.Create(reader' "Cannot call OnError on an array or readonly list' or list created from a non-default constructor: {0}.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 220.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateList,The length of the statement  "                        throw JsonSerializationException.Create(reader' "Cannot deserialize readonly or fixed size list: {0}.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 170.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateList,The length of the statement  "                        list = CollectionUtils.ToMultidimensionalArray(list' arrayContract.CollectionItemType' contract.CreatedType.GetArrayRank()); " is 124.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateList,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Cannot populate list type {0}.".FormatWith(CultureInfo.InvariantCulture' contract.CreatedType)); " is 145.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateList,The length of the statement  "                value = PopulateList((arrayContract.ShouldCreateWrapper || !(existingValue is IList list)) ? arrayContract.CreateWrapper(existingValue) : list' reader' arrayContract' member' id); " is 179.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,EnsureType,The length of the statement  "                            if (value is string s && DateTimeUtils.TryParseDateTime(s' reader.DateTimeZoneHandling' reader.DateFormatString' reader.Culture' out DateTime dt)) " is 146.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,EnsureType,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Error converting value {0} to type '{1}'.".FormatWith(CultureInfo.InvariantCulture' MiscellaneousUtils.ToString(value)' targetType)' ex); " is 186.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,SetPropertyValue,The length of the statement  "                value = CreateValueInternal(reader' property.PropertyType' propertyContract' property' containerContract' containerProperty' (useExistingValue) ? currentValue : null); " is 167.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,SetPropertyValue,The length of the statement  "                        TraceWriter.Trace(TraceLevel.Verbose' JsonPosition.FormatMessage(reader as IJsonLineInfo' reader.Path' "IsSpecified for property '{0}' on {1} set to true.".FormatWith(CultureInfo.InvariantCulture' property.PropertyName' property.DeclaringType))' null); " is 252.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CalculatePropertyDetails,The length of the statement  "                    TraceWriter.Trace(TraceLevel.Info' JsonPosition.FormatMessage(reader as IJsonLineInfo' reader.Path' "Unable to deserialize value to non-writable property '{0}' on {1}.".FormatWith(CultureInfo.InvariantCulture' property.PropertyName' property.DeclaringType))' null); " is 265.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CalculatePropertyDetails,The length of the statement  "            if (tokenType == JsonToken.Null && ResolvedNullValueHandling(containerContract as JsonObjectContract' property) == NullValueHandling.Ignore) " is 140.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CalculatePropertyDetails,The length of the statement  "            if (HasFlag(property.DefaultValueHandling.GetValueOrDefault(Serializer._defaultValueHandling)' DefaultValueHandling.Ignore) " is 123.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CalculatePropertyDetails,The length of the statement  "                && !HasFlag(property.DefaultValueHandling.GetValueOrDefault(Serializer._defaultValueHandling)' DefaultValueHandling.Populate) " is 125.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,AddReference,The length of the statement  "                    TraceWriter.Trace(TraceLevel.Verbose' JsonPosition.FormatMessage(reader as IJsonLineInfo' reader.Path' "Read object reference Id '{0}' for {1}.".FormatWith(CultureInfo.InvariantCulture' id' value.GetType()))' null); " is 215.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,AddReference,The length of the statement  "                throw JsonSerializationException.Create(reader' "Error reading object reference '{0}'.".FormatWith(CultureInfo.InvariantCulture' id)' ex); " is 138.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,ShouldSetPropertyValue,The length of the statement  "            if (HasFlag(property.DefaultValueHandling.GetValueOrDefault(Serializer._defaultValueHandling)' DefaultValueHandling.Ignore) " is 123.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,ShouldSetPropertyValue,The length of the statement  "                && !HasFlag(property.DefaultValueHandling.GetValueOrDefault(Serializer._defaultValueHandling)' DefaultValueHandling.Populate) " is 125.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateNewList,The length of the statement  "                throw JsonSerializationException.Create(reader' "Cannot create and populate list type {0}.".FormatWith(CultureInfo.InvariantCulture' contract.CreatedType)); " is 156.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateNewList,The length of the statement  "            else if (contract.DefaultCreator != null && (!contract.DefaultCreatorNonPublic || Serializer._constructorHandling == ConstructorHandling.AllowNonPublicDefaultConstructor)) " is 171.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateNewList,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Could not create an instance of type {0}. Type is an interface or abstract class and cannot be instantiated.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 226.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateNewList,The length of the statement  "                throw JsonSerializationException.Create(reader' "Unable to find a constructor to use for type {0}.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 167.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateNewDictionary,The length of the statement  "            else if (contract.DefaultCreator != null && (!contract.DefaultCreatorNonPublic || Serializer._constructorHandling == ConstructorHandling.AllowNonPublicDefaultConstructor)) " is 171.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateNewDictionary,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Could not create an instance of type {0}. Type is an interface or abstract class and cannot be instantiated.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 226.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateNewDictionary,The length of the statement  "                throw JsonSerializationException.Create(reader' "Unable to find a default constructor to use for type {0}.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 175.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,OnDeserializing,The length of the statement  "                TraceWriter.Trace(TraceLevel.Info' JsonPosition.FormatMessage(reader as IJsonLineInfo' reader.Path' "Started deserializing {0}".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType))' null); " is 202.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,OnDeserialized,The length of the statement  "                TraceWriter.Trace(TraceLevel.Info' JsonPosition.FormatMessage(reader as IJsonLineInfo' reader.Path' "Finished deserializing {0}".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType))' null); " is 203.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,PopulateDictionary,The length of the statement  "            object underlyingDictionary = dictionary is IWrappedDictionary wrappedDictionary ? wrappedDictionary.UnderlyingDictionary : dictionary; " is 135.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,PopulateDictionary,The length of the statement  "            JsonConverter dictionaryValueConverter = contract.ItemConverter ?? GetConverter(contract.ItemContract' null' contract' containerProperty); " is 138.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,PopulateDictionary,The length of the statement  "            PrimitiveTypeCode keyTypeCode = (contract.KeyContract is JsonPrimitiveContract keyContract) ? keyContract.TypeCode : PrimitiveTypeCode.Empty; " is 141.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,PopulateDictionary,The length of the statement  "                                        keyValue = DateTimeUtils.TryParseDateTime(keyValue.ToString()' reader.DateTimeZoneHandling' reader.DateFormatString' reader.Culture' out DateTime dt) " is 149.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,PopulateDictionary,The length of the statement  "                                        keyValue = DateTimeUtils.TryParseDateTimeOffset(keyValue.ToString()' reader.DateFormatString' reader.Culture' out DateTimeOffset dt) " is 132.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,PopulateDictionary,The length of the statement  "                                        keyValue = EnsureType(reader' keyValue' CultureInfo.InvariantCulture' contract.KeyContract' contract.DictionaryKeyType); " is 120.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,PopulateDictionary,The length of the statement  "                                throw JsonSerializationException.Create(reader' "Could not convert string '{0}' to dictionary key type '{1}'. Create a TypeConverter to convert from the string to the key type object.".FormatWith(CultureInfo.InvariantCulture' reader.Value' contract.DictionaryKeyType)' ex); " is 273.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,PopulateDictionary,The length of the statement  "                                itemValue = CreateValueInternal(reader' contract.DictionaryValueType' contract.ItemContract' null' contract' containerProperty' null); " is 134.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,PopulateMultidimensionalArray,The length of the statement  "                                        value = CreateValueInternal(reader' contract.CollectionItemType' collectionItemContract' null' contract' containerProperty' null); " is 130.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,PopulateMultidimensionalArray,The length of the statement  "                                throw JsonSerializationException.Create(reader' "Unexpected token when deserializing multidimensional array: " + reader.TokenType); " is 131.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,PopulateList,The length of the statement  "                                    value = CreateValueInternal(reader' contract.CollectionItemType' contract.ItemContract' null' contract' containerProperty' null); " is 129.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateISerializable,The length of the statement  "                string message = @"Type '{0}' implements ISerializable but cannot be deserialized using the ISerializable interface because the current application is not fully trusted and ISerializable can expose secure data." + Environment.NewLine + " is 235.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateISerializable,The length of the statement  "                                 @"To fix this error either change the environment to be fully trusted' change the application to not deserialize the type' add JsonObjectAttribute to the type or change the JsonSerializer setting ContractResolver to use a new DefaultContractResolver with IgnoreSerializableInterface set to true." + Environment.NewLine; " is 319.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateISerializable,The length of the statement  "                TraceWriter.Trace(TraceLevel.Info' JsonPosition.FormatMessage(reader as IJsonLineInfo' reader.Path' "Deserializing {0} using ISerializable constructor.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType))' null); " is 227.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateISerializable,The length of the statement  "            SerializationInfo serializationInfo = new SerializationInfo(contract.UnderlyingType' new JsonFormatterConverter(this' contract' member)); " is 137.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateISerializable,The length of the statement  "                            throw JsonSerializationException.Create(reader' "Unexpected end when setting {0}'s value.".FormatWith(CultureInfo.InvariantCulture' memberName)); " is 145.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateISerializable,The length of the statement  "                throw JsonSerializationException.Create(reader' "Could not create an instance of type {0}. Type is an interface or abstract class and cannot be instantiated.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 226.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateISerializable,The length of the statement  "                throw JsonSerializationException.Create(reader' "ISerializable type '{0}' does not have a valid constructor. To correctly implement ISerializable a constructor that takes SerializationInfo and StreamingContext parameters should be present.".FormatWith(CultureInfo.InvariantCulture' objectType)); " is 295.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateISerializable,The length of the statement  "            // these are together because OnDeserializing takes an object but for an ISerializable the object is fully created in the constructor " is 133.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateDynamic,The length of the statement  "                throw JsonSerializationException.Create(reader' "Could not create an instance of type {0}. Type is an interface or abstract class and cannot be instantiated.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 226.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateDynamic,The length of the statement  "                (!contract.DefaultCreatorNonPublic || Serializer._constructorHandling == ConstructorHandling.AllowNonPublicDefaultConstructor)) " is 127.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateDynamic,The length of the statement  "                throw JsonSerializationException.Create(reader' "Unable to find a default constructor to use for type {0}.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType)); " is 175.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateDynamic,The length of the statement  "                                throw JsonSerializationException.Create(reader' "Unexpected end when setting {0}'s value.".FormatWith(CultureInfo.InvariantCulture' memberName)); " is 145.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateObjectUsingCreatorWithParameters,The length of the statement  "            bool trackPresence = (contract.HasRequiredOrDefaultValueProperties || HasFlag(Serializer._defaultValueHandling' DefaultValueHandling.Populate)); " is 144.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateObjectUsingCreatorWithParameters,The length of the statement  "                TraceWriter.Trace(TraceLevel.Info' JsonPosition.FormatMessage(reader as IJsonLineInfo' reader.Path' "Deserializing {0} using creator with parameters: {1}.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType' parameters))' null); " is 242.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateObjectUsingCreatorWithParameters,The length of the statement  "            List<CreatorPropertyContext> propertyContexts = ResolvePropertyAndCreatorValues(contract' containerProperty' reader' objectType); " is 129.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateObjectUsingCreatorWithParameters,The length of the statement  "                    constructorProperty = contract.CreatorParameters.ForgivingCaseSensitiveFind(p => p.PropertyName' context.Property.UnderlyingName); " is 130.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateObjectUsingCreatorWithParameters,The length of the statement  "                            if (HasFlag(constructorProperty.DefaultValueHandling.GetValueOrDefault(Serializer._defaultValueHandling)' DefaultValueHandling.Populate)) " is 137.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateObjectUsingCreatorWithParameters,The length of the statement  "                                IList createdObjectCollectionWrapper = (propertyArrayContract.ShouldCreateWrapper) ? propertyArrayContract.CreateWrapper(createdObjectCollection) : (IList)createdObjectCollection; " is 179.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateObjectUsingCreatorWithParameters,The length of the statement  "                                IList newValues = (propertyArrayContract.ShouldCreateWrapper) ? propertyArrayContract.CreateWrapper(value) : (IList)value; " is 122.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateObjectUsingCreatorWithParameters,The length of the statement  "                                IDictionary targetDictionary = (dictionaryContract.ShouldCreateWrapper) ? dictionaryContract.CreateWrapper(createdObjectDictionary) : (IDictionary)createdObjectDictionary; " is 171.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateObjectUsingCreatorWithParameters,The length of the statement  "                                IDictionary newValues = (dictionaryContract.ShouldCreateWrapper) ? dictionaryContract.CreateWrapper(value) : (IDictionary)value; " is 128.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,DeserializeConvertable,The length of the statement  "                TraceWriter.Trace(TraceLevel.Info' JsonPosition.FormatMessage(reader as IJsonLineInfo' reader.Path' "Started deserializing {0} with converter {1}.".FormatWith(CultureInfo.InvariantCulture' objectType' converter.GetType()))' null); " is 230.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,DeserializeConvertable,The length of the statement  "                TraceWriter.Trace(TraceLevel.Info' JsonPosition.FormatMessage(reader as IJsonLineInfo' reader.Path' "Finished deserializing {0} with converter {1}.".FormatWith(CultureInfo.InvariantCulture' objectType' converter.GetType()))' null); " is 231.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,ResolvePropertyAndCreatorValues,The length of the statement  "                            JsonConverter propertyConverter = GetConverter(property.PropertyContract' property.Converter' contract' containerProperty); " is 123.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,ResolvePropertyAndCreatorValues,The length of the statement  "                                throw JsonSerializationException.Create(reader' "Unexpected end when setting {0}'s value.".FormatWith(CultureInfo.InvariantCulture' memberName)); " is 145.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,ResolvePropertyAndCreatorValues,The length of the statement  "                                creatorPropertyContext.Value = CreateValueInternal(reader' property.PropertyType' property.PropertyContract' property' contract' containerProperty' null); " is 154.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,ResolvePropertyAndCreatorValues,The length of the statement  "                                throw JsonSerializationException.Create(reader' "Unexpected end when setting {0}'s value.".FormatWith(CultureInfo.InvariantCulture' memberName)); " is 145.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,ResolvePropertyAndCreatorValues,The length of the statement  "                                TraceWriter.Trace(TraceLevel.Verbose' JsonPosition.FormatMessage(reader as IJsonLineInfo' reader.Path' "Could not find member '{0}' on {1}.".FormatWith(CultureInfo.InvariantCulture' memberName' contract.UnderlyingType))' null); " is 227.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,ResolvePropertyAndCreatorValues,The length of the statement  "                                throw JsonSerializationException.Create(reader' "Could not find member '{0}' on object of type '{1}'".FormatWith(CultureInfo.InvariantCulture' memberName' objectType.Name)); " is 173.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateNewObject,The length of the statement  "                    return CreateObjectUsingCreatorWithParameters(reader' objectContract' containerMember' objectContract.OverrideCreator' id); " is 123.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateNewObject,The length of the statement  "                     (!objectContract.DefaultCreatorNonPublic || Serializer._constructorHandling == ConstructorHandling.AllowNonPublicDefaultConstructor || objectContract.ParameterizedCreator == null)) " is 180.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateNewObject,The length of the statement  "                return CreateObjectUsingCreatorWithParameters(reader' objectContract' containerMember' objectContract.ParameterizedCreator' id); " is 128.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateNewObject,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Could not create an instance of type {0}. Type is an interface or abstract class and cannot be instantiated.".FormatWith(CultureInfo.InvariantCulture' objectContract.UnderlyingType)); " is 232.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateNewObject,The length of the statement  "                throw JsonSerializationException.Create(reader' "Unable to find a constructor to use for type {0}. A class should either have a default constructor' one constructor with arguments or a constructor marked with the JsonConstructor attribute.".FormatWith(CultureInfo.InvariantCulture' objectContract.UnderlyingType)); " is 314.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,PopulateObject,The length of the statement  "            Dictionary<JsonProperty' PropertyPresence> propertiesPresence = (contract.HasRequiredOrDefaultValueProperties || HasFlag(Serializer._defaultValueHandling' DefaultValueHandling.Populate)) " is 186.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,PopulateObject,The length of the statement  "                                    TraceWriter.Trace(TraceLevel.Verbose' JsonPosition.FormatMessage(reader as IJsonLineInfo' reader.Path' "Could not find member '{0}' on {1}".FormatWith(CultureInfo.InvariantCulture' propertyName' contract.UnderlyingType))' null); " is 228.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,PopulateObject,The length of the statement  "                                    throw JsonSerializationException.Create(reader' "Could not find member '{0}' on object of type '{1}'".FormatWith(CultureInfo.InvariantCulture' propertyName' contract.UnderlyingType.Name)); " is 188.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,PopulateObject,The length of the statement  "                                    throw JsonSerializationException.Create(reader' "Unexpected end when setting {0}'s value.".FormatWith(CultureInfo.InvariantCulture' propertyName)); " is 147.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,ShouldDeserialize,The length of the statement  "                TraceWriter.Trace(TraceLevel.Verbose' JsonPosition.FormatMessage(null' reader.Path' "ShouldDeserialize result for property '{0}' on {1}: {2}".FormatWith(CultureInfo.InvariantCulture' property.PropertyName' property.DeclaringType' shouldDeserialize))' null); " is 257.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,SetExtensionData,The length of the statement  "                    throw JsonSerializationException.Create(reader' "Error setting value in extension data for type '{0}'.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType)' ex); " is 175.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,EndProcessProperty,The length of the statement  "                    Required resolvedRequired = property.Ignored ? Required.Default : property._required ?? contract.ItemRequired ?? Required.Default; " is 130.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,EndProcessProperty,The length of the statement  "                                throw JsonSerializationException.Create(reader' "Required property '{0}' not found in JSON.".FormatWith(CultureInfo.InvariantCulture' property.PropertyName)); " is 158.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,EndProcessProperty,The length of the statement  "                                if (HasFlag(property.DefaultValueHandling.GetValueOrDefault(Serializer._defaultValueHandling)' DefaultValueHandling.Populate) && property.Writable) " is 147.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,EndProcessProperty,The length of the statement  "                                    property.ValueProvider.SetValue(newObject' EnsureType(reader' property.GetResolvedDefaultValue()' CultureInfo.InvariantCulture' property.PropertyContract' property.PropertyType)); " is 179.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,EndProcessProperty,The length of the statement  "                                throw JsonSerializationException.Create(reader' "Required property '{0}' expects a value but got null.".FormatWith(CultureInfo.InvariantCulture' property.PropertyName)); " is 169.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,EndProcessProperty,The length of the statement  "                                throw JsonSerializationException.Create(reader' "Required property '{0}' expects a non-null value.".FormatWith(CultureInfo.InvariantCulture' property.PropertyName)); " is 165.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,SerializePrimitive,The length of the statement  "                bool includeTypeDetails = ShouldWriteType(TypeNameHandling.Objects' contract' member' containerContract' containerProperty); " is 124.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,SerializeValue,The length of the statement  "                    SerializeDictionary(writer' (value is IDictionary dictionary) ? dictionary : dictionaryContract.CreateWrapper(value)' dictionaryContract' member' containerContract' containerProperty); " is 184.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,SerializeValue,The length of the statement  "                    SerializeDynamic(writer' (IDynamicMetaObjectProvider)value' (JsonDynamicContract)valueContract' member' containerContract' containerProperty); " is 142.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,SerializeValue,The length of the statement  "                    SerializeISerializable(writer' (ISerializable)value' (JsonISerializableContract)valueContract' member' containerContract' containerProperty); " is 141.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,ShouldWriteProperty,The length of the statement  "            if (HasFlag(property.DefaultValueHandling.GetValueOrDefault(Serializer._defaultValueHandling)' DefaultValueHandling.Ignore) " is 123.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,CheckForCircularReference,The length of the statement  "            if (value == null || contract.ContractType == JsonContractType.Primitive || contract.ContractType == JsonContractType.String) " is 125.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,CheckForCircularReference,The length of the statement  "                            TraceWriter.Trace(TraceLevel.Verbose' JsonPosition.FormatMessage(null' writer.Path' message + ". Skipping serializing self referenced value.")' null); " is 150.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,CheckForCircularReference,The length of the statement  "                            TraceWriter.Trace(TraceLevel.Verbose' JsonPosition.FormatMessage(null' writer.Path' message + ". Serializing self referenced value.")' null); " is 141.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,WriteReference,The length of the statement  "                TraceWriter.Trace(TraceLevel.Info' JsonPosition.FormatMessage(null' writer.Path' "Writing object reference to Id '{0}' for {1}.".FormatWith(CultureInfo.InvariantCulture' reference' value.GetType()))' null); " is 206.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,GetReference,The length of the statement  "                throw JsonSerializationException.Create(null' writer.ContainerPath' "Error writing object reference for '{0}'.".FormatWith(CultureInfo.InvariantCulture' value.GetType())' ex); " is 175.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,OnSerializing,The length of the statement  "                TraceWriter.Trace(TraceLevel.Info' JsonPosition.FormatMessage(null' writer.Path' "Started serializing {0}".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType))' null); " is 181.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,OnSerialized,The length of the statement  "                TraceWriter.Trace(TraceLevel.Info' JsonPosition.FormatMessage(null' writer.Path' "Finished serializing {0}".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType))' null); " is 182.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,SerializeObject,The length of the statement  "                    if (!CalculatePropertyValues(writer' value' contract' member' property' out JsonContract memberContract' out object memberValue)) " is 129.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,CalculatePropertyValues,The length of the statement  "            if (!property.Ignored && property.Readable && ShouldSerialize(writer' property' value) && IsSpecified(writer' property' value)) " is 127.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,CalculatePropertyValues,The length of the statement  "                            throw JsonSerializationException.Create(null' writer.ContainerPath' "Cannot write a null value for property '{0}'. Property requires a value.".FormatWith(CultureInfo.InvariantCulture' property.PropertyName)' null); " is 214.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,CalculatePropertyValues,The length of the statement  "                            throw JsonSerializationException.Create(null' writer.ContainerPath' "Cannot write a null value for property '{0}'. Property requires a non-null value.".FormatWith(CultureInfo.InvariantCulture' property.PropertyName)' null); " is 223.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,WriteObjectStart,The length of the statement  "            bool isReference = ResolveIsReference(contract' member' collectionContract' containerProperty) ?? HasFlag(Serializer._preserveReferencesHandling' PreserveReferencesHandling.Objects); " is 182.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,WriteReferenceIdProperty,The length of the statement  "                TraceWriter.Trace(TraceLevel.Verbose' JsonPosition.FormatMessage(null' writer.Path' "Writing object reference Id '{0}' for {1}.".FormatWith(CultureInfo.InvariantCulture' reference' type))' null); " is 195.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,WriteTypeProperty,The length of the statement  "            string typeName = ReflectionUtils.GetTypeName(type' Serializer._typeNameAssemblyFormatHandling' Serializer._serializationBinder); " is 129.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,WriteTypeProperty,The length of the statement  "                TraceWriter.Trace(TraceLevel.Verbose' JsonPosition.FormatMessage(null' writer.Path' "Writing type name '{0}' for {1}.".FormatWith(CultureInfo.InvariantCulture' typeName' type))' null); " is 184.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,SerializeConvertable,The length of the statement  "                    TraceWriter.Trace(TraceLevel.Info' JsonPosition.FormatMessage(null' writer.Path' "Started serializing {0} with converter {1}.".FormatWith(CultureInfo.InvariantCulture' value.GetType()' converter.GetType()))' null); " is 214.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,SerializeConvertable,The length of the statement  "                    TraceWriter.Trace(TraceLevel.Info' JsonPosition.FormatMessage(null' writer.Path' "Finished serializing {0} with converter {1}.".FormatWith(CultureInfo.InvariantCulture' value.GetType()' converter.GetType()))' null); " is 215.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,SerializeList,The length of the statement  "            object underlyingList = values is IWrappedCollection wrappedCollection ? wrappedCollection.UnderlyingCollection : values; " is 121.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,SerializeList,The length of the statement  "            bool hasWrittenMetadataObject = WriteStartArray(writer' underlyingList' contract' member' collectionContract' containerProperty); " is 129.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,SerializeMultidimensionalArray,The length of the statement  "            bool hasWrittenMetadataObject = WriteStartArray(writer' values' contract' member' collectionContract' containerProperty); " is 121.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,WriteStartArray,The length of the statement  "            bool isReference = ResolveIsReference(contract' member' containerContract' containerProperty) ?? HasFlag(Serializer._preserveReferencesHandling' PreserveReferencesHandling.Arrays); " is 180.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,WriteStartArray,The length of the statement  "            bool includeTypeDetails = ShouldWriteType(TypeNameHandling.Arrays' contract' member' containerContract' containerProperty); " is 123.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,SerializeISerializable,The length of the statement  "                string message = @"Type '{0}' implements ISerializable but cannot be serialized using the ISerializable interface because the current application is not fully trusted and ISerializable can expose secure data." + Environment.NewLine + " is 233.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,SerializeISerializable,The length of the statement  "                                 @"To fix this error either change the environment to be fully trusted' change the application to not deserialize the type' add JsonObjectAttribute to the type or change the JsonSerializer setting ContractResolver to use a new DefaultContractResolver with IgnoreSerializableInterface set to true." + Environment.NewLine; " is 319.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,SerializeDynamic,The length of the statement  "                        if (!CalculatePropertyValues(writer' value' contract' member' property' out JsonContract memberContract' out object memberValue)) " is 129.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,ShouldWriteDynamicProperty,The length of the statement  "                (memberValue == null || MiscellaneousUtils.ValueEquals(memberValue' ReflectionUtils.GetDefaultValue(memberValue.GetType())))) " is 125.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,ShouldWriteType,The length of the statement  "            // instance type and the property's type's contract default type are different (no need to put the type in JSON because the type will be created by default) " is 156.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,ShouldWriteType,The length of the statement  "                    if (containerContract.ItemContract == null || contract.NonNullableUnderlyingType != containerContract.ItemContract.CreatedType) " is 127.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,SerializeDictionary,The length of the statement  "            object underlyingDictionary = values is IWrappedDictionary wrappedDictionary ? wrappedDictionary.UnderlyingDictionary : values; " is 127.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,GetPropertyName,The length of the statement  "                        DateTimeUtils.WriteDateTimeOffsetString(sw' (DateTimeOffset)name' writer.DateFormatHandling' writer.DateFormatString' writer.Culture); " is 134.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,GetPropertyName,The length of the statement  "                        if (primitiveContract.IsEnum && EnumUtils.TryToString(primitiveContract.NonNullableUnderlyingType' name' null' out string enumName)) " is 132.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,ShouldSerialize,The length of the statement  "                TraceWriter.Trace(TraceLevel.Verbose' JsonPosition.FormatMessage(null' writer.Path' "ShouldSerialize result for property '{0}' on {1}: {2}".FormatWith(CultureInfo.InvariantCulture' property.PropertyName' property.DeclaringType' shouldSerialize))' null); " is 253.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,IsSpecified,The length of the statement  "                TraceWriter.Trace(TraceLevel.Verbose' JsonPosition.FormatMessage(null' writer.Path' "IsSpecified result for property '{0}' on {1}: {2}".FormatWith(CultureInfo.InvariantCulture' property.PropertyName' property.DeclaringType' isSpecified))' null); " is 245.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonTypeReflector,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonTypeReflector.cs,GetContainerNamingStrategy,The length of the statement  "                containerAttribute.NamingStrategyInstance = CreateNamingStrategyInstance(containerAttribute.NamingStrategyType' containerAttribute.NamingStrategyParameters); " is 157.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonTypeReflector,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonTypeReflector.cs,GetCreator,The length of the statement  "                            ObjectConstructor<object> parameterizedConstructor = ReflectionDelegateFactory.CreateParameterizedConstructor(parameterizedConstructorInfo); " is 140.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonTypeReflector,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonTypeReflector.cs,GetCreator,The length of the statement  "                            throw new JsonException("No matching parameterized constructor found for '{0}'.".FormatWith(CultureInfo.InvariantCulture' type)); " is 129.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonTypeReflector,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonTypeReflector.cs,GetCreator,The length of the statement  "                        throw new JsonException("No parameterless constructor defined for '{0}'.".FormatWith(CultureInfo.InvariantCulture' type)); " is 122.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonTypeReflector,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonTypeReflector.cs,GetAssociateMetadataTypeFromAttribute,The length of the statement  "                if (string.Equals(attributeType.FullName' "System.ComponentModel.DataAnnotations.MetadataTypeAttribute"' StringComparison.Ordinal)) " is 131.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonTypeReflector,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonTypeReflector.cs,IsNonSerializable,The length of the statement  "            if (provider is FieldInfo fieldInfo && (fieldInfo.Attributes & FieldAttributes.NotSerialized) == FieldAttributes.NotSerialized) " is 127.
Long Statement,Microsoft.IdentityModel.Json.Serialization,JsonTypeReflector,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonTypeReflector.cs,IsSerializable,The length of the statement  "            if (provider is Type type && (type.GetTypeInfo().Attributes & TypeAttributes.Serializable) == TypeAttributes.Serializable) " is 122.
Long Statement,Microsoft.IdentityModel.Json.Serialization,ReflectionValueProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\ReflectionValueProvider.cs,SetValue,The length of the statement  "                throw new JsonSerializationException("Error setting value to '{0}' on '{1}'.".FormatWith(CultureInfo.InvariantCulture' _memberInfo.Name' target.GetType())' ex); " is 160.
Long Statement,Microsoft.IdentityModel.Json.Serialization,ReflectionValueProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\ReflectionValueProvider.cs,GetValue,The length of the statement  "                    throw new InvalidOperationException("Could not create getter for {0}. ByRef return values are not supported.".FormatWith(CultureInfo.InvariantCulture' propertyInfo)); " is 166.
Long Statement,Microsoft.IdentityModel.Json.Serialization,ReflectionValueProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\ReflectionValueProvider.cs,GetValue,The length of the statement  "                throw new JsonSerializationException("Error getting value from '{0}' on '{1}'.".FormatWith(CultureInfo.InvariantCulture' _memberInfo.Name' target.GetType())' ex); " is 162.
Long Statement,Microsoft.IdentityModel.Json.Utilities,AsyncUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\AsyncUtils.cs,WriteAsync,The length of the statement  "            return cancellationToken.IsCancellationRequested ? FromCanceled(cancellationToken) : writer.WriteAsync(value' start' count); " is 124.
Long Statement,Microsoft.IdentityModel.Json.Utilities,AsyncUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\AsyncUtils.cs,ReadAsync,The length of the statement  "            return cancellationToken.IsCancellationRequested ? FromCanceled<int>(cancellationToken) : reader.ReadAsync(buffer' index' count); " is 129.
Long Statement,Microsoft.IdentityModel.Json.Utilities,CollectionWrapper<T>,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\CollectionWrapper.cs,VerifyValueType,The length of the statement  "                throw new ArgumentException("The value '{0}' is not of type '{1}' and cannot be used in this generic collection.".FormatWith(CultureInfo.InvariantCulture' value' typeof(T))' nameof(value)); " is 189.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,IsConvertible,The length of the statement  "                t == typeof(bool) || t == typeof(byte) || t == typeof(char) || t == typeof(DateTime) || t == typeof(decimal) || t == typeof(double) || t == typeof(short) || t == typeof(int) || " is 176.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,IsConvertible,The length of the statement  "                t == typeof(long) || t == typeof(sbyte) || t == typeof(float) || t == typeof(string) || t == typeof(ushort) || t == typeof(uint) || t == typeof(ulong) || t.IsEnum()); " is 166.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,ToBigInteger,The length of the statement  "            throw new InvalidCastException("Cannot convert {0} to BigInteger.".FormatWith(CultureInfo.InvariantCulture' value.GetType())); " is 126.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,FromBigInteger,The length of the statement  "                throw new InvalidOperationException("Can not convert from BigInteger to {0}.".FormatWith(CultureInfo.InvariantCulture' targetType)' ex); " is 136.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,Convert,The length of the statement  "                    throw new Exception("Can not convert null {0} into non-nullable {1}.".FormatWith(CultureInfo.InvariantCulture' initialValue.GetType()' targetType)); " is 148.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,Convert,The length of the statement  "                    throw new ArgumentException("Target type {0} is not a value type or a non-abstract class.".FormatWith(CultureInfo.InvariantCulture' targetType)' nameof(targetType)); " is 165.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,Convert,The length of the statement  "                    throw new InvalidOperationException("Can not convert from {0} to {1}.".FormatWith(CultureInfo.InvariantCulture' initialValue.GetType()' targetType)); " is 149.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,EnsureTypeAssignable,The length of the statement  "            throw new ArgumentException("Could not cast or convert from {0} to {1}.".FormatWith(CultureInfo.InvariantCulture' initialType?.ToString() ?? "{null}"' targetType)); " is 164.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,DecimalTryParse,The length of the statement  "                        if (mantissaDigits < 29 && (mantissaDigits != 28 || !(storeOnly28Digits ?? (storeOnly28Digits = (hi19 > decimalMaxValueHi19 || (hi19 == decimalMaxValueHi19 && (lo10 > decimalMaxValueLo9 || (lo10 == decimalMaxValueLo9 && c > decimalMaxValueLo1))))).GetValueOrDefault()))) " is 270.
Long Statement,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,Parse,The length of the statement  "            if (ParseDate(startIndex) && ParseChar(Lzyyyy_MM_dd + startIndex' 'T') && ParseTimeAndZoneAndWhitespace(Lzyyyy_MM_ddT + startIndex)) " is 132.
Long Statement,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,CreateDateTime,The length of the statement  "            DateTime d = new DateTime(dateTimeParser.Year' dateTimeParser.Month' dateTimeParser.Day' dateTimeParser.Hour' dateTimeParser.Minute' dateTimeParser.Second); " is 156.
Long Statement,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,TryParseDateTimeOffsetExact,The length of the statement  "            if (DateTimeOffset.TryParseExact(text' dateFormatString' culture' DateTimeStyles.RoundtripKind' out DateTimeOffset temp)) " is 121.
Long Statement,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDateTimeOffsetString,The length of the statement  "                int pos = WriteDateTimeString(chars' 0' (format == DateFormatHandling.IsoDateFormat) ? value.DateTime : value.UtcDateTime' value.Offset' DateTimeKind.Local' format); " is 165.
Long Statement,Microsoft.IdentityModel.Json.Utilities,DictionaryWrapper<TKey;TValue>,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DictionaryWrapper.cs,GetEnumerator,The length of the statement  "                return _dictionary.Cast<DictionaryEntry>().Select(de => new KeyValuePair<TKey' TValue>((TKey)de.Key' (TValue)de.Value)).GetEnumerator(); " is 136.
Long Statement,Microsoft.IdentityModel.Json.Utilities,DynamicProxyMetaObject<T>,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DynamicProxyMetaObject.cs,BindSetMember,The length of the statement  "                ? CallMethodReturnLast(nameof(DynamicProxy<T>.TrySetMember)' binder' GetArgs(value)' e => binder.FallbackSetMember(this' value' e)) " is 131.
Long Statement,Microsoft.IdentityModel.Json.Utilities,DynamicProxyMetaObject<T>,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DynamicProxyMetaObject.cs,BindDeleteMember,The length of the statement  "                ? CallMethodNoResult(nameof(DynamicProxy<T>.TryDeleteMember)' binder' NoArgs' e => binder.FallbackDeleteMember(this' e)) " is 120.
Long Statement,Microsoft.IdentityModel.Json.Utilities,DynamicProxyMetaObject<T>,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DynamicProxyMetaObject.cs,BindCreateInstance,The length of the statement  "                ? CallMethodWithResult(nameof(DynamicProxy<T>.TryCreateInstance)' binder' GetArgArray(args)' e => binder.FallbackCreateInstance(this' args' e)) " is 143.
Long Statement,Microsoft.IdentityModel.Json.Utilities,DynamicProxyMetaObject<T>,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DynamicProxyMetaObject.cs,BindInvoke,The length of the statement  "                ? CallMethodWithResult(nameof(DynamicProxy<T>.TryInvoke)' binder' GetArgArray(args)' e => binder.FallbackInvoke(this' args' e)) " is 127.
Long Statement,Microsoft.IdentityModel.Json.Utilities,DynamicProxyMetaObject<T>,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DynamicProxyMetaObject.cs,BindBinaryOperation,The length of the statement  "                ? CallMethodWithResult(nameof(DynamicProxy<T>.TryBinaryOperation)' binder' GetArgs(arg)' e => binder.FallbackBinaryOperation(this' arg' e)) " is 139.
Long Statement,Microsoft.IdentityModel.Json.Utilities,DynamicProxyMetaObject<T>,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DynamicProxyMetaObject.cs,BindUnaryOperation,The length of the statement  "                ? CallMethodWithResult(nameof(DynamicProxy<T>.TryUnaryOperation)' binder' NoArgs' e => binder.FallbackUnaryOperation(this' e)) " is 126.
Long Statement,Microsoft.IdentityModel.Json.Utilities,DynamicProxyMetaObject<T>,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DynamicProxyMetaObject.cs,BindGetIndex,The length of the statement  "                ? CallMethodWithResult(nameof(DynamicProxy<T>.TryGetIndex)' binder' GetArgArray(indexes)' e => binder.FallbackGetIndex(this' indexes' e)) " is 137.
Long Statement,Microsoft.IdentityModel.Json.Utilities,DynamicProxyMetaObject<T>,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DynamicProxyMetaObject.cs,BindSetIndex,The length of the statement  "                ? CallMethodReturnLast(nameof(DynamicProxy<T>.TrySetIndex)' binder' GetArgArray(indexes' value)' e => binder.FallbackSetIndex(this' indexes' value' e)) " is 151.
Long Statement,Microsoft.IdentityModel.Json.Utilities,DynamicProxyMetaObject<T>,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DynamicProxyMetaObject.cs,BindDeleteIndex,The length of the statement  "                ? CallMethodNoResult(nameof(DynamicProxy<T>.TryDeleteIndex)' binder' GetArgArray(indexes)' e => binder.FallbackDeleteIndex(this' indexes' e)) " is 141.
Long Statement,Microsoft.IdentityModel.Json.Utilities,DynamicReflectionDelegateFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DynamicReflectionDelegateFactory.cs,CreateParameterizedConstructor,The length of the statement  "            DynamicMethod dynamicMethod = CreateDynamicMethod(method.ToString()' typeof(object)' new[] { typeof(object[]) }' method.DeclaringType); " is 135.
Long Statement,Microsoft.IdentityModel.Json.Utilities,DynamicReflectionDelegateFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DynamicReflectionDelegateFactory.cs,CreateMethodCall,The length of the statement  "            DynamicMethod dynamicMethod = CreateDynamicMethod(method.ToString()' typeof(object)' new[] { typeof(object)' typeof(object[]) }' method.DeclaringType); " is 151.
Long Statement,Microsoft.IdentityModel.Json.Utilities,DynamicReflectionDelegateFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DynamicReflectionDelegateFactory.cs,CreateDefaultConstructor,The length of the statement  "            DynamicMethod dynamicMethod = CreateDynamicMethod("Create" + type.FullName' typeof(T)' ReflectionUtils.EmptyTypes' type); " is 121.
Long Statement,Microsoft.IdentityModel.Json.Utilities,DynamicReflectionDelegateFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DynamicReflectionDelegateFactory.cs,GenerateCreateDefaultConstructorIL,The length of the statement  "                    type.GetConstructor(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance' null' ReflectionUtils.EmptyTypes' null); " is 130.
Long Statement,Microsoft.IdentityModel.Json.Utilities,DynamicReflectionDelegateFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DynamicReflectionDelegateFactory.cs,CreateGet,The length of the statement  "            DynamicMethod dynamicMethod = CreateDynamicMethod("Get" + propertyInfo.Name' typeof(object)' new[] { typeof(T) }' propertyInfo.DeclaringType); " is 142.
Long Statement,Microsoft.IdentityModel.Json.Utilities,DynamicReflectionDelegateFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DynamicReflectionDelegateFactory.cs,GenerateCreateGetPropertyIL,The length of the statement  "                throw new ArgumentException("Property '{0}' does not have a getter.".FormatWith(CultureInfo.InvariantCulture' propertyInfo.Name)); " is 130.
Long Statement,Microsoft.IdentityModel.Json.Utilities,DynamicReflectionDelegateFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DynamicReflectionDelegateFactory.cs,CreateGet,The length of the statement  "            DynamicMethod dynamicMethod = CreateDynamicMethod("Get" + fieldInfo.Name' typeof(T)' new[] { typeof(object) }' fieldInfo.DeclaringType); " is 136.
Long Statement,Microsoft.IdentityModel.Json.Utilities,DynamicReflectionDelegateFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DynamicReflectionDelegateFactory.cs,CreateSet,The length of the statement  "            DynamicMethod dynamicMethod = CreateDynamicMethod("Set" + fieldInfo.Name' null' new[] { typeof(T)' typeof(object) }' fieldInfo.DeclaringType); " is 142.
Long Statement,Microsoft.IdentityModel.Json.Utilities,DynamicReflectionDelegateFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DynamicReflectionDelegateFactory.cs,CreateSet,The length of the statement  "            DynamicMethod dynamicMethod = CreateDynamicMethod("Set" + propertyInfo.Name' null' new[] { typeof(T)' typeof(object) }' propertyInfo.DeclaringType); " is 148.
Long Statement,Microsoft.IdentityModel.Json.Utilities,BinderWrapper,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DynamicUtils.cs,Init,The length of the statement  "                        throw new InvalidOperationException("Could not resolve type '{0}'. You may need to add a reference to Microsoft.CSharp.dll to work with dynamic types.".FormatWith(CultureInfo.InvariantCulture' BinderTypeName)); " is 210.
Long Statement,Microsoft.IdentityModel.Json.Utilities,BinderWrapper,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DynamicUtils.cs,CreateSharpArgumentInfoArray,The length of the statement  "                    MethodInfo createArgumentInfoMethod = csharpArgumentInfoType.GetMethod("Create"' new[] { csharpArgumentInfoFlags' typeof(string) }); " is 132.
Long Statement,Microsoft.IdentityModel.Json.Utilities,BinderWrapper,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DynamicUtils.cs,CreateMemberCalls,The length of the statement  "                MethodInfo getMemberMethod = binderType.GetMethod("GetMember"' new[] { csharpBinderFlagsType' typeof(string)' typeof(Type)' csharpArgumentInfoTypeEnumerableType }); " is 164.
Long Statement,Microsoft.IdentityModel.Json.Utilities,BinderWrapper,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DynamicUtils.cs,CreateMemberCalls,The length of the statement  "                MethodInfo setMemberMethod = binderType.GetMethod("SetMember"' new[] { csharpBinderFlagsType' typeof(string)' typeof(Type)' csharpArgumentInfoTypeEnumerableType }); " is 164.
Long Statement,Microsoft.IdentityModel.Json.Utilities,EnumUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\EnumUtils.cs,InitializeValuesAndNames,The length of the statement  "                    throw new InvalidOperationException("Enum name '{0}' already exists on enum '{1}'.".FormatWith(CultureInfo.InvariantCulture' resolvedName' enumType.Name)); " is 155.
Long Statement,Microsoft.IdentityModel.Json.Utilities,EnumUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\EnumUtils.cs,ParseEnum,The length of the statement  "                    matchingIndex = MatchName(value' enumNames' resolvedNames' valueIndex' valueSubstringLength' StringComparison.OrdinalIgnoreCase); " is 129.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ExpressionReflectionDelegateFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ExpressionReflectionDelegateFactory.cs,CreateParameterizedConstructor,The length of the statement  "            LambdaExpression lambdaExpression = Expression.Lambda(typeof(ObjectConstructor<object>)' callExpression' argsParameterExpression); " is 130.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ExpressionReflectionDelegateFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ExpressionReflectionDelegateFactory.cs,CreateMethodCall,The length of the statement  "            LambdaExpression lambdaExpression = Expression.Lambda(typeof(MethodCall<T' object>)' callExpression' targetParameterExpression' argsParameterExpression); " is 153.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ExpressionReflectionDelegateFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ExpressionReflectionDelegateFactory.cs,CreateSet,The length of the statement  "            LambdaExpression lambdaExpression = Expression.Lambda(typeof(Action<T' object>)' assignExpression' sourceParameterExpression' valueParameterExpression); " is 152.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ExpressionReflectionDelegateFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ExpressionReflectionDelegateFactory.cs,CreateSet,The length of the statement  "            LambdaExpression lambdaExpression = Expression.Lambda(typeof(Action<T' object>)' setExpression' instanceParameter' valueParameter); " is 131.
Long Statement,Microsoft.IdentityModel.Json.Utilities,FSharpUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\FSharpUtils.cs,EnsureInitialized,The length of the statement  "                        MethodInfo isUnionMethodInfo = GetMethodWithNonPublicFallback(fsharpType' "IsUnion"' BindingFlags.Public | BindingFlags.Static); " is 128.
Long Statement,Microsoft.IdentityModel.Json.Utilities,FSharpUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\FSharpUtils.cs,EnsureInitialized,The length of the statement  "                        MethodInfo getUnionCasesMethodInfo = GetMethodWithNonPublicFallback(fsharpType' "GetUnionCases"' BindingFlags.Public | BindingFlags.Static); " is 140.
Long Statement,Microsoft.IdentityModel.Json.Utilities,FSharpUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\FSharpUtils.cs,EnsureInitialized,The length of the statement  "                        GetUnionCaseInfoName = JsonTypeReflector.ReflectionDelegateFactory.CreateGet<object>(unionCaseInfo.GetProperty("Name")); " is 120.
Long Statement,Microsoft.IdentityModel.Json.Utilities,FSharpUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\FSharpUtils.cs,EnsureInitialized,The length of the statement  "                        GetUnionCaseInfoDeclaringType = JsonTypeReflector.ReflectionDelegateFactory.CreateGet<object>(unionCaseInfo.GetProperty("DeclaringType")); " is 138.
Long Statement,Microsoft.IdentityModel.Json.Utilities,FSharpUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\FSharpUtils.cs,EnsureInitialized,The length of the statement  "                        GetUnionCaseInfoFields = JsonTypeReflector.ReflectionDelegateFactory.CreateMethodCall<object>(unionCaseInfo.GetMethod("GetFields")); " is 132.
Long Statement,Microsoft.IdentityModel.Json.Utilities,FSharpUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\FSharpUtils.cs,CreateFSharpFuncCall,The length of the statement  "            MethodInfo innerMethodInfo = GetMethodWithNonPublicFallback(type' methodName' BindingFlags.Public | BindingFlags.Static); " is 121.
Long Statement,Microsoft.IdentityModel.Json.Utilities,FSharpUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\FSharpUtils.cs,CreateFSharpFuncCall,The length of the statement  "            MethodCall<object' object> call = JsonTypeReflector.ReflectionDelegateFactory.CreateMethodCall<object>(innerMethodInfo); " is 120.
Long Statement,Microsoft.IdentityModel.Json.Utilities,FSharpUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\FSharpUtils.cs,BuildMapCreator,The length of the statement  "            ObjectConstructor<object> ctorDelegate = JsonTypeReflector.ReflectionDelegateFactory.CreateParameterizedConstructor(ctor); " is 122.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ImmutableCollectionsUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ImmutableCollectionsUtils.cs,TryBuildImmutableForArrayContract,The length of the statement  "                ImmutableCollectionTypeInfo definition = ArrayContractImmutableCollectionDefinitions.FirstOrDefault(d => d.ContractTypeName == name); " is 133.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ImmutableCollectionsUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ImmutableCollectionsUtils.cs,TryBuildImmutableForArrayContract,The length of the statement  "                        MethodInfo mb = builderTypeDefinition.GetMethods().FirstOrDefault(m => m.Name == "CreateRange" && m.GetParameters().Length == 1); " is 129.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ImmutableCollectionsUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ImmutableCollectionsUtils.cs,TryBuildImmutableForDictionaryContract,The length of the statement  "                ImmutableCollectionTypeInfo definition = DictionaryContractImmutableCollectionDefinitions.FirstOrDefault(d => d.ContractTypeName == name); " is 138.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ImmutableCollectionsUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ImmutableCollectionsUtils.cs,TryBuildImmutableForDictionaryContract,The length of the statement  "                            return m.Name == "CreateRange" && parameters.Length == 1 && parameters[0].ParameterType.IsGenericType() && parameters[0].ParameterType.GetGenericTypeDefinition() == typeof(IEnumerable<>); " is 187.
Long Statement,Microsoft.IdentityModel.Json.Utilities,JavaScriptUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptString,The length of the statement  "                                    Debug.Assert(writeBuffer != null' "Write buffer should never be null because it is set when the escaped unicode text is encountered."); " is 135.
Long Statement,Microsoft.IdentityModel.Json.Utilities,JavaScriptUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\JavaScriptUtils.cs,ToEscapedJavaScriptString,The length of the statement  "                WriteEscapedJavaScriptString(w' value' delimiter' appendDelimiters' charEscapeFlags' stringEscapeHandling' null' ref buffer); " is 125.
Long Statement,Microsoft.IdentityModel.Json.Utilities,JavaScriptUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptStringAsync,The length of the statement  "                return WriteEscapedJavaScriptStringWithDelimitersAsync(writer' s' delimiter' charEscapeFlags' stringEscapeHandling' client' writeBuffer' cancellationToken); " is 156.
Long Statement,Microsoft.IdentityModel.Json.Utilities,JavaScriptUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptStringAsync,The length of the statement  "            return WriteEscapedJavaScriptStringWithoutDelimitersAsync(writer' s' charEscapeFlags' stringEscapeHandling' client' writeBuffer' cancellationToken); " is 148.
Long Statement,Microsoft.IdentityModel.Json.Utilities,JavaScriptUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptStringWithDelimitersAsync,The length of the statement  "                return WriteEscapedJavaScriptStringWithDelimitersAsync(task' writer' s' delimiter' charEscapeFlags' stringEscapeHandling' client' writeBuffer' cancellationToken); " is 162.
Long Statement,Microsoft.IdentityModel.Json.Utilities,JavaScriptUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptStringWithDelimitersAsync,The length of the statement  "                task = WriteEscapedJavaScriptStringWithoutDelimitersAsync(writer' s' charEscapeFlags' stringEscapeHandling' client' writeBuffer' cancellationToken); " is 148.
Long Statement,Microsoft.IdentityModel.Json.Utilities,JavaScriptUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptStringWithDelimitersAsync,The length of the statement  "                await WriteEscapedJavaScriptStringWithoutDelimitersAsync(writer' s' charEscapeFlags' stringEscapeHandling' client' writeBuffer' cancellationToken).ConfigureAwait(false); " is 169.
Long Statement,Microsoft.IdentityModel.Json.Utilities,JavaScriptUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\JavaScriptUtils.cs,WriteEscapedJavaScriptStringWithoutDelimitersAsync,The length of the statement  "                : WriteDefinitelyEscapedJavaScriptStringWithoutDelimitersAsync(writer' s' i' charEscapeFlags' stringEscapeHandling' client' writeBuffer' cancellationToken); " is 156.
Long Statement,Microsoft.IdentityModel.Json.Utilities,MiscellaneousUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\MiscellaneousUtils.cs,ValueEquals,The length of the statement  "                    return MathUtils.ApproxEquals(Convert.ToDouble(objA' CultureInfo.CurrentCulture)' Convert.ToDouble(objB' CultureInfo.CurrentCulture)); " is 134.
Long Statement,Microsoft.IdentityModel.Json.Utilities,MiscellaneousUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\MiscellaneousUtils.cs,CreateArgumentOutOfRangeException,The length of the statement  "            string newMessage = message + Environment.NewLine + @"Actual value was {0}.".FormatWith(CultureInfo.InvariantCulture' actualValue); " is 131.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ReflectionDelegateFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ReflectionDelegateFactory.cs,CreateGet,The length of the statement  "                    throw new InvalidOperationException("Could not create getter for {0}. ByRef return values are not supported.".FormatWith(CultureInfo.InvariantCulture' propertyInfo)); " is 166.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ReflectionObject,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ReflectionObject.cs,Create,The length of the statement  "                    throw new ArgumentException("Expected a single member with the name '{0}'.".FormatWith(CultureInfo.InvariantCulture' memberName)); " is 130.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ReflectionObject,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ReflectionObject.cs,Create,The length of the statement  "                        throw new ArgumentException("Unexpected member type '{0}' for member '{1}'.".FormatWith(CultureInfo.InvariantCulture' member.MemberType()' member.Name)); " is 153.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ReflectionUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ReflectionUtils.cs,ImplementsGenericDefinition,The length of the statement  "                throw new ArgumentNullException("'{0}' is not a generic interface definition.".FormatWith(CultureInfo.InvariantCulture' genericInterfaceDefinition)); " is 149.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ReflectionUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ReflectionUtils.cs,InheritsGenericDefinition,The length of the statement  "                throw new ArgumentNullException("'{0}' is not a generic class definition.".FormatWith(CultureInfo.InvariantCulture' genericClassDefinition)); " is 141.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ReflectionUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ReflectionUtils.cs,GetMemberUnderlyingType,The length of the statement  "                    throw new ArgumentException("MemberInfo must be of type FieldInfo' PropertyInfo' EventInfo or MethodInfo"' nameof(member)); " is 123.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ReflectionUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ReflectionUtils.cs,GetMemberValue,The length of the statement  "                        throw new ArgumentException("MemberInfo '{0}' has index parameters".FormatWith(CultureInfo.InvariantCulture' member.Name)' e); " is 126.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ReflectionUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ReflectionUtils.cs,GetMemberValue,The length of the statement  "                    throw new ArgumentException("MemberInfo '{0}' is not of type FieldInfo or PropertyInfo".FormatWith(CultureInfo.InvariantCulture' member.Name)' nameof(member)); " is 159.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ReflectionUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ReflectionUtils.cs,SetMemberValue,The length of the statement  "                    throw new ArgumentException("MemberInfo '{0}' must be of type FieldInfo or PropertyInfo".FormatWith(CultureInfo.InvariantCulture' member.Name)' nameof(member)); " is 160.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ReflectionUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ReflectionUtils.cs,GetFieldsAndProperties,The length of the statement  "            // http://social.msdn.microsoft.com/Forums/en-US/b5abbfee-e292-4a64-8907-4e3f0fb90cd9/reflection-overriden-abstract-generic-properties?forum=netfxbcl " is 149.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ReflectionUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ReflectionUtils.cs,GetAttributes,The length of the statement  "                    object[] array = attributeType != null ? t.GetCustomAttributes(attributeType' inherit) : t.GetCustomAttributes(inherit); " is 120.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ReflectionUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ReflectionUtils.cs,GetAttributes,The length of the statement  "                    return (attributeType != null) ? Attribute.GetCustomAttributes(mi' attributeType' inherit) : Attribute.GetCustomAttributes(mi' inherit); " is 136.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ReflectionUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ReflectionUtils.cs,GetAttributes,The length of the statement  "                    return (attributeType != null) ? Attribute.GetCustomAttributes(m' attributeType' inherit) : Attribute.GetCustomAttributes(m' inherit); " is 134.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ReflectionUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ReflectionUtils.cs,GetAttributes,The length of the statement  "                    return (attributeType != null) ? Attribute.GetCustomAttributes(p' attributeType' inherit) : Attribute.GetCustomAttributes(p' inherit); " is 134.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ReflectionUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ReflectionUtils.cs,GetAttributes,The length of the statement  "                    object[] result = (attributeType != null) ? customAttributeProvider.GetCustomAttributes(attributeType' inherit) : customAttributeProvider.GetCustomAttributes(inherit); " is 167.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ReflectionUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ReflectionUtils.cs,SplitFullyQualifiedTypeName,The length of the statement  "                assemblyName = fullyQualifiedTypeName.Trim(assemblyDelimiterIndex.GetValueOrDefault() + 1' fullyQualifiedTypeName.Length - assemblyDelimiterIndex.GetValueOrDefault() - 1); " is 171.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ReflectionUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ReflectionUtils.cs,GetAssemblyDelimiterIndex,The length of the statement  "            // e.g. System.Collections.Generic.Dictionary`2[[System.String' mscorlib'Version=2.0.0.0' Culture=neutral' PublicKeyToken=b77a5c561934e089]'[System.String' mscorlib' Version=2.0.0.0' Culture=neutral' PublicKeyToken=b77a5c561934e089]]' mscorlib' Version=2.0.0.0' Culture=neutral' PublicKeyToken=b77a5c561934e089 " is 310.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ReflectionUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ReflectionUtils.cs,GetMemberInfoFromType,The length of the statement  "            const BindingFlags bindingAttr = BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic; " is 124.
Long Statement,Microsoft.IdentityModel.Json.Utilities,ReflectionUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ReflectionUtils.cs,GetChildPrivateProperties,The length of the statement  "                        Type subTypePropertyDeclaringType = subTypeProperty.GetBaseDefinition()?.DeclaringType ?? subTypeProperty.DeclaringType; " is 120.
Long Statement,Microsoft.IdentityModel.Json.Utilities,StringUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\StringUtils.cs,ForgivingCaseSensitiveFind,The length of the statement  "            IEnumerable<TSource> caseInsensitiveResults = source.Where(s => string.Equals(valueSelector(s)' testValue' StringComparison.OrdinalIgnoreCase)); " is 144.
Long Statement,Microsoft.IdentityModel.Json.Utilities,StringUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\StringUtils.cs,ForgivingCaseSensitiveFind,The length of the statement  "                IEnumerable<TSource> caseSensitiveResults = source.Where(s => string.Equals(valueSelector(s)' testValue' StringComparison.Ordinal)); " is 132.
Complex Conditional,Microsoft.IdentityModel.Tokens,JsonWebKeySet,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\JsonWebKeySet.cs,GetSigningKeys,The conditional expression  "(webKey.X5c == null || webKey.X5c.Count == 0) && (string.IsNullOrEmpty(webKey.E) && string.IsNullOrEmpty(webKey.N))"  is complex.
Complex Conditional,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The conditional expression  "((a == null) || (b == null))              || (a.Length < length || b.Length < length)"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json,JsonConvert,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonConvert.cs,EnsureDecimalPlace,The conditional expression  "double.IsNaN(value) || double.IsInfinity(value) || text.IndexOf('.') != -1 || text.IndexOf('E') != -1 || text.IndexOf('e') != -1"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json,JsonSerializer,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonSerializer.cs,ResetReader,The conditional expression  "reader is JsonTextReader textReader && textReader.PropertyNameTable != null &&                  _contractResolver is DefaultContractResolver resolver && textReader.PropertyNameTable == resolver.GetNameTable()"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadNumberCharIntoBuffer,The conditional expression  "char.IsWhiteSpace(currentChar) || currentChar == ''' || currentChar == '}' || currentChar == ']' || currentChar == ')' || currentChar == '/'"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json,JsonValidatingReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonValidatingReader.cs,ProcessValue,The conditional expression  "currentSchema != null                          && currentSchema.PositionalItemsValidation                          && !currentSchema.AllowAdditionalItems                          && (currentSchema.Items == null || _currentScope.ArrayItemCount - 1 >= currentSchema.Items.Count)"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json,JsonWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonWriter.Async.cs,AutoComplete,The conditional expression  "(_currentState == State.Object || _currentState == State.Array || _currentState == State.Constructor) && tokenBeingWritten != JsonToken.Comment"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json,JsonWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonWriter.Async.cs,AutoComplete,The conditional expression  "(_currentState == State.Array || _currentState == State.ArrayStart || _currentState == State.Constructor || _currentState == State.ConstructorStart)                      || (tokenBeingWritten == JsonToken.PropertyName && _currentState != State.Start)"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json.Converters,XmlNodeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,ReadJson,The conditional expression  "objectType != typeof(XContainer)                      && objectType != typeof(XDocument)                      && objectType != typeof(XElement)                      && objectType != typeof(XNode)                      && objectType != typeof(XObject)"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json.Linq,JContainer,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JContainer.Async.cs,EnsureParentToken,The conditional expression  "item.Parent != null || item == this || (item.HasValues && Root == item)"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json.Linq,JTokenWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JTokenWriter.Async.cs,WriteToken,The conditional expression  "reader is JTokenReader tokenReader && writeChildren && writeDateConstructorAsDate && writeComments"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json.Linq,JValue,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JValue.Async.cs,Compare,The conditional expression  "objA is ulong || objB is ulong || objA is decimal || objB is decimal"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json.Linq,JValue,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JValue.Async.cs,Compare,The conditional expression  "objA is float || objB is float || objA is double || objB is double"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json.Linq,JValue,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JValue.Async.cs,Compare,The conditional expression  "objA is ulong || objB is ulong || objA is decimal || objB is decimal"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json.Linq,JValue,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JValue.Async.cs,Operation,The conditional expression  "objA is ulong || objB is ulong || objA is decimal || objB is decimal"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json.Linq,JValue,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JValue.Async.cs,Operation,The conditional expression  "objA is float || objB is float || objA is double || objB is double"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json.Linq,JValue,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JValue.Async.cs,Operation,The conditional expression  "objA is int || objA is uint || objA is long || objA is short || objA is ushort || objA is sbyte || objA is byte ||                           objB is int || objB is uint || objB is long || objB is short || objB is ushort || objB is sbyte || objB is byte"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json.Linq,JValue,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JValue.Async.cs,GetValueType,The conditional expression  "value is long || value is int || value is short || value is sbyte                       || value is ulong || value is uint || value is ushort || value is byte"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json.Linq.JsonPath,JPath,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JsonPath\JPath.cs,ParsePath,The conditional expression  "query && (currentChar == '=' || currentChar == '<' || currentChar == '!' || currentChar == '>' || currentChar == '|' || currentChar == '&')"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json.Linq.JsonPath,BooleanQueryExpression,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JsonPath\QueryExpression.cs,EqualsWithStringCoercion,The conditional expression  "(value.Type == JTokenType.Integer && queryValue.Type == JTokenType.Float)                  || (value.Type == JTokenType.Float && queryValue.Type == JTokenType.Integer)"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json.Linq.JsonPath,BooleanQueryExpression,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JsonPath\QueryExpression.cs,EqualsWithStrictMatch,The conditional expression  "(value.Type == JTokenType.Integer && queryValue.Type == JTokenType.Float)                  || (value.Type == JTokenType.Float && queryValue.Type == JTokenType.Integer)"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,IsValidCallback,The conditional expression  "parameters == null || parameters.Length != 2 || parameters[0].ParameterType != typeof(StreamingContext) || parameters[1].ParameterType != typeof(ErrorContext)"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CalculatePropertyDetails,The conditional expression  "(objectCreationHandling != ObjectCreationHandling.Replace)                  && (tokenType == JsonToken.StartArray || tokenType == JsonToken.StartObject || propertyConverter != null)                  && property.Readable"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CalculatePropertyDetails,The conditional expression  "HasFlag(property.DefaultValueHandling.GetValueOrDefault(Serializer._defaultValueHandling)' DefaultValueHandling.Ignore)                  && !HasFlag(property.DefaultValueHandling.GetValueOrDefault(Serializer._defaultValueHandling)' DefaultValueHandling.Populate)                  && JsonTokenUtils.IsPrimitiveToken(tokenType)                  && MiscellaneousUtils.ValueEquals(reader.Value' property.GetResolvedDefaultValue())"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateObjectUsingCreatorWithParameters,The conditional expression  "context.Used ||                      context.Property == null ||                      context.Property.Ignored ||                      context.Presence == PropertyPresence.None"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateNewObject,The conditional expression  "objectContract.DefaultCreator != null &&                       (!objectContract.DefaultCreatorNonPublic || Serializer._constructorHandling == ConstructorHandling.AllowNonPublicDefaultConstructor || objectContract.ParameterizedCreator == null)"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,CalculatePropertyValues,The conditional expression  "!property.Ignored && property.Readable && ShouldSerialize(writer' property' value) && IsSpecified(writer' property' value)"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,WriteObjectStart,The conditional expression  "isReference && (member == null || member.Writable || HasCreatorParameter(collectionContract' member))"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json.Serialization,JsonTypeReflector,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonTypeReflector.cs,CanTypeDescriptorConvertString,The conditional expression  "!string.Equals(converterType.FullName' "System.ComponentModel.ComponentConverter"' StringComparison.Ordinal)                      && !string.Equals(converterType.FullName' "System.ComponentModel.ReferenceConverter"' StringComparison.Ordinal)                      && !string.Equals(converterType.FullName' "System.Windows.Forms.Design.DataSourceConverter"' StringComparison.Ordinal)                      && converterType != typeof(TypeConverter)"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json.Utilities,CollectionWrapper<T>,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\CollectionWrapper.cs,IsCompatibleObject,The conditional expression  "!(value is T) && (value != null || (typeof(T).IsValueType() && !ReflectionUtils.IsNullableType(typeof(T))))"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,DecimalTryParse,The conditional expression  "mantissaDigits < 29 && (mantissaDigits != 28 || !(storeOnly28Digits ?? (storeOnly28Digits = (hi19 > decimalMaxValueHi19 || (hi19 == decimalMaxValueHi19 && (lo10 > decimalMaxValueLo9 || (lo10 == decimalMaxValueLo9 && c > decimalMaxValueLo1))))).GetValueOrDefault()))"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,ParseTime,The conditional expression  "!(Parse2Digit(start' out Hour)                    && Hour <= 24                    && ParseChar(start + LzHH' ':')                    && Parse2Digit(start + LzHH_' out Minute)                    && Minute < 60                    && ParseChar(start + LzHH_mm' ':')                    && Parse2Digit(start + LzHH_mm_' out Second)                    && Second < 60                    && (Hour != 24 || (Minute == 0 && Second == 0)))"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,Parse4Digit,The conditional expression  "0 <= digit1 && digit1 < 10                      && 0 <= digit2 && digit2 < 10                      && 0 <= digit3 && digit3 < 10                      && 0 <= digit4 && digit4 < 10"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,Parse2Digit,The conditional expression  "0 <= digit1 && digit1 < 10                      && 0 <= digit2 && digit2 < 10"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,TryParseDateTime,The conditional expression  "s.Length >= 19 && s.Length <= 40 && char.IsDigit(s[i]) && s[i + 10] == 'T'"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,TryParseDateTime,The conditional expression  "s.Length >= 19 && s.Length <= 40 && char.IsDigit(s[0]) && s[10] == 'T'"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,TryParseDateTimeOffset,The conditional expression  "s.Length >= 19 && s.Length <= 40 && char.IsDigit(s[i]) && s[i + 10] == 'T'"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,TryParseDateTimeOffset,The conditional expression  "s.Length >= 19 && s.Length <= 40 && char.IsDigit(s[0]) && s[10] == 'T'"  is complex.
Complex Conditional,Microsoft.IdentityModel.Json.Utilities,MiscellaneousUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\MiscellaneousUtils.cs,ValueEquals,The conditional expression  "(objA is double || objA is float || objA is decimal) && (objB is double || objB is float || objB is decimal)"  is complex.
Virtual Method Call from Constructor,Microsoft.IdentityModel.Tokens,AsymmetricSignatureProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\AsymmetricSignatureProvider.cs,AsymmetricSignatureProvider,The constructor "AsymmetricSignatureProvider" calls a virtual method "IsSupportedAlgorithm".
Virtual Method Call from Constructor,Microsoft.IdentityModel.Tokens,AsymmetricSignatureProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\AsymmetricSignatureProvider.cs,AsymmetricSignatureProvider,The constructor "AsymmetricSignatureProvider" calls a virtual method "ValidateAsymmetricSecurityKeySize".
Virtual Method Call from Constructor,Microsoft.IdentityModel.Tokens,AuthenticatedEncryptionProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\AuthenticatedEncryptionProvider.cs,AuthenticatedEncryptionProvider,The constructor "AuthenticatedEncryptionProvider" calls a virtual method "IsSupportedAlgorithm".
Virtual Method Call from Constructor,Microsoft.IdentityModel.Tokens,AuthenticatedEncryptionProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\AuthenticatedEncryptionProvider.cs,AuthenticatedEncryptionProvider,The constructor "AuthenticatedEncryptionProvider" calls a virtual method "ValidateKeySize".
Virtual Method Call from Constructor,Microsoft.IdentityModel.Tokens,AuthenticatedEncryptionProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\AuthenticatedEncryptionProvider.cs,AuthenticatedEncryptionProvider,The constructor "AuthenticatedEncryptionProvider" calls a virtual method "CreateForSigning".
Virtual Method Call from Constructor,Microsoft.IdentityModel.Tokens,RsaKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\RsaKeyWrapProvider.cs,RsaKeyWrapProvider,The constructor "RsaKeyWrapProvider" calls a virtual method "IsSupportedAlgorithm".
Virtual Method Call from Constructor,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,SymmetricKeyWrapProvider,The constructor "SymmetricKeyWrapProvider" calls a virtual method "IsSupportedAlgorithm".
Virtual Method Call from Constructor,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,SymmetricKeyWrapProvider,The constructor "SymmetricKeyWrapProvider" calls a virtual method "GetSymmetricAlgorithm".
Virtual Method Call from Constructor,Microsoft.IdentityModel.Tokens,SymmetricSignatureProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\SymmetricSignatureProvider.cs,SymmetricSignatureProvider,The constructor "SymmetricSignatureProvider" calls a virtual method "IsSupportedAlgorithm".
Virtual Method Call from Constructor,Microsoft.IdentityModel.Tokens,TokenValidationParameters,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\TokenValidationParameters.cs,TokenValidationParameters,The constructor "TokenValidationParameters" calls a virtual method "Clone".
Virtual Method Call from Constructor,Microsoft.IdentityModel.Json.Linq,JArray,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JArray.Async.cs,JArray,The constructor "JArray" calls a virtual method "Add".
Virtual Method Call from Constructor,Microsoft.IdentityModel.Json.Linq,JConstructor,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JConstructor.Async.cs,JConstructor,The constructor "JConstructor" calls a virtual method "Add".
Virtual Method Call from Constructor,Microsoft.IdentityModel.Json.Linq,JObject,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JObject.Async.cs,JObject,The constructor "JObject" calls a virtual method "Add".
Empty Catch Block,Microsoft.IdentityModel.Json.Utilities,EnumUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\EnumUtils.cs,ParseEnum,The method has an empty catch block.
Magic Number,Microsoft.IdentityModel.Tokens,AsymmetricAdapter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\AsymmetricAdapter.cs,GetLightUpHashAlgorithmName,The following statement contains a magic number: HashAlgorithm.HashSize == 256
Magic Number,Microsoft.IdentityModel.Tokens,AsymmetricAdapter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\AsymmetricAdapter.cs,GetLightUpHashAlgorithmName,The following statement contains a magic number: HashAlgorithm.HashSize == 384
Magic Number,Microsoft.IdentityModel.Tokens,AsymmetricAdapter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\AsymmetricAdapter.cs,GetLightUpHashAlgorithmName,The following statement contains a magic number: HashAlgorithm.HashSize == 512
Magic Number,Microsoft.IdentityModel.Tokens,Base64UrlEncoder,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Base64UrlEncoder.cs,DecodeBytes,The following statement contains a magic number: switch (str.Length % 4)              {                  case 0:                      // No pad chars in this case                      break;                  case 2:                      // Two pad chars                      str += doubleBase64PadCharacter;                      break;                  case 3:                      // One pad char                      str += base64PadCharacter;                      break;                  default:                      throw LogHelper.LogExceptionMessage(new FormatException(LogHelper.FormatInvariant(LogMessages.IDX10400' str)));              }
Magic Number,Microsoft.IdentityModel.Tokens,Base64UrlEncoder,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Base64UrlEncoder.cs,DecodeBytes,The following statement contains a magic number: switch (str.Length % 4)              {                  case 0:                      // No pad chars in this case                      break;                  case 2:                      // Two pad chars                      str += doubleBase64PadCharacter;                      break;                  case 3:                      // One pad char                      str += base64PadCharacter;                      break;                  default:                      throw LogHelper.LogExceptionMessage(new FormatException(LogHelper.FormatInvariant(LogMessages.IDX10400' str)));              }
Magic Number,Microsoft.IdentityModel.Tokens,Base64UrlEncoder,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Base64UrlEncoder.cs,DecodeBytes,The following statement contains a magic number: switch (str.Length % 4)              {                  case 0:                      // No pad chars in this case                      break;                  case 2:                      // Two pad chars                      str += doubleBase64PadCharacter;                      break;                  case 3:                      // One pad char                      str += base64PadCharacter;                      break;                  default:                      throw LogHelper.LogExceptionMessage(new FormatException(LogHelper.FormatInvariant(LogMessages.IDX10400' str)));              }
Magic Number,Microsoft.IdentityModel.Tokens,ECDsaAdapter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\ECDsaAdapter.cs,CreateECDsaUsingCNGKey,The following statement contains a magic number: keyBlob = new byte[3 * cbKey + 2 * Marshal.SizeOf(typeof(uint))];
Magic Number,Microsoft.IdentityModel.Tokens,ECDsaAdapter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\ECDsaAdapter.cs,CreateECDsaUsingCNGKey,The following statement contains a magic number: keyBlob = new byte[3 * cbKey + 2 * Marshal.SizeOf(typeof(uint))];
Magic Number,Microsoft.IdentityModel.Tokens,ECDsaAdapter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\ECDsaAdapter.cs,CreateECDsaUsingCNGKey,The following statement contains a magic number: Marshal.WriteInt64(keyBlobPtr' 4' cbKey);
Magic Number,Microsoft.IdentityModel.Tokens,ECDsaAdapter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\ECDsaAdapter.cs,CreateECDsaUsingCNGKey,The following statement contains a magic number: int index = 8;
Magic Number,Microsoft.IdentityModel.Tokens,ECDsaAdapter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\ECDsaAdapter.cs,GetKeyByteCount,The following statement contains a magic number: switch (curveId)              {                  case JsonWebKeyECTypes.P256:                      keyByteCount = 32;                      break;                  case JsonWebKeyECTypes.P384:                      keyByteCount = 48;                      break;                  case JsonWebKeyECTypes.P512: // treat 512 as 521. 512 doesn't exist' but we released with "512" instead of "521"' so don't break now.                  case JsonWebKeyECTypes.P521:                      keyByteCount = 66;                      break;                  default:                      throw LogHelper.LogExceptionMessage(new ArgumentException(LogHelper.FormatInvariant(LogMessages.IDX10645' curveId)));              }
Magic Number,Microsoft.IdentityModel.Tokens,ECDsaAdapter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\ECDsaAdapter.cs,GetKeyByteCount,The following statement contains a magic number: switch (curveId)              {                  case JsonWebKeyECTypes.P256:                      keyByteCount = 32;                      break;                  case JsonWebKeyECTypes.P384:                      keyByteCount = 48;                      break;                  case JsonWebKeyECTypes.P512: // treat 512 as 521. 512 doesn't exist' but we released with "512" instead of "521"' so don't break now.                  case JsonWebKeyECTypes.P521:                      keyByteCount = 66;                      break;                  default:                      throw LogHelper.LogExceptionMessage(new ArgumentException(LogHelper.FormatInvariant(LogMessages.IDX10645' curveId)));              }
Magic Number,Microsoft.IdentityModel.Tokens,ECDsaAdapter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\ECDsaAdapter.cs,GetKeyByteCount,The following statement contains a magic number: switch (curveId)              {                  case JsonWebKeyECTypes.P256:                      keyByteCount = 32;                      break;                  case JsonWebKeyECTypes.P384:                      keyByteCount = 48;                      break;                  case JsonWebKeyECTypes.P512: // treat 512 as 521. 512 doesn't exist' but we released with "512" instead of "521"' so don't break now.                  case JsonWebKeyECTypes.P521:                      keyByteCount = 66;                      break;                  default:                      throw LogHelper.LogExceptionMessage(new ArgumentException(LogHelper.FormatInvariant(LogMessages.IDX10645' curveId)));              }
Magic Number,Microsoft.IdentityModel.Tokens,ECDsaAdapter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\ECDsaAdapter.cs,GetKeySize,The following statement contains a magic number: switch (curveId)              {                  case JsonWebKeyECTypes.P256:                      keySize = 256;                      break;                  case JsonWebKeyECTypes.P384:                      keySize = 384;                      break;                  case JsonWebKeyECTypes.P512: // treat 512 as 521. 512 doesn't exist' but we released with "512" instead of "521"' so don't break now.                  case JsonWebKeyECTypes.P521:                      keySize = 521;                      break;                  default:                      throw LogHelper.LogExceptionMessage(new ArgumentException(LogHelper.FormatInvariant(LogMessages.IDX10645' curveId)));              }
Magic Number,Microsoft.IdentityModel.Tokens,ECDsaAdapter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\ECDsaAdapter.cs,GetKeySize,The following statement contains a magic number: switch (curveId)              {                  case JsonWebKeyECTypes.P256:                      keySize = 256;                      break;                  case JsonWebKeyECTypes.P384:                      keySize = 384;                      break;                  case JsonWebKeyECTypes.P512: // treat 512 as 521. 512 doesn't exist' but we released with "512" instead of "521"' so don't break now.                  case JsonWebKeyECTypes.P521:                      keySize = 521;                      break;                  default:                      throw LogHelper.LogExceptionMessage(new ArgumentException(LogHelper.FormatInvariant(LogMessages.IDX10645' curveId)));              }
Magic Number,Microsoft.IdentityModel.Tokens,ECDsaAdapter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\ECDsaAdapter.cs,GetKeySize,The following statement contains a magic number: switch (curveId)              {                  case JsonWebKeyECTypes.P256:                      keySize = 256;                      break;                  case JsonWebKeyECTypes.P384:                      keySize = 384;                      break;                  case JsonWebKeyECTypes.P512: // treat 512 as 521. 512 doesn't exist' but we released with "512" instead of "521"' so don't break now.                  case JsonWebKeyECTypes.P521:                      keySize = 521;                      break;                  default:                      throw LogHelper.LogExceptionMessage(new ArgumentException(LogHelper.FormatInvariant(LogMessages.IDX10645' curveId)));              }
Magic Number,Microsoft.IdentityModel.Tokens,AuthenticatedEncryptionProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\AuthenticatedEncryptionProvider.cs,Encrypt,The following statement contains a magic number: byte[] al = Utility.ConvertToBigEndian(authenticatedData.Length * 8);
Magic Number,Microsoft.IdentityModel.Tokens,AuthenticatedEncryptionProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\AuthenticatedEncryptionProvider.cs,Decrypt,The following statement contains a magic number: byte[] al = Utility.ConvertToBigEndian(authenticatedData.Length * 8);
Magic Number,Microsoft.IdentityModel.Tokens,AuthenticatedEncryptionProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\AuthenticatedEncryptionProvider.cs,GetAlgorithmParameters,The following statement contains a magic number: keyLength = 32;
Magic Number,Microsoft.IdentityModel.Tokens,AuthenticatedEncryptionProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\AuthenticatedEncryptionProvider.cs,ValidateKeySize,The following statement contains a magic number: throw LogHelper.LogExceptionMessage(new ArgumentOutOfRangeException("key.KeySize"' LogHelper.FormatInvariant(LogMessages.IDX10653' SecurityAlgorithms.Aes128CbcHmacSha256' 256' key.KeyId' key.KeySize)));
Magic Number,Microsoft.IdentityModel.Tokens,AuthenticatedEncryptionProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\AuthenticatedEncryptionProvider.cs,ValidateKeySize,The following statement contains a magic number: key.KeySize < 256
Magic Number,Microsoft.IdentityModel.Tokens,AuthenticatedEncryptionProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\AuthenticatedEncryptionProvider.cs,ValidateKeySize,The following statement contains a magic number: throw LogHelper.LogExceptionMessage(new ArgumentOutOfRangeException("key.KeySize"' LogHelper.FormatInvariant(LogMessages.IDX10653' SecurityAlgorithms.Aes192CbcHmacSha384' 384' key.KeyId' key.KeySize)));
Magic Number,Microsoft.IdentityModel.Tokens,AuthenticatedEncryptionProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\AuthenticatedEncryptionProvider.cs,ValidateKeySize,The following statement contains a magic number: key.KeySize < 384
Magic Number,Microsoft.IdentityModel.Tokens,AuthenticatedEncryptionProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\AuthenticatedEncryptionProvider.cs,ValidateKeySize,The following statement contains a magic number: throw LogHelper.LogExceptionMessage(new ArgumentOutOfRangeException("key.KeySize"' LogHelper.FormatInvariant(LogMessages.IDX10653' SecurityAlgorithms.Aes256CbcHmacSha512' 512' key.KeyId' key.KeySize)));
Magic Number,Microsoft.IdentityModel.Tokens,AuthenticatedEncryptionProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\AuthenticatedEncryptionProvider.cs,ValidateKeySize,The following statement contains a magic number: key.KeySize < 512
Magic Number,Microsoft.IdentityModel.Tokens,RsaKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\RsaKeyWrapProvider.cs,IsSupportedAlgorithm,The following statement contains a magic number: key.KeySize < 2048
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,GetSymmetricAlgorithm,The following statement contains a magic number: symmetricAlgorithm.KeySize = keyBytes.Length * 8;
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,GetSymmetricAlgorithm,The following statement contains a magic number: var aesIv = new byte[symmetricAlgorithm.BlockSize >> 3];
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,UnwrapKey,The following statement contains a magic number: throw LogHelper.LogExceptionMessage(new ArgumentException(LogHelper.FormatInvariant(LogMessages.IDX10664' keyBytes.Length << 3)' nameof(keyBytes)));
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,UnwrapKey,The following statement contains a magic number: keyBytes.Length % 8 != 0
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,UnwrapKeyPrivate,The following statement contains a magic number: var n = (inputCount - _blockSizeInBytes) >> 3;
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,UnwrapKeyPrivate,The following statement contains a magic number: byte[] r = new byte[n << 3];
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,UnwrapKeyPrivate,The following statement contains a magic number: byte[] block = new byte[16];
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,UnwrapKeyPrivate,The following statement contains a magic number: Array.Copy(r' (i - 1) << 3' block' _blockSizeInBytes' _blockSizeInBytes);
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,UnwrapKeyPrivate,The following statement contains a magic number: var b = _symmetricAlgorithmDecryptor.TransformFinalBlock(block' 0' 16);
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,UnwrapKeyPrivate,The following statement contains a magic number: Array.Copy(b' _blockSizeInBytes' r' (i - 1) << 3' _blockSizeInBytes);
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,UnwrapKeyPrivate,The following statement contains a magic number: var keyBytes = new byte[n << 3];
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,UnwrapKeyPrivate,The following statement contains a magic number: Array.Copy(r' i << 3' keyBytes' i << 3' 8);
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,UnwrapKeyPrivate,The following statement contains a magic number: Array.Copy(r' i << 3' keyBytes' i << 3' 8);
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,UnwrapKeyPrivate,The following statement contains a magic number: Array.Copy(r' i << 3' keyBytes' i << 3' 8);
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,ValidateKeySize,The following statement contains a magic number: throw LogHelper.LogExceptionMessage(new ArgumentOutOfRangeException(nameof(key.Length)' LogHelper.FormatInvariant(LogMessages.IDX10662' SecurityAlgorithms.Aes128KW' 128' Key.KeyId' key.Length << 3)));
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,ValidateKeySize,The following statement contains a magic number: throw LogHelper.LogExceptionMessage(new ArgumentOutOfRangeException(nameof(key.Length)' LogHelper.FormatInvariant(LogMessages.IDX10662' SecurityAlgorithms.Aes128KW' 128' Key.KeyId' key.Length << 3)));
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,ValidateKeySize,The following statement contains a magic number: key.Length != 16
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,ValidateKeySize,The following statement contains a magic number: throw LogHelper.LogExceptionMessage(new ArgumentOutOfRangeException(nameof(key.Length)' LogHelper.FormatInvariant(LogMessages.IDX10662' SecurityAlgorithms.Aes256KW' 256' Key.KeyId' key.Length << 3)));
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,ValidateKeySize,The following statement contains a magic number: throw LogHelper.LogExceptionMessage(new ArgumentOutOfRangeException(nameof(key.Length)' LogHelper.FormatInvariant(LogMessages.IDX10662' SecurityAlgorithms.Aes256KW' 256' Key.KeyId' key.Length << 3)));
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,ValidateKeySize,The following statement contains a magic number: key.Length != 32
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,WrapKey,The following statement contains a magic number: throw LogHelper.LogExceptionMessage(new ArgumentException(LogHelper.FormatInvariant(LogMessages.IDX10664' keyBytes.Length << 3)' nameof(keyBytes)));
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,WrapKey,The following statement contains a magic number: keyBytes.Length % 8 != 0
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,WrapKeyPrivate,The following statement contains a magic number: var n = inputCount >> 3;
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,WrapKeyPrivate,The following statement contains a magic number: byte[] r = new byte[n << 3];
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,WrapKeyPrivate,The following statement contains a magic number: byte[] block = new byte[16];
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,WrapKeyPrivate,The following statement contains a magic number: Array.Copy(r' i << 3' block' 64 >> 3' 64 >> 3);
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,WrapKeyPrivate,The following statement contains a magic number: Array.Copy(r' i << 3' block' 64 >> 3' 64 >> 3);
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,WrapKeyPrivate,The following statement contains a magic number: Array.Copy(r' i << 3' block' 64 >> 3' 64 >> 3);
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,WrapKeyPrivate,The following statement contains a magic number: Array.Copy(r' i << 3' block' 64 >> 3' 64 >> 3);
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,WrapKeyPrivate,The following statement contains a magic number: Array.Copy(r' i << 3' block' 64 >> 3' 64 >> 3);
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,WrapKeyPrivate,The following statement contains a magic number: var b = _symmetricAlgorithmEncryptor.TransformFinalBlock(block' 0' 16);
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,WrapKeyPrivate,The following statement contains a magic number: Array.Copy(b' a' 64 >> 3);
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,WrapKeyPrivate,The following statement contains a magic number: Array.Copy(b' a' 64 >> 3);
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,WrapKeyPrivate,The following statement contains a magic number: Array.Copy(b' 64 >> 3' r' i << 3' 64 >> 3);
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,WrapKeyPrivate,The following statement contains a magic number: Array.Copy(b' 64 >> 3' r' i << 3' 64 >> 3);
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,WrapKeyPrivate,The following statement contains a magic number: Array.Copy(b' 64 >> 3' r' i << 3' 64 >> 3);
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,WrapKeyPrivate,The following statement contains a magic number: Array.Copy(b' 64 >> 3' r' i << 3' 64 >> 3);
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,WrapKeyPrivate,The following statement contains a magic number: Array.Copy(b' 64 >> 3' r' i << 3' 64 >> 3);
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,WrapKeyPrivate,The following statement contains a magic number: j < 6
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,WrapKeyPrivate,The following statement contains a magic number: var keyBytes = new byte[(n + 1) << 3];
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,WrapKeyPrivate,The following statement contains a magic number: Array.Copy(r' i << 3' keyBytes' (i + 1) << 3' 8);
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,WrapKeyPrivate,The following statement contains a magic number: Array.Copy(r' i << 3' keyBytes' (i + 1) << 3' 8);
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricKeyWrapProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Encryption\SymmetricKeyWrapProvider.cs,WrapKeyPrivate,The following statement contains a magic number: Array.Copy(r' i << 3' keyBytes' (i + 1) << 3' 8);
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricSecurityKey,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\SymmetricSecurityKey.cs,SymmetricSecurityKey,The following statement contains a magic number: _keySize = _key.Length * 8;
Magic Number,Microsoft.IdentityModel.Tokens,SymmetricSecurityKey,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\SymmetricSecurityKey.cs,SymmetricSecurityKey,The following statement contains a magic number: _keySize = _key.Length * 8;
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesA = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20' 21' 22' 23' 24' 25' 26' 27' 28' 29' 30' 31 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Tokens,Utility,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\Utility.cs,AreEqual,The following statement contains a magic number: byte[] s_bytesB = new byte[] { 31' 30' 29' 28' 27' 26' 25' 24' 23' 22' 21' 20' 19' 18' 17' 16' 15' 14' 13' 12' 11' 10' 9' 8' 7' 6' 5' 4' 3' 2' 1' 0 };
Magic Number,Microsoft.IdentityModel.Json.Bson,BsonBinaryWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonBinaryWriter.cs,WriteTokenInternal,The following statement contains a magic number: switch (t.Type)              {                  case BsonType.Object:                  {                      BsonObject value = (BsonObject)t;                      _writer.Write(value.CalculatedSize);                      foreach (BsonProperty property in value)                      {                          _writer.Write((sbyte)property.Value.Type);                          WriteString((string)property.Name.Value' property.Name.ByteCount' null);                          WriteTokenInternal(property.Value);                      }                      _writer.Write((byte)0);                  }                      break;                  case BsonType.Array:                  {                      BsonArray value = (BsonArray)t;                      _writer.Write(value.CalculatedSize);                      ulong index = 0;                      foreach (BsonToken c in value)                      {                          _writer.Write((sbyte)c.Type);                          WriteString(index.ToString(CultureInfo.InvariantCulture)' MathUtils.IntLength(index)' null);                          WriteTokenInternal(c);                          index++;                      }                      _writer.Write((byte)0);                  }                      break;                  case BsonType.Integer:                  {                      BsonValue value = (BsonValue)t;                      _writer.Write(Convert.ToInt32(value.Value' CultureInfo.InvariantCulture));                  }                      break;                  case BsonType.Long:                  {                      BsonValue value = (BsonValue)t;                      _writer.Write(Convert.ToInt64(value.Value' CultureInfo.InvariantCulture));                  }                      break;                  case BsonType.Number:                  {                      BsonValue value = (BsonValue)t;                      _writer.Write(Convert.ToDouble(value.Value' CultureInfo.InvariantCulture));                  }                      break;                  case BsonType.String:                  {                      BsonString value = (BsonString)t;                      WriteString((string)value.Value' value.ByteCount' value.CalculatedSize - 4);                  }                      break;                  case BsonType.Boolean:                      _writer.Write(t == BsonBoolean.True);                      break;                  case BsonType.Null:                  case BsonType.Undefined:                      break;                  case BsonType.Date:                  {                      BsonValue value = (BsonValue)t;                        long ticks = 0;                        if (value.Value is DateTime dateTime)                      {                          if (DateTimeKindHandling == DateTimeKind.Utc)                          {                              dateTime = dateTime.ToUniversalTime();                          }                          else if (DateTimeKindHandling == DateTimeKind.Local)                          {                              dateTime = dateTime.ToLocalTime();                          }                            ticks = DateTimeUtils.ConvertDateTimeToJavaScriptTicks(dateTime' false);                      }  #if HAVE_DATE_TIME_OFFSET                      else                      {                          DateTimeOffset dateTimeOffset = (DateTimeOffset)value.Value;                          ticks = DateTimeUtils.ConvertDateTimeToJavaScriptTicks(dateTimeOffset.UtcDateTime' dateTimeOffset.Offset);                      }  #endif                        _writer.Write(ticks);                  }                      break;                  case BsonType.Binary:                  {                      BsonBinary value = (BsonBinary)t;                        byte[] data = (byte[])value.Value;                      _writer.Write(data.Length);                      _writer.Write((byte)value.BinaryType);                      _writer.Write(data);                  }                      break;                  case BsonType.Oid:                  {                      BsonValue value = (BsonValue)t;                        byte[] data = (byte[])value.Value;                      _writer.Write(data);                  }                      break;                  case BsonType.Regex:                  {                      BsonRegex value = (BsonRegex)t;                        WriteString((string)value.Pattern.Value' value.Pattern.ByteCount' null);                      WriteString((string)value.Options.Value' value.Options.ByteCount' null);                  }                      break;                  default:                      throw new ArgumentOutOfRangeException(nameof(t)' "Unexpected token when writing BSON: {0}".FormatWith(CultureInfo.InvariantCulture' t.Type));              }
Magic Number,Microsoft.IdentityModel.Json.Bson,BsonBinaryWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonBinaryWriter.cs,WriteUtf8Bytes,The following statement contains a magic number: _largeByteBuffer = new byte[256];
Magic Number,Microsoft.IdentityModel.Json.Bson,BsonBinaryWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonBinaryWriter.cs,WriteUtf8Bytes,The following statement contains a magic number: byteCount <= 256
Magic Number,Microsoft.IdentityModel.Json.Bson,BsonBinaryWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonBinaryWriter.cs,CalculateSizeWithLength,The following statement contains a magic number: int baseSize = (includeSize)                  ? 5 // size bytes + terminator                  : 1;
Magic Number,Microsoft.IdentityModel.Json.Bson,BsonBinaryWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonBinaryWriter.cs,CalculateSize,The following statement contains a magic number: switch (t.Type)              {                  case BsonType.Object:                  {                      BsonObject value = (BsonObject)t;                        int bases = 4;                      foreach (BsonProperty p in value)                      {                          int size = 1;                          size += CalculateSize(p.Name);                          size += CalculateSize(p.Value);                            bases += size;                      }                      bases += 1;                      value.CalculatedSize = bases;                      return bases;                  }                  case BsonType.Array:                  {                      BsonArray value = (BsonArray)t;                        int size = 4;                      ulong index = 0;                      foreach (BsonToken c in value)                      {                          size += 1;                          size += CalculateSize(MathUtils.IntLength(index));                          size += CalculateSize(c);                          index++;                      }                      size += 1;                      value.CalculatedSize = size;                        return value.CalculatedSize;                  }                  case BsonType.Integer:                      return 4;                  case BsonType.Long:                      return 8;                  case BsonType.Number:                      return 8;                  case BsonType.String:                  {                      BsonString value = (BsonString)t;                      string s = (string)value.Value;                      value.ByteCount = (s != null) ? Encoding.GetByteCount(s) : 0;                      value.CalculatedSize = CalculateSizeWithLength(value.ByteCount' value.IncludeLength);                        return value.CalculatedSize;                  }                  case BsonType.Boolean:                      return 1;                  case BsonType.Null:                  case BsonType.Undefined:                      return 0;                  case BsonType.Date:                      return 8;                  case BsonType.Binary:                  {                      BsonBinary value = (BsonBinary)t;                        byte[] data = (byte[])value.Value;                      value.CalculatedSize = 4 + 1 + data.Length;                        return value.CalculatedSize;                  }                  case BsonType.Oid:                      return 12;                  case BsonType.Regex:                  {                      BsonRegex value = (BsonRegex)t;                      int size = 0;                      size += CalculateSize(value.Pattern);                      size += CalculateSize(value.Options);                      value.CalculatedSize = size;                        return value.CalculatedSize;                  }                  default:                      throw new ArgumentOutOfRangeException(nameof(t)' "Unexpected token when writing BSON: {0}".FormatWith(CultureInfo.InvariantCulture' t.Type));              }
Magic Number,Microsoft.IdentityModel.Json.Bson,BsonBinaryWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonBinaryWriter.cs,CalculateSize,The following statement contains a magic number: switch (t.Type)              {                  case BsonType.Object:                  {                      BsonObject value = (BsonObject)t;                        int bases = 4;                      foreach (BsonProperty p in value)                      {                          int size = 1;                          size += CalculateSize(p.Name);                          size += CalculateSize(p.Value);                            bases += size;                      }                      bases += 1;                      value.CalculatedSize = bases;                      return bases;                  }                  case BsonType.Array:                  {                      BsonArray value = (BsonArray)t;                        int size = 4;                      ulong index = 0;                      foreach (BsonToken c in value)                      {                          size += 1;                          size += CalculateSize(MathUtils.IntLength(index));                          size += CalculateSize(c);                          index++;                      }                      size += 1;                      value.CalculatedSize = size;                        return value.CalculatedSize;                  }                  case BsonType.Integer:                      return 4;                  case BsonType.Long:                      return 8;                  case BsonType.Number:                      return 8;                  case BsonType.String:                  {                      BsonString value = (BsonString)t;                      string s = (string)value.Value;                      value.ByteCount = (s != null) ? Encoding.GetByteCount(s) : 0;                      value.CalculatedSize = CalculateSizeWithLength(value.ByteCount' value.IncludeLength);                        return value.CalculatedSize;                  }                  case BsonType.Boolean:                      return 1;                  case BsonType.Null:                  case BsonType.Undefined:                      return 0;                  case BsonType.Date:                      return 8;                  case BsonType.Binary:                  {                      BsonBinary value = (BsonBinary)t;                        byte[] data = (byte[])value.Value;                      value.CalculatedSize = 4 + 1 + data.Length;                        return value.CalculatedSize;                  }                  case BsonType.Oid:                      return 12;                  case BsonType.Regex:                  {                      BsonRegex value = (BsonRegex)t;                      int size = 0;                      size += CalculateSize(value.Pattern);                      size += CalculateSize(value.Options);                      value.CalculatedSize = size;                        return value.CalculatedSize;                  }                  default:                      throw new ArgumentOutOfRangeException(nameof(t)' "Unexpected token when writing BSON: {0}".FormatWith(CultureInfo.InvariantCulture' t.Type));              }
Magic Number,Microsoft.IdentityModel.Json.Bson,BsonBinaryWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonBinaryWriter.cs,CalculateSize,The following statement contains a magic number: switch (t.Type)              {                  case BsonType.Object:                  {                      BsonObject value = (BsonObject)t;                        int bases = 4;                      foreach (BsonProperty p in value)                      {                          int size = 1;                          size += CalculateSize(p.Name);                          size += CalculateSize(p.Value);                            bases += size;                      }                      bases += 1;                      value.CalculatedSize = bases;                      return bases;                  }                  case BsonType.Array:                  {                      BsonArray value = (BsonArray)t;                        int size = 4;                      ulong index = 0;                      foreach (BsonToken c in value)                      {                          size += 1;                          size += CalculateSize(MathUtils.IntLength(index));                          size += CalculateSize(c);                          index++;                      }                      size += 1;                      value.CalculatedSize = size;                        return value.CalculatedSize;                  }                  case BsonType.Integer:                      return 4;                  case BsonType.Long:                      return 8;                  case BsonType.Number:                      return 8;                  case BsonType.String:                  {                      BsonString value = (BsonString)t;                      string s = (string)value.Value;                      value.ByteCount = (s != null) ? Encoding.GetByteCount(s) : 0;                      value.CalculatedSize = CalculateSizeWithLength(value.ByteCount' value.IncludeLength);                        return value.CalculatedSize;                  }                  case BsonType.Boolean:                      return 1;                  case BsonType.Null:                  case BsonType.Undefined:                      return 0;                  case BsonType.Date:                      return 8;                  case BsonType.Binary:                  {                      BsonBinary value = (BsonBinary)t;                        byte[] data = (byte[])value.Value;                      value.CalculatedSize = 4 + 1 + data.Length;                        return value.CalculatedSize;                  }                  case BsonType.Oid:                      return 12;                  case BsonType.Regex:                  {                      BsonRegex value = (BsonRegex)t;                      int size = 0;                      size += CalculateSize(value.Pattern);                      size += CalculateSize(value.Options);                      value.CalculatedSize = size;                        return value.CalculatedSize;                  }                  default:                      throw new ArgumentOutOfRangeException(nameof(t)' "Unexpected token when writing BSON: {0}".FormatWith(CultureInfo.InvariantCulture' t.Type));              }
Magic Number,Microsoft.IdentityModel.Json.Bson,BsonBinaryWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonBinaryWriter.cs,CalculateSize,The following statement contains a magic number: switch (t.Type)              {                  case BsonType.Object:                  {                      BsonObject value = (BsonObject)t;                        int bases = 4;                      foreach (BsonProperty p in value)                      {                          int size = 1;                          size += CalculateSize(p.Name);                          size += CalculateSize(p.Value);                            bases += size;                      }                      bases += 1;                      value.CalculatedSize = bases;                      return bases;                  }                  case BsonType.Array:                  {                      BsonArray value = (BsonArray)t;                        int size = 4;                      ulong index = 0;                      foreach (BsonToken c in value)                      {                          size += 1;                          size += CalculateSize(MathUtils.IntLength(index));                          size += CalculateSize(c);                          index++;                      }                      size += 1;                      value.CalculatedSize = size;                        return value.CalculatedSize;                  }                  case BsonType.Integer:                      return 4;                  case BsonType.Long:                      return 8;                  case BsonType.Number:                      return 8;                  case BsonType.String:                  {                      BsonString value = (BsonString)t;                      string s = (string)value.Value;                      value.ByteCount = (s != null) ? Encoding.GetByteCount(s) : 0;                      value.CalculatedSize = CalculateSizeWithLength(value.ByteCount' value.IncludeLength);                        return value.CalculatedSize;                  }                  case BsonType.Boolean:                      return 1;                  case BsonType.Null:                  case BsonType.Undefined:                      return 0;                  case BsonType.Date:                      return 8;                  case BsonType.Binary:                  {                      BsonBinary value = (BsonBinary)t;                        byte[] data = (byte[])value.Value;                      value.CalculatedSize = 4 + 1 + data.Length;                        return value.CalculatedSize;                  }                  case BsonType.Oid:                      return 12;                  case BsonType.Regex:                  {                      BsonRegex value = (BsonRegex)t;                      int size = 0;                      size += CalculateSize(value.Pattern);                      size += CalculateSize(value.Options);                      value.CalculatedSize = size;                        return value.CalculatedSize;                  }                  default:                      throw new ArgumentOutOfRangeException(nameof(t)' "Unexpected token when writing BSON: {0}".FormatWith(CultureInfo.InvariantCulture' t.Type));              }
Magic Number,Microsoft.IdentityModel.Json.Bson,BsonBinaryWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonBinaryWriter.cs,CalculateSize,The following statement contains a magic number: switch (t.Type)              {                  case BsonType.Object:                  {                      BsonObject value = (BsonObject)t;                        int bases = 4;                      foreach (BsonProperty p in value)                      {                          int size = 1;                          size += CalculateSize(p.Name);                          size += CalculateSize(p.Value);                            bases += size;                      }                      bases += 1;                      value.CalculatedSize = bases;                      return bases;                  }                  case BsonType.Array:                  {                      BsonArray value = (BsonArray)t;                        int size = 4;                      ulong index = 0;                      foreach (BsonToken c in value)                      {                          size += 1;                          size += CalculateSize(MathUtils.IntLength(index));                          size += CalculateSize(c);                          index++;                      }                      size += 1;                      value.CalculatedSize = size;                        return value.CalculatedSize;                  }                  case BsonType.Integer:                      return 4;                  case BsonType.Long:                      return 8;                  case BsonType.Number:                      return 8;                  case BsonType.String:                  {                      BsonString value = (BsonString)t;                      string s = (string)value.Value;                      value.ByteCount = (s != null) ? Encoding.GetByteCount(s) : 0;                      value.CalculatedSize = CalculateSizeWithLength(value.ByteCount' value.IncludeLength);                        return value.CalculatedSize;                  }                  case BsonType.Boolean:                      return 1;                  case BsonType.Null:                  case BsonType.Undefined:                      return 0;                  case BsonType.Date:                      return 8;                  case BsonType.Binary:                  {                      BsonBinary value = (BsonBinary)t;                        byte[] data = (byte[])value.Value;                      value.CalculatedSize = 4 + 1 + data.Length;                        return value.CalculatedSize;                  }                  case BsonType.Oid:                      return 12;                  case BsonType.Regex:                  {                      BsonRegex value = (BsonRegex)t;                      int size = 0;                      size += CalculateSize(value.Pattern);                      size += CalculateSize(value.Options);                      value.CalculatedSize = size;                        return value.CalculatedSize;                  }                  default:                      throw new ArgumentOutOfRangeException(nameof(t)' "Unexpected token when writing BSON: {0}".FormatWith(CultureInfo.InvariantCulture' t.Type));              }
Magic Number,Microsoft.IdentityModel.Json.Bson,BsonBinaryWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonBinaryWriter.cs,CalculateSize,The following statement contains a magic number: switch (t.Type)              {                  case BsonType.Object:                  {                      BsonObject value = (BsonObject)t;                        int bases = 4;                      foreach (BsonProperty p in value)                      {                          int size = 1;                          size += CalculateSize(p.Name);                          size += CalculateSize(p.Value);                            bases += size;                      }                      bases += 1;                      value.CalculatedSize = bases;                      return bases;                  }                  case BsonType.Array:                  {                      BsonArray value = (BsonArray)t;                        int size = 4;                      ulong index = 0;                      foreach (BsonToken c in value)                      {                          size += 1;                          size += CalculateSize(MathUtils.IntLength(index));                          size += CalculateSize(c);                          index++;                      }                      size += 1;                      value.CalculatedSize = size;                        return value.CalculatedSize;                  }                  case BsonType.Integer:                      return 4;                  case BsonType.Long:                      return 8;                  case BsonType.Number:                      return 8;                  case BsonType.String:                  {                      BsonString value = (BsonString)t;                      string s = (string)value.Value;                      value.ByteCount = (s != null) ? Encoding.GetByteCount(s) : 0;                      value.CalculatedSize = CalculateSizeWithLength(value.ByteCount' value.IncludeLength);                        return value.CalculatedSize;                  }                  case BsonType.Boolean:                      return 1;                  case BsonType.Null:                  case BsonType.Undefined:                      return 0;                  case BsonType.Date:                      return 8;                  case BsonType.Binary:                  {                      BsonBinary value = (BsonBinary)t;                        byte[] data = (byte[])value.Value;                      value.CalculatedSize = 4 + 1 + data.Length;                        return value.CalculatedSize;                  }                  case BsonType.Oid:                      return 12;                  case BsonType.Regex:                  {                      BsonRegex value = (BsonRegex)t;                      int size = 0;                      size += CalculateSize(value.Pattern);                      size += CalculateSize(value.Options);                      value.CalculatedSize = size;                        return value.CalculatedSize;                  }                  default:                      throw new ArgumentOutOfRangeException(nameof(t)' "Unexpected token when writing BSON: {0}".FormatWith(CultureInfo.InvariantCulture' t.Type));              }
Magic Number,Microsoft.IdentityModel.Json.Bson,BsonBinaryWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonBinaryWriter.cs,CalculateSize,The following statement contains a magic number: switch (t.Type)              {                  case BsonType.Object:                  {                      BsonObject value = (BsonObject)t;                        int bases = 4;                      foreach (BsonProperty p in value)                      {                          int size = 1;                          size += CalculateSize(p.Name);                          size += CalculateSize(p.Value);                            bases += size;                      }                      bases += 1;                      value.CalculatedSize = bases;                      return bases;                  }                  case BsonType.Array:                  {                      BsonArray value = (BsonArray)t;                        int size = 4;                      ulong index = 0;                      foreach (BsonToken c in value)                      {                          size += 1;                          size += CalculateSize(MathUtils.IntLength(index));                          size += CalculateSize(c);                          index++;                      }                      size += 1;                      value.CalculatedSize = size;                        return value.CalculatedSize;                  }                  case BsonType.Integer:                      return 4;                  case BsonType.Long:                      return 8;                  case BsonType.Number:                      return 8;                  case BsonType.String:                  {                      BsonString value = (BsonString)t;                      string s = (string)value.Value;                      value.ByteCount = (s != null) ? Encoding.GetByteCount(s) : 0;                      value.CalculatedSize = CalculateSizeWithLength(value.ByteCount' value.IncludeLength);                        return value.CalculatedSize;                  }                  case BsonType.Boolean:                      return 1;                  case BsonType.Null:                  case BsonType.Undefined:                      return 0;                  case BsonType.Date:                      return 8;                  case BsonType.Binary:                  {                      BsonBinary value = (BsonBinary)t;                        byte[] data = (byte[])value.Value;                      value.CalculatedSize = 4 + 1 + data.Length;                        return value.CalculatedSize;                  }                  case BsonType.Oid:                      return 12;                  case BsonType.Regex:                  {                      BsonRegex value = (BsonRegex)t;                      int size = 0;                      size += CalculateSize(value.Pattern);                      size += CalculateSize(value.Options);                      value.CalculatedSize = size;                        return value.CalculatedSize;                  }                  default:                      throw new ArgumentOutOfRangeException(nameof(t)' "Unexpected token when writing BSON: {0}".FormatWith(CultureInfo.InvariantCulture' t.Type));              }
Magic Number,Microsoft.IdentityModel.Json.Bson,BsonBinaryWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonBinaryWriter.cs,CalculateSize,The following statement contains a magic number: switch (t.Type)              {                  case BsonType.Object:                  {                      BsonObject value = (BsonObject)t;                        int bases = 4;                      foreach (BsonProperty p in value)                      {                          int size = 1;                          size += CalculateSize(p.Name);                          size += CalculateSize(p.Value);                            bases += size;                      }                      bases += 1;                      value.CalculatedSize = bases;                      return bases;                  }                  case BsonType.Array:                  {                      BsonArray value = (BsonArray)t;                        int size = 4;                      ulong index = 0;                      foreach (BsonToken c in value)                      {                          size += 1;                          size += CalculateSize(MathUtils.IntLength(index));                          size += CalculateSize(c);                          index++;                      }                      size += 1;                      value.CalculatedSize = size;                        return value.CalculatedSize;                  }                  case BsonType.Integer:                      return 4;                  case BsonType.Long:                      return 8;                  case BsonType.Number:                      return 8;                  case BsonType.String:                  {                      BsonString value = (BsonString)t;                      string s = (string)value.Value;                      value.ByteCount = (s != null) ? Encoding.GetByteCount(s) : 0;                      value.CalculatedSize = CalculateSizeWithLength(value.ByteCount' value.IncludeLength);                        return value.CalculatedSize;                  }                  case BsonType.Boolean:                      return 1;                  case BsonType.Null:                  case BsonType.Undefined:                      return 0;                  case BsonType.Date:                      return 8;                  case BsonType.Binary:                  {                      BsonBinary value = (BsonBinary)t;                        byte[] data = (byte[])value.Value;                      value.CalculatedSize = 4 + 1 + data.Length;                        return value.CalculatedSize;                  }                  case BsonType.Oid:                      return 12;                  case BsonType.Regex:                  {                      BsonRegex value = (BsonRegex)t;                      int size = 0;                      size += CalculateSize(value.Pattern);                      size += CalculateSize(value.Options);                      value.CalculatedSize = size;                        return value.CalculatedSize;                  }                  default:                      throw new ArgumentOutOfRangeException(nameof(t)' "Unexpected token when writing BSON: {0}".FormatWith(CultureInfo.InvariantCulture' t.Type));              }
Magic Number,Microsoft.IdentityModel.Json.Bson,BsonObjectId,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonObjectId.cs,BsonObjectId,The following statement contains a magic number: value.Length != 12
Magic Number,Microsoft.IdentityModel.Json.Bson,BsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonReader.cs,ReadReference,The following statement contains a magic number: switch (CurrentState)              {                  case State.ObjectStart:                  {                      SetToken(JsonToken.PropertyName' JsonTypeReflector.RefPropertyName);                      _bsonReaderState = BsonReaderState.ReferenceRef;                      return true;                  }                  case State.Property:                  {                      if (_bsonReaderState == BsonReaderState.ReferenceRef)                      {                          SetToken(JsonToken.String' ReadLengthString());                          return true;                      }                      else if (_bsonReaderState == BsonReaderState.ReferenceId)                      {                          SetToken(JsonToken.Bytes' ReadBytes(12));                          return true;                      }                      else                      {                          throw JsonReaderException.Create(this' "Unexpected state when reading BSON reference: " + _bsonReaderState);                      }                  }                  case State.PostValue:                  {                      if (_bsonReaderState == BsonReaderState.ReferenceRef)                      {                          SetToken(JsonToken.PropertyName' JsonTypeReflector.IdPropertyName);                          _bsonReaderState = BsonReaderState.ReferenceId;                          return true;                      }                      else if (_bsonReaderState == BsonReaderState.ReferenceId)                      {                          SetToken(JsonToken.EndObject);                          _bsonReaderState = BsonReaderState.Normal;                          return true;                      }                      else                      {                          throw JsonReaderException.Create(this' "Unexpected state when reading BSON reference: " + _bsonReaderState);                      }                  }                  default:                      throw JsonReaderException.Create(this' "Unexpected state when reading BSON reference: " + CurrentState);              }
Magic Number,Microsoft.IdentityModel.Json.Bson,BsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonReader.cs,ReadType,The following statement contains a magic number: switch (type)              {                  case BsonType.Number:                      double d = ReadDouble();                        if (_floatParseHandling == FloatParseHandling.Decimal)                      {                          SetToken(JsonToken.Float' Convert.ToDecimal(d' CultureInfo.InvariantCulture));                      }                      else                      {                          SetToken(JsonToken.Float' d);                      }                      break;                  case BsonType.String:                  case BsonType.Symbol:                      SetToken(JsonToken.String' ReadLengthString());                      break;                  case BsonType.Object:                  {                      SetToken(JsonToken.StartObject);                        ContainerContext newContext = new ContainerContext(BsonType.Object);                      PushContext(newContext);                      newContext.Length = ReadInt32();                      break;                  }                  case BsonType.Array:                  {                      SetToken(JsonToken.StartArray);                        ContainerContext newContext = new ContainerContext(BsonType.Array);                      PushContext(newContext);                      newContext.Length = ReadInt32();                      break;                  }                  case BsonType.Binary:                      BsonBinaryType binaryType;                      byte[] data = ReadBinary(out binaryType);                        object value = (binaryType != BsonBinaryType.Uuid)                          ? data                          : (object)new Guid(data);                        SetToken(JsonToken.Bytes' value);                      break;                  case BsonType.Undefined:                      SetToken(JsonToken.Undefined);                      break;                  case BsonType.Oid:                      byte[] oid = ReadBytes(12);                      SetToken(JsonToken.Bytes' oid);                      break;                  case BsonType.Boolean:                      bool b = Convert.ToBoolean(ReadByte());                      SetToken(JsonToken.Boolean' b);                      break;                  case BsonType.Date:                      long ticks = ReadInt64();                      DateTime utcDateTime = DateTimeUtils.ConvertJavaScriptTicksToDateTime(ticks);                        DateTime dateTime;                      switch (DateTimeKindHandling)                      {                          case DateTimeKind.Unspecified:                              dateTime = DateTime.SpecifyKind(utcDateTime' DateTimeKind.Unspecified);                              break;                          case DateTimeKind.Local:                              dateTime = utcDateTime.ToLocalTime();                              break;                          default:                              dateTime = utcDateTime;                              break;                      }                        SetToken(JsonToken.Date' dateTime);                      break;                  case BsonType.Null:                      SetToken(JsonToken.Null);                      break;                  case BsonType.Regex:                      string expression = ReadString();                      string modifiers = ReadString();                        string regex = @"/" + expression + @"/" + modifiers;                      SetToken(JsonToken.String' regex);                      break;                  case BsonType.Reference:                      SetToken(JsonToken.StartObject);                      _bsonReaderState = BsonReaderState.ReferenceStart;                      break;                  case BsonType.Code:                      SetToken(JsonToken.String' ReadLengthString());                      break;                  case BsonType.CodeWScope:                      SetToken(JsonToken.StartObject);                      _bsonReaderState = BsonReaderState.CodeWScopeStart;                      break;                  case BsonType.Integer:                      SetToken(JsonToken.Integer' (long)ReadInt32());                      break;                  case BsonType.TimeStamp:                  case BsonType.Long:                      SetToken(JsonToken.Integer' ReadInt64());                      break;                  default:                      throw new ArgumentOutOfRangeException(nameof(type)' "Unexpected BsonType value: " + type);              }
Magic Number,Microsoft.IdentityModel.Json.Bson,BsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonReader.cs,BytesInSequence,The following statement contains a magic number: return 2;
Magic Number,Microsoft.IdentityModel.Json.Bson,BsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonReader.cs,BytesInSequence,The following statement contains a magic number: return 3;
Magic Number,Microsoft.IdentityModel.Json.Bson,BsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonReader.cs,BytesInSequence,The following statement contains a magic number: return 4;
Magic Number,Microsoft.IdentityModel.Json.Bson,BsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonReader.cs,ReadDouble,The following statement contains a magic number: MovePosition(8);
Magic Number,Microsoft.IdentityModel.Json.Bson,BsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonReader.cs,ReadInt32,The following statement contains a magic number: MovePosition(4);
Magic Number,Microsoft.IdentityModel.Json.Bson,BsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonReader.cs,ReadInt64,The following statement contains a magic number: MovePosition(8);
Magic Number,Microsoft.IdentityModel.Json.Bson,BsonWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Bson\BsonWriter.cs,WriteObjectId,The following statement contains a magic number: value.Length != 12
Magic Number,Microsoft.IdentityModel.Json,DefaultJsonNameTable,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\DefaultJsonNameTable.cs,Get,The following statement contains a magic number: hashCode += (hashCode << 7) ^ key[start];
Magic Number,Microsoft.IdentityModel.Json,DefaultJsonNameTable,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\DefaultJsonNameTable.cs,Get,The following statement contains a magic number: hashCode += (hashCode << 7) ^ key[i];
Magic Number,Microsoft.IdentityModel.Json,DefaultJsonNameTable,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\DefaultJsonNameTable.cs,Get,The following statement contains a magic number: hashCode -= hashCode >> 17;
Magic Number,Microsoft.IdentityModel.Json,DefaultJsonNameTable,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\DefaultJsonNameTable.cs,Get,The following statement contains a magic number: hashCode -= hashCode >> 11;
Magic Number,Microsoft.IdentityModel.Json,DefaultJsonNameTable,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\DefaultJsonNameTable.cs,Get,The following statement contains a magic number: hashCode -= hashCode >> 5;
Magic Number,Microsoft.IdentityModel.Json,DefaultJsonNameTable,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\DefaultJsonNameTable.cs,Add,The following statement contains a magic number: hashCode += (hashCode << 7) ^ key[i];
Magic Number,Microsoft.IdentityModel.Json,DefaultJsonNameTable,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\DefaultJsonNameTable.cs,Add,The following statement contains a magic number: hashCode -= hashCode >> 17;
Magic Number,Microsoft.IdentityModel.Json,DefaultJsonNameTable,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\DefaultJsonNameTable.cs,Add,The following statement contains a magic number: hashCode -= hashCode >> 11;
Magic Number,Microsoft.IdentityModel.Json,DefaultJsonNameTable,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\DefaultJsonNameTable.cs,Add,The following statement contains a magic number: hashCode -= hashCode >> 5;
Magic Number,Microsoft.IdentityModel.Json,DefaultJsonNameTable,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\DefaultJsonNameTable.cs,Grow,The following statement contains a magic number: int newMask = (_mask * 2) + 1;
Magic Number,Microsoft.IdentityModel.Json,JsonConvert,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonConvert.cs,SerializeObjectInternal,The following statement contains a magic number: StringBuilder sb = new StringBuilder(256);
Magic Number,Microsoft.IdentityModel.Json,JsonPosition,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonPosition.cs,CalculateLength,The following statement contains a magic number: switch (Type)              {                  case JsonContainerType.Object:                      return PropertyName.Length + 5;                  case JsonContainerType.Array:                  case JsonContainerType.Constructor:                      return MathUtils.IntLength((ulong)Position) + 2;                  default:                      throw new ArgumentOutOfRangeException(nameof(Type));              }
Magic Number,Microsoft.IdentityModel.Json,JsonPosition,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonPosition.cs,CalculateLength,The following statement contains a magic number: switch (Type)              {                  case JsonContainerType.Object:                      return PropertyName.Length + 5;                  case JsonContainerType.Array:                  case JsonContainerType.Constructor:                      return MathUtils.IntLength((ulong)Position) + 2;                  default:                      throw new ArgumentOutOfRangeException(nameof(Type));              }
Magic Number,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadStringIntoBufferAsync,The following statement contains a magic number: switch (_chars[charPos++])                  {                      case '\0':                          if (_charsUsed == charPos - 1)                          {                              charPos--;                                if (await ReadDataAsync(true' cancellationToken).ConfigureAwait(false) == 0)                              {                                  _charPos = charPos;                                  throw JsonReaderException.Create(this' "Unterminated string. Expected delimiter: {0}.".FormatWith(CultureInfo.InvariantCulture' quote));                              }                          }                            break;                      case '\\':                          _charPos = charPos;                          if (!await EnsureCharsAsync(0' true' cancellationToken).ConfigureAwait(false))                          {                              throw JsonReaderException.Create(this' "Unterminated string. Expected delimiter: {0}.".FormatWith(CultureInfo.InvariantCulture' quote));                          }                            // start of escape sequence                          int escapeStartPos = charPos - 1;                            char currentChar = _chars[charPos];                          charPos++;                            char writeChar;                            switch (currentChar)                          {                              case 'b':                                  writeChar = '\b';                                  break;                              case 't':                                  writeChar = '\t';                                  break;                              case 'n':                                  writeChar = '\n';                                  break;                              case 'f':                                  writeChar = '\f';                                  break;                              case 'r':                                  writeChar = '\r';                                  break;                              case '\\':                                  writeChar = '\\';                                  break;                              case '"':                              case '\'':                              case '/':                                  writeChar = currentChar;                                  break;                              case 'u':                                  _charPos = charPos;                                  writeChar = await ParseUnicodeAsync(cancellationToken).ConfigureAwait(false);                                    if (StringUtils.IsLowSurrogate(writeChar))                                  {                                      // low surrogate with no preceding high surrogate; this char is replaced                                      writeChar = UnicodeReplacementChar;                                  }                                  else if (StringUtils.IsHighSurrogate(writeChar))                                  {                                      bool anotherHighSurrogate;                                        // loop for handling situations where there are multiple consecutive high surrogates                                      do                                      {                                          anotherHighSurrogate = false;                                            // potential start of a surrogate pair                                          if (await EnsureCharsAsync(2' true' cancellationToken).ConfigureAwait(false) && _chars[_charPos] == '\\' && _chars[_charPos + 1] == 'u')                                          {                                              char highSurrogate = writeChar;                                                _charPos += 2;                                              writeChar = await ParseUnicodeAsync(cancellationToken).ConfigureAwait(false);                                                if (StringUtils.IsLowSurrogate(writeChar))                                              {                                                  // a valid surrogate pair!                                              }                                              else if (StringUtils.IsHighSurrogate(writeChar))                                              {                                                  // another high surrogate; replace current and start check over                                                  highSurrogate = UnicodeReplacementChar;                                                  anotherHighSurrogate = true;                                              }                                              else                                              {                                                  // high surrogate not followed by low surrogate; original char is replaced                                                  highSurrogate = UnicodeReplacementChar;                                              }                                                EnsureBufferNotEmpty();                                                WriteCharToBuffer(highSurrogate' lastWritePosition' escapeStartPos);                                              lastWritePosition = _charPos;                                          }                                          else                                          {                                              // there are not enough remaining chars for the low surrogate or is not follow by unicode sequence                                              // replace high surrogate and continue on as usual                                              writeChar = UnicodeReplacementChar;                                          }                                      } while (anotherHighSurrogate);                                  }                                    charPos = _charPos;                                  break;                              default:                                  _charPos = charPos;                                  throw JsonReaderException.Create(this' "Bad JSON escape sequence: {0}.".FormatWith(CultureInfo.InvariantCulture' @"\" + currentChar));                          }                            EnsureBufferNotEmpty();                          WriteCharToBuffer(writeChar' lastWritePosition' escapeStartPos);                            lastWritePosition = charPos;                          break;                      case StringUtils.CarriageReturn:                          _charPos = charPos - 1;                          await ProcessCarriageReturnAsync(true' cancellationToken).ConfigureAwait(false);                          charPos = _charPos;                          break;                      case StringUtils.LineFeed:                          _charPos = charPos - 1;                          ProcessLineFeed();                          charPos = _charPos;                          break;                      case '"':                      case '\'':                          if (_chars[charPos - 1] == quote)                          {                              FinishReadStringIntoBuffer(charPos - 1' initialPosition' lastWritePosition);                              return;                          }                            break;                  }
Magic Number,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadStringIntoBufferAsync,The following statement contains a magic number: switch (_chars[charPos++])                  {                      case '\0':                          if (_charsUsed == charPos - 1)                          {                              charPos--;                                if (await ReadDataAsync(true' cancellationToken).ConfigureAwait(false) == 0)                              {                                  _charPos = charPos;                                  throw JsonReaderException.Create(this' "Unterminated string. Expected delimiter: {0}.".FormatWith(CultureInfo.InvariantCulture' quote));                              }                          }                            break;                      case '\\':                          _charPos = charPos;                          if (!await EnsureCharsAsync(0' true' cancellationToken).ConfigureAwait(false))                          {                              throw JsonReaderException.Create(this' "Unterminated string. Expected delimiter: {0}.".FormatWith(CultureInfo.InvariantCulture' quote));                          }                            // start of escape sequence                          int escapeStartPos = charPos - 1;                            char currentChar = _chars[charPos];                          charPos++;                            char writeChar;                            switch (currentChar)                          {                              case 'b':                                  writeChar = '\b';                                  break;                              case 't':                                  writeChar = '\t';                                  break;                              case 'n':                                  writeChar = '\n';                                  break;                              case 'f':                                  writeChar = '\f';                                  break;                              case 'r':                                  writeChar = '\r';                                  break;                              case '\\':                                  writeChar = '\\';                                  break;                              case '"':                              case '\'':                              case '/':                                  writeChar = currentChar;                                  break;                              case 'u':                                  _charPos = charPos;                                  writeChar = await ParseUnicodeAsync(cancellationToken).ConfigureAwait(false);                                    if (StringUtils.IsLowSurrogate(writeChar))                                  {                                      // low surrogate with no preceding high surrogate; this char is replaced                                      writeChar = UnicodeReplacementChar;                                  }                                  else if (StringUtils.IsHighSurrogate(writeChar))                                  {                                      bool anotherHighSurrogate;                                        // loop for handling situations where there are multiple consecutive high surrogates                                      do                                      {                                          anotherHighSurrogate = false;                                            // potential start of a surrogate pair                                          if (await EnsureCharsAsync(2' true' cancellationToken).ConfigureAwait(false) && _chars[_charPos] == '\\' && _chars[_charPos + 1] == 'u')                                          {                                              char highSurrogate = writeChar;                                                _charPos += 2;                                              writeChar = await ParseUnicodeAsync(cancellationToken).ConfigureAwait(false);                                                if (StringUtils.IsLowSurrogate(writeChar))                                              {                                                  // a valid surrogate pair!                                              }                                              else if (StringUtils.IsHighSurrogate(writeChar))                                              {                                                  // another high surrogate; replace current and start check over                                                  highSurrogate = UnicodeReplacementChar;                                                  anotherHighSurrogate = true;                                              }                                              else                                              {                                                  // high surrogate not followed by low surrogate; original char is replaced                                                  highSurrogate = UnicodeReplacementChar;                                              }                                                EnsureBufferNotEmpty();                                                WriteCharToBuffer(highSurrogate' lastWritePosition' escapeStartPos);                                              lastWritePosition = _charPos;                                          }                                          else                                          {                                              // there are not enough remaining chars for the low surrogate or is not follow by unicode sequence                                              // replace high surrogate and continue on as usual                                              writeChar = UnicodeReplacementChar;                                          }                                      } while (anotherHighSurrogate);                                  }                                    charPos = _charPos;                                  break;                              default:                                  _charPos = charPos;                                  throw JsonReaderException.Create(this' "Bad JSON escape sequence: {0}.".FormatWith(CultureInfo.InvariantCulture' @"\" + currentChar));                          }                            EnsureBufferNotEmpty();                          WriteCharToBuffer(writeChar' lastWritePosition' escapeStartPos);                            lastWritePosition = charPos;                          break;                      case StringUtils.CarriageReturn:                          _charPos = charPos - 1;                          await ProcessCarriageReturnAsync(true' cancellationToken).ConfigureAwait(false);                          charPos = _charPos;                          break;                      case StringUtils.LineFeed:                          _charPos = charPos - 1;                          ProcessLineFeed();                          charPos = _charPos;                          break;                      case '"':                      case '\'':                          if (_chars[charPos - 1] == quote)                          {                              FinishReadStringIntoBuffer(charPos - 1' initialPosition' lastWritePosition);                              return;                          }                            break;                  }
Magic Number,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseUnicodeAsync,The following statement contains a magic number: return ConvertUnicode(await EnsureCharsAsync(4' true' cancellationToken).ConfigureAwait(false));
Magic Number,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,HandleNullAsync,The following statement contains a magic number: _charPos += 2;
Magic Number,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,EnsureBufferNotEmpty,The following statement contains a magic number: _stringBuffer = new StringBuffer(_arrayPool' 1024);
Magic Number,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadString,The following statement contains a magic number: switch (readType)              {                  case ReadType.ReadAsBytes:                      Guid g;                      byte[] data;                      if (_stringReference.Length == 0)                      {                          data = CollectionUtils.ArrayEmpty<byte>();                      }                      else if (_stringReference.Length == 36 && ConvertUtils.TryConvertGuid(_stringReference.ToString()' out g))                      {                          data = g.ToByteArray();                      }                      else                      {                          data = Convert.FromBase64CharArray(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length);                      }                        SetToken(JsonToken.Bytes' data' false);                      break;                  case ReadType.ReadAsString:                      string text = _stringReference.ToString();                        SetToken(JsonToken.String' text' false);                      _quoteChar = quote;                      break;                  case ReadType.ReadAsInt32:                  case ReadType.ReadAsDecimal:                  case ReadType.ReadAsBoolean:                      // caller will convert result                      break;                  default:                      if (_dateParseHandling != DateParseHandling.None)                      {                          DateParseHandling dateParseHandling;                          if (readType == ReadType.ReadAsDateTime)                          {                              dateParseHandling = DateParseHandling.DateTime;                          }  #if HAVE_DATE_TIME_OFFSET                          else if (readType == ReadType.ReadAsDateTimeOffset)                          {                              dateParseHandling = DateParseHandling.DateTimeOffset;                          }  #endif                          else                          {                              dateParseHandling = _dateParseHandling;                          }                            if (dateParseHandling == DateParseHandling.DateTime)                          {                              if (DateTimeUtils.TryParseDateTime(_stringReference' DateTimeZoneHandling' DateFormatString' Culture' out DateTime dt))                              {                                  SetToken(JsonToken.Date' dt' false);                                  return;                              }                          }  #if HAVE_DATE_TIME_OFFSET                          else                          {                              if (DateTimeUtils.TryParseDateTimeOffset(_stringReference' DateFormatString' Culture' out DateTimeOffset dt))                              {                                  SetToken(JsonToken.Date' dt' false);                                  return;                              }                          }  #endif                      }                        SetToken(JsonToken.String' _stringReference.ToString()' false);                      _quoteChar = quote;                      break;              }
Magic Number,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,BlockCopyChars,The following statement contains a magic number: const int charByteCount = 2;
Magic Number,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ShiftBufferIfNeeded,The following statement contains a magic number: length - _charPos <= length * 0.1 || length >= LargeBufferLength
Magic Number,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,PrepareBufferForReadData,The following statement contains a magic number: int doubledArrayLength = _chars.Length * 2;
Magic Number,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,HandleNull,The following statement contains a magic number: _charPos += 2;
Magic Number,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,EnsureBuffer,The following statement contains a magic number: _chars = BufferUtils.RentBuffer(_arrayPool' 1024);
Magic Number,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadStringIntoBuffer,The following statement contains a magic number: switch (_chars[charPos++])                  {                      case '\0':                          if (_charsUsed == charPos - 1)                          {                              charPos--;                                if (ReadData(true) == 0)                              {                                  _charPos = charPos;                                  throw JsonReaderException.Create(this' "Unterminated string. Expected delimiter: {0}.".FormatWith(CultureInfo.InvariantCulture' quote));                              }                          }                          break;                      case '\\':                          _charPos = charPos;                          if (!EnsureChars(0' true))                          {                              throw JsonReaderException.Create(this' "Unterminated string. Expected delimiter: {0}.".FormatWith(CultureInfo.InvariantCulture' quote));                          }                            // start of escape sequence                          int escapeStartPos = charPos - 1;                            char currentChar = _chars[charPos];                          charPos++;                            char writeChar;                            switch (currentChar)                          {                              case 'b':                                  writeChar = '\b';                                  break;                              case 't':                                  writeChar = '\t';                                  break;                              case 'n':                                  writeChar = '\n';                                  break;                              case 'f':                                  writeChar = '\f';                                  break;                              case 'r':                                  writeChar = '\r';                                  break;                              case '\\':                                  writeChar = '\\';                                  break;                              case '"':                              case '\'':                              case '/':                                  writeChar = currentChar;                                  break;                              case 'u':                                  _charPos = charPos;                                  writeChar = ParseUnicode();                                    if (StringUtils.IsLowSurrogate(writeChar))                                  {                                      // low surrogate with no preceding high surrogate; this char is replaced                                      writeChar = UnicodeReplacementChar;                                  }                                  else if (StringUtils.IsHighSurrogate(writeChar))                                  {                                      bool anotherHighSurrogate;                                        // loop for handling situations where there are multiple consecutive high surrogates                                      do                                      {                                          anotherHighSurrogate = false;                                            // potential start of a surrogate pair                                          if (EnsureChars(2' true) && _chars[_charPos] == '\\' && _chars[_charPos + 1] == 'u')                                          {                                              char highSurrogate = writeChar;                                                _charPos += 2;                                              writeChar = ParseUnicode();                                                if (StringUtils.IsLowSurrogate(writeChar))                                              {                                                  // a valid surrogate pair!                                              }                                              else if (StringUtils.IsHighSurrogate(writeChar))                                              {                                                  // another high surrogate; replace current and start check over                                                  highSurrogate = UnicodeReplacementChar;                                                  anotherHighSurrogate = true;                                              }                                              else                                              {                                                  // high surrogate not followed by low surrogate; original char is replaced                                                  highSurrogate = UnicodeReplacementChar;                                              }                                                EnsureBufferNotEmpty();                                                WriteCharToBuffer(highSurrogate' lastWritePosition' escapeStartPos);                                              lastWritePosition = _charPos;                                          }                                          else                                          {                                              // there are not enough remaining chars for the low surrogate or is not follow by unicode sequence                                              // replace high surrogate and continue on as usual                                              writeChar = UnicodeReplacementChar;                                          }                                      } while (anotherHighSurrogate);                                  }                                    charPos = _charPos;                                  break;                              default:                                  _charPos = charPos;                                  throw JsonReaderException.Create(this' "Bad JSON escape sequence: {0}.".FormatWith(CultureInfo.InvariantCulture' @"\" + currentChar));                          }                            EnsureBufferNotEmpty();                          WriteCharToBuffer(writeChar' lastWritePosition' escapeStartPos);                            lastWritePosition = charPos;                          break;                      case StringUtils.CarriageReturn:                          _charPos = charPos - 1;                          ProcessCarriageReturn(true);                          charPos = _charPos;                          break;                      case StringUtils.LineFeed:                          _charPos = charPos - 1;                          ProcessLineFeed();                          charPos = _charPos;                          break;                      case '"':                      case '\'':                          if (_chars[charPos - 1] == quote)                          {                              FinishReadStringIntoBuffer(charPos - 1' initialPosition' lastWritePosition);                              return;                          }                          break;                  }
Magic Number,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ReadStringIntoBuffer,The following statement contains a magic number: switch (_chars[charPos++])                  {                      case '\0':                          if (_charsUsed == charPos - 1)                          {                              charPos--;                                if (ReadData(true) == 0)                              {                                  _charPos = charPos;                                  throw JsonReaderException.Create(this' "Unterminated string. Expected delimiter: {0}.".FormatWith(CultureInfo.InvariantCulture' quote));                              }                          }                          break;                      case '\\':                          _charPos = charPos;                          if (!EnsureChars(0' true))                          {                              throw JsonReaderException.Create(this' "Unterminated string. Expected delimiter: {0}.".FormatWith(CultureInfo.InvariantCulture' quote));                          }                            // start of escape sequence                          int escapeStartPos = charPos - 1;                            char currentChar = _chars[charPos];                          charPos++;                            char writeChar;                            switch (currentChar)                          {                              case 'b':                                  writeChar = '\b';                                  break;                              case 't':                                  writeChar = '\t';                                  break;                              case 'n':                                  writeChar = '\n';                                  break;                              case 'f':                                  writeChar = '\f';                                  break;                              case 'r':                                  writeChar = '\r';                                  break;                              case '\\':                                  writeChar = '\\';                                  break;                              case '"':                              case '\'':                              case '/':                                  writeChar = currentChar;                                  break;                              case 'u':                                  _charPos = charPos;                                  writeChar = ParseUnicode();                                    if (StringUtils.IsLowSurrogate(writeChar))                                  {                                      // low surrogate with no preceding high surrogate; this char is replaced                                      writeChar = UnicodeReplacementChar;                                  }                                  else if (StringUtils.IsHighSurrogate(writeChar))                                  {                                      bool anotherHighSurrogate;                                        // loop for handling situations where there are multiple consecutive high surrogates                                      do                                      {                                          anotherHighSurrogate = false;                                            // potential start of a surrogate pair                                          if (EnsureChars(2' true) && _chars[_charPos] == '\\' && _chars[_charPos + 1] == 'u')                                          {                                              char highSurrogate = writeChar;                                                _charPos += 2;                                              writeChar = ParseUnicode();                                                if (StringUtils.IsLowSurrogate(writeChar))                                              {                                                  // a valid surrogate pair!                                              }                                              else if (StringUtils.IsHighSurrogate(writeChar))                                              {                                                  // another high surrogate; replace current and start check over                                                  highSurrogate = UnicodeReplacementChar;                                                  anotherHighSurrogate = true;                                              }                                              else                                              {                                                  // high surrogate not followed by low surrogate; original char is replaced                                                  highSurrogate = UnicodeReplacementChar;                                              }                                                EnsureBufferNotEmpty();                                                WriteCharToBuffer(highSurrogate' lastWritePosition' escapeStartPos);                                              lastWritePosition = _charPos;                                          }                                          else                                          {                                              // there are not enough remaining chars for the low surrogate or is not follow by unicode sequence                                              // replace high surrogate and continue on as usual                                              writeChar = UnicodeReplacementChar;                                          }                                      } while (anotherHighSurrogate);                                  }                                    charPos = _charPos;                                  break;                              default:                                  _charPos = charPos;                                  throw JsonReaderException.Create(this' "Bad JSON escape sequence: {0}.".FormatWith(CultureInfo.InvariantCulture' @"\" + currentChar));                          }                            EnsureBufferNotEmpty();                          WriteCharToBuffer(writeChar' lastWritePosition' escapeStartPos);                            lastWritePosition = charPos;                          break;                      case StringUtils.CarriageReturn:                          _charPos = charPos - 1;                          ProcessCarriageReturn(true);                          charPos = _charPos;                          break;                      case StringUtils.LineFeed:                          _charPos = charPos - 1;                          ProcessLineFeed();                          charPos = _charPos;                          break;                      case '"':                      case '\'':                          if (_chars[charPos - 1] == quote)                          {                              FinishReadStringIntoBuffer(charPos - 1' initialPosition' lastWritePosition);                              return;                          }                          break;                  }
Magic Number,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ConvertUnicode,The following statement contains a magic number: _charPos += 4;
Magic Number,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ConvertUnicode,The following statement contains a magic number: ConvertUtils.TryHexTextToInt(_chars' _charPos' _charPos + 4' out int value)
Magic Number,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseUnicode,The following statement contains a magic number: return ConvertUnicode(EnsureChars(4' true));
Magic Number,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The following statement contains a magic number: switch (readType)              {                  case ReadType.ReadAsString:                      {                          string number = _stringReference.ToString();                            // validate that the string is a valid number                          if (nonBase10)                          {                              try                              {                                  if (number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase))                                  {                                      Convert.ToInt64(number' 16);                                  }                                  else                                  {                                      Convert.ToInt64(number' 8);                                  }                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              if (!double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out _))                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.String;                          numberValue = number;                      }                      break;                  case ReadType.ReadAsInt32:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  int integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt32(number' 16) : Convert.ToInt32(number' 8);                                    numberValue = integer;                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              ParseResult parseResult = ConvertUtils.Int32TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out int value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                              }                              else if (parseResult == ParseResult.Overflow)                              {                                  throw ThrowReaderError("JSON integer {0} is too large or small for an Int32.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Integer;                      }                      break;                  case ReadType.ReadAsDecimal:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (decimal)firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  // decimal.Parse doesn't support parsing hexadecimal values                                  long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                                    numberValue = Convert.ToDecimal(integer);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              ParseResult parseResult = ConvertUtils.DecimalTryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out decimal value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Float;                      }                      break;                  case ReadType.ReadAsDouble:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (double)firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  // double.Parse doesn't support parsing hexadecimal values                                  long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                                    numberValue = Convert.ToDouble(integer);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid double.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              string number = _stringReference.ToString();                                if (double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out double value))                              {                                  numberValue = value;                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid double.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Float;                      }                      break;                  case ReadType.Read:                  case ReadType.ReadAsInt64:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (long)firstChar - 48;                              numberType = JsonToken.Integer;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  numberValue = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                                numberType = JsonToken.Integer;                          }                          else                          {                              ParseResult parseResult = ConvertUtils.Int64TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out long value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                                  numberType = JsonToken.Integer;                              }                              else if (parseResult == ParseResult.Overflow)                              {  #if HAVE_BIG_INTEGER                                  string number = _stringReference.ToString();                                    if (number.Length > MaximumJavascriptIntegerCharacterLength)                                  {                                      throw ThrowReaderError("JSON integer {0} is too large to parse.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                  }                                    numberValue = BigIntegerParse(number' CultureInfo.InvariantCulture);                                  numberType = JsonToken.Integer;  #else                                  throw ThrowReaderError("JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));  #endif                              }                              else                              {                                  if (_floatParseHandling == FloatParseHandling.Decimal)                                  {                                      parseResult = ConvertUtils.DecimalTryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out decimal d);                                      if (parseResult == ParseResult.Success)                                      {                                          numberValue = d;                                      }                                      else                                      {                                          throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                      }                                  }                                  else                                  {                                      string number = _stringReference.ToString();                                        if (double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out double d))                                      {                                          numberValue = d;                                      }                                      else                                      {                                          throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                      }                                  }                                    numberType = JsonToken.Float;                              }                          }                      }                      break;                  default:                      throw JsonReaderException.Create(this' "Cannot read number value as type.");              }
Magic Number,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The following statement contains a magic number: switch (readType)              {                  case ReadType.ReadAsString:                      {                          string number = _stringReference.ToString();                            // validate that the string is a valid number                          if (nonBase10)                          {                              try                              {                                  if (number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase))                                  {                                      Convert.ToInt64(number' 16);                                  }                                  else                                  {                                      Convert.ToInt64(number' 8);                                  }                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              if (!double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out _))                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.String;                          numberValue = number;                      }                      break;                  case ReadType.ReadAsInt32:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  int integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt32(number' 16) : Convert.ToInt32(number' 8);                                    numberValue = integer;                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              ParseResult parseResult = ConvertUtils.Int32TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out int value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                              }                              else if (parseResult == ParseResult.Overflow)                              {                                  throw ThrowReaderError("JSON integer {0} is too large or small for an Int32.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Integer;                      }                      break;                  case ReadType.ReadAsDecimal:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (decimal)firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  // decimal.Parse doesn't support parsing hexadecimal values                                  long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                                    numberValue = Convert.ToDecimal(integer);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              ParseResult parseResult = ConvertUtils.DecimalTryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out decimal value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Float;                      }                      break;                  case ReadType.ReadAsDouble:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (double)firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  // double.Parse doesn't support parsing hexadecimal values                                  long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                                    numberValue = Convert.ToDouble(integer);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid double.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              string number = _stringReference.ToString();                                if (double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out double value))                              {                                  numberValue = value;                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid double.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Float;                      }                      break;                  case ReadType.Read:                  case ReadType.ReadAsInt64:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (long)firstChar - 48;                              numberType = JsonToken.Integer;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  numberValue = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                                numberType = JsonToken.Integer;                          }                          else                          {                              ParseResult parseResult = ConvertUtils.Int64TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out long value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                                  numberType = JsonToken.Integer;                              }                              else if (parseResult == ParseResult.Overflow)                              {  #if HAVE_BIG_INTEGER                                  string number = _stringReference.ToString();                                    if (number.Length > MaximumJavascriptIntegerCharacterLength)                                  {                                      throw ThrowReaderError("JSON integer {0} is too large to parse.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                  }                                    numberValue = BigIntegerParse(number' CultureInfo.InvariantCulture);                                  numberType = JsonToken.Integer;  #else                                  throw ThrowReaderError("JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));  #endif                              }                              else                              {                                  if (_floatParseHandling == FloatParseHandling.Decimal)                                  {                                      parseResult = ConvertUtils.DecimalTryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out decimal d);                                      if (parseResult == ParseResult.Success)                                      {                                          numberValue = d;                                      }                                      else                                      {                                          throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                      }                                  }                                  else                                  {                                      string number = _stringReference.ToString();                                        if (double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out double d))                                      {                                          numberValue = d;                                      }                                      else                                      {                                          throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                      }                                  }                                    numberType = JsonToken.Float;                              }                          }                      }                      break;                  default:                      throw JsonReaderException.Create(this' "Cannot read number value as type.");              }
Magic Number,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The following statement contains a magic number: switch (readType)              {                  case ReadType.ReadAsString:                      {                          string number = _stringReference.ToString();                            // validate that the string is a valid number                          if (nonBase10)                          {                              try                              {                                  if (number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase))                                  {                                      Convert.ToInt64(number' 16);                                  }                                  else                                  {                                      Convert.ToInt64(number' 8);                                  }                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              if (!double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out _))                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.String;                          numberValue = number;                      }                      break;                  case ReadType.ReadAsInt32:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  int integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt32(number' 16) : Convert.ToInt32(number' 8);                                    numberValue = integer;                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              ParseResult parseResult = ConvertUtils.Int32TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out int value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                              }                              else if (parseResult == ParseResult.Overflow)                              {                                  throw ThrowReaderError("JSON integer {0} is too large or small for an Int32.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Integer;                      }                      break;                  case ReadType.ReadAsDecimal:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (decimal)firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  // decimal.Parse doesn't support parsing hexadecimal values                                  long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                                    numberValue = Convert.ToDecimal(integer);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              ParseResult parseResult = ConvertUtils.DecimalTryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out decimal value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Float;                      }                      break;                  case ReadType.ReadAsDouble:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (double)firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  // double.Parse doesn't support parsing hexadecimal values                                  long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                                    numberValue = Convert.ToDouble(integer);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid double.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              string number = _stringReference.ToString();                                if (double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out double value))                              {                                  numberValue = value;                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid double.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Float;                      }                      break;                  case ReadType.Read:                  case ReadType.ReadAsInt64:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (long)firstChar - 48;                              numberType = JsonToken.Integer;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  numberValue = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                                numberType = JsonToken.Integer;                          }                          else                          {                              ParseResult parseResult = ConvertUtils.Int64TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out long value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                                  numberType = JsonToken.Integer;                              }                              else if (parseResult == ParseResult.Overflow)                              {  #if HAVE_BIG_INTEGER                                  string number = _stringReference.ToString();                                    if (number.Length > MaximumJavascriptIntegerCharacterLength)                                  {                                      throw ThrowReaderError("JSON integer {0} is too large to parse.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                  }                                    numberValue = BigIntegerParse(number' CultureInfo.InvariantCulture);                                  numberType = JsonToken.Integer;  #else                                  throw ThrowReaderError("JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));  #endif                              }                              else                              {                                  if (_floatParseHandling == FloatParseHandling.Decimal)                                  {                                      parseResult = ConvertUtils.DecimalTryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out decimal d);                                      if (parseResult == ParseResult.Success)                                      {                                          numberValue = d;                                      }                                      else                                      {                                          throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                      }                                  }                                  else                                  {                                      string number = _stringReference.ToString();                                        if (double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out double d))                                      {                                          numberValue = d;                                      }                                      else                                      {                                          throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                      }                                  }                                    numberType = JsonToken.Float;                              }                          }                      }                      break;                  default:                      throw JsonReaderException.Create(this' "Cannot read number value as type.");              }
Magic Number,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The following statement contains a magic number: switch (readType)              {                  case ReadType.ReadAsString:                      {                          string number = _stringReference.ToString();                            // validate that the string is a valid number                          if (nonBase10)                          {                              try                              {                                  if (number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase))                                  {                                      Convert.ToInt64(number' 16);                                  }                                  else                                  {                                      Convert.ToInt64(number' 8);                                  }                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              if (!double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out _))                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.String;                          numberValue = number;                      }                      break;                  case ReadType.ReadAsInt32:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  int integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt32(number' 16) : Convert.ToInt32(number' 8);                                    numberValue = integer;                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              ParseResult parseResult = ConvertUtils.Int32TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out int value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                              }                              else if (parseResult == ParseResult.Overflow)                              {                                  throw ThrowReaderError("JSON integer {0} is too large or small for an Int32.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Integer;                      }                      break;                  case ReadType.ReadAsDecimal:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (decimal)firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  // decimal.Parse doesn't support parsing hexadecimal values                                  long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                                    numberValue = Convert.ToDecimal(integer);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              ParseResult parseResult = ConvertUtils.DecimalTryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out decimal value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Float;                      }                      break;                  case ReadType.ReadAsDouble:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (double)firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  // double.Parse doesn't support parsing hexadecimal values                                  long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                                    numberValue = Convert.ToDouble(integer);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid double.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              string number = _stringReference.ToString();                                if (double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out double value))                              {                                  numberValue = value;                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid double.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Float;                      }                      break;                  case ReadType.Read:                  case ReadType.ReadAsInt64:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (long)firstChar - 48;                              numberType = JsonToken.Integer;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  numberValue = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                                numberType = JsonToken.Integer;                          }                          else                          {                              ParseResult parseResult = ConvertUtils.Int64TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out long value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                                  numberType = JsonToken.Integer;                              }                              else if (parseResult == ParseResult.Overflow)                              {  #if HAVE_BIG_INTEGER                                  string number = _stringReference.ToString();                                    if (number.Length > MaximumJavascriptIntegerCharacterLength)                                  {                                      throw ThrowReaderError("JSON integer {0} is too large to parse.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                  }                                    numberValue = BigIntegerParse(number' CultureInfo.InvariantCulture);                                  numberType = JsonToken.Integer;  #else                                  throw ThrowReaderError("JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));  #endif                              }                              else                              {                                  if (_floatParseHandling == FloatParseHandling.Decimal)                                  {                                      parseResult = ConvertUtils.DecimalTryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out decimal d);                                      if (parseResult == ParseResult.Success)                                      {                                          numberValue = d;                                      }                                      else                                      {                                          throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                      }                                  }                                  else                                  {                                      string number = _stringReference.ToString();                                        if (double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out double d))                                      {                                          numberValue = d;                                      }                                      else                                      {                                          throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                      }                                  }                                    numberType = JsonToken.Float;                              }                          }                      }                      break;                  default:                      throw JsonReaderException.Create(this' "Cannot read number value as type.");              }
Magic Number,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The following statement contains a magic number: switch (readType)              {                  case ReadType.ReadAsString:                      {                          string number = _stringReference.ToString();                            // validate that the string is a valid number                          if (nonBase10)                          {                              try                              {                                  if (number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase))                                  {                                      Convert.ToInt64(number' 16);                                  }                                  else                                  {                                      Convert.ToInt64(number' 8);                                  }                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              if (!double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out _))                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.String;                          numberValue = number;                      }                      break;                  case ReadType.ReadAsInt32:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  int integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt32(number' 16) : Convert.ToInt32(number' 8);                                    numberValue = integer;                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              ParseResult parseResult = ConvertUtils.Int32TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out int value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                              }                              else if (parseResult == ParseResult.Overflow)                              {                                  throw ThrowReaderError("JSON integer {0} is too large or small for an Int32.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Integer;                      }                      break;                  case ReadType.ReadAsDecimal:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (decimal)firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  // decimal.Parse doesn't support parsing hexadecimal values                                  long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                                    numberValue = Convert.ToDecimal(integer);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              ParseResult parseResult = ConvertUtils.DecimalTryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out decimal value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Float;                      }                      break;                  case ReadType.ReadAsDouble:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (double)firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  // double.Parse doesn't support parsing hexadecimal values                                  long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                                    numberValue = Convert.ToDouble(integer);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid double.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              string number = _stringReference.ToString();                                if (double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out double value))                              {                                  numberValue = value;                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid double.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Float;                      }                      break;                  case ReadType.Read:                  case ReadType.ReadAsInt64:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (long)firstChar - 48;                              numberType = JsonToken.Integer;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  numberValue = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                                numberType = JsonToken.Integer;                          }                          else                          {                              ParseResult parseResult = ConvertUtils.Int64TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out long value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                                  numberType = JsonToken.Integer;                              }                              else if (parseResult == ParseResult.Overflow)                              {  #if HAVE_BIG_INTEGER                                  string number = _stringReference.ToString();                                    if (number.Length > MaximumJavascriptIntegerCharacterLength)                                  {                                      throw ThrowReaderError("JSON integer {0} is too large to parse.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                  }                                    numberValue = BigIntegerParse(number' CultureInfo.InvariantCulture);                                  numberType = JsonToken.Integer;  #else                                  throw ThrowReaderError("JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));  #endif                              }                              else                              {                                  if (_floatParseHandling == FloatParseHandling.Decimal)                                  {                                      parseResult = ConvertUtils.DecimalTryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out decimal d);                                      if (parseResult == ParseResult.Success)                                      {                                          numberValue = d;                                      }                                      else                                      {                                          throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                      }                                  }                                  else                                  {                                      string number = _stringReference.ToString();                                        if (double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out double d))                                      {                                          numberValue = d;                                      }                                      else                                      {                                          throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                      }                                  }                                    numberType = JsonToken.Float;                              }                          }                      }                      break;                  default:                      throw JsonReaderException.Create(this' "Cannot read number value as type.");              }
Magic Number,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The following statement contains a magic number: switch (readType)              {                  case ReadType.ReadAsString:                      {                          string number = _stringReference.ToString();                            // validate that the string is a valid number                          if (nonBase10)                          {                              try                              {                                  if (number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase))                                  {                                      Convert.ToInt64(number' 16);                                  }                                  else                                  {                                      Convert.ToInt64(number' 8);                                  }                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              if (!double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out _))                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.String;                          numberValue = number;                      }                      break;                  case ReadType.ReadAsInt32:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  int integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt32(number' 16) : Convert.ToInt32(number' 8);                                    numberValue = integer;                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              ParseResult parseResult = ConvertUtils.Int32TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out int value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                              }                              else if (parseResult == ParseResult.Overflow)                              {                                  throw ThrowReaderError("JSON integer {0} is too large or small for an Int32.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Integer;                      }                      break;                  case ReadType.ReadAsDecimal:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (decimal)firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  // decimal.Parse doesn't support parsing hexadecimal values                                  long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                                    numberValue = Convert.ToDecimal(integer);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              ParseResult parseResult = ConvertUtils.DecimalTryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out decimal value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Float;                      }                      break;                  case ReadType.ReadAsDouble:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (double)firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  // double.Parse doesn't support parsing hexadecimal values                                  long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                                    numberValue = Convert.ToDouble(integer);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid double.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              string number = _stringReference.ToString();                                if (double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out double value))                              {                                  numberValue = value;                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid double.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Float;                      }                      break;                  case ReadType.Read:                  case ReadType.ReadAsInt64:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (long)firstChar - 48;                              numberType = JsonToken.Integer;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  numberValue = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                                numberType = JsonToken.Integer;                          }                          else                          {                              ParseResult parseResult = ConvertUtils.Int64TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out long value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                                  numberType = JsonToken.Integer;                              }                              else if (parseResult == ParseResult.Overflow)                              {  #if HAVE_BIG_INTEGER                                  string number = _stringReference.ToString();                                    if (number.Length > MaximumJavascriptIntegerCharacterLength)                                  {                                      throw ThrowReaderError("JSON integer {0} is too large to parse.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                  }                                    numberValue = BigIntegerParse(number' CultureInfo.InvariantCulture);                                  numberType = JsonToken.Integer;  #else                                  throw ThrowReaderError("JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));  #endif                              }                              else                              {                                  if (_floatParseHandling == FloatParseHandling.Decimal)                                  {                                      parseResult = ConvertUtils.DecimalTryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out decimal d);                                      if (parseResult == ParseResult.Success)                                      {                                          numberValue = d;                                      }                                      else                                      {                                          throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                      }                                  }                                  else                                  {                                      string number = _stringReference.ToString();                                        if (double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out double d))                                      {                                          numberValue = d;                                      }                                      else                                      {                                          throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                      }                                  }                                    numberType = JsonToken.Float;                              }                          }                      }                      break;                  default:                      throw JsonReaderException.Create(this' "Cannot read number value as type.");              }
Magic Number,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The following statement contains a magic number: switch (readType)              {                  case ReadType.ReadAsString:                      {                          string number = _stringReference.ToString();                            // validate that the string is a valid number                          if (nonBase10)                          {                              try                              {                                  if (number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase))                                  {                                      Convert.ToInt64(number' 16);                                  }                                  else                                  {                                      Convert.ToInt64(number' 8);                                  }                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              if (!double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out _))                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.String;                          numberValue = number;                      }                      break;                  case ReadType.ReadAsInt32:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  int integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt32(number' 16) : Convert.ToInt32(number' 8);                                    numberValue = integer;                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              ParseResult parseResult = ConvertUtils.Int32TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out int value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                              }                              else if (parseResult == ParseResult.Overflow)                              {                                  throw ThrowReaderError("JSON integer {0} is too large or small for an Int32.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Integer;                      }                      break;                  case ReadType.ReadAsDecimal:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (decimal)firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  // decimal.Parse doesn't support parsing hexadecimal values                                  long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                                    numberValue = Convert.ToDecimal(integer);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              ParseResult parseResult = ConvertUtils.DecimalTryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out decimal value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Float;                      }                      break;                  case ReadType.ReadAsDouble:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (double)firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  // double.Parse doesn't support parsing hexadecimal values                                  long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                                    numberValue = Convert.ToDouble(integer);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid double.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              string number = _stringReference.ToString();                                if (double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out double value))                              {                                  numberValue = value;                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid double.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Float;                      }                      break;                  case ReadType.Read:                  case ReadType.ReadAsInt64:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (long)firstChar - 48;                              numberType = JsonToken.Integer;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  numberValue = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                                numberType = JsonToken.Integer;                          }                          else                          {                              ParseResult parseResult = ConvertUtils.Int64TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out long value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                                  numberType = JsonToken.Integer;                              }                              else if (parseResult == ParseResult.Overflow)                              {  #if HAVE_BIG_INTEGER                                  string number = _stringReference.ToString();                                    if (number.Length > MaximumJavascriptIntegerCharacterLength)                                  {                                      throw ThrowReaderError("JSON integer {0} is too large to parse.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                  }                                    numberValue = BigIntegerParse(number' CultureInfo.InvariantCulture);                                  numberType = JsonToken.Integer;  #else                                  throw ThrowReaderError("JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));  #endif                              }                              else                              {                                  if (_floatParseHandling == FloatParseHandling.Decimal)                                  {                                      parseResult = ConvertUtils.DecimalTryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out decimal d);                                      if (parseResult == ParseResult.Success)                                      {                                          numberValue = d;                                      }                                      else                                      {                                          throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                      }                                  }                                  else                                  {                                      string number = _stringReference.ToString();                                        if (double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out double d))                                      {                                          numberValue = d;                                      }                                      else                                      {                                          throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                      }                                  }                                    numberType = JsonToken.Float;                              }                          }                      }                      break;                  default:                      throw JsonReaderException.Create(this' "Cannot read number value as type.");              }
Magic Number,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The following statement contains a magic number: switch (readType)              {                  case ReadType.ReadAsString:                      {                          string number = _stringReference.ToString();                            // validate that the string is a valid number                          if (nonBase10)                          {                              try                              {                                  if (number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase))                                  {                                      Convert.ToInt64(number' 16);                                  }                                  else                                  {                                      Convert.ToInt64(number' 8);                                  }                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              if (!double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out _))                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.String;                          numberValue = number;                      }                      break;                  case ReadType.ReadAsInt32:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  int integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt32(number' 16) : Convert.ToInt32(number' 8);                                    numberValue = integer;                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              ParseResult parseResult = ConvertUtils.Int32TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out int value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                              }                              else if (parseResult == ParseResult.Overflow)                              {                                  throw ThrowReaderError("JSON integer {0} is too large or small for an Int32.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Integer;                      }                      break;                  case ReadType.ReadAsDecimal:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (decimal)firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  // decimal.Parse doesn't support parsing hexadecimal values                                  long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                                    numberValue = Convert.ToDecimal(integer);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              ParseResult parseResult = ConvertUtils.DecimalTryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out decimal value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Float;                      }                      break;                  case ReadType.ReadAsDouble:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (double)firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  // double.Parse doesn't support parsing hexadecimal values                                  long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                                    numberValue = Convert.ToDouble(integer);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid double.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              string number = _stringReference.ToString();                                if (double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out double value))                              {                                  numberValue = value;                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid double.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Float;                      }                      break;                  case ReadType.Read:                  case ReadType.ReadAsInt64:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (long)firstChar - 48;                              numberType = JsonToken.Integer;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  numberValue = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                                numberType = JsonToken.Integer;                          }                          else                          {                              ParseResult parseResult = ConvertUtils.Int64TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out long value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                                  numberType = JsonToken.Integer;                              }                              else if (parseResult == ParseResult.Overflow)                              {  #if HAVE_BIG_INTEGER                                  string number = _stringReference.ToString();                                    if (number.Length > MaximumJavascriptIntegerCharacterLength)                                  {                                      throw ThrowReaderError("JSON integer {0} is too large to parse.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                  }                                    numberValue = BigIntegerParse(number' CultureInfo.InvariantCulture);                                  numberType = JsonToken.Integer;  #else                                  throw ThrowReaderError("JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));  #endif                              }                              else                              {                                  if (_floatParseHandling == FloatParseHandling.Decimal)                                  {                                      parseResult = ConvertUtils.DecimalTryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out decimal d);                                      if (parseResult == ParseResult.Success)                                      {                                          numberValue = d;                                      }                                      else                                      {                                          throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                      }                                  }                                  else                                  {                                      string number = _stringReference.ToString();                                        if (double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out double d))                                      {                                          numberValue = d;                                      }                                      else                                      {                                          throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                      }                                  }                                    numberType = JsonToken.Float;                              }                          }                      }                      break;                  default:                      throw JsonReaderException.Create(this' "Cannot read number value as type.");              }
Magic Number,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The following statement contains a magic number: switch (readType)              {                  case ReadType.ReadAsString:                      {                          string number = _stringReference.ToString();                            // validate that the string is a valid number                          if (nonBase10)                          {                              try                              {                                  if (number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase))                                  {                                      Convert.ToInt64(number' 16);                                  }                                  else                                  {                                      Convert.ToInt64(number' 8);                                  }                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              if (!double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out _))                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.String;                          numberValue = number;                      }                      break;                  case ReadType.ReadAsInt32:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  int integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt32(number' 16) : Convert.ToInt32(number' 8);                                    numberValue = integer;                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              ParseResult parseResult = ConvertUtils.Int32TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out int value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                              }                              else if (parseResult == ParseResult.Overflow)                              {                                  throw ThrowReaderError("JSON integer {0} is too large or small for an Int32.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Integer;                      }                      break;                  case ReadType.ReadAsDecimal:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (decimal)firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  // decimal.Parse doesn't support parsing hexadecimal values                                  long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                                    numberValue = Convert.ToDecimal(integer);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              ParseResult parseResult = ConvertUtils.DecimalTryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out decimal value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Float;                      }                      break;                  case ReadType.ReadAsDouble:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (double)firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  // double.Parse doesn't support parsing hexadecimal values                                  long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                                    numberValue = Convert.ToDouble(integer);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid double.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              string number = _stringReference.ToString();                                if (double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out double value))                              {                                  numberValue = value;                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid double.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Float;                      }                      break;                  case ReadType.Read:                  case ReadType.ReadAsInt64:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (long)firstChar - 48;                              numberType = JsonToken.Integer;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  numberValue = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                                numberType = JsonToken.Integer;                          }                          else                          {                              ParseResult parseResult = ConvertUtils.Int64TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out long value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                                  numberType = JsonToken.Integer;                              }                              else if (parseResult == ParseResult.Overflow)                              {  #if HAVE_BIG_INTEGER                                  string number = _stringReference.ToString();                                    if (number.Length > MaximumJavascriptIntegerCharacterLength)                                  {                                      throw ThrowReaderError("JSON integer {0} is too large to parse.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                  }                                    numberValue = BigIntegerParse(number' CultureInfo.InvariantCulture);                                  numberType = JsonToken.Integer;  #else                                  throw ThrowReaderError("JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));  #endif                              }                              else                              {                                  if (_floatParseHandling == FloatParseHandling.Decimal)                                  {                                      parseResult = ConvertUtils.DecimalTryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out decimal d);                                      if (parseResult == ParseResult.Success)                                      {                                          numberValue = d;                                      }                                      else                                      {                                          throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                      }                                  }                                  else                                  {                                      string number = _stringReference.ToString();                                        if (double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out double d))                                      {                                          numberValue = d;                                      }                                      else                                      {                                          throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                      }                                  }                                    numberType = JsonToken.Float;                              }                          }                      }                      break;                  default:                      throw JsonReaderException.Create(this' "Cannot read number value as type.");              }
Magic Number,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The following statement contains a magic number: switch (readType)              {                  case ReadType.ReadAsString:                      {                          string number = _stringReference.ToString();                            // validate that the string is a valid number                          if (nonBase10)                          {                              try                              {                                  if (number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase))                                  {                                      Convert.ToInt64(number' 16);                                  }                                  else                                  {                                      Convert.ToInt64(number' 8);                                  }                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              if (!double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out _))                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.String;                          numberValue = number;                      }                      break;                  case ReadType.ReadAsInt32:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  int integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt32(number' 16) : Convert.ToInt32(number' 8);                                    numberValue = integer;                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              ParseResult parseResult = ConvertUtils.Int32TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out int value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                              }                              else if (parseResult == ParseResult.Overflow)                              {                                  throw ThrowReaderError("JSON integer {0} is too large or small for an Int32.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Integer;                      }                      break;                  case ReadType.ReadAsDecimal:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (decimal)firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  // decimal.Parse doesn't support parsing hexadecimal values                                  long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                                    numberValue = Convert.ToDecimal(integer);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              ParseResult parseResult = ConvertUtils.DecimalTryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out decimal value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Float;                      }                      break;                  case ReadType.ReadAsDouble:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (double)firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  // double.Parse doesn't support parsing hexadecimal values                                  long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                                    numberValue = Convert.ToDouble(integer);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid double.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              string number = _stringReference.ToString();                                if (double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out double value))                              {                                  numberValue = value;                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid double.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Float;                      }                      break;                  case ReadType.Read:                  case ReadType.ReadAsInt64:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (long)firstChar - 48;                              numberType = JsonToken.Integer;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  numberValue = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                                numberType = JsonToken.Integer;                          }                          else                          {                              ParseResult parseResult = ConvertUtils.Int64TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out long value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                                  numberType = JsonToken.Integer;                              }                              else if (parseResult == ParseResult.Overflow)                              {  #if HAVE_BIG_INTEGER                                  string number = _stringReference.ToString();                                    if (number.Length > MaximumJavascriptIntegerCharacterLength)                                  {                                      throw ThrowReaderError("JSON integer {0} is too large to parse.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                  }                                    numberValue = BigIntegerParse(number' CultureInfo.InvariantCulture);                                  numberType = JsonToken.Integer;  #else                                  throw ThrowReaderError("JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));  #endif                              }                              else                              {                                  if (_floatParseHandling == FloatParseHandling.Decimal)                                  {                                      parseResult = ConvertUtils.DecimalTryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out decimal d);                                      if (parseResult == ParseResult.Success)                                      {                                          numberValue = d;                                      }                                      else                                      {                                          throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                      }                                  }                                  else                                  {                                      string number = _stringReference.ToString();                                        if (double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out double d))                                      {                                          numberValue = d;                                      }                                      else                                      {                                          throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                      }                                  }                                    numberType = JsonToken.Float;                              }                          }                      }                      break;                  default:                      throw JsonReaderException.Create(this' "Cannot read number value as type.");              }
Magic Number,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The following statement contains a magic number: switch (readType)              {                  case ReadType.ReadAsString:                      {                          string number = _stringReference.ToString();                            // validate that the string is a valid number                          if (nonBase10)                          {                              try                              {                                  if (number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase))                                  {                                      Convert.ToInt64(number' 16);                                  }                                  else                                  {                                      Convert.ToInt64(number' 8);                                  }                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              if (!double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out _))                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.String;                          numberValue = number;                      }                      break;                  case ReadType.ReadAsInt32:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  int integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt32(number' 16) : Convert.ToInt32(number' 8);                                    numberValue = integer;                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              ParseResult parseResult = ConvertUtils.Int32TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out int value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                              }                              else if (parseResult == ParseResult.Overflow)                              {                                  throw ThrowReaderError("JSON integer {0} is too large or small for an Int32.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Integer;                      }                      break;                  case ReadType.ReadAsDecimal:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (decimal)firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  // decimal.Parse doesn't support parsing hexadecimal values                                  long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                                    numberValue = Convert.ToDecimal(integer);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              ParseResult parseResult = ConvertUtils.DecimalTryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out decimal value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Float;                      }                      break;                  case ReadType.ReadAsDouble:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (double)firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  // double.Parse doesn't support parsing hexadecimal values                                  long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                                    numberValue = Convert.ToDouble(integer);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid double.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              string number = _stringReference.ToString();                                if (double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out double value))                              {                                  numberValue = value;                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid double.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Float;                      }                      break;                  case ReadType.Read:                  case ReadType.ReadAsInt64:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (long)firstChar - 48;                              numberType = JsonToken.Integer;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  numberValue = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                                numberType = JsonToken.Integer;                          }                          else                          {                              ParseResult parseResult = ConvertUtils.Int64TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out long value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                                  numberType = JsonToken.Integer;                              }                              else if (parseResult == ParseResult.Overflow)                              {  #if HAVE_BIG_INTEGER                                  string number = _stringReference.ToString();                                    if (number.Length > MaximumJavascriptIntegerCharacterLength)                                  {                                      throw ThrowReaderError("JSON integer {0} is too large to parse.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                  }                                    numberValue = BigIntegerParse(number' CultureInfo.InvariantCulture);                                  numberType = JsonToken.Integer;  #else                                  throw ThrowReaderError("JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));  #endif                              }                              else                              {                                  if (_floatParseHandling == FloatParseHandling.Decimal)                                  {                                      parseResult = ConvertUtils.DecimalTryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out decimal d);                                      if (parseResult == ParseResult.Success)                                      {                                          numberValue = d;                                      }                                      else                                      {                                          throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                      }                                  }                                  else                                  {                                      string number = _stringReference.ToString();                                        if (double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out double d))                                      {                                          numberValue = d;                                      }                                      else                                      {                                          throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                      }                                  }                                    numberType = JsonToken.Float;                              }                          }                      }                      break;                  default:                      throw JsonReaderException.Create(this' "Cannot read number value as type.");              }
Magic Number,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The following statement contains a magic number: switch (readType)              {                  case ReadType.ReadAsString:                      {                          string number = _stringReference.ToString();                            // validate that the string is a valid number                          if (nonBase10)                          {                              try                              {                                  if (number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase))                                  {                                      Convert.ToInt64(number' 16);                                  }                                  else                                  {                                      Convert.ToInt64(number' 8);                                  }                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              if (!double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out _))                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.String;                          numberValue = number;                      }                      break;                  case ReadType.ReadAsInt32:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  int integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt32(number' 16) : Convert.ToInt32(number' 8);                                    numberValue = integer;                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              ParseResult parseResult = ConvertUtils.Int32TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out int value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                              }                              else if (parseResult == ParseResult.Overflow)                              {                                  throw ThrowReaderError("JSON integer {0} is too large or small for an Int32.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Integer;                      }                      break;                  case ReadType.ReadAsDecimal:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (decimal)firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  // decimal.Parse doesn't support parsing hexadecimal values                                  long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                                    numberValue = Convert.ToDecimal(integer);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              ParseResult parseResult = ConvertUtils.DecimalTryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out decimal value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Float;                      }                      break;                  case ReadType.ReadAsDouble:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (double)firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  // double.Parse doesn't support parsing hexadecimal values                                  long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                                    numberValue = Convert.ToDouble(integer);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid double.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              string number = _stringReference.ToString();                                if (double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out double value))                              {                                  numberValue = value;                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid double.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Float;                      }                      break;                  case ReadType.Read:                  case ReadType.ReadAsInt64:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (long)firstChar - 48;                              numberType = JsonToken.Integer;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  numberValue = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                                numberType = JsonToken.Integer;                          }                          else                          {                              ParseResult parseResult = ConvertUtils.Int64TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out long value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                                  numberType = JsonToken.Integer;                              }                              else if (parseResult == ParseResult.Overflow)                              {  #if HAVE_BIG_INTEGER                                  string number = _stringReference.ToString();                                    if (number.Length > MaximumJavascriptIntegerCharacterLength)                                  {                                      throw ThrowReaderError("JSON integer {0} is too large to parse.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                  }                                    numberValue = BigIntegerParse(number' CultureInfo.InvariantCulture);                                  numberType = JsonToken.Integer;  #else                                  throw ThrowReaderError("JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));  #endif                              }                              else                              {                                  if (_floatParseHandling == FloatParseHandling.Decimal)                                  {                                      parseResult = ConvertUtils.DecimalTryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out decimal d);                                      if (parseResult == ParseResult.Success)                                      {                                          numberValue = d;                                      }                                      else                                      {                                          throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                      }                                  }                                  else                                  {                                      string number = _stringReference.ToString();                                        if (double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out double d))                                      {                                          numberValue = d;                                      }                                      else                                      {                                          throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                      }                                  }                                    numberType = JsonToken.Float;                              }                          }                      }                      break;                  default:                      throw JsonReaderException.Create(this' "Cannot read number value as type.");              }
Magic Number,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The following statement contains a magic number: switch (readType)              {                  case ReadType.ReadAsString:                      {                          string number = _stringReference.ToString();                            // validate that the string is a valid number                          if (nonBase10)                          {                              try                              {                                  if (number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase))                                  {                                      Convert.ToInt64(number' 16);                                  }                                  else                                  {                                      Convert.ToInt64(number' 8);                                  }                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              if (!double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out _))                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.String;                          numberValue = number;                      }                      break;                  case ReadType.ReadAsInt32:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  int integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt32(number' 16) : Convert.ToInt32(number' 8);                                    numberValue = integer;                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              ParseResult parseResult = ConvertUtils.Int32TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out int value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                              }                              else if (parseResult == ParseResult.Overflow)                              {                                  throw ThrowReaderError("JSON integer {0} is too large or small for an Int32.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Integer;                      }                      break;                  case ReadType.ReadAsDecimal:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (decimal)firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  // decimal.Parse doesn't support parsing hexadecimal values                                  long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                                    numberValue = Convert.ToDecimal(integer);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              ParseResult parseResult = ConvertUtils.DecimalTryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out decimal value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Float;                      }                      break;                  case ReadType.ReadAsDouble:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (double)firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  // double.Parse doesn't support parsing hexadecimal values                                  long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                                    numberValue = Convert.ToDouble(integer);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid double.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              string number = _stringReference.ToString();                                if (double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out double value))                              {                                  numberValue = value;                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid double.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Float;                      }                      break;                  case ReadType.Read:                  case ReadType.ReadAsInt64:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (long)firstChar - 48;                              numberType = JsonToken.Integer;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  numberValue = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                                numberType = JsonToken.Integer;                          }                          else                          {                              ParseResult parseResult = ConvertUtils.Int64TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out long value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                                  numberType = JsonToken.Integer;                              }                              else if (parseResult == ParseResult.Overflow)                              {  #if HAVE_BIG_INTEGER                                  string number = _stringReference.ToString();                                    if (number.Length > MaximumJavascriptIntegerCharacterLength)                                  {                                      throw ThrowReaderError("JSON integer {0} is too large to parse.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                  }                                    numberValue = BigIntegerParse(number' CultureInfo.InvariantCulture);                                  numberType = JsonToken.Integer;  #else                                  throw ThrowReaderError("JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));  #endif                              }                              else                              {                                  if (_floatParseHandling == FloatParseHandling.Decimal)                                  {                                      parseResult = ConvertUtils.DecimalTryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out decimal d);                                      if (parseResult == ParseResult.Success)                                      {                                          numberValue = d;                                      }                                      else                                      {                                          throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                      }                                  }                                  else                                  {                                      string number = _stringReference.ToString();                                        if (double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out double d))                                      {                                          numberValue = d;                                      }                                      else                                      {                                          throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                      }                                  }                                    numberType = JsonToken.Float;                              }                          }                      }                      break;                  default:                      throw JsonReaderException.Create(this' "Cannot read number value as type.");              }
Magic Number,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseReadNumber,The following statement contains a magic number: switch (readType)              {                  case ReadType.ReadAsString:                      {                          string number = _stringReference.ToString();                            // validate that the string is a valid number                          if (nonBase10)                          {                              try                              {                                  if (number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase))                                  {                                      Convert.ToInt64(number' 16);                                  }                                  else                                  {                                      Convert.ToInt64(number' 8);                                  }                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              if (!double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out _))                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.String;                          numberValue = number;                      }                      break;                  case ReadType.ReadAsInt32:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  int integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt32(number' 16) : Convert.ToInt32(number' 8);                                    numberValue = integer;                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              ParseResult parseResult = ConvertUtils.Int32TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out int value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                              }                              else if (parseResult == ParseResult.Overflow)                              {                                  throw ThrowReaderError("JSON integer {0} is too large or small for an Int32.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Integer;                      }                      break;                  case ReadType.ReadAsDecimal:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (decimal)firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  // decimal.Parse doesn't support parsing hexadecimal values                                  long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                                    numberValue = Convert.ToDecimal(integer);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              ParseResult parseResult = ConvertUtils.DecimalTryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out decimal value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Float;                      }                      break;                  case ReadType.ReadAsDouble:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (double)firstChar - 48;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  // double.Parse doesn't support parsing hexadecimal values                                  long integer = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                                    numberValue = Convert.ToDouble(integer);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid double.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                          }                          else                          {                              string number = _stringReference.ToString();                                if (double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out double value))                              {                                  numberValue = value;                              }                              else                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid double.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                              }                          }                            numberType = JsonToken.Float;                      }                      break;                  case ReadType.Read:                  case ReadType.ReadAsInt64:                      {                          if (singleDigit)                          {                              // digit char values start at 48                              numberValue = (long)firstChar - 48;                              numberType = JsonToken.Integer;                          }                          else if (nonBase10)                          {                              string number = _stringReference.ToString();                                try                              {                                  numberValue = number.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) ? Convert.ToInt64(number' 16) : Convert.ToInt64(number' 8);                              }                              catch (Exception ex)                              {                                  throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' number)' ex);                              }                                numberType = JsonToken.Integer;                          }                          else                          {                              ParseResult parseResult = ConvertUtils.Int64TryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out long value);                              if (parseResult == ParseResult.Success)                              {                                  numberValue = value;                                  numberType = JsonToken.Integer;                              }                              else if (parseResult == ParseResult.Overflow)                              {  #if HAVE_BIG_INTEGER                                  string number = _stringReference.ToString();                                    if (number.Length > MaximumJavascriptIntegerCharacterLength)                                  {                                      throw ThrowReaderError("JSON integer {0} is too large to parse.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                  }                                    numberValue = BigIntegerParse(number' CultureInfo.InvariantCulture);                                  numberType = JsonToken.Integer;  #else                                  throw ThrowReaderError("JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));  #endif                              }                              else                              {                                  if (_floatParseHandling == FloatParseHandling.Decimal)                                  {                                      parseResult = ConvertUtils.DecimalTryParse(_stringReference.Chars' _stringReference.StartIndex' _stringReference.Length' out decimal d);                                      if (parseResult == ParseResult.Success)                                      {                                          numberValue = d;                                      }                                      else                                      {                                          throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                      }                                  }                                  else                                  {                                      string number = _stringReference.ToString();                                        if (double.TryParse(number' NumberStyles.Float' CultureInfo.InvariantCulture' out double d))                                      {                                          numberValue = d;                                      }                                      else                                      {                                          throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture' _stringReference.ToString()));                                      }                                  }                                    numberType = JsonToken.Float;                              }                          }                      }                      break;                  default:                      throw JsonReaderException.Create(this' "Cannot read number value as type.");              }
Magic Number,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,WriteDigitsAsync,The following statement contains a magic number: uvalue <= 9 & !negative
Magic Number,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,EnsureWriteBuffer,The following statement contains a magic number: length = 35;
Magic Number,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,EnsureWriteBuffer,The following statement contains a magic number: length < 35
Magic Number,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,JsonTextWriter,The following statement contains a magic number: _indentation = 2;
Magic Number,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,EnsureWriteBuffer,The following statement contains a magic number: _writeBuffer = BufferUtils.RentBuffer(_arrayPool' 35);
Magic Number,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,WriteIntegerValue,The following statement contains a magic number: value >= 0 && value <= 9
Magic Number,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,WriteIntegerValue,The following statement contains a magic number: !negative & value <= 9
Magic Number,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,WriteNumberToBuffer,The following statement contains a magic number: ulong quotient = value / 10;
Magic Number,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,WriteNumberToBuffer,The following statement contains a magic number: ulong digit = value - (quotient * 10);
Magic Number,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,WriteIntegerValue,The following statement contains a magic number: value >= 0 && value <= 9
Magic Number,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,WriteIntegerValue,The following statement contains a magic number: !negative & value <= 9
Magic Number,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,WriteNumberToBuffer,The following statement contains a magic number: uint quotient = value / 10;
Magic Number,Microsoft.IdentityModel.Json,JsonTextWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextWriter.Async.cs,WriteNumberToBuffer,The following statement contains a magic number: uint digit = value - (quotient * 10);
Magic Number,Microsoft.IdentityModel.Json,JsonValidatingReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonValidatingReader.cs,IsZero,The following statement contains a magic number: const double epsilon = 2.2204460492503131e-016;
Magic Number,Microsoft.IdentityModel.Json,JsonValidatingReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonValidatingReader.cs,IsZero,The following statement contains a magic number: return Math.Abs(value) < 20.0 * epsilon;
Magic Number,Microsoft.IdentityModel.Json,JsonWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonWriter.Async.cs,BuildStateArray,The following statement contains a magic number: State[] valueStates = StateArrayTempate[7];
Magic Number,Microsoft.IdentityModel.Json.Converters,XmlNodeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,IsNamespaceAttribute,The following statement contains a magic number: attributeName.Length == 5
Magic Number,Microsoft.IdentityModel.Json.Linq.JsonPath,JPath,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JsonPath\JPath.cs,ReadRegexString,The following statement contains a magic number: _currentIndex += 2;
Magic Number,Microsoft.IdentityModel.Json.Linq.JsonPath,BooleanQueryExpression,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JsonPath\QueryExpression.cs,EqualsWithStringCoercion,The following statement contains a magic number: switch (value.Type)              {                  case JTokenType.Date:                      using (StringWriter writer = StringUtils.CreateStringWriter(64))                      {  #if HAVE_DATE_TIME_OFFSET                          if (value.Value is DateTimeOffset offset)                          {                              DateTimeUtils.WriteDateTimeOffsetString(writer' offset' DateFormatHandling.IsoDateFormat' null' CultureInfo.InvariantCulture);                          }                          else  #endif                          {                              DateTimeUtils.WriteDateTimeString(writer' (DateTime)value.Value' DateFormatHandling.IsoDateFormat' null' CultureInfo.InvariantCulture);                          }                            currentValueString = writer.ToString();                      }                      break;                  case JTokenType.Bytes:                      currentValueString = Convert.ToBase64String((byte[])value.Value);                      break;                  case JTokenType.Guid:                  case JTokenType.TimeSpan:                      currentValueString = value.Value.ToString();                      break;                  case JTokenType.Uri:                      currentValueString = ((Uri)value.Value).OriginalString;                      break;                  default:                      return false;              }
Magic Number,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,IsValidCallback,The following statement contains a magic number: parameters == null || parameters.Length != 2 || parameters[0].ParameterType != typeof(StreamingContext) || parameters[1].ParameterType != typeof(ErrorContext)
Magic Number,Microsoft.IdentityModel.Json.Serialization,MemoryTraceWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\MemoryTraceWriter.cs,Trace,The following statement contains a magic number: _traceMessages.Count >= 1000
Magic Number,Microsoft.IdentityModel.Json.Utilities,Base64Encoder,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\Base64Encoder.cs,Encode,The following statement contains a magic number: int num2 = Convert.ToBase64CharArray(_leftOverBytes' 0' 3' _charsLine' 0);
Magic Number,Microsoft.IdentityModel.Json.Utilities,Base64Encoder,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\Base64Encoder.cs,StoreLeftOverBytes,The following statement contains a magic number: int leftOverBytesCount = count % 3;
Magic Number,Microsoft.IdentityModel.Json.Utilities,Base64Encoder,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\Base64Encoder.cs,StoreLeftOverBytes,The following statement contains a magic number: _leftOverBytes = new byte[3];
Magic Number,Microsoft.IdentityModel.Json.Utilities,Base64Encoder,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\Base64Encoder.cs,FulfillFromLeftover,The following statement contains a magic number: leftOverBytesCount < 3 && count > 0
Magic Number,Microsoft.IdentityModel.Json.Utilities,Base64Encoder,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\Base64Encoder.cs,FulfillFromLeftover,The following statement contains a magic number: count == 0 && leftOverBytesCount < 3
Magic Number,Microsoft.IdentityModel.Json.Utilities,Base64Encoder,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\Base64Encoder.cs,EncodeAsync,The following statement contains a magic number: int num2 = Convert.ToBase64CharArray(_leftOverBytes' 0' 3' _charsLine' 0);
Magic Number,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,Int32TryParse,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,Int32TryParse,The following statement contains a magic number: length > 10 || (length == 10 && chars[start] - '0' > 2)
Magic Number,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,Int32TryParse,The following statement contains a magic number: length > 10 || (length == 10 && chars[start] - '0' > 2)
Magic Number,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,Int32TryParse,The following statement contains a magic number: length > 10 || (length == 10 && chars[start] - '0' > 2)
Magic Number,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,Int32TryParse,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,Int32TryParse,The following statement contains a magic number: int newValue = (10 * value) - c;
Magic Number,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,Int32TryParse,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,Int64TryParse,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,Int64TryParse,The following statement contains a magic number: length > 19
Magic Number,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,Int64TryParse,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,Int64TryParse,The following statement contains a magic number: long newValue = (10 * value) - c;
Magic Number,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,Int64TryParse,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,DecimalTryParse,The following statement contains a magic number: const decimal decimalMaxValueHi28 = 7922816251426433759354395033M;
Magic Number,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,DecimalTryParse,The following statement contains a magic number: const ulong decimalMaxValueHi19 = 7922816251426433759UL;
Magic Number,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,DecimalTryParse,The following statement contains a magic number: const ulong decimalMaxValueLo9 = 354395033UL;
Magic Number,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,DecimalTryParse,The following statement contains a magic number: switch (c)                  {                      case '.':                          if (i == start)                          {                              return ParseResult.Invalid;                          }                          if (i + 1 == end)                          {                              return ParseResult.Invalid;                          }                            if (numDecimalStart != end)                          {                              // multiple decimal points                              return ParseResult.Invalid;                          }                            numDecimalStart = i + 1;                          break;                      case 'e':                      case 'E':                          if (i == start)                          {                              return ParseResult.Invalid;                          }                          if (i == numDecimalStart)                          {                              // E follows decimal point		                              return ParseResult.Invalid;                          }                          i++;                          if (i == end)                          {                              return ParseResult.Invalid;                          }                            if (numDecimalStart < end)                          {                              numDecimalEnd = i - 1;                          }                            c = chars[i];                          bool exponentNegative = false;                          switch (c)                          {                              case '-':                                  exponentNegative = true;                                  i++;                                  break;                              case '+':                                  i++;                                  break;                          }                            // parse 3 digit                           for (; i < end; i++)                          {                              c = chars[i];                              if (c < '0' || c > '9')                              {                                  return ParseResult.Invalid;                              }                                int newExponent = (10 * exponent) + (c - '0');                              // stops updating exponent when overflowing                              if (exponent < newExponent)                              {                                  exponent = newExponent;                              }                          }                            if (exponentNegative)                          {                              exponent = -exponent;                          }                          break;                      default:                          if (c < '0' || c > '9')                          {                              return ParseResult.Invalid;                          }                            if (i == start && c == '0')                          {                              i++;                              if (i != end)                              {                                  c = chars[i];                                  if (c == '.')                                  {                                      goto case '.';                                  }                                  if (c == 'e' || c == 'E')                                  {                                      goto case 'E';                                  }                                    return ParseResult.Invalid;                              }                          }                            if (mantissaDigits < 29 && (mantissaDigits != 28 || !(storeOnly28Digits ?? (storeOnly28Digits = (hi19 > decimalMaxValueHi19 || (hi19 == decimalMaxValueHi19 && (lo10 > decimalMaxValueLo9 || (lo10 == decimalMaxValueLo9 && c > decimalMaxValueLo1))))).GetValueOrDefault())))                          {                              if (mantissaDigits < 19)                              {                                  hi19 = (hi19 * 10UL) + (ulong)(c - '0');                              }                              else                              {                                  lo10 = (lo10 * 10UL) + (ulong)(c - '0');                              }                              ++mantissaDigits;                          }                          else                          {                              if (!digit29.HasValue)                              {                                  digit29 = c;                              }                              ++exponentFromMantissa;                          }                          break;                  }
Magic Number,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,DecimalTryParse,The following statement contains a magic number: switch (c)                  {                      case '.':                          if (i == start)                          {                              return ParseResult.Invalid;                          }                          if (i + 1 == end)                          {                              return ParseResult.Invalid;                          }                            if (numDecimalStart != end)                          {                              // multiple decimal points                              return ParseResult.Invalid;                          }                            numDecimalStart = i + 1;                          break;                      case 'e':                      case 'E':                          if (i == start)                          {                              return ParseResult.Invalid;                          }                          if (i == numDecimalStart)                          {                              // E follows decimal point		                              return ParseResult.Invalid;                          }                          i++;                          if (i == end)                          {                              return ParseResult.Invalid;                          }                            if (numDecimalStart < end)                          {                              numDecimalEnd = i - 1;                          }                            c = chars[i];                          bool exponentNegative = false;                          switch (c)                          {                              case '-':                                  exponentNegative = true;                                  i++;                                  break;                              case '+':                                  i++;                                  break;                          }                            // parse 3 digit                           for (; i < end; i++)                          {                              c = chars[i];                              if (c < '0' || c > '9')                              {                                  return ParseResult.Invalid;                              }                                int newExponent = (10 * exponent) + (c - '0');                              // stops updating exponent when overflowing                              if (exponent < newExponent)                              {                                  exponent = newExponent;                              }                          }                            if (exponentNegative)                          {                              exponent = -exponent;                          }                          break;                      default:                          if (c < '0' || c > '9')                          {                              return ParseResult.Invalid;                          }                            if (i == start && c == '0')                          {                              i++;                              if (i != end)                              {                                  c = chars[i];                                  if (c == '.')                                  {                                      goto case '.';                                  }                                  if (c == 'e' || c == 'E')                                  {                                      goto case 'E';                                  }                                    return ParseResult.Invalid;                              }                          }                            if (mantissaDigits < 29 && (mantissaDigits != 28 || !(storeOnly28Digits ?? (storeOnly28Digits = (hi19 > decimalMaxValueHi19 || (hi19 == decimalMaxValueHi19 && (lo10 > decimalMaxValueLo9 || (lo10 == decimalMaxValueLo9 && c > decimalMaxValueLo1))))).GetValueOrDefault())))                          {                              if (mantissaDigits < 19)                              {                                  hi19 = (hi19 * 10UL) + (ulong)(c - '0');                              }                              else                              {                                  lo10 = (lo10 * 10UL) + (ulong)(c - '0');                              }                              ++mantissaDigits;                          }                          else                          {                              if (!digit29.HasValue)                              {                                  digit29 = c;                              }                              ++exponentFromMantissa;                          }                          break;                  }
Magic Number,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,DecimalTryParse,The following statement contains a magic number: switch (c)                  {                      case '.':                          if (i == start)                          {                              return ParseResult.Invalid;                          }                          if (i + 1 == end)                          {                              return ParseResult.Invalid;                          }                            if (numDecimalStart != end)                          {                              // multiple decimal points                              return ParseResult.Invalid;                          }                            numDecimalStart = i + 1;                          break;                      case 'e':                      case 'E':                          if (i == start)                          {                              return ParseResult.Invalid;                          }                          if (i == numDecimalStart)                          {                              // E follows decimal point		                              return ParseResult.Invalid;                          }                          i++;                          if (i == end)                          {                              return ParseResult.Invalid;                          }                            if (numDecimalStart < end)                          {                              numDecimalEnd = i - 1;                          }                            c = chars[i];                          bool exponentNegative = false;                          switch (c)                          {                              case '-':                                  exponentNegative = true;                                  i++;                                  break;                              case '+':                                  i++;                                  break;                          }                            // parse 3 digit                           for (; i < end; i++)                          {                              c = chars[i];                              if (c < '0' || c > '9')                              {                                  return ParseResult.Invalid;                              }                                int newExponent = (10 * exponent) + (c - '0');                              // stops updating exponent when overflowing                              if (exponent < newExponent)                              {                                  exponent = newExponent;                              }                          }                            if (exponentNegative)                          {                              exponent = -exponent;                          }                          break;                      default:                          if (c < '0' || c > '9')                          {                              return ParseResult.Invalid;                          }                            if (i == start && c == '0')                          {                              i++;                              if (i != end)                              {                                  c = chars[i];                                  if (c == '.')                                  {                                      goto case '.';                                  }                                  if (c == 'e' || c == 'E')                                  {                                      goto case 'E';                                  }                                    return ParseResult.Invalid;                              }                          }                            if (mantissaDigits < 29 && (mantissaDigits != 28 || !(storeOnly28Digits ?? (storeOnly28Digits = (hi19 > decimalMaxValueHi19 || (hi19 == decimalMaxValueHi19 && (lo10 > decimalMaxValueLo9 || (lo10 == decimalMaxValueLo9 && c > decimalMaxValueLo1))))).GetValueOrDefault())))                          {                              if (mantissaDigits < 19)                              {                                  hi19 = (hi19 * 10UL) + (ulong)(c - '0');                              }                              else                              {                                  lo10 = (lo10 * 10UL) + (ulong)(c - '0');                              }                              ++mantissaDigits;                          }                          else                          {                              if (!digit29.HasValue)                              {                                  digit29 = c;                              }                              ++exponentFromMantissa;                          }                          break;                  }
Magic Number,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,DecimalTryParse,The following statement contains a magic number: switch (c)                  {                      case '.':                          if (i == start)                          {                              return ParseResult.Invalid;                          }                          if (i + 1 == end)                          {                              return ParseResult.Invalid;                          }                            if (numDecimalStart != end)                          {                              // multiple decimal points                              return ParseResult.Invalid;                          }                            numDecimalStart = i + 1;                          break;                      case 'e':                      case 'E':                          if (i == start)                          {                              return ParseResult.Invalid;                          }                          if (i == numDecimalStart)                          {                              // E follows decimal point		                              return ParseResult.Invalid;                          }                          i++;                          if (i == end)                          {                              return ParseResult.Invalid;                          }                            if (numDecimalStart < end)                          {                              numDecimalEnd = i - 1;                          }                            c = chars[i];                          bool exponentNegative = false;                          switch (c)                          {                              case '-':                                  exponentNegative = true;                                  i++;                                  break;                              case '+':                                  i++;                                  break;                          }                            // parse 3 digit                           for (; i < end; i++)                          {                              c = chars[i];                              if (c < '0' || c > '9')                              {                                  return ParseResult.Invalid;                              }                                int newExponent = (10 * exponent) + (c - '0');                              // stops updating exponent when overflowing                              if (exponent < newExponent)                              {                                  exponent = newExponent;                              }                          }                            if (exponentNegative)                          {                              exponent = -exponent;                          }                          break;                      default:                          if (c < '0' || c > '9')                          {                              return ParseResult.Invalid;                          }                            if (i == start && c == '0')                          {                              i++;                              if (i != end)                              {                                  c = chars[i];                                  if (c == '.')                                  {                                      goto case '.';                                  }                                  if (c == 'e' || c == 'E')                                  {                                      goto case 'E';                                  }                                    return ParseResult.Invalid;                              }                          }                            if (mantissaDigits < 29 && (mantissaDigits != 28 || !(storeOnly28Digits ?? (storeOnly28Digits = (hi19 > decimalMaxValueHi19 || (hi19 == decimalMaxValueHi19 && (lo10 > decimalMaxValueLo9 || (lo10 == decimalMaxValueLo9 && c > decimalMaxValueLo1))))).GetValueOrDefault())))                          {                              if (mantissaDigits < 19)                              {                                  hi19 = (hi19 * 10UL) + (ulong)(c - '0');                              }                              else                              {                                  lo10 = (lo10 * 10UL) + (ulong)(c - '0');                              }                              ++mantissaDigits;                          }                          else                          {                              if (!digit29.HasValue)                              {                                  digit29 = c;                              }                              ++exponentFromMantissa;                          }                          break;                  }
Magic Number,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,DecimalTryParse,The following statement contains a magic number: switch (c)                  {                      case '.':                          if (i == start)                          {                              return ParseResult.Invalid;                          }                          if (i + 1 == end)                          {                              return ParseResult.Invalid;                          }                            if (numDecimalStart != end)                          {                              // multiple decimal points                              return ParseResult.Invalid;                          }                            numDecimalStart = i + 1;                          break;                      case 'e':                      case 'E':                          if (i == start)                          {                              return ParseResult.Invalid;                          }                          if (i == numDecimalStart)                          {                              // E follows decimal point		                              return ParseResult.Invalid;                          }                          i++;                          if (i == end)                          {                              return ParseResult.Invalid;                          }                            if (numDecimalStart < end)                          {                              numDecimalEnd = i - 1;                          }                            c = chars[i];                          bool exponentNegative = false;                          switch (c)                          {                              case '-':                                  exponentNegative = true;                                  i++;                                  break;                              case '+':                                  i++;                                  break;                          }                            // parse 3 digit                           for (; i < end; i++)                          {                              c = chars[i];                              if (c < '0' || c > '9')                              {                                  return ParseResult.Invalid;                              }                                int newExponent = (10 * exponent) + (c - '0');                              // stops updating exponent when overflowing                              if (exponent < newExponent)                              {                                  exponent = newExponent;                              }                          }                            if (exponentNegative)                          {                              exponent = -exponent;                          }                          break;                      default:                          if (c < '0' || c > '9')                          {                              return ParseResult.Invalid;                          }                            if (i == start && c == '0')                          {                              i++;                              if (i != end)                              {                                  c = chars[i];                                  if (c == '.')                                  {                                      goto case '.';                                  }                                  if (c == 'e' || c == 'E')                                  {                                      goto case 'E';                                  }                                    return ParseResult.Invalid;                              }                          }                            if (mantissaDigits < 29 && (mantissaDigits != 28 || !(storeOnly28Digits ?? (storeOnly28Digits = (hi19 > decimalMaxValueHi19 || (hi19 == decimalMaxValueHi19 && (lo10 > decimalMaxValueLo9 || (lo10 == decimalMaxValueLo9 && c > decimalMaxValueLo1))))).GetValueOrDefault())))                          {                              if (mantissaDigits < 19)                              {                                  hi19 = (hi19 * 10UL) + (ulong)(c - '0');                              }                              else                              {                                  lo10 = (lo10 * 10UL) + (ulong)(c - '0');                              }                              ++mantissaDigits;                          }                          else                          {                              if (!digit29.HasValue)                              {                                  digit29 = c;                              }                              ++exponentFromMantissa;                          }                          break;                  }
Magic Number,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,DecimalTryParse,The following statement contains a magic number: switch (c)                  {                      case '.':                          if (i == start)                          {                              return ParseResult.Invalid;                          }                          if (i + 1 == end)                          {                              return ParseResult.Invalid;                          }                            if (numDecimalStart != end)                          {                              // multiple decimal points                              return ParseResult.Invalid;                          }                            numDecimalStart = i + 1;                          break;                      case 'e':                      case 'E':                          if (i == start)                          {                              return ParseResult.Invalid;                          }                          if (i == numDecimalStart)                          {                              // E follows decimal point		                              return ParseResult.Invalid;                          }                          i++;                          if (i == end)                          {                              return ParseResult.Invalid;                          }                            if (numDecimalStart < end)                          {                              numDecimalEnd = i - 1;                          }                            c = chars[i];                          bool exponentNegative = false;                          switch (c)                          {                              case '-':                                  exponentNegative = true;                                  i++;                                  break;                              case '+':                                  i++;                                  break;                          }                            // parse 3 digit                           for (; i < end; i++)                          {                              c = chars[i];                              if (c < '0' || c > '9')                              {                                  return ParseResult.Invalid;                              }                                int newExponent = (10 * exponent) + (c - '0');                              // stops updating exponent when overflowing                              if (exponent < newExponent)                              {                                  exponent = newExponent;                              }                          }                            if (exponentNegative)                          {                              exponent = -exponent;                          }                          break;                      default:                          if (c < '0' || c > '9')                          {                              return ParseResult.Invalid;                          }                            if (i == start && c == '0')                          {                              i++;                              if (i != end)                              {                                  c = chars[i];                                  if (c == '.')                                  {                                      goto case '.';                                  }                                  if (c == 'e' || c == 'E')                                  {                                      goto case 'E';                                  }                                    return ParseResult.Invalid;                              }                          }                            if (mantissaDigits < 29 && (mantissaDigits != 28 || !(storeOnly28Digits ?? (storeOnly28Digits = (hi19 > decimalMaxValueHi19 || (hi19 == decimalMaxValueHi19 && (lo10 > decimalMaxValueLo9 || (lo10 == decimalMaxValueLo9 && c > decimalMaxValueLo1))))).GetValueOrDefault())))                          {                              if (mantissaDigits < 19)                              {                                  hi19 = (hi19 * 10UL) + (ulong)(c - '0');                              }                              else                              {                                  lo10 = (lo10 * 10UL) + (ulong)(c - '0');                              }                              ++mantissaDigits;                          }                          else                          {                              if (!digit29.HasValue)                              {                                  digit29 = c;                              }                              ++exponentFromMantissa;                          }                          break;                  }
Magic Number,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,DecimalTryParse,The following statement contains a magic number: mantissaDigits <= 19
Magic Number,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,DecimalTryParse,The following statement contains a magic number: mantissaDigits > 29
Magic Number,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,DecimalTryParse,The following statement contains a magic number: value *= 10M;
Magic Number,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,DecimalTryParse,The following statement contains a magic number: mantissaDigits == 29
Magic Number,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,TryHexTextToInt,The following statement contains a magic number: chValue = ch - 48;
Magic Number,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,TryHexTextToInt,The following statement contains a magic number: ch <= 57 && ch >= 48
Magic Number,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,TryHexTextToInt,The following statement contains a magic number: ch <= 57 && ch >= 48
Magic Number,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,TryHexTextToInt,The following statement contains a magic number: value += chValue << ((end - 1 - i) * 4);
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,DateTimeParser,The following statement contains a magic number: Power10 = new[] { -1' 10' 100' 1000' 10000' 100000' 1000000 };
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,DateTimeParser,The following statement contains a magic number: Power10 = new[] { -1' 10' 100' 1000' 10000' 100000' 1000000 };
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,DateTimeParser,The following statement contains a magic number: Power10 = new[] { -1' 10' 100' 1000' 10000' 100000' 1000000 };
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,DateTimeParser,The following statement contains a magic number: Power10 = new[] { -1' 10' 100' 1000' 10000' 100000' 1000000 };
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,DateTimeParser,The following statement contains a magic number: Power10 = new[] { -1' 10' 100' 1000' 10000' 100000' 1000000 };
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,DateTimeParser,The following statement contains a magic number: Power10 = new[] { -1' 10' 100' 1000' 10000' 100000' 1000000 };
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,ParseDate,The following statement contains a magic number: return (Parse4Digit(start' out Year)                      && 1 <= Year                      && ParseChar(start + Lzyyyy' '-')                      && Parse2Digit(start + Lzyyyy_' out Month)                      && 1 <= Month                      && Month <= 12                      && ParseChar(start + Lzyyyy_MM' '-')                      && Parse2Digit(start + Lzyyyy_MM_' out Day)                      && 1 <= Day                      && Day <= DateTime.DaysInMonth(Year' Month));
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,ParseTime,The following statement contains a magic number: !(Parse2Digit(start' out Hour)                    && Hour <= 24                    && ParseChar(start + LzHH' ':')                    && Parse2Digit(start + LzHH_' out Minute)                    && Minute < 60                    && ParseChar(start + LzHH_mm' ':')                    && Parse2Digit(start + LzHH_mm_' out Second)                    && Second < 60                    && (Hour != 24 || (Minute == 0 && Second == 0)))
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,ParseTime,The following statement contains a magic number: !(Parse2Digit(start' out Hour)                    && Hour <= 24                    && ParseChar(start + LzHH' ':')                    && Parse2Digit(start + LzHH_' out Minute)                    && Minute < 60                    && ParseChar(start + LzHH_mm' ':')                    && Parse2Digit(start + LzHH_mm_' out Second)                    && Second < 60                    && (Hour != 24 || (Minute == 0 && Second == 0)))
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,ParseTime,The following statement contains a magic number: !(Parse2Digit(start' out Hour)                    && Hour <= 24                    && ParseChar(start + LzHH' ':')                    && Parse2Digit(start + LzHH_' out Minute)                    && Minute < 60                    && ParseChar(start + LzHH_mm' ':')                    && Parse2Digit(start + LzHH_mm_' out Second)                    && Second < 60                    && (Hour != 24 || (Minute == 0 && Second == 0)))
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,ParseTime,The following statement contains a magic number: !(Parse2Digit(start' out Hour)                    && Hour <= 24                    && ParseChar(start + LzHH' ':')                    && Parse2Digit(start + LzHH_' out Minute)                    && Minute < 60                    && ParseChar(start + LzHH_mm' ':')                    && Parse2Digit(start + LzHH_mm_' out Second)                    && Second < 60                    && (Hour != 24 || (Minute == 0 && Second == 0)))
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,ParseTime,The following statement contains a magic number: digit < 0 || digit > 9
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,ParseTime,The following statement contains a magic number: Fraction = (Fraction * 10) + digit;
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,ParseTime,The following statement contains a magic number: Hour == 24 && Fraction != 0
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: int digit3 = _text[start + 2] - '0';
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: int digit4 = _text[start + 3] - '0';
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: num = (((((digit1 * 10) + digit2) * 10) + digit3) * 10) + digit4;
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: num = (((((digit1 * 10) + digit2) * 10) + digit3) * 10) + digit4;
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: num = (((((digit1 * 10) + digit2) * 10) + digit3) * 10) + digit4;
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: 0 <= digit1 && digit1 < 10                      && 0 <= digit2 && digit2 < 10                      && 0 <= digit3 && digit3 < 10                      && 0 <= digit4 && digit4 < 10
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: 0 <= digit1 && digit1 < 10                      && 0 <= digit2 && digit2 < 10                      && 0 <= digit3 && digit3 < 10                      && 0 <= digit4 && digit4 < 10
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: 0 <= digit1 && digit1 < 10                      && 0 <= digit2 && digit2 < 10                      && 0 <= digit3 && digit3 < 10                      && 0 <= digit4 && digit4 < 10
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: 0 <= digit1 && digit1 < 10                      && 0 <= digit2 && digit2 < 10                      && 0 <= digit3 && digit3 < 10                      && 0 <= digit4 && digit4 < 10
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,Parse4Digit,The following statement contains a magic number: start + 3 < _end
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,Parse2Digit,The following statement contains a magic number: num = (digit1 * 10) + digit2;
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,Parse2Digit,The following statement contains a magic number: 0 <= digit1 && digit1 < 10                      && 0 <= digit2 && digit2 < 10
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,Parse2Digit,The following statement contains a magic number: 0 <= digit1 && digit1 < 10                      && 0 <= digit2 && digit2 < 10
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] { 0' 31' 59' 90' 120' 151' 181' 212' 243' 273' 304' 334' 365 };
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] { 0' 31' 59' 90' 120' 151' 181' 212' 243' 273' 304' 334' 365 };
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] { 0' 31' 59' 90' 120' 151' 181' 212' 243' 273' 304' 334' 365 };
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] { 0' 31' 59' 90' 120' 151' 181' 212' 243' 273' 304' 334' 365 };
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] { 0' 31' 59' 90' 120' 151' 181' 212' 243' 273' 304' 334' 365 };
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] { 0' 31' 59' 90' 120' 151' 181' 212' 243' 273' 304' 334' 365 };
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] { 0' 31' 59' 90' 120' 151' 181' 212' 243' 273' 304' 334' 365 };
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] { 0' 31' 59' 90' 120' 151' 181' 212' 243' 273' 304' 334' 365 };
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] { 0' 31' 59' 90' 120' 151' 181' 212' 243' 273' 304' 334' 365 };
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] { 0' 31' 59' 90' 120' 151' 181' 212' 243' 273' 304' 334' 365 };
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] { 0' 31' 59' 90' 120' 151' 181' 212' 243' 273' 304' 334' 365 };
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth365 = new[] { 0' 31' 59' 90' 120' 151' 181' 212' 243' 273' 304' 334' 365 };
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] { 0' 31' 60' 91' 121' 152' 182' 213' 244' 274' 305' 335' 366 };
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] { 0' 31' 60' 91' 121' 152' 182' 213' 244' 274' 305' 335' 366 };
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] { 0' 31' 60' 91' 121' 152' 182' 213' 244' 274' 305' 335' 366 };
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] { 0' 31' 60' 91' 121' 152' 182' 213' 244' 274' 305' 335' 366 };
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] { 0' 31' 60' 91' 121' 152' 182' 213' 244' 274' 305' 335' 366 };
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] { 0' 31' 60' 91' 121' 152' 182' 213' 244' 274' 305' 335' 366 };
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] { 0' 31' 60' 91' 121' 152' 182' 213' 244' 274' 305' 335' 366 };
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] { 0' 31' 60' 91' 121' 152' 182' 213' 244' 274' 305' 335' 366 };
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] { 0' 31' 60' 91' 121' 152' 182' 213' 244' 274' 305' 335' 366 };
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] { 0' 31' 60' 91' 121' 152' 182' 213' 244' 274' 305' 335' 366 };
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] { 0' 31' 60' 91' 121' 152' 182' 213' 244' 274' 305' 335' 366 };
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,DateTimeUtils,The following statement contains a magic number: DaysToMonth366 = new[] { 0' 31' 60' 91' 121' 152' 182' 213' 244' 274' 305' 335' 366 };
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,ToUniversalTicks,The following statement contains a magic number: return 3155378975999999999L;
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,ToUniversalTicks,The following statement contains a magic number: ticks > 3155378975999999999L
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,UniversialTicksToJavaScriptTicks,The following statement contains a magic number: long javaScriptTicks = (universialTicks - InitialJavaScriptDateTicks) / 10000;
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,ConvertJavaScriptTicksToDateTime,The following statement contains a magic number: DateTime dateTime = new DateTime((javaScriptTicks * 10000) + InitialJavaScriptDateTicks' DateTimeKind.Utc);
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,TryParseDateTimeOffsetIso,The following statement contains a magic number: ticks < 0 || ticks > 3155378975999999999
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,CreateDateTime,The following statement contains a magic number: dateTimeParser.Hour == 24
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,TryParseDateTime,The following statement contains a magic number: s.Length >= 9 && s.StartsWith("/Date(") && s.EndsWith(")/")
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,TryParseDateTime,The following statement contains a magic number: s.Length >= 9 && s.StartsWith("/Date("' StringComparison.Ordinal) && s.EndsWith(")/"' StringComparison.Ordinal)
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,TryParseDateTimeOffset,The following statement contains a magic number: s.Length >= 9 && s.StartsWith("/Date(") && s.EndsWith(")/")
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,TryParseDateTimeOffset,The following statement contains a magic number: s.Length >= 9 && s.StartsWith("/Date("' StringComparison.Ordinal) && s.EndsWith(")/"' StringComparison.Ordinal)
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,TryParseMicrosoftDate,The following statement contains a magic number: int index = text.IndexOf('+'' 7' text.Length - 8);
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,TryParseMicrosoftDate,The following statement contains a magic number: int index = text.IndexOf('+'' 7' text.Length - 8);
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,TryParseMicrosoftDate,The following statement contains a magic number: index = text.IndexOf('-'' 7' text.Length - 8);
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,TryParseMicrosoftDate,The following statement contains a magic number: index = text.IndexOf('-'' 7' text.Length - 8);
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,TryParseMicrosoftDate,The following statement contains a magic number: return (ConvertUtils.Int64TryParse(text.Chars' 6 + text.StartIndex' index - 6' out ticks) == ParseResult.Success);
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,TryParseMicrosoftDate,The following statement contains a magic number: return (ConvertUtils.Int64TryParse(text.Chars' 6 + text.StartIndex' index - 6' out ticks) == ParseResult.Success);
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,TryReadOffset,The following statement contains a magic number: ConvertUtils.Int32TryParse(offsetText.Chars' startIndex + 1' 2' out int hours) != ParseResult.Success
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,TryReadOffset,The following statement contains a magic number: ConvertUtils.Int32TryParse(offsetText.Chars' startIndex + 3' 2' out minutes) != ParseResult.Success
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,TryReadOffset,The following statement contains a magic number: ConvertUtils.Int32TryParse(offsetText.Chars' startIndex + 3' 2' out minutes) != ParseResult.Success
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,TryReadOffset,The following statement contains a magic number: offsetText.Length - startIndex > 5
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDateTimeString,The following statement contains a magic number: char[] chars = new char[64];
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDateTimeString,The following statement contains a magic number: @"\/Date(".CopyTo(0' chars' pos' 7);
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDateTimeString,The following statement contains a magic number: pos += 7;
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDateTimeString,The following statement contains a magic number: @")\/".CopyTo(0' chars' pos' 3);
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDateTimeString,The following statement contains a magic number: pos += 3;
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: int length = 19;
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray(chars' start' year' 4);
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: chars[start + 4] = '-';
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray(chars' start + 5' month' 2);
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray(chars' start + 5' month' 2);
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: chars[start + 7] = '-';
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray(chars' start + 8' day' 2);
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray(chars' start + 8' day' 2);
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: chars[start + 10] = 'T';
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray(chars' start + 11' dt.Hour' 2);
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray(chars' start + 11' dt.Hour' 2);
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: chars[start + 13] = ':';
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray(chars' start + 14' dt.Minute' 2);
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray(chars' start + 14' dt.Minute' 2);
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: chars[start + 16] = ':';
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray(chars' start + 17' dt.Second' 2);
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray(chars' start + 17' dt.Second' 2);
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: int fraction = (int)(dt.Ticks % 10000000L);
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: int digits = 7;
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: fraction /= 10;
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: (fraction % 10) == 0
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: chars[start + 19] = '.';
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDefaultIsoDate,The following statement contains a magic number: CopyIntToCharArray(chars' start + 20' fraction' digits);
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,CopyIntToCharArray,The following statement contains a magic number: chars[start + digits] = (char)((value % 10) + 48);
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,CopyIntToCharArray,The following statement contains a magic number: chars[start + digits] = (char)((value % 10) + 48);
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,CopyIntToCharArray,The following statement contains a magic number: value /= 10;
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDateTimeOffset,The following statement contains a magic number: CopyIntToCharArray(chars' start' absHours' 2);
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDateTimeOffset,The following statement contains a magic number: start += 2;
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDateTimeOffset,The following statement contains a magic number: CopyIntToCharArray(chars' start' absMinutes' 2);
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDateTimeOffset,The following statement contains a magic number: start += 2;
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDateTimeOffsetString,The following statement contains a magic number: char[] chars = new char[64];
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,GetDateValues,The following statement contains a magic number: y100 = 3;
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,GetDateValues,The following statement contains a magic number: y100 == 4
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,GetDateValues,The following statement contains a magic number: y1 = 3;
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,GetDateValues,The following statement contains a magic number: y1 == 4
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,GetDateValues,The following statement contains a magic number: year = y400 * 400 + y100 * 100 + y4 * 4 + y1 + 1;
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,GetDateValues,The following statement contains a magic number: year = y400 * 400 + y100 * 100 + y4 * 4 + y1 + 1;
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,GetDateValues,The following statement contains a magic number: year = y400 * 400 + y100 * 100 + y4 * 4 + y1 + 1;
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,GetDateValues,The following statement contains a magic number: bool leapYear = y1 == 3 && (y4 != 24 || y100 == 3);
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,GetDateValues,The following statement contains a magic number: bool leapYear = y1 == 3 && (y4 != 24 || y100 == 3);
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,GetDateValues,The following statement contains a magic number: bool leapYear = y1 == 3 && (y4 != 24 || y100 == 3);
Magic Number,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,GetDateValues,The following statement contains a magic number: int m = n >> 5 + 1;
Magic Number,Microsoft.IdentityModel.Json.Utilities,BinderWrapper,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DynamicUtils.cs,Init,The following statement contains a magic number: _setCSharpArgumentInfoArray = CreateSharpArgumentInfoArray(0' 3);
Magic Number,Microsoft.IdentityModel.Json.Utilities,MathUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: i < 10
Magic Number,Microsoft.IdentityModel.Json.Utilities,MathUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: return 2;
Magic Number,Microsoft.IdentityModel.Json.Utilities,MathUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: i < 100
Magic Number,Microsoft.IdentityModel.Json.Utilities,MathUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: return 3;
Magic Number,Microsoft.IdentityModel.Json.Utilities,MathUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: i < 1000
Magic Number,Microsoft.IdentityModel.Json.Utilities,MathUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: return 4;
Magic Number,Microsoft.IdentityModel.Json.Utilities,MathUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: i < 10000
Magic Number,Microsoft.IdentityModel.Json.Utilities,MathUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: return 5;
Magic Number,Microsoft.IdentityModel.Json.Utilities,MathUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: i < 100000
Magic Number,Microsoft.IdentityModel.Json.Utilities,MathUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: return 6;
Magic Number,Microsoft.IdentityModel.Json.Utilities,MathUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: i < 1000000
Magic Number,Microsoft.IdentityModel.Json.Utilities,MathUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: return 7;
Magic Number,Microsoft.IdentityModel.Json.Utilities,MathUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: i < 10000000
Magic Number,Microsoft.IdentityModel.Json.Utilities,MathUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: return 8;
Magic Number,Microsoft.IdentityModel.Json.Utilities,MathUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: i < 100000000
Magic Number,Microsoft.IdentityModel.Json.Utilities,MathUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: return 9;
Magic Number,Microsoft.IdentityModel.Json.Utilities,MathUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: i < 1000000000
Magic Number,Microsoft.IdentityModel.Json.Utilities,MathUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: return 10;
Magic Number,Microsoft.IdentityModel.Json.Utilities,MathUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\MathUtils.cs,IntLength,The following statement contains a magic number: i < 10000000000
Magic Number,Microsoft.IdentityModel.Json.Utilities,MathUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\MathUtils.cs,IntToHex,The following statement contains a magic number: return (char)(n + 48);
Magic Number,Microsoft.IdentityModel.Json.Utilities,MathUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\MathUtils.cs,IntToHex,The following statement contains a magic number: n <= 9
Magic Number,Microsoft.IdentityModel.Json.Utilities,MathUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\MathUtils.cs,IntToHex,The following statement contains a magic number: return (char)((n - 10) + 97);
Magic Number,Microsoft.IdentityModel.Json.Utilities,MathUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\MathUtils.cs,IntToHex,The following statement contains a magic number: return (char)((n - 10) + 97);
Magic Number,Microsoft.IdentityModel.Json.Utilities,MathUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\MathUtils.cs,ApproxEquals,The following statement contains a magic number: const double epsilon = 2.2204460492503131E-16;
Magic Number,Microsoft.IdentityModel.Json.Utilities,MathUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\MathUtils.cs,ApproxEquals,The following statement contains a magic number: double tolerance = ((Math.Abs(d1) + Math.Abs(d2)) + 10.0) * epsilon;
Magic Number,Microsoft.IdentityModel.Json.Utilities,StringBuffer,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\StringBuffer.cs,EnsureSize,The following statement contains a magic number: char[] newBuffer = BufferUtils.RentBuffer(bufferPool' (_position + appendLength) * 2);
Magic Number,Microsoft.IdentityModel.Json.Utilities,StringUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\StringUtils.cs,ToCharAsUnicode,The following statement contains a magic number: buffer[2] = MathUtils.IntToHex((c >> 12) & '\x000f');
Magic Number,Microsoft.IdentityModel.Json.Utilities,StringUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\StringUtils.cs,ToCharAsUnicode,The following statement contains a magic number: buffer[2] = MathUtils.IntToHex((c >> 12) & '\x000f');
Magic Number,Microsoft.IdentityModel.Json.Utilities,StringUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\StringUtils.cs,ToCharAsUnicode,The following statement contains a magic number: buffer[3] = MathUtils.IntToHex((c >> 8) & '\x000f');
Magic Number,Microsoft.IdentityModel.Json.Utilities,StringUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\StringUtils.cs,ToCharAsUnicode,The following statement contains a magic number: buffer[3] = MathUtils.IntToHex((c >> 8) & '\x000f');
Magic Number,Microsoft.IdentityModel.Json.Utilities,StringUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\StringUtils.cs,ToCharAsUnicode,The following statement contains a magic number: buffer[4] = MathUtils.IntToHex((c >> 4) & '\x000f');
Magic Number,Microsoft.IdentityModel.Json.Utilities,StringUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\StringUtils.cs,ToCharAsUnicode,The following statement contains a magic number: buffer[4] = MathUtils.IntToHex((c >> 4) & '\x000f');
Magic Number,Microsoft.IdentityModel.Json.Utilities,StringUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\StringUtils.cs,ToCharAsUnicode,The following statement contains a magic number: buffer[5] = MathUtils.IntToHex(c & '\x000f');
Duplicate Code,Microsoft.IdentityModel.Json.Linq,JValue,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JValue.Async.cs,Operation,The method contains a code clone-set at the following line numbers (starting from the method definition): ((57' 77)' (88' 108))
Missing Default,Microsoft.IdentityModel.Tokens,AsymmetricSignatureProvider,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\AsymmetricSignatureProvider.cs,GetHashAlgorithmString,The following switch statement is missing a default case: switch (algorithm)              {                  case SecurityAlgorithms.EcdsaSha256:                  case SecurityAlgorithms.EcdsaSha256Signature:                  case SecurityAlgorithms.RsaSha256:                  case SecurityAlgorithms.RsaSha256Signature:                      return SecurityAlgorithms.Sha256;                    case SecurityAlgorithms.EcdsaSha384:                  case SecurityAlgorithms.EcdsaSha384Signature:                  case SecurityAlgorithms.RsaSha384:                  case SecurityAlgorithms.RsaSha384Signature:                      return SecurityAlgorithms.Sha384;                    case SecurityAlgorithms.EcdsaSha512:                  case SecurityAlgorithms.EcdsaSha512Signature:                  case SecurityAlgorithms.RsaSha512:                  case SecurityAlgorithms.RsaSha512Signature:                      return SecurityAlgorithms.Sha512;              }
Missing Default,Microsoft.IdentityModel.Tokens,CryptoProviderFactory,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\CryptoProviderFactory.cs,CreateHashAlgorithm,The following switch statement is missing a default case: switch (algorithm)              {                  case SecurityAlgorithms.Sha256:                  case SecurityAlgorithms.Sha256Digest:                      return SHA256.Create();                    case SecurityAlgorithms.Sha384:                  case SecurityAlgorithms.Sha384Digest:                      return SHA384.Create();                    case SecurityAlgorithms.Sha512:                  case SecurityAlgorithms.Sha512Digest:                      return SHA512.Create();              }
Missing Default,Microsoft.IdentityModel.Tokens,SupportedAlgorithms,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\SupportedAlgorithms.cs,IsSupportedEcdsaAlgorithm,The following switch statement is missing a default case: switch (algorithm)              {                  case SecurityAlgorithms.EcdsaSha256:                  case SecurityAlgorithms.EcdsaSha256Signature:                  case SecurityAlgorithms.EcdsaSha384:                  case SecurityAlgorithms.EcdsaSha384Signature:                  case SecurityAlgorithms.EcdsaSha512:                  case SecurityAlgorithms.EcdsaSha512Signature:                      return true;              }
Missing Default,Microsoft.IdentityModel.Tokens,SupportedAlgorithms,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\SupportedAlgorithms.cs,IsSupportedRsaAlgorithm,The following switch statement is missing a default case: switch (algorithm)              {                  case SecurityAlgorithms.RsaSha256:                  case SecurityAlgorithms.RsaSha384:                  case SecurityAlgorithms.RsaSha512:                  case SecurityAlgorithms.RsaSha256Signature:                  case SecurityAlgorithms.RsaSha384Signature:                  case SecurityAlgorithms.RsaSha512Signature:                  case SecurityAlgorithms.RsaOAEP:                  case SecurityAlgorithms.RsaPKCS1:                  case SecurityAlgorithms.RsaOaepKeyWrap:                      return true;                  case SecurityAlgorithms.RsaSsaPssSha256:                  case SecurityAlgorithms.RsaSsaPssSha384:                  case SecurityAlgorithms.RsaSsaPssSha512:                  case SecurityAlgorithms.RsaSsaPssSha256Signature:                  case SecurityAlgorithms.RsaSsaPssSha384Signature:                  case SecurityAlgorithms.RsaSsaPssSha512Signature:                      return IsSupportedRsaPss(key);              }
Missing Default,Microsoft.IdentityModel.Tokens,SupportedAlgorithms,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\SupportedAlgorithms.cs,IsSupportedSymmetricAlgorithm,The following switch statement is missing a default case: switch (algorithm)              {                  case SecurityAlgorithms.Aes128CbcHmacSha256:                  case SecurityAlgorithms.Aes192CbcHmacSha384:                  case SecurityAlgorithms.Aes256CbcHmacSha512:                  case SecurityAlgorithms.Aes128KW:                  case SecurityAlgorithms.Aes256KW:                  case SecurityAlgorithms.HmacSha256Signature:                  case SecurityAlgorithms.HmacSha384Signature:                  case SecurityAlgorithms.HmacSha512Signature:                  case SecurityAlgorithms.HmacSha256:                  case SecurityAlgorithms.HmacSha384:                  case SecurityAlgorithms.HmacSha512:                      return true;              }
Missing Default,Microsoft.IdentityModel.Json,JsonConvert,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonConvert.cs,ToString,The following switch statement is missing a default case: switch (typeCode)              {                  case PrimitiveTypeCode.String:                      return ToString((string)value);                  case PrimitiveTypeCode.Char:                      return ToString((char)value);                  case PrimitiveTypeCode.Boolean:                      return ToString((bool)value);                  case PrimitiveTypeCode.SByte:                      return ToString((sbyte)value);                  case PrimitiveTypeCode.Int16:                      return ToString((short)value);                  case PrimitiveTypeCode.UInt16:                      return ToString((ushort)value);                  case PrimitiveTypeCode.Int32:                      return ToString((int)value);                  case PrimitiveTypeCode.Byte:                      return ToString((byte)value);                  case PrimitiveTypeCode.UInt32:                      return ToString((uint)value);                  case PrimitiveTypeCode.Int64:                      return ToString((long)value);                  case PrimitiveTypeCode.UInt64:                      return ToString((ulong)value);                  case PrimitiveTypeCode.Single:                      return ToString((float)value);                  case PrimitiveTypeCode.Double:                      return ToString((double)value);                  case PrimitiveTypeCode.DateTime:                      return ToString((DateTime)value);                  case PrimitiveTypeCode.Decimal:                      return ToString((decimal)value);  #if HAVE_DB_NULL_TYPE_CODE                  case PrimitiveTypeCode.DBNull:                      return Null;  #endif  #if HAVE_DATE_TIME_OFFSET                  case PrimitiveTypeCode.DateTimeOffset:                      return ToString((DateTimeOffset)value);  #endif                  case PrimitiveTypeCode.Guid:                      return ToString((Guid)value);                  case PrimitiveTypeCode.Uri:                      return ToString((Uri)value);                  case PrimitiveTypeCode.TimeSpan:                      return ToString((TimeSpan)value);  #if HAVE_BIG_INTEGER                  case PrimitiveTypeCode.BigInteger:                      return ToStringInternal((BigInteger)value);  #endif              }
Missing Default,Microsoft.IdentityModel.Json,JsonPosition,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonPosition.cs,WriteTo,The following switch statement is missing a default case: switch (Type)              {                  case JsonContainerType.Object:                      string propertyName = PropertyName;                      if (propertyName.IndexOfAny(SpecialCharacters) != -1)                      {                          sb.Append(@"['");                            if (writer == null)                          {                              writer = new StringWriter(sb);                          }                            JavaScriptUtils.WriteEscapedJavaScriptString(writer' propertyName' '\''' false' JavaScriptUtils.SingleQuoteCharEscapeFlags' StringEscapeHandling.Default' null' ref buffer);                            sb.Append(@"']");                      }                      else                      {                          if (sb.Length > 0)                          {                              sb.Append('.');                          }                            sb.Append(propertyName);                      }                      break;                  case JsonContainerType.Array:                  case JsonContainerType.Constructor:                      sb.Append('[');                      sb.Append(Position);                      sb.Append(']');                      break;              }
Missing Default,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,ReadAsInt32,The following switch statement is missing a default case: switch (t)              {                  case JsonToken.None:                  case JsonToken.Null:                  case JsonToken.EndArray:                      return null;                  case JsonToken.Integer:                  case JsonToken.Float:                      object v = Value;                      if (v is int i)                      {                          return i;                      }    #if HAVE_BIG_INTEGER                      if (v is BigInteger value)                      {                          i = (int)value;                      }                      else  #endif                      {                          try                          {                              i = Convert.ToInt32(v' CultureInfo.InvariantCulture);                          }                          catch (Exception ex)                          {                              // handle error for large integer overflow exceptions                              throw JsonReaderException.Create(this' "Could not convert to integer: {0}.".FormatWith(CultureInfo.InvariantCulture' v)' ex);                          }                      }                        SetToken(JsonToken.Integer' i' false);                      return i;                  case JsonToken.String:                      string s = (string)Value;                      return ReadInt32String(s);              }
Missing Default,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,ReadAsString,The following switch statement is missing a default case: switch (t)              {                  case JsonToken.None:                  case JsonToken.Null:                  case JsonToken.EndArray:                      return null;                  case JsonToken.String:                      return (string)Value;              }
Missing Default,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,ReadAsBytes,The following switch statement is missing a default case: switch (t)              {                  case JsonToken.StartObject:                  {                      ReadIntoWrappedTypeObject();                        byte[] data = ReadAsBytes();                      ReaderReadAndAssert();                        if (TokenType != JsonToken.EndObject)                      {                          throw JsonReaderException.Create(this' "Error reading bytes. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture' TokenType));                      }                        SetToken(JsonToken.Bytes' data' false);                      return data;                  }                  case JsonToken.String:                  {                      // attempt to convert possible base 64 or GUID string to bytes                      // GUID has to have format 00000000-0000-0000-0000-000000000000                      string s = (string)Value;                        byte[] data;                        if (s.Length == 0)                      {                          data = CollectionUtils.ArrayEmpty<byte>();                      }                      else if (ConvertUtils.TryConvertGuid(s' out Guid g1))                      {                          data = g1.ToByteArray();                      }                      else                      {                          data = Convert.FromBase64String(s);                      }                        SetToken(JsonToken.Bytes' data' false);                      return data;                  }                  case JsonToken.None:                  case JsonToken.Null:                  case JsonToken.EndArray:                      return null;                  case JsonToken.Bytes:                      if (Value is Guid g2)                      {                          byte[] data = g2.ToByteArray();                          SetToken(JsonToken.Bytes' data' false);                          return data;                      }                        return (byte[])Value;                  case JsonToken.StartArray:                      return ReadArrayIntoByteArray();              }
Missing Default,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,ReadAsDouble,The following switch statement is missing a default case: switch (t)              {                  case JsonToken.None:                  case JsonToken.Null:                  case JsonToken.EndArray:                      return null;                  case JsonToken.Integer:                  case JsonToken.Float:                      object v = Value;                      if (v is double d)                      {                          return d;                      }    #if HAVE_BIG_INTEGER                      if (v is BigInteger value)                      {                          d = (double)value;                      }                      else  #endif                      {                          d = Convert.ToDouble(v' CultureInfo.InvariantCulture);                      }                        SetToken(JsonToken.Float' d' false);                        return (double)d;                  case JsonToken.String:                      return ReadDoubleString((string)Value);              }
Missing Default,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,ReadAsBoolean,The following switch statement is missing a default case: switch (t)              {                  case JsonToken.None:                  case JsonToken.Null:                  case JsonToken.EndArray:                      return null;                  case JsonToken.Integer:                  case JsonToken.Float:                      bool b;  #if HAVE_BIG_INTEGER                      if (Value is BigInteger integer)                      {                          b = integer != 0;                      }                      else  #endif                      {                          b = Convert.ToBoolean(Value' CultureInfo.InvariantCulture);                      }                        SetToken(JsonToken.Boolean' b' false);                      return b;                  case JsonToken.String:                      return ReadBooleanString((string)Value);                  case JsonToken.Boolean:                      return (bool)Value;              }
Missing Default,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,ReadAsDecimal,The following switch statement is missing a default case: switch (t)              {                  case JsonToken.None:                  case JsonToken.Null:                  case JsonToken.EndArray:                      return null;                  case JsonToken.Integer:                  case JsonToken.Float:                      object v = Value;                        if (v is decimal d)                      {                          return d;                      }    #if HAVE_BIG_INTEGER                      if (v is BigInteger value)                      {                          d = (decimal)value;                      }                      else  #endif                      {                          try                          {                              d = Convert.ToDecimal(v' CultureInfo.InvariantCulture);                          }                          catch (Exception ex)                          {                              // handle error for large integer overflow exceptions                              throw JsonReaderException.Create(this' "Could not convert to decimal: {0}.".FormatWith(CultureInfo.InvariantCulture' v)' ex);                          }                      }                        SetToken(JsonToken.Float' d' false);                      return d;                  case JsonToken.String:                      return ReadDecimalString((string)Value);              }
Missing Default,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,ReadAsDateTime,The following switch statement is missing a default case: switch (GetContentToken())              {                  case JsonToken.None:                  case JsonToken.Null:                  case JsonToken.EndArray:                      return null;                  case JsonToken.Date:  #if HAVE_DATE_TIME_OFFSET                      if (Value is DateTimeOffset offset)                      {                          SetToken(JsonToken.Date' offset.DateTime' false);                      }  #endif                        return (DateTime)Value;                  case JsonToken.String:                      string s = (string)Value;                      return ReadDateTimeString(s);              }
Missing Default,Microsoft.IdentityModel.Json,JsonReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonReader.Async.cs,SetToken,The following switch statement is missing a default case: switch (newToken)              {                  case JsonToken.StartObject:                      _currentState = State.ObjectStart;                      Push(JsonContainerType.Object);                      break;                  case JsonToken.StartArray:                      _currentState = State.ArrayStart;                      Push(JsonContainerType.Array);                      break;                  case JsonToken.StartConstructor:                      _currentState = State.ConstructorStart;                      Push(JsonContainerType.Constructor);                      break;                  case JsonToken.EndObject:                      ValidateEnd(JsonToken.EndObject);                      break;                  case JsonToken.EndArray:                      ValidateEnd(JsonToken.EndArray);                      break;                  case JsonToken.EndConstructor:                      ValidateEnd(JsonToken.EndConstructor);                      break;                  case JsonToken.PropertyName:                      _currentState = State.Property;                        _currentPosition.PropertyName = (string)value;                      break;                  case JsonToken.Undefined:                  case JsonToken.Integer:                  case JsonToken.Float:                  case JsonToken.Boolean:                  case JsonToken.Null:                  case JsonToken.Date:                  case JsonToken.String:                  case JsonToken.Raw:                  case JsonToken.Bytes:                      SetPostValueState(updateIndex);                      break;              }
Missing Default,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseNumberNegativeInfinity,The following switch statement is missing a default case: switch (readType)                  {                      case ReadType.Read:                      case ReadType.ReadAsDouble:                          if (_floatParseHandling == FloatParseHandling.Double)                          {                              SetToken(JsonToken.Float' double.NegativeInfinity);                              return double.NegativeInfinity;                          }                          break;                      case ReadType.ReadAsString:                          SetToken(JsonToken.String' JsonConvert.NegativeInfinity);                          return JsonConvert.NegativeInfinity;                  }
Missing Default,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseNumberPositiveInfinity,The following switch statement is missing a default case: switch (readType)                  {                      case ReadType.Read:                      case ReadType.ReadAsDouble:                          if (_floatParseHandling == FloatParseHandling.Double)                          {                              SetToken(JsonToken.Float' double.PositiveInfinity);                              return double.PositiveInfinity;                          }                          break;                      case ReadType.ReadAsString:                          SetToken(JsonToken.String' JsonConvert.PositiveInfinity);                          return JsonConvert.PositiveInfinity;                  }
Missing Default,Microsoft.IdentityModel.Json,JsonTextReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonTextReader.Async.cs,ParseNumberNaN,The following switch statement is missing a default case: switch (readType)                  {                      case ReadType.Read:                      case ReadType.ReadAsDouble:                          if (_floatParseHandling == FloatParseHandling.Double)                          {                              SetToken(JsonToken.Float' double.NaN);                              return double.NaN;                          }                          break;                      case ReadType.ReadAsString:                          SetToken(JsonToken.String' JsonConvert.NaN);                          return JsonConvert.NaN;                  }
Missing Default,Microsoft.IdentityModel.Json,JsonWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\JsonWriter.Async.cs,AutoCompleteAsync,The following switch statement is missing a default case: switch (oldState)                  {                      case State.Object:                      case State.Array:                      case State.Constructor:                          return WriteValueDelimiterAsync(cancellationToken);                  }
Missing Default,Microsoft.IdentityModel.Json.Converters,ExpandoObjectConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\ExpandoObjectConverter.cs,ReadObject,The following switch statement is missing a default case: switch (reader.TokenType)                  {                      case JsonToken.PropertyName:                          string propertyName = reader.Value.ToString();                            if (!reader.Read())                          {                              throw JsonSerializationException.Create(reader' "Unexpected end when reading ExpandoObject.");                          }                            object v = ReadValue(reader);                            expandoObject[propertyName] = v;                          break;                      case JsonToken.Comment:                          break;                      case JsonToken.EndObject:                          return expandoObject;                  }
Missing Default,Microsoft.IdentityModel.Json.Converters,RegexConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\RegexConverter.cs,ReadJson,The following switch statement is missing a default case: switch (reader.TokenType)              {                  case JsonToken.StartObject:                      return ReadRegexObject(reader' serializer);                  case JsonToken.String:                      return ReadRegexString(reader);                  case JsonToken.Null:                      return null;              }
Missing Default,Microsoft.IdentityModel.Json.Converters,RegexConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\RegexConverter.cs,ReadRegexObject,The following switch statement is missing a default case: switch (reader.TokenType)                  {                      case JsonToken.PropertyName:                          string propertyName = reader.Value.ToString();                            if (!reader.Read())                          {                              throw JsonSerializationException.Create(reader' "Unexpected end when reading Regex.");                          }                            if (string.Equals(propertyName' PatternName' StringComparison.OrdinalIgnoreCase))                          {                              pattern = (string)reader.Value;                          }                          else if (string.Equals(propertyName' OptionsName' StringComparison.OrdinalIgnoreCase))                          {                              options = serializer.Deserialize<RegexOptions>(reader);                          }                          else                          {                              reader.Skip();                          }                          break;                      case JsonToken.Comment:                          break;                      case JsonToken.EndObject:                          if (pattern == null)                          {                              throw JsonSerializationException.Create(reader' "Error deserializing Regex. No pattern found.");                          }                            return new Regex(pattern' options ?? RegexOptions.None);                  }
Missing Default,Microsoft.IdentityModel.Json.Converters,XmlNodeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,ReadElement,The following switch statement is missing a default case: switch (propertyName)                      {                          case JsonTypeReflector.ArrayValuesPropertyName:                              propertyName = propertyName.Substring(1);                              elementPrefix = manager.LookupPrefix(JsonNamespaceUri);                              CreateElement(reader' document' currentNode' propertyName' manager' elementPrefix' attributeNameValues);                              return;                          case JsonTypeReflector.IdPropertyName:                          case JsonTypeReflector.RefPropertyName:                          case JsonTypeReflector.TypePropertyName:                          case JsonTypeReflector.ValuePropertyName:                              string attributeName = propertyName.Substring(1);                              string attributePrefix = manager.LookupPrefix(JsonNamespaceUri);                              AddAttribute(reader' document' currentNode' propertyName' attributeName' manager' attributePrefix);                              return;                      }
Missing Default,Microsoft.IdentityModel.Json.Converters,XmlNodeConverter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Converters\XmlNodeConverter.cs,ShouldReadInto,The following switch statement is missing a default case: switch (reader.TokenType)              {                  case JsonToken.String:                  case JsonToken.Null:                  case JsonToken.Boolean:                  case JsonToken.Integer:                  case JsonToken.Float:                  case JsonToken.Date:                  case JsonToken.Bytes:                  case JsonToken.StartConstructor:                      return false;              }
Missing Default,Microsoft.IdentityModel.Json.Linq,JToken,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JToken.Async.cs,ToObject,The following switch statement is missing a default case: switch (typeCode)                  {                      case PrimitiveTypeCode.BooleanNullable:                          return (bool?)this;                      case PrimitiveTypeCode.Boolean:                          return (bool)this;                      case PrimitiveTypeCode.CharNullable:                          return (char?)this;                      case PrimitiveTypeCode.Char:                          return (char)this;                      case PrimitiveTypeCode.SByte:                          return (sbyte)this;                      case PrimitiveTypeCode.SByteNullable:                          return (sbyte?)this;                      case PrimitiveTypeCode.ByteNullable:                          return (byte?)this;                      case PrimitiveTypeCode.Byte:                          return (byte)this;                      case PrimitiveTypeCode.Int16Nullable:                          return (short?)this;                      case PrimitiveTypeCode.Int16:                          return (short)this;                      case PrimitiveTypeCode.UInt16Nullable:                          return (ushort?)this;                      case PrimitiveTypeCode.UInt16:                          return (ushort)this;                      case PrimitiveTypeCode.Int32Nullable:                          return (int?)this;                      case PrimitiveTypeCode.Int32:                          return (int)this;                      case PrimitiveTypeCode.UInt32Nullable:                          return (uint?)this;                      case PrimitiveTypeCode.UInt32:                          return (uint)this;                      case PrimitiveTypeCode.Int64Nullable:                          return (long?)this;                      case PrimitiveTypeCode.Int64:                          return (long)this;                      case PrimitiveTypeCode.UInt64Nullable:                          return (ulong?)this;                      case PrimitiveTypeCode.UInt64:                          return (ulong)this;                      case PrimitiveTypeCode.SingleNullable:                          return (float?)this;                      case PrimitiveTypeCode.Single:                          return (float)this;                      case PrimitiveTypeCode.DoubleNullable:                          return (double?)this;                      case PrimitiveTypeCode.Double:                          return (double)this;                      case PrimitiveTypeCode.DecimalNullable:                          return (decimal?)this;                      case PrimitiveTypeCode.Decimal:                          return (decimal)this;                      case PrimitiveTypeCode.DateTimeNullable:                          return (DateTime?)this;                      case PrimitiveTypeCode.DateTime:                          return (DateTime)this;  #if HAVE_DATE_TIME_OFFSET                      case PrimitiveTypeCode.DateTimeOffsetNullable:                          return (DateTimeOffset?)this;                      case PrimitiveTypeCode.DateTimeOffset:                          return (DateTimeOffset)this;  #endif                      case PrimitiveTypeCode.String:                          return (string)this;                      case PrimitiveTypeCode.GuidNullable:                          return (Guid?)this;                      case PrimitiveTypeCode.Guid:                          return (Guid)this;                      case PrimitiveTypeCode.Uri:                          return (Uri)this;                      case PrimitiveTypeCode.TimeSpanNullable:                          return (TimeSpan?)this;                      case PrimitiveTypeCode.TimeSpan:                          return (TimeSpan)this;  #if HAVE_BIG_INTEGER                      case PrimitiveTypeCode.BigIntegerNullable:                          return ToBigIntegerNullable(this);                      case PrimitiveTypeCode.BigInteger:                          return ToBigInteger(this);  #endif                  }
Missing Default,Microsoft.IdentityModel.Json.Linq,JValue,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JValue.Async.cs,WriteToAsync,The following switch statement is missing a default case: switch (_valueType)              {                  case JTokenType.Comment:                      return writer.WriteCommentAsync(_value?.ToString()' cancellationToken);                  case JTokenType.Raw:                      return writer.WriteRawValueAsync(_value?.ToString()' cancellationToken);                  case JTokenType.Null:                      return writer.WriteNullAsync(cancellationToken);                  case JTokenType.Undefined:                      return writer.WriteUndefinedAsync(cancellationToken);                  case JTokenType.Integer:                      if (_value is int i)                      {                          return writer.WriteValueAsync(i' cancellationToken);                      }                        if (_value is long l)                      {                          return writer.WriteValueAsync(l' cancellationToken);                      }                        if (_value is ulong ul)                      {                          return writer.WriteValueAsync(ul' cancellationToken);                      }    #if HAVE_BIG_INTEGER                      if (_value is BigInteger integer)                      {                          return writer.WriteValueAsync(integer' cancellationToken);                      }  #endif                        return writer.WriteValueAsync(Convert.ToInt64(_value' CultureInfo.InvariantCulture)' cancellationToken);                  case JTokenType.Float:                      if (_value is decimal dec)                      {                          return writer.WriteValueAsync(dec' cancellationToken);                      }                        if (_value is double d)                      {                          return writer.WriteValueAsync(d' cancellationToken);                      }                        if (_value is float f)                      {                          return writer.WriteValueAsync(f' cancellationToken);                      }                        return writer.WriteValueAsync(Convert.ToDouble(_value' CultureInfo.InvariantCulture)' cancellationToken);                  case JTokenType.String:                      return writer.WriteValueAsync(_value?.ToString()' cancellationToken);                  case JTokenType.Boolean:                      return writer.WriteValueAsync(Convert.ToBoolean(_value' CultureInfo.InvariantCulture)' cancellationToken);                  case JTokenType.Date:                      if (_value is DateTimeOffset offset)                      {                          return writer.WriteValueAsync(offset' cancellationToken);                      }                        return writer.WriteValueAsync(Convert.ToDateTime(_value' CultureInfo.InvariantCulture)' cancellationToken);                  case JTokenType.Bytes:                      return writer.WriteValueAsync((byte[])_value' cancellationToken);                  case JTokenType.Guid:                      return writer.WriteValueAsync(_value != null ? (Guid?)_value : null' cancellationToken);                  case JTokenType.TimeSpan:                      return writer.WriteValueAsync(_value != null ? (TimeSpan?)_value : null' cancellationToken);                  case JTokenType.Uri:                      return writer.WriteValueAsync((Uri)_value' cancellationToken);              }
Missing Default,Microsoft.IdentityModel.Json.Linq,JValue,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JValue.Async.cs,Operation,The following switch statement is missing a default case: switch (operation)                  {                      case ExpressionType.Add:                      case ExpressionType.AddAssign:                          result = i1 + i2;                          return true;                      case ExpressionType.Subtract:                      case ExpressionType.SubtractAssign:                          result = i1 - i2;                          return true;                      case ExpressionType.Multiply:                      case ExpressionType.MultiplyAssign:                          result = i1 * i2;                          return true;                      case ExpressionType.Divide:                      case ExpressionType.DivideAssign:                          result = i1 / i2;                          return true;                  }
Missing Default,Microsoft.IdentityModel.Json.Linq,JValue,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JValue.Async.cs,Operation,The following switch statement is missing a default case: switch (operation)                      {                          case ExpressionType.Add:                          case ExpressionType.AddAssign:                              result = d1 + d2;                              return true;                          case ExpressionType.Subtract:                          case ExpressionType.SubtractAssign:                              result = d1 - d2;                              return true;                          case ExpressionType.Multiply:                          case ExpressionType.MultiplyAssign:                              result = d1 * d2;                              return true;                          case ExpressionType.Divide:                          case ExpressionType.DivideAssign:                              result = d1 / d2;                              return true;                      }
Missing Default,Microsoft.IdentityModel.Json.Linq,JValue,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JValue.Async.cs,Operation,The following switch statement is missing a default case: switch (operation)                      {                          case ExpressionType.Add:                          case ExpressionType.AddAssign:                              result = d1 + d2;                              return true;                          case ExpressionType.Subtract:                          case ExpressionType.SubtractAssign:                              result = d1 - d2;                              return true;                          case ExpressionType.Multiply:                          case ExpressionType.MultiplyAssign:                              result = d1 * d2;                              return true;                          case ExpressionType.Divide:                          case ExpressionType.DivideAssign:                              result = d1 / d2;                              return true;                      }
Missing Default,Microsoft.IdentityModel.Json.Linq,JValue,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JValue.Async.cs,Operation,The following switch statement is missing a default case: switch (operation)                      {                          case ExpressionType.Add:                          case ExpressionType.AddAssign:                              result = l1 + l2;                              return true;                          case ExpressionType.Subtract:                          case ExpressionType.SubtractAssign:                              result = l1 - l2;                              return true;                          case ExpressionType.Multiply:                          case ExpressionType.MultiplyAssign:                              result = l1 * l2;                              return true;                          case ExpressionType.Divide:                          case ExpressionType.DivideAssign:                              result = l1 / l2;                              return true;                      }
Missing Default,Microsoft.IdentityModel.Json.Linq,JValue,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JValue.Async.cs,WriteTo,The following switch statement is missing a default case: switch (_valueType)              {                  case JTokenType.Comment:                      writer.WriteComment(_value?.ToString());                      return;                  case JTokenType.Raw:                      writer.WriteRawValue(_value?.ToString());                      return;                  case JTokenType.Null:                      writer.WriteNull();                      return;                  case JTokenType.Undefined:                      writer.WriteUndefined();                      return;                  case JTokenType.Integer:                      if (_value is int i)                      {                          writer.WriteValue(i);                      }                      else if (_value is long l)                      {                          writer.WriteValue(l);                      }                      else if (_value is ulong ul)                      {                          writer.WriteValue(ul);                      }  #if HAVE_BIG_INTEGER                      else if (_value is BigInteger integer)                      {                          writer.WriteValue(integer);                      }  #endif                      else                      {                          writer.WriteValue(Convert.ToInt64(_value' CultureInfo.InvariantCulture));                      }                      return;                  case JTokenType.Float:                      if (_value is decimal dec)                      {                          writer.WriteValue(dec);                      }                      else if (_value is double d)                      {                          writer.WriteValue(d);                      }                      else if (_value is float f)                      {                          writer.WriteValue(f);                      }                      else                      {                          writer.WriteValue(Convert.ToDouble(_value' CultureInfo.InvariantCulture));                      }                      return;                  case JTokenType.String:                      writer.WriteValue(_value?.ToString());                      return;                  case JTokenType.Boolean:                      writer.WriteValue(Convert.ToBoolean(_value' CultureInfo.InvariantCulture));                      return;                  case JTokenType.Date:  #if HAVE_DATE_TIME_OFFSET                      if (_value is DateTimeOffset offset)                      {                          writer.WriteValue(offset);                      }                      else  #endif                      {                          writer.WriteValue(Convert.ToDateTime(_value' CultureInfo.InvariantCulture));                      }                      return;                  case JTokenType.Bytes:                      writer.WriteValue((byte[])_value);                      return;                  case JTokenType.Guid:                      writer.WriteValue((_value != null) ? (Guid?)_value : null);                      return;                  case JTokenType.TimeSpan:                      writer.WriteValue((_value != null) ? (TimeSpan?)_value : null);                      return;                  case JTokenType.Uri:                      writer.WriteValue((Uri)_value);                      return;              }
Missing Default,Microsoft.IdentityModel.Json.Linq,JValueDynamicProxy,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JValue.cs,TryBinaryOperation,The following switch statement is missing a default case: switch (binder.Operation)                  {                      case ExpressionType.Equal:                          result = (Compare(instance.Type' instance.Value' compareValue) == 0);                          return true;                      case ExpressionType.NotEqual:                          result = (Compare(instance.Type' instance.Value' compareValue) != 0);                          return true;                      case ExpressionType.GreaterThan:                          result = (Compare(instance.Type' instance.Value' compareValue) > 0);                          return true;                      case ExpressionType.GreaterThanOrEqual:                          result = (Compare(instance.Type' instance.Value' compareValue) >= 0);                          return true;                      case ExpressionType.LessThan:                          result = (Compare(instance.Type' instance.Value' compareValue) < 0);                          return true;                      case ExpressionType.LessThanOrEqual:                          result = (Compare(instance.Type' instance.Value' compareValue) <= 0);                          return true;                      case ExpressionType.Add:                      case ExpressionType.AddAssign:                      case ExpressionType.Subtract:                      case ExpressionType.SubtractAssign:                      case ExpressionType.Multiply:                      case ExpressionType.MultiplyAssign:                      case ExpressionType.Divide:                      case ExpressionType.DivideAssign:                          if (Operation(binder.Operation' instance.Value' compareValue' out result))                          {                              result = new JValue(result);                              return true;                          }                          break;                  }
Missing Default,Microsoft.IdentityModel.Json.Linq.JsonPath,BooleanQueryExpression,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JsonPath\QueryExpression.cs,MatchTokens,The following switch statement is missing a default case: switch (Operator)                  {                      case QueryOperator.RegexEquals:                          if (RegexEquals(leftValue' rightValue))                          {                              return true;                          }                          break;                      case QueryOperator.Equals:                          if (EqualsWithStringCoercion(leftValue' rightValue))                          {                              return true;                          }                          break;                      case QueryOperator.StrictEquals:                          if (EqualsWithStrictMatch(leftValue' rightValue))                          {                              return true;                          }                          break;                      case QueryOperator.NotEquals:                          if (!EqualsWithStringCoercion(leftValue' rightValue))                          {                              return true;                          }                          break;                      case QueryOperator.StrictNotEquals:                          if (!EqualsWithStrictMatch(leftValue' rightValue))                          {                              return true;                          }                          break;                      case QueryOperator.GreaterThan:                          if (leftValue.CompareTo(rightValue) > 0)                          {                              return true;                          }                          break;                      case QueryOperator.GreaterThanOrEquals:                          if (leftValue.CompareTo(rightValue) >= 0)                          {                              return true;                          }                          break;                      case QueryOperator.LessThan:                          if (leftValue.CompareTo(rightValue) < 0)                          {                              return true;                          }                          break;                      case QueryOperator.LessThanOrEquals:                          if (leftValue.CompareTo(rightValue) <= 0)                          {                              return true;                          }                          break;                      case QueryOperator.Exists:                          return true;                  }
Missing Default,Microsoft.IdentityModel.Json.Linq.JsonPath,BooleanQueryExpression,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Linq\JsonPath\QueryExpression.cs,MatchTokens,The following switch statement is missing a default case: switch (Operator)                  {                      case QueryOperator.Exists:                      // you can only specify primitive types in a comparison                      // notequals will always be true                      case QueryOperator.NotEquals:                          return true;                  }
Missing Default,Microsoft.IdentityModel.Json.Schema,JsonSchemaBuilder,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Schema\JsonSchemaBuilder.cs,ProcessSchemaProperties,The following switch statement is missing a default case: switch (property.Key)                  {                      case JsonSchemaConstants.TypePropertyName:                          CurrentSchema.Type = ProcessType(property.Value);                          break;                      case JsonSchemaConstants.IdPropertyName:                          CurrentSchema.Id = (string)property.Value;                          break;                      case JsonSchemaConstants.TitlePropertyName:                          CurrentSchema.Title = (string)property.Value;                          break;                      case JsonSchemaConstants.DescriptionPropertyName:                          CurrentSchema.Description = (string)property.Value;                          break;                      case JsonSchemaConstants.PropertiesPropertyName:                          CurrentSchema.Properties = ProcessProperties(property.Value);                          break;                      case JsonSchemaConstants.ItemsPropertyName:                          ProcessItems(property.Value);                          break;                      case JsonSchemaConstants.AdditionalPropertiesPropertyName:                          ProcessAdditionalProperties(property.Value);                          break;                      case JsonSchemaConstants.AdditionalItemsPropertyName:                          ProcessAdditionalItems(property.Value);                          break;                      case JsonSchemaConstants.PatternPropertiesPropertyName:                          CurrentSchema.PatternProperties = ProcessProperties(property.Value);                          break;                      case JsonSchemaConstants.RequiredPropertyName:                          CurrentSchema.Required = (bool)property.Value;                          break;                      case JsonSchemaConstants.RequiresPropertyName:                          CurrentSchema.Requires = (string)property.Value;                          break;                      case JsonSchemaConstants.MinimumPropertyName:                          CurrentSchema.Minimum = (double)property.Value;                          break;                      case JsonSchemaConstants.MaximumPropertyName:                          CurrentSchema.Maximum = (double)property.Value;                          break;                      case JsonSchemaConstants.ExclusiveMinimumPropertyName:                          CurrentSchema.ExclusiveMinimum = (bool)property.Value;                          break;                      case JsonSchemaConstants.ExclusiveMaximumPropertyName:                          CurrentSchema.ExclusiveMaximum = (bool)property.Value;                          break;                      case JsonSchemaConstants.MaximumLengthPropertyName:                          CurrentSchema.MaximumLength = (int)property.Value;                          break;                      case JsonSchemaConstants.MinimumLengthPropertyName:                          CurrentSchema.MinimumLength = (int)property.Value;                          break;                      case JsonSchemaConstants.MaximumItemsPropertyName:                          CurrentSchema.MaximumItems = (int)property.Value;                          break;                      case JsonSchemaConstants.MinimumItemsPropertyName:                          CurrentSchema.MinimumItems = (int)property.Value;                          break;                      case JsonSchemaConstants.DivisibleByPropertyName:                          CurrentSchema.DivisibleBy = (double)property.Value;                          break;                      case JsonSchemaConstants.DisallowPropertyName:                          CurrentSchema.Disallow = ProcessType(property.Value);                          break;                      case JsonSchemaConstants.DefaultPropertyName:                          CurrentSchema.Default = property.Value.DeepClone();                          break;                      case JsonSchemaConstants.HiddenPropertyName:                          CurrentSchema.Hidden = (bool)property.Value;                          break;                      case JsonSchemaConstants.ReadOnlyPropertyName:                          CurrentSchema.ReadOnly = (bool)property.Value;                          break;                      case JsonSchemaConstants.FormatPropertyName:                          CurrentSchema.Format = (string)property.Value;                          break;                      case JsonSchemaConstants.PatternPropertyName:                          CurrentSchema.Pattern = (string)property.Value;                          break;                      case JsonSchemaConstants.EnumPropertyName:                          ProcessEnum(property.Value);                          break;                      case JsonSchemaConstants.ExtendsPropertyName:                          ProcessExtends(property.Value);                          break;                      case JsonSchemaConstants.UniqueItemsPropertyName:                          CurrentSchema.UniqueItems = (bool)property.Value;                          break;                  }
Missing Default,Microsoft.IdentityModel.Json.Serialization,DefaultContractResolver,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultContractResolver.cs,IsConcurrentOrObservableCollection,The following switch statement is missing a default case: switch (definition.FullName)                  {                      case "System.Collections.Concurrent.ConcurrentQueue`1":                      case "System.Collections.Concurrent.ConcurrentStack`1":                      case "System.Collections.Concurrent.ConcurrentBag`1":                      case JsonTypeReflector.ConcurrentDictionaryTypeName:                      case "System.Collections.ObjectModel.ObservableCollection`1":                          return true;                  }
Missing Default,Microsoft.IdentityModel.Json.Serialization,DefaultSerializationBinder,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\DefaultSerializationBinder.cs,GetGenericTypeFromTypeName,The following switch statement is missing a default case: switch (current)                          {                              case '[':                                  if (scope == 0)                                  {                                      typeArgStartIndex = i + 1;                                  }                                  ++scope;                                  break;                              case ']':                                  --scope;                                  if (scope == 0)                                  {                                      string typeArgAssemblyQualifiedName = typeName.Substring(typeArgStartIndex' i - typeArgStartIndex);                                        StructMultiKey<string' string> typeNameKey = ReflectionUtils.SplitFullyQualifiedTypeName(typeArgAssemblyQualifiedName);                                      genericTypeArguments.Add(GetTypeByName(typeNameKey));                                  }                                  break;                          }
Missing Default,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CreateObject,The following switch statement is missing a default case: switch (contract.ContractType)              {                  case JsonContractType.Object:                  {                      bool createdFromNonDefaultCreator = false;                      JsonObjectContract objectContract = (JsonObjectContract)contract;                      object targetObject;                      // check that if type name handling is being used that the existing value is compatible with the specified type                      if (existingValue != null && (resolvedObjectType == objectType || resolvedObjectType.IsAssignableFrom(existingValue.GetType())))                      {                          targetObject = existingValue;                      }                      else                      {                          targetObject = CreateNewObject(reader' objectContract' member' containerMember' id' out createdFromNonDefaultCreator);                      }                        // don't populate if read from non-default creator because the object has already been read                      if (createdFromNonDefaultCreator)                      {                          return targetObject;                      }                        return PopulateObject(targetObject' reader' objectContract' member' id);                  }                  case JsonContractType.Primitive:                  {                      JsonPrimitiveContract primitiveContract = (JsonPrimitiveContract)contract;                      // if the content is inside $value then read past it                      if (Serializer.MetadataPropertyHandling != MetadataPropertyHandling.Ignore                          && reader.TokenType == JsonToken.PropertyName                          && string.Equals(reader.Value.ToString()' JsonTypeReflector.ValuePropertyName' StringComparison.Ordinal))                      {                          reader.ReadAndAssert();                            // the token should not be an object because the $type value could have been included in the object                          // without needing the $value property                          if (reader.TokenType == JsonToken.StartObject)                          {                              throw JsonSerializationException.Create(reader' "Unexpected token when deserializing primitive value: " + reader.TokenType);                          }                            object value = CreateValueInternal(reader' resolvedObjectType' primitiveContract' member' null' null' existingValue);                            reader.ReadAndAssert();                          return value;                      }                      break;                  }                  case JsonContractType.Dictionary:                  {                      JsonDictionaryContract dictionaryContract = (JsonDictionaryContract)contract;                      object targetDictionary;                        if (existingValue == null)                      {                          IDictionary dictionary = CreateNewDictionary(reader' dictionaryContract' out bool createdFromNonDefaultCreator);                            if (createdFromNonDefaultCreator)                          {                              if (id != null)                              {                                  throw JsonSerializationException.Create(reader' "Cannot preserve reference to readonly dictionary' or dictionary created from a non-default constructor: {0}.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType));                              }                                if (contract.OnSerializingCallbacks.Count > 0)                              {                                  throw JsonSerializationException.Create(reader' "Cannot call OnSerializing on readonly dictionary' or dictionary created from a non-default constructor: {0}.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType));                              }                                if (contract.OnErrorCallbacks.Count > 0)                              {                                  throw JsonSerializationException.Create(reader' "Cannot call OnError on readonly list' or dictionary created from a non-default constructor: {0}.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType));                              }                                if (!dictionaryContract.HasParameterizedCreatorInternal)                              {                                  throw JsonSerializationException.Create(reader' "Cannot deserialize readonly or fixed size dictionary: {0}.".FormatWith(CultureInfo.InvariantCulture' contract.UnderlyingType));                              }                          }                            PopulateDictionary(dictionary' reader' dictionaryContract' member' id);                            if (createdFromNonDefaultCreator)                          {                              ObjectConstructor<object> creator = dictionaryContract.OverrideCreator ?? dictionaryContract.ParameterizedCreator;                                return creator(dictionary);                          }                          else if (dictionary is IWrappedDictionary wrappedDictionary)                          {                              return wrappedDictionary.UnderlyingDictionary;                          }                            targetDictionary = dictionary;                      }                      else                      {                          targetDictionary = PopulateDictionary(dictionaryContract.ShouldCreateWrapper || !(existingValue is IDictionary) ? dictionaryContract.CreateWrapper(existingValue) : (IDictionary)existingValue' reader' dictionaryContract' member' id);                      }                        return targetDictionary;                  }  #if HAVE_DYNAMIC                  case JsonContractType.Dynamic:                      JsonDynamicContract dynamicContract = (JsonDynamicContract)contract;                      return CreateDynamic(reader' dynamicContract' member' id);  #endif  #if HAVE_BINARY_SERIALIZATION                  case JsonContractType.Serializable:                      JsonISerializableContract serializableContract = (JsonISerializableContract)contract;                      return CreateISerializable(reader' serializableContract' member' id);  #endif              }
Missing Default,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,CheckPropertyName,The following switch statement is missing a default case: switch (memberName)                  {                      case JsonTypeReflector.IdPropertyName:                      case JsonTypeReflector.RefPropertyName:                      case JsonTypeReflector.TypePropertyName:                      case JsonTypeReflector.ArrayValuesPropertyName:                          reader.Skip();                          return true;                  }
Missing Default,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalReader,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalReader.cs,EndProcessProperty,The following switch statement is missing a default case: switch (presence)                      {                          case PropertyPresence.None:                              if (resolvedRequired == Required.AllowNull || resolvedRequired == Required.Always)                              {                                  throw JsonSerializationException.Create(reader' "Required property '{0}' not found in JSON.".FormatWith(CultureInfo.InvariantCulture' property.PropertyName));                              }                                if (setDefaultValue && !property.Ignored)                              {                                  if (property.PropertyContract == null)                                  {                                      property.PropertyContract = GetContractSafe(property.PropertyType);                                  }                                    if (HasFlag(property.DefaultValueHandling.GetValueOrDefault(Serializer._defaultValueHandling)' DefaultValueHandling.Populate) && property.Writable)                                  {                                      property.ValueProvider.SetValue(newObject' EnsureType(reader' property.GetResolvedDefaultValue()' CultureInfo.InvariantCulture' property.PropertyContract' property.PropertyType));                                  }                              }                              break;                          case PropertyPresence.Null:                              if (resolvedRequired == Required.Always)                              {                                  throw JsonSerializationException.Create(reader' "Required property '{0}' expects a value but got null.".FormatWith(CultureInfo.InvariantCulture' property.PropertyName));                              }                              if (resolvedRequired == Required.DisallowNull)                              {                                  throw JsonSerializationException.Create(reader' "Required property '{0}' expects a non-null value.".FormatWith(CultureInfo.InvariantCulture' property.PropertyName));                              }                              break;                      }
Missing Default,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,SerializeValue,The following switch statement is missing a default case: switch (valueContract.ContractType)              {                  case JsonContractType.Object:                      SerializeObject(writer' value' (JsonObjectContract)valueContract' member' containerContract' containerProperty);                      break;                  case JsonContractType.Array:                      JsonArrayContract arrayContract = (JsonArrayContract)valueContract;                      if (!arrayContract.IsMultidimensionalArray)                      {                          SerializeList(writer' (IEnumerable)value' arrayContract' member' containerContract' containerProperty);                      }                      else                      {                          SerializeMultidimensionalArray(writer' (Array)value' arrayContract' member' containerContract' containerProperty);                      }                      break;                  case JsonContractType.Primitive:                      SerializePrimitive(writer' value' (JsonPrimitiveContract)valueContract' member' containerContract' containerProperty);                      break;                  case JsonContractType.String:                      SerializeString(writer' value' (JsonStringContract)valueContract);                      break;                  case JsonContractType.Dictionary:                      JsonDictionaryContract dictionaryContract = (JsonDictionaryContract)valueContract;                      SerializeDictionary(writer' (value is IDictionary dictionary) ? dictionary : dictionaryContract.CreateWrapper(value)' dictionaryContract' member' containerContract' containerProperty);                      break;  #if HAVE_DYNAMIC                  case JsonContractType.Dynamic:                      SerializeDynamic(writer' (IDynamicMetaObjectProvider)value' (JsonDynamicContract)valueContract' member' containerContract' containerProperty);                      break;  #endif  #if HAVE_BINARY_SERIALIZATION                  case JsonContractType.Serializable:                      SerializeISerializable(writer' (ISerializable)value' (JsonISerializableContract)valueContract' member' containerContract' containerProperty);                      break;  #endif                  case JsonContractType.Linq:                      ((JToken)value).WriteTo(writer' Serializer.Converters.ToArray());                      break;              }
Missing Default,Microsoft.IdentityModel.Json.Serialization,JsonSerializerInternalWriter,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Serialization\JsonSerializerInternalWriter.cs,CheckForCircularReference,The following switch statement is missing a default case: switch (referenceLoopHandling.GetValueOrDefault(Serializer._referenceLoopHandling))                  {                      case ReferenceLoopHandling.Error:                          throw JsonSerializationException.Create(null' writer.ContainerPath' message' null);                      case ReferenceLoopHandling.Ignore:                          if (TraceWriter != null && TraceWriter.LevelFilter >= TraceLevel.Verbose)                          {                              TraceWriter.Trace(TraceLevel.Verbose' JsonPosition.FormatMessage(null' writer.Path' message + ". Skipping serializing self referenced value.")' null);                          }                            return false;                      case ReferenceLoopHandling.Serialize:                          if (TraceWriter != null && TraceWriter.LevelFilter >= TraceLevel.Verbose)                          {                              TraceWriter.Trace(TraceLevel.Verbose' JsonPosition.FormatMessage(null' writer.Path' message + ". Serializing self referenced value.")' null);                          }                            return true;                  }
Missing Default,Microsoft.IdentityModel.Json.Utilities,ConvertUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ConvertUtils.cs,DecimalTryParse,The following switch statement is missing a default case: switch (c)                          {                              case '-':                                  exponentNegative = true;                                  i++;                                  break;                              case '+':                                  i++;                                  break;                          }
Missing Default,Microsoft.IdentityModel.Json.Utilities,DateTimeParser,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeParser.cs,ParseZone,The following switch statement is missing a default case: switch (ch)                          {                              case '-':                                  Zone = ParserTimeZone.LocalWestOfUtc;                                  start += Lz_zz;                                  break;                                case '+':                                  Zone = ParserTimeZone.LocalEastOfUtc;                                  start += Lz_zz;                                  break;                          }
Missing Default,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,SwitchToLocalTime,The following switch statement is missing a default case: switch (value.Kind)              {                  case DateTimeKind.Unspecified:                      return new DateTime(value.Ticks' DateTimeKind.Local);                    case DateTimeKind.Utc:                      return value.ToLocalTime();                    case DateTimeKind.Local:                      return value;              }
Missing Default,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,SwitchToUtcTime,The following switch statement is missing a default case: switch (value.Kind)              {                  case DateTimeKind.Unspecified:                      return new DateTime(value.Ticks' DateTimeKind.Utc);                    case DateTimeKind.Utc:                      return value;                    case DateTimeKind.Local:                      return value.ToUniversalTime();              }
Missing Default,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,TryParseDateTimeIso,The following switch statement is missing a default case: switch (dateTimeParser.Zone)              {                  case ParserTimeZone.Utc:                      d = new DateTime(d.Ticks' DateTimeKind.Utc);                      break;                    case ParserTimeZone.LocalWestOfUtc:                  {                      TimeSpan offset = new TimeSpan(dateTimeParser.ZoneHour' dateTimeParser.ZoneMinute' 0);                      ticks = d.Ticks + offset.Ticks;                      if (ticks <= DateTime.MaxValue.Ticks)                      {                          d = new DateTime(ticks' DateTimeKind.Utc).ToLocalTime();                      }                      else                      {                          ticks += d.GetUtcOffset().Ticks;                          if (ticks > DateTime.MaxValue.Ticks)                          {                              ticks = DateTime.MaxValue.Ticks;                          }                            d = new DateTime(ticks' DateTimeKind.Local);                      }                      break;                  }                  case ParserTimeZone.LocalEastOfUtc:                  {                      TimeSpan offset = new TimeSpan(dateTimeParser.ZoneHour' dateTimeParser.ZoneMinute' 0);                      ticks = d.Ticks - offset.Ticks;                      if (ticks >= DateTime.MinValue.Ticks)                      {                          d = new DateTime(ticks' DateTimeKind.Utc).ToLocalTime();                      }                      else                      {                          ticks += d.GetUtcOffset().Ticks;                          if (ticks < DateTime.MinValue.Ticks)                          {                              ticks = DateTime.MinValue.Ticks;                          }                            d = new DateTime(ticks' DateTimeKind.Local);                      }                      break;                  }              }
Missing Default,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDateTimeString,The following switch statement is missing a default case: switch (kind)                  {                      case DateTimeKind.Unspecified:                          if (value != DateTime.MaxValue && value != DateTime.MinValue)                          {                              pos = WriteDateTimeOffset(chars' pos' o' format);                          }                          break;                      case DateTimeKind.Local:                          pos = WriteDateTimeOffset(chars' pos' o' format);                          break;                  }
Missing Default,Microsoft.IdentityModel.Json.Utilities,DateTimeUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\DateTimeUtils.cs,WriteDateTimeString,The following switch statement is missing a default case: switch (kind)                  {                      case DateTimeKind.Local:                          pos = WriteDateTimeOffset(chars' pos' offset ?? value.GetUtcOffset()' format);                          break;                      case DateTimeKind.Utc:                          chars[pos++] = 'Z';                          break;                  }
Missing Default,Microsoft.IdentityModel.Json.Utilities,JavaScriptUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\JavaScriptUtils.cs,FirstCharToEscape,The following switch statement is missing a default case: switch (c)                      {                          case '\u0085':                          case '\u2028':                          case '\u2029':                              return i;                      }
Missing Default,Microsoft.IdentityModel.Json.Utilities,MiscellaneousUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\MiscellaneousUtils.cs,GetRegexOptions,The following switch statement is missing a default case: switch (c)                  {                      case 'i':                          options |= RegexOptions.IgnoreCase;                          break;                      case 'm':                          options |= RegexOptions.Multiline;                          break;                      case 's':                          options |= RegexOptions.Singleline;                          break;                      case 'x':                          options |= RegexOptions.ExplicitCapture;                          break;                  }
Missing Default,Microsoft.IdentityModel.Json.Utilities,ReflectionUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ReflectionUtils.cs,GetAssemblyDelimiterIndex,The following switch statement is missing a default case: switch (current)                  {                      case '[':                          scope++;                          break;                      case ']':                          scope--;                          break;                      case ''':                          if (scope == 0)                          {                              return i;                          }                          break;                  }
Missing Default,Microsoft.IdentityModel.Json.Utilities,ReflectionUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\ReflectionUtils.cs,GetDefaultValue,The following switch statement is missing a default case: switch (ConvertUtils.GetTypeCode(type))              {                  case PrimitiveTypeCode.Boolean:                      return false;                  case PrimitiveTypeCode.Char:                  case PrimitiveTypeCode.SByte:                  case PrimitiveTypeCode.Byte:                  case PrimitiveTypeCode.Int16:                  case PrimitiveTypeCode.UInt16:                  case PrimitiveTypeCode.Int32:                  case PrimitiveTypeCode.UInt32:                      return 0;                  case PrimitiveTypeCode.Int64:                  case PrimitiveTypeCode.UInt64:                      return 0L;                  case PrimitiveTypeCode.Single:                      return 0f;                  case PrimitiveTypeCode.Double:                      return 0.0;                  case PrimitiveTypeCode.Decimal:                      return 0m;                  case PrimitiveTypeCode.DateTime:                      return new DateTime();  #if HAVE_BIG_INTEGER                  case PrimitiveTypeCode.BigInteger:                      return new BigInteger();  #endif                  case PrimitiveTypeCode.Guid:                      return new Guid();  #if HAVE_DATE_TIME_OFFSET                  case PrimitiveTypeCode.DateTimeOffset:                      return new DateTimeOffset();  #endif              }
Missing Default,Microsoft.IdentityModel.Json.Utilities,StringUtils,D:\research\architectureSmells\repos\AzureAD_azure-activedirectory-identitymodel-extensions-for-dotnet\src\Microsoft.IdentityModel.Tokens\opensource\json\Utilities\StringUtils.cs,ToSnakeCase,The following switch statement is missing a default case: switch (state)                      {                          case SnakeCaseState.Upper:                              bool hasNext = (i + 1 < s.Length);                              if (i > 0 && hasNext)                              {                                  char nextChar = s[i + 1];                                  if (!char.IsUpper(nextChar) && nextChar != '_')                                  {                                      sb.Append('_');                                  }                              }                              break;                          case SnakeCaseState.Lower:                          case SnakeCaseState.NewWord:                              sb.Append('_');                              break;                      }
