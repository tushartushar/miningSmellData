Implementation smell,Namespace,Class,File,Method,Description
Long Method,PdfViewer,CustomScrollControl,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\CustomScrollControl.cs,PerformScroll,The method has 76 lines of code.
Long Method,PdfViewer,PdfViewer,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\PdfViewer.cs,InitializeComponent,The method has 79 lines of code.
Complex Method,PdfViewer,CustomScrollControl,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\CustomScrollControl.cs,ApplyScrollbarChanges,Cyclomatic complexity of the method is 10
Complex Method,PdfViewer,CustomScrollControl,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\CustomScrollControl.cs,SetDisplayRectLocation,Cyclomatic complexity of the method is 8
Complex Method,PdfViewer,CustomScrollControl,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\CustomScrollControl.cs,SetDisplayRectangleSize,Cyclomatic complexity of the method is 8
Complex Method,PdfViewer,CustomScrollControl,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\CustomScrollControl.cs,WmHScroll,Cyclomatic complexity of the method is 24
Complex Method,PdfViewer,CustomScrollControl,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\CustomScrollControl.cs,WmVScroll,Cyclomatic complexity of the method is 24
Complex Method,PdfViewer,CustomScrollControl,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\CustomScrollControl.cs,PerformScroll,Cyclomatic complexity of the method is 44
Complex Method,PdfViewer,CustomScrollControl,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\CustomScrollControl.cs,WndProc,Cyclomatic complexity of the method is 9
Complex Method,PdfViewer,CustomScrollControl,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\CustomScrollControl.cs,IsInputKey,Cyclomatic complexity of the method is 13
Complex Method,PdfViewer,DefaultSettings,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\DefaultSettings.cs,DefaultSettings,Cyclomatic complexity of the method is 7
Complex Method,PdfViewer,PanningZoomingScrollControl,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\PanningZoomingScrollControl.cs,IsInputKey,Cyclomatic complexity of the method is 21
Complex Method,PdfViewer,PdfRenderer,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\PdfRenderer.cs,GetPageImage,Cyclomatic complexity of the method is 11
Complex Method,PdfViewer,PdfViewer,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\PdfViewer.cs,_printButton_Click,Cyclomatic complexity of the method is 7
Complex Method,PdfViewer,ShadeBorder,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\ShadeBorder.cs,Dispose,Cyclomatic complexity of the method is 10
Long Parameter List,PdfViewer,CustomScrollControl,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\CustomScrollControl.cs,WmOnScroll,The method has 4 parameters.
Long Parameter List,PdfViewer,NativeMethods,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\NativeMethods.cs,RenderPDFPageToDC,The method has 15 parameters.
Long Parameter List,PdfViewer,NativeMethods,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\NativeMethods.cs,RenderPDFPageToDC,The method has 15 parameters.
Long Parameter List,PdfViewer,NativeMethods,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\NativeMethods.cs,GetPDFDocInfo,The method has 4 parameters.
Long Parameter List,PdfViewer,NativeMethods,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\NativeMethods.cs,GetPDFDocInfo,The method has 4 parameters.
Long Parameter List,PdfViewer,NativeMethods,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\NativeMethods.cs,CreateFileMapping,The method has 6 parameters.
Long Parameter List,PdfViewer,NativeMethods,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\NativeMethods.cs,MapViewOfFile,The method has 5 parameters.
Long Parameter List,PdfViewer,NativeMethods,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\NativeMethods.cs,ScrollWindowEx,The method has 8 parameters.
Long Parameter List,PdfViewer,NativeMethods,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\NativeMethods.cs,ScrollWindowEx,The method has 8 parameters.
Long Parameter List,PdfViewer,NativeMethods,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\NativeMethods.cs,ScrollWindowEx,The method has 8 parameters.
Long Parameter List,PdfViewer,NativeMethods,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\NativeMethods.cs,SetScrollInfo,The method has 4 parameters.
Long Parameter List,PdfViewer,NativeMethods,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\NativeMethods.cs,SendMessage,The method has 4 parameters.
Long Parameter List,PdfViewer,PdfDocument,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\PdfDocument.cs,Render,The method has 5 parameters.
Long Parameter List,PdfViewer,PdfRenderer,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\PdfRenderer.cs,DrawPageImage,The method has 4 parameters.
Long Parameter List,PdfViewer.Chrome,PdfBufferFile,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\Chrome\PdfBufferFile.cs,RenderPDFPageToDC,The method has 13 parameters.
Long Parameter List,PdfViewer.Chrome,PdfDocument,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\Chrome\PdfDocument.cs,Render,The method has 5 parameters.
Long Parameter List,PdfViewer.Chrome,PdfFile,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\Chrome\PdfFile.cs,RenderPDFPageToDC,The method has 13 parameters.
Long Parameter List,PdfViewer.Chrome,PdfFileHandleFile,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\Chrome\PdfFileHandleFile.cs,RenderPDFPageToDC,The method has 13 parameters.
Long Parameter List,PdfViewer.Chrome,PdfMemoryStreamFile,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\Chrome\PdfMemoryStreamFile.cs,RenderPDFPageToDC,The method has 13 parameters.
Long Parameter List,PdfViewer.XPdf,PdfDocument,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\XPdf\PdfDocument.cs,Render,The method has 5 parameters.
Long Statement,PdfViewer,CustomScrollControl,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\CustomScrollControl.cs,SetDisplayRectLocation,The length of the statement  "		NativeMethods.ScrollWindowEx (new HandleRef (this' Handle)' xDelta' yDelta' IntPtr.Zero' ref rcClip' IntPtr.Zero' ref rcUpdate' NativeMethods.SW_INVALIDATE | NativeMethods.SW_SCROLLCHILDREN); " is 191.
Long Statement,PdfViewer,PanningZoomingScrollControl,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\PanningZoomingScrollControl.cs,OnMouseWheel,The length of the statement  "		SetDisplayRectLocation (new Point (DisplayRectangle.Left - (newLocation.X - location.X)' DisplayRectangle.Top - (newLocation.Y - location.Y))' false); " is 150.
Long Statement,PdfViewer,PdfPrintDocument,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\PdfPrintDocument.cs,OnPrintPage,The length of the statement  "		_document.Render (_currentPage++' e.Graphics' e.PageSettings.PrinterResolution.X' e.PageSettings.PrinterResolution.Y' new Rectangle (0' 0' (int)((e.PageBounds.Width / 100.0) * e.PageSettings.PrinterResolution.X)' (int)((e.PageBounds.Height / 100.0) * e.PageSettings.PrinterResolution.Y))); " is 289.
Long Statement,PdfViewer,PdfPrintDocument,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\PdfPrintDocument.cs,OnPrintPage,The length of the statement  "	int pageCount = PrinterSettings.ToPage == 0 ? _document.PageCount : Math.Min (PrinterSettings.ToPage' _document.PageCount); " is 123.
Long Statement,PdfViewer,PdfRenderer,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\PdfRenderer.cs,GetScrollClientArea,The length of the statement  "	return new Rectangle (0' 0' scrollbars == ScrollBars.Vertical || scrollbars == ScrollBars.Both ? Width - SystemInformation.VerticalScrollBarWidth : Width' scrollbars == ScrollBars.Horizontal || scrollbars == ScrollBars.Both ? Height - SystemInformation.HorizontalScrollBarHeight : Height); " is 289.
Long Statement,PdfViewer,PdfRenderer,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\PdfRenderer.cs,OnPaint,The length of the statement  "			var pageBounds = new Rectangle (leftOffset + ShadeBorder.Size.Left + PageMargin.Left' offset + topOffset + ShadeBorder.Size.Top + PageMargin.Top' width' height); " is 161.
Long Statement,PdfViewer,PdfRenderer,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\PdfRenderer.cs,DrawPageImage,The length of the statement  "	var srcBounds = new Rectangle (Math.Max (clip.Left - pageBounds.Left' 0)' Math.Max (clip.Top - pageBounds.Top' 0)' Math.Min (clip.Right - pageBounds.Left' pageBounds.Width)' Math.Min (clip.Bottom - pageBounds.Top' pageBounds.Height)); " is 234.
Long Statement,PdfViewer,PdfRenderer,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\PdfRenderer.cs,DrawPageImage,The length of the statement  "	var destBounds = new Rectangle (pageBounds.Left + srcBounds.Left' pageBounds.Top + srcBounds.Top' srcBounds.Width' srcBounds.Height); " is 133.
Long Statement,PdfViewer,PdfViewer,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\PdfViewer.cs,_saveButton_Click,The length of the statement  "				MessageBox.Show (FindForm ()' Properties.Resources.SaveAsFailedText' Properties.Resources.SaveAsFailedTitle' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 153.
Long Statement,PdfViewer,PdfViewer,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\PdfViewer.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(PdfViewer)); " is 130.
Long Statement,PdfViewer,ShadeBorder,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\ShadeBorder.cs,Draw,The length of the statement  "	graphics.FillRectangle (_n' bounds.Left + (_nw.Width - Size.Left)' bounds.Top - Size.Top' bounds.Width - (_nw.Width - Size.Left) - (_nw.Width - Size.Right)' Size.Top); " is 167.
Long Statement,PdfViewer,ShadeBorder,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\ShadeBorder.cs,Draw,The length of the statement  "	graphics.FillRectangle (_e' bounds.Right' bounds.Top + (_ne.Height - Size.Top)' Size.Right' bounds.Height - (_ne.Height - Size.Top) - (_se.Height - Size.Bottom)); " is 162.
Long Statement,PdfViewer,ShadeBorder,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\ShadeBorder.cs,Draw,The length of the statement  "	graphics.FillRectangle (_s' bounds.Left + (_sw.Width - Size.Left)' bounds.Bottom' bounds.Width - (_sw.Width - Size.Left) - (_sw.Width - Size.Right)' Size.Bottom); " is 162.
Long Statement,PdfViewer,ShadeBorder,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\ShadeBorder.cs,Draw,The length of the statement  "	graphics.FillRectangle (_w' bounds.Left - Size.Left' bounds.Top + (_nw.Height - Size.Top)' Size.Left' bounds.Height - (_nw.Height - Size.Top) - (_sw.Height - Size.Bottom)); " is 172.
Long Statement,PdfViewer.Chrome,PdfBufferFile,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\Chrome\PdfBufferFile.cs,RenderPDFPageToDC,The length of the statement  "	return NativeMethods.RenderPDFPageToDC (_buffer' _length' pageNumber' dc' dpiX' dpiY' boundsOriginX' boundsOriginY' boundsWidth' boundsHeight' fitToBounds' stretchToBounds' keepAspectRation' centerInBounds' autoRotate); " is 219.
Long Statement,PdfViewer.Chrome,PdfDocument,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\Chrome\PdfDocument.cs,Render,The length of the statement  "		bool success = _file.RenderPDFPageToDC (page' dc' (int)dpiX' (int)dpiY' bounds.X' bounds.Y' bounds.Width' bounds.Height' true/* fitToBounds */' true/* stretchToBounds */' true/* keepAspectRatio */' true/* centerInBounds */' true/* autoRotate */); " is 246.
Long Statement,PdfViewer.Chrome,PdfFileHandleFile,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\Chrome\PdfFileHandleFile.cs,RenderPDFPageToDC,The length of the statement  "	return NativeMethods.RenderPDFPageToDC (_buffer' _length' pageNumber' dc' dpiX' dpiY' boundsOriginX' boundsOriginY' boundsWidth' boundsHeight' fitToBounds' stretchToBounds' keepAspectRation' centerInBounds' autoRotate); " is 219.
Long Statement,PdfViewer.Chrome,PdfMemoryStreamFile,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\Chrome\PdfMemoryStreamFile.cs,RenderPDFPageToDC,The length of the statement  "	return base.RenderPDFPageToDC (pageNumber' dc' dpiX' dpiY' boundsOriginX' boundsOriginY' boundsWidth' boundsHeight' fitToBounds' stretchToBounds' keepAspectRation' centerInBounds' autoRotate); " is 192.
Complex Conditional,PdfViewer,CustomScrollControl,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\CustomScrollControl.cs,SetDisplayRectLocation,The conditional expression  "(xDelta != 0 || yDelta != 0) && IsHandleCreated && preserveContents"  is complex.
Virtual Method Call from Constructor,PdfViewer.Chrome,PdfDocument,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\Chrome\PdfDocument.cs,PdfDocument,The constructor "PdfDocument" calls a virtual method "GetPDFDocInfo".
Empty Catch Block,PdfViewer,DefaultSettings,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\DefaultSettings.cs,DefaultSettings,The method has an empty catch block.
Empty Catch Block,PdfViewer,PdfViewer,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\PdfViewer.cs,_printButton_Click,The method has an empty catch block.
Magic Number,PdfViewer,CustomScrollControl,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\CustomScrollControl.cs,SyncScrollbars,The following statement contains a magic number: if (HScroll) {  	_horizontalScroll.Maximum = displayRect.Width - 1;  	_horizontalScroll.LargeChange = ClientRectangle.Width;  	_horizontalScroll.SmallChange = 5;  	if (-displayRect.X >= 0 && -displayRect.X < _horizontalScroll.Maximum)  		_horizontalScroll.Value = -displayRect.X;  	_horizontalScroll.UpdateScrollInfo ();  }  
Magic Number,PdfViewer,CustomScrollControl,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\CustomScrollControl.cs,SyncScrollbars,The following statement contains a magic number: _horizontalScroll.SmallChange = 5;  
Magic Number,PdfViewer,CustomScrollControl,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\CustomScrollControl.cs,SyncScrollbars,The following statement contains a magic number: if (VScroll) {  	_verticalScroll.Maximum = displayRect.Height - 1;  	_verticalScroll.LargeChange = ClientRectangle.Height;  	_verticalScroll.SmallChange = 5;  	if (-displayRect.Y >= 0 && -displayRect.Y < _verticalScroll.Maximum)  		_verticalScroll.Value = -displayRect.Y;  	_verticalScroll.UpdateScrollInfo ();  }  
Magic Number,PdfViewer,CustomScrollControl,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\CustomScrollControl.cs,SyncScrollbars,The following statement contains a magic number: _verticalScroll.SmallChange = 5;  
Magic Number,PdfViewer,DefaultSettings,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\DefaultSettings.cs,DefaultSettings,The following statement contains a magic number: using (var dialog = new PrintDialog ()) {  	bool found = false;  	try {  		foreach (PrinterResolution resolution in dialog.PrinterSettings.PrinterResolutions) {  			if (resolution.Kind == PrinterResolutionKind.Custom) {  				DpiX = resolution.X;  				DpiY = resolution.Y;  				Width = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Width / 100.0) * resolution.X);  				Height = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Height / 100.0) * resolution.Y);  				found = true;  				break;  			}  		}  	} catch {  		// Ignore any exceptions; just use defaults.  	}  	if (!found) {  		// Default to A4 size.  		DpiX = 600;  		DpiY = 500;  		Width = (int)(8.27 * DpiX);  		Height = (int)(11.69 * DpiY);  	}  }  
Magic Number,PdfViewer,DefaultSettings,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\DefaultSettings.cs,DefaultSettings,The following statement contains a magic number: using (var dialog = new PrintDialog ()) {  	bool found = false;  	try {  		foreach (PrinterResolution resolution in dialog.PrinterSettings.PrinterResolutions) {  			if (resolution.Kind == PrinterResolutionKind.Custom) {  				DpiX = resolution.X;  				DpiY = resolution.Y;  				Width = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Width / 100.0) * resolution.X);  				Height = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Height / 100.0) * resolution.Y);  				found = true;  				break;  			}  		}  	} catch {  		// Ignore any exceptions; just use defaults.  	}  	if (!found) {  		// Default to A4 size.  		DpiX = 600;  		DpiY = 500;  		Width = (int)(8.27 * DpiX);  		Height = (int)(11.69 * DpiY);  	}  }  
Magic Number,PdfViewer,DefaultSettings,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\DefaultSettings.cs,DefaultSettings,The following statement contains a magic number: using (var dialog = new PrintDialog ()) {  	bool found = false;  	try {  		foreach (PrinterResolution resolution in dialog.PrinterSettings.PrinterResolutions) {  			if (resolution.Kind == PrinterResolutionKind.Custom) {  				DpiX = resolution.X;  				DpiY = resolution.Y;  				Width = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Width / 100.0) * resolution.X);  				Height = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Height / 100.0) * resolution.Y);  				found = true;  				break;  			}  		}  	} catch {  		// Ignore any exceptions; just use defaults.  	}  	if (!found) {  		// Default to A4 size.  		DpiX = 600;  		DpiY = 500;  		Width = (int)(8.27 * DpiX);  		Height = (int)(11.69 * DpiY);  	}  }  
Magic Number,PdfViewer,DefaultSettings,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\DefaultSettings.cs,DefaultSettings,The following statement contains a magic number: using (var dialog = new PrintDialog ()) {  	bool found = false;  	try {  		foreach (PrinterResolution resolution in dialog.PrinterSettings.PrinterResolutions) {  			if (resolution.Kind == PrinterResolutionKind.Custom) {  				DpiX = resolution.X;  				DpiY = resolution.Y;  				Width = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Width / 100.0) * resolution.X);  				Height = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Height / 100.0) * resolution.Y);  				found = true;  				break;  			}  		}  	} catch {  		// Ignore any exceptions; just use defaults.  	}  	if (!found) {  		// Default to A4 size.  		DpiX = 600;  		DpiY = 500;  		Width = (int)(8.27 * DpiX);  		Height = (int)(11.69 * DpiY);  	}  }  
Magic Number,PdfViewer,DefaultSettings,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\DefaultSettings.cs,DefaultSettings,The following statement contains a magic number: using (var dialog = new PrintDialog ()) {  	bool found = false;  	try {  		foreach (PrinterResolution resolution in dialog.PrinterSettings.PrinterResolutions) {  			if (resolution.Kind == PrinterResolutionKind.Custom) {  				DpiX = resolution.X;  				DpiY = resolution.Y;  				Width = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Width / 100.0) * resolution.X);  				Height = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Height / 100.0) * resolution.Y);  				found = true;  				break;  			}  		}  	} catch {  		// Ignore any exceptions; just use defaults.  	}  	if (!found) {  		// Default to A4 size.  		DpiX = 600;  		DpiY = 500;  		Width = (int)(8.27 * DpiX);  		Height = (int)(11.69 * DpiY);  	}  }  
Magic Number,PdfViewer,DefaultSettings,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\DefaultSettings.cs,DefaultSettings,The following statement contains a magic number: using (var dialog = new PrintDialog ()) {  	bool found = false;  	try {  		foreach (PrinterResolution resolution in dialog.PrinterSettings.PrinterResolutions) {  			if (resolution.Kind == PrinterResolutionKind.Custom) {  				DpiX = resolution.X;  				DpiY = resolution.Y;  				Width = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Width / 100.0) * resolution.X);  				Height = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Height / 100.0) * resolution.Y);  				found = true;  				break;  			}  		}  	} catch {  		// Ignore any exceptions; just use defaults.  	}  	if (!found) {  		// Default to A4 size.  		DpiX = 600;  		DpiY = 500;  		Width = (int)(8.27 * DpiX);  		Height = (int)(11.69 * DpiY);  	}  }  
Magic Number,PdfViewer,DefaultSettings,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\DefaultSettings.cs,DefaultSettings,The following statement contains a magic number: try {  	foreach (PrinterResolution resolution in dialog.PrinterSettings.PrinterResolutions) {  		if (resolution.Kind == PrinterResolutionKind.Custom) {  			DpiX = resolution.X;  			DpiY = resolution.Y;  			Width = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Width / 100.0) * resolution.X);  			Height = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Height / 100.0) * resolution.Y);  			found = true;  			break;  		}  	}  } catch {  	// Ignore any exceptions; just use defaults.  }  
Magic Number,PdfViewer,DefaultSettings,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\DefaultSettings.cs,DefaultSettings,The following statement contains a magic number: try {  	foreach (PrinterResolution resolution in dialog.PrinterSettings.PrinterResolutions) {  		if (resolution.Kind == PrinterResolutionKind.Custom) {  			DpiX = resolution.X;  			DpiY = resolution.Y;  			Width = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Width / 100.0) * resolution.X);  			Height = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Height / 100.0) * resolution.Y);  			found = true;  			break;  		}  	}  } catch {  	// Ignore any exceptions; just use defaults.  }  
Magic Number,PdfViewer,DefaultSettings,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\DefaultSettings.cs,DefaultSettings,The following statement contains a magic number: foreach (PrinterResolution resolution in dialog.PrinterSettings.PrinterResolutions) {  	if (resolution.Kind == PrinterResolutionKind.Custom) {  		DpiX = resolution.X;  		DpiY = resolution.Y;  		Width = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Width / 100.0) * resolution.X);  		Height = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Height / 100.0) * resolution.Y);  		found = true;  		break;  	}  }  
Magic Number,PdfViewer,DefaultSettings,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\DefaultSettings.cs,DefaultSettings,The following statement contains a magic number: foreach (PrinterResolution resolution in dialog.PrinterSettings.PrinterResolutions) {  	if (resolution.Kind == PrinterResolutionKind.Custom) {  		DpiX = resolution.X;  		DpiY = resolution.Y;  		Width = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Width / 100.0) * resolution.X);  		Height = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Height / 100.0) * resolution.Y);  		found = true;  		break;  	}  }  
Magic Number,PdfViewer,DefaultSettings,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\DefaultSettings.cs,DefaultSettings,The following statement contains a magic number: if (resolution.Kind == PrinterResolutionKind.Custom) {  	DpiX = resolution.X;  	DpiY = resolution.Y;  	Width = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Width / 100.0) * resolution.X);  	Height = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Height / 100.0) * resolution.Y);  	found = true;  	break;  }  
Magic Number,PdfViewer,DefaultSettings,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\DefaultSettings.cs,DefaultSettings,The following statement contains a magic number: if (resolution.Kind == PrinterResolutionKind.Custom) {  	DpiX = resolution.X;  	DpiY = resolution.Y;  	Width = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Width / 100.0) * resolution.X);  	Height = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Height / 100.0) * resolution.Y);  	found = true;  	break;  }  
Magic Number,PdfViewer,DefaultSettings,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\DefaultSettings.cs,DefaultSettings,The following statement contains a magic number: Width = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Width / 100.0) * resolution.X);  
Magic Number,PdfViewer,DefaultSettings,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\DefaultSettings.cs,DefaultSettings,The following statement contains a magic number: Height = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Height / 100.0) * resolution.Y);  
Magic Number,PdfViewer,DefaultSettings,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\DefaultSettings.cs,DefaultSettings,The following statement contains a magic number: if (!found) {  	// Default to A4 size.  	DpiX = 600;  	DpiY = 500;  	Width = (int)(8.27 * DpiX);  	Height = (int)(11.69 * DpiY);  }  
Magic Number,PdfViewer,DefaultSettings,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\DefaultSettings.cs,DefaultSettings,The following statement contains a magic number: if (!found) {  	// Default to A4 size.  	DpiX = 600;  	DpiY = 500;  	Width = (int)(8.27 * DpiX);  	Height = (int)(11.69 * DpiY);  }  
Magic Number,PdfViewer,DefaultSettings,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\DefaultSettings.cs,DefaultSettings,The following statement contains a magic number: if (!found) {  	// Default to A4 size.  	DpiX = 600;  	DpiY = 500;  	Width = (int)(8.27 * DpiX);  	Height = (int)(11.69 * DpiY);  }  
Magic Number,PdfViewer,DefaultSettings,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\DefaultSettings.cs,DefaultSettings,The following statement contains a magic number: if (!found) {  	// Default to A4 size.  	DpiX = 600;  	DpiY = 500;  	Width = (int)(8.27 * DpiX);  	Height = (int)(11.69 * DpiY);  }  
Magic Number,PdfViewer,DefaultSettings,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\DefaultSettings.cs,DefaultSettings,The following statement contains a magic number: DpiX = 600;  
Magic Number,PdfViewer,DefaultSettings,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\DefaultSettings.cs,DefaultSettings,The following statement contains a magic number: DpiY = 500;  
Magic Number,PdfViewer,DefaultSettings,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\DefaultSettings.cs,DefaultSettings,The following statement contains a magic number: Width = (int)(8.27 * DpiX);  
Magic Number,PdfViewer,DefaultSettings,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\DefaultSettings.cs,DefaultSettings,The following statement contains a magic number: Height = (int)(11.69 * DpiY);  
Magic Number,PdfViewer,PdfPrintDocument,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\PdfPrintDocument.cs,OnPrintPage,The following statement contains a magic number: if (_currentPage < _document.PageCount) {  	_document.Render (_currentPage++' e.Graphics' e.PageSettings.PrinterResolution.X' e.PageSettings.PrinterResolution.Y' new Rectangle (0' 0' (int)((e.PageBounds.Width / 100.0) * e.PageSettings.PrinterResolution.X)' (int)((e.PageBounds.Height / 100.0) * e.PageSettings.PrinterResolution.Y)));  }  
Magic Number,PdfViewer,PdfPrintDocument,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\PdfPrintDocument.cs,OnPrintPage,The following statement contains a magic number: if (_currentPage < _document.PageCount) {  	_document.Render (_currentPage++' e.Graphics' e.PageSettings.PrinterResolution.X' e.PageSettings.PrinterResolution.Y' new Rectangle (0' 0' (int)((e.PageBounds.Width / 100.0) * e.PageSettings.PrinterResolution.X)' (int)((e.PageBounds.Height / 100.0) * e.PageSettings.PrinterResolution.Y)));  }  
Magic Number,PdfViewer,PdfPrintDocument,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\PdfPrintDocument.cs,OnPrintPage,The following statement contains a magic number: _document.Render (_currentPage++' e.Graphics' e.PageSettings.PrinterResolution.X' e.PageSettings.PrinterResolution.Y' new Rectangle (0' 0' (int)((e.PageBounds.Width / 100.0) * e.PageSettings.PrinterResolution.X)' (int)((e.PageBounds.Height / 100.0) * e.PageSettings.PrinterResolution.Y)));  
Magic Number,PdfViewer,PdfPrintDocument,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\PdfPrintDocument.cs,OnPrintPage,The following statement contains a magic number: _document.Render (_currentPage++' e.Graphics' e.PageSettings.PrinterResolution.X' e.PageSettings.PrinterResolution.Y' new Rectangle (0' 0' (int)((e.PageBounds.Width / 100.0) * e.PageSettings.PrinterResolution.X)' (int)((e.PageBounds.Height / 100.0) * e.PageSettings.PrinterResolution.Y)));  
Magic Number,PdfViewer,PdfRenderer,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\PdfRenderer.cs,UpdateScrollbars,The following statement contains a magic number: _maximumPageCache = Math.Max ((bounds.Height * 3) / averagePageHeight' 2);  
Magic Number,PdfViewer,PdfRenderer,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\PdfRenderer.cs,UpdateScrollbars,The following statement contains a magic number: _maximumPageCache = Math.Max ((bounds.Height * 3) / averagePageHeight' 2);  
Magic Number,PdfViewer,PdfRenderer,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\PdfRenderer.cs,GetDocumentBounds,The following statement contains a magic number: return new Rectangle (center.X - width / 2' center.Y - height / 2' width' height);  
Magic Number,PdfViewer,PdfRenderer,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\PdfRenderer.cs,GetDocumentBounds,The following statement contains a magic number: return new Rectangle (center.X - width / 2' center.Y - height / 2' width' height);  
Magic Number,PdfViewer.XPdf,PdfDocument,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\XPdf\PdfDocument.cs,Save,The following statement contains a magic number: using (var input = File.OpenRead (_path)) {  	var buffer = new byte[4096];  	int read;  	while ((read = input.Read (buffer' 0' buffer.Length)) != 0) {  		stream.Write (buffer' 0' read);  	}  }  
Missing Default,PdfViewer,CustomScrollControl,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\CustomScrollControl.cs,WmHScroll,The following switch statement is missing a default case: switch (NativeMethods.Util.LOWORD (m.WParam)) {  case NativeMethods.SB_THUMBPOSITION:  case NativeMethods.SB_THUMBTRACK:  	SetDisplayRectLocation (-ScrollThumbPosition (NativeMethods.SB_HORZ)' _displayRect.Y);  	SyncScrollbars ();  	break;  case NativeMethods.SB_LINEUP:  	PerformScroll (ScrollAction.LineUp' Orientation.Horizontal);  	break;  case NativeMethods.SB_LINEDOWN:  	PerformScroll (ScrollAction.LineDown' Orientation.Horizontal);  	break;  case NativeMethods.SB_PAGEUP:  	PerformScroll (ScrollAction.PageUp' Orientation.Horizontal);  	break;  case NativeMethods.SB_PAGEDOWN:  	PerformScroll (ScrollAction.PageDown' Orientation.Horizontal);  	break;  case NativeMethods.SB_LEFT:  	PerformScroll (ScrollAction.Home' Orientation.Horizontal);  	break;  case NativeMethods.SB_RIGHT:  	PerformScroll (ScrollAction.End' Orientation.Horizontal);  	break;  }  
Missing Default,PdfViewer,CustomScrollControl,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\CustomScrollControl.cs,WmVScroll,The following switch statement is missing a default case: switch (NativeMethods.Util.LOWORD (m.WParam)) {  case NativeMethods.SB_THUMBPOSITION:  case NativeMethods.SB_THUMBTRACK:  	SetDisplayRectLocation (_displayRect.X' -ScrollThumbPosition (NativeMethods.SB_VERT));  	SyncScrollbars ();  	break;  case NativeMethods.SB_LINEUP:  	PerformScroll (ScrollAction.LineUp' Orientation.Vertical);  	break;  case NativeMethods.SB_LINEDOWN:  	PerformScroll (ScrollAction.LineDown' Orientation.Vertical);  	break;  case NativeMethods.SB_PAGEUP:  	PerformScroll (ScrollAction.PageUp' Orientation.Vertical);  	break;  case NativeMethods.SB_PAGEDOWN:  	PerformScroll (ScrollAction.PageDown' Orientation.Vertical);  	break;  case NativeMethods.SB_TOP:  	PerformScroll (ScrollAction.Home' Orientation.Vertical);  	break;  case NativeMethods.SB_BOTTOM:  	PerformScroll (ScrollAction.End' Orientation.Vertical);  	break;  }  
Missing Default,PdfViewer,CustomScrollControl,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\CustomScrollControl.cs,PerformScroll,The following switch statement is missing a default case: switch (action) {  case ScrollAction.LineUp:  	if (pos > _horizontalScroll.SmallChange)  		pos -= _horizontalScroll.SmallChange;  	else  		pos = 0;  	break;  case ScrollAction.LineDown:  	if (pos < maxPos - _horizontalScroll.SmallChange)  		pos += _horizontalScroll.SmallChange;  	else  		pos = maxPos;  	break;  case ScrollAction.PageUp:  	if (pos > _horizontalScroll.LargeChange)  		pos -= _horizontalScroll.LargeChange;  	else  		pos = 0;  	break;  case ScrollAction.PageDown:  	if (pos < maxPos - _horizontalScroll.LargeChange)  		pos += _horizontalScroll.LargeChange;  	else  		pos = maxPos;  	break;  case ScrollAction.Home:  	pos = 0;  	break;  case ScrollAction.End:  	pos = maxPos;  	break;  }  
Missing Default,PdfViewer,CustomScrollControl,D:\newReposJune17\pvginkel_PdfViewer\PdfViewer\CustomScrollControl.cs,PerformScroll,The following switch statement is missing a default case: switch (action) {  case ScrollAction.LineUp:  	if (pos > 0)  		pos -= _verticalScroll.SmallChange;  	else  		pos = 0;  	break;  case ScrollAction.LineDown:  	if (pos < maxPos - _verticalScroll.SmallChange)  		pos += _verticalScroll.SmallChange;  	else  		pos = maxPos;  	break;  case ScrollAction.PageUp:  	if (pos > _verticalScroll.LargeChange)  		pos -= _verticalScroll.LargeChange;  	else  		pos = 0;  	break;  case ScrollAction.PageDown:  	if (pos < maxPos - _verticalScroll.LargeChange)  		pos += _verticalScroll.LargeChange;  	else  		pos = maxPos;  	break;  case ScrollAction.Home:  	pos = 0;  	break;  case ScrollAction.End:  	pos = maxPos;  	break;  }  
