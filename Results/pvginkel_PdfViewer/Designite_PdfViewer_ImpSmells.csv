Implementation smell,Namespace,Class,File,Method,Description
Complex Method,PdfViewer,CustomScrollControl,C:\repos\pvginkel_PdfViewer\PdfViewer\CustomScrollControl.cs,ApplyScrollbarChanges,Cyclomatic complexity of the method is 10
Complex Method,PdfViewer,CustomScrollControl,C:\repos\pvginkel_PdfViewer\PdfViewer\CustomScrollControl.cs,SetDisplayRectLocation,Cyclomatic complexity of the method is 8
Complex Method,PdfViewer,CustomScrollControl,C:\repos\pvginkel_PdfViewer\PdfViewer\CustomScrollControl.cs,SetDisplayRectangleSize,Cyclomatic complexity of the method is 8
Complex Method,PdfViewer,ShadeBorder,C:\repos\pvginkel_PdfViewer\PdfViewer\ShadeBorder.cs,Dispose,Cyclomatic complexity of the method is 10
Long Parameter List,PdfViewer,NativeMethods,C:\repos\pvginkel_PdfViewer\PdfViewer\NativeMethods.cs,RenderPDFPageToDC,The method has 15 parameters. Parameters: pdfBuffer' bufferSize' pageNumber' dc' dpiX' dpiY' boundsOriginX' boundsOriginY' boundsWidth' boundsHeight' fitToBounds' stretchToBounds' keepAspectRation' centerInBounds' autoRotate
Long Parameter List,PdfViewer,NativeMethods,C:\repos\pvginkel_PdfViewer\PdfViewer\NativeMethods.cs,RenderPDFPageToDC,The method has 15 parameters. Parameters: pdfBuffer' bufferSize' pageNumber' dc' dpiX' dpiY' boundsOriginX' boundsOriginY' boundsWidth' boundsHeight' fitToBounds' stretchToBounds' keepAspectRation' centerInBounds' autoRotate
Long Parameter List,PdfViewer,NativeMethods,C:\repos\pvginkel_PdfViewer\PdfViewer\NativeMethods.cs,CreateFileMapping,The method has 6 parameters. Parameters: hFile' lpFileMappingAttributes' flProtect' dwMaximumSizeHigh' dwMaximumSizeLow' lpName
Long Parameter List,PdfViewer,NativeMethods,C:\repos\pvginkel_PdfViewer\PdfViewer\NativeMethods.cs,MapViewOfFile,The method has 5 parameters. Parameters: hFileMappingObject' dwDesiredAccess' dwFileOffsetHigh' dwFileOffsetLow' dwNumberOfBytesToMap
Long Parameter List,PdfViewer,NativeMethods,C:\repos\pvginkel_PdfViewer\PdfViewer\NativeMethods.cs,ScrollWindowEx,The method has 8 parameters. Parameters: hWnd' dx' dy' prcScroll' prcClip' hrgnUpdate' prcUpdate' flags
Long Parameter List,PdfViewer,NativeMethods,C:\repos\pvginkel_PdfViewer\PdfViewer\NativeMethods.cs,ScrollWindowEx,The method has 8 parameters. Parameters: hWnd' dx' dy' prcScroll' prcClip' hrgnUpdate' prcUpdate' flags
Long Parameter List,PdfViewer,NativeMethods,C:\repos\pvginkel_PdfViewer\PdfViewer\NativeMethods.cs,ScrollWindowEx,The method has 8 parameters. Parameters: hWnd' dx' dy' prcScroll' prcClip' hrgnUpdate' prcUpdate' flags
Long Parameter List,PdfViewer,SCROLLINFO,C:\repos\pvginkel_PdfViewer\PdfViewer\NativeMethods.cs,SCROLLINFO,The method has 5 parameters. Parameters: mask' min' max' page' pos
Long Parameter List,PdfViewer,PdfDocument,C:\repos\pvginkel_PdfViewer\PdfViewer\PdfDocument.cs,Render,The method has 5 parameters. Parameters: page' graphics' dpiX' dpiY' bounds
Long Parameter List,PdfViewer.Chrome,PdfBufferFile,C:\repos\pvginkel_PdfViewer\PdfViewer\Chrome\PdfBufferFile.cs,RenderPDFPageToDC,The method has 13 parameters. Parameters: pageNumber' dc' dpiX' dpiY' boundsOriginX' boundsOriginY' boundsWidth' boundsHeight' fitToBounds' stretchToBounds' keepAspectRation' centerInBounds' autoRotate
Long Parameter List,PdfViewer.Chrome,PdfDocument,C:\repos\pvginkel_PdfViewer\PdfViewer\Chrome\PdfDocument.cs,Render,The method has 5 parameters. Parameters: page' graphics' dpiX' dpiY' bounds
Long Parameter List,PdfViewer.Chrome,PdfFile,C:\repos\pvginkel_PdfViewer\PdfViewer\Chrome\PdfFile.cs,RenderPDFPageToDC,The method has 13 parameters. Parameters: pageNumber' dc' dpiX' dpiY' boundsOriginX' boundsOriginY' boundsWidth' boundsHeight' fitToBounds' stretchToBounds' keepAspectRation' centerInBounds' autoRotate
Long Parameter List,PdfViewer.Chrome,PdfFileHandleFile,C:\repos\pvginkel_PdfViewer\PdfViewer\Chrome\PdfFileHandleFile.cs,RenderPDFPageToDC,The method has 13 parameters. Parameters: pageNumber' dc' dpiX' dpiY' boundsOriginX' boundsOriginY' boundsWidth' boundsHeight' fitToBounds' stretchToBounds' keepAspectRation' centerInBounds' autoRotate
Long Parameter List,PdfViewer.Chrome,PdfMemoryStreamFile,C:\repos\pvginkel_PdfViewer\PdfViewer\Chrome\PdfMemoryStreamFile.cs,RenderPDFPageToDC,The method has 13 parameters. Parameters: pageNumber' dc' dpiX' dpiY' boundsOriginX' boundsOriginY' boundsWidth' boundsHeight' fitToBounds' stretchToBounds' keepAspectRation' centerInBounds' autoRotate
Long Parameter List,PdfViewer.XPdf,PdfDocument,C:\repos\pvginkel_PdfViewer\PdfViewer\XPdf\PdfDocument.cs,Render,The method has 5 parameters. Parameters: page' graphics' dpiX' dpiY' bounds
Long Statement,PdfViewer,PdfRenderer,C:\repos\pvginkel_PdfViewer\PdfViewer\PdfRenderer.cs,GetScrollClientArea,The length of the statement  "                scrollbars == ScrollBars.Vertical || scrollbars == ScrollBars.Both ? Width - SystemInformation.VerticalScrollBarWidth : Width' " is 126.
Long Statement,PdfViewer,PdfRenderer,C:\repos\pvginkel_PdfViewer\PdfViewer\PdfRenderer.cs,GetScrollClientArea,The length of the statement  "                scrollbars == ScrollBars.Horizontal || scrollbars == ScrollBars.Both ? Height - SystemInformation.HorizontalScrollBarHeight : Height " is 132.
Long Statement,PdfViewer,PdfViewer,C:\repos\pvginkel_PdfViewer\PdfViewer\PdfViewer.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(PdfViewer)); " is 129.
Long Statement,PdfViewer.Chrome,PdfBufferFile,C:\repos\pvginkel_PdfViewer\PdfViewer\Chrome\PdfBufferFile.cs,RenderPDFPageToDC,The length of the statement  "            return NativeMethods.RenderPDFPageToDC(_buffer' _length' pageNumber' dc' dpiX' dpiY' boundsOriginX' boundsOriginY' boundsWidth' boundsHeight' fitToBounds' stretchToBounds' keepAspectRation' centerInBounds' autoRotate); " is 218.
Long Statement,PdfViewer.Chrome,PdfFileHandleFile,C:\repos\pvginkel_PdfViewer\PdfViewer\Chrome\PdfFileHandleFile.cs,RenderPDFPageToDC,The length of the statement  "            return NativeMethods.RenderPDFPageToDC(_buffer' _length' pageNumber' dc' dpiX' dpiY' boundsOriginX' boundsOriginY' boundsWidth' boundsHeight' fitToBounds' stretchToBounds' keepAspectRation' centerInBounds' autoRotate); " is 218.
Long Statement,PdfViewer.Chrome,PdfMemoryStreamFile,C:\repos\pvginkel_PdfViewer\PdfViewer\Chrome\PdfMemoryStreamFile.cs,RenderPDFPageToDC,The length of the statement  "            return base.RenderPDFPageToDC(pageNumber' dc' dpiX' dpiY' boundsOriginX' boundsOriginY' boundsWidth' boundsHeight' fitToBounds' stretchToBounds' keepAspectRation' centerInBounds' autoRotate); " is 191.
Complex Conditional,PdfViewer,CustomScrollControl,C:\repos\pvginkel_PdfViewer\PdfViewer\CustomScrollControl.cs,SetDisplayRectLocation,The conditional expression  "(xDelta != 0 || yDelta != 0) && IsHandleCreated && preserveContents"  is complex.
Virtual Method Call from Constructor,PdfViewer.Chrome,PdfDocument,C:\repos\pvginkel_PdfViewer\PdfViewer\Chrome\PdfDocument.cs,PdfDocument,The constructor "PdfDocument" calls a virtual method "GetPDFDocInfo".
Empty Catch Block,PdfViewer,DefaultSettings,C:\repos\pvginkel_PdfViewer\PdfViewer\DefaultSettings.cs,DefaultSettings,The method has an empty catch block.
Empty Catch Block,PdfViewer,PdfViewer,C:\repos\pvginkel_PdfViewer\PdfViewer\PdfViewer.cs,_printButton_Click,The method has an empty catch block.
Magic Number,PdfViewer,CustomScrollControl,C:\repos\pvginkel_PdfViewer\PdfViewer\CustomScrollControl.cs,SyncScrollbars,The following statement contains a magic number: if (HScroll)              {                  _horizontalScroll.Maximum = displayRect.Width - 1;                  _horizontalScroll.LargeChange = ClientRectangle.Width;                  _horizontalScroll.SmallChange = 5;                    if (-displayRect.X >= 0 && -displayRect.X < _horizontalScroll.Maximum)                      _horizontalScroll.Value = -displayRect.X;                    _horizontalScroll.UpdateScrollInfo();              }
Magic Number,PdfViewer,CustomScrollControl,C:\repos\pvginkel_PdfViewer\PdfViewer\CustomScrollControl.cs,SyncScrollbars,The following statement contains a magic number: if (VScroll)              {                  _verticalScroll.Maximum = displayRect.Height - 1;                  _verticalScroll.LargeChange = ClientRectangle.Height;                  _verticalScroll.SmallChange = 5;                    if (-displayRect.Y >= 0 && -displayRect.Y < _verticalScroll.Maximum)                      _verticalScroll.Value = -displayRect.Y;                    _verticalScroll.UpdateScrollInfo();              }
Magic Number,PdfViewer,ScrollProperties,C:\repos\pvginkel_PdfViewer\PdfViewer\CustomScrollControl.cs,ScrollProperties,The following statement contains a magic number: Maximum = 100;
Magic Number,PdfViewer,DefaultSettings,C:\repos\pvginkel_PdfViewer\PdfViewer\DefaultSettings.cs,DefaultSettings,The following statement contains a magic number: using (var dialog = new PrintDialog())              {                  bool found = false;                    try                  {                      foreach (PrinterResolution resolution in dialog.PrinterSettings.PrinterResolutions)                      {                          if (resolution.Kind == PrinterResolutionKind.Custom)                          {                              DpiX = resolution.X;                              DpiY = resolution.Y;                              Width = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Width / 100.0) * resolution.X);                              Height = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Height / 100.0) * resolution.Y);                                found = true;                              break;                          }                      }                  }                  catch                  {                      // Ignore any exceptions; just use defaults.                  }                    if (!found)                  {                      // Default to A4 size.                        DpiX = 600;                      DpiY = 500;                      Width = (int)(8.27 * DpiX);                      Height = (int)(11.69 * DpiY);                  }              }
Magic Number,PdfViewer,DefaultSettings,C:\repos\pvginkel_PdfViewer\PdfViewer\DefaultSettings.cs,DefaultSettings,The following statement contains a magic number: using (var dialog = new PrintDialog())              {                  bool found = false;                    try                  {                      foreach (PrinterResolution resolution in dialog.PrinterSettings.PrinterResolutions)                      {                          if (resolution.Kind == PrinterResolutionKind.Custom)                          {                              DpiX = resolution.X;                              DpiY = resolution.Y;                              Width = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Width / 100.0) * resolution.X);                              Height = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Height / 100.0) * resolution.Y);                                found = true;                              break;                          }                      }                  }                  catch                  {                      // Ignore any exceptions; just use defaults.                  }                    if (!found)                  {                      // Default to A4 size.                        DpiX = 600;                      DpiY = 500;                      Width = (int)(8.27 * DpiX);                      Height = (int)(11.69 * DpiY);                  }              }
Magic Number,PdfViewer,DefaultSettings,C:\repos\pvginkel_PdfViewer\PdfViewer\DefaultSettings.cs,DefaultSettings,The following statement contains a magic number: using (var dialog = new PrintDialog())              {                  bool found = false;                    try                  {                      foreach (PrinterResolution resolution in dialog.PrinterSettings.PrinterResolutions)                      {                          if (resolution.Kind == PrinterResolutionKind.Custom)                          {                              DpiX = resolution.X;                              DpiY = resolution.Y;                              Width = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Width / 100.0) * resolution.X);                              Height = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Height / 100.0) * resolution.Y);                                found = true;                              break;                          }                      }                  }                  catch                  {                      // Ignore any exceptions; just use defaults.                  }                    if (!found)                  {                      // Default to A4 size.                        DpiX = 600;                      DpiY = 500;                      Width = (int)(8.27 * DpiX);                      Height = (int)(11.69 * DpiY);                  }              }
Magic Number,PdfViewer,DefaultSettings,C:\repos\pvginkel_PdfViewer\PdfViewer\DefaultSettings.cs,DefaultSettings,The following statement contains a magic number: using (var dialog = new PrintDialog())              {                  bool found = false;                    try                  {                      foreach (PrinterResolution resolution in dialog.PrinterSettings.PrinterResolutions)                      {                          if (resolution.Kind == PrinterResolutionKind.Custom)                          {                              DpiX = resolution.X;                              DpiY = resolution.Y;                              Width = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Width / 100.0) * resolution.X);                              Height = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Height / 100.0) * resolution.Y);                                found = true;                              break;                          }                      }                  }                  catch                  {                      // Ignore any exceptions; just use defaults.                  }                    if (!found)                  {                      // Default to A4 size.                        DpiX = 600;                      DpiY = 500;                      Width = (int)(8.27 * DpiX);                      Height = (int)(11.69 * DpiY);                  }              }
Magic Number,PdfViewer,DefaultSettings,C:\repos\pvginkel_PdfViewer\PdfViewer\DefaultSettings.cs,DefaultSettings,The following statement contains a magic number: using (var dialog = new PrintDialog())              {                  bool found = false;                    try                  {                      foreach (PrinterResolution resolution in dialog.PrinterSettings.PrinterResolutions)                      {                          if (resolution.Kind == PrinterResolutionKind.Custom)                          {                              DpiX = resolution.X;                              DpiY = resolution.Y;                              Width = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Width / 100.0) * resolution.X);                              Height = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Height / 100.0) * resolution.Y);                                found = true;                              break;                          }                      }                  }                  catch                  {                      // Ignore any exceptions; just use defaults.                  }                    if (!found)                  {                      // Default to A4 size.                        DpiX = 600;                      DpiY = 500;                      Width = (int)(8.27 * DpiX);                      Height = (int)(11.69 * DpiY);                  }              }
Magic Number,PdfViewer,DefaultSettings,C:\repos\pvginkel_PdfViewer\PdfViewer\DefaultSettings.cs,DefaultSettings,The following statement contains a magic number: using (var dialog = new PrintDialog())              {                  bool found = false;                    try                  {                      foreach (PrinterResolution resolution in dialog.PrinterSettings.PrinterResolutions)                      {                          if (resolution.Kind == PrinterResolutionKind.Custom)                          {                              DpiX = resolution.X;                              DpiY = resolution.Y;                              Width = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Width / 100.0) * resolution.X);                              Height = (int)((dialog.PrinterSettings.DefaultPageSettings.PaperSize.Height / 100.0) * resolution.Y);                                found = true;                              break;                          }                      }                  }                  catch                  {                      // Ignore any exceptions; just use defaults.                  }                    if (!found)                  {                      // Default to A4 size.                        DpiX = 600;                      DpiY = 500;                      Width = (int)(8.27 * DpiX);                      Height = (int)(11.69 * DpiY);                  }              }
Magic Number,PdfViewer,PdfPrintDocument,C:\repos\pvginkel_PdfViewer\PdfViewer\PdfPrintDocument.cs,OnPrintPage,The following statement contains a magic number: if (_currentPage < _document.PageCount)              {                  _document.Render(                      _currentPage++'                      e.Graphics'                      e.PageSettings.PrinterResolution.X'                      e.PageSettings.PrinterResolution.Y'                      new Rectangle(                          0'                          0'                          (int)((e.PageBounds.Width / 100.0) * e.PageSettings.PrinterResolution.X)'                          (int)((e.PageBounds.Height / 100.0) * e.PageSettings.PrinterResolution.Y)                      )                  );              }
Magic Number,PdfViewer,PdfPrintDocument,C:\repos\pvginkel_PdfViewer\PdfViewer\PdfPrintDocument.cs,OnPrintPage,The following statement contains a magic number: if (_currentPage < _document.PageCount)              {                  _document.Render(                      _currentPage++'                      e.Graphics'                      e.PageSettings.PrinterResolution.X'                      e.PageSettings.PrinterResolution.Y'                      new Rectangle(                          0'                          0'                          (int)((e.PageBounds.Width / 100.0) * e.PageSettings.PrinterResolution.X)'                          (int)((e.PageBounds.Height / 100.0) * e.PageSettings.PrinterResolution.Y)                      )                  );              }
Magic Number,PdfViewer,PdfRenderer,C:\repos\pvginkel_PdfViewer\PdfViewer\PdfRenderer.cs,UpdateScrollbars,The following statement contains a magic number: _maximumPageCache = Math.Max((bounds.Height * 3) / averagePageHeight' 2);
Magic Number,PdfViewer,PdfRenderer,C:\repos\pvginkel_PdfViewer\PdfViewer\PdfRenderer.cs,UpdateScrollbars,The following statement contains a magic number: _maximumPageCache = Math.Max((bounds.Height * 3) / averagePageHeight' 2);
Magic Number,PdfViewer,PdfRenderer,C:\repos\pvginkel_PdfViewer\PdfViewer\PdfRenderer.cs,OnPaint,The following statement contains a magic number: int leftOffset = HScroll ? DisplayRectangle.X : (bounds.Width - maxWidth) / 2;
Magic Number,PdfViewer,PdfRenderer,C:\repos\pvginkel_PdfViewer\PdfViewer\PdfRenderer.cs,GetPageImage,The following statement contains a magic number: int renderDpi = Math.Max(150' imageDpi);
Magic Number,PdfViewer,PdfRenderer,C:\repos\pvginkel_PdfViewer\PdfViewer\PdfRenderer.cs,GetDocumentBounds,The following statement contains a magic number: var center = new Point(                  DisplayRectangle.Width / 2'                  DisplayRectangle.Height / 2              );
Magic Number,PdfViewer,PdfRenderer,C:\repos\pvginkel_PdfViewer\PdfViewer\PdfRenderer.cs,GetDocumentBounds,The following statement contains a magic number: var center = new Point(                  DisplayRectangle.Width / 2'                  DisplayRectangle.Height / 2              );
Magic Number,PdfViewer,PdfRenderer,C:\repos\pvginkel_PdfViewer\PdfViewer\PdfRenderer.cs,GetDocumentBounds,The following statement contains a magic number: return new Rectangle(                  center.X - width / 2'                  center.Y - height / 2'                  width'                  height              );
Magic Number,PdfViewer,PdfRenderer,C:\repos\pvginkel_PdfViewer\PdfViewer\PdfRenderer.cs,GetDocumentBounds,The following statement contains a magic number: return new Rectangle(                  center.X - width / 2'                  center.Y - height / 2'                  width'                  height              );
Magic Number,PdfViewer,StreamExtensions,C:\repos\pvginkel_PdfViewer\PdfViewer\StreamExtensions.cs,CopyStream,The following statement contains a magic number: var buffer = new byte[4096];
Magic Number,PdfViewer.XPdf,PdfDocument,C:\repos\pvginkel_PdfViewer\PdfViewer\XPdf\PdfDocument.cs,Save,The following statement contains a magic number: using (var input = File.OpenRead(_path))              {                  var buffer = new byte[4096];                  int read;                    while ((read = input.Read(buffer' 0' buffer.Length)) != 0)                  {                      stream.Write(buffer' 0' read);                  }              }
Missing Default,PdfViewer,CustomScrollControl,C:\repos\pvginkel_PdfViewer\PdfViewer\CustomScrollControl.cs,WmHScroll,The following switch statement is missing a default case: switch (NativeMethods.Util.LOWORD(m.WParam))              {                  case NativeMethods.SB_THUMBPOSITION:                  case NativeMethods.SB_THUMBTRACK:                      SetDisplayRectLocation(                          -ScrollThumbPosition(NativeMethods.SB_HORZ)'                          _displayRect.Y                      );                      SyncScrollbars();                      break;                    case NativeMethods.SB_LINEUP:                      PerformScroll(ScrollAction.LineUp' Orientation.Horizontal);                      break;                    case NativeMethods.SB_LINEDOWN:                      PerformScroll(ScrollAction.LineDown' Orientation.Horizontal);                      break;                    case NativeMethods.SB_PAGEUP:                      PerformScroll(ScrollAction.PageUp' Orientation.Horizontal);                      break;                    case NativeMethods.SB_PAGEDOWN:                      PerformScroll(ScrollAction.PageDown' Orientation.Horizontal);                      break;                    case NativeMethods.SB_LEFT:                      PerformScroll(ScrollAction.Home' Orientation.Horizontal);                      break;                    case NativeMethods.SB_RIGHT:                      PerformScroll(ScrollAction.End' Orientation.Horizontal);                      break;              }
Missing Default,PdfViewer,CustomScrollControl,C:\repos\pvginkel_PdfViewer\PdfViewer\CustomScrollControl.cs,WmVScroll,The following switch statement is missing a default case: switch (NativeMethods.Util.LOWORD(m.WParam))              {                  case NativeMethods.SB_THUMBPOSITION:                  case NativeMethods.SB_THUMBTRACK:                      SetDisplayRectLocation(                          _displayRect.X'                          -ScrollThumbPosition(NativeMethods.SB_VERT)                      );                      SyncScrollbars();                      break;                    case NativeMethods.SB_LINEUP:                      PerformScroll(ScrollAction.LineUp' Orientation.Vertical);                      break;                    case NativeMethods.SB_LINEDOWN:                      PerformScroll(ScrollAction.LineDown' Orientation.Vertical);                      break;                    case NativeMethods.SB_PAGEUP:                      PerformScroll(ScrollAction.PageUp' Orientation.Vertical);                      break;                    case NativeMethods.SB_PAGEDOWN:                      PerformScroll(ScrollAction.PageDown' Orientation.Vertical);                      break;                    case NativeMethods.SB_TOP:                      PerformScroll(ScrollAction.Home' Orientation.Vertical);                      break;                    case NativeMethods.SB_BOTTOM:                      PerformScroll(ScrollAction.End' Orientation.Vertical);                      break;              }
Missing Default,PdfViewer,CustomScrollControl,C:\repos\pvginkel_PdfViewer\PdfViewer\CustomScrollControl.cs,PerformScroll,The following switch statement is missing a default case: switch (action)                  {                      case ScrollAction.LineUp:                          if (pos > _horizontalScroll.SmallChange)                              pos -= _horizontalScroll.SmallChange;                          else                              pos = 0;                          break;                        case ScrollAction.LineDown:                          if (pos < maxPos - _horizontalScroll.SmallChange)                              pos += _horizontalScroll.SmallChange;                          else                              pos = maxPos;                          break;                        case ScrollAction.PageUp:                          if (pos > _horizontalScroll.LargeChange)                              pos -= _horizontalScroll.LargeChange;                          else                              pos = 0;                          break;                        case ScrollAction.PageDown:                          if (pos < maxPos - _horizontalScroll.LargeChange)                              pos += _horizontalScroll.LargeChange;                          else                              pos = maxPos;                          break;                        case ScrollAction.Home:                          pos = 0;                          break;                        case ScrollAction.End:                          pos = maxPos;                          break;                  }
Missing Default,PdfViewer,CustomScrollControl,C:\repos\pvginkel_PdfViewer\PdfViewer\CustomScrollControl.cs,PerformScroll,The following switch statement is missing a default case: switch (action)                  {                      case ScrollAction.LineUp:                          if (pos > 0)                              pos -= _verticalScroll.SmallChange;                          else                              pos = 0;                          break;                        case ScrollAction.LineDown:                          if (pos < maxPos - _verticalScroll.SmallChange)                              pos += _verticalScroll.SmallChange;                          else                              pos = maxPos;                          break;                        case ScrollAction.PageUp:                          if (pos > _verticalScroll.LargeChange)                              pos -= _verticalScroll.LargeChange;                          else                              pos = 0;                          break;                        case ScrollAction.PageDown:                          if (pos < maxPos - _verticalScroll.LargeChange)                              pos += _verticalScroll.LargeChange;                          else                              pos = maxPos;                          break;                        case ScrollAction.Home:                          pos = 0;                          break;                        case ScrollAction.End:                          pos = maxPos;                          break;                  }
