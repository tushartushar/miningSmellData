Implementation smell,Namespace,Class,File,Method,Description
Complex Method,PushSharp.Tests,TestApnsServer,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\Servers\TestApnsServer.cs,Parse,Cyclomatic complexity of the method is 17
Long Parameter List,PushSharp.Tests,ApnsTests,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\ApnsTests.cs,Apns,The method has 5 parameters. Parameters: expectFailed' numberNotifications' responseFilters' batchSize' scale
Long Parameter List,PushSharp.Tests,ApnsTests,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\ApnsTests.cs,Apns,The method has 5 parameters. Parameters: expectFailed' notifications' responseFilters' batchSize' scale
Long Statement,PushSharp.Tests,TestApnsServer,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\Servers\TestApnsServer.cs,Start,The length of the statement  "                                // Console.WriteLine (TAG + " -> Rx'd ID: {0}' DeviceToken: {1}' Payload: {2}"' notification.Identifier' notification.DeviceToken' notification.Payload); " is 153.
Long Statement,PushSharp.Tests,ApnsRealTest,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\ApnsRealTest.cs,APNS_Send_Single,The length of the statement  "            var config = new ApnsConfiguration (ApnsConfiguration.ApnsServerEnvironment.Sandbox' Settings.Instance.ApnsCertificateFile' Settings.Instance.ApnsCertificatePassword); " is 167.
Empty Catch Block,PushSharp.Tests,TestApnsServer,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\Servers\TestApnsServer.cs,Stop,The method has an empty catch block.
Empty Catch Block,PushSharp.Tests,TestApnsServer,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\Servers\TestApnsServer.cs,Stop,The method has an empty catch block.
Empty Catch Block,PushSharp.Tests,TestApnsServer,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\Servers\TestApnsServer.cs,Stop,The method has an empty catch block.
Empty Catch Block,PushSharp.Tests,TestApnsServer,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\Servers\TestApnsServer.cs,Start,The method has an empty catch block.
Empty Catch Block,PushSharp.Tests,TestApnsServer,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\Servers\TestApnsServer.cs,Start,The method has an empty catch block.
Empty Catch Block,PushSharp.Tests,TestApnsServer,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\Servers\TestApnsServer.cs,Start,The method has an empty catch block.
Empty Catch Block,PushSharp.Tests,TestApnsServer,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\Servers\TestApnsServer.cs,Start,The method has an empty catch block.
Magic Number,PushSharp.Tests,TestServiceConnection,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\TestServiceConnection.cs,Send,The following statement contains a magic number: await Task.Delay (250).ConfigureAwait (false);
Magic Number,PushSharp.Tests,TestApnsServer,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\Servers\TestApnsServer.cs,Start,The following statement contains a magic number: listener.Bind (new IPEndPoint (IPAddress.Any' 2195));
Magic Number,PushSharp.Tests,TestApnsServer,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\Servers\TestApnsServer.cs,Start,The following statement contains a magic number: listener.Listen (100);
Magic Number,PushSharp.Tests,TestApnsServer,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\Servers\TestApnsServer.cs,Start,The following statement contains a magic number: Task.Factory.StartNew (() => {                  #pragma warning restore 4014                        var sentErrorResponse = false;                      var s = socket;                      byte[] buffer = new byte[1024000]; // 1 MB                        var data = new List<byte> ();                        // Do processing' continually receiving from the socket                       while (true)                       {                           var received = s.Receive (buffer);                                                   if (received <= 0 && data.Count <= 0)                              break;                            totalBytesRx += received;                            Console.WriteLine (TAG + " -> Received {0} bytes..."' received);                            // Add the received data to our data list                          for (int i = 0; i < received; i++)                              data.Add (buffer [i]);                                                    ApnsServerNotification notification = null;                            try {                                                             while ((notification = Parse (data)) != null) {                                    if (!sentErrorResponse)                                      Successful++;                                    // Console.WriteLine (TAG + " -> Rx'd ID: {0}' DeviceToken: {1}' Payload: {2}"' notification.Identifier' notification.DeviceToken' notification.Payload);                                    foreach (var rf in ResponseFilters) {                                      if (rf.IsMatch (notification.Identifier' notification.DeviceToken' notification.Payload)) {                                          if (!sentErrorResponse)                                              SendErrorResponse (s' rf.Status' notification.Identifier);                                           sentErrorResponse = true;                                          break;                                      }                                  }                              }                                                              } catch (ApnsNotificationException ex) {                                Console.WriteLine (TAG + " -> Notification Exception: {0}"' ex);                                if (!sentErrorResponse)                                  SendErrorResponse (s' ex.ErrorStatusCode' ex.NotificationId);                              sentErrorResponse = true;                                break;                          }                                                   }                        try {                          s.Shutdown (SocketShutdown.Both);                      } catch {                      }                      try {                          s.Close ();                      } catch {                      }                      try {                          s.Dispose ();                      } catch {                      }                        Console.WriteLine (TAG + " -> Client Disconnected...");                  });
Magic Number,PushSharp.Tests,TestApnsServer,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\Servers\TestApnsServer.cs,SendErrorResponse,The following statement contains a magic number: var errorResponseData = new byte[6];
Magic Number,PushSharp.Tests,TestApnsServer,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\Servers\TestApnsServer.cs,SendErrorResponse,The following statement contains a magic number: Buffer.BlockCopy (id' 0' errorResponseData' 2' 4);
Magic Number,PushSharp.Tests,TestApnsServer,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\Servers\TestApnsServer.cs,SendErrorResponse,The following statement contains a magic number: Buffer.BlockCopy (id' 0' errorResponseData' 2' 4);
Magic Number,PushSharp.Tests,TestApnsServer,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\Servers\TestApnsServer.cs,Parse,The following statement contains a magic number: data.Count < 5
Magic Number,PushSharp.Tests,TestApnsServer,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\Servers\TestApnsServer.cs,Parse,The following statement contains a magic number: var apnsFrameLength = IPAddress.NetworkToHostOrder(BitConverter.ToInt32(data.GetRange (1' 4).ToArray ()' 0));
Magic Number,PushSharp.Tests,TestApnsServer,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\Servers\TestApnsServer.cs,Parse,The following statement contains a magic number: data.Count - 5 < apnsFrameLength
Magic Number,PushSharp.Tests,TestApnsServer,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\Servers\TestApnsServer.cs,Parse,The following statement contains a magic number: var frameData = data.GetRange (5' apnsFrameLength);
Magic Number,PushSharp.Tests,TestApnsServer,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\Servers\TestApnsServer.cs,Parse,The following statement contains a magic number: data.RemoveRange (0' apnsFrameLength + 5);
Magic Number,PushSharp.Tests,TestApnsServer,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\Servers\TestApnsServer.cs,Parse,The following statement contains a magic number: frameData.Count < 4
Magic Number,PushSharp.Tests,TestApnsServer,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\Servers\TestApnsServer.cs,Parse,The following statement contains a magic number: var itemLength = IPAddress.NetworkToHostOrder (BitConverter.ToInt16 (frameData.GetRange (1' 2).ToArray ()' 0));
Magic Number,PushSharp.Tests,TestApnsServer,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\Servers\TestApnsServer.cs,Parse,The following statement contains a magic number: frameData.Count - 3 < itemLength
Magic Number,PushSharp.Tests,TestApnsServer,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\Servers\TestApnsServer.cs,Parse,The following statement contains a magic number: var itemData = frameData.GetRange (3' itemLength);
Magic Number,PushSharp.Tests,TestApnsServer,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\Servers\TestApnsServer.cs,Parse,The following statement contains a magic number: frameData.RemoveRange (0' itemLength + 3);
Magic Number,PushSharp.Tests,TestApnsServer,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\Servers\TestApnsServer.cs,Parse,The following statement contains a magic number: notification.DeviceToken.Length != 64
Magic Number,PushSharp.Tests,ApnsTests,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\ApnsTests.cs,APNS_Multiple_Succeed,The following statement contains a magic number: await Apns (0' 3' new List<ApnsResponseFilter> ());
Magic Number,PushSharp.Tests,ApnsTests,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\ApnsTests.cs,APNS_Send_Many,The following statement contains a magic number: await Apns (10' 1010' new List<ApnsResponseFilter> {                  new ApnsResponseFilter ((id' deviceToken' payload) => {                      return id % 100 == 0;                  })              });
Magic Number,PushSharp.Tests,ApnsTests,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\ApnsTests.cs,APNS_Send_Many,The following statement contains a magic number: await Apns (10' 1010' new List<ApnsResponseFilter> {                  new ApnsResponseFilter ((id' deviceToken' payload) => {                      return id % 100 == 0;                  })              });
Magic Number,PushSharp.Tests,ApnsTests,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\ApnsTests.cs,APNS_Send_Many,The following statement contains a magic number: await Apns (10' 1010' new List<ApnsResponseFilter> {                  new ApnsResponseFilter ((id' deviceToken' payload) => {                      return id % 100 == 0;                  })              });
Magic Number,PushSharp.Tests,ApnsTests,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\ApnsTests.cs,APNS_Send_Small,The following statement contains a magic number: await Apns (2' 256' new List<ApnsResponseFilter> () {                  new ApnsResponseFilter ((id' deviceToken' payload) => {                      return id % 100 == 0;                  })              });
Magic Number,PushSharp.Tests,ApnsTests,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\ApnsTests.cs,APNS_Send_Small,The following statement contains a magic number: await Apns (2' 256' new List<ApnsResponseFilter> () {                  new ApnsResponseFilter ((id' deviceToken' payload) => {                      return id % 100 == 0;                  })              });
Magic Number,PushSharp.Tests,ApnsTests,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\ApnsTests.cs,APNS_Send_Small,The following statement contains a magic number: await Apns (2' 256' new List<ApnsResponseFilter> () {                  new ApnsResponseFilter ((id' deviceToken' payload) => {                      return id % 100 == 0;                  })              });
Magic Number,PushSharp.Tests,ApnsTests,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\ApnsTests.cs,APNS_Scale_Brokers,The following statement contains a magic number: await Apns (10' 10100' new List<ApnsResponseFilter> {                  new ApnsResponseFilter ((id' deviceToken' payload) => {                      return id % 1000 == 0;                  })              }' scale: 2);
Magic Number,PushSharp.Tests,ApnsTests,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\ApnsTests.cs,APNS_Scale_Brokers,The following statement contains a magic number: await Apns (10' 10100' new List<ApnsResponseFilter> {                  new ApnsResponseFilter ((id' deviceToken' payload) => {                      return id % 1000 == 0;                  })              }' scale: 2);
Magic Number,PushSharp.Tests,ApnsTests,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\ApnsTests.cs,APNS_Scale_Brokers,The following statement contains a magic number: await Apns (10' 10100' new List<ApnsResponseFilter> {                  new ApnsResponseFilter ((id' deviceToken' payload) => {                      return id % 1000 == 0;                  })              }' scale: 2);
Magic Number,PushSharp.Tests,ApnsTests,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\ApnsTests.cs,APNS_Scale_Brokers,The following statement contains a magic number: await Apns (10' 10100' new List<ApnsResponseFilter> {                  new ApnsResponseFilter ((id' deviceToken' payload) => {                      return id % 1000 == 0;                  })              }' scale: 2);
Magic Number,PushSharp.Tests,ApnsTests,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\ApnsTests.cs,Should_Fail_Connect,The following statement contains a magic number: int count = 2;
Magic Number,PushSharp.Tests,ApnsTests,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\ApnsTests.cs,Should_Fail_Connect,The following statement contains a magic number: var config = new ApnsConfiguration ("invalidhost"' 2195);
Magic Number,PushSharp.Tests,ApnsTests,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\ApnsTests.cs,Should_Fail_Connect,The following statement contains a magic number: broker.QueueNotification (new ApnsNotification {                      DeviceToken = (i + 1).ToString ().PadLeft (64' '0')'                      Payload = JObject.Parse (@"{""aps"":{""badge"":" + (i + 1) + "}}")                  });
Magic Number,PushSharp.Tests,ApnsTests,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\ApnsTests.cs,Apns,The following statement contains a magic number: notifications.Add (new ApnsNotification {                      DeviceToken = (i + 1).ToString ().PadLeft (64' '0')'                      Payload = JObject.Parse (@"{""aps"":{""badge"":" + (i + 1) + "}}")                  });
Magic Number,PushSharp.Tests,ApnsTests,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\ApnsTests.cs,Apns,The following statement contains a magic number: var config = new ApnsConfiguration ("127.0.0.1"' 2195) {                  InternalBatchSize = batchSize              };
Magic Number,PushSharp.Tests,BrokerTests,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\BrokerTests.cs,Broker_Send_Many,The following statement contains a magic number: i <= 1000
Magic Number,PushSharp.Tests,BrokerTests,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\BrokerTests.cs,Broker_Some_Fail,The following statement contains a magic number: const int count = 10;
Magic Number,PushSharp.Tests,BrokerTests,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\BrokerTests.cs,Broker_Some_Fail,The following statement contains a magic number: var failIds = new [] { 3' 5' 7 };
Magic Number,PushSharp.Tests,BrokerTests,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\BrokerTests.cs,Broker_Some_Fail,The following statement contains a magic number: var failIds = new [] { 3' 5' 7 };
Magic Number,PushSharp.Tests,BrokerTests,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\BrokerTests.cs,Broker_Some_Fail,The following statement contains a magic number: var failIds = new [] { 3' 5' 7 };
Magic Number,PushSharp.Tests,WnsRealTests,C:\research\architectureSmells\repos\Redth_PushSharp\PushSharp.Tests\WnsRealTests.cs,WNS_Send_Mutiple,The following statement contains a magic number: i <= 3
