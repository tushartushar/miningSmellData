Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Robotics.Mobile.Robotroller,DeviceDetail,C:\repos\xamarin_Monkey.Robotics\Sample Apps\MobileRobotroller\Robotics.Mobile.Robotroller.Core\Pages\DeviceDetail.xaml.cs,HandleGyroUpdated,The following statement contains a magic number: if (now - lastGyroUpdateTime > GyroUpdateInterval) {  				lastGyroUpdateTime = now;  				Task.Factory.StartNew (  					() => {  						if (client == null)  							return;    						var speed = Math.Cos (Math.Max (0' Math.Min (Math.PI / 2' g.Pitch)));  //						Debug.WriteLine ("Gyro.Pitch = " + g.Pitch + "' Speed = " + speed);    						var turn = Math.Sin (Math.Max (-Math.PI / 2' Math.Min (Math.PI / 2' g.Roll)));  //						Debug.WriteLine ("Gyro.Roll = " + g.Roll + "' Turn = " + turn);    						var speedVariable = client.Variables.FirstOrDefault (x => x.Name == "Speed");  						if (speedVariable != null) {  							speedVariable.Value = speed;  						}    						var turnVariable = client.Variables.FirstOrDefault (x => x.Name == "Turn");  						if (turnVariable != null) {  							turnVariable.Value = turn;  						}    						// let's show the values we're sending to the robot  						Device.BeginInvokeOnMainThread(() => {  							JoystickOutputSpeed.Text = String.Format("Speed: {0}"' Math.Round(speed'2));  							JoystickOutputTurn.Text = String.Format("Turn: {0}"' Math.Round(turn'2));  						});  					}'  					CancellationToken.None'  					TaskCreationOptions.None'  					scheduler);  			}
Magic Number,Robotics.Mobile.Robotroller,DeviceDetail,C:\repos\xamarin_Monkey.Robotics\Sample Apps\MobileRobotroller\Robotics.Mobile.Robotroller.Core\Pages\DeviceDetail.xaml.cs,HandleGyroUpdated,The following statement contains a magic number: if (now - lastGyroUpdateTime > GyroUpdateInterval) {  				lastGyroUpdateTime = now;  				Task.Factory.StartNew (  					() => {  						if (client == null)  							return;    						var speed = Math.Cos (Math.Max (0' Math.Min (Math.PI / 2' g.Pitch)));  //						Debug.WriteLine ("Gyro.Pitch = " + g.Pitch + "' Speed = " + speed);    						var turn = Math.Sin (Math.Max (-Math.PI / 2' Math.Min (Math.PI / 2' g.Roll)));  //						Debug.WriteLine ("Gyro.Roll = " + g.Roll + "' Turn = " + turn);    						var speedVariable = client.Variables.FirstOrDefault (x => x.Name == "Speed");  						if (speedVariable != null) {  							speedVariable.Value = speed;  						}    						var turnVariable = client.Variables.FirstOrDefault (x => x.Name == "Turn");  						if (turnVariable != null) {  							turnVariable.Value = turn;  						}    						// let's show the values we're sending to the robot  						Device.BeginInvokeOnMainThread(() => {  							JoystickOutputSpeed.Text = String.Format("Speed: {0}"' Math.Round(speed'2));  							JoystickOutputTurn.Text = String.Format("Turn: {0}"' Math.Round(turn'2));  						});  					}'  					CancellationToken.None'  					TaskCreationOptions.None'  					scheduler);  			}
Magic Number,Robotics.Mobile.Robotroller,DeviceDetail,C:\repos\xamarin_Monkey.Robotics\Sample Apps\MobileRobotroller\Robotics.Mobile.Robotroller.Core\Pages\DeviceDetail.xaml.cs,HandleGyroUpdated,The following statement contains a magic number: if (now - lastGyroUpdateTime > GyroUpdateInterval) {  				lastGyroUpdateTime = now;  				Task.Factory.StartNew (  					() => {  						if (client == null)  							return;    						var speed = Math.Cos (Math.Max (0' Math.Min (Math.PI / 2' g.Pitch)));  //						Debug.WriteLine ("Gyro.Pitch = " + g.Pitch + "' Speed = " + speed);    						var turn = Math.Sin (Math.Max (-Math.PI / 2' Math.Min (Math.PI / 2' g.Roll)));  //						Debug.WriteLine ("Gyro.Roll = " + g.Roll + "' Turn = " + turn);    						var speedVariable = client.Variables.FirstOrDefault (x => x.Name == "Speed");  						if (speedVariable != null) {  							speedVariable.Value = speed;  						}    						var turnVariable = client.Variables.FirstOrDefault (x => x.Name == "Turn");  						if (turnVariable != null) {  							turnVariable.Value = turn;  						}    						// let's show the values we're sending to the robot  						Device.BeginInvokeOnMainThread(() => {  							JoystickOutputSpeed.Text = String.Format("Speed: {0}"' Math.Round(speed'2));  							JoystickOutputTurn.Text = String.Format("Turn: {0}"' Math.Round(turn'2));  						});  					}'  					CancellationToken.None'  					TaskCreationOptions.None'  					scheduler);  			}
Magic Number,Robotics.Mobile.Robotroller,DeviceDetail,C:\repos\xamarin_Monkey.Robotics\Sample Apps\MobileRobotroller\Robotics.Mobile.Robotroller.Core\Pages\DeviceDetail.xaml.cs,HandleGyroUpdated,The following statement contains a magic number: if (now - lastGyroUpdateTime > GyroUpdateInterval) {  				lastGyroUpdateTime = now;  				Task.Factory.StartNew (  					() => {  						if (client == null)  							return;    						var speed = Math.Cos (Math.Max (0' Math.Min (Math.PI / 2' g.Pitch)));  //						Debug.WriteLine ("Gyro.Pitch = " + g.Pitch + "' Speed = " + speed);    						var turn = Math.Sin (Math.Max (-Math.PI / 2' Math.Min (Math.PI / 2' g.Roll)));  //						Debug.WriteLine ("Gyro.Roll = " + g.Roll + "' Turn = " + turn);    						var speedVariable = client.Variables.FirstOrDefault (x => x.Name == "Speed");  						if (speedVariable != null) {  							speedVariable.Value = speed;  						}    						var turnVariable = client.Variables.FirstOrDefault (x => x.Name == "Turn");  						if (turnVariable != null) {  							turnVariable.Value = turn;  						}    						// let's show the values we're sending to the robot  						Device.BeginInvokeOnMainThread(() => {  							JoystickOutputSpeed.Text = String.Format("Speed: {0}"' Math.Round(speed'2));  							JoystickOutputTurn.Text = String.Format("Turn: {0}"' Math.Round(turn'2));  						});  					}'  					CancellationToken.None'  					TaskCreationOptions.None'  					scheduler);  			}
Magic Number,Robotics.Mobile.Robotroller,DeviceDetail,C:\repos\xamarin_Monkey.Robotics\Sample Apps\MobileRobotroller\Robotics.Mobile.Robotroller.Core\Pages\DeviceDetail.xaml.cs,HandleGyroUpdated,The following statement contains a magic number: if (now - lastGyroUpdateTime > GyroUpdateInterval) {  				lastGyroUpdateTime = now;  				Task.Factory.StartNew (  					() => {  						if (client == null)  							return;    						var speed = Math.Cos (Math.Max (0' Math.Min (Math.PI / 2' g.Pitch)));  //						Debug.WriteLine ("Gyro.Pitch = " + g.Pitch + "' Speed = " + speed);    						var turn = Math.Sin (Math.Max (-Math.PI / 2' Math.Min (Math.PI / 2' g.Roll)));  //						Debug.WriteLine ("Gyro.Roll = " + g.Roll + "' Turn = " + turn);    						var speedVariable = client.Variables.FirstOrDefault (x => x.Name == "Speed");  						if (speedVariable != null) {  							speedVariable.Value = speed;  						}    						var turnVariable = client.Variables.FirstOrDefault (x => x.Name == "Turn");  						if (turnVariable != null) {  							turnVariable.Value = turn;  						}    						// let's show the values we're sending to the robot  						Device.BeginInvokeOnMainThread(() => {  							JoystickOutputSpeed.Text = String.Format("Speed: {0}"' Math.Round(speed'2));  							JoystickOutputTurn.Text = String.Format("Turn: {0}"' Math.Round(turn'2));  						});  					}'  					CancellationToken.None'  					TaskCreationOptions.None'  					scheduler);  			}
