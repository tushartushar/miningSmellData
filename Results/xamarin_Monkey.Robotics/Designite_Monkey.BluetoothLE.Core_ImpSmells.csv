Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Robotics.Messaging,Message,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Messaging\Message.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,Robotics.Messaging,Message,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Messaging\Message.cs,Deserialize,Cyclomatic complexity of the method is 10
Complex Method,Robotics.Messaging,ControlServer,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Messaging\ControlServer.cs,ProcessMessage,Cyclomatic complexity of the method is 10
Long Statement,Robotics.Mobile.Core.Bluetooth.LE,KnownCharacteristics,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Bluetooth\LE\KnownCharacteristics.cs,LoadItemsFromJson,The length of the statement  "            string itemsJson = ResourceLoader.GetEmbeddedResourceString (typeof(KnownCharacteristics).GetTypeInfo ().Assembly' "KnownCharacteristics.json"); " is 144.
Long Statement,Robotics.Mobile.Core.Bluetooth.LE,KnownServices,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Bluetooth\LE\KnownServices.cs,LoadItemsFromJson,The length of the statement  "            string itemsJson = ResourceLoader.GetEmbeddedResourceString (typeof(KnownServices).GetTypeInfo ().Assembly' "KnownServices.json"); " is 130.
Long Statement,Robotics.Mobile.Core.Bluetooth.LE,KnownDescriptors,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Bluetooth\LE\KnownDescriptors.cs,LoadItemsFromJson,The length of the statement  "            string itemsJson = ResourceLoader.GetEmbeddedResourceString (typeof(KnownDescriptors).GetTypeInfo ().Assembly' "KnownDescriptors.json"); " is 136.
Long Statement,Robotics.Mobile.Core.Utils,ResourceLoader,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Utils\ResourceLoader.cs,GetEmbeddedResourceStream,The length of the statement  "				throw new Exception(string.Format("Multiple resources ending with {0} found: {1}{2}"' resourceFileName' Environment.NewLine' string.Join(Environment.NewLine' resourcePaths))); " is 175.
Long Statement,Robotics.Messaging,ControlClient,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Messaging\ControlClient.cs,RunAsync,The length of the statement  "				Debug.WriteLine ("Got message: " + (ControlOp)m.Operation + "(" + string.Join ("' "' m.Arguments.Select (x => x.ToString ())) + ")"); " is 133.
Magic Number,Robotics.Mobile.Core.Bluetooth.LE,Extensions,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Bluetooth\LE\Extensions.cs,UuidFromPartial,The following statement contains a magic number: string id = @partial.ToString ("X").PadRight(4''0');
Magic Number,Robotics.Mobile.Core.Bluetooth.LE,Extensions,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Bluetooth\LE\Extensions.cs,UuidFromPartial,The following statement contains a magic number: id.Length == 4
Magic Number,Robotics.Mobile.Core.Bluetooth.LE,Extensions,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Bluetooth\LE\Extensions.cs,PartialFromUuid,The following statement contains a magic number: id = id.Substring (4' 4);
Magic Number,Robotics.Mobile.Core.Bluetooth.LE,Extensions,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Bluetooth\LE\Extensions.cs,PartialFromUuid,The following statement contains a magic number: id = id.Substring (4' 4);
Magic Number,Robotics.Mobile.Core.Bluetooth.LE,Extensions,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Bluetooth\LE\Extensions.cs,PartialFromUuid,The following statement contains a magic number: id.Length > 8
Magic Number,Robotics.Mobile.Core.Bluetooth.LE,LEStream,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Bluetooth\LE\LEStream.cs,HandleReceiveValueUpdated,The following statement contains a magic number: readBuffer.RemoveRange (0' ReadBufferSize / 2);
Magic Number,Robotics.Mobile.Core.Bluetooth.LE,LEStream,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Bluetooth\LE\LEStream.cs,WriteAsync,The following statement contains a magic number: count > 20
Magic Number,Robotics.Messaging,Message,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Messaging\Message.cs,Deserialize,The following statement contains a magic number: switch ((char)data[p]) {  				case 'N':  					r.Add ((object)null);  					p += 1;  					break;  				case 'B':  					r.Add ((object)(data [p + 1] != 0));  					p += 2;  					break;  				case 'b':  					r.Add ((object)data[p + 1]);  					p += 2;  					break;  				case 'I':  					r.Add ((object)BitConverter.ToInt32 (data' p + 1));  					p += 5;  					break;  				case 'D': {  						double d = 0.0;  						#if MF_FRAMEWORK_VERSION_V4_3  						d = ReadDouble (data' p + 1);  						#else  						d = BitConverter.ToDouble (data' p + 1);  						#endif  						r.Add ((object)d);  						p += 9;  					}  					break;  				case 'F': {  						float f = 0.0f;  						#if MF_FRAMEWORK_VERSION_V4_3  						f = ReadSingle (data' p + 1);  						#else  						f = BitConverter.ToSingle (data' p + 1);  						#endif  						r.Add ((object)f);  						p += 5;  					}  					break;  				case 'S':  					{  						var slen = data[p + 1];  						r.Add ((object)new string (Encoding.UTF8.GetChars(data' p + 2' slen)));  						p += 2 + slen;  					}  					break;  				default:  					throw new NotSupportedException ("Cannot read type: " + (char)data[p]);  				}
Magic Number,Robotics.Messaging,Message,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Messaging\Message.cs,Deserialize,The following statement contains a magic number: switch ((char)data[p]) {  				case 'N':  					r.Add ((object)null);  					p += 1;  					break;  				case 'B':  					r.Add ((object)(data [p + 1] != 0));  					p += 2;  					break;  				case 'b':  					r.Add ((object)data[p + 1]);  					p += 2;  					break;  				case 'I':  					r.Add ((object)BitConverter.ToInt32 (data' p + 1));  					p += 5;  					break;  				case 'D': {  						double d = 0.0;  						#if MF_FRAMEWORK_VERSION_V4_3  						d = ReadDouble (data' p + 1);  						#else  						d = BitConverter.ToDouble (data' p + 1);  						#endif  						r.Add ((object)d);  						p += 9;  					}  					break;  				case 'F': {  						float f = 0.0f;  						#if MF_FRAMEWORK_VERSION_V4_3  						f = ReadSingle (data' p + 1);  						#else  						f = BitConverter.ToSingle (data' p + 1);  						#endif  						r.Add ((object)f);  						p += 5;  					}  					break;  				case 'S':  					{  						var slen = data[p + 1];  						r.Add ((object)new string (Encoding.UTF8.GetChars(data' p + 2' slen)));  						p += 2 + slen;  					}  					break;  				default:  					throw new NotSupportedException ("Cannot read type: " + (char)data[p]);  				}
Magic Number,Robotics.Messaging,Message,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Messaging\Message.cs,Deserialize,The following statement contains a magic number: switch ((char)data[p]) {  				case 'N':  					r.Add ((object)null);  					p += 1;  					break;  				case 'B':  					r.Add ((object)(data [p + 1] != 0));  					p += 2;  					break;  				case 'b':  					r.Add ((object)data[p + 1]);  					p += 2;  					break;  				case 'I':  					r.Add ((object)BitConverter.ToInt32 (data' p + 1));  					p += 5;  					break;  				case 'D': {  						double d = 0.0;  						#if MF_FRAMEWORK_VERSION_V4_3  						d = ReadDouble (data' p + 1);  						#else  						d = BitConverter.ToDouble (data' p + 1);  						#endif  						r.Add ((object)d);  						p += 9;  					}  					break;  				case 'F': {  						float f = 0.0f;  						#if MF_FRAMEWORK_VERSION_V4_3  						f = ReadSingle (data' p + 1);  						#else  						f = BitConverter.ToSingle (data' p + 1);  						#endif  						r.Add ((object)f);  						p += 5;  					}  					break;  				case 'S':  					{  						var slen = data[p + 1];  						r.Add ((object)new string (Encoding.UTF8.GetChars(data' p + 2' slen)));  						p += 2 + slen;  					}  					break;  				default:  					throw new NotSupportedException ("Cannot read type: " + (char)data[p]);  				}
Magic Number,Robotics.Messaging,Message,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Messaging\Message.cs,Deserialize,The following statement contains a magic number: switch ((char)data[p]) {  				case 'N':  					r.Add ((object)null);  					p += 1;  					break;  				case 'B':  					r.Add ((object)(data [p + 1] != 0));  					p += 2;  					break;  				case 'b':  					r.Add ((object)data[p + 1]);  					p += 2;  					break;  				case 'I':  					r.Add ((object)BitConverter.ToInt32 (data' p + 1));  					p += 5;  					break;  				case 'D': {  						double d = 0.0;  						#if MF_FRAMEWORK_VERSION_V4_3  						d = ReadDouble (data' p + 1);  						#else  						d = BitConverter.ToDouble (data' p + 1);  						#endif  						r.Add ((object)d);  						p += 9;  					}  					break;  				case 'F': {  						float f = 0.0f;  						#if MF_FRAMEWORK_VERSION_V4_3  						f = ReadSingle (data' p + 1);  						#else  						f = BitConverter.ToSingle (data' p + 1);  						#endif  						r.Add ((object)f);  						p += 5;  					}  					break;  				case 'S':  					{  						var slen = data[p + 1];  						r.Add ((object)new string (Encoding.UTF8.GetChars(data' p + 2' slen)));  						p += 2 + slen;  					}  					break;  				default:  					throw new NotSupportedException ("Cannot read type: " + (char)data[p]);  				}
Magic Number,Robotics.Messaging,Message,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Messaging\Message.cs,Deserialize,The following statement contains a magic number: switch ((char)data[p]) {  				case 'N':  					r.Add ((object)null);  					p += 1;  					break;  				case 'B':  					r.Add ((object)(data [p + 1] != 0));  					p += 2;  					break;  				case 'b':  					r.Add ((object)data[p + 1]);  					p += 2;  					break;  				case 'I':  					r.Add ((object)BitConverter.ToInt32 (data' p + 1));  					p += 5;  					break;  				case 'D': {  						double d = 0.0;  						#if MF_FRAMEWORK_VERSION_V4_3  						d = ReadDouble (data' p + 1);  						#else  						d = BitConverter.ToDouble (data' p + 1);  						#endif  						r.Add ((object)d);  						p += 9;  					}  					break;  				case 'F': {  						float f = 0.0f;  						#if MF_FRAMEWORK_VERSION_V4_3  						f = ReadSingle (data' p + 1);  						#else  						f = BitConverter.ToSingle (data' p + 1);  						#endif  						r.Add ((object)f);  						p += 5;  					}  					break;  				case 'S':  					{  						var slen = data[p + 1];  						r.Add ((object)new string (Encoding.UTF8.GetChars(data' p + 2' slen)));  						p += 2 + slen;  					}  					break;  				default:  					throw new NotSupportedException ("Cannot read type: " + (char)data[p]);  				}
Magic Number,Robotics.Messaging,Message,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Messaging\Message.cs,Deserialize,The following statement contains a magic number: switch ((char)data[p]) {  				case 'N':  					r.Add ((object)null);  					p += 1;  					break;  				case 'B':  					r.Add ((object)(data [p + 1] != 0));  					p += 2;  					break;  				case 'b':  					r.Add ((object)data[p + 1]);  					p += 2;  					break;  				case 'I':  					r.Add ((object)BitConverter.ToInt32 (data' p + 1));  					p += 5;  					break;  				case 'D': {  						double d = 0.0;  						#if MF_FRAMEWORK_VERSION_V4_3  						d = ReadDouble (data' p + 1);  						#else  						d = BitConverter.ToDouble (data' p + 1);  						#endif  						r.Add ((object)d);  						p += 9;  					}  					break;  				case 'F': {  						float f = 0.0f;  						#if MF_FRAMEWORK_VERSION_V4_3  						f = ReadSingle (data' p + 1);  						#else  						f = BitConverter.ToSingle (data' p + 1);  						#endif  						r.Add ((object)f);  						p += 5;  					}  					break;  				case 'S':  					{  						var slen = data[p + 1];  						r.Add ((object)new string (Encoding.UTF8.GetChars(data' p + 2' slen)));  						p += 2 + slen;  					}  					break;  				default:  					throw new NotSupportedException ("Cannot read type: " + (char)data[p]);  				}
Magic Number,Robotics.Messaging,Message,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Messaging\Message.cs,Deserialize,The following statement contains a magic number: switch ((char)data[p]) {  				case 'N':  					r.Add ((object)null);  					p += 1;  					break;  				case 'B':  					r.Add ((object)(data [p + 1] != 0));  					p += 2;  					break;  				case 'b':  					r.Add ((object)data[p + 1]);  					p += 2;  					break;  				case 'I':  					r.Add ((object)BitConverter.ToInt32 (data' p + 1));  					p += 5;  					break;  				case 'D': {  						double d = 0.0;  						#if MF_FRAMEWORK_VERSION_V4_3  						d = ReadDouble (data' p + 1);  						#else  						d = BitConverter.ToDouble (data' p + 1);  						#endif  						r.Add ((object)d);  						p += 9;  					}  					break;  				case 'F': {  						float f = 0.0f;  						#if MF_FRAMEWORK_VERSION_V4_3  						f = ReadSingle (data' p + 1);  						#else  						f = BitConverter.ToSingle (data' p + 1);  						#endif  						r.Add ((object)f);  						p += 5;  					}  					break;  				case 'S':  					{  						var slen = data[p + 1];  						r.Add ((object)new string (Encoding.UTF8.GetChars(data' p + 2' slen)));  						p += 2 + slen;  					}  					break;  				default:  					throw new NotSupportedException ("Cannot read type: " + (char)data[p]);  				}
Magic Number,Robotics.Messaging,Message,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Messaging\Message.cs,ReadAsync,The following statement contains a magic number: var dataSize = readBuffer [2];
Magic Number,Robotics.Messaging,Message,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Messaging\Message.cs,ReadAsync,The following statement contains a magic number: Array.Copy (readBuffer' 3' data' 0' dataSize);
Magic Number,Robotics.Messaging,Message,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Messaging\Message.cs,Read,The following statement contains a magic number: bufferSize >= 4 && readBuffer[1] == (byte)ControlOp.SetVariableValue
Magic Number,Robotics.Messaging,Message,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Messaging\Message.cs,Read,The following statement contains a magic number: var dataSize = readBuffer [2];
Magic Number,Robotics.Messaging,Message,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Messaging\Message.cs,Read,The following statement contains a magic number: Array.Copy (readBuffer' 3' data' 0' dataSize);
Magic Number,Robotics.Messaging,Message,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Messaging\Message.cs,Write,The following statement contains a magic number: data.Length > 255
Magic Number,Robotics.Messaging,Message,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Messaging\Message.cs,Write,The following statement contains a magic number: writeBuffer[2] = ((byte)data.Length);
Magic Number,Robotics.Messaging,Message,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Messaging\Message.cs,Write,The following statement contains a magic number: writeBuffer [3 + i] = data [i];
Magic Number,Robotics.Messaging,Message,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Messaging\Message.cs,Write,The following statement contains a magic number: writeBuffer [3 + data.Length] = sum;
Magic Number,Robotics.Messaging,Message,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Messaging\Message.cs,Write,The following statement contains a magic number: stream.Write (writeBuffer' 0' 4 + data.Length);
Magic Number,Robotics.Messaging,Message,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Messaging\Message.cs,GetBytesNeeded,The following statement contains a magic number: return 4 - bufferSize;
Magic Number,Robotics.Messaging,Message,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Messaging\Message.cs,GetBytesNeeded,The following statement contains a magic number: bufferSize <= 2
Magic Number,Robotics.Messaging,Message,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Messaging\Message.cs,GetBytesNeeded,The following statement contains a magic number: var dataSize = buffer [2];
Magic Number,Robotics.Messaging,Message,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Messaging\Message.cs,GetBytesNeeded,The following statement contains a magic number: var messageSize = dataSize + 4;
Magic Number,Robotics.Messaging,Message,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Messaging\Message.cs,IsValidMessage,The following statement contains a magic number: bufferSize < 4 || buffer[0] != 'M'
Magic Number,Robotics.Messaging,Message,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Messaging\Message.cs,IsValidMessage,The following statement contains a magic number: var dataSize = buffer [2];
Magic Number,Robotics.Messaging,Message,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Messaging\Message.cs,IsValidMessage,The following statement contains a magic number: sum += buffer [i + 3];
Magic Number,Robotics.Messaging,Message,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Messaging\Message.cs,IsValidMessage,The following statement contains a magic number: var checkSum = buffer [3 + dataSize];
Magic Number,Robotics.Messaging,ControlClient,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Messaging\ControlClient.cs,RunAsync,The following statement contains a magic number: switch ((ControlOp)m.Operation) {  				case ControlOp.Variable:  					{  						var id = (int)m.Arguments [0];  						var v = variables.FirstOrDefault (x => x.Id == id);  						if (v == null) {  							var cv = new ClientVariable {  								Client = this'  								Id = id'  								Name = (string)m.Arguments [1]'  								IsWriteable = (bool)m.Arguments [2]'  							};  							cv.SetValue (m.Arguments [3]);  							v = cv;  							Schedule (() => variables.Add (v));  						}  					}  					break;  				case ControlOp.VariableValue:  					{  						var id = (int)m.Arguments [0];  						var cv = variables.FirstOrDefault (x => x.Id == id) as ClientVariable;  						if (cv != null) {  							var newVal = m.Arguments [1];  							Schedule (() => cv.SetValue (newVal));  						} else {  							await GetVariablesAsync ();  						}  					}  					break;  				case ControlOp.Command:  					{  						var id = (int)m.Arguments [0];  						var c = commands.FirstOrDefault (x => x.Id == id);  						if (c == null) {  							var cc = new Command {  								Id = id'  								Name = (string)m.Arguments [1]'  							};  							c = cc;  							Schedule (() => commands.Add (c));  						}  					}  					break;  //				default:  //					Debug.WriteLine ("Ignoring message: " + m.Operation);  //					break;  				}
Magic Number,Robotics.Messaging,ControlClient,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Messaging\ControlClient.cs,RunAsync,The following statement contains a magic number: switch ((ControlOp)m.Operation) {  				case ControlOp.Variable:  					{  						var id = (int)m.Arguments [0];  						var v = variables.FirstOrDefault (x => x.Id == id);  						if (v == null) {  							var cv = new ClientVariable {  								Client = this'  								Id = id'  								Name = (string)m.Arguments [1]'  								IsWriteable = (bool)m.Arguments [2]'  							};  							cv.SetValue (m.Arguments [3]);  							v = cv;  							Schedule (() => variables.Add (v));  						}  					}  					break;  				case ControlOp.VariableValue:  					{  						var id = (int)m.Arguments [0];  						var cv = variables.FirstOrDefault (x => x.Id == id) as ClientVariable;  						if (cv != null) {  							var newVal = m.Arguments [1];  							Schedule (() => cv.SetValue (newVal));  						} else {  							await GetVariablesAsync ();  						}  					}  					break;  				case ControlOp.Command:  					{  						var id = (int)m.Arguments [0];  						var c = commands.FirstOrDefault (x => x.Id == id);  						if (c == null) {  							var cc = new Command {  								Id = id'  								Name = (string)m.Arguments [1]'  							};  							c = cc;  							Schedule (() => commands.Add (c));  						}  					}  					break;  //				default:  //					Debug.WriteLine ("Ignoring message: " + m.Operation);  //					break;  				}
Missing Default,Robotics.Messaging,ControlClient,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Messaging\ControlClient.cs,RunAsync,The following switch statement is missing a default case: switch ((ControlOp)m.Operation) {  				case ControlOp.Variable:  					{  						var id = (int)m.Arguments [0];  						var v = variables.FirstOrDefault (x => x.Id == id);  						if (v == null) {  							var cv = new ClientVariable {  								Client = this'  								Id = id'  								Name = (string)m.Arguments [1]'  								IsWriteable = (bool)m.Arguments [2]'  							};  							cv.SetValue (m.Arguments [3]);  							v = cv;  							Schedule (() => variables.Add (v));  						}  					}  					break;  				case ControlOp.VariableValue:  					{  						var id = (int)m.Arguments [0];  						var cv = variables.FirstOrDefault (x => x.Id == id) as ClientVariable;  						if (cv != null) {  							var newVal = m.Arguments [1];  							Schedule (() => cv.SetValue (newVal));  						} else {  							await GetVariablesAsync ();  						}  					}  					break;  				case ControlOp.Command:  					{  						var id = (int)m.Arguments [0];  						var c = commands.FirstOrDefault (x => x.Id == id);  						if (c == null) {  							var cc = new Command {  								Id = id'  								Name = (string)m.Arguments [1]'  							};  							c = cc;  							Schedule (() => commands.Add (c));  						}  					}  					break;  //				default:  //					Debug.WriteLine ("Ignoring message: " + m.Operation);  //					break;  				}
Missing Default,Robotics.Messaging,ControlServer,D:\research\architectureSmells\repos\xamarin_Monkey.Robotics\Source\Monkey.BluetoothLE.Core\Messaging\ControlServer.cs,ProcessMessage,The following switch statement is missing a default case: switch ((ControlOp)m.Operation) {  			case ControlOp.GetVariables:  				foreach (Variable v in variables) {  					SendVariable (v);  					DebugPrint ("Sent Variable " + v.Name);  					#if MF_FRAMEWORK_VERSION_V4_3                          					Thread.Sleep (10); // Throttle  					#endif  				}  				break;  			case ControlOp.SetVariableValue: {  					var id = (int)m.Arguments[0];  					var val = m.Arguments[1];  					foreach (ServerVariable v in variables) {  						if (v.Id == id) {  							v.Value = val;  							DebugPrint ("Set " + v.Name + " = " + val);  							break;  						}  					}  				}  				break;  			case ControlOp.GetCommands:  				foreach (Command c in commands) {  					SendCommand (c);  					DebugPrint ("Sent Command " + c.Name);  					#if MF_FRAMEWORK_VERSION_V4_3  					Thread.Sleep (10); // Throttle  					#endif  				}  				break;  			case ControlOp.ExecuteCommand: {  					var id = (int)m.Arguments[0];  					var executionId = (int)m.Arguments[1];  					foreach (ServerCommand c in commands) {  						if (c.Id == id) {  							var result = c.Function ();  							SendCommandResult (c' executionId' result);  							DebugPrint ("Executed Command " + c.Name);  						}  					}  				}  				break;  			}
