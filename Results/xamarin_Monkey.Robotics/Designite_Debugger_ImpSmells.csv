Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.SPOT.Debugger,AbortHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AbortHandler.cs,ReadRegisters,The method has 115 lines of code.
Long Method,Microsoft.SPOT.Debugger,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadSignature,The method has 153 lines of code.
Long Method,Microsoft.SPOT.Debugger,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,EmitValue,The method has 115 lines of code.
Long Method,Microsoft.SPOT.Debugger,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadValue,The method has 126 lines of code.
Long Method,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,Deployment_Execute_Incremental,The method has 132 lines of code.
Long Method,Microsoft.SPOT.Debugger,PortDefinition_Tcp,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\PortDefinition.cs,EnumeratePorts,The method has 121 lines of code.
Long Method,Microsoft.SPOT.Debugger,SRecordFile,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\SRecord.cs,Parse,The method has 127 lines of code.
Long Method,Microsoft.SPOT.Debugger,WinUsb_AsyncUsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WinUsbStream.cs,EnumeratePorts,The method has 118 lines of code.
Long Method,Microsoft.SPOT.Messaging,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadSignature,The method has 153 lines of code.
Long Method,Microsoft.SPOT.Messaging,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,EmitValue,The method has 115 lines of code.
Long Method,Microsoft.SPOT.Messaging,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadValue,The method has 126 lines of code.
Long Method,Microsoft.SPOT.Debugger.WireProtocol,MessageReassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Controller.cs,Process,The method has 127 lines of code.
Long Method,Microsoft.SPOT.Debugger.WireProtocol,Commands,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,ResolveCommandToPayload,The method has 260 lines of code.
Complex Method,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,Decode,Cyclomatic complexity of the method is 23
Complex Method,Microsoft.SPOT.Debugger,Decoder_BlockDataTransfer,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,Print,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.SPOT.Debugger,AsyncUsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AsyncUsbStream.cs,EnumeratePorts,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.SPOT.Debugger,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,AddType,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.SPOT.Debugger,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ComputeHashForField,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.SPOT.Debugger,TypeDescriptorBasic,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,SetType,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.SPOT.Debugger,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,EmitSignature,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.SPOT.Debugger,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadSignature,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.SPOT.Debugger,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,EmitValue,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.SPOT.Debugger,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadValue,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.SPOT.Debugger,State,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,Advance,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,NotificationThreadWorker,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,TryToConnect,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,Deployment_Execute_Incremental,Cyclomatic complexity of the method is 20
Complex Method,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,Deployment_Execute_Full,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.SPOT.Debugger,Request,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,Wait,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.SPOT.Debugger,RebootTime,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,RebootTime,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.SPOT.Debugger,PlatformInfo,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\PlatformInfo.cs,OpenDeviceFrameworkKey,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.SPOT.Debugger,PortBooter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\PortBooter.cs,Program,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.SPOT.Debugger,PortDefinition_Tcp,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\PortDefinition.cs,EnumeratePorts,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.SPOT.Messaging,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,AddType,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.SPOT.Messaging,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ComputeHashForField,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.SPOT.Messaging,TypeDescriptorBasic,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,SetType,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.SPOT.Messaging,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,EmitSignature,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.SPOT.Messaging,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadSignature,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.SPOT.Messaging,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,EmitValue,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.SPOT.Messaging,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadValue,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.SPOT.Messaging,State,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,Advance,Cyclomatic complexity of the method is 8
Long Parameter List,Microsoft.SPOT.Debugger,EndPoint,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,EndPoint,The method has 5 parameters. Parameters: type' id' server' classToRemote' engine
Long Parameter List,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,AsyncMessage,The method has 5 parameters. Parameters: cmd' flags' payload' retries' timeout
Long Parameter List,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,SyncMessage,The method has 5 parameters. Parameters: cmd' flags' payload' retries' timeout
Long Parameter List,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,StartUpdate,The method has 10 parameters. Parameters: provider' versionMajor' versionMinor' updateId' updateType' updateSubType' updateSize' packetSize' installAddress' updateHandle
Long Parameter List,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,GetStackFrameInfo,The method has 5 parameters. Parameters: pid' depth' numOfArguments' numOfLocals' depthOfEvalStack
Long Parameter List,Microsoft.SPOT.Debugger,Request,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,Request,The method has 5 parameters. Parameters: parent' req' retries' timeout' callback
Long Parameter List,Microsoft.SPOT.Debugger,Native,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Native.cs,CreateFile,The method has 7 parameters. Parameters: lpFileName' dwDesiredAccess' dwShareMode' lpSecurityAttributes' dwCreationDisposition' dwFlagsAndAttributes' hTemplateFile
Long Parameter List,Microsoft.SPOT.Debugger,Native,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Native.cs,DeviceIoControl,The method has 8 parameters. Parameters: hDevice' dwIoControlCode' lpInBuffer' nInBufferSize' lpOutBuffer' nOutBufferSize' lpBytesReturned' lpOverlapped
Long Parameter List,Microsoft.SPOT.Debugger,Native,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Native.cs,DuplicateHandle,The method has 7 parameters. Parameters: hSourceProcessHandle' hSourceHandle' hTargetProcessHandle' lpTargetHandle' dwDesiredAccess' bInheritHandle' dwOptions
Long Parameter List,Microsoft.SPOT.Debugger,Native,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Native.cs,ReadFile,The method has 5 parameters. Parameters: handle' bytes' numBytesToRead' numBytesRead' overlapped
Long Parameter List,Microsoft.SPOT.Debugger,Native,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Native.cs,WriteFile,The method has 5 parameters. Parameters: handle' bytes' numBytesToWrite' numBytesWritten' lpOverlapped
Long Parameter List,Microsoft.SPOT.Debugger,Native,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Native.cs,PeekNamedPipe,The method has 6 parameters. Parameters: handle' buffer' bufferSize' bytesRead' totalBytesAvail' bytesLeftThisMessage
Long Parameter List,Microsoft.SPOT.Debugger,Native,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Native.cs,SetupDiEnumDeviceInterfaces,The method has 5 parameters. Parameters: DeviceInfoSet' DeviceInfoData' InterfaceClassGuid' MemberIndex' DeviceInterfaceData
Long Parameter List,Microsoft.SPOT.Debugger,Native,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Native.cs,SetupDiGetDeviceInterfaceDetail,The method has 6 parameters. Parameters: DeviceInfoSet' DeviceInterfaceData' DeviceInterfaceDetailData' DeviceInterfaceDetailDataSize' RequiredSize' DeviceInfoData
Long Parameter List,Microsoft.SPOT.Debugger,PortDefinition_Tcp,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\PortDefinition.cs,EnumeratePorts,The method has 6 parameters. Parameters: DiscoveryMulticastAddress' DiscoveryMulticastAddressRecv' DiscoveryMulticastPort' DiscoveryMulticastToken' DiscoveryMulticastTimeout' DiscoveryTTL
Long Parameter List,Microsoft.SPOT.Debugger,PortDefinition_Tcp,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\PortDefinition.cs,EnumeratePorts,The method has 7 parameters. Parameters: DiscoveryMulticastAddress' DiscoveryMulticastAddressRecv' DiscoveryMulticastPort' DiscoveryMulticastToken' DiscoveryMulticastTimeout' DiscoveryTTL' ForceRefresh
Long Parameter List,Microsoft.SPOT.Debugger,GenericAsyncStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Streams.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Microsoft.SPOT.Debugger,GenericAsyncStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Streams.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Microsoft.SPOT.Debugger,GenericAsyncStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Streams.cs,BeginReadCore,The method has 5 parameters. Parameters: array' offset' count' userCallback' stateObject
Long Parameter List,Microsoft.SPOT.Debugger,GenericAsyncStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Streams.cs,BeginWriteCore,The method has 5 parameters. Parameters: array' offset' count' userCallback' stateObject
Long Parameter List,Microsoft.SPOT.Debugger,WinUsb_AsyncUsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WinUsbStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Microsoft.SPOT.Debugger,WinUsb_AsyncUsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WinUsbStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Microsoft.SPOT.Debugger,WinUsb_AsyncUsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WinUsbStream.cs,BeginReadCore,The method has 5 parameters. Parameters: array' offset' count' userCallback' stateObject
Long Parameter List,Microsoft.SPOT.Debugger,WinUsb_AsyncUsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WinUsbStream.cs,BeginWriteCore,The method has 5 parameters. Parameters: array' offset' count' userCallback' stateObject
Long Parameter List,Microsoft.SPOT,CLRCapabilities,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\CLRCapabilities.cs,CLRCapabilities,The method has 6 parameters. Parameters: capability' lcd' ver' halSystemInfo' clrInfo' solutionReleaseInfo
Long Parameter List,Microsoft.SPOT,HalSystemInfoProperties,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\CLRCapabilities.cs,HalSystemInfoProperties,The method has 7 parameters. Parameters: hv' hvi' oc' mc' sc' mSerNumBytes' sSerNumBytes
Long Parameter List,Microsoft.SPOT.Debugger.WireProtocol,OutgoingMessage,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Controller.cs,OutgoingMessage,The method has 5 parameters. Parameters: parent' converter' cmd' flags' payload
Long Parameter List,Microsoft.SPOT.Debugger.WireProtocol,OutgoingMessage,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Controller.cs,InitializeForSend,The method has 5 parameters. Parameters: parent' converter' cmd' flags' payload
Long Identifier,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,RebootDevice,The length of the parameter fThrowOnCommunicationFailureSav is 31.
Long Identifier,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,,The length of the parameter m_fThrowOnCommunicationFailure is 30.
Long Identifier,Microsoft.SPOT.Debugger,RebootTime,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,,The length of the parameter c_RECONNECT_HARD_TIMEOUT_DEFAULT_MS is 35.
Long Identifier,Microsoft.SPOT.Debugger,RebootTime,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,,The length of the parameter c_RECONNECT_SOFT_TIMEOUT_DEFAULT_MS is 35.
Long Identifier,Microsoft.SPOT.Debugger,PlatformInfo,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\PlatformInfo.cs,OpenDeviceFrameworkKey,The length of the parameter myInformationalVersionAttributes is 32.
Long Identifier,Microsoft.SPOT.Debugger,WinUsb_AsyncUsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WinUsbStream.cs,,The length of the parameter MANUFACTURER_CONFIGURATION_REQUEST is 34.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Commands,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_Debugging_Execution_ChangeConditions is 38.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Commands,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_Debugging_Execution_SecurityKey is 33.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Commands,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_Debugging_Execution_Allocate is 30.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Commands,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_Debugging_Execution_Breakpoints is 33.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Commands,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_Debugging_Execution_BreakpointHit is 35.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Commands,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_Debugging_Execution_BreakpointStatus is 38.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Commands,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_Debugging_Execution_QueryCLRCapabilities is 42.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Commands,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_Debugging_Execution_SetCurrentAppDomain is 41.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Commands,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_Debugging_Thread_GetException is 31.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Commands,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_Debugging_Value_ResizeScratchPad is 34.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Commands,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_Debugging_Value_GetScratchPad is 31.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Commands,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_Debugging_Value_AllocateObject is 32.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Commands,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_Debugging_Value_AllocateString is 32.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Commands,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_Debugging_Value_AllocateArray is 31.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Commands,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_Debugging_TypeSys_Assemblies is 30.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Commands,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_Debugging_TypeSys_AppDomains is 30.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Commands,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_Debugging_Resolve_VirtualMethod is 33.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Commands,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_Debugging_MFUpdate_AddPacket is 30.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Commands,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_Debugging_MFUpdate_Authenticate is 33.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Commands,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_Debugging_MFUpdate_GetMissingPkts is 35.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Commands,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_Debugging_Logging_GetNumberOfRecords is 38.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Commands,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_Debugging_Logging_GetRecords is 30.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Reply,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_CompactAndRestartOnOutOfMemory is 32.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Debugging_Execution_BreakpointDef,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_DEPTH_EXCEPTION_FIRST_CHANCE is 30.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Debugging_Execution_BreakpointDef,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_DEPTH_EXCEPTION_USERS_CHANCE is 30.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Debugging_Execution_BreakpointDef,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_DEPTH_EXCEPTION_HANDLER_FOUND is 31.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Debugging_Execution_BreakpointDef,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_DEPTH_STEP_EXCEPTION_HANDLER is 30.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Debugging_Execution_QueryCLRCapabilities,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_CapabilitySolutionReleaseInfo is 31.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Debugging_Execution_QueryCLRCapabilities,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_CapabilityFlags_FloatingPort is 30.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Debugging_Execution_QueryCLRCapabilities,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_CapabilityFlags_SourceLevelDebugging is 38.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Debugging_Execution_QueryCLRCapabilities,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_CapabilityFlags_ExceptionFilters is 34.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Debugging_Execution_QueryCLRCapabilities,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_CapabilityFlags_IncrementalDeployment is 39.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Debugging_Execution_QueryCLRCapabilities,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_CapabilityFlags_Profiling_Allocations is 39.
Long Identifier,Microsoft.SPOT.Debugger.WireProtocol,Debugging_Execution_QueryCLRCapabilities,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,,The length of the parameter c_CapabilityFlags_Profiling_Calls is 33.
Long Statement,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_DataProcessing_ImmediateValue,The length of the statement  "			return get_DataProcessing_ImmediateValue(get_DataProcessing_ImmediateSeed(op)' get_DataProcessing_ImmediateRotation(op)); " is 121.
Long Statement,Microsoft.SPOT.Debugger,Decoder_MultiplyLong,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,Print,The length of the statement  "				PrintMnemonic(str' "{0}{1}{2}{3}"' m_isSigned ? 'S' : 'U'' m_isAccumulate ? "MLAL" : "MULL"' DumpCondition()' m_setCC ? 'S' : ' '); " is 131.
Long Statement,Microsoft.SPOT.Debugger,Decoder_MultiplyLong,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,Print,The length of the statement  "				str.AppendFormat("{0}'{1}'{2}'{3}"' DumpRegister(m_RdLo)' DumpRegister(m_RdHi)' DumpRegister(m_Rm)' DumpRegister(m_Rs)); " is 120.
Long Statement,Microsoft.SPOT.Debugger,AsyncUsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AsyncUsbStream.cs,EnumeratePorts,The length of the statement  "			IntPtr devInfo = Native.SetupDiGetClassDevs(ref inquiriesInterface' null' 0' Native.DIGCF_DEVICEINTERFACE | Native.DIGCF_PRESENT); " is 130.
Long Statement,Microsoft.SPOT.Debugger,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,AddType,The length of the statement  "			foreach(FieldInfo f in t.GetFields( BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic )) " is 135.
Long Statement,Microsoft.SPOT.Debugger,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,AddTypeCore,The length of the statement  "					string error = string.Format("Hash conflict: 0x{0:x8} {1}"' hash' t.AssemblyQualifiedName' tExists.AssemblyQualifiedName); " is 122.
Long Statement,Microsoft.SPOT.Debugger,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ComputeHashForType,The length of the statement  "				foreach(FieldInfo f in t.GetFields( BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic )) " is 135.
Long Statement,Microsoft.SPOT.Debugger,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,EmitValue,The length of the statement  "					throw TypeDescriptorBasic.Error(String.Format("Value outside range: Bits={0} Bias={1} Scale={2}"' bits' this.Hints_RangeBias' this.Hints_Scale)); " is 145.
Long Statement,Microsoft.SPOT.Debugger,State,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,AdvanceToTheNextField,The length of the statement  "						m_fields_Fields = m_fields_CurrentClass.GetFields(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic); " is 148.
Long Statement,Microsoft.SPOT.Debugger,State,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,AdvanceToTheNextElement,The length of the statement  "					if(m_value.m_hints != null && (m_value.m_hints.Flags & (SerializationFlags.FixedType | SerializationFlags.PointerNeverNull)) != 0) " is 130.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,ProcessMessage,The length of the statement  "							WireProtocol.Commands.Monitor_Ping.Reply cmdReply = new Microsoft.SPOT.Debugger.WireProtocol.Commands.Monitor_Ping.Reply(); " is 123.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,RpcReceiveQuery,The length of the statement  "			WireProtocol.Commands.Debugging_Messaging_Query.Reply res = new WireProtocol.Commands.Debugging_Messaging_Query.Reply(); " is 120.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,RpcCheck,The length of the statement  "				WireProtocol.Commands.Debugging_Messaging_Query.Reply res = reply.Payload as WireProtocol.Commands.Debugging_Messaging_Query.Reply; " is 131.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,RpcSend_Setup,The length of the statement  "						WireProtocol.Commands.Debugging_Messaging_Send.Reply res = reply.Payload as WireProtocol.Commands.Debugging_Messaging_Send.Reply; " is 129.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,RpcReply,The length of the statement  "				WireProtocol.Commands.Debugging_Messaging_Reply.Reply res = new WireProtocol.Commands.Debugging_Messaging_Reply.Reply(); " is 120.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,RpcReceiveReply,The length of the statement  "			WireProtocol.Commands.Debugging_Messaging_Reply.Reply res = new WireProtocol.Commands.Debugging_Messaging_Reply.Reply(); " is 120.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,TryToConnect,The length of the statement  "				WireProtocol.IncomingMessage msg = SyncMessage(WireProtocol.Commands.c_Monitor_Ping' WireProtocol.Flags.c_NoCaching' cmd' retries' wait); " is 137.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,TryToConnect,The length of the statement  "					this.m_targetIsBigEndian = (reply.m_dbg_flags & WireProtocol.Commands.Monitor_Ping.c_Ping_DbgFlag_BigEndian).Equals(WireProtocol.Commands.Monitor_Ping.c_Ping_DbgFlag_BigEndian); " is 177.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,TryToConnect,The length of the statement  "				m_connectionSource = (reply == null || reply.m_source == WireProtocol.Commands.Monitor_Ping.c_Ping_Source_TinyCLR) ? ConnectionSource.TinyCLR : ConnectionSource.TinyBooter; " is 172.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,ReadMemory,The length of the statement  "				WireProtocol.Commands.Monitor_ReadMemory.Reply cmdReply = reply.Payload as WireProtocol.Commands.Monitor_ReadMemory.Reply; " is 122.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,RebootDevice,The length of the statement  "					cmd.m_flags = this.Capabilities.SoftReboot ? WireProtocol.Commands.Monitor_Reboot.c_ClrRebootOnly : WireProtocol.Commands.Monitor_Reboot.c_NormalReboot; " is 152.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,RebootDevice,The length of the statement  "					cmd.m_flags = this.Capabilities.SoftReboot ? WireProtocol.Commands.Monitor_Reboot.c_ClrWaitForDbg : WireProtocol.Commands.Monitor_Reboot.c_NormalReboot; " is 152.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,MemoryMap,The length of the statement  "				WireProtocol.Commands.Monitor_MemoryMap.Reply cmdReply = reply.Payload as WireProtocol.Commands.Monitor_MemoryMap.Reply; " is 120.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,DeploymentMap,The length of the statement  "				WireProtocol.Commands.Monitor_DeploymentMap.Reply cmdReply = reply.Payload as WireProtocol.Commands.Monitor_DeploymentMap.Reply; " is 128.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,GetExecutionBasePtr,The length of the statement  "				WireProtocol.Commands.Debugging_Execution_BasePtr.Reply cmdReply = reply.Payload as WireProtocol.Commands.Debugging_Execution_BasePtr.Reply; " is 140.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,SetExecutionMode,The length of the statement  "			WireProtocol.Commands.Debugging_Execution_ChangeConditions cmd = new WireProtocol.Commands.Debugging_Execution_ChangeConditions(); " is 130.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,SetExecutionMode,The length of the statement  "			WireProtocol.IncomingMessage reply = SyncMessage(WireProtocol.Commands.c_Debugging_Execution_ChangeConditions' WireProtocol.Flags.c_NoCaching' cmd); " is 148.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,SetExecutionMode,The length of the statement  "				WireProtocol.Commands.Debugging_Execution_ChangeConditions.Reply cmdReply = reply.Payload as WireProtocol.Commands.Debugging_Execution_ChangeConditions.Reply; " is 158.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,SetCurrentAppDomain,The length of the statement  "			WireProtocol.Commands.Debugging_Execution_SetCurrentAppDomain cmd = new WireProtocol.Commands.Debugging_Execution_SetCurrentAppDomain(); " is 136.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,SetCurrentAppDomain,The length of the statement  "			return WireProtocol.IncomingMessage.IsPositiveAcknowledge(SyncMessage(WireProtocol.Commands.c_Debugging_Execution_SetCurrentAppDomain' 0' cmd)); " is 144.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,SetBreakpoints,The length of the statement  "			WireProtocol.Commands.Debugging_Execution_Breakpoints cmd = new WireProtocol.Commands.Debugging_Execution_Breakpoints(); " is 120.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,SetBreakpoints,The length of the statement  "			return WireProtocol.IncomingMessage.IsPositiveAcknowledge(SyncMessage(WireProtocol.Commands.c_Debugging_Execution_Breakpoints' 0' cmd)); " is 136.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,GetBreakpointStatus,The length of the statement  "			WireProtocol.Commands.Debugging_Execution_BreakpointStatus cmd = new WireProtocol.Commands.Debugging_Execution_BreakpointStatus(); " is 130.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,GetBreakpointStatus,The length of the statement  "				WireProtocol.Commands.Debugging_Execution_BreakpointStatus.Reply cmdReply = reply.Payload as WireProtocol.Commands.Debugging_Execution_BreakpointStatus.Reply; " is 158.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,SetSecurityKey,The length of the statement  "			WireProtocol.Commands.Debugging_Execution_SecurityKey cmd = new WireProtocol.Commands.Debugging_Execution_SecurityKey(); " is 120.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,UnlockDevice,The length of the statement  "			return WireProtocol.IncomingMessage.IsPositiveAcknowledge(SyncMessage(WireProtocol.Commands.c_Debugging_Execution_Unlock' 0' cmd)); " is 131.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,AllocateMemory,The length of the statement  "				WireProtocol.Commands.Debugging_Execution_Allocate.Reply cmdReply = reply.Payload as WireProtocol.Commands.Debugging_Execution_Allocate.Reply; " is 142.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,CanUpgradeToSsl,The length of the statement  "			WireProtocol.IncomingMessage reply = SyncMessage(WireProtocol.Commands.c_Debugging_UpgradeToSsl' WireProtocol.Flags.c_NoCaching' cmd' 2' 5000); " is 143.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,CanUpgradeToSsl,The length of the statement  "				WireProtocol.Commands.Debugging_UpgradeToSsl.Reply cmdReply = reply.Payload as WireProtocol.Commands.Debugging_UpgradeToSsl.Reply; " is 130.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,StartUpdate,The length of the statement  "			WireProtocol.IncomingMessage reply = SyncMessage(WireProtocol.Commands.c_Debugging_MFUpdate_Start' WireProtocol.Flags.c_NoCaching' cmd' 2' 5000); " is 145.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,StartUpdate,The length of the statement  "				WireProtocol.Commands.Debugging_MFUpdate_Start.Reply cmdReply = reply.Payload as WireProtocol.Commands.Debugging_MFUpdate_Start.Reply; " is 134.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,UpdateAuthCommand,The length of the statement  "			WireProtocol.IncomingMessage reply = SyncMessage(WireProtocol.Commands.c_Debugging_MFUpdate_AuthCmd' WireProtocol.Flags.c_NoCaching' cmd); " is 138.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,UpdateAuthCommand,The length of the statement  "				WireProtocol.Commands.Debugging_MFUpdate_AuthCommand.Reply cmdReply = reply.Payload as WireProtocol.Commands.Debugging_MFUpdate_AuthCommand.Reply; " is 146.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,UpdateAuthenticate,The length of the statement  "			WireProtocol.Commands.Debugging_MFUpdate_Authenticate cmd = new WireProtocol.Commands.Debugging_MFUpdate_Authenticate(); " is 120.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,UpdateAuthenticate,The length of the statement  "			WireProtocol.IncomingMessage reply = SyncMessage(WireProtocol.Commands.c_Debugging_MFUpdate_Authenticate' WireProtocol.Flags.c_NoCaching' cmd); " is 143.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,UpdateAuthenticate,The length of the statement  "				WireProtocol.Commands.Debugging_MFUpdate_Authenticate.Reply cmdReply = reply.Payload as WireProtocol.Commands.Debugging_MFUpdate_Authenticate.Reply; " is 148.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,UpdateGetMissingPackets,The length of the statement  "			WireProtocol.Commands.Debugging_MFUpdate_GetMissingPkts cmd = new WireProtocol.Commands.Debugging_MFUpdate_GetMissingPkts(); " is 124.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,UpdateGetMissingPackets,The length of the statement  "			WireProtocol.IncomingMessage reply = SyncMessage(WireProtocol.Commands.c_Debugging_MFUpdate_GetMissingPkts' WireProtocol.Flags.c_NoCaching' cmd); " is 145.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,UpdateGetMissingPackets,The length of the statement  "				WireProtocol.Commands.Debugging_MFUpdate_GetMissingPkts.Reply cmdReply = reply.Payload as WireProtocol.Commands.Debugging_MFUpdate_GetMissingPkts.Reply; " is 152.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,AddPacket,The length of the statement  "			WireProtocol.IncomingMessage reply = SyncMessage(WireProtocol.Commands.c_Debugging_MFUpdate_AddPacket' WireProtocol.Flags.c_NoCaching' cmd); " is 140.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,AddPacket,The length of the statement  "				WireProtocol.Commands.Debugging_MFUpdate_AddPacket.Reply cmdReply = reply.Payload as WireProtocol.Commands.Debugging_MFUpdate_AddPacket.Reply; " is 142.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,InstallUpdate,The length of the statement  "			WireProtocol.IncomingMessage reply = SyncMessage(WireProtocol.Commands.c_Debugging_MFUpdate_Install' WireProtocol.Flags.c_NoCaching' cmd); " is 138.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,InstallUpdate,The length of the statement  "				WireProtocol.Commands.Debugging_MFUpdate_Install.Reply cmdReply = reply.Payload as WireProtocol.Commands.Debugging_MFUpdate_Install.Reply; " is 138.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,CreateThread,The length of the statement  "					WireProtocol.Commands.Debugging_Thread_CreateEx.Reply cmdReply = reply.Payload as WireProtocol.Commands.Debugging_Thread_CreateEx.Reply; " is 136.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,GetThreadList,The length of the statement  "				WireProtocol.Commands.Debugging_Thread_List.Reply cmdReply = reply.Payload as WireProtocol.Commands.Debugging_Thread_List.Reply; " is 128.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,KillThread,The length of the statement  "				WireProtocol.Commands.Debugging_Thread_Kill.Reply cmdReply = reply.Payload as WireProtocol.Commands.Debugging_Thread_Kill.Reply; " is 128.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,SuspendThread,The length of the statement  "			return WireProtocol.IncomingMessage.IsPositiveAcknowledge(SyncMessage(WireProtocol.Commands.c_Debugging_Thread_Suspend' 0' cmd)); " is 129.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,ResumeThread,The length of the statement  "			return WireProtocol.IncomingMessage.IsPositiveAcknowledge(SyncMessage(WireProtocol.Commands.c_Debugging_Thread_Resume' 0' cmd)); " is 128.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,UnwindThread,The length of the statement  "			WireProtocol.Commands.Debugging_Thread_Unwind cmd = new Microsoft.SPOT.Debugger.WireProtocol.Commands.Debugging_Thread_Unwind(); " is 128.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,UnwindThread,The length of the statement  "			return WireProtocol.IncomingMessage.IsPositiveAcknowledge(SyncMessage(WireProtocol.Commands.c_Debugging_Thread_Unwind' 0' cmd)); " is 128.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,SetIPOfStackFrame,The length of the statement  "			return WireProtocol.IncomingMessage.IsPositiveAcknowledge(SyncMessage(WireProtocol.Commands.c_Debugging_Stack_SetIP' 0' cmd)); " is 126.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,ResolveAllAssemblies,The length of the statement  "					resolveAssemblies[iAssembly].m_reply = replies[iAssembly].Payload as WireProtocol.Commands.Debugging_Resolve_Assembly.Reply; " is 124.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,SetBlock,The length of the statement  "			return WireProtocol.IncomingMessage.IsPositiveAcknowledge(SyncMessage(WireProtocol.Commands.c_Debugging_Value_SetBlock' 0' setBlock)); " is 134.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,ResizeScratchPad,The length of the statement  "			WireProtocol.Commands.Debugging_Value_ResizeScratchPad cmd = new WireProtocol.Commands.Debugging_Value_ResizeScratchPad(); " is 122.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,ResizeScratchPad,The length of the statement  "			return WireProtocol.IncomingMessage.IsPositiveAcknowledge(SyncMessage(WireProtocol.Commands.c_Debugging_Value_ResizeScratchPad' 0' cmd)); " is 137.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,SetArrayElement,The length of the statement  "			return WireProtocol.IncomingMessage.IsPositiveAcknowledge(SyncMessage(WireProtocol.Commands.c_Debugging_Value_SetArray' 0' cmd)); " is 129.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,ResolveType,The length of the statement  "			WireProtocol.Commands.Debugging_Resolve_Type.Result result = (WireProtocol.Commands.Debugging_Resolve_Type.Result)m_typeSysLookup.Lookup(TypeSysLookup.Type.Type' td); " is 166.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,ResolveType,The length of the statement  "					WireProtocol.Commands.Debugging_Resolve_Type.Reply cmdReply = reply.Payload as WireProtocol.Commands.Debugging_Resolve_Type.Reply; " is 130.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,ResolveMethod,The length of the statement  "			WireProtocol.Commands.Debugging_Resolve_Method.Result result = (WireProtocol.Commands.Debugging_Resolve_Method.Result)m_typeSysLookup.Lookup(TypeSysLookup.Type.Method' md); " is 172.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,ResolveMethod,The length of the statement  "					WireProtocol.Commands.Debugging_Resolve_Method.Reply cmdReply = reply.Payload as WireProtocol.Commands.Debugging_Resolve_Method.Reply; " is 134.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,ResolveField,The length of the statement  "			WireProtocol.Commands.Debugging_Resolve_Field.Result result = (WireProtocol.Commands.Debugging_Resolve_Field.Result)m_typeSysLookup.Lookup(TypeSysLookup.Type.Field' fd); " is 169.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,ResolveField,The length of the statement  "					WireProtocol.Commands.Debugging_Resolve_Field.Reply cmdReply = reply.Payload as WireProtocol.Commands.Debugging_Resolve_Field.Reply; " is 132.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,GetVirtualMethod,The length of the statement  "			WireProtocol.Commands.Debugging_Resolve_VirtualMethod cmd = new WireProtocol.Commands.Debugging_Resolve_VirtualMethod(); " is 120.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,GetVirtualMethod,The length of the statement  "				WireProtocol.Commands.Debugging_Resolve_VirtualMethod.Reply cmdReply = reply.Payload as WireProtocol.Commands.Debugging_Resolve_VirtualMethod.Reply; " is 148.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,GetFrameBuffer,The length of the statement  "				WireProtocol.Commands.Debugging_Lcd_GetFrame.Reply cmdReply = reply.Payload as WireProtocol.Commands.Debugging_Lcd_GetFrame.Reply; " is 130.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,GetFrameBuffer,The length of the statement  "						pixelFormat = (lcdCaps.BitsPerPixel == 4) ? System.Drawing.Imaging.PixelFormat.Format4bppIndexed : System.Drawing.Imaging.PixelFormat.Format8bppIndexed; " is 152.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,GetThreads,The length of the statement  "							ts.m_calls[depth - 1 - j] = String.Format("{0} [IP:{1:X4}]"' GetMethodName(reply.m_data[j].m_md' true)' reply.m_data[j].m_IP); " is 126.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,Deployment_GetStatus,The length of the statement  "			WireProtocol.IncomingMessage reply = SyncMessage(WireProtocol.Commands.c_Debugging_Deployment_Status' WireProtocol.Flags.c_NoCaching' cmd' 2' 10000); " is 149.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,Info_SetJMC,The length of the statement  "			return WireProtocol.IncomingMessage.IsPositiveAcknowledge(SyncMessage(WireProtocol.Commands.c_Debugging_Info_SetJMC' 0' cmd)); " is 126.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,Deployment_Execute_Incremental,The length of the statement  "			WireProtocol.Commands.Debugging_Deployment_Status.ReplyEx status = Deployment_GetStatus() as WireProtocol.Commands.Debugging_Deployment_Status.ReplyEx; " is 151.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,Deployment_Execute_Incremental,The length of the statement  "					mh(string.Format("Deployment storage (size: {0} bytes) was not large enough to fit deployment assemblies (size: {1} bytes)"' status.m_storageLength' deployLength));         " is 164.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,Deployment_Execute_Incremental,The length of the statement  "                        WireProtocol.Commands.Debugging_Deployment_Status.ReplyEx statusT = Deployment_GetStatus() as WireProtocol.Commands.Debugging_Deployment_Status.ReplyEx; " is 152.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,Deployment_Execute_Incremental,The length of the statement  "                        WireProtocol.Commands.Debugging_Deployment_Status.ReplyEx statusT = Deployment_GetStatus() as WireProtocol.Commands.Debugging_Deployment_Status.ReplyEx; " is 152.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,SetProfilingMode,The length of the statement  "				WireProtocol.Commands.Profiling_Command.Reply cmdReply = reply.Payload as WireProtocol.Commands.Profiling_Command.Reply; " is 120.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,DiscoverCLRCapability,The length of the statement  "			WireProtocol.Commands.Debugging_Execution_QueryCLRCapabilities cmd = new WireProtocol.Commands.Debugging_Execution_QueryCLRCapabilities(); " is 138.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,DiscoverCLRCapabilityUint,The length of the statement  "				WireProtocol.Commands.Debugging_Execution_QueryCLRCapabilities.Reply cmdReply = reply.Payload as WireProtocol.Commands.Debugging_Execution_QueryCLRCapabilities.Reply; " is 166.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,DiscoverCLRCapabilityFlags,The length of the statement  "			return (CLRCapabilities.Capability)DiscoverCLRCapabilityUint(WireProtocol.Commands.Debugging_Execution_QueryCLRCapabilities.c_CapabilityFlags); " is 143.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,DiscoverSoftwareVersionProperties,The length of the statement  "			WireProtocol.IncomingMessage reply = DiscoverCLRCapability(WireProtocol.Commands.Debugging_Execution_QueryCLRCapabilities.c_CapabilitySoftwareVersion); " is 151.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,DiscoverSoftwareVersionProperties,The length of the statement  "			WireProtocol.Commands.Debugging_Execution_QueryCLRCapabilities.SoftwareVersion ver = new Microsoft.SPOT.Debugger.WireProtocol.Commands.Debugging_Execution_QueryCLRCapabilities.SoftwareVersion(); " is 194.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,DiscoverSoftwareVersionProperties,The length of the statement  "				WireProtocol.Commands.Debugging_Execution_QueryCLRCapabilities.Reply cmdReply = reply.Payload as WireProtocol.Commands.Debugging_Execution_QueryCLRCapabilities.Reply; " is 166.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,DiscoverCLRCapabilityLCD,The length of the statement  "			WireProtocol.IncomingMessage reply = DiscoverCLRCapability(WireProtocol.Commands.Debugging_Execution_QueryCLRCapabilities.c_CapabilityLCD); " is 139.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,DiscoverCLRCapabilityLCD,The length of the statement  "			WireProtocol.Commands.Debugging_Execution_QueryCLRCapabilities.LCD lcd = new Microsoft.SPOT.Debugger.WireProtocol.Commands.Debugging_Execution_QueryCLRCapabilities.LCD(); " is 170.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,DiscoverCLRCapabilityLCD,The length of the statement  "				WireProtocol.Commands.Debugging_Execution_QueryCLRCapabilities.Reply cmdReply = reply.Payload as WireProtocol.Commands.Debugging_Execution_QueryCLRCapabilities.Reply; " is 166.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,DiscoverHalSystemInfoProperties,The length of the statement  "			WireProtocol.IncomingMessage reply = DiscoverCLRCapability(WireProtocol.Commands.Debugging_Execution_QueryCLRCapabilities.c_CapabilityHalSystemInfo); " is 149.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,DiscoverHalSystemInfoProperties,The length of the statement  "			WireProtocol.Commands.Debugging_Execution_QueryCLRCapabilities.HalSystemInfo halSystemInfo = new Microsoft.SPOT.Debugger.WireProtocol.Commands.Debugging_Execution_QueryCLRCapabilities.HalSystemInfo(); " is 200.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,DiscoverHalSystemInfoProperties,The length of the statement  "				WireProtocol.Commands.Debugging_Execution_QueryCLRCapabilities.Reply cmdReply = reply.Payload as WireProtocol.Commands.Debugging_Execution_QueryCLRCapabilities.Reply; " is 166.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,DiscoverClrInfoProperties,The length of the statement  "			WireProtocol.IncomingMessage reply = DiscoverCLRCapability(WireProtocol.Commands.Debugging_Execution_QueryCLRCapabilities.c_CapabilityClrInfo); " is 143.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,DiscoverClrInfoProperties,The length of the statement  "			WireProtocol.Commands.Debugging_Execution_QueryCLRCapabilities.ClrInfo clrInfo = new Microsoft.SPOT.Debugger.WireProtocol.Commands.Debugging_Execution_QueryCLRCapabilities.ClrInfo(); " is 182.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,DiscoverClrInfoProperties,The length of the statement  "				WireProtocol.Commands.Debugging_Execution_QueryCLRCapabilities.Reply cmdReply = reply.Payload as WireProtocol.Commands.Debugging_Execution_QueryCLRCapabilities.Reply; " is 166.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,DiscoverClrInfoProperties,The length of the statement  "					clrInfoProps = new CLRCapabilities.ClrInfoProperties(clrInfo.m_clrReleaseInfo.Version' clrInfo.m_clrReleaseInfo.Info' clrInfo.m_TargetFrameworkVersion.Version); " is 160.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,DiscoverSolutionInfoProperties,The length of the statement  "			WireProtocol.IncomingMessage reply = DiscoverCLRCapability(WireProtocol.Commands.Debugging_Execution_QueryCLRCapabilities.c_CapabilitySolutionReleaseInfo); " is 155.
Long Statement,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,DiscoverSolutionInfoProperties,The length of the statement  "				WireProtocol.Commands.Debugging_Execution_QueryCLRCapabilities.Reply cmdReply = reply.Payload as WireProtocol.Commands.Debugging_Execution_QueryCLRCapabilities.Reply; " is 166.
Long Statement,Microsoft.SPOT.Debugger,PlatformInfo,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\PlatformInfo.cs,Execute,The length of the statement  "				if(installRoot == null || !Directory.Exists(installRoot) || 0 == string.Compare(Path.GetDirectoryName(Path.GetDirectoryName(installRoot))' Path.GetDirectoryName(build_root)' true)) " is 180.
Long Statement,Microsoft.SPOT.Debugger,PlatformInfo,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\PlatformInfo.cs,Execute,The length of the statement  "					if(String.IsNullOrEmpty(spoclient) || String.IsNullOrEmpty(build_tree_client) || String.IsNullOrEmpty(build_tree_server)) " is 121.
Long Statement,Microsoft.SPOT.Debugger,PlatformInfo,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\PlatformInfo.cs,Execute,The length of the statement  "					// Check the AssemblyFolder subkey; this is used only internally to support the mfpseudoinstaller style of running MF SDK; " is 122.
Long Statement,Microsoft.SPOT.Debugger,PlatformInfo,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\PlatformInfo.cs,OpenDeviceFrameworkKey,The length of the statement  "                    = (System.Reflection.AssemblyInformationalVersionAttribute[])System.Reflection.Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(System.Reflection.AssemblyInformationalVersionAttribute)' false); " is 203.
Long Statement,Microsoft.SPOT.Debugger,PortDefinition_Tcp,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\PortDefinition.cs,EnumeratePorts,The length of the statement  "			return EnumeratePorts(System.Net.IPAddress.Parse("234.102.98.44")' System.Net.IPAddress.Parse("234.102.98.45")' 26001' "DOTNETMF"' 3000' 1' forceRefresh); " is 154.
Long Statement,Microsoft.SPOT.Debugger,PortDefinition_Tcp,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\PortDefinition.cs,EnumeratePorts,The length of the statement  "							recv.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.AddMembership' new MulticastOption(DiscoveryMulticastAddressRecv' ip)); " is 131.
Long Statement,Microsoft.SPOT.Debugger,PortDefinition_Tcp,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\PortDefinition.cs,EnumeratePorts,The length of the statement  "							recv.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.DropMembership' new MulticastOption(DiscoveryMulticastAddressRecv)); " is 128.
Long Statement,Microsoft.SPOT.Debugger,SRecordFile,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\SRecord.cs,Parse,The length of the statement  "						throw new System.ArgumentException(String.Format("Incorrect crc at line {0} of {1}: got {2:X2}' expected {3:X2}"' lineNum' file' crc' checksum)); " is 145.
Long Statement,Microsoft.SPOT.Debugger,SRecordFile,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\SRecord.cs,Parse,The length of the statement  "										throw new ArgumentOutOfRangeException(String.Format("Signature is not 128 bytes long; it is {0} bytes long"' fs.Length)); " is 121.
Long Statement,Microsoft.SPOT.Debugger,GenericAsyncStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Streams.cs,BeginWriteCore,The length of the statement  "					res = Native.WriteFile(m_handle.DangerousGetHandle()' p + offset' count' out numBytesWritten' asyncResult.OverlappedPtr); " is 121.
Long Statement,Microsoft.SPOT.Debugger,AsyncFileStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Streams.cs,OpenHandle,The length of the statement  "			SafeFileHandle handle = Native.CreateFile(file' Native.GENERIC_READ | Native.GENERIC_WRITE' share' Native.NULL' System.IO.FileMode.Open' Native.FILE_FLAG_OVERLAPPED' Native.NULL); " is 179.
Long Statement,Microsoft.SPOT.Debugger,AsyncNetworkStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Streams.cs,BeginUpgradeToSSL,The length of the statement  "			return m_ssl.BeginAuthenticateAsServer(cert' requiresClientCert' System.Security.Authentication.SslProtocols.Tls' true' null' null); " is 132.
Long Statement,Microsoft.SPOT.Debugger,UsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\UsbStream.cs,RetrieveStringFromDevice,The length of the statement  "				if(!Native.DeviceIoControl(m_handle.DangerousGetHandle()' code' null' 0' p' buffer.Length' out read' null) || (read <= 0)) " is 122.
Long Statement,Microsoft.SPOT.Debugger,UsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\UsbStream.cs,RetrieveIntegerFromDevice,The length of the statement  "			if(!Native.DeviceIoControl(m_handle.DangerousGetHandle()' code' null' 0' (byte*)&digits' sizeof(int)' out read' null) || (read <= 0)) " is 133.
Long Statement,Microsoft.SPOT.Debugger,WinUsb_AsyncUsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WinUsbStream.cs,RetrieveIntegerFromDevice,The length of the statement  "			//int code = Native.ControlCode(Native.FILE_DEVICE_UNKNOWN' controlCode' Native.METHOD_BUFFERED' Native.FILE_ANY_ACCESS); " is 121.
Long Statement,Microsoft.SPOT.Debugger,WinUsb_AsyncUsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WinUsbStream.cs,RetrieveIntegerFromDevice,The length of the statement  "			//if (!Native.DeviceIoControl(m_handle.DangerousGetHandle()' code' null' 0' (byte*)&digits' sizeof(int)' out read' null) || (read <= 0)) " is 136.
Long Statement,Microsoft.SPOT.Messaging,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,AddType,The length of the statement  "			foreach(FieldInfo f in t.GetFields( BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic )) " is 135.
Long Statement,Microsoft.SPOT.Messaging,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,AddTypeCore,The length of the statement  "					string error = string.Format("Hash conflict: 0x{0:x8} {1}"' hash' t.AssemblyQualifiedName' tExists.AssemblyQualifiedName); " is 122.
Long Statement,Microsoft.SPOT.Messaging,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ComputeHashForType,The length of the statement  "				foreach(FieldInfo f in t.GetFields( BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic )) " is 135.
Long Statement,Microsoft.SPOT.Messaging,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,EmitValue,The length of the statement  "					throw TypeDescriptorBasic.Error(String.Format("Value outside range: Bits={0} Bias={1} Scale={2}"' bits' this.Hints_RangeBias' this.Hints_Scale)); " is 145.
Long Statement,Microsoft.SPOT.Messaging,State,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,AdvanceToTheNextField,The length of the statement  "						m_fields_Fields = m_fields_CurrentClass.GetFields(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic); " is 148.
Long Statement,Microsoft.SPOT.Messaging,State,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,AdvanceToTheNextElement,The length of the statement  "					if(m_value.m_hints != null && (m_value.m_hints.Flags & (SerializationFlags.FixedType | SerializationFlags.PointerNeverNull)) != 0) " is 130.
Long Statement,Microsoft.SPOT.Debugger.WireProtocol,MessageBase,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Controller.cs,DumpHeader,The length of the statement  "			Console.WriteLine("{0}: {1:X08} {2:X08} {3} {4}"' txt' m_header.m_cmd' m_header.m_flags' m_header.m_seq' m_header.m_seqReply);           " is 126.
Long Statement,Microsoft.SPOT.Debugger.WireProtocol,IncomingMessage,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Controller.cs,ReplyBadPacket,The length of the statement  "			OutgoingMessage msg = new OutgoingMessage(ctrl' new WireProtocol.Converter()' Commands.c_Monitor_Ping' Flags.c_NonCritical | Flags.c_NACK | flags' null); " is 153.
Long Statement,Microsoft.SPOT.Debugger.WireProtocol,Converter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Converter.cs,InternalSerializeFields,The length of the statement  "				foreach(FieldInfo f in t.GetFields( BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic )) " is 135.
Long Statement,Microsoft.SPOT.Debugger.WireProtocol,Converter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Converter.cs,InternalDeserializeFieldsHelper,The length of the statement  "			foreach(FieldInfo f in t.GetFields( BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic )) " is 135.
Complex Conditional,Microsoft.SPOT.Debugger,SRecordFile,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\SRecord.cs,Parse,The conditional expression  "(Char.ToLower(lineBytes[0]) != 's') ||  						(lineBytes[1] != '0' && lineBytes[1] != '3' && lineBytes[1] != '7')"  is complex.
Complex Conditional,Microsoft.SPOT.Debugger,LibUsb_AsyncUsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\LibUsbStream.cs,EnumeratePorts,The conditional expression  "fullname.Contains("apple") ||  						   fullname.Contains("key") ||  						   fullname.Contains("mouse") ||  						   fullname.Contains("touch") ||  						   fullname.Contains("track") ||  						   fullname.Contains("pad")"  is complex.
Empty Catch Block,Microsoft.SPOT.Debugger,AsyncUsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AsyncUsbStream.cs,EnumeratePorts,The method has an empty catch block.
Empty Catch Block,Microsoft.SPOT.Debugger,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,LoadAllAssembliesFromDirectory,The method has an empty catch block.
Empty Catch Block,Microsoft.SPOT.Debugger,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,LoadAllAssembliesFromDirectory,The method has an empty catch block.
Empty Catch Block,Microsoft.SPOT.Debugger,PortDefinition,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,TryToOpen,The method has an empty catch block.
Empty Catch Block,Microsoft.SPOT.Debugger,EndPoint,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,DispatchMessage,The method has an empty catch block.
Empty Catch Block,Microsoft.SPOT.Debugger,EndPointProxy,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,CancelAllRequests,The method has an empty catch block.
Empty Catch Block,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,ConfigureXonXoff,The method has an empty catch block.
Empty Catch Block,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,NotificationThreadWorker,The method has an empty catch block.
Empty Catch Block,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,NotificationThreadWorker,The method has an empty catch block.
Empty Catch Block,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,NotificationThreadWorker,The method has an empty catch block.
Empty Catch Block,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,RpcSend_Setup,The method has an empty catch block.
Empty Catch Block,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,SyncMessage,The method has an empty catch block.
Empty Catch Block,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Microsoft.SPOT.Debugger,Emulator,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,EnumeratePipes,The method has an empty catch block.
Empty Catch Block,Microsoft.SPOT.Debugger,Emulator,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,EnumeratePipes,The method has an empty catch block.
Empty Catch Block,Microsoft.SPOT.Debugger,Emulator,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,Stop,The method has an empty catch block.
Empty Catch Block,Microsoft.SPOT.Debugger,PlatformInfo,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\PlatformInfo.cs,Execute,The method has an empty catch block.
Empty Catch Block,Microsoft.SPOT.Debugger,PortDefinition_Tcp,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\PortDefinition.cs,EnumeratePorts,The method has an empty catch block.
Empty Catch Block,Microsoft.SPOT.Debugger,AsyncSerialStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Streams.cs,EnumeratePorts,The method has an empty catch block.
Empty Catch Block,Microsoft.SPOT.Debugger,RegistryAccess,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Utility.cs,GetBaseKey,The method has an empty catch block.
Empty Catch Block,Microsoft.SPOT.Debugger,RegistryAccess,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Utility.cs,GetBaseKey,The method has an empty catch block.
Empty Catch Block,Microsoft.SPOT.Debugger,RegistryAccess,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Utility.cs,GetBaseKey,The method has an empty catch block.
Empty Catch Block,Microsoft.SPOT.Debugger,RegistryAccess,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Utility.cs,GetValue,The method has an empty catch block.
Empty Catch Block,Microsoft.SPOT.Debugger,RegistryAccess,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Utility.cs,GetValue,The method has an empty catch block.
Empty Catch Block,Microsoft.SPOT.Debugger,RegistryAccess,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Utility.cs,GetValue,The method has an empty catch block.
Empty Catch Block,Microsoft.SPOT.Debugger,RegistryAccess,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Utility.cs,GetIntValue,The method has an empty catch block.
Empty Catch Block,Microsoft.SPOT.Debugger,RegistryAccess,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Utility.cs,GetIntValue,The method has an empty catch block.
Empty Catch Block,Microsoft.SPOT.Debugger,WinUsb_AsyncUsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WinUsbStream.cs,EnumeratePorts,The method has an empty catch block.
Empty Catch Block,Microsoft.SPOT.Debugger,LibUsb_AsyncUsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\LibUsbStream.cs,EnumeratePorts,The method has an empty catch block.
Empty Catch Block,Microsoft.SPOT.Messaging,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,LoadAllAssembliesFromDirectory,The method has an empty catch block.
Empty Catch Block,Microsoft.SPOT.Messaging,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,LoadAllAssembliesFromDirectory,The method has an empty catch block.
Empty Catch Block,Microsoft.SPOT.Debugger.WireProtocol,Controller,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Controller.cs,ClosePort,The method has an empty catch block.
Magic Number,Microsoft.SPOT.Debugger,AbortHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AbortHandler.cs,ReadMemory,The following statement contains a magic number: if(m_deviceRunning)  			{  				byte[] buf;    				if(m_eng.ReadMemory(address' (uint)count' out buf))  				{  					Array.Copy(buf' 0' data' offset' count);    					return true;  				}    				return false;  			}  			else  			{  				MemoryStream stream = new MemoryStream();  				BinaryWriter writer = new BinaryWriter(stream' Encoding.Unicode);    				writer.Write((byte)'M');  				writer.Write((byte)0);  				writer.Write((byte)0);  				writer.Write((byte)0);  				writer.Write((uint)address);  				writer.Write((uint)(address + count));  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');    				writer.Flush();    				SendBuffer(stream.ToArray());    				while(count > 0)  				{  					Report r = GetReport(100);  					if(r == null)  						return false;    					if(r.type == Report.c_ReadMemory)  					{  						try  						{  							uint addressReply = UInt32.Parse(r.values[1]' System.Globalization.NumberStyles.HexNumber);  							string dataText = r.values[2];    							if(addressReply == address)  							{  								int size = dataText.Length / 2;    								for(int pos = 0; pos < size; pos++)  								{  									data[offset + pos] = Byte.Parse(dataText.Substring(pos * 2' 2)' System.Globalization.NumberStyles.HexNumber);  								}    								address += (uint)size;  								offset += size;  								count -= size;  							}  						}  						catch  						{  							return false;  						}  					}  					else if(r.type == Report.c_Error)  					{  						return false;  					}  					else if(r.type == Report.c_Noise)  					{  						m_eng.InjectMessage("{0}\r\n"' r.line);  					}  				}    				return true;  			}
Magic Number,Microsoft.SPOT.Debugger,AbortHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AbortHandler.cs,ReadMemory,The following statement contains a magic number: if(m_deviceRunning)  			{  				byte[] buf;    				if(m_eng.ReadMemory(address' (uint)count' out buf))  				{  					Array.Copy(buf' 0' data' offset' count);    					return true;  				}    				return false;  			}  			else  			{  				MemoryStream stream = new MemoryStream();  				BinaryWriter writer = new BinaryWriter(stream' Encoding.Unicode);    				writer.Write((byte)'M');  				writer.Write((byte)0);  				writer.Write((byte)0);  				writer.Write((byte)0);  				writer.Write((uint)address);  				writer.Write((uint)(address + count));  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');    				writer.Flush();    				SendBuffer(stream.ToArray());    				while(count > 0)  				{  					Report r = GetReport(100);  					if(r == null)  						return false;    					if(r.type == Report.c_ReadMemory)  					{  						try  						{  							uint addressReply = UInt32.Parse(r.values[1]' System.Globalization.NumberStyles.HexNumber);  							string dataText = r.values[2];    							if(addressReply == address)  							{  								int size = dataText.Length / 2;    								for(int pos = 0; pos < size; pos++)  								{  									data[offset + pos] = Byte.Parse(dataText.Substring(pos * 2' 2)' System.Globalization.NumberStyles.HexNumber);  								}    								address += (uint)size;  								offset += size;  								count -= size;  							}  						}  						catch  						{  							return false;  						}  					}  					else if(r.type == Report.c_Error)  					{  						return false;  					}  					else if(r.type == Report.c_Noise)  					{  						m_eng.InjectMessage("{0}\r\n"' r.line);  					}  				}    				return true;  			}
Magic Number,Microsoft.SPOT.Debugger,AbortHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AbortHandler.cs,ReadMemory,The following statement contains a magic number: if(m_deviceRunning)  			{  				byte[] buf;    				if(m_eng.ReadMemory(address' (uint)count' out buf))  				{  					Array.Copy(buf' 0' data' offset' count);    					return true;  				}    				return false;  			}  			else  			{  				MemoryStream stream = new MemoryStream();  				BinaryWriter writer = new BinaryWriter(stream' Encoding.Unicode);    				writer.Write((byte)'M');  				writer.Write((byte)0);  				writer.Write((byte)0);  				writer.Write((byte)0);  				writer.Write((uint)address);  				writer.Write((uint)(address + count));  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');    				writer.Flush();    				SendBuffer(stream.ToArray());    				while(count > 0)  				{  					Report r = GetReport(100);  					if(r == null)  						return false;    					if(r.type == Report.c_ReadMemory)  					{  						try  						{  							uint addressReply = UInt32.Parse(r.values[1]' System.Globalization.NumberStyles.HexNumber);  							string dataText = r.values[2];    							if(addressReply == address)  							{  								int size = dataText.Length / 2;    								for(int pos = 0; pos < size; pos++)  								{  									data[offset + pos] = Byte.Parse(dataText.Substring(pos * 2' 2)' System.Globalization.NumberStyles.HexNumber);  								}    								address += (uint)size;  								offset += size;  								count -= size;  							}  						}  						catch  						{  							return false;  						}  					}  					else if(r.type == Report.c_Error)  					{  						return false;  					}  					else if(r.type == Report.c_Noise)  					{  						m_eng.InjectMessage("{0}\r\n"' r.line);  					}  				}    				return true;  			}
Magic Number,Microsoft.SPOT.Debugger,AbortHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AbortHandler.cs,ReadMemory,The following statement contains a magic number: if(m_deviceRunning)  			{  				byte[] buf;    				if(m_eng.ReadMemory(address' (uint)count' out buf))  				{  					Array.Copy(buf' 0' data' offset' count);    					return true;  				}    				return false;  			}  			else  			{  				MemoryStream stream = new MemoryStream();  				BinaryWriter writer = new BinaryWriter(stream' Encoding.Unicode);    				writer.Write((byte)'M');  				writer.Write((byte)0);  				writer.Write((byte)0);  				writer.Write((byte)0);  				writer.Write((uint)address);  				writer.Write((uint)(address + count));  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');    				writer.Flush();    				SendBuffer(stream.ToArray());    				while(count > 0)  				{  					Report r = GetReport(100);  					if(r == null)  						return false;    					if(r.type == Report.c_ReadMemory)  					{  						try  						{  							uint addressReply = UInt32.Parse(r.values[1]' System.Globalization.NumberStyles.HexNumber);  							string dataText = r.values[2];    							if(addressReply == address)  							{  								int size = dataText.Length / 2;    								for(int pos = 0; pos < size; pos++)  								{  									data[offset + pos] = Byte.Parse(dataText.Substring(pos * 2' 2)' System.Globalization.NumberStyles.HexNumber);  								}    								address += (uint)size;  								offset += size;  								count -= size;  							}  						}  						catch  						{  							return false;  						}  					}  					else if(r.type == Report.c_Error)  					{  						return false;  					}  					else if(r.type == Report.c_Noise)  					{  						m_eng.InjectMessage("{0}\r\n"' r.line);  					}  				}    				return true;  			}
Magic Number,Microsoft.SPOT.Debugger,AbortHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AbortHandler.cs,ReadMemory,The following statement contains a magic number: if(m_deviceRunning)  			{  				byte[] buf;    				if(m_eng.ReadMemory(address' (uint)count' out buf))  				{  					Array.Copy(buf' 0' data' offset' count);    					return true;  				}    				return false;  			}  			else  			{  				MemoryStream stream = new MemoryStream();  				BinaryWriter writer = new BinaryWriter(stream' Encoding.Unicode);    				writer.Write((byte)'M');  				writer.Write((byte)0);  				writer.Write((byte)0);  				writer.Write((byte)0);  				writer.Write((uint)address);  				writer.Write((uint)(address + count));  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');    				writer.Flush();    				SendBuffer(stream.ToArray());    				while(count > 0)  				{  					Report r = GetReport(100);  					if(r == null)  						return false;    					if(r.type == Report.c_ReadMemory)  					{  						try  						{  							uint addressReply = UInt32.Parse(r.values[1]' System.Globalization.NumberStyles.HexNumber);  							string dataText = r.values[2];    							if(addressReply == address)  							{  								int size = dataText.Length / 2;    								for(int pos = 0; pos < size; pos++)  								{  									data[offset + pos] = Byte.Parse(dataText.Substring(pos * 2' 2)' System.Globalization.NumberStyles.HexNumber);  								}    								address += (uint)size;  								offset += size;  								count -= size;  							}  						}  						catch  						{  							return false;  						}  					}  					else if(r.type == Report.c_Error)  					{  						return false;  					}  					else if(r.type == Report.c_Noise)  					{  						m_eng.InjectMessage("{0}\r\n"' r.line);  					}  				}    				return true;  			}
Magic Number,Microsoft.SPOT.Debugger,AbortHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AbortHandler.cs,ReadRegisters,The following statement contains a magic number: if(m_deviceRunning)  			{  				cpsr = 0;  				BWA = 0;  				BWC = 0;    				return true;  			}  			else  			{  				MemoryStream stream = new MemoryStream();  				BinaryWriter writer = new BinaryWriter(stream' Encoding.Unicode);  				int count = 16 + 3;    				writer.Write((byte)'R');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');    				writer.Flush();    				SendBuffer(stream.ToArray());    				cpsr = 0;  				BWA = 0;  				BWC = 0;    				while(count > 0)  				{  					Report r = GetReport(100);  					if(r == null)  						return false;    					if(r.type == Report.c_Register)  					{  						try  						{  							string reg = r.values[1];  							uint data = UInt32.Parse(r.values[2]' System.Globalization.NumberStyles.HexNumber);    							switch(reg)  							{  								case "r0":  									registers[0] = data;  									break;  								case "r1":  									registers[1] = data;  									break;  								case "r2":  									registers[2] = data;  									break;  								case "r3":  									registers[3] = data;  									break;  								case "r4":  									registers[4] = data;  									break;  								case "r5":  									registers[5] = data;  									break;  								case "r6":  									registers[6] = data;  									break;  								case "r7":  									registers[7] = data;  									break;  								case "r8":  									registers[8] = data;  									break;  								case "r9":  									registers[9] = data;  									break;  								case "r10":  									registers[10] = data;  									break;  								case "r11":  									registers[11] = data;  									break;  								case "r12":  									registers[12] = data;  									break;  								case "sp":  									registers[13] = data;  									break;  								case "lr":  									registers[14] = data;  									break;  								case "pc":  									registers[15] = data;  									break;  								case "cpsr":  									cpsr = data;  									break;  								case "BWA":  									BWA = data;  									break;  								case "BWC":  									BWC = data;  									break;    								default:  									return false;  							}    							count--;  						}  						catch  						{  							return false;  						}  					}  					else if(r.type == Report.c_Error)  					{  						return false;  					}  					else if(r.type == Report.c_Noise)  					{  						m_eng.InjectMessage("{0}\r\n"' r.line);  					}  				}    				return true;  			}
Magic Number,Microsoft.SPOT.Debugger,AbortHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AbortHandler.cs,ReadRegisters,The following statement contains a magic number: if(m_deviceRunning)  			{  				cpsr = 0;  				BWA = 0;  				BWC = 0;    				return true;  			}  			else  			{  				MemoryStream stream = new MemoryStream();  				BinaryWriter writer = new BinaryWriter(stream' Encoding.Unicode);  				int count = 16 + 3;    				writer.Write((byte)'R');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');    				writer.Flush();    				SendBuffer(stream.ToArray());    				cpsr = 0;  				BWA = 0;  				BWC = 0;    				while(count > 0)  				{  					Report r = GetReport(100);  					if(r == null)  						return false;    					if(r.type == Report.c_Register)  					{  						try  						{  							string reg = r.values[1];  							uint data = UInt32.Parse(r.values[2]' System.Globalization.NumberStyles.HexNumber);    							switch(reg)  							{  								case "r0":  									registers[0] = data;  									break;  								case "r1":  									registers[1] = data;  									break;  								case "r2":  									registers[2] = data;  									break;  								case "r3":  									registers[3] = data;  									break;  								case "r4":  									registers[4] = data;  									break;  								case "r5":  									registers[5] = data;  									break;  								case "r6":  									registers[6] = data;  									break;  								case "r7":  									registers[7] = data;  									break;  								case "r8":  									registers[8] = data;  									break;  								case "r9":  									registers[9] = data;  									break;  								case "r10":  									registers[10] = data;  									break;  								case "r11":  									registers[11] = data;  									break;  								case "r12":  									registers[12] = data;  									break;  								case "sp":  									registers[13] = data;  									break;  								case "lr":  									registers[14] = data;  									break;  								case "pc":  									registers[15] = data;  									break;  								case "cpsr":  									cpsr = data;  									break;  								case "BWA":  									BWA = data;  									break;  								case "BWC":  									BWC = data;  									break;    								default:  									return false;  							}    							count--;  						}  						catch  						{  							return false;  						}  					}  					else if(r.type == Report.c_Error)  					{  						return false;  					}  					else if(r.type == Report.c_Noise)  					{  						m_eng.InjectMessage("{0}\r\n"' r.line);  					}  				}    				return true;  			}
Magic Number,Microsoft.SPOT.Debugger,AbortHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AbortHandler.cs,ReadRegisters,The following statement contains a magic number: if(m_deviceRunning)  			{  				cpsr = 0;  				BWA = 0;  				BWC = 0;    				return true;  			}  			else  			{  				MemoryStream stream = new MemoryStream();  				BinaryWriter writer = new BinaryWriter(stream' Encoding.Unicode);  				int count = 16 + 3;    				writer.Write((byte)'R');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');    				writer.Flush();    				SendBuffer(stream.ToArray());    				cpsr = 0;  				BWA = 0;  				BWC = 0;    				while(count > 0)  				{  					Report r = GetReport(100);  					if(r == null)  						return false;    					if(r.type == Report.c_Register)  					{  						try  						{  							string reg = r.values[1];  							uint data = UInt32.Parse(r.values[2]' System.Globalization.NumberStyles.HexNumber);    							switch(reg)  							{  								case "r0":  									registers[0] = data;  									break;  								case "r1":  									registers[1] = data;  									break;  								case "r2":  									registers[2] = data;  									break;  								case "r3":  									registers[3] = data;  									break;  								case "r4":  									registers[4] = data;  									break;  								case "r5":  									registers[5] = data;  									break;  								case "r6":  									registers[6] = data;  									break;  								case "r7":  									registers[7] = data;  									break;  								case "r8":  									registers[8] = data;  									break;  								case "r9":  									registers[9] = data;  									break;  								case "r10":  									registers[10] = data;  									break;  								case "r11":  									registers[11] = data;  									break;  								case "r12":  									registers[12] = data;  									break;  								case "sp":  									registers[13] = data;  									break;  								case "lr":  									registers[14] = data;  									break;  								case "pc":  									registers[15] = data;  									break;  								case "cpsr":  									cpsr = data;  									break;  								case "BWA":  									BWA = data;  									break;  								case "BWC":  									BWC = data;  									break;    								default:  									return false;  							}    							count--;  						}  						catch  						{  							return false;  						}  					}  					else if(r.type == Report.c_Error)  					{  						return false;  					}  					else if(r.type == Report.c_Noise)  					{  						m_eng.InjectMessage("{0}\r\n"' r.line);  					}  				}    				return true;  			}
Magic Number,Microsoft.SPOT.Debugger,AbortHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AbortHandler.cs,ReadRegisters,The following statement contains a magic number: if(m_deviceRunning)  			{  				cpsr = 0;  				BWA = 0;  				BWC = 0;    				return true;  			}  			else  			{  				MemoryStream stream = new MemoryStream();  				BinaryWriter writer = new BinaryWriter(stream' Encoding.Unicode);  				int count = 16 + 3;    				writer.Write((byte)'R');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');    				writer.Flush();    				SendBuffer(stream.ToArray());    				cpsr = 0;  				BWA = 0;  				BWC = 0;    				while(count > 0)  				{  					Report r = GetReport(100);  					if(r == null)  						return false;    					if(r.type == Report.c_Register)  					{  						try  						{  							string reg = r.values[1];  							uint data = UInt32.Parse(r.values[2]' System.Globalization.NumberStyles.HexNumber);    							switch(reg)  							{  								case "r0":  									registers[0] = data;  									break;  								case "r1":  									registers[1] = data;  									break;  								case "r2":  									registers[2] = data;  									break;  								case "r3":  									registers[3] = data;  									break;  								case "r4":  									registers[4] = data;  									break;  								case "r5":  									registers[5] = data;  									break;  								case "r6":  									registers[6] = data;  									break;  								case "r7":  									registers[7] = data;  									break;  								case "r8":  									registers[8] = data;  									break;  								case "r9":  									registers[9] = data;  									break;  								case "r10":  									registers[10] = data;  									break;  								case "r11":  									registers[11] = data;  									break;  								case "r12":  									registers[12] = data;  									break;  								case "sp":  									registers[13] = data;  									break;  								case "lr":  									registers[14] = data;  									break;  								case "pc":  									registers[15] = data;  									break;  								case "cpsr":  									cpsr = data;  									break;  								case "BWA":  									BWA = data;  									break;  								case "BWC":  									BWC = data;  									break;    								default:  									return false;  							}    							count--;  						}  						catch  						{  							return false;  						}  					}  					else if(r.type == Report.c_Error)  					{  						return false;  					}  					else if(r.type == Report.c_Noise)  					{  						m_eng.InjectMessage("{0}\r\n"' r.line);  					}  				}    				return true;  			}
Magic Number,Microsoft.SPOT.Debugger,AbortHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AbortHandler.cs,ReadRegisters,The following statement contains a magic number: if(m_deviceRunning)  			{  				cpsr = 0;  				BWA = 0;  				BWC = 0;    				return true;  			}  			else  			{  				MemoryStream stream = new MemoryStream();  				BinaryWriter writer = new BinaryWriter(stream' Encoding.Unicode);  				int count = 16 + 3;    				writer.Write((byte)'R');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');    				writer.Flush();    				SendBuffer(stream.ToArray());    				cpsr = 0;  				BWA = 0;  				BWC = 0;    				while(count > 0)  				{  					Report r = GetReport(100);  					if(r == null)  						return false;    					if(r.type == Report.c_Register)  					{  						try  						{  							string reg = r.values[1];  							uint data = UInt32.Parse(r.values[2]' System.Globalization.NumberStyles.HexNumber);    							switch(reg)  							{  								case "r0":  									registers[0] = data;  									break;  								case "r1":  									registers[1] = data;  									break;  								case "r2":  									registers[2] = data;  									break;  								case "r3":  									registers[3] = data;  									break;  								case "r4":  									registers[4] = data;  									break;  								case "r5":  									registers[5] = data;  									break;  								case "r6":  									registers[6] = data;  									break;  								case "r7":  									registers[7] = data;  									break;  								case "r8":  									registers[8] = data;  									break;  								case "r9":  									registers[9] = data;  									break;  								case "r10":  									registers[10] = data;  									break;  								case "r11":  									registers[11] = data;  									break;  								case "r12":  									registers[12] = data;  									break;  								case "sp":  									registers[13] = data;  									break;  								case "lr":  									registers[14] = data;  									break;  								case "pc":  									registers[15] = data;  									break;  								case "cpsr":  									cpsr = data;  									break;  								case "BWA":  									BWA = data;  									break;  								case "BWC":  									BWC = data;  									break;    								default:  									return false;  							}    							count--;  						}  						catch  						{  							return false;  						}  					}  					else if(r.type == Report.c_Error)  					{  						return false;  					}  					else if(r.type == Report.c_Noise)  					{  						m_eng.InjectMessage("{0}\r\n"' r.line);  					}  				}    				return true;  			}
Magic Number,Microsoft.SPOT.Debugger,AbortHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AbortHandler.cs,ReadRegisters,The following statement contains a magic number: if(m_deviceRunning)  			{  				cpsr = 0;  				BWA = 0;  				BWC = 0;    				return true;  			}  			else  			{  				MemoryStream stream = new MemoryStream();  				BinaryWriter writer = new BinaryWriter(stream' Encoding.Unicode);  				int count = 16 + 3;    				writer.Write((byte)'R');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');    				writer.Flush();    				SendBuffer(stream.ToArray());    				cpsr = 0;  				BWA = 0;  				BWC = 0;    				while(count > 0)  				{  					Report r = GetReport(100);  					if(r == null)  						return false;    					if(r.type == Report.c_Register)  					{  						try  						{  							string reg = r.values[1];  							uint data = UInt32.Parse(r.values[2]' System.Globalization.NumberStyles.HexNumber);    							switch(reg)  							{  								case "r0":  									registers[0] = data;  									break;  								case "r1":  									registers[1] = data;  									break;  								case "r2":  									registers[2] = data;  									break;  								case "r3":  									registers[3] = data;  									break;  								case "r4":  									registers[4] = data;  									break;  								case "r5":  									registers[5] = data;  									break;  								case "r6":  									registers[6] = data;  									break;  								case "r7":  									registers[7] = data;  									break;  								case "r8":  									registers[8] = data;  									break;  								case "r9":  									registers[9] = data;  									break;  								case "r10":  									registers[10] = data;  									break;  								case "r11":  									registers[11] = data;  									break;  								case "r12":  									registers[12] = data;  									break;  								case "sp":  									registers[13] = data;  									break;  								case "lr":  									registers[14] = data;  									break;  								case "pc":  									registers[15] = data;  									break;  								case "cpsr":  									cpsr = data;  									break;  								case "BWA":  									BWA = data;  									break;  								case "BWC":  									BWC = data;  									break;    								default:  									return false;  							}    							count--;  						}  						catch  						{  							return false;  						}  					}  					else if(r.type == Report.c_Error)  					{  						return false;  					}  					else if(r.type == Report.c_Noise)  					{  						m_eng.InjectMessage("{0}\r\n"' r.line);  					}  				}    				return true;  			}
Magic Number,Microsoft.SPOT.Debugger,AbortHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AbortHandler.cs,ReadRegisters,The following statement contains a magic number: if(m_deviceRunning)  			{  				cpsr = 0;  				BWA = 0;  				BWC = 0;    				return true;  			}  			else  			{  				MemoryStream stream = new MemoryStream();  				BinaryWriter writer = new BinaryWriter(stream' Encoding.Unicode);  				int count = 16 + 3;    				writer.Write((byte)'R');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');    				writer.Flush();    				SendBuffer(stream.ToArray());    				cpsr = 0;  				BWA = 0;  				BWC = 0;    				while(count > 0)  				{  					Report r = GetReport(100);  					if(r == null)  						return false;    					if(r.type == Report.c_Register)  					{  						try  						{  							string reg = r.values[1];  							uint data = UInt32.Parse(r.values[2]' System.Globalization.NumberStyles.HexNumber);    							switch(reg)  							{  								case "r0":  									registers[0] = data;  									break;  								case "r1":  									registers[1] = data;  									break;  								case "r2":  									registers[2] = data;  									break;  								case "r3":  									registers[3] = data;  									break;  								case "r4":  									registers[4] = data;  									break;  								case "r5":  									registers[5] = data;  									break;  								case "r6":  									registers[6] = data;  									break;  								case "r7":  									registers[7] = data;  									break;  								case "r8":  									registers[8] = data;  									break;  								case "r9":  									registers[9] = data;  									break;  								case "r10":  									registers[10] = data;  									break;  								case "r11":  									registers[11] = data;  									break;  								case "r12":  									registers[12] = data;  									break;  								case "sp":  									registers[13] = data;  									break;  								case "lr":  									registers[14] = data;  									break;  								case "pc":  									registers[15] = data;  									break;  								case "cpsr":  									cpsr = data;  									break;  								case "BWA":  									BWA = data;  									break;  								case "BWC":  									BWC = data;  									break;    								default:  									return false;  							}    							count--;  						}  						catch  						{  							return false;  						}  					}  					else if(r.type == Report.c_Error)  					{  						return false;  					}  					else if(r.type == Report.c_Noise)  					{  						m_eng.InjectMessage("{0}\r\n"' r.line);  					}  				}    				return true;  			}
Magic Number,Microsoft.SPOT.Debugger,AbortHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AbortHandler.cs,ReadRegisters,The following statement contains a magic number: if(m_deviceRunning)  			{  				cpsr = 0;  				BWA = 0;  				BWC = 0;    				return true;  			}  			else  			{  				MemoryStream stream = new MemoryStream();  				BinaryWriter writer = new BinaryWriter(stream' Encoding.Unicode);  				int count = 16 + 3;    				writer.Write((byte)'R');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');    				writer.Flush();    				SendBuffer(stream.ToArray());    				cpsr = 0;  				BWA = 0;  				BWC = 0;    				while(count > 0)  				{  					Report r = GetReport(100);  					if(r == null)  						return false;    					if(r.type == Report.c_Register)  					{  						try  						{  							string reg = r.values[1];  							uint data = UInt32.Parse(r.values[2]' System.Globalization.NumberStyles.HexNumber);    							switch(reg)  							{  								case "r0":  									registers[0] = data;  									break;  								case "r1":  									registers[1] = data;  									break;  								case "r2":  									registers[2] = data;  									break;  								case "r3":  									registers[3] = data;  									break;  								case "r4":  									registers[4] = data;  									break;  								case "r5":  									registers[5] = data;  									break;  								case "r6":  									registers[6] = data;  									break;  								case "r7":  									registers[7] = data;  									break;  								case "r8":  									registers[8] = data;  									break;  								case "r9":  									registers[9] = data;  									break;  								case "r10":  									registers[10] = data;  									break;  								case "r11":  									registers[11] = data;  									break;  								case "r12":  									registers[12] = data;  									break;  								case "sp":  									registers[13] = data;  									break;  								case "lr":  									registers[14] = data;  									break;  								case "pc":  									registers[15] = data;  									break;  								case "cpsr":  									cpsr = data;  									break;  								case "BWA":  									BWA = data;  									break;  								case "BWC":  									BWC = data;  									break;    								default:  									return false;  							}    							count--;  						}  						catch  						{  							return false;  						}  					}  					else if(r.type == Report.c_Error)  					{  						return false;  					}  					else if(r.type == Report.c_Noise)  					{  						m_eng.InjectMessage("{0}\r\n"' r.line);  					}  				}    				return true;  			}
Magic Number,Microsoft.SPOT.Debugger,AbortHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AbortHandler.cs,ReadRegisters,The following statement contains a magic number: if(m_deviceRunning)  			{  				cpsr = 0;  				BWA = 0;  				BWC = 0;    				return true;  			}  			else  			{  				MemoryStream stream = new MemoryStream();  				BinaryWriter writer = new BinaryWriter(stream' Encoding.Unicode);  				int count = 16 + 3;    				writer.Write((byte)'R');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');    				writer.Flush();    				SendBuffer(stream.ToArray());    				cpsr = 0;  				BWA = 0;  				BWC = 0;    				while(count > 0)  				{  					Report r = GetReport(100);  					if(r == null)  						return false;    					if(r.type == Report.c_Register)  					{  						try  						{  							string reg = r.values[1];  							uint data = UInt32.Parse(r.values[2]' System.Globalization.NumberStyles.HexNumber);    							switch(reg)  							{  								case "r0":  									registers[0] = data;  									break;  								case "r1":  									registers[1] = data;  									break;  								case "r2":  									registers[2] = data;  									break;  								case "r3":  									registers[3] = data;  									break;  								case "r4":  									registers[4] = data;  									break;  								case "r5":  									registers[5] = data;  									break;  								case "r6":  									registers[6] = data;  									break;  								case "r7":  									registers[7] = data;  									break;  								case "r8":  									registers[8] = data;  									break;  								case "r9":  									registers[9] = data;  									break;  								case "r10":  									registers[10] = data;  									break;  								case "r11":  									registers[11] = data;  									break;  								case "r12":  									registers[12] = data;  									break;  								case "sp":  									registers[13] = data;  									break;  								case "lr":  									registers[14] = data;  									break;  								case "pc":  									registers[15] = data;  									break;  								case "cpsr":  									cpsr = data;  									break;  								case "BWA":  									BWA = data;  									break;  								case "BWC":  									BWC = data;  									break;    								default:  									return false;  							}    							count--;  						}  						catch  						{  							return false;  						}  					}  					else if(r.type == Report.c_Error)  					{  						return false;  					}  					else if(r.type == Report.c_Noise)  					{  						m_eng.InjectMessage("{0}\r\n"' r.line);  					}  				}    				return true;  			}
Magic Number,Microsoft.SPOT.Debugger,AbortHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AbortHandler.cs,ReadRegisters,The following statement contains a magic number: if(m_deviceRunning)  			{  				cpsr = 0;  				BWA = 0;  				BWC = 0;    				return true;  			}  			else  			{  				MemoryStream stream = new MemoryStream();  				BinaryWriter writer = new BinaryWriter(stream' Encoding.Unicode);  				int count = 16 + 3;    				writer.Write((byte)'R');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');    				writer.Flush();    				SendBuffer(stream.ToArray());    				cpsr = 0;  				BWA = 0;  				BWC = 0;    				while(count > 0)  				{  					Report r = GetReport(100);  					if(r == null)  						return false;    					if(r.type == Report.c_Register)  					{  						try  						{  							string reg = r.values[1];  							uint data = UInt32.Parse(r.values[2]' System.Globalization.NumberStyles.HexNumber);    							switch(reg)  							{  								case "r0":  									registers[0] = data;  									break;  								case "r1":  									registers[1] = data;  									break;  								case "r2":  									registers[2] = data;  									break;  								case "r3":  									registers[3] = data;  									break;  								case "r4":  									registers[4] = data;  									break;  								case "r5":  									registers[5] = data;  									break;  								case "r6":  									registers[6] = data;  									break;  								case "r7":  									registers[7] = data;  									break;  								case "r8":  									registers[8] = data;  									break;  								case "r9":  									registers[9] = data;  									break;  								case "r10":  									registers[10] = data;  									break;  								case "r11":  									registers[11] = data;  									break;  								case "r12":  									registers[12] = data;  									break;  								case "sp":  									registers[13] = data;  									break;  								case "lr":  									registers[14] = data;  									break;  								case "pc":  									registers[15] = data;  									break;  								case "cpsr":  									cpsr = data;  									break;  								case "BWA":  									BWA = data;  									break;  								case "BWC":  									BWC = data;  									break;    								default:  									return false;  							}    							count--;  						}  						catch  						{  							return false;  						}  					}  					else if(r.type == Report.c_Error)  					{  						return false;  					}  					else if(r.type == Report.c_Noise)  					{  						m_eng.InjectMessage("{0}\r\n"' r.line);  					}  				}    				return true;  			}
Magic Number,Microsoft.SPOT.Debugger,AbortHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AbortHandler.cs,ReadRegisters,The following statement contains a magic number: if(m_deviceRunning)  			{  				cpsr = 0;  				BWA = 0;  				BWC = 0;    				return true;  			}  			else  			{  				MemoryStream stream = new MemoryStream();  				BinaryWriter writer = new BinaryWriter(stream' Encoding.Unicode);  				int count = 16 + 3;    				writer.Write((byte)'R');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');    				writer.Flush();    				SendBuffer(stream.ToArray());    				cpsr = 0;  				BWA = 0;  				BWC = 0;    				while(count > 0)  				{  					Report r = GetReport(100);  					if(r == null)  						return false;    					if(r.type == Report.c_Register)  					{  						try  						{  							string reg = r.values[1];  							uint data = UInt32.Parse(r.values[2]' System.Globalization.NumberStyles.HexNumber);    							switch(reg)  							{  								case "r0":  									registers[0] = data;  									break;  								case "r1":  									registers[1] = data;  									break;  								case "r2":  									registers[2] = data;  									break;  								case "r3":  									registers[3] = data;  									break;  								case "r4":  									registers[4] = data;  									break;  								case "r5":  									registers[5] = data;  									break;  								case "r6":  									registers[6] = data;  									break;  								case "r7":  									registers[7] = data;  									break;  								case "r8":  									registers[8] = data;  									break;  								case "r9":  									registers[9] = data;  									break;  								case "r10":  									registers[10] = data;  									break;  								case "r11":  									registers[11] = data;  									break;  								case "r12":  									registers[12] = data;  									break;  								case "sp":  									registers[13] = data;  									break;  								case "lr":  									registers[14] = data;  									break;  								case "pc":  									registers[15] = data;  									break;  								case "cpsr":  									cpsr = data;  									break;  								case "BWA":  									BWA = data;  									break;  								case "BWC":  									BWC = data;  									break;    								default:  									return false;  							}    							count--;  						}  						catch  						{  							return false;  						}  					}  					else if(r.type == Report.c_Error)  					{  						return false;  					}  					else if(r.type == Report.c_Noise)  					{  						m_eng.InjectMessage("{0}\r\n"' r.line);  					}  				}    				return true;  			}
Magic Number,Microsoft.SPOT.Debugger,AbortHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AbortHandler.cs,ReadRegisters,The following statement contains a magic number: if(m_deviceRunning)  			{  				cpsr = 0;  				BWA = 0;  				BWC = 0;    				return true;  			}  			else  			{  				MemoryStream stream = new MemoryStream();  				BinaryWriter writer = new BinaryWriter(stream' Encoding.Unicode);  				int count = 16 + 3;    				writer.Write((byte)'R');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');    				writer.Flush();    				SendBuffer(stream.ToArray());    				cpsr = 0;  				BWA = 0;  				BWC = 0;    				while(count > 0)  				{  					Report r = GetReport(100);  					if(r == null)  						return false;    					if(r.type == Report.c_Register)  					{  						try  						{  							string reg = r.values[1];  							uint data = UInt32.Parse(r.values[2]' System.Globalization.NumberStyles.HexNumber);    							switch(reg)  							{  								case "r0":  									registers[0] = data;  									break;  								case "r1":  									registers[1] = data;  									break;  								case "r2":  									registers[2] = data;  									break;  								case "r3":  									registers[3] = data;  									break;  								case "r4":  									registers[4] = data;  									break;  								case "r5":  									registers[5] = data;  									break;  								case "r6":  									registers[6] = data;  									break;  								case "r7":  									registers[7] = data;  									break;  								case "r8":  									registers[8] = data;  									break;  								case "r9":  									registers[9] = data;  									break;  								case "r10":  									registers[10] = data;  									break;  								case "r11":  									registers[11] = data;  									break;  								case "r12":  									registers[12] = data;  									break;  								case "sp":  									registers[13] = data;  									break;  								case "lr":  									registers[14] = data;  									break;  								case "pc":  									registers[15] = data;  									break;  								case "cpsr":  									cpsr = data;  									break;  								case "BWA":  									BWA = data;  									break;  								case "BWC":  									BWC = data;  									break;    								default:  									return false;  							}    							count--;  						}  						catch  						{  							return false;  						}  					}  					else if(r.type == Report.c_Error)  					{  						return false;  					}  					else if(r.type == Report.c_Noise)  					{  						m_eng.InjectMessage("{0}\r\n"' r.line);  					}  				}    				return true;  			}
Magic Number,Microsoft.SPOT.Debugger,AbortHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AbortHandler.cs,ReadRegisters,The following statement contains a magic number: if(m_deviceRunning)  			{  				cpsr = 0;  				BWA = 0;  				BWC = 0;    				return true;  			}  			else  			{  				MemoryStream stream = new MemoryStream();  				BinaryWriter writer = new BinaryWriter(stream' Encoding.Unicode);  				int count = 16 + 3;    				writer.Write((byte)'R');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');    				writer.Flush();    				SendBuffer(stream.ToArray());    				cpsr = 0;  				BWA = 0;  				BWC = 0;    				while(count > 0)  				{  					Report r = GetReport(100);  					if(r == null)  						return false;    					if(r.type == Report.c_Register)  					{  						try  						{  							string reg = r.values[1];  							uint data = UInt32.Parse(r.values[2]' System.Globalization.NumberStyles.HexNumber);    							switch(reg)  							{  								case "r0":  									registers[0] = data;  									break;  								case "r1":  									registers[1] = data;  									break;  								case "r2":  									registers[2] = data;  									break;  								case "r3":  									registers[3] = data;  									break;  								case "r4":  									registers[4] = data;  									break;  								case "r5":  									registers[5] = data;  									break;  								case "r6":  									registers[6] = data;  									break;  								case "r7":  									registers[7] = data;  									break;  								case "r8":  									registers[8] = data;  									break;  								case "r9":  									registers[9] = data;  									break;  								case "r10":  									registers[10] = data;  									break;  								case "r11":  									registers[11] = data;  									break;  								case "r12":  									registers[12] = data;  									break;  								case "sp":  									registers[13] = data;  									break;  								case "lr":  									registers[14] = data;  									break;  								case "pc":  									registers[15] = data;  									break;  								case "cpsr":  									cpsr = data;  									break;  								case "BWA":  									BWA = data;  									break;  								case "BWC":  									BWC = data;  									break;    								default:  									return false;  							}    							count--;  						}  						catch  						{  							return false;  						}  					}  					else if(r.type == Report.c_Error)  					{  						return false;  					}  					else if(r.type == Report.c_Noise)  					{  						m_eng.InjectMessage("{0}\r\n"' r.line);  					}  				}    				return true;  			}
Magic Number,Microsoft.SPOT.Debugger,AbortHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AbortHandler.cs,ReadRegisters,The following statement contains a magic number: if(m_deviceRunning)  			{  				cpsr = 0;  				BWA = 0;  				BWC = 0;    				return true;  			}  			else  			{  				MemoryStream stream = new MemoryStream();  				BinaryWriter writer = new BinaryWriter(stream' Encoding.Unicode);  				int count = 16 + 3;    				writer.Write((byte)'R');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');    				writer.Flush();    				SendBuffer(stream.ToArray());    				cpsr = 0;  				BWA = 0;  				BWC = 0;    				while(count > 0)  				{  					Report r = GetReport(100);  					if(r == null)  						return false;    					if(r.type == Report.c_Register)  					{  						try  						{  							string reg = r.values[1];  							uint data = UInt32.Parse(r.values[2]' System.Globalization.NumberStyles.HexNumber);    							switch(reg)  							{  								case "r0":  									registers[0] = data;  									break;  								case "r1":  									registers[1] = data;  									break;  								case "r2":  									registers[2] = data;  									break;  								case "r3":  									registers[3] = data;  									break;  								case "r4":  									registers[4] = data;  									break;  								case "r5":  									registers[5] = data;  									break;  								case "r6":  									registers[6] = data;  									break;  								case "r7":  									registers[7] = data;  									break;  								case "r8":  									registers[8] = data;  									break;  								case "r9":  									registers[9] = data;  									break;  								case "r10":  									registers[10] = data;  									break;  								case "r11":  									registers[11] = data;  									break;  								case "r12":  									registers[12] = data;  									break;  								case "sp":  									registers[13] = data;  									break;  								case "lr":  									registers[14] = data;  									break;  								case "pc":  									registers[15] = data;  									break;  								case "cpsr":  									cpsr = data;  									break;  								case "BWA":  									BWA = data;  									break;  								case "BWC":  									BWC = data;  									break;    								default:  									return false;  							}    							count--;  						}  						catch  						{  							return false;  						}  					}  					else if(r.type == Report.c_Error)  					{  						return false;  					}  					else if(r.type == Report.c_Noise)  					{  						m_eng.InjectMessage("{0}\r\n"' r.line);  					}  				}    				return true;  			}
Magic Number,Microsoft.SPOT.Debugger,AbortHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AbortHandler.cs,ReadRegisters,The following statement contains a magic number: if(m_deviceRunning)  			{  				cpsr = 0;  				BWA = 0;  				BWC = 0;    				return true;  			}  			else  			{  				MemoryStream stream = new MemoryStream();  				BinaryWriter writer = new BinaryWriter(stream' Encoding.Unicode);  				int count = 16 + 3;    				writer.Write((byte)'R');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');    				writer.Flush();    				SendBuffer(stream.ToArray());    				cpsr = 0;  				BWA = 0;  				BWC = 0;    				while(count > 0)  				{  					Report r = GetReport(100);  					if(r == null)  						return false;    					if(r.type == Report.c_Register)  					{  						try  						{  							string reg = r.values[1];  							uint data = UInt32.Parse(r.values[2]' System.Globalization.NumberStyles.HexNumber);    							switch(reg)  							{  								case "r0":  									registers[0] = data;  									break;  								case "r1":  									registers[1] = data;  									break;  								case "r2":  									registers[2] = data;  									break;  								case "r3":  									registers[3] = data;  									break;  								case "r4":  									registers[4] = data;  									break;  								case "r5":  									registers[5] = data;  									break;  								case "r6":  									registers[6] = data;  									break;  								case "r7":  									registers[7] = data;  									break;  								case "r8":  									registers[8] = data;  									break;  								case "r9":  									registers[9] = data;  									break;  								case "r10":  									registers[10] = data;  									break;  								case "r11":  									registers[11] = data;  									break;  								case "r12":  									registers[12] = data;  									break;  								case "sp":  									registers[13] = data;  									break;  								case "lr":  									registers[14] = data;  									break;  								case "pc":  									registers[15] = data;  									break;  								case "cpsr":  									cpsr = data;  									break;  								case "BWA":  									BWA = data;  									break;  								case "BWC":  									BWC = data;  									break;    								default:  									return false;  							}    							count--;  						}  						catch  						{  							return false;  						}  					}  					else if(r.type == Report.c_Error)  					{  						return false;  					}  					else if(r.type == Report.c_Noise)  					{  						m_eng.InjectMessage("{0}\r\n"' r.line);  					}  				}    				return true;  			}
Magic Number,Microsoft.SPOT.Debugger,AbortHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AbortHandler.cs,ReadRegisters,The following statement contains a magic number: if(m_deviceRunning)  			{  				cpsr = 0;  				BWA = 0;  				BWC = 0;    				return true;  			}  			else  			{  				MemoryStream stream = new MemoryStream();  				BinaryWriter writer = new BinaryWriter(stream' Encoding.Unicode);  				int count = 16 + 3;    				writer.Write((byte)'R');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');    				writer.Flush();    				SendBuffer(stream.ToArray());    				cpsr = 0;  				BWA = 0;  				BWC = 0;    				while(count > 0)  				{  					Report r = GetReport(100);  					if(r == null)  						return false;    					if(r.type == Report.c_Register)  					{  						try  						{  							string reg = r.values[1];  							uint data = UInt32.Parse(r.values[2]' System.Globalization.NumberStyles.HexNumber);    							switch(reg)  							{  								case "r0":  									registers[0] = data;  									break;  								case "r1":  									registers[1] = data;  									break;  								case "r2":  									registers[2] = data;  									break;  								case "r3":  									registers[3] = data;  									break;  								case "r4":  									registers[4] = data;  									break;  								case "r5":  									registers[5] = data;  									break;  								case "r6":  									registers[6] = data;  									break;  								case "r7":  									registers[7] = data;  									break;  								case "r8":  									registers[8] = data;  									break;  								case "r9":  									registers[9] = data;  									break;  								case "r10":  									registers[10] = data;  									break;  								case "r11":  									registers[11] = data;  									break;  								case "r12":  									registers[12] = data;  									break;  								case "sp":  									registers[13] = data;  									break;  								case "lr":  									registers[14] = data;  									break;  								case "pc":  									registers[15] = data;  									break;  								case "cpsr":  									cpsr = data;  									break;  								case "BWA":  									BWA = data;  									break;  								case "BWC":  									BWC = data;  									break;    								default:  									return false;  							}    							count--;  						}  						catch  						{  							return false;  						}  					}  					else if(r.type == Report.c_Error)  					{  						return false;  					}  					else if(r.type == Report.c_Noise)  					{  						m_eng.InjectMessage("{0}\r\n"' r.line);  					}  				}    				return true;  			}
Magic Number,Microsoft.SPOT.Debugger,AbortHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AbortHandler.cs,ReadRegisters,The following statement contains a magic number: if(m_deviceRunning)  			{  				cpsr = 0;  				BWA = 0;  				BWC = 0;    				return true;  			}  			else  			{  				MemoryStream stream = new MemoryStream();  				BinaryWriter writer = new BinaryWriter(stream' Encoding.Unicode);  				int count = 16 + 3;    				writer.Write((byte)'R');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');    				writer.Flush();    				SendBuffer(stream.ToArray());    				cpsr = 0;  				BWA = 0;  				BWC = 0;    				while(count > 0)  				{  					Report r = GetReport(100);  					if(r == null)  						return false;    					if(r.type == Report.c_Register)  					{  						try  						{  							string reg = r.values[1];  							uint data = UInt32.Parse(r.values[2]' System.Globalization.NumberStyles.HexNumber);    							switch(reg)  							{  								case "r0":  									registers[0] = data;  									break;  								case "r1":  									registers[1] = data;  									break;  								case "r2":  									registers[2] = data;  									break;  								case "r3":  									registers[3] = data;  									break;  								case "r4":  									registers[4] = data;  									break;  								case "r5":  									registers[5] = data;  									break;  								case "r6":  									registers[6] = data;  									break;  								case "r7":  									registers[7] = data;  									break;  								case "r8":  									registers[8] = data;  									break;  								case "r9":  									registers[9] = data;  									break;  								case "r10":  									registers[10] = data;  									break;  								case "r11":  									registers[11] = data;  									break;  								case "r12":  									registers[12] = data;  									break;  								case "sp":  									registers[13] = data;  									break;  								case "lr":  									registers[14] = data;  									break;  								case "pc":  									registers[15] = data;  									break;  								case "cpsr":  									cpsr = data;  									break;  								case "BWA":  									BWA = data;  									break;  								case "BWC":  									BWC = data;  									break;    								default:  									return false;  							}    							count--;  						}  						catch  						{  							return false;  						}  					}  					else if(r.type == Report.c_Error)  					{  						return false;  					}  					else if(r.type == Report.c_Noise)  					{  						m_eng.InjectMessage("{0}\r\n"' r.line);  					}  				}    				return true;  			}
Magic Number,Microsoft.SPOT.Debugger,AbortHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AbortHandler.cs,ReadRegisters,The following statement contains a magic number: if(m_deviceRunning)  			{  				cpsr = 0;  				BWA = 0;  				BWC = 0;    				return true;  			}  			else  			{  				MemoryStream stream = new MemoryStream();  				BinaryWriter writer = new BinaryWriter(stream' Encoding.Unicode);  				int count = 16 + 3;    				writer.Write((byte)'R');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');  				writer.Write((byte)'\n');    				writer.Flush();    				SendBuffer(stream.ToArray());    				cpsr = 0;  				BWA = 0;  				BWC = 0;    				while(count > 0)  				{  					Report r = GetReport(100);  					if(r == null)  						return false;    					if(r.type == Report.c_Register)  					{  						try  						{  							string reg = r.values[1];  							uint data = UInt32.Parse(r.values[2]' System.Globalization.NumberStyles.HexNumber);    							switch(reg)  							{  								case "r0":  									registers[0] = data;  									break;  								case "r1":  									registers[1] = data;  									break;  								case "r2":  									registers[2] = data;  									break;  								case "r3":  									registers[3] = data;  									break;  								case "r4":  									registers[4] = data;  									break;  								case "r5":  									registers[5] = data;  									break;  								case "r6":  									registers[6] = data;  									break;  								case "r7":  									registers[7] = data;  									break;  								case "r8":  									registers[8] = data;  									break;  								case "r9":  									registers[9] = data;  									break;  								case "r10":  									registers[10] = data;  									break;  								case "r11":  									registers[11] = data;  									break;  								case "r12":  									registers[12] = data;  									break;  								case "sp":  									registers[13] = data;  									break;  								case "lr":  									registers[14] = data;  									break;  								case "pc":  									registers[15] = data;  									break;  								case "cpsr":  									cpsr = data;  									break;  								case "BWA":  									BWA = data;  									break;  								case "BWC":  									BWC = data;  									break;    								default:  									return false;  							}    							count--;  						}  						catch  						{  							return false;  						}  					}  					else if(r.type == Report.c_Error)  					{  						return false;  					}  					else if(r.type == Report.c_Noise)  					{  						m_eng.InjectMessage("{0}\r\n"' r.line);  					}  				}    				return true;  			}
Magic Number,Microsoft.SPOT.Debugger,AbortHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AbortHandler.cs,ReadLayout,The following statement contains a magic number: int count = 4;
Magic Number,Microsoft.SPOT.Debugger,AbortHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AbortHandler.cs,ReadLayout,The following statement contains a magic number: while(count > 0)  			{  				Report r = GetReport(100);  				if(r == null)  					return false;    				if(r.type == Report.c_Layout)  				{  					try  					{  						string reg = r.values[1];  						uint data = UInt32.Parse(r.values[2]' System.Globalization.NumberStyles.HexNumber);    						switch(reg)  						{  							case "rb":  								ramBase = data;  								break;  							case "rs":  								ramSize = data;  								break;  							case "fb":  								flashBase = data;  								break;  							case "fs":  								flashSize = data;  								break;    							default:  								return false;  						}    						count--;  					}  					catch  					{  						return false;  					}  				}  				else if(r.type == Report.c_Error)  				{  					return false;  				}  				else if(r.type == Report.c_Noise)  				{  					m_eng.InjectMessage("{0}\r\n"' r.line);  				}  			}
Magic Number,Microsoft.SPOT.Debugger,AbortHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AbortHandler.cs,ReadLayout,The following statement contains a magic number: while(count > 0)  			{  				Report r = GetReport(100);  				if(r == null)  					return false;    				if(r.type == Report.c_Layout)  				{  					try  					{  						string reg = r.values[1];  						uint data = UInt32.Parse(r.values[2]' System.Globalization.NumberStyles.HexNumber);    						switch(reg)  						{  							case "rb":  								ramBase = data;  								break;  							case "rs":  								ramSize = data;  								break;  							case "fb":  								flashBase = data;  								break;  							case "fs":  								flashSize = data;  								break;    							default:  								return false;  						}    						count--;  					}  					catch  					{  						return false;  					}  				}  				else if(r.type == Report.c_Error)  				{  					return false;  				}  				else if(r.type == Report.c_Noise)  				{  					m_eng.InjectMessage("{0}\r\n"' r.line);  				}  			}
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_ConditionCodes,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 28' 4);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_ConditionCodes,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 28' 4);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_ShouldSetConditions,The following statement contains a magic number: return OPCODE_DECODE_CHECKFLAG(op' 20);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_Register1,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 16' 4);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_Register1,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 16' 4);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_Register2,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 12' 4);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_Register2,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 12' 4);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_Register3,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 8' 4);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_Register3,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 8' 4);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_Register4,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 0' 4);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_Multiply_IsAccumulate,The following statement contains a magic number: return OPCODE_DECODE_CHECKFLAG(op' 21);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_Multiply_IsSigned,The following statement contains a magic number: return OPCODE_DECODE_CHECKFLAG(op' 22);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_StatusRegister_IsSPSR,The following statement contains a magic number: return OPCODE_DECODE_CHECKFLAG(op' 22);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_StatusRegister_Fields,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 16' 4);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_StatusRegister_Fields,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 16' 4);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_Shift_Type,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 5' 2);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_Shift_Type,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 5' 2);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_Shift_Immediate,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 7' 5);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_Shift_Immediate,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 7' 5);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_Shift_Register,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 8' 4);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_Shift_Register,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 8' 4);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_DataProcessing_Operation,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 21' 4);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_DataProcessing_Operation,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 21' 4);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_DataProcessing_ImmediateSeed,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 0' 8);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_DataProcessing_ImmediateRotation,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 8' 4);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_DataProcessing_ImmediateRotation,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 8' 4);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_DataProcessing_ImmediateValue,The following statement contains a magic number: rot *= 2;
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_DataProcessing_ImmediateValue,The following statement contains a magic number: return (imm >> (int)rot) | (imm << (int)(32 - rot));
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_DataTransfer_IsLoad,The following statement contains a magic number: return OPCODE_DECODE_CHECKFLAG(op' 20);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_DataTransfer_ShouldWriteBack,The following statement contains a magic number: return OPCODE_DECODE_CHECKFLAG(op' 21);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_DataTransfer_IsByteTransfer,The following statement contains a magic number: return OPCODE_DECODE_CHECKFLAG(op' 22);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_DataTransfer_IsUp,The following statement contains a magic number: return OPCODE_DECODE_CHECKFLAG(op' 23);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_DataTransfer_IsPreIndexing,The following statement contains a magic number: return OPCODE_DECODE_CHECKFLAG(op' 24);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_DataTransfer_Offset,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 0' 12);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_HalfWordDataTransfer_Kind,The following statement contains a magic number: return  OPCODE_DECODE_EXTRACTFIELD(op' 5' 2);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_HalfWordDataTransfer_Kind,The following statement contains a magic number: return  OPCODE_DECODE_EXTRACTFIELD(op' 5' 2);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_HalfWordDataTransfer_Offset,The following statement contains a magic number: return (OPCODE_DECODE_EXTRACTFIELD(op' 8' 4) << 4) | OPCODE_DECODE_EXTRACTFIELD(op' 0' 4);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_HalfWordDataTransfer_Offset,The following statement contains a magic number: return (OPCODE_DECODE_EXTRACTFIELD(op' 8' 4) << 4) | OPCODE_DECODE_EXTRACTFIELD(op' 0' 4);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_HalfWordDataTransfer_Offset,The following statement contains a magic number: return (OPCODE_DECODE_EXTRACTFIELD(op' 8' 4) << 4) | OPCODE_DECODE_EXTRACTFIELD(op' 0' 4);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_HalfWordDataTransfer_Offset,The following statement contains a magic number: return (OPCODE_DECODE_EXTRACTFIELD(op' 8' 4) << 4) | OPCODE_DECODE_EXTRACTFIELD(op' 0' 4);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_BlockDataTransfer_LoadPSR,The following statement contains a magic number: return OPCODE_DECODE_CHECKFLAG(op' 22);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_BlockDataTransfer_RegisterList,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 0' 16);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_Branch_IsLink,The following statement contains a magic number: return OPCODE_DECODE_CHECKFLAG(op' 24);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_Branch_Offset,The following statement contains a magic number: return ((int)(op << 8)) >> 6;
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_Branch_Offset,The following statement contains a magic number: return ((int)(op << 8)) >> 6;
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_CoprocRegisterTransfer_IsMRC,The following statement contains a magic number: return OPCODE_DECODE_CHECKFLAG(op' 20);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_CoprocRegisterTransfer_Op1,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 21' 3);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_CoprocRegisterTransfer_Op1,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 21' 3);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_CoprocRegisterTransfer_Op2,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 5' 3);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_CoprocRegisterTransfer_Op2,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 5' 3);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_CoprocRegisterTransfer_CpNum,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 8' 4);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_CoprocRegisterTransfer_CpNum,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 8' 4);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_CoprocRegisterTransfer_CRn,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 16' 4);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_CoprocRegisterTransfer_CRn,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 16' 4);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_CoprocRegisterTransfer_CRm,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 0' 4);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_CoprocRegisterTransfer_Rd,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 12' 4);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_CoprocRegisterTransfer_Rd,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 12' 4);
Magic Number,Microsoft.SPOT.Debugger,ArmDisassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,get_SoftwareInterrupt_Immediate,The following statement contains a magic number: return OPCODE_DECODE_EXTRACTFIELD(op' 0' 24);
Magic Number,Microsoft.SPOT.Debugger,Decoder,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,PrintMnemonic,The following statement contains a magic number: if(len < 9)  				{  					str.Append(new string(' '' 9 - len));  				}
Magic Number,Microsoft.SPOT.Debugger,Decoder,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,PrintMnemonic,The following statement contains a magic number: if(len < 9)  				{  					str.Append(new string(' '' 9 - len));  				}
Magic Number,Microsoft.SPOT.Debugger,Decoder_DataProcessing_1,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,Print,The following statement contains a magic number: if(m_Rn == 15)  				{  					switch(m_alu)  					{  						case ArmDisassembler.c_operation_ADD:  							m_address_Target = (uint)(m_address_PC + 8 + offset);  							break;    						case ArmDisassembler.c_operation_SUB:  							m_address_Target = (uint)(m_address_PC + 8 - offset);  							break;  					}  				}
Magic Number,Microsoft.SPOT.Debugger,Decoder_DataProcessing_1,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,Print,The following statement contains a magic number: if(m_Rn == 15)  				{  					switch(m_alu)  					{  						case ArmDisassembler.c_operation_ADD:  							m_address_Target = (uint)(m_address_PC + 8 + offset);  							break;    						case ArmDisassembler.c_operation_SUB:  							m_address_Target = (uint)(m_address_PC + 8 - offset);  							break;  					}  				}
Magic Number,Microsoft.SPOT.Debugger,Decoder_DataProcessing_1,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,Print,The following statement contains a magic number: if(m_Rn == 15)  				{  					switch(m_alu)  					{  						case ArmDisassembler.c_operation_ADD:  							m_address_Target = (uint)(m_address_PC + 8 + offset);  							break;    						case ArmDisassembler.c_operation_SUB:  							m_address_Target = (uint)(m_address_PC + 8 - offset);  							break;  					}  				}
Magic Number,Microsoft.SPOT.Debugger,Decoder_DataProcessing_2,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,Decoder_DataProcessing_2,The following statement contains a magic number: if(m_shiftValue == 0)  				{  					switch(m_shiftType)  					{  						case ArmDisassembler.c_shift_LSR:  						case ArmDisassembler.c_shift_ASR:  							m_shiftValue = 32;  							break;    						case ArmDisassembler.c_shift_ROR:  							m_shiftValue = 1;  							m_shiftType = ArmDisassembler.c_shift_RRX;  							break;  					}  				}
Magic Number,Microsoft.SPOT.Debugger,Decoder_Branch,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,Print,The following statement contains a magic number: m_address_Target = (uint)(m_address_PC + 8 + m_offset);
Magic Number,Microsoft.SPOT.Debugger,Decoder_HalfwordDataTransfer_2,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,Print,The following statement contains a magic number: if(m_Rn == 15)  				{  					int address = (int)(m_address_PC + 8);    					if(m_preIndex)  					{  						address += (m_up ? +(int)m_offset : -(int)m_offset);  					}    					m_address_Target = (uint)address;  				}
Magic Number,Microsoft.SPOT.Debugger,Decoder_HalfwordDataTransfer_2,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,Print,The following statement contains a magic number: if(m_Rn == 15)  				{  					int address = (int)(m_address_PC + 8);    					if(m_preIndex)  					{  						address += (m_up ? +(int)m_offset : -(int)m_offset);  					}    					m_address_Target = (uint)address;  				}
Magic Number,Microsoft.SPOT.Debugger,Decoder_SingleDataTransfer_1,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,Print,The following statement contains a magic number: if(m_Rn == 15)  				{  					int address = (int)(m_address_PC + 8);    					if(m_preIndex)  					{  						address += (m_up ? +(int)m_offset : -(int)m_offset);  					}    					m_address_Target = (uint)address;  				}
Magic Number,Microsoft.SPOT.Debugger,Decoder_SingleDataTransfer_1,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,Print,The following statement contains a magic number: if(m_Rn == 15)  				{  					int address = (int)(m_address_PC + 8);    					if(m_preIndex)  					{  						address += (m_up ? +(int)m_offset : -(int)m_offset);  					}    					m_address_Target = (uint)address;  				}
Magic Number,Microsoft.SPOT.Debugger,Decoder_SingleDataTransfer_2,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,Decoder_SingleDataTransfer_2,The following statement contains a magic number: if(m_shiftValue == 0)  				{  					switch(m_shiftType)  					{  						case ArmDisassembler.c_shift_LSR:  						case ArmDisassembler.c_shift_ASR:  							m_shiftValue = 32;  							break;    						case ArmDisassembler.c_shift_ROR:  							m_shiftValue = 1;  							m_shiftType = ArmDisassembler.c_shift_RRX;  							break;  					}  				}
Magic Number,Microsoft.SPOT.Debugger,Decoder_BlockDataTransfer,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,Print,The following statement contains a magic number: if(m_Rn == 13)  				{  					if(m_load)  					{  						c1 = m_preIndex ? 'E' : 'F';  						c2 = m_up ? 'D' : 'A';  					}  					else  					{  						c1 = m_preIndex ? 'F' : 'E';  						c2 = m_up ? 'A' : 'D';  					}  				}  				else  				{  					c1 = m_up ? 'I' : 'D';  					c2 = m_preIndex ? 'B' : 'A';  				}
Magic Number,Microsoft.SPOT.Debugger,AsyncUsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AsyncUsbStream.cs,EnumeratePorts,The following statement contains a magic number: while(Native.SetupDiEnumDeviceInterfaces(devInfo' 0' ref inquiriesInterface' index++' ref interfaceData))  			{  				Native.SP_DEVICE_INTERFACE_DETAIL_DATA detail = new Native.SP_DEVICE_INTERFACE_DETAIL_DATA();  				// explicit size of unmanaged structure must be provided' because it does not include transfer buffer  				// for whatever reason on 64 bit machines the detail size is 8 rather than 5' likewise the interfaceData.cbSize  				// is 32 rather than 28 for non 64bit machines' therefore' we make the detemination of the size based   				// on the interfaceData.cbSize (kind of hacky but it works).  				if(interfaceData.cbSize == 32)  				{  					detail.cbSize = 8;  				}  				else  				{  					detail.cbSize = 5;  				}                      				if(Native.SetupDiGetDeviceInterfaceDetail(devInfo' ref interfaceData' ref detail' Marshal.SizeOf(detail) * 2' 0' 0))  				{  					string port = detail.DevicePath.ToLower();    					AsyncUsbStream s = null;    					try  					{  						s = new AsyncUsbStream(port);    						string displayName = s.RetrieveStringFromDevice(IOCTL_SPOTUSB_DISPLAY_NAME);   						string hash = s.RetrieveStringFromDevice(IOCTL_SPOTUSB_DEVICE_HASH);   						string operationalPort = s.RetrieveStringFromDevice(IOCTL_SPOTUSB_PORT_NAME);     						if((operationalPort == null) || (displayName == null) || (hash == null))  						{  							continue;  						}    						// convert  kernel format to user mode format                          						// kernel   : @"\??\USB#Vid_beef&Pid_0009#5&4162af8&0&1#{09343630-a794-10ef-334f-82ea332c49f3}"  						// user     : @"\\?\usb#vid_beef&pid_0009#5&4162af8&0&1#{09343630-a794-10ef-334f-82ea332c49f3}"  						StringBuilder operationalPortUser = new StringBuilder();  						operationalPortUser.Append(@"\\?");  						operationalPortUser.Append(operationalPort.Substring(3));    						// change the display name if there is a collision (otherwise you will only be able to use one of the devices)  						displayName += "_" + hash;  						if(lst.ContainsKey(displayName))  						{  							int i = 2;  							while(lst.ContainsKey(displayName + " (" + i + ")"))  							{  								i++;  							}  							displayName += " (" + i + ")";  						}    						PortDefinition pd = PortDefinition.CreateInstanceForUsb(displayName' operationalPortUser.ToString());                            						RetrieveProperties(hash' ref pd' s);    						lst.Add(pd.DisplayName' pd);  					}  					catch  					{  					}  					finally  					{  						if(s != null)  							s.Close();  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,AsyncUsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AsyncUsbStream.cs,EnumeratePorts,The following statement contains a magic number: while(Native.SetupDiEnumDeviceInterfaces(devInfo' 0' ref inquiriesInterface' index++' ref interfaceData))  			{  				Native.SP_DEVICE_INTERFACE_DETAIL_DATA detail = new Native.SP_DEVICE_INTERFACE_DETAIL_DATA();  				// explicit size of unmanaged structure must be provided' because it does not include transfer buffer  				// for whatever reason on 64 bit machines the detail size is 8 rather than 5' likewise the interfaceData.cbSize  				// is 32 rather than 28 for non 64bit machines' therefore' we make the detemination of the size based   				// on the interfaceData.cbSize (kind of hacky but it works).  				if(interfaceData.cbSize == 32)  				{  					detail.cbSize = 8;  				}  				else  				{  					detail.cbSize = 5;  				}                      				if(Native.SetupDiGetDeviceInterfaceDetail(devInfo' ref interfaceData' ref detail' Marshal.SizeOf(detail) * 2' 0' 0))  				{  					string port = detail.DevicePath.ToLower();    					AsyncUsbStream s = null;    					try  					{  						s = new AsyncUsbStream(port);    						string displayName = s.RetrieveStringFromDevice(IOCTL_SPOTUSB_DISPLAY_NAME);   						string hash = s.RetrieveStringFromDevice(IOCTL_SPOTUSB_DEVICE_HASH);   						string operationalPort = s.RetrieveStringFromDevice(IOCTL_SPOTUSB_PORT_NAME);     						if((operationalPort == null) || (displayName == null) || (hash == null))  						{  							continue;  						}    						// convert  kernel format to user mode format                          						// kernel   : @"\??\USB#Vid_beef&Pid_0009#5&4162af8&0&1#{09343630-a794-10ef-334f-82ea332c49f3}"  						// user     : @"\\?\usb#vid_beef&pid_0009#5&4162af8&0&1#{09343630-a794-10ef-334f-82ea332c49f3}"  						StringBuilder operationalPortUser = new StringBuilder();  						operationalPortUser.Append(@"\\?");  						operationalPortUser.Append(operationalPort.Substring(3));    						// change the display name if there is a collision (otherwise you will only be able to use one of the devices)  						displayName += "_" + hash;  						if(lst.ContainsKey(displayName))  						{  							int i = 2;  							while(lst.ContainsKey(displayName + " (" + i + ")"))  							{  								i++;  							}  							displayName += " (" + i + ")";  						}    						PortDefinition pd = PortDefinition.CreateInstanceForUsb(displayName' operationalPortUser.ToString());                            						RetrieveProperties(hash' ref pd' s);    						lst.Add(pd.DisplayName' pd);  					}  					catch  					{  					}  					finally  					{  						if(s != null)  							s.Close();  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,AsyncUsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AsyncUsbStream.cs,EnumeratePorts,The following statement contains a magic number: while(Native.SetupDiEnumDeviceInterfaces(devInfo' 0' ref inquiriesInterface' index++' ref interfaceData))  			{  				Native.SP_DEVICE_INTERFACE_DETAIL_DATA detail = new Native.SP_DEVICE_INTERFACE_DETAIL_DATA();  				// explicit size of unmanaged structure must be provided' because it does not include transfer buffer  				// for whatever reason on 64 bit machines the detail size is 8 rather than 5' likewise the interfaceData.cbSize  				// is 32 rather than 28 for non 64bit machines' therefore' we make the detemination of the size based   				// on the interfaceData.cbSize (kind of hacky but it works).  				if(interfaceData.cbSize == 32)  				{  					detail.cbSize = 8;  				}  				else  				{  					detail.cbSize = 5;  				}                      				if(Native.SetupDiGetDeviceInterfaceDetail(devInfo' ref interfaceData' ref detail' Marshal.SizeOf(detail) * 2' 0' 0))  				{  					string port = detail.DevicePath.ToLower();    					AsyncUsbStream s = null;    					try  					{  						s = new AsyncUsbStream(port);    						string displayName = s.RetrieveStringFromDevice(IOCTL_SPOTUSB_DISPLAY_NAME);   						string hash = s.RetrieveStringFromDevice(IOCTL_SPOTUSB_DEVICE_HASH);   						string operationalPort = s.RetrieveStringFromDevice(IOCTL_SPOTUSB_PORT_NAME);     						if((operationalPort == null) || (displayName == null) || (hash == null))  						{  							continue;  						}    						// convert  kernel format to user mode format                          						// kernel   : @"\??\USB#Vid_beef&Pid_0009#5&4162af8&0&1#{09343630-a794-10ef-334f-82ea332c49f3}"  						// user     : @"\\?\usb#vid_beef&pid_0009#5&4162af8&0&1#{09343630-a794-10ef-334f-82ea332c49f3}"  						StringBuilder operationalPortUser = new StringBuilder();  						operationalPortUser.Append(@"\\?");  						operationalPortUser.Append(operationalPort.Substring(3));    						// change the display name if there is a collision (otherwise you will only be able to use one of the devices)  						displayName += "_" + hash;  						if(lst.ContainsKey(displayName))  						{  							int i = 2;  							while(lst.ContainsKey(displayName + " (" + i + ")"))  							{  								i++;  							}  							displayName += " (" + i + ")";  						}    						PortDefinition pd = PortDefinition.CreateInstanceForUsb(displayName' operationalPortUser.ToString());                            						RetrieveProperties(hash' ref pd' s);    						lst.Add(pd.DisplayName' pd);  					}  					catch  					{  					}  					finally  					{  						if(s != null)  							s.Close();  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,AsyncUsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AsyncUsbStream.cs,EnumeratePorts,The following statement contains a magic number: while(Native.SetupDiEnumDeviceInterfaces(devInfo' 0' ref inquiriesInterface' index++' ref interfaceData))  			{  				Native.SP_DEVICE_INTERFACE_DETAIL_DATA detail = new Native.SP_DEVICE_INTERFACE_DETAIL_DATA();  				// explicit size of unmanaged structure must be provided' because it does not include transfer buffer  				// for whatever reason on 64 bit machines the detail size is 8 rather than 5' likewise the interfaceData.cbSize  				// is 32 rather than 28 for non 64bit machines' therefore' we make the detemination of the size based   				// on the interfaceData.cbSize (kind of hacky but it works).  				if(interfaceData.cbSize == 32)  				{  					detail.cbSize = 8;  				}  				else  				{  					detail.cbSize = 5;  				}                      				if(Native.SetupDiGetDeviceInterfaceDetail(devInfo' ref interfaceData' ref detail' Marshal.SizeOf(detail) * 2' 0' 0))  				{  					string port = detail.DevicePath.ToLower();    					AsyncUsbStream s = null;    					try  					{  						s = new AsyncUsbStream(port);    						string displayName = s.RetrieveStringFromDevice(IOCTL_SPOTUSB_DISPLAY_NAME);   						string hash = s.RetrieveStringFromDevice(IOCTL_SPOTUSB_DEVICE_HASH);   						string operationalPort = s.RetrieveStringFromDevice(IOCTL_SPOTUSB_PORT_NAME);     						if((operationalPort == null) || (displayName == null) || (hash == null))  						{  							continue;  						}    						// convert  kernel format to user mode format                          						// kernel   : @"\??\USB#Vid_beef&Pid_0009#5&4162af8&0&1#{09343630-a794-10ef-334f-82ea332c49f3}"  						// user     : @"\\?\usb#vid_beef&pid_0009#5&4162af8&0&1#{09343630-a794-10ef-334f-82ea332c49f3}"  						StringBuilder operationalPortUser = new StringBuilder();  						operationalPortUser.Append(@"\\?");  						operationalPortUser.Append(operationalPort.Substring(3));    						// change the display name if there is a collision (otherwise you will only be able to use one of the devices)  						displayName += "_" + hash;  						if(lst.ContainsKey(displayName))  						{  							int i = 2;  							while(lst.ContainsKey(displayName + " (" + i + ")"))  							{  								i++;  							}  							displayName += " (" + i + ")";  						}    						PortDefinition pd = PortDefinition.CreateInstanceForUsb(displayName' operationalPortUser.ToString());                            						RetrieveProperties(hash' ref pd' s);    						lst.Add(pd.DisplayName' pd);  					}  					catch  					{  					}  					finally  					{  						if(s != null)  							s.Close();  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,AsyncUsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AsyncUsbStream.cs,EnumeratePorts,The following statement contains a magic number: while(Native.SetupDiEnumDeviceInterfaces(devInfo' 0' ref inquiriesInterface' index++' ref interfaceData))  			{  				Native.SP_DEVICE_INTERFACE_DETAIL_DATA detail = new Native.SP_DEVICE_INTERFACE_DETAIL_DATA();  				// explicit size of unmanaged structure must be provided' because it does not include transfer buffer  				// for whatever reason on 64 bit machines the detail size is 8 rather than 5' likewise the interfaceData.cbSize  				// is 32 rather than 28 for non 64bit machines' therefore' we make the detemination of the size based   				// on the interfaceData.cbSize (kind of hacky but it works).  				if(interfaceData.cbSize == 32)  				{  					detail.cbSize = 8;  				}  				else  				{  					detail.cbSize = 5;  				}                      				if(Native.SetupDiGetDeviceInterfaceDetail(devInfo' ref interfaceData' ref detail' Marshal.SizeOf(detail) * 2' 0' 0))  				{  					string port = detail.DevicePath.ToLower();    					AsyncUsbStream s = null;    					try  					{  						s = new AsyncUsbStream(port);    						string displayName = s.RetrieveStringFromDevice(IOCTL_SPOTUSB_DISPLAY_NAME);   						string hash = s.RetrieveStringFromDevice(IOCTL_SPOTUSB_DEVICE_HASH);   						string operationalPort = s.RetrieveStringFromDevice(IOCTL_SPOTUSB_PORT_NAME);     						if((operationalPort == null) || (displayName == null) || (hash == null))  						{  							continue;  						}    						// convert  kernel format to user mode format                          						// kernel   : @"\??\USB#Vid_beef&Pid_0009#5&4162af8&0&1#{09343630-a794-10ef-334f-82ea332c49f3}"  						// user     : @"\\?\usb#vid_beef&pid_0009#5&4162af8&0&1#{09343630-a794-10ef-334f-82ea332c49f3}"  						StringBuilder operationalPortUser = new StringBuilder();  						operationalPortUser.Append(@"\\?");  						operationalPortUser.Append(operationalPort.Substring(3));    						// change the display name if there is a collision (otherwise you will only be able to use one of the devices)  						displayName += "_" + hash;  						if(lst.ContainsKey(displayName))  						{  							int i = 2;  							while(lst.ContainsKey(displayName + " (" + i + ")"))  							{  								i++;  							}  							displayName += " (" + i + ")";  						}    						PortDefinition pd = PortDefinition.CreateInstanceForUsb(displayName' operationalPortUser.ToString());                            						RetrieveProperties(hash' ref pd' s);    						lst.Add(pd.DisplayName' pd);  					}  					catch  					{  					}  					finally  					{  						if(s != null)  							s.Close();  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,AsyncUsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\AsyncUsbStream.cs,EnumeratePorts,The following statement contains a magic number: while(Native.SetupDiEnumDeviceInterfaces(devInfo' 0' ref inquiriesInterface' index++' ref interfaceData))  			{  				Native.SP_DEVICE_INTERFACE_DETAIL_DATA detail = new Native.SP_DEVICE_INTERFACE_DETAIL_DATA();  				// explicit size of unmanaged structure must be provided' because it does not include transfer buffer  				// for whatever reason on 64 bit machines the detail size is 8 rather than 5' likewise the interfaceData.cbSize  				// is 32 rather than 28 for non 64bit machines' therefore' we make the detemination of the size based   				// on the interfaceData.cbSize (kind of hacky but it works).  				if(interfaceData.cbSize == 32)  				{  					detail.cbSize = 8;  				}  				else  				{  					detail.cbSize = 5;  				}                      				if(Native.SetupDiGetDeviceInterfaceDetail(devInfo' ref interfaceData' ref detail' Marshal.SizeOf(detail) * 2' 0' 0))  				{  					string port = detail.DevicePath.ToLower();    					AsyncUsbStream s = null;    					try  					{  						s = new AsyncUsbStream(port);    						string displayName = s.RetrieveStringFromDevice(IOCTL_SPOTUSB_DISPLAY_NAME);   						string hash = s.RetrieveStringFromDevice(IOCTL_SPOTUSB_DEVICE_HASH);   						string operationalPort = s.RetrieveStringFromDevice(IOCTL_SPOTUSB_PORT_NAME);     						if((operationalPort == null) || (displayName == null) || (hash == null))  						{  							continue;  						}    						// convert  kernel format to user mode format                          						// kernel   : @"\??\USB#Vid_beef&Pid_0009#5&4162af8&0&1#{09343630-a794-10ef-334f-82ea332c49f3}"  						// user     : @"\\?\usb#vid_beef&pid_0009#5&4162af8&0&1#{09343630-a794-10ef-334f-82ea332c49f3}"  						StringBuilder operationalPortUser = new StringBuilder();  						operationalPortUser.Append(@"\\?");  						operationalPortUser.Append(operationalPort.Substring(3));    						// change the display name if there is a collision (otherwise you will only be able to use one of the devices)  						displayName += "_" + hash;  						if(lst.ContainsKey(displayName))  						{  							int i = 2;  							while(lst.ContainsKey(displayName + " (" + i + ")"))  							{  								i++;  							}  							displayName += " (" + i + ")";  						}    						PortDefinition pd = PortDefinition.CreateInstanceForUsb(displayName' operationalPortUser.ToString());                            						RetrieveProperties(hash' ref pd' s);    						lst.Add(pd.DisplayName' pd);  					}  					catch  					{  					}  					finally  					{  						if(s != null)  							s.Close();  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,BitStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,BitStream,The following statement contains a magic number: AppendChunk(data' pos' len * 8);
Magic Number,Microsoft.SPOT.Debugger,BitStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,AppendChunk,The following statement contains a magic number: lock(m_lock)  			{  				if(bitlen > 0)  				{  					int len = bitlen / 8;  					int bitsInLast = bitlen % 8;  					if(bitsInLast == 0)  					{  						bitsInLast = 8;  					}  					else  					{  						len++;  					}    					Buffer next = new Buffer(data' pos' len' bitsInLast);    					if(m_last == null)  					{  						m_first = m_last = m_current = next;  						Rewind();  					}  					else  					{  						m_last.m_next = next;  						m_last = next;  					}  					Monitor.Pulse(m_lock);  				}  			}
Magic Number,Microsoft.SPOT.Debugger,BitStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,AppendChunk,The following statement contains a magic number: lock(m_lock)  			{  				if(bitlen > 0)  				{  					int len = bitlen / 8;  					int bitsInLast = bitlen % 8;  					if(bitsInLast == 0)  					{  						bitsInLast = 8;  					}  					else  					{  						len++;  					}    					Buffer next = new Buffer(data' pos' len' bitsInLast);    					if(m_last == null)  					{  						m_first = m_last = m_current = next;  						Rewind();  					}  					else  					{  						m_last.m_next = next;  						m_last = next;  					}  					Monitor.Pulse(m_lock);  				}  			}
Magic Number,Microsoft.SPOT.Debugger,BitStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,AppendChunk,The following statement contains a magic number: lock(m_lock)  			{  				if(bitlen > 0)  				{  					int len = bitlen / 8;  					int bitsInLast = bitlen % 8;  					if(bitsInLast == 0)  					{  						bitsInLast = 8;  					}  					else  					{  						len++;  					}    					Buffer next = new Buffer(data' pos' len' bitsInLast);    					if(m_last == null)  					{  						m_first = m_last = m_current = next;  						Rewind();  					}  					else  					{  						m_last.m_next = next;  						m_last = next;  					}  					Monitor.Pulse(m_lock);  				}  			}
Magic Number,Microsoft.SPOT.Debugger,BitStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ToArray,The following statement contains a magic number: lock(m_lock)  			{  				for(int pass = 0; pass < 2; pass++)  				{  					int tot = 0;  					Buffer ptr = m_first;    					while(ptr != null)  					{  						if(pass == 1)  							Array.Copy(ptr.m_data' 0' res' tot' ptr.m_length);    						tot += ptr.m_length;  						ptr = ptr.m_next;  					}    					if(pass == 0)  					{  						res = new byte[tot];  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,BitStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,WriteBits,The following statement contains a magic number: if(bits > 32)  				throw new ArgumentException("Max number of bits per write is 32");
Magic Number,Microsoft.SPOT.Debugger,BitStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,WriteBits,The following statement contains a magic number: BinaryFormatter.WriteLine("OUTPUT: {0:X8} {1}"' val & (0xFFFFFFFF >> (32 - bits))' bits);
Magic Number,Microsoft.SPOT.Debugger,BitStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,WriteBits,The following statement contains a magic number: lock(m_lock)  			{  				while(bits > 0)  				{  					while(m_avail == 0)  					{  						m_pos++;  						m_avail = 8;    						if(m_pos >= m_current.m_data.Length)  						{  							m_current.m_avail = 8;  //WriteBits will always try to fill the last bits of a buffer.  							m_current.m_next = new Buffer();    							m_current = m_current.m_next;  							m_pos = 0;  						}    						if(m_pos >= m_current.m_length)  						{  							m_current.m_length = m_pos + 1;  						}  					}    					int insert = System.Math.Min(bits' m_avail);  					uint mask = ((1U << insert) - 1U);    					pos -= insert;  					m_current.m_data[m_pos] |= (byte)(((val >> pos) & mask) << (m_avail - insert));  					bits -= insert;  					m_avail -= insert;  				}    				if(m_pos == m_current.m_length - 1)  				{  					m_current.m_avail = 8 - m_avail;  				}    				Monitor.Pulse(m_lock);  			}
Magic Number,Microsoft.SPOT.Debugger,BitStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,WriteBits,The following statement contains a magic number: lock(m_lock)  			{  				while(bits > 0)  				{  					while(m_avail == 0)  					{  						m_pos++;  						m_avail = 8;    						if(m_pos >= m_current.m_data.Length)  						{  							m_current.m_avail = 8;  //WriteBits will always try to fill the last bits of a buffer.  							m_current.m_next = new Buffer();    							m_current = m_current.m_next;  							m_pos = 0;  						}    						if(m_pos >= m_current.m_length)  						{  							m_current.m_length = m_pos + 1;  						}  					}    					int insert = System.Math.Min(bits' m_avail);  					uint mask = ((1U << insert) - 1U);    					pos -= insert;  					m_current.m_data[m_pos] |= (byte)(((val >> pos) & mask) << (m_avail - insert));  					bits -= insert;  					m_avail -= insert;  				}    				if(m_pos == m_current.m_length - 1)  				{  					m_current.m_avail = 8 - m_avail;  				}    				Monitor.Pulse(m_lock);  			}
Magic Number,Microsoft.SPOT.Debugger,BitStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,WriteBits,The following statement contains a magic number: lock(m_lock)  			{  				while(bits > 0)  				{  					while(m_avail == 0)  					{  						m_pos++;  						m_avail = 8;    						if(m_pos >= m_current.m_data.Length)  						{  							m_current.m_avail = 8;  //WriteBits will always try to fill the last bits of a buffer.  							m_current.m_next = new Buffer();    							m_current = m_current.m_next;  							m_pos = 0;  						}    						if(m_pos >= m_current.m_length)  						{  							m_current.m_length = m_pos + 1;  						}  					}    					int insert = System.Math.Min(bits' m_avail);  					uint mask = ((1U << insert) - 1U);    					pos -= insert;  					m_current.m_data[m_pos] |= (byte)(((val >> pos) & mask) << (m_avail - insert));  					bits -= insert;  					m_avail -= insert;  				}    				if(m_pos == m_current.m_length - 1)  				{  					m_current.m_avail = 8 - m_avail;  				}    				Monitor.Pulse(m_lock);  			}
Magic Number,Microsoft.SPOT.Debugger,BitStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadBits,The following statement contains a magic number: if(bits > 32)  				throw new ArgumentException("Max number of bits per read is 32");
Magic Number,Microsoft.SPOT.Debugger,BitStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadBits,The following statement contains a magic number: lock(m_lock)  			{  				while(bits > 0)  				{  					while(m_avail == 0)  					{  						m_pos++;    						while(m_pos >= m_current.m_length)  						{  							if(m_current.m_next == null)  							{  								if(m_blockingRead && !m_streamEnded)   //Don't wait if stream has ended.  								{  									Monitor.Wait(m_lock);  								}  								else  								{  									throw new EndOfStreamException();  								}  							}  							else  							{  								m_current = m_current.m_next;  								m_pos = 0;  							}  						}    						if(m_pos < m_current.m_length - 1)  						{  							m_avail = 8;  						}  						else  						{  							m_avail = m_current.m_avail;  						}  					}    					int insert = System.Math.Min(bits' m_avail);  					uint mask = ((1U << insert) - 1U);  					int shift = m_avail - insert;    					if(m_pos == m_current.m_length - 1)  					{  						shift += 8 - m_current.m_avail;  					}    					pos -= insert;  					val |= (((uint)m_current.m_data[m_pos] >> shift) & mask) << pos;  					bits -= insert;  					m_avail -= insert;  				}  			}
Magic Number,Microsoft.SPOT.Debugger,BitStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadBits,The following statement contains a magic number: lock(m_lock)  			{  				while(bits > 0)  				{  					while(m_avail == 0)  					{  						m_pos++;    						while(m_pos >= m_current.m_length)  						{  							if(m_current.m_next == null)  							{  								if(m_blockingRead && !m_streamEnded)   //Don't wait if stream has ended.  								{  									Monitor.Wait(m_lock);  								}  								else  								{  									throw new EndOfStreamException();  								}  							}  							else  							{  								m_current = m_current.m_next;  								m_pos = 0;  							}  						}    						if(m_pos < m_current.m_length - 1)  						{  							m_avail = 8;  						}  						else  						{  							m_avail = m_current.m_avail;  						}  					}    					int insert = System.Math.Min(bits' m_avail);  					uint mask = ((1U << insert) - 1U);  					int shift = m_avail - insert;    					if(m_pos == m_current.m_length - 1)  					{  						shift += 8 - m_current.m_avail;  					}    					pos -= insert;  					val |= (((uint)m_current.m_data[m_pos] >> shift) & mask) << pos;  					bits -= insert;  					m_avail -= insert;  				}  			}
Magic Number,Microsoft.SPOT.Debugger,BitStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,WriteArray,The following statement contains a magic number: lock(m_lock)  			{  				while(len-- > 0)  				{  					WriteBits((uint)data[pos++]' 8);  				}  			}
Magic Number,Microsoft.SPOT.Debugger,BitStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadArray,The following statement contains a magic number: lock(m_lock)  			{  				while(len-- > 0)  				{  					data[pos++] = (byte)ReadBits(8);  				}  			}
Magic Number,Microsoft.SPOT.Debugger,Buffer,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,Buffer,The following statement contains a magic number: if(bitsInLastPos < 1 || bitsInLastPos > 8)  				{  					throw new ArgumentException("bits");  				}
Magic Number,Microsoft.SPOT.Debugger,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ComputeHashForUShort,The following statement contains a magic number: hash = CRC.ComputeCRC((byte)(val >> 8)' hash);
Magic Number,Microsoft.SPOT.Debugger,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,WriteBitsLong,The following statement contains a magic number: int extra = bits - 32;
Magic Number,Microsoft.SPOT.Debugger,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,WriteBitsLong,The following statement contains a magic number: if(extra > 0)  			{  				m_stream.WriteBits((uint)(val >> 32)' extra);    				bits = 32;  			}
Magic Number,Microsoft.SPOT.Debugger,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,WriteBitsLong,The following statement contains a magic number: if(extra > 0)  			{  				m_stream.WriteBits((uint)(val >> 32)' extra);    				bits = 32;  			}
Magic Number,Microsoft.SPOT.Debugger,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadBitsLong,The following statement contains a magic number: int extra = bits - 32;
Magic Number,Microsoft.SPOT.Debugger,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadBitsLong,The following statement contains a magic number: if(extra > 0)  			{  				val = (ulong)m_stream.ReadBits(extra) << 32;  				bits = 32;  			}  			else  			{  				val = 0;  			}
Magic Number,Microsoft.SPOT.Debugger,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadBitsLong,The following statement contains a magic number: if(extra > 0)  			{  				val = (ulong)m_stream.ReadBits(extra) << 32;  				bits = 32;  			}  			else  			{  				val = 0;  			}
Magic Number,Microsoft.SPOT.Debugger,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,WriteCompressedUnsigned,The following statement contains a magic number: if(val == 0xFFFFFFFF)  			{  				m_stream.WriteBits(0xFF' 8);  			}  			else if(val < 0x80)  			{  				m_stream.WriteBits(val' 8);  			}  			else  			{  				if(val < 0x3F00)  				{  					m_stream.WriteBits(0x8000 | val' 16);  				}  				else if(val < 0x3F000000)  				{  					m_stream.WriteBits(0xC0000000 | val' 32);  				}  				else  				{  					throw new ArgumentException("Max value is 0x3F000000");  				}  			}
Magic Number,Microsoft.SPOT.Debugger,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,WriteCompressedUnsigned,The following statement contains a magic number: if(val == 0xFFFFFFFF)  			{  				m_stream.WriteBits(0xFF' 8);  			}  			else if(val < 0x80)  			{  				m_stream.WriteBits(val' 8);  			}  			else  			{  				if(val < 0x3F00)  				{  					m_stream.WriteBits(0x8000 | val' 16);  				}  				else if(val < 0x3F000000)  				{  					m_stream.WriteBits(0xC0000000 | val' 32);  				}  				else  				{  					throw new ArgumentException("Max value is 0x3F000000");  				}  			}
Magic Number,Microsoft.SPOT.Debugger,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,WriteCompressedUnsigned,The following statement contains a magic number: if(val == 0xFFFFFFFF)  			{  				m_stream.WriteBits(0xFF' 8);  			}  			else if(val < 0x80)  			{  				m_stream.WriteBits(val' 8);  			}  			else  			{  				if(val < 0x3F00)  				{  					m_stream.WriteBits(0x8000 | val' 16);  				}  				else if(val < 0x3F000000)  				{  					m_stream.WriteBits(0xC0000000 | val' 32);  				}  				else  				{  					throw new ArgumentException("Max value is 0x3F000000");  				}  			}
Magic Number,Microsoft.SPOT.Debugger,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,WriteCompressedUnsigned,The following statement contains a magic number: if(val == 0xFFFFFFFF)  			{  				m_stream.WriteBits(0xFF' 8);  			}  			else if(val < 0x80)  			{  				m_stream.WriteBits(val' 8);  			}  			else  			{  				if(val < 0x3F00)  				{  					m_stream.WriteBits(0x8000 | val' 16);  				}  				else if(val < 0x3F000000)  				{  					m_stream.WriteBits(0xC0000000 | val' 32);  				}  				else  				{  					throw new ArgumentException("Max value is 0x3F000000");  				}  			}
Magic Number,Microsoft.SPOT.Debugger,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadCompressedUnsigned,The following statement contains a magic number: uint val = m_stream.ReadBits(8);
Magic Number,Microsoft.SPOT.Debugger,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadCompressedUnsigned,The following statement contains a magic number: switch(val & 0xC0)  			{  				case 0x00:  					break;  				case 0x40:  					break;  				case 0x80:  					val = ((val & ~0xC0U) << 8) | m_stream.ReadBits(8);  					break;  				case 0xC0:  					val = ((val & ~0xC0U) << 24) | m_stream.ReadBits(24);  					break;  			}
Magic Number,Microsoft.SPOT.Debugger,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadCompressedUnsigned,The following statement contains a magic number: switch(val & 0xC0)  			{  				case 0x00:  					break;  				case 0x40:  					break;  				case 0x80:  					val = ((val & ~0xC0U) << 8) | m_stream.ReadBits(8);  					break;  				case 0xC0:  					val = ((val & ~0xC0U) << 24) | m_stream.ReadBits(24);  					break;  			}
Magic Number,Microsoft.SPOT.Debugger,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadCompressedUnsigned,The following statement contains a magic number: switch(val & 0xC0)  			{  				case 0x00:  					break;  				case 0x40:  					break;  				case 0x80:  					val = ((val & ~0xC0U) << 8) | m_stream.ReadBits(8);  					break;  				case 0xC0:  					val = ((val & ~0xC0U) << 24) | m_stream.ReadBits(24);  					break;  			}
Magic Number,Microsoft.SPOT.Debugger,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadCompressedUnsigned,The following statement contains a magic number: switch(val & 0xC0)  			{  				case 0x00:  					break;  				case 0x40:  					break;  				case 0x80:  					val = ((val & ~0xC0U) << 8) | m_stream.ReadBits(8);  					break;  				case 0xC0:  					val = ((val & ~0xC0U) << 24) | m_stream.ReadBits(24);  					break;  			}
Magic Number,Microsoft.SPOT.Debugger,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,WriteType,The following statement contains a magic number: m_stream.WriteBits(LookupHash(t)' 32);
Magic Number,Microsoft.SPOT.Debugger,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadType,The following statement contains a magic number: uint hash = m_stream.ReadBits(32);
Magic Number,Microsoft.SPOT.Debugger,TypeDescriptorBasic,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,NumberOfBits,The following statement contains a magic number: switch(et)  				{  					case ElementType.PELEMENT_TYPE_BOOLEAN:  						return 1;  					case ElementType.PELEMENT_TYPE_CHAR:  						return 16;  					case ElementType.PELEMENT_TYPE_I1:  						return 8;  					case ElementType.PELEMENT_TYPE_U1:  						return 8;  					case ElementType.PELEMENT_TYPE_I2:  						return 16;  					case ElementType.PELEMENT_TYPE_U2:  						return 16;  					case ElementType.PELEMENT_TYPE_I4:  						return 32;  					case ElementType.PELEMENT_TYPE_U4:  						return 32;  					case ElementType.PELEMENT_TYPE_I8:  						return 64;  					case ElementType.PELEMENT_TYPE_U8:  						return 64;  					case ElementType.PELEMENT_TYPE_R4:  						return 32;  					case ElementType.PELEMENT_TYPE_R8:  						return 64;  					case ElementType.PELEMENT_TYPE_STRING:  						return -1;  					default:  						return -2;  				}
Magic Number,Microsoft.SPOT.Debugger,TypeDescriptorBasic,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,NumberOfBits,The following statement contains a magic number: switch(et)  				{  					case ElementType.PELEMENT_TYPE_BOOLEAN:  						return 1;  					case ElementType.PELEMENT_TYPE_CHAR:  						return 16;  					case ElementType.PELEMENT_TYPE_I1:  						return 8;  					case ElementType.PELEMENT_TYPE_U1:  						return 8;  					case ElementType.PELEMENT_TYPE_I2:  						return 16;  					case ElementType.PELEMENT_TYPE_U2:  						return 16;  					case ElementType.PELEMENT_TYPE_I4:  						return 32;  					case ElementType.PELEMENT_TYPE_U4:  						return 32;  					case ElementType.PELEMENT_TYPE_I8:  						return 64;  					case ElementType.PELEMENT_TYPE_U8:  						return 64;  					case ElementType.PELEMENT_TYPE_R4:  						return 32;  					case ElementType.PELEMENT_TYPE_R8:  						return 64;  					case ElementType.PELEMENT_TYPE_STRING:  						return -1;  					default:  						return -2;  				}
Magic Number,Microsoft.SPOT.Debugger,TypeDescriptorBasic,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,NumberOfBits,The following statement contains a magic number: switch(et)  				{  					case ElementType.PELEMENT_TYPE_BOOLEAN:  						return 1;  					case ElementType.PELEMENT_TYPE_CHAR:  						return 16;  					case ElementType.PELEMENT_TYPE_I1:  						return 8;  					case ElementType.PELEMENT_TYPE_U1:  						return 8;  					case ElementType.PELEMENT_TYPE_I2:  						return 16;  					case ElementType.PELEMENT_TYPE_U2:  						return 16;  					case ElementType.PELEMENT_TYPE_I4:  						return 32;  					case ElementType.PELEMENT_TYPE_U4:  						return 32;  					case ElementType.PELEMENT_TYPE_I8:  						return 64;  					case ElementType.PELEMENT_TYPE_U8:  						return 64;  					case ElementType.PELEMENT_TYPE_R4:  						return 32;  					case ElementType.PELEMENT_TYPE_R8:  						return 64;  					case ElementType.PELEMENT_TYPE_STRING:  						return -1;  					default:  						return -2;  				}
Magic Number,Microsoft.SPOT.Debugger,TypeDescriptorBasic,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,NumberOfBits,The following statement contains a magic number: switch(et)  				{  					case ElementType.PELEMENT_TYPE_BOOLEAN:  						return 1;  					case ElementType.PELEMENT_TYPE_CHAR:  						return 16;  					case ElementType.PELEMENT_TYPE_I1:  						return 8;  					case ElementType.PELEMENT_TYPE_U1:  						return 8;  					case ElementType.PELEMENT_TYPE_I2:  						return 16;  					case ElementType.PELEMENT_TYPE_U2:  						return 16;  					case ElementType.PELEMENT_TYPE_I4:  						return 32;  					case ElementType.PELEMENT_TYPE_U4:  						return 32;  					case ElementType.PELEMENT_TYPE_I8:  						return 64;  					case ElementType.PELEMENT_TYPE_U8:  						return 64;  					case ElementType.PELEMENT_TYPE_R4:  						return 32;  					case ElementType.PELEMENT_TYPE_R8:  						return 64;  					case ElementType.PELEMENT_TYPE_STRING:  						return -1;  					default:  						return -2;  				}
Magic Number,Microsoft.SPOT.Debugger,TypeDescriptorBasic,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,NumberOfBits,The following statement contains a magic number: switch(et)  				{  					case ElementType.PELEMENT_TYPE_BOOLEAN:  						return 1;  					case ElementType.PELEMENT_TYPE_CHAR:  						return 16;  					case ElementType.PELEMENT_TYPE_I1:  						return 8;  					case ElementType.PELEMENT_TYPE_U1:  						return 8;  					case ElementType.PELEMENT_TYPE_I2:  						return 16;  					case ElementType.PELEMENT_TYPE_U2:  						return 16;  					case ElementType.PELEMENT_TYPE_I4:  						return 32;  					case ElementType.PELEMENT_TYPE_U4:  						return 32;  					case ElementType.PELEMENT_TYPE_I8:  						return 64;  					case ElementType.PELEMENT_TYPE_U8:  						return 64;  					case ElementType.PELEMENT_TYPE_R4:  						return 32;  					case ElementType.PELEMENT_TYPE_R8:  						return 64;  					case ElementType.PELEMENT_TYPE_STRING:  						return -1;  					default:  						return -2;  				}
Magic Number,Microsoft.SPOT.Debugger,TypeDescriptorBasic,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,NumberOfBits,The following statement contains a magic number: switch(et)  				{  					case ElementType.PELEMENT_TYPE_BOOLEAN:  						return 1;  					case ElementType.PELEMENT_TYPE_CHAR:  						return 16;  					case ElementType.PELEMENT_TYPE_I1:  						return 8;  					case ElementType.PELEMENT_TYPE_U1:  						return 8;  					case ElementType.PELEMENT_TYPE_I2:  						return 16;  					case ElementType.PELEMENT_TYPE_U2:  						return 16;  					case ElementType.PELEMENT_TYPE_I4:  						return 32;  					case ElementType.PELEMENT_TYPE_U4:  						return 32;  					case ElementType.PELEMENT_TYPE_I8:  						return 64;  					case ElementType.PELEMENT_TYPE_U8:  						return 64;  					case ElementType.PELEMENT_TYPE_R4:  						return 32;  					case ElementType.PELEMENT_TYPE_R8:  						return 64;  					case ElementType.PELEMENT_TYPE_STRING:  						return -1;  					default:  						return -2;  				}
Magic Number,Microsoft.SPOT.Debugger,TypeDescriptorBasic,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,NumberOfBits,The following statement contains a magic number: switch(et)  				{  					case ElementType.PELEMENT_TYPE_BOOLEAN:  						return 1;  					case ElementType.PELEMENT_TYPE_CHAR:  						return 16;  					case ElementType.PELEMENT_TYPE_I1:  						return 8;  					case ElementType.PELEMENT_TYPE_U1:  						return 8;  					case ElementType.PELEMENT_TYPE_I2:  						return 16;  					case ElementType.PELEMENT_TYPE_U2:  						return 16;  					case ElementType.PELEMENT_TYPE_I4:  						return 32;  					case ElementType.PELEMENT_TYPE_U4:  						return 32;  					case ElementType.PELEMENT_TYPE_I8:  						return 64;  					case ElementType.PELEMENT_TYPE_U8:  						return 64;  					case ElementType.PELEMENT_TYPE_R4:  						return 32;  					case ElementType.PELEMENT_TYPE_R8:  						return 64;  					case ElementType.PELEMENT_TYPE_STRING:  						return -1;  					default:  						return -2;  				}
Magic Number,Microsoft.SPOT.Debugger,TypeDescriptorBasic,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,NumberOfBits,The following statement contains a magic number: switch(et)  				{  					case ElementType.PELEMENT_TYPE_BOOLEAN:  						return 1;  					case ElementType.PELEMENT_TYPE_CHAR:  						return 16;  					case ElementType.PELEMENT_TYPE_I1:  						return 8;  					case ElementType.PELEMENT_TYPE_U1:  						return 8;  					case ElementType.PELEMENT_TYPE_I2:  						return 16;  					case ElementType.PELEMENT_TYPE_U2:  						return 16;  					case ElementType.PELEMENT_TYPE_I4:  						return 32;  					case ElementType.PELEMENT_TYPE_U4:  						return 32;  					case ElementType.PELEMENT_TYPE_I8:  						return 64;  					case ElementType.PELEMENT_TYPE_U8:  						return 64;  					case ElementType.PELEMENT_TYPE_R4:  						return 32;  					case ElementType.PELEMENT_TYPE_R8:  						return 64;  					case ElementType.PELEMENT_TYPE_STRING:  						return -1;  					default:  						return -2;  				}
Magic Number,Microsoft.SPOT.Debugger,TypeDescriptorBasic,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,NumberOfBits,The following statement contains a magic number: switch(et)  				{  					case ElementType.PELEMENT_TYPE_BOOLEAN:  						return 1;  					case ElementType.PELEMENT_TYPE_CHAR:  						return 16;  					case ElementType.PELEMENT_TYPE_I1:  						return 8;  					case ElementType.PELEMENT_TYPE_U1:  						return 8;  					case ElementType.PELEMENT_TYPE_I2:  						return 16;  					case ElementType.PELEMENT_TYPE_U2:  						return 16;  					case ElementType.PELEMENT_TYPE_I4:  						return 32;  					case ElementType.PELEMENT_TYPE_U4:  						return 32;  					case ElementType.PELEMENT_TYPE_I8:  						return 64;  					case ElementType.PELEMENT_TYPE_U8:  						return 64;  					case ElementType.PELEMENT_TYPE_R4:  						return 32;  					case ElementType.PELEMENT_TYPE_R8:  						return 64;  					case ElementType.PELEMENT_TYPE_STRING:  						return -1;  					default:  						return -2;  				}
Magic Number,Microsoft.SPOT.Debugger,TypeDescriptorBasic,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,NumberOfBits,The following statement contains a magic number: switch(et)  				{  					case ElementType.PELEMENT_TYPE_BOOLEAN:  						return 1;  					case ElementType.PELEMENT_TYPE_CHAR:  						return 16;  					case ElementType.PELEMENT_TYPE_I1:  						return 8;  					case ElementType.PELEMENT_TYPE_U1:  						return 8;  					case ElementType.PELEMENT_TYPE_I2:  						return 16;  					case ElementType.PELEMENT_TYPE_U2:  						return 16;  					case ElementType.PELEMENT_TYPE_I4:  						return 32;  					case ElementType.PELEMENT_TYPE_U4:  						return 32;  					case ElementType.PELEMENT_TYPE_I8:  						return 64;  					case ElementType.PELEMENT_TYPE_U8:  						return 64;  					case ElementType.PELEMENT_TYPE_R4:  						return 32;  					case ElementType.PELEMENT_TYPE_R8:  						return 64;  					case ElementType.PELEMENT_TYPE_STRING:  						return -1;  					default:  						return -2;  				}
Magic Number,Microsoft.SPOT.Debugger,TypeDescriptorBasic,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,NumberOfBits,The following statement contains a magic number: switch(et)  				{  					case ElementType.PELEMENT_TYPE_BOOLEAN:  						return 1;  					case ElementType.PELEMENT_TYPE_CHAR:  						return 16;  					case ElementType.PELEMENT_TYPE_I1:  						return 8;  					case ElementType.PELEMENT_TYPE_U1:  						return 8;  					case ElementType.PELEMENT_TYPE_I2:  						return 16;  					case ElementType.PELEMENT_TYPE_U2:  						return 16;  					case ElementType.PELEMENT_TYPE_I4:  						return 32;  					case ElementType.PELEMENT_TYPE_U4:  						return 32;  					case ElementType.PELEMENT_TYPE_I8:  						return 64;  					case ElementType.PELEMENT_TYPE_U8:  						return 64;  					case ElementType.PELEMENT_TYPE_R4:  						return 32;  					case ElementType.PELEMENT_TYPE_R8:  						return 64;  					case ElementType.PELEMENT_TYPE_STRING:  						return -1;  					default:  						return -2;  				}
Magic Number,Microsoft.SPOT.Debugger,TypeDescriptorBasic,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,NumberOfBits,The following statement contains a magic number: switch(et)  				{  					case ElementType.PELEMENT_TYPE_BOOLEAN:  						return 1;  					case ElementType.PELEMENT_TYPE_CHAR:  						return 16;  					case ElementType.PELEMENT_TYPE_I1:  						return 8;  					case ElementType.PELEMENT_TYPE_U1:  						return 8;  					case ElementType.PELEMENT_TYPE_I2:  						return 16;  					case ElementType.PELEMENT_TYPE_U2:  						return 16;  					case ElementType.PELEMENT_TYPE_I4:  						return 32;  					case ElementType.PELEMENT_TYPE_U4:  						return 32;  					case ElementType.PELEMENT_TYPE_I8:  						return 64;  					case ElementType.PELEMENT_TYPE_U8:  						return 64;  					case ElementType.PELEMENT_TYPE_R4:  						return 32;  					case ElementType.PELEMENT_TYPE_R8:  						return 64;  					case ElementType.PELEMENT_TYPE_STRING:  						return -1;  					default:  						return -2;  				}
Magic Number,Microsoft.SPOT.Debugger,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,EmitValue,The following statement contains a magic number: if(m_type.m_base.IsPrimitive)  				{  					switch(m_type.m_base.m_et)  					{  						case ElementType.PELEMENT_TYPE_BOOLEAN:  							val = (bool)m_value ? 1UL : 0UL;  							break;  						case ElementType.PELEMENT_TYPE_CHAR:  							val = (ulong)(char)m_value;  							break;  						case ElementType.PELEMENT_TYPE_I1:  							val = (ulong)(sbyte)m_value;  							break;  						case ElementType.PELEMENT_TYPE_U1:  							val = (ulong)(byte)m_value;  							break;  						case ElementType.PELEMENT_TYPE_I2:  							val = (ulong)(short)m_value;  							break;  						case ElementType.PELEMENT_TYPE_U2:  							val = (ulong)(ushort)m_value;  							break;  						case ElementType.PELEMENT_TYPE_I4:  							val = (ulong)(int)m_value;  							break;  						case ElementType.PELEMENT_TYPE_U4:  							val = (ulong)(uint)m_value;  							break;  						case ElementType.PELEMENT_TYPE_I8:  							val = (ulong)(long)m_value;  							break;  						case ElementType.PELEMENT_TYPE_U8:  							val = (ulong)(ulong)m_value;  							break;  						case ElementType.PELEMENT_TYPE_R4:  							val = BytesFromFloat((float)m_value);  							break;  						case ElementType.PELEMENT_TYPE_R8:  							val = BytesFromDouble((double)m_value);  							break;    						case ElementType.PELEMENT_TYPE_STRING:  							{  								byte[] buf = Encoding.UTF8.GetBytes((string)m_value);    								m_bf.WriteCompressedUnsigned((uint)buf.Length);  								m_bf.WriteArray(buf' 0' buf.Length);    								BinaryFormatter.WriteLine("Value: STRING {0}"' m_value);    								return c_Action_None;  							}    						default:  							throw TypeDescriptorBasic.Error("Bad primitive");  					}    					bits = TypeDescriptorBasic.NumberOfBits(m_type.m_base.m_et);  					fSigned = TypeDescriptorBasic.IsSigned(m_type.m_base.m_et);  				}  				else if(m_value is DateTime)  				{  					val = (ulong)((DateTime)m_value).Ticks;  					bits = 64;  					fSigned = false;  				}  				else if(m_value is TimeSpan)  				{  					val = (ulong)((TimeSpan)m_value).Ticks;  					bits = 64;  					fSigned = true;  				}  				else  				{  					return TrackObject();  				}
Magic Number,Microsoft.SPOT.Debugger,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,EmitValue,The following statement contains a magic number: if(m_type.m_base.IsPrimitive)  				{  					switch(m_type.m_base.m_et)  					{  						case ElementType.PELEMENT_TYPE_BOOLEAN:  							val = (bool)m_value ? 1UL : 0UL;  							break;  						case ElementType.PELEMENT_TYPE_CHAR:  							val = (ulong)(char)m_value;  							break;  						case ElementType.PELEMENT_TYPE_I1:  							val = (ulong)(sbyte)m_value;  							break;  						case ElementType.PELEMENT_TYPE_U1:  							val = (ulong)(byte)m_value;  							break;  						case ElementType.PELEMENT_TYPE_I2:  							val = (ulong)(short)m_value;  							break;  						case ElementType.PELEMENT_TYPE_U2:  							val = (ulong)(ushort)m_value;  							break;  						case ElementType.PELEMENT_TYPE_I4:  							val = (ulong)(int)m_value;  							break;  						case ElementType.PELEMENT_TYPE_U4:  							val = (ulong)(uint)m_value;  							break;  						case ElementType.PELEMENT_TYPE_I8:  							val = (ulong)(long)m_value;  							break;  						case ElementType.PELEMENT_TYPE_U8:  							val = (ulong)(ulong)m_value;  							break;  						case ElementType.PELEMENT_TYPE_R4:  							val = BytesFromFloat((float)m_value);  							break;  						case ElementType.PELEMENT_TYPE_R8:  							val = BytesFromDouble((double)m_value);  							break;    						case ElementType.PELEMENT_TYPE_STRING:  							{  								byte[] buf = Encoding.UTF8.GetBytes((string)m_value);    								m_bf.WriteCompressedUnsigned((uint)buf.Length);  								m_bf.WriteArray(buf' 0' buf.Length);    								BinaryFormatter.WriteLine("Value: STRING {0}"' m_value);    								return c_Action_None;  							}    						default:  							throw TypeDescriptorBasic.Error("Bad primitive");  					}    					bits = TypeDescriptorBasic.NumberOfBits(m_type.m_base.m_et);  					fSigned = TypeDescriptorBasic.IsSigned(m_type.m_base.m_et);  				}  				else if(m_value is DateTime)  				{  					val = (ulong)((DateTime)m_value).Ticks;  					bits = 64;  					fSigned = false;  				}  				else if(m_value is TimeSpan)  				{  					val = (ulong)((TimeSpan)m_value).Ticks;  					bits = 64;  					fSigned = true;  				}  				else  				{  					return TrackObject();  				}
Magic Number,Microsoft.SPOT.Debugger,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,EmitValue,The following statement contains a magic number: if(fSigned)  				{  					long valS = (long)val;    					if(this.Hints_Scale != 0)  						valS /= (long)this.Hints_Scale;    					if(bits != 64)  					{  						long maxVal = (1L << (bits - 1)) - 1;    						fValid = (valS <= maxVal) && (valS >= -maxVal - 1);  					}    					val = (ulong)valS;  				}  				else  				{  					ulong valU = (ulong)val;    					if(this.Hints_Scale != 0)  						valU /= (ulong)this.Hints_Scale;    					if(bits != 64)  					{  						ulong maxVal = (1UL << bits) - 1;    						fValid = (valU <= maxVal);  					}    					val = (ulong)valU;  				}
Magic Number,Microsoft.SPOT.Debugger,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,EmitValue,The following statement contains a magic number: if(fSigned)  				{  					long valS = (long)val;    					if(this.Hints_Scale != 0)  						valS /= (long)this.Hints_Scale;    					if(bits != 64)  					{  						long maxVal = (1L << (bits - 1)) - 1;    						fValid = (valS <= maxVal) && (valS >= -maxVal - 1);  					}    					val = (ulong)valS;  				}  				else  				{  					ulong valU = (ulong)val;    					if(this.Hints_Scale != 0)  						valU /= (ulong)this.Hints_Scale;    					if(bits != 64)  					{  						ulong maxVal = (1UL << bits) - 1;    						fValid = (valU <= maxVal);  					}    					val = (ulong)valU;  				}
Magic Number,Microsoft.SPOT.Debugger,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadValue,The following statement contains a magic number: if(m_type.m_base.IsPrimitive)  				{  					if(m_type.m_base.m_et == ElementType.PELEMENT_TYPE_STRING)  					{  						uint len = m_bf.ReadCompressedUnsigned();    						if(len == 0xFFFFFFFF)  						{  							m_value = null;  						}  						else  						{  							byte[] buf = new byte[len];    							m_bf.ReadArray(buf' 0' (int)len);    							m_value = Encoding.UTF8.GetString(buf);  						}    						BinaryFormatter.WriteLine("Value: STRING {0}"' m_value);    						return c_Action_None;  					}    					bits = TypeDescriptorBasic.NumberOfBits(m_type.m_base.m_et);  					fSigned = TypeDescriptorBasic.IsSigned(m_type.m_base.m_et);    					if(bits < 0)  					{  						throw TypeDescriptorBasic.Error("Bad primitive");  					}  				}  				else if(m_type.Type == typeof(DateTime))  				{  					bits = 64;  					fSigned = false;  				}  				else if(m_type.Type == typeof(TimeSpan))  				{  					bits = 64;  					fSigned = true;  				}  				else  				{  					return TrackObject();  				}
Magic Number,Microsoft.SPOT.Debugger,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadValue,The following statement contains a magic number: if(m_type.m_base.IsPrimitive)  				{  					if(m_type.m_base.m_et == ElementType.PELEMENT_TYPE_STRING)  					{  						uint len = m_bf.ReadCompressedUnsigned();    						if(len == 0xFFFFFFFF)  						{  							m_value = null;  						}  						else  						{  							byte[] buf = new byte[len];    							m_bf.ReadArray(buf' 0' (int)len);    							m_value = Encoding.UTF8.GetString(buf);  						}    						BinaryFormatter.WriteLine("Value: STRING {0}"' m_value);    						return c_Action_None;  					}    					bits = TypeDescriptorBasic.NumberOfBits(m_type.m_base.m_et);  					fSigned = TypeDescriptorBasic.IsSigned(m_type.m_base.m_et);    					if(bits < 0)  					{  						throw TypeDescriptorBasic.Error("Bad primitive");  					}  				}  				else if(m_type.Type == typeof(DateTime))  				{  					bits = 64;  					fSigned = false;  				}  				else if(m_type.Type == typeof(TimeSpan))  				{  					bits = 64;  					fSigned = true;  				}  				else  				{  					return TrackObject();  				}
Magic Number,Microsoft.SPOT.Debugger,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadValue,The following statement contains a magic number: if(fSigned)  				{  					long valS;    					if(bits != 64)  					{  						valS = (long)(val << (64 - bits));  						val = (ulong)(valS >> (64 - bits));  					}    					valS = (long)val;    					if(this.Hints_Scale != 0)  						valS *= (long)this.Hints_Scale;    					val = (ulong)valS;  				}  				else  				{  					ulong valU;    					if(bits != 64)  					{  						valU = (ulong)(val << (64 - bits));  						val = (ulong)(valU >> (64 - bits));  					}    					valU = (ulong)val;    					if(this.Hints_Scale != 0)  						valU *= (ulong)this.Hints_Scale;    					val = (ulong)valU;  				}
Magic Number,Microsoft.SPOT.Debugger,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadValue,The following statement contains a magic number: if(fSigned)  				{  					long valS;    					if(bits != 64)  					{  						valS = (long)(val << (64 - bits));  						val = (ulong)(valS >> (64 - bits));  					}    					valS = (long)val;    					if(this.Hints_Scale != 0)  						valS *= (long)this.Hints_Scale;    					val = (ulong)valS;  				}  				else  				{  					ulong valU;    					if(bits != 64)  					{  						valU = (ulong)(val << (64 - bits));  						val = (ulong)(valU >> (64 - bits));  					}    					valU = (ulong)val;    					if(this.Hints_Scale != 0)  						valU *= (ulong)this.Hints_Scale;    					val = (ulong)valU;  				}
Magic Number,Microsoft.SPOT.Debugger,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadValue,The following statement contains a magic number: if(fSigned)  				{  					long valS;    					if(bits != 64)  					{  						valS = (long)(val << (64 - bits));  						val = (ulong)(valS >> (64 - bits));  					}    					valS = (long)val;    					if(this.Hints_Scale != 0)  						valS *= (long)this.Hints_Scale;    					val = (ulong)valS;  				}  				else  				{  					ulong valU;    					if(bits != 64)  					{  						valU = (ulong)(val << (64 - bits));  						val = (ulong)(valU >> (64 - bits));  					}    					valU = (ulong)val;    					if(this.Hints_Scale != 0)  						valU *= (ulong)this.Hints_Scale;    					val = (ulong)valU;  				}
Magic Number,Microsoft.SPOT.Debugger,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadValue,The following statement contains a magic number: if(fSigned)  				{  					long valS;    					if(bits != 64)  					{  						valS = (long)(val << (64 - bits));  						val = (ulong)(valS >> (64 - bits));  					}    					valS = (long)val;    					if(this.Hints_Scale != 0)  						valS *= (long)this.Hints_Scale;    					val = (ulong)valS;  				}  				else  				{  					ulong valU;    					if(bits != 64)  					{  						valU = (ulong)(val << (64 - bits));  						val = (ulong)(valU >> (64 - bits));  					}    					valU = (ulong)val;    					if(this.Hints_Scale != 0)  						valU *= (ulong)this.Hints_Scale;    					val = (ulong)valU;  				}
Magic Number,Microsoft.SPOT.Debugger,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadValue,The following statement contains a magic number: if(fSigned)  				{  					long valS;    					if(bits != 64)  					{  						valS = (long)(val << (64 - bits));  						val = (ulong)(valS >> (64 - bits));  					}    					valS = (long)val;    					if(this.Hints_Scale != 0)  						valS *= (long)this.Hints_Scale;    					val = (ulong)valS;  				}  				else  				{  					ulong valU;    					if(bits != 64)  					{  						valU = (ulong)(val << (64 - bits));  						val = (ulong)(valU >> (64 - bits));  					}    					valU = (ulong)val;    					if(this.Hints_Scale != 0)  						valU *= (ulong)this.Hints_Scale;    					val = (ulong)valU;  				}
Magic Number,Microsoft.SPOT.Debugger,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadValue,The following statement contains a magic number: if(fSigned)  				{  					long valS;    					if(bits != 64)  					{  						valS = (long)(val << (64 - bits));  						val = (ulong)(valS >> (64 - bits));  					}    					valS = (long)val;    					if(this.Hints_Scale != 0)  						valS *= (long)this.Hints_Scale;    					val = (ulong)valS;  				}  				else  				{  					ulong valU;    					if(bits != 64)  					{  						valU = (ulong)(val << (64 - bits));  						val = (ulong)(valU >> (64 - bits));  					}    					valU = (ulong)val;    					if(this.Hints_Scale != 0)  						valU *= (ulong)this.Hints_Scale;    					val = (ulong)valU;  				}
Magic Number,Microsoft.SPOT.Debugger,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,FloatFromBytes,The following statement contains a magic number: if(m_bf.m_capabilities.FloatingPoint)  				{  					uint val2 = (uint)val;    					uint* ptr = &val2;    					ret = *(float*)ptr;  				}  				else  				{  					ret = ((float)val) / 1024;  				}
Magic Number,Microsoft.SPOT.Debugger,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,DoubleFromBytes,The following statement contains a magic number: if(m_bf.m_capabilities.FloatingPoint)  				{  					ulong* ptr = &val;    					ret = *(double*)ptr;  				}  				else  				{  					ret = ((double)val) / 65536;  				}
Magic Number,Microsoft.SPOT.Debugger,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,BytesFromFloat,The following statement contains a magic number: if(m_bf.m_capabilities.FloatingPoint)  				{  					float* ptr = &val;    					ret = (ulong)*(uint*)ptr;  				}  				else  				{  					ret = (ulong)(long)((float)val * 1024);  				}
Magic Number,Microsoft.SPOT.Debugger,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,BytesFromDouble,The following statement contains a magic number: if(m_bf.m_capabilities.FloatingPoint)  				{  					double* ptr = &val;    					ret = *(ulong*)ptr;  				}  				else  				{  					ret = (ulong)(long)((double)val * 65536);  				}
Magic Number,Microsoft.SPOT.Debugger,EndPointProxy,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,Invoke,The following statement contains a magic number: object returnValue = m_from.SendMessage(m_to' 60 * 1000' call);
Magic Number,Microsoft.SPOT.Debugger,EndPointProxy,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,Invoke,The following statement contains a magic number: object returnValue = m_from.SendMessage(m_to' 60 * 1000' call);
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,WaitForPort,The following statement contains a magic number: if(m_ctrl.IsPortConnected == false)  			{  				InjectMessage("Port is not connected' waiting...\r\n");    				while(m_ctrl.IsPortConnected == false)  				{  					Thread.Sleep(200);  				}    				InjectMessage("Port connected' continuing...\r\n");  			}
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,NotificationThreadWorker,The following statement contains a magic number: byte[] buf = new byte[256];
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,NotificationThreadWorker,The following statement contains a magic number: while(WaitHandle.WaitAny(wh) > 0)  			{  				int read = 0;  				while((read = m_notifyNoise.Available) > 0)  				{  					if(read > buf.Length)  						read = buf.Length;    					m_notifyNoise.Read(buf' 0' read);    					try  					{  						NoiseEventHandler ev = m_eventNoise;  						if(ev != null)  							ev(buf' 0' read);  					}  					catch  					{  					}  				}    				while(m_notifyQueue.Count > 0)  				{  					object[] arr = (object[])m_notifyQueue[0];  					m_notifyQueue.RemoveAt(0);    					try  					{  						CommandEventHandler cev = arr[0] as CommandEventHandler;  						if(cev != null)  							cev((WireProtocol.IncomingMessage)arr[1]' (bool)arr[2]);  						MessageEventHandler mev = arr[0] as MessageEventHandler;  						if(mev != null)  							mev((WireProtocol.IncomingMessage)arr[1]' (string)arr[2]);  					}  					catch  					{  					}  				}    				while(m_rpcQueue.Count > 0)  				{  					WireProtocol.IncomingMessage msg = (WireProtocol.IncomingMessage)m_rpcQueue[0];  					m_rpcQueue.RemoveAt(0);    					try  					{  						object payload = msg.Payload;    						switch(msg.Header.m_cmd)  						{  							case WireProtocol.Commands.c_Debugging_Messaging_Query:  								RpcReceiveQuery(msg' (WireProtocol.Commands.Debugging_Messaging_Query)payload);  								break;  							case WireProtocol.Commands.c_Debugging_Messaging_Send:  								RpcReceiveSend(msg' (WireProtocol.Commands.Debugging_Messaging_Send)payload);  								break;  							case WireProtocol.Commands.c_Debugging_Messaging_Reply:  								RpcReceiveReply(msg' (WireProtocol.Commands.Debugging_Messaging_Reply)payload);  								break;  							default:  								WireProtocol.IncomingMessage.ReplyBadPacket(msg.Parent' 0);  								break;  						}  					}  					catch  					{  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,NotificationThreadWorker,The following statement contains a magic number: while(WaitHandle.WaitAny(wh) > 0)  			{  				int read = 0;  				while((read = m_notifyNoise.Available) > 0)  				{  					if(read > buf.Length)  						read = buf.Length;    					m_notifyNoise.Read(buf' 0' read);    					try  					{  						NoiseEventHandler ev = m_eventNoise;  						if(ev != null)  							ev(buf' 0' read);  					}  					catch  					{  					}  				}    				while(m_notifyQueue.Count > 0)  				{  					object[] arr = (object[])m_notifyQueue[0];  					m_notifyQueue.RemoveAt(0);    					try  					{  						CommandEventHandler cev = arr[0] as CommandEventHandler;  						if(cev != null)  							cev((WireProtocol.IncomingMessage)arr[1]' (bool)arr[2]);  						MessageEventHandler mev = arr[0] as MessageEventHandler;  						if(mev != null)  							mev((WireProtocol.IncomingMessage)arr[1]' (string)arr[2]);  					}  					catch  					{  					}  				}    				while(m_rpcQueue.Count > 0)  				{  					WireProtocol.IncomingMessage msg = (WireProtocol.IncomingMessage)m_rpcQueue[0];  					m_rpcQueue.RemoveAt(0);    					try  					{  						object payload = msg.Payload;    						switch(msg.Header.m_cmd)  						{  							case WireProtocol.Commands.c_Debugging_Messaging_Query:  								RpcReceiveQuery(msg' (WireProtocol.Commands.Debugging_Messaging_Query)payload);  								break;  							case WireProtocol.Commands.c_Debugging_Messaging_Send:  								RpcReceiveSend(msg' (WireProtocol.Commands.Debugging_Messaging_Send)payload);  								break;  							case WireProtocol.Commands.c_Debugging_Messaging_Reply:  								RpcReceiveReply(msg' (WireProtocol.Commands.Debugging_Messaging_Reply)payload);  								break;  							default:  								WireProtocol.IncomingMessage.ReplyBadPacket(msg.Parent' 0);  								break;  						}  					}  					catch  					{  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,SyncMessages,The following statement contains a magic number: return SyncMessages(messages' 2' 1000);
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,SyncMessages,The following statement contains a magic number: return SyncMessages(messages' 2' 1000);
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,GetConnectionSource,The following statement contains a magic number: WireProtocol.IncomingMessage reply = SyncMessage(WireProtocol.Commands.c_Monitor_Ping' 0' null' 2' 1000);
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,GetConnectionSource,The following statement contains a magic number: WireProtocol.IncomingMessage reply = SyncMessage(WireProtocol.Commands.c_Monitor_Ping' 0' null' 2' 1000);
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,GetMonitorOemInfo,The following statement contains a magic number: WireProtocol.IncomingMessage reply = SyncMessage(WireProtocol.Commands.c_Monitor_OemInfo' 0' null' 2' 1000);
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,GetMonitorOemInfo,The following statement contains a magic number: WireProtocol.IncomingMessage reply = SyncMessage(WireProtocol.Commands.c_Monitor_OemInfo' 0' null' 2' 1000);
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,GetFlashSectorMap,The following statement contains a magic number: WireProtocol.IncomingMessage reply = SyncMessage(WireProtocol.Commands.c_Monitor_FlashSectorMap' 0' null' 1' 4000);
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,WriteMemory,The following statement contains a magic number: while(count > 0)  			{  				WireProtocol.Commands.Monitor_WriteMemory cmd = new WireProtocol.Commands.Monitor_WriteMemory();  				int len = System.Math.Min(1024' count);    				cmd.PrepareForSend(address' buf' pos' len);    				WireProtocol.IncomingMessage reply = SyncMessage(WireProtocol.Commands.c_Monitor_WriteMemory' 0' cmd);    				if(!WireProtocol.IncomingMessage.IsPositiveAcknowledge(reply))  					return false;    				address += (uint)len;  				count -= len;  				pos += len;  			}
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,CheckSignature,The following statement contains a magic number: WireProtocol.IncomingMessage reply = SyncMessage(WireProtocol.Commands.c_Monitor_CheckSignature' 0' cmd' 0' 600000);
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,EraseMemory,The following statement contains a magic number: WireProtocol.IncomingMessage reply = SyncMessage(WireProtocol.Commands.c_Monitor_EraseMemory' 0' cmd' 2' 10000);
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,EraseMemory,The following statement contains a magic number: WireProtocol.IncomingMessage reply = SyncMessage(WireProtocol.Commands.c_Monitor_EraseMemory' 0' cmd' 2' 10000);
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,RebootDevice,The following statement contains a magic number: try  			{  				m_evtPing.Reset();                    				SyncMessage(WireProtocol.Commands.c_Monitor_Reboot' 0' cmd);    				if(option != RebootOption.NoReconnect)  				{  					int timeout = 1000;    					if(m_portDefinition is PortDefinition_Tcp)  					{  						timeout = 2000;  					}                        					Thread.Sleep(timeout);  				}  			}  			finally  			{  				this.m_fThrowOnCommunicationFailure = fThrowOnCommunicationFailureSav;  			}
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,RebootDevice,The following statement contains a magic number: try  			{  				m_evtPing.Reset();                    				SyncMessage(WireProtocol.Commands.c_Monitor_Reboot' 0' cmd);    				if(option != RebootOption.NoReconnect)  				{  					int timeout = 1000;    					if(m_portDefinition is PortDefinition_Tcp)  					{  						timeout = 2000;  					}                        					Thread.Sleep(timeout);  				}  			}  			finally  			{  				this.m_fThrowOnCommunicationFailure = fThrowOnCommunicationFailureSav;  			}
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,DeploymentMap,The following statement contains a magic number: WireProtocol.IncomingMessage reply = SyncMessage(WireProtocol.Commands.c_Monitor_DeploymentMap' 0' cmd' 2' 10000);
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,DeploymentMap,The following statement contains a magic number: WireProtocol.IncomingMessage reply = SyncMessage(WireProtocol.Commands.c_Monitor_DeploymentMap' 0' cmd' 2' 10000);
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,UnlockDevice,The following statement contains a magic number: Array.Copy(blob' 0' cmd.m_command' 0' 128);
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,UnlockDevice,The following statement contains a magic number: Array.Copy(blob' 128' cmd.m_hash' 0' 128);
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,UnlockDevice,The following statement contains a magic number: Array.Copy(blob' 128' cmd.m_hash' 0' 128);
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,CanUpgradeToSsl,The following statement contains a magic number: WireProtocol.IncomingMessage reply = SyncMessage(WireProtocol.Commands.c_Debugging_UpgradeToSsl' WireProtocol.Flags.c_NoCaching' cmd' 2' 5000);
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,CanUpgradeToSsl,The following statement contains a magic number: WireProtocol.IncomingMessage reply = SyncMessage(WireProtocol.Commands.c_Debugging_UpgradeToSsl' WireProtocol.Flags.c_NoCaching' cmd' 2' 5000);
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,StartUpdate,The following statement contains a magic number: WireProtocol.IncomingMessage reply = SyncMessage(WireProtocol.Commands.c_Debugging_MFUpdate_Start' WireProtocol.Flags.c_NoCaching' cmd' 2' 5000);
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,StartUpdate,The following statement contains a magic number: WireProtocol.IncomingMessage reply = SyncMessage(WireProtocol.Commands.c_Debugging_MFUpdate_Start' WireProtocol.Flags.c_NoCaching' cmd' 2' 5000);
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,AddPacket,The following statement contains a magic number: if(m_updateMissingPktTbl.ContainsKey(updateHandle) && m_updateMissingPktTbl[updateHandle].Length > 0)  			{  				uint[] pktBits = m_updateMissingPktTbl[updateHandle];  				uint div = packetIndex >> 5;    				if(pktBits.Length > div)  				{  					if(0 == (pktBits[div] & (1u << (int)(packetIndex % 32))))  					{  						return true;  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,AddPacket,The following statement contains a magic number: if(m_updateMissingPktTbl.ContainsKey(updateHandle) && m_updateMissingPktTbl[updateHandle].Length > 0)  			{  				uint[] pktBits = m_updateMissingPktTbl[updateHandle];  				uint div = packetIndex >> 5;    				if(pktBits.Length > div)  				{  					if(0 == (pktBits[div] & (1u << (int)(packetIndex % 32))))  					{  						return true;  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,GetStackFrameValue,The following statement contains a magic number: WireProtocol.IncomingMessage reply = SyncRequest(cmd' 10' 200);
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,GetStackFrameValue,The following statement contains a magic number: WireProtocol.IncomingMessage reply = SyncRequest(cmd' 10' 200);
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,Adjust1bppOrientation,The following statement contains a magic number: unsafe  			{  				fixed (uint* pbuf = buf)  				{  					byte* ptr = (byte*)pbuf;    					for(int i = buf.Length * 4; i > 0; i--)  					{  						*ptr = reverseTable[*ptr];  						ptr++;  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,GetFrameBuffer,The following statement contains a magic number: if(GetFrameBuffer(out widthInWords' out heightInPixels' out buf))  			{  				CLRCapabilities.LCDCapabilities lcdCaps = Capabilities.LCD;    				int pixelsPerWord = 32 / (int)lcdCaps.BitsPerPixel;    				System.Diagnostics.Debug.Assert(heightInPixels == lcdCaps.Height);  				System.Diagnostics.Debug.Assert(widthInWords == (lcdCaps.Width + pixelsPerWord - 1) / pixelsPerWord);    				System.Drawing.Color[] colors = null;    				switch(lcdCaps.BitsPerPixel)  				{  					case 1:  						pixelFormat = System.Drawing.Imaging.PixelFormat.Format1bppIndexed;  						colors = new System.Drawing.Color[] { System.Drawing.Color.White' System.Drawing.Color.Black };  						Adjust1bppOrientation(buf);  						break;  					case 4:  					case 8:                          //Not tested  						int cColors = 1 << (int)lcdCaps.BitsPerPixel;    						pixelFormat = (lcdCaps.BitsPerPixel == 4) ? System.Drawing.Imaging.PixelFormat.Format4bppIndexed : System.Drawing.Imaging.PixelFormat.Format8bppIndexed;    						colors = new System.Drawing.Color[cColors];    						for(int i = 0; i < cColors; i++)  						{  							int intensity = 256 / cColors * i;  							colors[i] = System.Drawing.Color.FromArgb(intensity' intensity' intensity);  						}    						break;  					case 16:  						pixelFormat = System.Drawing.Imaging.PixelFormat.Format16bppRgb565;  						break;  					default:  						System.Diagnostics.Debug.Assert(false);  						return null;  				}    				System.Drawing.Imaging.BitmapData bitmapData = null;    				try  				{  					bmp = new System.Drawing.Bitmap((int)lcdCaps.Width' (int)lcdCaps.Height' pixelFormat);  					System.Drawing.Rectangle rect = new System.Drawing.Rectangle(0' 0' (int)lcdCaps.Width' (int)lcdCaps.Height);    					if(colors != null)  					{  						System.Drawing.Imaging.ColorPalette palette = bmp.Palette;  						colors.CopyTo(palette.Entries' 0);  						bmp.Palette = palette;  					}    					bitmapData = bmp.LockBits(rect' System.Drawing.Imaging.ImageLockMode.WriteOnly' pixelFormat);  					IntPtr data = bitmapData.Scan0;    					unsafe  					{  						fixed (uint* pbuf = buf)  						{  							uint* src = (uint*)pbuf;  							uint* dst = (uint*)data.ToPointer();    							for(int i = buf.Length; i > 0; i--)  							{  								*dst = *src;  								dst++;  								src++;  							}    						}  					}  				}  				finally  				{  					if(bitmapData != null)  					{  						bmp.UnlockBits(bitmapData);  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,GetFrameBuffer,The following statement contains a magic number: if(GetFrameBuffer(out widthInWords' out heightInPixels' out buf))  			{  				CLRCapabilities.LCDCapabilities lcdCaps = Capabilities.LCD;    				int pixelsPerWord = 32 / (int)lcdCaps.BitsPerPixel;    				System.Diagnostics.Debug.Assert(heightInPixels == lcdCaps.Height);  				System.Diagnostics.Debug.Assert(widthInWords == (lcdCaps.Width + pixelsPerWord - 1) / pixelsPerWord);    				System.Drawing.Color[] colors = null;    				switch(lcdCaps.BitsPerPixel)  				{  					case 1:  						pixelFormat = System.Drawing.Imaging.PixelFormat.Format1bppIndexed;  						colors = new System.Drawing.Color[] { System.Drawing.Color.White' System.Drawing.Color.Black };  						Adjust1bppOrientation(buf);  						break;  					case 4:  					case 8:                          //Not tested  						int cColors = 1 << (int)lcdCaps.BitsPerPixel;    						pixelFormat = (lcdCaps.BitsPerPixel == 4) ? System.Drawing.Imaging.PixelFormat.Format4bppIndexed : System.Drawing.Imaging.PixelFormat.Format8bppIndexed;    						colors = new System.Drawing.Color[cColors];    						for(int i = 0; i < cColors; i++)  						{  							int intensity = 256 / cColors * i;  							colors[i] = System.Drawing.Color.FromArgb(intensity' intensity' intensity);  						}    						break;  					case 16:  						pixelFormat = System.Drawing.Imaging.PixelFormat.Format16bppRgb565;  						break;  					default:  						System.Diagnostics.Debug.Assert(false);  						return null;  				}    				System.Drawing.Imaging.BitmapData bitmapData = null;    				try  				{  					bmp = new System.Drawing.Bitmap((int)lcdCaps.Width' (int)lcdCaps.Height' pixelFormat);  					System.Drawing.Rectangle rect = new System.Drawing.Rectangle(0' 0' (int)lcdCaps.Width' (int)lcdCaps.Height);    					if(colors != null)  					{  						System.Drawing.Imaging.ColorPalette palette = bmp.Palette;  						colors.CopyTo(palette.Entries' 0);  						bmp.Palette = palette;  					}    					bitmapData = bmp.LockBits(rect' System.Drawing.Imaging.ImageLockMode.WriteOnly' pixelFormat);  					IntPtr data = bitmapData.Scan0;    					unsafe  					{  						fixed (uint* pbuf = buf)  						{  							uint* src = (uint*)pbuf;  							uint* dst = (uint*)data.ToPointer();    							for(int i = buf.Length; i > 0; i--)  							{  								*dst = *src;  								dst++;  								src++;  							}    						}  					}  				}  				finally  				{  					if(bitmapData != null)  					{  						bmp.UnlockBits(bitmapData);  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,GetFrameBuffer,The following statement contains a magic number: if(GetFrameBuffer(out widthInWords' out heightInPixels' out buf))  			{  				CLRCapabilities.LCDCapabilities lcdCaps = Capabilities.LCD;    				int pixelsPerWord = 32 / (int)lcdCaps.BitsPerPixel;    				System.Diagnostics.Debug.Assert(heightInPixels == lcdCaps.Height);  				System.Diagnostics.Debug.Assert(widthInWords == (lcdCaps.Width + pixelsPerWord - 1) / pixelsPerWord);    				System.Drawing.Color[] colors = null;    				switch(lcdCaps.BitsPerPixel)  				{  					case 1:  						pixelFormat = System.Drawing.Imaging.PixelFormat.Format1bppIndexed;  						colors = new System.Drawing.Color[] { System.Drawing.Color.White' System.Drawing.Color.Black };  						Adjust1bppOrientation(buf);  						break;  					case 4:  					case 8:                          //Not tested  						int cColors = 1 << (int)lcdCaps.BitsPerPixel;    						pixelFormat = (lcdCaps.BitsPerPixel == 4) ? System.Drawing.Imaging.PixelFormat.Format4bppIndexed : System.Drawing.Imaging.PixelFormat.Format8bppIndexed;    						colors = new System.Drawing.Color[cColors];    						for(int i = 0; i < cColors; i++)  						{  							int intensity = 256 / cColors * i;  							colors[i] = System.Drawing.Color.FromArgb(intensity' intensity' intensity);  						}    						break;  					case 16:  						pixelFormat = System.Drawing.Imaging.PixelFormat.Format16bppRgb565;  						break;  					default:  						System.Diagnostics.Debug.Assert(false);  						return null;  				}    				System.Drawing.Imaging.BitmapData bitmapData = null;    				try  				{  					bmp = new System.Drawing.Bitmap((int)lcdCaps.Width' (int)lcdCaps.Height' pixelFormat);  					System.Drawing.Rectangle rect = new System.Drawing.Rectangle(0' 0' (int)lcdCaps.Width' (int)lcdCaps.Height);    					if(colors != null)  					{  						System.Drawing.Imaging.ColorPalette palette = bmp.Palette;  						colors.CopyTo(palette.Entries' 0);  						bmp.Palette = palette;  					}    					bitmapData = bmp.LockBits(rect' System.Drawing.Imaging.ImageLockMode.WriteOnly' pixelFormat);  					IntPtr data = bitmapData.Scan0;    					unsafe  					{  						fixed (uint* pbuf = buf)  						{  							uint* src = (uint*)pbuf;  							uint* dst = (uint*)data.ToPointer();    							for(int i = buf.Length; i > 0; i--)  							{  								*dst = *src;  								dst++;  								src++;  							}    						}  					}  				}  				finally  				{  					if(bitmapData != null)  					{  						bmp.UnlockBits(bitmapData);  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,GetFrameBuffer,The following statement contains a magic number: if(GetFrameBuffer(out widthInWords' out heightInPixels' out buf))  			{  				CLRCapabilities.LCDCapabilities lcdCaps = Capabilities.LCD;    				int pixelsPerWord = 32 / (int)lcdCaps.BitsPerPixel;    				System.Diagnostics.Debug.Assert(heightInPixels == lcdCaps.Height);  				System.Diagnostics.Debug.Assert(widthInWords == (lcdCaps.Width + pixelsPerWord - 1) / pixelsPerWord);    				System.Drawing.Color[] colors = null;    				switch(lcdCaps.BitsPerPixel)  				{  					case 1:  						pixelFormat = System.Drawing.Imaging.PixelFormat.Format1bppIndexed;  						colors = new System.Drawing.Color[] { System.Drawing.Color.White' System.Drawing.Color.Black };  						Adjust1bppOrientation(buf);  						break;  					case 4:  					case 8:                          //Not tested  						int cColors = 1 << (int)lcdCaps.BitsPerPixel;    						pixelFormat = (lcdCaps.BitsPerPixel == 4) ? System.Drawing.Imaging.PixelFormat.Format4bppIndexed : System.Drawing.Imaging.PixelFormat.Format8bppIndexed;    						colors = new System.Drawing.Color[cColors];    						for(int i = 0; i < cColors; i++)  						{  							int intensity = 256 / cColors * i;  							colors[i] = System.Drawing.Color.FromArgb(intensity' intensity' intensity);  						}    						break;  					case 16:  						pixelFormat = System.Drawing.Imaging.PixelFormat.Format16bppRgb565;  						break;  					default:  						System.Diagnostics.Debug.Assert(false);  						return null;  				}    				System.Drawing.Imaging.BitmapData bitmapData = null;    				try  				{  					bmp = new System.Drawing.Bitmap((int)lcdCaps.Width' (int)lcdCaps.Height' pixelFormat);  					System.Drawing.Rectangle rect = new System.Drawing.Rectangle(0' 0' (int)lcdCaps.Width' (int)lcdCaps.Height);    					if(colors != null)  					{  						System.Drawing.Imaging.ColorPalette palette = bmp.Palette;  						colors.CopyTo(palette.Entries' 0);  						bmp.Palette = palette;  					}    					bitmapData = bmp.LockBits(rect' System.Drawing.Imaging.ImageLockMode.WriteOnly' pixelFormat);  					IntPtr data = bitmapData.Scan0;    					unsafe  					{  						fixed (uint* pbuf = buf)  						{  							uint* src = (uint*)pbuf;  							uint* dst = (uint*)data.ToPointer();    							for(int i = buf.Length; i > 0; i--)  							{  								*dst = *src;  								dst++;  								src++;  							}    						}  					}  				}  				finally  				{  					if(bitmapData != null)  					{  						bmp.UnlockBits(bitmapData);  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,GetFrameBuffer,The following statement contains a magic number: if(GetFrameBuffer(out widthInWords' out heightInPixels' out buf))  			{  				CLRCapabilities.LCDCapabilities lcdCaps = Capabilities.LCD;    				int pixelsPerWord = 32 / (int)lcdCaps.BitsPerPixel;    				System.Diagnostics.Debug.Assert(heightInPixels == lcdCaps.Height);  				System.Diagnostics.Debug.Assert(widthInWords == (lcdCaps.Width + pixelsPerWord - 1) / pixelsPerWord);    				System.Drawing.Color[] colors = null;    				switch(lcdCaps.BitsPerPixel)  				{  					case 1:  						pixelFormat = System.Drawing.Imaging.PixelFormat.Format1bppIndexed;  						colors = new System.Drawing.Color[] { System.Drawing.Color.White' System.Drawing.Color.Black };  						Adjust1bppOrientation(buf);  						break;  					case 4:  					case 8:                          //Not tested  						int cColors = 1 << (int)lcdCaps.BitsPerPixel;    						pixelFormat = (lcdCaps.BitsPerPixel == 4) ? System.Drawing.Imaging.PixelFormat.Format4bppIndexed : System.Drawing.Imaging.PixelFormat.Format8bppIndexed;    						colors = new System.Drawing.Color[cColors];    						for(int i = 0; i < cColors; i++)  						{  							int intensity = 256 / cColors * i;  							colors[i] = System.Drawing.Color.FromArgb(intensity' intensity' intensity);  						}    						break;  					case 16:  						pixelFormat = System.Drawing.Imaging.PixelFormat.Format16bppRgb565;  						break;  					default:  						System.Diagnostics.Debug.Assert(false);  						return null;  				}    				System.Drawing.Imaging.BitmapData bitmapData = null;    				try  				{  					bmp = new System.Drawing.Bitmap((int)lcdCaps.Width' (int)lcdCaps.Height' pixelFormat);  					System.Drawing.Rectangle rect = new System.Drawing.Rectangle(0' 0' (int)lcdCaps.Width' (int)lcdCaps.Height);    					if(colors != null)  					{  						System.Drawing.Imaging.ColorPalette palette = bmp.Palette;  						colors.CopyTo(palette.Entries' 0);  						bmp.Palette = palette;  					}    					bitmapData = bmp.LockBits(rect' System.Drawing.Imaging.ImageLockMode.WriteOnly' pixelFormat);  					IntPtr data = bitmapData.Scan0;    					unsafe  					{  						fixed (uint* pbuf = buf)  						{  							uint* src = (uint*)pbuf;  							uint* dst = (uint*)data.ToPointer();    							for(int i = buf.Length; i > 0; i--)  							{  								*dst = *src;  								dst++;  								src++;  							}    						}  					}  				}  				finally  				{  					if(bitmapData != null)  					{  						bmp.UnlockBits(bitmapData);  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,GetFrameBuffer,The following statement contains a magic number: if(GetFrameBuffer(out widthInWords' out heightInPixels' out buf))  			{  				CLRCapabilities.LCDCapabilities lcdCaps = Capabilities.LCD;    				int pixelsPerWord = 32 / (int)lcdCaps.BitsPerPixel;    				System.Diagnostics.Debug.Assert(heightInPixels == lcdCaps.Height);  				System.Diagnostics.Debug.Assert(widthInWords == (lcdCaps.Width + pixelsPerWord - 1) / pixelsPerWord);    				System.Drawing.Color[] colors = null;    				switch(lcdCaps.BitsPerPixel)  				{  					case 1:  						pixelFormat = System.Drawing.Imaging.PixelFormat.Format1bppIndexed;  						colors = new System.Drawing.Color[] { System.Drawing.Color.White' System.Drawing.Color.Black };  						Adjust1bppOrientation(buf);  						break;  					case 4:  					case 8:                          //Not tested  						int cColors = 1 << (int)lcdCaps.BitsPerPixel;    						pixelFormat = (lcdCaps.BitsPerPixel == 4) ? System.Drawing.Imaging.PixelFormat.Format4bppIndexed : System.Drawing.Imaging.PixelFormat.Format8bppIndexed;    						colors = new System.Drawing.Color[cColors];    						for(int i = 0; i < cColors; i++)  						{  							int intensity = 256 / cColors * i;  							colors[i] = System.Drawing.Color.FromArgb(intensity' intensity' intensity);  						}    						break;  					case 16:  						pixelFormat = System.Drawing.Imaging.PixelFormat.Format16bppRgb565;  						break;  					default:  						System.Diagnostics.Debug.Assert(false);  						return null;  				}    				System.Drawing.Imaging.BitmapData bitmapData = null;    				try  				{  					bmp = new System.Drawing.Bitmap((int)lcdCaps.Width' (int)lcdCaps.Height' pixelFormat);  					System.Drawing.Rectangle rect = new System.Drawing.Rectangle(0' 0' (int)lcdCaps.Width' (int)lcdCaps.Height);    					if(colors != null)  					{  						System.Drawing.Imaging.ColorPalette palette = bmp.Palette;  						colors.CopyTo(palette.Entries' 0);  						bmp.Palette = palette;  					}    					bitmapData = bmp.LockBits(rect' System.Drawing.Imaging.ImageLockMode.WriteOnly' pixelFormat);  					IntPtr data = bitmapData.Scan0;    					unsafe  					{  						fixed (uint* pbuf = buf)  						{  							uint* src = (uint*)pbuf;  							uint* dst = (uint*)data.ToPointer();    							for(int i = buf.Length; i > 0; i--)  							{  								*dst = *src;  								dst++;  								src++;  							}    						}  					}  				}  				finally  				{  					if(bitmapData != null)  					{  						bmp.UnlockBits(bitmapData);  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,Deployment_GetStatus,The following statement contains a magic number: WireProtocol.IncomingMessage reply = SyncMessage(WireProtocol.Commands.c_Debugging_Deployment_Status' WireProtocol.Flags.c_NoCaching' cmd' 2' 10000);
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,Deployment_GetStatus,The following statement contains a magic number: WireProtocol.IncomingMessage reply = SyncMessage(WireProtocol.Commands.c_Debugging_Deployment_Status' WireProtocol.Flags.c_NoCaching' cmd' 2' 10000);
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,Deployment_Execute_Full,The following statement contains a magic number: byte[] closeHeader = new byte[8];
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,Deployment_Execute_Full,The following statement contains a magic number: foreach(byte[] assembly in assemblies)  			{  				//  				// Only word-aligned assemblies are allowed.  				//  				if(assembly.Length % 4 != 0)  					return false;    				if(!WriteMemory(storageStart' assembly))  					return false;    				storageStart += (uint)assembly.Length;  			}
Magic Number,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,DiscoverCLRCapabilityUint,The following statement contains a magic number: if(reply != null)  			{  				WireProtocol.Commands.Debugging_Execution_QueryCLRCapabilities.Reply cmdReply = reply.Payload as WireProtocol.Commands.Debugging_Execution_QueryCLRCapabilities.Reply;    				if(cmdReply != null && cmdReply.m_data != null && cmdReply.m_data.Length == 4)  				{  					object obj = (object)ret;    					new WireProtocol.Converter().Deserialize(obj' cmdReply.m_data);    					ret = (uint)obj;  				}  			}
Magic Number,Microsoft.SPOT.Debugger,Request,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,Request,The following statement contains a magic number: if(timeout < 1 || timeout > 60 * 60 * 1000)  				{  					throw new ArgumentException(String.Format("Value out of bounds: {0}"' timeout)' "timeout");  				}
Magic Number,Microsoft.SPOT.Debugger,Request,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,Request,The following statement contains a magic number: if(timeout < 1 || timeout > 60 * 60 * 1000)  				{  					throw new ArgumentException(String.Format("Value out of bounds: {0}"' timeout)' "timeout");  				}
Magic Number,Microsoft.SPOT.Debugger,Request,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,Request,The following statement contains a magic number: if(timeout < 1 || timeout > 60 * 60 * 1000)  				{  					throw new ArgumentException(String.Format("Value out of bounds: {0}"' timeout)' "timeout");  				}
Magic Number,Microsoft.SPOT.Debugger,Request,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,Request,The following statement contains a magic number: m_timeoutWait = new TimeSpan((retries == 0 ? 1 : 2 * retries) * timeout * TimeSpan.TicksPerMillisecond);
Magic Number,Microsoft.SPOT.Debugger,Request,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,Retry,The following statement contains a magic number: lock(this)  				{  					if(m_res != null || m_timer == null)  						return;    					try  					{  						while(true)  						{  							DateTime now = DateTime.UtcNow;    							ts = now - m_parent.LastActivity;    							if(ts < m_timeoutRetry)  							{  								//  								// There was some activity going on' compensate for that.  								//  								ts = m_timeoutRetry - ts;  								break;  							}    							if(m_retries > 0)  							{  								if(m_req.Send())  								{  									m_retries--;    									ts = m_timeoutRetry;  								}  								else  								{  									//  									// Too many pending requests' retry in a bit.  									//  									ts = new TimeSpan(10 * TimeSpan.TicksPerMillisecond);  								}    								break;  							}    							fCancel = true;  							break;  						}  					}  					catch  					{  						fCancel = true;  					}    					if(!fCancel)  					{  						m_timer.Change((int)ts.TotalMilliseconds' Timeout.Infinite);  					}  				}
Magic Number,Microsoft.SPOT.Debugger,TypeSysLookup,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,KeyFromTypeToken,The following statement contains a magic number: return ((ulong)type) << 32 | (ulong)token;
Magic Number,Microsoft.SPOT.Debugger,EmulatorDiscovery,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,HandleProcessEvent,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Microsoft.SPOT.Debugger,PlatformInfo,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\PlatformInfo.cs,PlatformInfo,The following statement contains a magic number: if(!string.IsNullOrEmpty(runtimeVersion))  			{  				Version ver = Version.Parse(runtimeVersion.TrimStart('v'));  				m_runtimeVersion = "v" + ver.ToString(2);  			}  			else  			{  				m_runtimeVersion = "v4.3";  			}
Magic Number,Microsoft.SPOT.Debugger,PlatformInfo,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\PlatformInfo.cs,Execute,The following statement contains a magic number: try  			{  				if(!string.IsNullOrEmpty(runtimeVersion) && !runtimeVersion.StartsWith("v"))  					throw new Exception(String.Format("runtimeVersion string \"{0}\" is malformed"' runtimeVersion));    				string build_root = Environment.GetEnvironmentVariable("BUILD_ROOT");  				string installRoot = null;  				if(!string.IsNullOrEmpty(runtimeVersion))  				{  					Version ver = Version.Parse(runtimeVersion.TrimStart('v'));    					installRoot = GetDeviceFrameworkValue("v" + ver.ToString(2)' null' RegistryValues.InstallRoot);  				}    				if(installRoot == null || !Directory.Exists(installRoot) || 0 == string.Compare(Path.GetDirectoryName(Path.GetDirectoryName(installRoot))' Path.GetDirectoryName(build_root)' true))  				{  					// If there is no install-root value' perhaps it's because this is an internal development build.  					// The SPOCLIENT environment variable should name a valid directory' and BUILD_TREE_CLIENT & BUILD_TREE_SERVER as well.  					// Otherwise' it really is a broken installation    					string spoclient = Environment.GetEnvironmentVariable(@"SPOCLIENT");  					string build_tree_client = Environment.GetEnvironmentVariable(@"BUILD_TREE_CLIENT");  					string build_tree_server = Environment.GetEnvironmentVariable(@"BUILD_TREE_SERVER");    					if(String.IsNullOrEmpty(spoclient) || String.IsNullOrEmpty(build_tree_client) || String.IsNullOrEmpty(build_tree_server))  					{  						throw new Exception("The MF SDK does not appear to be available on this machine");  					}    					installRoot = build_tree_client;  					m_frameworkToolsPath = Path.Combine(build_tree_server' @"DLL");  					m_frameworkAssembliesPath = Path.Combine(build_tree_client' @"DLL");  				}  				else  				{  					m_frameworkToolsPath = Path.Combine(installRoot' Directories.Tools);    					// Check the AssemblyFolder subkey; this is used only internally to support the mfpseudoinstaller style of running MF SDK;  					// not needed by the PK or by a real' installed' MF SDK. Not externally documented or supported.  					m_frameworkAssembliesPath = GetDeviceFrameworkValue(runtimeVersion' "AssemblyFolder"' RegistryValues.Default);  					if(!string.IsNullOrEmpty(m_frameworkAssembliesPath))  					{  						if(!Directory.Exists(m_frameworkAssembliesPath))  						{  							Debug.WriteLine("The directory \"{0}\" named by the AssemblyFolder key does not exist"' m_frameworkAssembliesPath);  							m_frameworkAssembliesPath = null;  						}  					}    					m_frameworkAssembliesPath = Path.Combine(installRoot' Directories.Assemblies);  				}    				return true;  			}  			catch(Exception ex)  			{  				try  				{  					Debug.WriteLine(ex);  				}  				catch  				{  				}  			}
Magic Number,Microsoft.SPOT.Debugger,PortBooter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\PortBooter.cs,WaitBanner,The following statement contains a magic number: while(tries > 0)  			{  				Report r = GetReport(timeout);    				if(r == null)  				{  					m_eng.InjectMessage("Synching...\r\n");  				}  				else if(r.type == Report.State.Noise)  				{  					m_eng.InjectMessage("{0}"' r.line);  				}  				else if(r.type == Report.State.Banner)  				{  					for(int i = 0; i < 10; i++)  					{  						SendString("ZENFLASH\r\n");  						Thread.Sleep(20);  					}    					return true;  				}  			}
Magic Number,Microsoft.SPOT.Debugger,PortBooter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\PortBooter.cs,WaitBanner,The following statement contains a magic number: while(tries > 0)  			{  				Report r = GetReport(timeout);    				if(r == null)  				{  					m_eng.InjectMessage("Synching...\r\n");  				}  				else if(r.type == Report.State.Noise)  				{  					m_eng.InjectMessage("{0}"' r.line);  				}  				else if(r.type == Report.State.Banner)  				{  					for(int i = 0; i < 10; i++)  					{  						SendString("ZENFLASH\r\n");  						Thread.Sleep(20);  					}    					return true;  				}  			}
Magic Number,Microsoft.SPOT.Debugger,PortBooter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\PortBooter.cs,Program,The following statement contains a magic number: const int maxpipeline = 4;
Magic Number,Microsoft.SPOT.Debugger,PortBooter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\PortBooter.cs,Program,The following statement contains a magic number: const int pipelineSize = 128;
Magic Number,Microsoft.SPOT.Debugger,PortBooter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\PortBooter.cs,Program,The following statement contains a magic number: foreach(SRecordFile.Block bl in blocks)  			{  				byte[] buf = bl.data.ToArray();  				uint address = bl.address;  				int offset = 0;  				int count = buf.Length;  				int pipeline = maxpipeline;    				while(offset < count)  				{  					int pending = 0;    					for(int i = 0; i < pipeline; i++)  					{  						if(outstanding[i] == -1)  						{  							int pos = offset + i * pipelineSize;  							int len = System.Math.Min(count - pos' pipelineSize);    							if(len <= 0)  								break;    							WriteMemory((uint)(address + pos)' buf' pos' len);    							outstanding[i] = i;  						}    						pending++;  					}    					if(pending == 0)  						break;    					Report r = GetReport(5000);    					if(r == null)  					{  						for(int i = 0; i < pipeline; i++)  						{  							outstanding[i] = -1;  						}  					}  					else if(r.type == Report.State.Noise)  					{  						m_eng.InjectMessage("{0}"' r.line);  					}  					else if(r.type == Report.State.CRC)  					{  						int restart = 0;    						for(int i = 0; i < pipeline; i++)  						{  							if(r.address == address + offset + i * pipelineSize)  							{  								restart = i;  								break;  							}  						}    						int pos = outstanding[restart];    						for(int i = restart; i < pipeline; i++)  						{  							outstanding[i] = -1;  						}    						//  						// Throttle back pipelining in case of errors.  						//  						if(pipeline > pos + 1 && pipeline > 1)  						{  							pipeline--;  						}  					}  					else if(r.address == address + offset)  					{  						if(r.type == Report.State.ACK)  						{  							offset += pipelineSize;    							for(int i = 1; i < pipeline; i++)  							{  								outstanding[i - 1] = outstanding[i];  							}    							outstanding[pipeline - 1] = -1;    							if(eventProgress != null)  								eventProgress(bl' System.Math.Min(count' offset)' false);  						}  						else if(r.type == Report.State.NACK)  						{  						}  					}  				}    				if(eventProgress != null)  					eventProgress(bl' count' true);  			}
Magic Number,Microsoft.SPOT.Debugger,Native,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Native.cs,ControlCode,The following statement contains a magic number: return ((DeviceType) << 16) | ((Access) << 14) | ((Function) << 2) | (Method);
Magic Number,Microsoft.SPOT.Debugger,Native,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Native.cs,ControlCode,The following statement contains a magic number: return ((DeviceType) << 16) | ((Access) << 14) | ((Function) << 2) | (Method);
Magic Number,Microsoft.SPOT.Debugger,Native,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Native.cs,ControlCode,The following statement contains a magic number: return ((DeviceType) << 16) | ((Access) << 14) | ((Function) << 2) | (Method);
Magic Number,Microsoft.SPOT.Debugger,AccurateTimer,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Native.cs,GetTimestamp,The following statement contains a magic number: long low = (long)System.Math.Floor((timestamp - hi) * 1000000);
Magic Number,Microsoft.SPOT.Debugger,PortDefinition_Tcp,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\PortDefinition.cs,EnumeratePorts,The following statement contains a magic number: return EnumeratePorts(System.Net.IPAddress.Parse("234.102.98.44")' System.Net.IPAddress.Parse("234.102.98.45")' 26001' "DOTNETMF"' 3000' 1' forceRefresh);
Magic Number,Microsoft.SPOT.Debugger,PortDefinition_Tcp,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\PortDefinition.cs,EnumeratePorts,The following statement contains a magic number: return EnumeratePorts(System.Net.IPAddress.Parse("234.102.98.44")' System.Net.IPAddress.Parse("234.102.98.45")' 26001' "DOTNETMF"' 3000' 1' forceRefresh);
Magic Number,Microsoft.SPOT.Debugger,PortDefinition_Tcp,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\PortDefinition.cs,EnumeratePorts,The following statement contains a magic number: if(!ForceRefresh && m_portCache.Count > 0 &&  			             (DateTime.Now - m_portCacheTime) < TimeSpan.FromSeconds(30))  			{  				return m_portCache.ToArray();  			}
Magic Number,Microsoft.SPOT.Debugger,PortDefinition_Tcp,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\PortDefinition.cs,EnumeratePorts,The following statement contains a magic number: try  			{  				IPHostEntry hostEntry = Dns.GetHostEntry(Dns.GetHostName());    				foreach(IPAddress ip in hostEntry.AddressList)  				{  					if(ip.AddressFamily == AddressFamily.InterNetwork)  					{  						int cnt = 0;  						int total = 0;  						byte[] data = new byte[1024];  						Socket sock = null;  						Socket recv = null;    						System.Net.IPEndPoint endPoint = new System.Net.IPEndPoint(ip' 0);  						System.Net.EndPoint epRemote = new System.Net.IPEndPoint(System.Net.IPAddress.Any' 26001);  						System.Net.IPEndPoint epRecv = new System.Net.IPEndPoint(ip' DiscoveryMulticastPort);  						System.Net.IPEndPoint epMulticast = new System.Net.IPEndPoint(DiscoveryMulticastAddress' DiscoveryMulticastPort);    						try  						{  							sock = new Socket(AddressFamily.InterNetwork' SocketType.Dgram' ProtocolType.Udp);  							recv = new Socket(AddressFamily.InterNetwork' SocketType.Dgram' ProtocolType.Udp);    							recv.Bind(epRecv);  							recv.ReceiveTimeout = DiscoveryMulticastTimeout;  							sock.Bind(endPoint);    							recv.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.AddMembership' new MulticastOption(DiscoveryMulticastAddressRecv' ip));  							sock.MulticastLoopback = false;  							sock.Ttl = (short)DiscoveryTTL;  							sock.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.MulticastTimeToLive' 64);    							// send ping  							sock.SendTo(System.Text.Encoding.ASCII.GetBytes(DiscoveryMulticastToken)' SocketFlags.None' epMulticast);    							while(0 < (cnt = recv.ReceiveFrom(data' total' data.Length - total' SocketFlags.None' ref epRemote)))  							{  								addresses[((IPEndPoint)epRemote).Address.ToString()] = "";  								total += cnt;  								recv.ReceiveTimeout = DiscoveryMulticastTimeout / 2;  							}    							recv.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.DropMembership' new MulticastOption(DiscoveryMulticastAddressRecv));    						}                          // SocketException occurs in RecieveFrom if there is no data.                          catch(SocketException)  						{  						}  						finally  						{  							if(recv != null)  							{  								recv.Close();  								recv = null;  							}  							if(sock != null)  							{  								sock.Close();  								sock = null;  							}  						}    						// use this if we need to get the MAC address of the device  						SOCK_discoveryinfo disc = new SOCK_discoveryinfo();  						disc.ipaddr = 0;  						disc.macAddressLen = 0;  						int idx = 0;  						int c_DiscSize = Marshal.SizeOf(disc);  						while(total >= c_DiscSize)  						{  							byte[] discData = new byte[c_DiscSize];  							Array.Copy(data' idx' discData' 0' c_DiscSize);  							GCHandle gch = GCHandle.Alloc(discData' GCHandleType.Pinned);  							disc = (SOCK_discoveryinfo)Marshal.PtrToStructure(gch.AddrOfPinnedObject()' typeof(SOCK_discoveryinfo));  							gch.Free();    							// previously we only displayed the IP address for the device' which doesn't  							// really tell you which device you are talking to.  The MAC address should be unique.  							// therefore we will display the MAC address in the device display name to help distinguish  							// the devices.    							if(disc.macAddressLen <= 64 && disc.macAddressLen > 0)  							{  								IPAddress ipResp = new IPAddress((long)disc.ipaddr);    								// only append the MAC if it matches one of the IP address we got responses from  								if(addresses.ContainsKey(ipResp.ToString()))  								{  									string strMac = "";  									for(int mi = 0; mi < disc.macAddressLen - 1; mi++)  									{  										unsafe  										{  											strMac += string.Format("{0:x02}-"' disc.macAddressBuffer[mi]);  										}  									}  									unsafe  									{  										strMac += string.Format("{0:x02}"' disc.macAddressBuffer[disc.macAddressLen - 1]);  									}    									addresses[ipResp.ToString()] = strMac;  								}  							}  							total -= c_DiscSize;  							idx += c_DiscSize;  						}  					}  				}  			}  			catch(Exception e2)  			{  				System.Diagnostics.Debug.Print(e2.ToString());  			}
Magic Number,Microsoft.SPOT.Debugger,PortDefinition_Tcp,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\PortDefinition.cs,EnumeratePorts,The following statement contains a magic number: try  			{  				IPHostEntry hostEntry = Dns.GetHostEntry(Dns.GetHostName());    				foreach(IPAddress ip in hostEntry.AddressList)  				{  					if(ip.AddressFamily == AddressFamily.InterNetwork)  					{  						int cnt = 0;  						int total = 0;  						byte[] data = new byte[1024];  						Socket sock = null;  						Socket recv = null;    						System.Net.IPEndPoint endPoint = new System.Net.IPEndPoint(ip' 0);  						System.Net.EndPoint epRemote = new System.Net.IPEndPoint(System.Net.IPAddress.Any' 26001);  						System.Net.IPEndPoint epRecv = new System.Net.IPEndPoint(ip' DiscoveryMulticastPort);  						System.Net.IPEndPoint epMulticast = new System.Net.IPEndPoint(DiscoveryMulticastAddress' DiscoveryMulticastPort);    						try  						{  							sock = new Socket(AddressFamily.InterNetwork' SocketType.Dgram' ProtocolType.Udp);  							recv = new Socket(AddressFamily.InterNetwork' SocketType.Dgram' ProtocolType.Udp);    							recv.Bind(epRecv);  							recv.ReceiveTimeout = DiscoveryMulticastTimeout;  							sock.Bind(endPoint);    							recv.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.AddMembership' new MulticastOption(DiscoveryMulticastAddressRecv' ip));  							sock.MulticastLoopback = false;  							sock.Ttl = (short)DiscoveryTTL;  							sock.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.MulticastTimeToLive' 64);    							// send ping  							sock.SendTo(System.Text.Encoding.ASCII.GetBytes(DiscoveryMulticastToken)' SocketFlags.None' epMulticast);    							while(0 < (cnt = recv.ReceiveFrom(data' total' data.Length - total' SocketFlags.None' ref epRemote)))  							{  								addresses[((IPEndPoint)epRemote).Address.ToString()] = "";  								total += cnt;  								recv.ReceiveTimeout = DiscoveryMulticastTimeout / 2;  							}    							recv.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.DropMembership' new MulticastOption(DiscoveryMulticastAddressRecv));    						}                          // SocketException occurs in RecieveFrom if there is no data.                          catch(SocketException)  						{  						}  						finally  						{  							if(recv != null)  							{  								recv.Close();  								recv = null;  							}  							if(sock != null)  							{  								sock.Close();  								sock = null;  							}  						}    						// use this if we need to get the MAC address of the device  						SOCK_discoveryinfo disc = new SOCK_discoveryinfo();  						disc.ipaddr = 0;  						disc.macAddressLen = 0;  						int idx = 0;  						int c_DiscSize = Marshal.SizeOf(disc);  						while(total >= c_DiscSize)  						{  							byte[] discData = new byte[c_DiscSize];  							Array.Copy(data' idx' discData' 0' c_DiscSize);  							GCHandle gch = GCHandle.Alloc(discData' GCHandleType.Pinned);  							disc = (SOCK_discoveryinfo)Marshal.PtrToStructure(gch.AddrOfPinnedObject()' typeof(SOCK_discoveryinfo));  							gch.Free();    							// previously we only displayed the IP address for the device' which doesn't  							// really tell you which device you are talking to.  The MAC address should be unique.  							// therefore we will display the MAC address in the device display name to help distinguish  							// the devices.    							if(disc.macAddressLen <= 64 && disc.macAddressLen > 0)  							{  								IPAddress ipResp = new IPAddress((long)disc.ipaddr);    								// only append the MAC if it matches one of the IP address we got responses from  								if(addresses.ContainsKey(ipResp.ToString()))  								{  									string strMac = "";  									for(int mi = 0; mi < disc.macAddressLen - 1; mi++)  									{  										unsafe  										{  											strMac += string.Format("{0:x02}-"' disc.macAddressBuffer[mi]);  										}  									}  									unsafe  									{  										strMac += string.Format("{0:x02}"' disc.macAddressBuffer[disc.macAddressLen - 1]);  									}    									addresses[ipResp.ToString()] = strMac;  								}  							}  							total -= c_DiscSize;  							idx += c_DiscSize;  						}  					}  				}  			}  			catch(Exception e2)  			{  				System.Diagnostics.Debug.Print(e2.ToString());  			}
Magic Number,Microsoft.SPOT.Debugger,PortDefinition_Tcp,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\PortDefinition.cs,EnumeratePorts,The following statement contains a magic number: try  			{  				IPHostEntry hostEntry = Dns.GetHostEntry(Dns.GetHostName());    				foreach(IPAddress ip in hostEntry.AddressList)  				{  					if(ip.AddressFamily == AddressFamily.InterNetwork)  					{  						int cnt = 0;  						int total = 0;  						byte[] data = new byte[1024];  						Socket sock = null;  						Socket recv = null;    						System.Net.IPEndPoint endPoint = new System.Net.IPEndPoint(ip' 0);  						System.Net.EndPoint epRemote = new System.Net.IPEndPoint(System.Net.IPAddress.Any' 26001);  						System.Net.IPEndPoint epRecv = new System.Net.IPEndPoint(ip' DiscoveryMulticastPort);  						System.Net.IPEndPoint epMulticast = new System.Net.IPEndPoint(DiscoveryMulticastAddress' DiscoveryMulticastPort);    						try  						{  							sock = new Socket(AddressFamily.InterNetwork' SocketType.Dgram' ProtocolType.Udp);  							recv = new Socket(AddressFamily.InterNetwork' SocketType.Dgram' ProtocolType.Udp);    							recv.Bind(epRecv);  							recv.ReceiveTimeout = DiscoveryMulticastTimeout;  							sock.Bind(endPoint);    							recv.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.AddMembership' new MulticastOption(DiscoveryMulticastAddressRecv' ip));  							sock.MulticastLoopback = false;  							sock.Ttl = (short)DiscoveryTTL;  							sock.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.MulticastTimeToLive' 64);    							// send ping  							sock.SendTo(System.Text.Encoding.ASCII.GetBytes(DiscoveryMulticastToken)' SocketFlags.None' epMulticast);    							while(0 < (cnt = recv.ReceiveFrom(data' total' data.Length - total' SocketFlags.None' ref epRemote)))  							{  								addresses[((IPEndPoint)epRemote).Address.ToString()] = "";  								total += cnt;  								recv.ReceiveTimeout = DiscoveryMulticastTimeout / 2;  							}    							recv.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.DropMembership' new MulticastOption(DiscoveryMulticastAddressRecv));    						}                          // SocketException occurs in RecieveFrom if there is no data.                          catch(SocketException)  						{  						}  						finally  						{  							if(recv != null)  							{  								recv.Close();  								recv = null;  							}  							if(sock != null)  							{  								sock.Close();  								sock = null;  							}  						}    						// use this if we need to get the MAC address of the device  						SOCK_discoveryinfo disc = new SOCK_discoveryinfo();  						disc.ipaddr = 0;  						disc.macAddressLen = 0;  						int idx = 0;  						int c_DiscSize = Marshal.SizeOf(disc);  						while(total >= c_DiscSize)  						{  							byte[] discData = new byte[c_DiscSize];  							Array.Copy(data' idx' discData' 0' c_DiscSize);  							GCHandle gch = GCHandle.Alloc(discData' GCHandleType.Pinned);  							disc = (SOCK_discoveryinfo)Marshal.PtrToStructure(gch.AddrOfPinnedObject()' typeof(SOCK_discoveryinfo));  							gch.Free();    							// previously we only displayed the IP address for the device' which doesn't  							// really tell you which device you are talking to.  The MAC address should be unique.  							// therefore we will display the MAC address in the device display name to help distinguish  							// the devices.    							if(disc.macAddressLen <= 64 && disc.macAddressLen > 0)  							{  								IPAddress ipResp = new IPAddress((long)disc.ipaddr);    								// only append the MAC if it matches one of the IP address we got responses from  								if(addresses.ContainsKey(ipResp.ToString()))  								{  									string strMac = "";  									for(int mi = 0; mi < disc.macAddressLen - 1; mi++)  									{  										unsafe  										{  											strMac += string.Format("{0:x02}-"' disc.macAddressBuffer[mi]);  										}  									}  									unsafe  									{  										strMac += string.Format("{0:x02}"' disc.macAddressBuffer[disc.macAddressLen - 1]);  									}    									addresses[ipResp.ToString()] = strMac;  								}  							}  							total -= c_DiscSize;  							idx += c_DiscSize;  						}  					}  				}  			}  			catch(Exception e2)  			{  				System.Diagnostics.Debug.Print(e2.ToString());  			}
Magic Number,Microsoft.SPOT.Debugger,PortDefinition_Tcp,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\PortDefinition.cs,EnumeratePorts,The following statement contains a magic number: try  			{  				IPHostEntry hostEntry = Dns.GetHostEntry(Dns.GetHostName());    				foreach(IPAddress ip in hostEntry.AddressList)  				{  					if(ip.AddressFamily == AddressFamily.InterNetwork)  					{  						int cnt = 0;  						int total = 0;  						byte[] data = new byte[1024];  						Socket sock = null;  						Socket recv = null;    						System.Net.IPEndPoint endPoint = new System.Net.IPEndPoint(ip' 0);  						System.Net.EndPoint epRemote = new System.Net.IPEndPoint(System.Net.IPAddress.Any' 26001);  						System.Net.IPEndPoint epRecv = new System.Net.IPEndPoint(ip' DiscoveryMulticastPort);  						System.Net.IPEndPoint epMulticast = new System.Net.IPEndPoint(DiscoveryMulticastAddress' DiscoveryMulticastPort);    						try  						{  							sock = new Socket(AddressFamily.InterNetwork' SocketType.Dgram' ProtocolType.Udp);  							recv = new Socket(AddressFamily.InterNetwork' SocketType.Dgram' ProtocolType.Udp);    							recv.Bind(epRecv);  							recv.ReceiveTimeout = DiscoveryMulticastTimeout;  							sock.Bind(endPoint);    							recv.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.AddMembership' new MulticastOption(DiscoveryMulticastAddressRecv' ip));  							sock.MulticastLoopback = false;  							sock.Ttl = (short)DiscoveryTTL;  							sock.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.MulticastTimeToLive' 64);    							// send ping  							sock.SendTo(System.Text.Encoding.ASCII.GetBytes(DiscoveryMulticastToken)' SocketFlags.None' epMulticast);    							while(0 < (cnt = recv.ReceiveFrom(data' total' data.Length - total' SocketFlags.None' ref epRemote)))  							{  								addresses[((IPEndPoint)epRemote).Address.ToString()] = "";  								total += cnt;  								recv.ReceiveTimeout = DiscoveryMulticastTimeout / 2;  							}    							recv.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.DropMembership' new MulticastOption(DiscoveryMulticastAddressRecv));    						}                          // SocketException occurs in RecieveFrom if there is no data.                          catch(SocketException)  						{  						}  						finally  						{  							if(recv != null)  							{  								recv.Close();  								recv = null;  							}  							if(sock != null)  							{  								sock.Close();  								sock = null;  							}  						}    						// use this if we need to get the MAC address of the device  						SOCK_discoveryinfo disc = new SOCK_discoveryinfo();  						disc.ipaddr = 0;  						disc.macAddressLen = 0;  						int idx = 0;  						int c_DiscSize = Marshal.SizeOf(disc);  						while(total >= c_DiscSize)  						{  							byte[] discData = new byte[c_DiscSize];  							Array.Copy(data' idx' discData' 0' c_DiscSize);  							GCHandle gch = GCHandle.Alloc(discData' GCHandleType.Pinned);  							disc = (SOCK_discoveryinfo)Marshal.PtrToStructure(gch.AddrOfPinnedObject()' typeof(SOCK_discoveryinfo));  							gch.Free();    							// previously we only displayed the IP address for the device' which doesn't  							// really tell you which device you are talking to.  The MAC address should be unique.  							// therefore we will display the MAC address in the device display name to help distinguish  							// the devices.    							if(disc.macAddressLen <= 64 && disc.macAddressLen > 0)  							{  								IPAddress ipResp = new IPAddress((long)disc.ipaddr);    								// only append the MAC if it matches one of the IP address we got responses from  								if(addresses.ContainsKey(ipResp.ToString()))  								{  									string strMac = "";  									for(int mi = 0; mi < disc.macAddressLen - 1; mi++)  									{  										unsafe  										{  											strMac += string.Format("{0:x02}-"' disc.macAddressBuffer[mi]);  										}  									}  									unsafe  									{  										strMac += string.Format("{0:x02}"' disc.macAddressBuffer[disc.macAddressLen - 1]);  									}    									addresses[ipResp.ToString()] = strMac;  								}  							}  							total -= c_DiscSize;  							idx += c_DiscSize;  						}  					}  				}  			}  			catch(Exception e2)  			{  				System.Diagnostics.Debug.Print(e2.ToString());  			}
Magic Number,Microsoft.SPOT.Debugger,PortDefinition_Tcp,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\PortDefinition.cs,EnumeratePorts,The following statement contains a magic number: try  			{  				IPHostEntry hostEntry = Dns.GetHostEntry(Dns.GetHostName());    				foreach(IPAddress ip in hostEntry.AddressList)  				{  					if(ip.AddressFamily == AddressFamily.InterNetwork)  					{  						int cnt = 0;  						int total = 0;  						byte[] data = new byte[1024];  						Socket sock = null;  						Socket recv = null;    						System.Net.IPEndPoint endPoint = new System.Net.IPEndPoint(ip' 0);  						System.Net.EndPoint epRemote = new System.Net.IPEndPoint(System.Net.IPAddress.Any' 26001);  						System.Net.IPEndPoint epRecv = new System.Net.IPEndPoint(ip' DiscoveryMulticastPort);  						System.Net.IPEndPoint epMulticast = new System.Net.IPEndPoint(DiscoveryMulticastAddress' DiscoveryMulticastPort);    						try  						{  							sock = new Socket(AddressFamily.InterNetwork' SocketType.Dgram' ProtocolType.Udp);  							recv = new Socket(AddressFamily.InterNetwork' SocketType.Dgram' ProtocolType.Udp);    							recv.Bind(epRecv);  							recv.ReceiveTimeout = DiscoveryMulticastTimeout;  							sock.Bind(endPoint);    							recv.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.AddMembership' new MulticastOption(DiscoveryMulticastAddressRecv' ip));  							sock.MulticastLoopback = false;  							sock.Ttl = (short)DiscoveryTTL;  							sock.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.MulticastTimeToLive' 64);    							// send ping  							sock.SendTo(System.Text.Encoding.ASCII.GetBytes(DiscoveryMulticastToken)' SocketFlags.None' epMulticast);    							while(0 < (cnt = recv.ReceiveFrom(data' total' data.Length - total' SocketFlags.None' ref epRemote)))  							{  								addresses[((IPEndPoint)epRemote).Address.ToString()] = "";  								total += cnt;  								recv.ReceiveTimeout = DiscoveryMulticastTimeout / 2;  							}    							recv.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.DropMembership' new MulticastOption(DiscoveryMulticastAddressRecv));    						}                          // SocketException occurs in RecieveFrom if there is no data.                          catch(SocketException)  						{  						}  						finally  						{  							if(recv != null)  							{  								recv.Close();  								recv = null;  							}  							if(sock != null)  							{  								sock.Close();  								sock = null;  							}  						}    						// use this if we need to get the MAC address of the device  						SOCK_discoveryinfo disc = new SOCK_discoveryinfo();  						disc.ipaddr = 0;  						disc.macAddressLen = 0;  						int idx = 0;  						int c_DiscSize = Marshal.SizeOf(disc);  						while(total >= c_DiscSize)  						{  							byte[] discData = new byte[c_DiscSize];  							Array.Copy(data' idx' discData' 0' c_DiscSize);  							GCHandle gch = GCHandle.Alloc(discData' GCHandleType.Pinned);  							disc = (SOCK_discoveryinfo)Marshal.PtrToStructure(gch.AddrOfPinnedObject()' typeof(SOCK_discoveryinfo));  							gch.Free();    							// previously we only displayed the IP address for the device' which doesn't  							// really tell you which device you are talking to.  The MAC address should be unique.  							// therefore we will display the MAC address in the device display name to help distinguish  							// the devices.    							if(disc.macAddressLen <= 64 && disc.macAddressLen > 0)  							{  								IPAddress ipResp = new IPAddress((long)disc.ipaddr);    								// only append the MAC if it matches one of the IP address we got responses from  								if(addresses.ContainsKey(ipResp.ToString()))  								{  									string strMac = "";  									for(int mi = 0; mi < disc.macAddressLen - 1; mi++)  									{  										unsafe  										{  											strMac += string.Format("{0:x02}-"' disc.macAddressBuffer[mi]);  										}  									}  									unsafe  									{  										strMac += string.Format("{0:x02}"' disc.macAddressBuffer[disc.macAddressLen - 1]);  									}    									addresses[ipResp.ToString()] = strMac;  								}  							}  							total -= c_DiscSize;  							idx += c_DiscSize;  						}  					}  				}  			}  			catch(Exception e2)  			{  				System.Diagnostics.Debug.Print(e2.ToString());  			}
Magic Number,Microsoft.SPOT.Debugger,PortDefinition_Tcp,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\PortDefinition.cs,CreateStream,The following statement contains a magic number: if(asyncResult.AsyncWaitHandle.WaitOne(1000' false))  			{  				socket.EndConnect(asyncResult);  			}  			else  			{  				socket.Close();  				throw new IOException("Connect failed");  			}
Magic Number,Microsoft.SPOT.Debugger,SRecordFile,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\SRecord.cs,Parse,The following statement contains a magic number: using(System.IO.StreamReader reader = new StreamReader(file))  			{  				string line;  				int lineNum = 0;    				while((line = reader.ReadLine()) != null)  				{  					char[] lineBytes = line.ToCharArray();  					int len = lineBytes.Length;  					int i;    					lineNum++;  					if(len == 0)  						continue;    					// we only accept S0' S3 and S7 records (header' memory loadable data' execution address)  					if(  						(Char.ToLower(lineBytes[0]) != 's') ||  						(lineBytes[1] != '0' && lineBytes[1] != '3' && lineBytes[1] != '7'))  					{  						throw new System.ArgumentException(String.Format("Unknown format at line {0} of {1}:\n {2}"' lineNum' file' line));  					}    					// we discard S0 records  					if((Char.ToLower(lineBytes[0]) == 's') && (lineBytes[1] == '0'))  					{  						continue;  					}                          					int num = Byte.Parse(new string(lineBytes' 2' 2)' System.Globalization.NumberStyles.HexNumber);  					if(num != ((len / 2) - 2))  					{  						throw new System.ArgumentException(String.Format("Incorrect length at line {0} of {1}: {2}"' lineNum' file' num));  					}    					byte crc = (byte)num;    					for(i = 4; i < len - 2; i += 2)  					{  						crc += Byte.Parse(new string(lineBytes' i' 2)' System.Globalization.NumberStyles.HexNumber);  					}    					byte checksum = Byte.Parse(new string(lineBytes' len - 2' 2)' System.Globalization.NumberStyles.HexNumber);    					if((checksum ^ crc) != 0xFF)  					{  						throw new System.ArgumentException(String.Format("Incorrect crc at line {0} of {1}: got {2:X2}' expected {3:X2}"' lineNum' file' crc' checksum));  					}    					num -= 5;    					uint address = UInt32.Parse(new string(lineBytes' 4' 8)' System.Globalization.NumberStyles.HexNumber);    					if(lineBytes[1] == '7')  					{  						entrypoint = address;  						for(i = 0; i < blocks.Count; i++)  						{  							Block bl = (Block)blocks[i];  							if(bl.address == entrypoint)  							{  								bl.executable = true;  							}  						}  						break;  					}  					else  					{  						Block bl = new Block();    						bl.address = address;  						bl.data = new MemoryStream();  						bl.executable = false;    						for(i = 0; i < num; i++)  						{  							bl.data.WriteByte(Byte.Parse(new string(lineBytes' 12 + i * 2' 2)' System.Globalization.NumberStyles.HexNumber));  						}    						for(i = 0; i < blocks.Count; i++)  						{  							Block bl2 = (Block)blocks[i];  							int num2 = (int)bl2.data.Length;    							if(bl2.address + num2 == bl.address)  							{  								byte[] data = bl.data.ToArray();    								bl2.data.Write(data' 0' data.Length);    								bl = null;  								break;  							}    							if(bl.address + num == bl2.address)  							{  								byte[] data = bl2.data.ToArray();    								bl.data.Write(data' 0' data.Length);    								bl2.address = bl.address;  								bl2.data = bl.data;    								bl = null;  								break;  							}    							if(bl.address < bl2.address)  							{  								blocks.Insert(i' bl);    								bl = null;  								break;  							}  						}    						if(bl != null)  						{  							if(signatureFile != null)  							{  								using(System.IO.FileStream fs = new FileStream(signatureFile' System.IO.FileMode.Open' System.IO.FileAccess.Read))  								{  									if(fs.Length != 128)  									{  										throw new ArgumentOutOfRangeException(String.Format("Signature is not 128 bytes long; it is {0} bytes long"' fs.Length));  									}    									byte[] signature = new byte[128];    									if(128 != fs.Read(signature' 0' 128))  									{  										throw new ArgumentOutOfRangeException("Could not read 128 bytes from signature file");  									}    									bl.signature = signature;  								}  							}  							else  							{  								bl.signature = new byte[0];  							}                                							blocks.Add(bl);  						}  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,SRecordFile,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\SRecord.cs,Parse,The following statement contains a magic number: using(System.IO.StreamReader reader = new StreamReader(file))  			{  				string line;  				int lineNum = 0;    				while((line = reader.ReadLine()) != null)  				{  					char[] lineBytes = line.ToCharArray();  					int len = lineBytes.Length;  					int i;    					lineNum++;  					if(len == 0)  						continue;    					// we only accept S0' S3 and S7 records (header' memory loadable data' execution address)  					if(  						(Char.ToLower(lineBytes[0]) != 's') ||  						(lineBytes[1] != '0' && lineBytes[1] != '3' && lineBytes[1] != '7'))  					{  						throw new System.ArgumentException(String.Format("Unknown format at line {0} of {1}:\n {2}"' lineNum' file' line));  					}    					// we discard S0 records  					if((Char.ToLower(lineBytes[0]) == 's') && (lineBytes[1] == '0'))  					{  						continue;  					}                          					int num = Byte.Parse(new string(lineBytes' 2' 2)' System.Globalization.NumberStyles.HexNumber);  					if(num != ((len / 2) - 2))  					{  						throw new System.ArgumentException(String.Format("Incorrect length at line {0} of {1}: {2}"' lineNum' file' num));  					}    					byte crc = (byte)num;    					for(i = 4; i < len - 2; i += 2)  					{  						crc += Byte.Parse(new string(lineBytes' i' 2)' System.Globalization.NumberStyles.HexNumber);  					}    					byte checksum = Byte.Parse(new string(lineBytes' len - 2' 2)' System.Globalization.NumberStyles.HexNumber);    					if((checksum ^ crc) != 0xFF)  					{  						throw new System.ArgumentException(String.Format("Incorrect crc at line {0} of {1}: got {2:X2}' expected {3:X2}"' lineNum' file' crc' checksum));  					}    					num -= 5;    					uint address = UInt32.Parse(new string(lineBytes' 4' 8)' System.Globalization.NumberStyles.HexNumber);    					if(lineBytes[1] == '7')  					{  						entrypoint = address;  						for(i = 0; i < blocks.Count; i++)  						{  							Block bl = (Block)blocks[i];  							if(bl.address == entrypoint)  							{  								bl.executable = true;  							}  						}  						break;  					}  					else  					{  						Block bl = new Block();    						bl.address = address;  						bl.data = new MemoryStream();  						bl.executable = false;    						for(i = 0; i < num; i++)  						{  							bl.data.WriteByte(Byte.Parse(new string(lineBytes' 12 + i * 2' 2)' System.Globalization.NumberStyles.HexNumber));  						}    						for(i = 0; i < blocks.Count; i++)  						{  							Block bl2 = (Block)blocks[i];  							int num2 = (int)bl2.data.Length;    							if(bl2.address + num2 == bl.address)  							{  								byte[] data = bl.data.ToArray();    								bl2.data.Write(data' 0' data.Length);    								bl = null;  								break;  							}    							if(bl.address + num == bl2.address)  							{  								byte[] data = bl2.data.ToArray();    								bl.data.Write(data' 0' data.Length);    								bl2.address = bl.address;  								bl2.data = bl.data;    								bl = null;  								break;  							}    							if(bl.address < bl2.address)  							{  								blocks.Insert(i' bl);    								bl = null;  								break;  							}  						}    						if(bl != null)  						{  							if(signatureFile != null)  							{  								using(System.IO.FileStream fs = new FileStream(signatureFile' System.IO.FileMode.Open' System.IO.FileAccess.Read))  								{  									if(fs.Length != 128)  									{  										throw new ArgumentOutOfRangeException(String.Format("Signature is not 128 bytes long; it is {0} bytes long"' fs.Length));  									}    									byte[] signature = new byte[128];    									if(128 != fs.Read(signature' 0' 128))  									{  										throw new ArgumentOutOfRangeException("Could not read 128 bytes from signature file");  									}    									bl.signature = signature;  								}  							}  							else  							{  								bl.signature = new byte[0];  							}                                							blocks.Add(bl);  						}  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,SRecordFile,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\SRecord.cs,Parse,The following statement contains a magic number: using(System.IO.StreamReader reader = new StreamReader(file))  			{  				string line;  				int lineNum = 0;    				while((line = reader.ReadLine()) != null)  				{  					char[] lineBytes = line.ToCharArray();  					int len = lineBytes.Length;  					int i;    					lineNum++;  					if(len == 0)  						continue;    					// we only accept S0' S3 and S7 records (header' memory loadable data' execution address)  					if(  						(Char.ToLower(lineBytes[0]) != 's') ||  						(lineBytes[1] != '0' && lineBytes[1] != '3' && lineBytes[1] != '7'))  					{  						throw new System.ArgumentException(String.Format("Unknown format at line {0} of {1}:\n {2}"' lineNum' file' line));  					}    					// we discard S0 records  					if((Char.ToLower(lineBytes[0]) == 's') && (lineBytes[1] == '0'))  					{  						continue;  					}                          					int num = Byte.Parse(new string(lineBytes' 2' 2)' System.Globalization.NumberStyles.HexNumber);  					if(num != ((len / 2) - 2))  					{  						throw new System.ArgumentException(String.Format("Incorrect length at line {0} of {1}: {2}"' lineNum' file' num));  					}    					byte crc = (byte)num;    					for(i = 4; i < len - 2; i += 2)  					{  						crc += Byte.Parse(new string(lineBytes' i' 2)' System.Globalization.NumberStyles.HexNumber);  					}    					byte checksum = Byte.Parse(new string(lineBytes' len - 2' 2)' System.Globalization.NumberStyles.HexNumber);    					if((checksum ^ crc) != 0xFF)  					{  						throw new System.ArgumentException(String.Format("Incorrect crc at line {0} of {1}: got {2:X2}' expected {3:X2}"' lineNum' file' crc' checksum));  					}    					num -= 5;    					uint address = UInt32.Parse(new string(lineBytes' 4' 8)' System.Globalization.NumberStyles.HexNumber);    					if(lineBytes[1] == '7')  					{  						entrypoint = address;  						for(i = 0; i < blocks.Count; i++)  						{  							Block bl = (Block)blocks[i];  							if(bl.address == entrypoint)  							{  								bl.executable = true;  							}  						}  						break;  					}  					else  					{  						Block bl = new Block();    						bl.address = address;  						bl.data = new MemoryStream();  						bl.executable = false;    						for(i = 0; i < num; i++)  						{  							bl.data.WriteByte(Byte.Parse(new string(lineBytes' 12 + i * 2' 2)' System.Globalization.NumberStyles.HexNumber));  						}    						for(i = 0; i < blocks.Count; i++)  						{  							Block bl2 = (Block)blocks[i];  							int num2 = (int)bl2.data.Length;    							if(bl2.address + num2 == bl.address)  							{  								byte[] data = bl.data.ToArray();    								bl2.data.Write(data' 0' data.Length);    								bl = null;  								break;  							}    							if(bl.address + num == bl2.address)  							{  								byte[] data = bl2.data.ToArray();    								bl.data.Write(data' 0' data.Length);    								bl2.address = bl.address;  								bl2.data = bl.data;    								bl = null;  								break;  							}    							if(bl.address < bl2.address)  							{  								blocks.Insert(i' bl);    								bl = null;  								break;  							}  						}    						if(bl != null)  						{  							if(signatureFile != null)  							{  								using(System.IO.FileStream fs = new FileStream(signatureFile' System.IO.FileMode.Open' System.IO.FileAccess.Read))  								{  									if(fs.Length != 128)  									{  										throw new ArgumentOutOfRangeException(String.Format("Signature is not 128 bytes long; it is {0} bytes long"' fs.Length));  									}    									byte[] signature = new byte[128];    									if(128 != fs.Read(signature' 0' 128))  									{  										throw new ArgumentOutOfRangeException("Could not read 128 bytes from signature file");  									}    									bl.signature = signature;  								}  							}  							else  							{  								bl.signature = new byte[0];  							}                                							blocks.Add(bl);  						}  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,SRecordFile,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\SRecord.cs,Parse,The following statement contains a magic number: using(System.IO.StreamReader reader = new StreamReader(file))  			{  				string line;  				int lineNum = 0;    				while((line = reader.ReadLine()) != null)  				{  					char[] lineBytes = line.ToCharArray();  					int len = lineBytes.Length;  					int i;    					lineNum++;  					if(len == 0)  						continue;    					// we only accept S0' S3 and S7 records (header' memory loadable data' execution address)  					if(  						(Char.ToLower(lineBytes[0]) != 's') ||  						(lineBytes[1] != '0' && lineBytes[1] != '3' && lineBytes[1] != '7'))  					{  						throw new System.ArgumentException(String.Format("Unknown format at line {0} of {1}:\n {2}"' lineNum' file' line));  					}    					// we discard S0 records  					if((Char.ToLower(lineBytes[0]) == 's') && (lineBytes[1] == '0'))  					{  						continue;  					}                          					int num = Byte.Parse(new string(lineBytes' 2' 2)' System.Globalization.NumberStyles.HexNumber);  					if(num != ((len / 2) - 2))  					{  						throw new System.ArgumentException(String.Format("Incorrect length at line {0} of {1}: {2}"' lineNum' file' num));  					}    					byte crc = (byte)num;    					for(i = 4; i < len - 2; i += 2)  					{  						crc += Byte.Parse(new string(lineBytes' i' 2)' System.Globalization.NumberStyles.HexNumber);  					}    					byte checksum = Byte.Parse(new string(lineBytes' len - 2' 2)' System.Globalization.NumberStyles.HexNumber);    					if((checksum ^ crc) != 0xFF)  					{  						throw new System.ArgumentException(String.Format("Incorrect crc at line {0} of {1}: got {2:X2}' expected {3:X2}"' lineNum' file' crc' checksum));  					}    					num -= 5;    					uint address = UInt32.Parse(new string(lineBytes' 4' 8)' System.Globalization.NumberStyles.HexNumber);    					if(lineBytes[1] == '7')  					{  						entrypoint = address;  						for(i = 0; i < blocks.Count; i++)  						{  							Block bl = (Block)blocks[i];  							if(bl.address == entrypoint)  							{  								bl.executable = true;  							}  						}  						break;  					}  					else  					{  						Block bl = new Block();    						bl.address = address;  						bl.data = new MemoryStream();  						bl.executable = false;    						for(i = 0; i < num; i++)  						{  							bl.data.WriteByte(Byte.Parse(new string(lineBytes' 12 + i * 2' 2)' System.Globalization.NumberStyles.HexNumber));  						}    						for(i = 0; i < blocks.Count; i++)  						{  							Block bl2 = (Block)blocks[i];  							int num2 = (int)bl2.data.Length;    							if(bl2.address + num2 == bl.address)  							{  								byte[] data = bl.data.ToArray();    								bl2.data.Write(data' 0' data.Length);    								bl = null;  								break;  							}    							if(bl.address + num == bl2.address)  							{  								byte[] data = bl2.data.ToArray();    								bl.data.Write(data' 0' data.Length);    								bl2.address = bl.address;  								bl2.data = bl.data;    								bl = null;  								break;  							}    							if(bl.address < bl2.address)  							{  								blocks.Insert(i' bl);    								bl = null;  								break;  							}  						}    						if(bl != null)  						{  							if(signatureFile != null)  							{  								using(System.IO.FileStream fs = new FileStream(signatureFile' System.IO.FileMode.Open' System.IO.FileAccess.Read))  								{  									if(fs.Length != 128)  									{  										throw new ArgumentOutOfRangeException(String.Format("Signature is not 128 bytes long; it is {0} bytes long"' fs.Length));  									}    									byte[] signature = new byte[128];    									if(128 != fs.Read(signature' 0' 128))  									{  										throw new ArgumentOutOfRangeException("Could not read 128 bytes from signature file");  									}    									bl.signature = signature;  								}  							}  							else  							{  								bl.signature = new byte[0];  							}                                							blocks.Add(bl);  						}  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,SRecordFile,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\SRecord.cs,Parse,The following statement contains a magic number: using(System.IO.StreamReader reader = new StreamReader(file))  			{  				string line;  				int lineNum = 0;    				while((line = reader.ReadLine()) != null)  				{  					char[] lineBytes = line.ToCharArray();  					int len = lineBytes.Length;  					int i;    					lineNum++;  					if(len == 0)  						continue;    					// we only accept S0' S3 and S7 records (header' memory loadable data' execution address)  					if(  						(Char.ToLower(lineBytes[0]) != 's') ||  						(lineBytes[1] != '0' && lineBytes[1] != '3' && lineBytes[1] != '7'))  					{  						throw new System.ArgumentException(String.Format("Unknown format at line {0} of {1}:\n {2}"' lineNum' file' line));  					}    					// we discard S0 records  					if((Char.ToLower(lineBytes[0]) == 's') && (lineBytes[1] == '0'))  					{  						continue;  					}                          					int num = Byte.Parse(new string(lineBytes' 2' 2)' System.Globalization.NumberStyles.HexNumber);  					if(num != ((len / 2) - 2))  					{  						throw new System.ArgumentException(String.Format("Incorrect length at line {0} of {1}: {2}"' lineNum' file' num));  					}    					byte crc = (byte)num;    					for(i = 4; i < len - 2; i += 2)  					{  						crc += Byte.Parse(new string(lineBytes' i' 2)' System.Globalization.NumberStyles.HexNumber);  					}    					byte checksum = Byte.Parse(new string(lineBytes' len - 2' 2)' System.Globalization.NumberStyles.HexNumber);    					if((checksum ^ crc) != 0xFF)  					{  						throw new System.ArgumentException(String.Format("Incorrect crc at line {0} of {1}: got {2:X2}' expected {3:X2}"' lineNum' file' crc' checksum));  					}    					num -= 5;    					uint address = UInt32.Parse(new string(lineBytes' 4' 8)' System.Globalization.NumberStyles.HexNumber);    					if(lineBytes[1] == '7')  					{  						entrypoint = address;  						for(i = 0; i < blocks.Count; i++)  						{  							Block bl = (Block)blocks[i];  							if(bl.address == entrypoint)  							{  								bl.executable = true;  							}  						}  						break;  					}  					else  					{  						Block bl = new Block();    						bl.address = address;  						bl.data = new MemoryStream();  						bl.executable = false;    						for(i = 0; i < num; i++)  						{  							bl.data.WriteByte(Byte.Parse(new string(lineBytes' 12 + i * 2' 2)' System.Globalization.NumberStyles.HexNumber));  						}    						for(i = 0; i < blocks.Count; i++)  						{  							Block bl2 = (Block)blocks[i];  							int num2 = (int)bl2.data.Length;    							if(bl2.address + num2 == bl.address)  							{  								byte[] data = bl.data.ToArray();    								bl2.data.Write(data' 0' data.Length);    								bl = null;  								break;  							}    							if(bl.address + num == bl2.address)  							{  								byte[] data = bl2.data.ToArray();    								bl.data.Write(data' 0' data.Length);    								bl2.address = bl.address;  								bl2.data = bl.data;    								bl = null;  								break;  							}    							if(bl.address < bl2.address)  							{  								blocks.Insert(i' bl);    								bl = null;  								break;  							}  						}    						if(bl != null)  						{  							if(signatureFile != null)  							{  								using(System.IO.FileStream fs = new FileStream(signatureFile' System.IO.FileMode.Open' System.IO.FileAccess.Read))  								{  									if(fs.Length != 128)  									{  										throw new ArgumentOutOfRangeException(String.Format("Signature is not 128 bytes long; it is {0} bytes long"' fs.Length));  									}    									byte[] signature = new byte[128];    									if(128 != fs.Read(signature' 0' 128))  									{  										throw new ArgumentOutOfRangeException("Could not read 128 bytes from signature file");  									}    									bl.signature = signature;  								}  							}  							else  							{  								bl.signature = new byte[0];  							}                                							blocks.Add(bl);  						}  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,SRecordFile,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\SRecord.cs,Parse,The following statement contains a magic number: using(System.IO.StreamReader reader = new StreamReader(file))  			{  				string line;  				int lineNum = 0;    				while((line = reader.ReadLine()) != null)  				{  					char[] lineBytes = line.ToCharArray();  					int len = lineBytes.Length;  					int i;    					lineNum++;  					if(len == 0)  						continue;    					// we only accept S0' S3 and S7 records (header' memory loadable data' execution address)  					if(  						(Char.ToLower(lineBytes[0]) != 's') ||  						(lineBytes[1] != '0' && lineBytes[1] != '3' && lineBytes[1] != '7'))  					{  						throw new System.ArgumentException(String.Format("Unknown format at line {0} of {1}:\n {2}"' lineNum' file' line));  					}    					// we discard S0 records  					if((Char.ToLower(lineBytes[0]) == 's') && (lineBytes[1] == '0'))  					{  						continue;  					}                          					int num = Byte.Parse(new string(lineBytes' 2' 2)' System.Globalization.NumberStyles.HexNumber);  					if(num != ((len / 2) - 2))  					{  						throw new System.ArgumentException(String.Format("Incorrect length at line {0} of {1}: {2}"' lineNum' file' num));  					}    					byte crc = (byte)num;    					for(i = 4; i < len - 2; i += 2)  					{  						crc += Byte.Parse(new string(lineBytes' i' 2)' System.Globalization.NumberStyles.HexNumber);  					}    					byte checksum = Byte.Parse(new string(lineBytes' len - 2' 2)' System.Globalization.NumberStyles.HexNumber);    					if((checksum ^ crc) != 0xFF)  					{  						throw new System.ArgumentException(String.Format("Incorrect crc at line {0} of {1}: got {2:X2}' expected {3:X2}"' lineNum' file' crc' checksum));  					}    					num -= 5;    					uint address = UInt32.Parse(new string(lineBytes' 4' 8)' System.Globalization.NumberStyles.HexNumber);    					if(lineBytes[1] == '7')  					{  						entrypoint = address;  						for(i = 0; i < blocks.Count; i++)  						{  							Block bl = (Block)blocks[i];  							if(bl.address == entrypoint)  							{  								bl.executable = true;  							}  						}  						break;  					}  					else  					{  						Block bl = new Block();    						bl.address = address;  						bl.data = new MemoryStream();  						bl.executable = false;    						for(i = 0; i < num; i++)  						{  							bl.data.WriteByte(Byte.Parse(new string(lineBytes' 12 + i * 2' 2)' System.Globalization.NumberStyles.HexNumber));  						}    						for(i = 0; i < blocks.Count; i++)  						{  							Block bl2 = (Block)blocks[i];  							int num2 = (int)bl2.data.Length;    							if(bl2.address + num2 == bl.address)  							{  								byte[] data = bl.data.ToArray();    								bl2.data.Write(data' 0' data.Length);    								bl = null;  								break;  							}    							if(bl.address + num == bl2.address)  							{  								byte[] data = bl2.data.ToArray();    								bl.data.Write(data' 0' data.Length);    								bl2.address = bl.address;  								bl2.data = bl.data;    								bl = null;  								break;  							}    							if(bl.address < bl2.address)  							{  								blocks.Insert(i' bl);    								bl = null;  								break;  							}  						}    						if(bl != null)  						{  							if(signatureFile != null)  							{  								using(System.IO.FileStream fs = new FileStream(signatureFile' System.IO.FileMode.Open' System.IO.FileAccess.Read))  								{  									if(fs.Length != 128)  									{  										throw new ArgumentOutOfRangeException(String.Format("Signature is not 128 bytes long; it is {0} bytes long"' fs.Length));  									}    									byte[] signature = new byte[128];    									if(128 != fs.Read(signature' 0' 128))  									{  										throw new ArgumentOutOfRangeException("Could not read 128 bytes from signature file");  									}    									bl.signature = signature;  								}  							}  							else  							{  								bl.signature = new byte[0];  							}                                							blocks.Add(bl);  						}  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,SRecordFile,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\SRecord.cs,Parse,The following statement contains a magic number: using(System.IO.StreamReader reader = new StreamReader(file))  			{  				string line;  				int lineNum = 0;    				while((line = reader.ReadLine()) != null)  				{  					char[] lineBytes = line.ToCharArray();  					int len = lineBytes.Length;  					int i;    					lineNum++;  					if(len == 0)  						continue;    					// we only accept S0' S3 and S7 records (header' memory loadable data' execution address)  					if(  						(Char.ToLower(lineBytes[0]) != 's') ||  						(lineBytes[1] != '0' && lineBytes[1] != '3' && lineBytes[1] != '7'))  					{  						throw new System.ArgumentException(String.Format("Unknown format at line {0} of {1}:\n {2}"' lineNum' file' line));  					}    					// we discard S0 records  					if((Char.ToLower(lineBytes[0]) == 's') && (lineBytes[1] == '0'))  					{  						continue;  					}                          					int num = Byte.Parse(new string(lineBytes' 2' 2)' System.Globalization.NumberStyles.HexNumber);  					if(num != ((len / 2) - 2))  					{  						throw new System.ArgumentException(String.Format("Incorrect length at line {0} of {1}: {2}"' lineNum' file' num));  					}    					byte crc = (byte)num;    					for(i = 4; i < len - 2; i += 2)  					{  						crc += Byte.Parse(new string(lineBytes' i' 2)' System.Globalization.NumberStyles.HexNumber);  					}    					byte checksum = Byte.Parse(new string(lineBytes' len - 2' 2)' System.Globalization.NumberStyles.HexNumber);    					if((checksum ^ crc) != 0xFF)  					{  						throw new System.ArgumentException(String.Format("Incorrect crc at line {0} of {1}: got {2:X2}' expected {3:X2}"' lineNum' file' crc' checksum));  					}    					num -= 5;    					uint address = UInt32.Parse(new string(lineBytes' 4' 8)' System.Globalization.NumberStyles.HexNumber);    					if(lineBytes[1] == '7')  					{  						entrypoint = address;  						for(i = 0; i < blocks.Count; i++)  						{  							Block bl = (Block)blocks[i];  							if(bl.address == entrypoint)  							{  								bl.executable = true;  							}  						}  						break;  					}  					else  					{  						Block bl = new Block();    						bl.address = address;  						bl.data = new MemoryStream();  						bl.executable = false;    						for(i = 0; i < num; i++)  						{  							bl.data.WriteByte(Byte.Parse(new string(lineBytes' 12 + i * 2' 2)' System.Globalization.NumberStyles.HexNumber));  						}    						for(i = 0; i < blocks.Count; i++)  						{  							Block bl2 = (Block)blocks[i];  							int num2 = (int)bl2.data.Length;    							if(bl2.address + num2 == bl.address)  							{  								byte[] data = bl.data.ToArray();    								bl2.data.Write(data' 0' data.Length);    								bl = null;  								break;  							}    							if(bl.address + num == bl2.address)  							{  								byte[] data = bl2.data.ToArray();    								bl.data.Write(data' 0' data.Length);    								bl2.address = bl.address;  								bl2.data = bl.data;    								bl = null;  								break;  							}    							if(bl.address < bl2.address)  							{  								blocks.Insert(i' bl);    								bl = null;  								break;  							}  						}    						if(bl != null)  						{  							if(signatureFile != null)  							{  								using(System.IO.FileStream fs = new FileStream(signatureFile' System.IO.FileMode.Open' System.IO.FileAccess.Read))  								{  									if(fs.Length != 128)  									{  										throw new ArgumentOutOfRangeException(String.Format("Signature is not 128 bytes long; it is {0} bytes long"' fs.Length));  									}    									byte[] signature = new byte[128];    									if(128 != fs.Read(signature' 0' 128))  									{  										throw new ArgumentOutOfRangeException("Could not read 128 bytes from signature file");  									}    									bl.signature = signature;  								}  							}  							else  							{  								bl.signature = new byte[0];  							}                                							blocks.Add(bl);  						}  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,SRecordFile,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\SRecord.cs,Parse,The following statement contains a magic number: using(System.IO.StreamReader reader = new StreamReader(file))  			{  				string line;  				int lineNum = 0;    				while((line = reader.ReadLine()) != null)  				{  					char[] lineBytes = line.ToCharArray();  					int len = lineBytes.Length;  					int i;    					lineNum++;  					if(len == 0)  						continue;    					// we only accept S0' S3 and S7 records (header' memory loadable data' execution address)  					if(  						(Char.ToLower(lineBytes[0]) != 's') ||  						(lineBytes[1] != '0' && lineBytes[1] != '3' && lineBytes[1] != '7'))  					{  						throw new System.ArgumentException(String.Format("Unknown format at line {0} of {1}:\n {2}"' lineNum' file' line));  					}    					// we discard S0 records  					if((Char.ToLower(lineBytes[0]) == 's') && (lineBytes[1] == '0'))  					{  						continue;  					}                          					int num = Byte.Parse(new string(lineBytes' 2' 2)' System.Globalization.NumberStyles.HexNumber);  					if(num != ((len / 2) - 2))  					{  						throw new System.ArgumentException(String.Format("Incorrect length at line {0} of {1}: {2}"' lineNum' file' num));  					}    					byte crc = (byte)num;    					for(i = 4; i < len - 2; i += 2)  					{  						crc += Byte.Parse(new string(lineBytes' i' 2)' System.Globalization.NumberStyles.HexNumber);  					}    					byte checksum = Byte.Parse(new string(lineBytes' len - 2' 2)' System.Globalization.NumberStyles.HexNumber);    					if((checksum ^ crc) != 0xFF)  					{  						throw new System.ArgumentException(String.Format("Incorrect crc at line {0} of {1}: got {2:X2}' expected {3:X2}"' lineNum' file' crc' checksum));  					}    					num -= 5;    					uint address = UInt32.Parse(new string(lineBytes' 4' 8)' System.Globalization.NumberStyles.HexNumber);    					if(lineBytes[1] == '7')  					{  						entrypoint = address;  						for(i = 0; i < blocks.Count; i++)  						{  							Block bl = (Block)blocks[i];  							if(bl.address == entrypoint)  							{  								bl.executable = true;  							}  						}  						break;  					}  					else  					{  						Block bl = new Block();    						bl.address = address;  						bl.data = new MemoryStream();  						bl.executable = false;    						for(i = 0; i < num; i++)  						{  							bl.data.WriteByte(Byte.Parse(new string(lineBytes' 12 + i * 2' 2)' System.Globalization.NumberStyles.HexNumber));  						}    						for(i = 0; i < blocks.Count; i++)  						{  							Block bl2 = (Block)blocks[i];  							int num2 = (int)bl2.data.Length;    							if(bl2.address + num2 == bl.address)  							{  								byte[] data = bl.data.ToArray();    								bl2.data.Write(data' 0' data.Length);    								bl = null;  								break;  							}    							if(bl.address + num == bl2.address)  							{  								byte[] data = bl2.data.ToArray();    								bl.data.Write(data' 0' data.Length);    								bl2.address = bl.address;  								bl2.data = bl.data;    								bl = null;  								break;  							}    							if(bl.address < bl2.address)  							{  								blocks.Insert(i' bl);    								bl = null;  								break;  							}  						}    						if(bl != null)  						{  							if(signatureFile != null)  							{  								using(System.IO.FileStream fs = new FileStream(signatureFile' System.IO.FileMode.Open' System.IO.FileAccess.Read))  								{  									if(fs.Length != 128)  									{  										throw new ArgumentOutOfRangeException(String.Format("Signature is not 128 bytes long; it is {0} bytes long"' fs.Length));  									}    									byte[] signature = new byte[128];    									if(128 != fs.Read(signature' 0' 128))  									{  										throw new ArgumentOutOfRangeException("Could not read 128 bytes from signature file");  									}    									bl.signature = signature;  								}  							}  							else  							{  								bl.signature = new byte[0];  							}                                							blocks.Add(bl);  						}  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,SRecordFile,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\SRecord.cs,Parse,The following statement contains a magic number: using(System.IO.StreamReader reader = new StreamReader(file))  			{  				string line;  				int lineNum = 0;    				while((line = reader.ReadLine()) != null)  				{  					char[] lineBytes = line.ToCharArray();  					int len = lineBytes.Length;  					int i;    					lineNum++;  					if(len == 0)  						continue;    					// we only accept S0' S3 and S7 records (header' memory loadable data' execution address)  					if(  						(Char.ToLower(lineBytes[0]) != 's') ||  						(lineBytes[1] != '0' && lineBytes[1] != '3' && lineBytes[1] != '7'))  					{  						throw new System.ArgumentException(String.Format("Unknown format at line {0} of {1}:\n {2}"' lineNum' file' line));  					}    					// we discard S0 records  					if((Char.ToLower(lineBytes[0]) == 's') && (lineBytes[1] == '0'))  					{  						continue;  					}                          					int num = Byte.Parse(new string(lineBytes' 2' 2)' System.Globalization.NumberStyles.HexNumber);  					if(num != ((len / 2) - 2))  					{  						throw new System.ArgumentException(String.Format("Incorrect length at line {0} of {1}: {2}"' lineNum' file' num));  					}    					byte crc = (byte)num;    					for(i = 4; i < len - 2; i += 2)  					{  						crc += Byte.Parse(new string(lineBytes' i' 2)' System.Globalization.NumberStyles.HexNumber);  					}    					byte checksum = Byte.Parse(new string(lineBytes' len - 2' 2)' System.Globalization.NumberStyles.HexNumber);    					if((checksum ^ crc) != 0xFF)  					{  						throw new System.ArgumentException(String.Format("Incorrect crc at line {0} of {1}: got {2:X2}' expected {3:X2}"' lineNum' file' crc' checksum));  					}    					num -= 5;    					uint address = UInt32.Parse(new string(lineBytes' 4' 8)' System.Globalization.NumberStyles.HexNumber);    					if(lineBytes[1] == '7')  					{  						entrypoint = address;  						for(i = 0; i < blocks.Count; i++)  						{  							Block bl = (Block)blocks[i];  							if(bl.address == entrypoint)  							{  								bl.executable = true;  							}  						}  						break;  					}  					else  					{  						Block bl = new Block();    						bl.address = address;  						bl.data = new MemoryStream();  						bl.executable = false;    						for(i = 0; i < num; i++)  						{  							bl.data.WriteByte(Byte.Parse(new string(lineBytes' 12 + i * 2' 2)' System.Globalization.NumberStyles.HexNumber));  						}    						for(i = 0; i < blocks.Count; i++)  						{  							Block bl2 = (Block)blocks[i];  							int num2 = (int)bl2.data.Length;    							if(bl2.address + num2 == bl.address)  							{  								byte[] data = bl.data.ToArray();    								bl2.data.Write(data' 0' data.Length);    								bl = null;  								break;  							}    							if(bl.address + num == bl2.address)  							{  								byte[] data = bl2.data.ToArray();    								bl.data.Write(data' 0' data.Length);    								bl2.address = bl.address;  								bl2.data = bl.data;    								bl = null;  								break;  							}    							if(bl.address < bl2.address)  							{  								blocks.Insert(i' bl);    								bl = null;  								break;  							}  						}    						if(bl != null)  						{  							if(signatureFile != null)  							{  								using(System.IO.FileStream fs = new FileStream(signatureFile' System.IO.FileMode.Open' System.IO.FileAccess.Read))  								{  									if(fs.Length != 128)  									{  										throw new ArgumentOutOfRangeException(String.Format("Signature is not 128 bytes long; it is {0} bytes long"' fs.Length));  									}    									byte[] signature = new byte[128];    									if(128 != fs.Read(signature' 0' 128))  									{  										throw new ArgumentOutOfRangeException("Could not read 128 bytes from signature file");  									}    									bl.signature = signature;  								}  							}  							else  							{  								bl.signature = new byte[0];  							}                                							blocks.Add(bl);  						}  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,SRecordFile,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\SRecord.cs,Parse,The following statement contains a magic number: using(System.IO.StreamReader reader = new StreamReader(file))  			{  				string line;  				int lineNum = 0;    				while((line = reader.ReadLine()) != null)  				{  					char[] lineBytes = line.ToCharArray();  					int len = lineBytes.Length;  					int i;    					lineNum++;  					if(len == 0)  						continue;    					// we only accept S0' S3 and S7 records (header' memory loadable data' execution address)  					if(  						(Char.ToLower(lineBytes[0]) != 's') ||  						(lineBytes[1] != '0' && lineBytes[1] != '3' && lineBytes[1] != '7'))  					{  						throw new System.ArgumentException(String.Format("Unknown format at line {0} of {1}:\n {2}"' lineNum' file' line));  					}    					// we discard S0 records  					if((Char.ToLower(lineBytes[0]) == 's') && (lineBytes[1] == '0'))  					{  						continue;  					}                          					int num = Byte.Parse(new string(lineBytes' 2' 2)' System.Globalization.NumberStyles.HexNumber);  					if(num != ((len / 2) - 2))  					{  						throw new System.ArgumentException(String.Format("Incorrect length at line {0} of {1}: {2}"' lineNum' file' num));  					}    					byte crc = (byte)num;    					for(i = 4; i < len - 2; i += 2)  					{  						crc += Byte.Parse(new string(lineBytes' i' 2)' System.Globalization.NumberStyles.HexNumber);  					}    					byte checksum = Byte.Parse(new string(lineBytes' len - 2' 2)' System.Globalization.NumberStyles.HexNumber);    					if((checksum ^ crc) != 0xFF)  					{  						throw new System.ArgumentException(String.Format("Incorrect crc at line {0} of {1}: got {2:X2}' expected {3:X2}"' lineNum' file' crc' checksum));  					}    					num -= 5;    					uint address = UInt32.Parse(new string(lineBytes' 4' 8)' System.Globalization.NumberStyles.HexNumber);    					if(lineBytes[1] == '7')  					{  						entrypoint = address;  						for(i = 0; i < blocks.Count; i++)  						{  							Block bl = (Block)blocks[i];  							if(bl.address == entrypoint)  							{  								bl.executable = true;  							}  						}  						break;  					}  					else  					{  						Block bl = new Block();    						bl.address = address;  						bl.data = new MemoryStream();  						bl.executable = false;    						for(i = 0; i < num; i++)  						{  							bl.data.WriteByte(Byte.Parse(new string(lineBytes' 12 + i * 2' 2)' System.Globalization.NumberStyles.HexNumber));  						}    						for(i = 0; i < blocks.Count; i++)  						{  							Block bl2 = (Block)blocks[i];  							int num2 = (int)bl2.data.Length;    							if(bl2.address + num2 == bl.address)  							{  								byte[] data = bl.data.ToArray();    								bl2.data.Write(data' 0' data.Length);    								bl = null;  								break;  							}    							if(bl.address + num == bl2.address)  							{  								byte[] data = bl2.data.ToArray();    								bl.data.Write(data' 0' data.Length);    								bl2.address = bl.address;  								bl2.data = bl.data;    								bl = null;  								break;  							}    							if(bl.address < bl2.address)  							{  								blocks.Insert(i' bl);    								bl = null;  								break;  							}  						}    						if(bl != null)  						{  							if(signatureFile != null)  							{  								using(System.IO.FileStream fs = new FileStream(signatureFile' System.IO.FileMode.Open' System.IO.FileAccess.Read))  								{  									if(fs.Length != 128)  									{  										throw new ArgumentOutOfRangeException(String.Format("Signature is not 128 bytes long; it is {0} bytes long"' fs.Length));  									}    									byte[] signature = new byte[128];    									if(128 != fs.Read(signature' 0' 128))  									{  										throw new ArgumentOutOfRangeException("Could not read 128 bytes from signature file");  									}    									bl.signature = signature;  								}  							}  							else  							{  								bl.signature = new byte[0];  							}                                							blocks.Add(bl);  						}  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,SRecordFile,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\SRecord.cs,Parse,The following statement contains a magic number: using(System.IO.StreamReader reader = new StreamReader(file))  			{  				string line;  				int lineNum = 0;    				while((line = reader.ReadLine()) != null)  				{  					char[] lineBytes = line.ToCharArray();  					int len = lineBytes.Length;  					int i;    					lineNum++;  					if(len == 0)  						continue;    					// we only accept S0' S3 and S7 records (header' memory loadable data' execution address)  					if(  						(Char.ToLower(lineBytes[0]) != 's') ||  						(lineBytes[1] != '0' && lineBytes[1] != '3' && lineBytes[1] != '7'))  					{  						throw new System.ArgumentException(String.Format("Unknown format at line {0} of {1}:\n {2}"' lineNum' file' line));  					}    					// we discard S0 records  					if((Char.ToLower(lineBytes[0]) == 's') && (lineBytes[1] == '0'))  					{  						continue;  					}                          					int num = Byte.Parse(new string(lineBytes' 2' 2)' System.Globalization.NumberStyles.HexNumber);  					if(num != ((len / 2) - 2))  					{  						throw new System.ArgumentException(String.Format("Incorrect length at line {0} of {1}: {2}"' lineNum' file' num));  					}    					byte crc = (byte)num;    					for(i = 4; i < len - 2; i += 2)  					{  						crc += Byte.Parse(new string(lineBytes' i' 2)' System.Globalization.NumberStyles.HexNumber);  					}    					byte checksum = Byte.Parse(new string(lineBytes' len - 2' 2)' System.Globalization.NumberStyles.HexNumber);    					if((checksum ^ crc) != 0xFF)  					{  						throw new System.ArgumentException(String.Format("Incorrect crc at line {0} of {1}: got {2:X2}' expected {3:X2}"' lineNum' file' crc' checksum));  					}    					num -= 5;    					uint address = UInt32.Parse(new string(lineBytes' 4' 8)' System.Globalization.NumberStyles.HexNumber);    					if(lineBytes[1] == '7')  					{  						entrypoint = address;  						for(i = 0; i < blocks.Count; i++)  						{  							Block bl = (Block)blocks[i];  							if(bl.address == entrypoint)  							{  								bl.executable = true;  							}  						}  						break;  					}  					else  					{  						Block bl = new Block();    						bl.address = address;  						bl.data = new MemoryStream();  						bl.executable = false;    						for(i = 0; i < num; i++)  						{  							bl.data.WriteByte(Byte.Parse(new string(lineBytes' 12 + i * 2' 2)' System.Globalization.NumberStyles.HexNumber));  						}    						for(i = 0; i < blocks.Count; i++)  						{  							Block bl2 = (Block)blocks[i];  							int num2 = (int)bl2.data.Length;    							if(bl2.address + num2 == bl.address)  							{  								byte[] data = bl.data.ToArray();    								bl2.data.Write(data' 0' data.Length);    								bl = null;  								break;  							}    							if(bl.address + num == bl2.address)  							{  								byte[] data = bl2.data.ToArray();    								bl.data.Write(data' 0' data.Length);    								bl2.address = bl.address;  								bl2.data = bl.data;    								bl = null;  								break;  							}    							if(bl.address < bl2.address)  							{  								blocks.Insert(i' bl);    								bl = null;  								break;  							}  						}    						if(bl != null)  						{  							if(signatureFile != null)  							{  								using(System.IO.FileStream fs = new FileStream(signatureFile' System.IO.FileMode.Open' System.IO.FileAccess.Read))  								{  									if(fs.Length != 128)  									{  										throw new ArgumentOutOfRangeException(String.Format("Signature is not 128 bytes long; it is {0} bytes long"' fs.Length));  									}    									byte[] signature = new byte[128];    									if(128 != fs.Read(signature' 0' 128))  									{  										throw new ArgumentOutOfRangeException("Could not read 128 bytes from signature file");  									}    									bl.signature = signature;  								}  							}  							else  							{  								bl.signature = new byte[0];  							}                                							blocks.Add(bl);  						}  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,SRecordFile,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\SRecord.cs,Parse,The following statement contains a magic number: using(System.IO.StreamReader reader = new StreamReader(file))  			{  				string line;  				int lineNum = 0;    				while((line = reader.ReadLine()) != null)  				{  					char[] lineBytes = line.ToCharArray();  					int len = lineBytes.Length;  					int i;    					lineNum++;  					if(len == 0)  						continue;    					// we only accept S0' S3 and S7 records (header' memory loadable data' execution address)  					if(  						(Char.ToLower(lineBytes[0]) != 's') ||  						(lineBytes[1] != '0' && lineBytes[1] != '3' && lineBytes[1] != '7'))  					{  						throw new System.ArgumentException(String.Format("Unknown format at line {0} of {1}:\n {2}"' lineNum' file' line));  					}    					// we discard S0 records  					if((Char.ToLower(lineBytes[0]) == 's') && (lineBytes[1] == '0'))  					{  						continue;  					}                          					int num = Byte.Parse(new string(lineBytes' 2' 2)' System.Globalization.NumberStyles.HexNumber);  					if(num != ((len / 2) - 2))  					{  						throw new System.ArgumentException(String.Format("Incorrect length at line {0} of {1}: {2}"' lineNum' file' num));  					}    					byte crc = (byte)num;    					for(i = 4; i < len - 2; i += 2)  					{  						crc += Byte.Parse(new string(lineBytes' i' 2)' System.Globalization.NumberStyles.HexNumber);  					}    					byte checksum = Byte.Parse(new string(lineBytes' len - 2' 2)' System.Globalization.NumberStyles.HexNumber);    					if((checksum ^ crc) != 0xFF)  					{  						throw new System.ArgumentException(String.Format("Incorrect crc at line {0} of {1}: got {2:X2}' expected {3:X2}"' lineNum' file' crc' checksum));  					}    					num -= 5;    					uint address = UInt32.Parse(new string(lineBytes' 4' 8)' System.Globalization.NumberStyles.HexNumber);    					if(lineBytes[1] == '7')  					{  						entrypoint = address;  						for(i = 0; i < blocks.Count; i++)  						{  							Block bl = (Block)blocks[i];  							if(bl.address == entrypoint)  							{  								bl.executable = true;  							}  						}  						break;  					}  					else  					{  						Block bl = new Block();    						bl.address = address;  						bl.data = new MemoryStream();  						bl.executable = false;    						for(i = 0; i < num; i++)  						{  							bl.data.WriteByte(Byte.Parse(new string(lineBytes' 12 + i * 2' 2)' System.Globalization.NumberStyles.HexNumber));  						}    						for(i = 0; i < blocks.Count; i++)  						{  							Block bl2 = (Block)blocks[i];  							int num2 = (int)bl2.data.Length;    							if(bl2.address + num2 == bl.address)  							{  								byte[] data = bl.data.ToArray();    								bl2.data.Write(data' 0' data.Length);    								bl = null;  								break;  							}    							if(bl.address + num == bl2.address)  							{  								byte[] data = bl2.data.ToArray();    								bl.data.Write(data' 0' data.Length);    								bl2.address = bl.address;  								bl2.data = bl.data;    								bl = null;  								break;  							}    							if(bl.address < bl2.address)  							{  								blocks.Insert(i' bl);    								bl = null;  								break;  							}  						}    						if(bl != null)  						{  							if(signatureFile != null)  							{  								using(System.IO.FileStream fs = new FileStream(signatureFile' System.IO.FileMode.Open' System.IO.FileAccess.Read))  								{  									if(fs.Length != 128)  									{  										throw new ArgumentOutOfRangeException(String.Format("Signature is not 128 bytes long; it is {0} bytes long"' fs.Length));  									}    									byte[] signature = new byte[128];    									if(128 != fs.Read(signature' 0' 128))  									{  										throw new ArgumentOutOfRangeException("Could not read 128 bytes from signature file");  									}    									bl.signature = signature;  								}  							}  							else  							{  								bl.signature = new byte[0];  							}                                							blocks.Add(bl);  						}  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,SRecordFile,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\SRecord.cs,Parse,The following statement contains a magic number: using(System.IO.StreamReader reader = new StreamReader(file))  			{  				string line;  				int lineNum = 0;    				while((line = reader.ReadLine()) != null)  				{  					char[] lineBytes = line.ToCharArray();  					int len = lineBytes.Length;  					int i;    					lineNum++;  					if(len == 0)  						continue;    					// we only accept S0' S3 and S7 records (header' memory loadable data' execution address)  					if(  						(Char.ToLower(lineBytes[0]) != 's') ||  						(lineBytes[1] != '0' && lineBytes[1] != '3' && lineBytes[1] != '7'))  					{  						throw new System.ArgumentException(String.Format("Unknown format at line {0} of {1}:\n {2}"' lineNum' file' line));  					}    					// we discard S0 records  					if((Char.ToLower(lineBytes[0]) == 's') && (lineBytes[1] == '0'))  					{  						continue;  					}                          					int num = Byte.Parse(new string(lineBytes' 2' 2)' System.Globalization.NumberStyles.HexNumber);  					if(num != ((len / 2) - 2))  					{  						throw new System.ArgumentException(String.Format("Incorrect length at line {0} of {1}: {2}"' lineNum' file' num));  					}    					byte crc = (byte)num;    					for(i = 4; i < len - 2; i += 2)  					{  						crc += Byte.Parse(new string(lineBytes' i' 2)' System.Globalization.NumberStyles.HexNumber);  					}    					byte checksum = Byte.Parse(new string(lineBytes' len - 2' 2)' System.Globalization.NumberStyles.HexNumber);    					if((checksum ^ crc) != 0xFF)  					{  						throw new System.ArgumentException(String.Format("Incorrect crc at line {0} of {1}: got {2:X2}' expected {3:X2}"' lineNum' file' crc' checksum));  					}    					num -= 5;    					uint address = UInt32.Parse(new string(lineBytes' 4' 8)' System.Globalization.NumberStyles.HexNumber);    					if(lineBytes[1] == '7')  					{  						entrypoint = address;  						for(i = 0; i < blocks.Count; i++)  						{  							Block bl = (Block)blocks[i];  							if(bl.address == entrypoint)  							{  								bl.executable = true;  							}  						}  						break;  					}  					else  					{  						Block bl = new Block();    						bl.address = address;  						bl.data = new MemoryStream();  						bl.executable = false;    						for(i = 0; i < num; i++)  						{  							bl.data.WriteByte(Byte.Parse(new string(lineBytes' 12 + i * 2' 2)' System.Globalization.NumberStyles.HexNumber));  						}    						for(i = 0; i < blocks.Count; i++)  						{  							Block bl2 = (Block)blocks[i];  							int num2 = (int)bl2.data.Length;    							if(bl2.address + num2 == bl.address)  							{  								byte[] data = bl.data.ToArray();    								bl2.data.Write(data' 0' data.Length);    								bl = null;  								break;  							}    							if(bl.address + num == bl2.address)  							{  								byte[] data = bl2.data.ToArray();    								bl.data.Write(data' 0' data.Length);    								bl2.address = bl.address;  								bl2.data = bl.data;    								bl = null;  								break;  							}    							if(bl.address < bl2.address)  							{  								blocks.Insert(i' bl);    								bl = null;  								break;  							}  						}    						if(bl != null)  						{  							if(signatureFile != null)  							{  								using(System.IO.FileStream fs = new FileStream(signatureFile' System.IO.FileMode.Open' System.IO.FileAccess.Read))  								{  									if(fs.Length != 128)  									{  										throw new ArgumentOutOfRangeException(String.Format("Signature is not 128 bytes long; it is {0} bytes long"' fs.Length));  									}    									byte[] signature = new byte[128];    									if(128 != fs.Read(signature' 0' 128))  									{  										throw new ArgumentOutOfRangeException("Could not read 128 bytes from signature file");  									}    									bl.signature = signature;  								}  							}  							else  							{  								bl.signature = new byte[0];  							}                                							blocks.Add(bl);  						}  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,SRecordFile,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\SRecord.cs,Parse,The following statement contains a magic number: using(System.IO.StreamReader reader = new StreamReader(file))  			{  				string line;  				int lineNum = 0;    				while((line = reader.ReadLine()) != null)  				{  					char[] lineBytes = line.ToCharArray();  					int len = lineBytes.Length;  					int i;    					lineNum++;  					if(len == 0)  						continue;    					// we only accept S0' S3 and S7 records (header' memory loadable data' execution address)  					if(  						(Char.ToLower(lineBytes[0]) != 's') ||  						(lineBytes[1] != '0' && lineBytes[1] != '3' && lineBytes[1] != '7'))  					{  						throw new System.ArgumentException(String.Format("Unknown format at line {0} of {1}:\n {2}"' lineNum' file' line));  					}    					// we discard S0 records  					if((Char.ToLower(lineBytes[0]) == 's') && (lineBytes[1] == '0'))  					{  						continue;  					}                          					int num = Byte.Parse(new string(lineBytes' 2' 2)' System.Globalization.NumberStyles.HexNumber);  					if(num != ((len / 2) - 2))  					{  						throw new System.ArgumentException(String.Format("Incorrect length at line {0} of {1}: {2}"' lineNum' file' num));  					}    					byte crc = (byte)num;    					for(i = 4; i < len - 2; i += 2)  					{  						crc += Byte.Parse(new string(lineBytes' i' 2)' System.Globalization.NumberStyles.HexNumber);  					}    					byte checksum = Byte.Parse(new string(lineBytes' len - 2' 2)' System.Globalization.NumberStyles.HexNumber);    					if((checksum ^ crc) != 0xFF)  					{  						throw new System.ArgumentException(String.Format("Incorrect crc at line {0} of {1}: got {2:X2}' expected {3:X2}"' lineNum' file' crc' checksum));  					}    					num -= 5;    					uint address = UInt32.Parse(new string(lineBytes' 4' 8)' System.Globalization.NumberStyles.HexNumber);    					if(lineBytes[1] == '7')  					{  						entrypoint = address;  						for(i = 0; i < blocks.Count; i++)  						{  							Block bl = (Block)blocks[i];  							if(bl.address == entrypoint)  							{  								bl.executable = true;  							}  						}  						break;  					}  					else  					{  						Block bl = new Block();    						bl.address = address;  						bl.data = new MemoryStream();  						bl.executable = false;    						for(i = 0; i < num; i++)  						{  							bl.data.WriteByte(Byte.Parse(new string(lineBytes' 12 + i * 2' 2)' System.Globalization.NumberStyles.HexNumber));  						}    						for(i = 0; i < blocks.Count; i++)  						{  							Block bl2 = (Block)blocks[i];  							int num2 = (int)bl2.data.Length;    							if(bl2.address + num2 == bl.address)  							{  								byte[] data = bl.data.ToArray();    								bl2.data.Write(data' 0' data.Length);    								bl = null;  								break;  							}    							if(bl.address + num == bl2.address)  							{  								byte[] data = bl2.data.ToArray();    								bl.data.Write(data' 0' data.Length);    								bl2.address = bl.address;  								bl2.data = bl.data;    								bl = null;  								break;  							}    							if(bl.address < bl2.address)  							{  								blocks.Insert(i' bl);    								bl = null;  								break;  							}  						}    						if(bl != null)  						{  							if(signatureFile != null)  							{  								using(System.IO.FileStream fs = new FileStream(signatureFile' System.IO.FileMode.Open' System.IO.FileAccess.Read))  								{  									if(fs.Length != 128)  									{  										throw new ArgumentOutOfRangeException(String.Format("Signature is not 128 bytes long; it is {0} bytes long"' fs.Length));  									}    									byte[] signature = new byte[128];    									if(128 != fs.Read(signature' 0' 128))  									{  										throw new ArgumentOutOfRangeException("Could not read 128 bytes from signature file");  									}    									bl.signature = signature;  								}  							}  							else  							{  								bl.signature = new byte[0];  							}                                							blocks.Add(bl);  						}  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,SRecordFile,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\SRecord.cs,Parse,The following statement contains a magic number: using(System.IO.StreamReader reader = new StreamReader(file))  			{  				string line;  				int lineNum = 0;    				while((line = reader.ReadLine()) != null)  				{  					char[] lineBytes = line.ToCharArray();  					int len = lineBytes.Length;  					int i;    					lineNum++;  					if(len == 0)  						continue;    					// we only accept S0' S3 and S7 records (header' memory loadable data' execution address)  					if(  						(Char.ToLower(lineBytes[0]) != 's') ||  						(lineBytes[1] != '0' && lineBytes[1] != '3' && lineBytes[1] != '7'))  					{  						throw new System.ArgumentException(String.Format("Unknown format at line {0} of {1}:\n {2}"' lineNum' file' line));  					}    					// we discard S0 records  					if((Char.ToLower(lineBytes[0]) == 's') && (lineBytes[1] == '0'))  					{  						continue;  					}                          					int num = Byte.Parse(new string(lineBytes' 2' 2)' System.Globalization.NumberStyles.HexNumber);  					if(num != ((len / 2) - 2))  					{  						throw new System.ArgumentException(String.Format("Incorrect length at line {0} of {1}: {2}"' lineNum' file' num));  					}    					byte crc = (byte)num;    					for(i = 4; i < len - 2; i += 2)  					{  						crc += Byte.Parse(new string(lineBytes' i' 2)' System.Globalization.NumberStyles.HexNumber);  					}    					byte checksum = Byte.Parse(new string(lineBytes' len - 2' 2)' System.Globalization.NumberStyles.HexNumber);    					if((checksum ^ crc) != 0xFF)  					{  						throw new System.ArgumentException(String.Format("Incorrect crc at line {0} of {1}: got {2:X2}' expected {3:X2}"' lineNum' file' crc' checksum));  					}    					num -= 5;    					uint address = UInt32.Parse(new string(lineBytes' 4' 8)' System.Globalization.NumberStyles.HexNumber);    					if(lineBytes[1] == '7')  					{  						entrypoint = address;  						for(i = 0; i < blocks.Count; i++)  						{  							Block bl = (Block)blocks[i];  							if(bl.address == entrypoint)  							{  								bl.executable = true;  							}  						}  						break;  					}  					else  					{  						Block bl = new Block();    						bl.address = address;  						bl.data = new MemoryStream();  						bl.executable = false;    						for(i = 0; i < num; i++)  						{  							bl.data.WriteByte(Byte.Parse(new string(lineBytes' 12 + i * 2' 2)' System.Globalization.NumberStyles.HexNumber));  						}    						for(i = 0; i < blocks.Count; i++)  						{  							Block bl2 = (Block)blocks[i];  							int num2 = (int)bl2.data.Length;    							if(bl2.address + num2 == bl.address)  							{  								byte[] data = bl.data.ToArray();    								bl2.data.Write(data' 0' data.Length);    								bl = null;  								break;  							}    							if(bl.address + num == bl2.address)  							{  								byte[] data = bl2.data.ToArray();    								bl.data.Write(data' 0' data.Length);    								bl2.address = bl.address;  								bl2.data = bl.data;    								bl = null;  								break;  							}    							if(bl.address < bl2.address)  							{  								blocks.Insert(i' bl);    								bl = null;  								break;  							}  						}    						if(bl != null)  						{  							if(signatureFile != null)  							{  								using(System.IO.FileStream fs = new FileStream(signatureFile' System.IO.FileMode.Open' System.IO.FileAccess.Read))  								{  									if(fs.Length != 128)  									{  										throw new ArgumentOutOfRangeException(String.Format("Signature is not 128 bytes long; it is {0} bytes long"' fs.Length));  									}    									byte[] signature = new byte[128];    									if(128 != fs.Read(signature' 0' 128))  									{  										throw new ArgumentOutOfRangeException("Could not read 128 bytes from signature file");  									}    									bl.signature = signature;  								}  							}  							else  							{  								bl.signature = new byte[0];  							}                                							blocks.Add(bl);  						}  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,SRecordFile,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\SRecord.cs,Parse,The following statement contains a magic number: using(System.IO.StreamReader reader = new StreamReader(file))  			{  				string line;  				int lineNum = 0;    				while((line = reader.ReadLine()) != null)  				{  					char[] lineBytes = line.ToCharArray();  					int len = lineBytes.Length;  					int i;    					lineNum++;  					if(len == 0)  						continue;    					// we only accept S0' S3 and S7 records (header' memory loadable data' execution address)  					if(  						(Char.ToLower(lineBytes[0]) != 's') ||  						(lineBytes[1] != '0' && lineBytes[1] != '3' && lineBytes[1] != '7'))  					{  						throw new System.ArgumentException(String.Format("Unknown format at line {0} of {1}:\n {2}"' lineNum' file' line));  					}    					// we discard S0 records  					if((Char.ToLower(lineBytes[0]) == 's') && (lineBytes[1] == '0'))  					{  						continue;  					}                          					int num = Byte.Parse(new string(lineBytes' 2' 2)' System.Globalization.NumberStyles.HexNumber);  					if(num != ((len / 2) - 2))  					{  						throw new System.ArgumentException(String.Format("Incorrect length at line {0} of {1}: {2}"' lineNum' file' num));  					}    					byte crc = (byte)num;    					for(i = 4; i < len - 2; i += 2)  					{  						crc += Byte.Parse(new string(lineBytes' i' 2)' System.Globalization.NumberStyles.HexNumber);  					}    					byte checksum = Byte.Parse(new string(lineBytes' len - 2' 2)' System.Globalization.NumberStyles.HexNumber);    					if((checksum ^ crc) != 0xFF)  					{  						throw new System.ArgumentException(String.Format("Incorrect crc at line {0} of {1}: got {2:X2}' expected {3:X2}"' lineNum' file' crc' checksum));  					}    					num -= 5;    					uint address = UInt32.Parse(new string(lineBytes' 4' 8)' System.Globalization.NumberStyles.HexNumber);    					if(lineBytes[1] == '7')  					{  						entrypoint = address;  						for(i = 0; i < blocks.Count; i++)  						{  							Block bl = (Block)blocks[i];  							if(bl.address == entrypoint)  							{  								bl.executable = true;  							}  						}  						break;  					}  					else  					{  						Block bl = new Block();    						bl.address = address;  						bl.data = new MemoryStream();  						bl.executable = false;    						for(i = 0; i < num; i++)  						{  							bl.data.WriteByte(Byte.Parse(new string(lineBytes' 12 + i * 2' 2)' System.Globalization.NumberStyles.HexNumber));  						}    						for(i = 0; i < blocks.Count; i++)  						{  							Block bl2 = (Block)blocks[i];  							int num2 = (int)bl2.data.Length;    							if(bl2.address + num2 == bl.address)  							{  								byte[] data = bl.data.ToArray();    								bl2.data.Write(data' 0' data.Length);    								bl = null;  								break;  							}    							if(bl.address + num == bl2.address)  							{  								byte[] data = bl2.data.ToArray();    								bl.data.Write(data' 0' data.Length);    								bl2.address = bl.address;  								bl2.data = bl.data;    								bl = null;  								break;  							}    							if(bl.address < bl2.address)  							{  								blocks.Insert(i' bl);    								bl = null;  								break;  							}  						}    						if(bl != null)  						{  							if(signatureFile != null)  							{  								using(System.IO.FileStream fs = new FileStream(signatureFile' System.IO.FileMode.Open' System.IO.FileAccess.Read))  								{  									if(fs.Length != 128)  									{  										throw new ArgumentOutOfRangeException(String.Format("Signature is not 128 bytes long; it is {0} bytes long"' fs.Length));  									}    									byte[] signature = new byte[128];    									if(128 != fs.Read(signature' 0' 128))  									{  										throw new ArgumentOutOfRangeException("Could not read 128 bytes from signature file");  									}    									bl.signature = signature;  								}  							}  							else  							{  								bl.signature = new byte[0];  							}                                							blocks.Add(bl);  						}  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,SRecordFile,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\SRecord.cs,Parse,The following statement contains a magic number: using(System.IO.StreamReader reader = new StreamReader(file))  			{  				string line;  				int lineNum = 0;    				while((line = reader.ReadLine()) != null)  				{  					char[] lineBytes = line.ToCharArray();  					int len = lineBytes.Length;  					int i;    					lineNum++;  					if(len == 0)  						continue;    					// we only accept S0' S3 and S7 records (header' memory loadable data' execution address)  					if(  						(Char.ToLower(lineBytes[0]) != 's') ||  						(lineBytes[1] != '0' && lineBytes[1] != '3' && lineBytes[1] != '7'))  					{  						throw new System.ArgumentException(String.Format("Unknown format at line {0} of {1}:\n {2}"' lineNum' file' line));  					}    					// we discard S0 records  					if((Char.ToLower(lineBytes[0]) == 's') && (lineBytes[1] == '0'))  					{  						continue;  					}                          					int num = Byte.Parse(new string(lineBytes' 2' 2)' System.Globalization.NumberStyles.HexNumber);  					if(num != ((len / 2) - 2))  					{  						throw new System.ArgumentException(String.Format("Incorrect length at line {0} of {1}: {2}"' lineNum' file' num));  					}    					byte crc = (byte)num;    					for(i = 4; i < len - 2; i += 2)  					{  						crc += Byte.Parse(new string(lineBytes' i' 2)' System.Globalization.NumberStyles.HexNumber);  					}    					byte checksum = Byte.Parse(new string(lineBytes' len - 2' 2)' System.Globalization.NumberStyles.HexNumber);    					if((checksum ^ crc) != 0xFF)  					{  						throw new System.ArgumentException(String.Format("Incorrect crc at line {0} of {1}: got {2:X2}' expected {3:X2}"' lineNum' file' crc' checksum));  					}    					num -= 5;    					uint address = UInt32.Parse(new string(lineBytes' 4' 8)' System.Globalization.NumberStyles.HexNumber);    					if(lineBytes[1] == '7')  					{  						entrypoint = address;  						for(i = 0; i < blocks.Count; i++)  						{  							Block bl = (Block)blocks[i];  							if(bl.address == entrypoint)  							{  								bl.executable = true;  							}  						}  						break;  					}  					else  					{  						Block bl = new Block();    						bl.address = address;  						bl.data = new MemoryStream();  						bl.executable = false;    						for(i = 0; i < num; i++)  						{  							bl.data.WriteByte(Byte.Parse(new string(lineBytes' 12 + i * 2' 2)' System.Globalization.NumberStyles.HexNumber));  						}    						for(i = 0; i < blocks.Count; i++)  						{  							Block bl2 = (Block)blocks[i];  							int num2 = (int)bl2.data.Length;    							if(bl2.address + num2 == bl.address)  							{  								byte[] data = bl.data.ToArray();    								bl2.data.Write(data' 0' data.Length);    								bl = null;  								break;  							}    							if(bl.address + num == bl2.address)  							{  								byte[] data = bl2.data.ToArray();    								bl.data.Write(data' 0' data.Length);    								bl2.address = bl.address;  								bl2.data = bl.data;    								bl = null;  								break;  							}    							if(bl.address < bl2.address)  							{  								blocks.Insert(i' bl);    								bl = null;  								break;  							}  						}    						if(bl != null)  						{  							if(signatureFile != null)  							{  								using(System.IO.FileStream fs = new FileStream(signatureFile' System.IO.FileMode.Open' System.IO.FileAccess.Read))  								{  									if(fs.Length != 128)  									{  										throw new ArgumentOutOfRangeException(String.Format("Signature is not 128 bytes long; it is {0} bytes long"' fs.Length));  									}    									byte[] signature = new byte[128];    									if(128 != fs.Read(signature' 0' 128))  									{  										throw new ArgumentOutOfRangeException("Could not read 128 bytes from signature file");  									}    									bl.signature = signature;  								}  							}  							else  							{  								bl.signature = new byte[0];  							}                                							blocks.Add(bl);  						}  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,SRecordFile,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\SRecord.cs,Parse,The following statement contains a magic number: using(System.IO.StreamReader reader = new StreamReader(file))  			{  				string line;  				int lineNum = 0;    				while((line = reader.ReadLine()) != null)  				{  					char[] lineBytes = line.ToCharArray();  					int len = lineBytes.Length;  					int i;    					lineNum++;  					if(len == 0)  						continue;    					// we only accept S0' S3 and S7 records (header' memory loadable data' execution address)  					if(  						(Char.ToLower(lineBytes[0]) != 's') ||  						(lineBytes[1] != '0' && lineBytes[1] != '3' && lineBytes[1] != '7'))  					{  						throw new System.ArgumentException(String.Format("Unknown format at line {0} of {1}:\n {2}"' lineNum' file' line));  					}    					// we discard S0 records  					if((Char.ToLower(lineBytes[0]) == 's') && (lineBytes[1] == '0'))  					{  						continue;  					}                          					int num = Byte.Parse(new string(lineBytes' 2' 2)' System.Globalization.NumberStyles.HexNumber);  					if(num != ((len / 2) - 2))  					{  						throw new System.ArgumentException(String.Format("Incorrect length at line {0} of {1}: {2}"' lineNum' file' num));  					}    					byte crc = (byte)num;    					for(i = 4; i < len - 2; i += 2)  					{  						crc += Byte.Parse(new string(lineBytes' i' 2)' System.Globalization.NumberStyles.HexNumber);  					}    					byte checksum = Byte.Parse(new string(lineBytes' len - 2' 2)' System.Globalization.NumberStyles.HexNumber);    					if((checksum ^ crc) != 0xFF)  					{  						throw new System.ArgumentException(String.Format("Incorrect crc at line {0} of {1}: got {2:X2}' expected {3:X2}"' lineNum' file' crc' checksum));  					}    					num -= 5;    					uint address = UInt32.Parse(new string(lineBytes' 4' 8)' System.Globalization.NumberStyles.HexNumber);    					if(lineBytes[1] == '7')  					{  						entrypoint = address;  						for(i = 0; i < blocks.Count; i++)  						{  							Block bl = (Block)blocks[i];  							if(bl.address == entrypoint)  							{  								bl.executable = true;  							}  						}  						break;  					}  					else  					{  						Block bl = new Block();    						bl.address = address;  						bl.data = new MemoryStream();  						bl.executable = false;    						for(i = 0; i < num; i++)  						{  							bl.data.WriteByte(Byte.Parse(new string(lineBytes' 12 + i * 2' 2)' System.Globalization.NumberStyles.HexNumber));  						}    						for(i = 0; i < blocks.Count; i++)  						{  							Block bl2 = (Block)blocks[i];  							int num2 = (int)bl2.data.Length;    							if(bl2.address + num2 == bl.address)  							{  								byte[] data = bl.data.ToArray();    								bl2.data.Write(data' 0' data.Length);    								bl = null;  								break;  							}    							if(bl.address + num == bl2.address)  							{  								byte[] data = bl2.data.ToArray();    								bl.data.Write(data' 0' data.Length);    								bl2.address = bl.address;  								bl2.data = bl.data;    								bl = null;  								break;  							}    							if(bl.address < bl2.address)  							{  								blocks.Insert(i' bl);    								bl = null;  								break;  							}  						}    						if(bl != null)  						{  							if(signatureFile != null)  							{  								using(System.IO.FileStream fs = new FileStream(signatureFile' System.IO.FileMode.Open' System.IO.FileAccess.Read))  								{  									if(fs.Length != 128)  									{  										throw new ArgumentOutOfRangeException(String.Format("Signature is not 128 bytes long; it is {0} bytes long"' fs.Length));  									}    									byte[] signature = new byte[128];    									if(128 != fs.Read(signature' 0' 128))  									{  										throw new ArgumentOutOfRangeException("Could not read 128 bytes from signature file");  									}    									bl.signature = signature;  								}  							}  							else  							{  								bl.signature = new byte[0];  							}                                							blocks.Add(bl);  						}  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,SRecordFile,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\SRecord.cs,Parse,The following statement contains a magic number: using(System.IO.StreamReader reader = new StreamReader(file))  			{  				string line;  				int lineNum = 0;    				while((line = reader.ReadLine()) != null)  				{  					char[] lineBytes = line.ToCharArray();  					int len = lineBytes.Length;  					int i;    					lineNum++;  					if(len == 0)  						continue;    					// we only accept S0' S3 and S7 records (header' memory loadable data' execution address)  					if(  						(Char.ToLower(lineBytes[0]) != 's') ||  						(lineBytes[1] != '0' && lineBytes[1] != '3' && lineBytes[1] != '7'))  					{  						throw new System.ArgumentException(String.Format("Unknown format at line {0} of {1}:\n {2}"' lineNum' file' line));  					}    					// we discard S0 records  					if((Char.ToLower(lineBytes[0]) == 's') && (lineBytes[1] == '0'))  					{  						continue;  					}                          					int num = Byte.Parse(new string(lineBytes' 2' 2)' System.Globalization.NumberStyles.HexNumber);  					if(num != ((len / 2) - 2))  					{  						throw new System.ArgumentException(String.Format("Incorrect length at line {0} of {1}: {2}"' lineNum' file' num));  					}    					byte crc = (byte)num;    					for(i = 4; i < len - 2; i += 2)  					{  						crc += Byte.Parse(new string(lineBytes' i' 2)' System.Globalization.NumberStyles.HexNumber);  					}    					byte checksum = Byte.Parse(new string(lineBytes' len - 2' 2)' System.Globalization.NumberStyles.HexNumber);    					if((checksum ^ crc) != 0xFF)  					{  						throw new System.ArgumentException(String.Format("Incorrect crc at line {0} of {1}: got {2:X2}' expected {3:X2}"' lineNum' file' crc' checksum));  					}    					num -= 5;    					uint address = UInt32.Parse(new string(lineBytes' 4' 8)' System.Globalization.NumberStyles.HexNumber);    					if(lineBytes[1] == '7')  					{  						entrypoint = address;  						for(i = 0; i < blocks.Count; i++)  						{  							Block bl = (Block)blocks[i];  							if(bl.address == entrypoint)  							{  								bl.executable = true;  							}  						}  						break;  					}  					else  					{  						Block bl = new Block();    						bl.address = address;  						bl.data = new MemoryStream();  						bl.executable = false;    						for(i = 0; i < num; i++)  						{  							bl.data.WriteByte(Byte.Parse(new string(lineBytes' 12 + i * 2' 2)' System.Globalization.NumberStyles.HexNumber));  						}    						for(i = 0; i < blocks.Count; i++)  						{  							Block bl2 = (Block)blocks[i];  							int num2 = (int)bl2.data.Length;    							if(bl2.address + num2 == bl.address)  							{  								byte[] data = bl.data.ToArray();    								bl2.data.Write(data' 0' data.Length);    								bl = null;  								break;  							}    							if(bl.address + num == bl2.address)  							{  								byte[] data = bl2.data.ToArray();    								bl.data.Write(data' 0' data.Length);    								bl2.address = bl.address;  								bl2.data = bl.data;    								bl = null;  								break;  							}    							if(bl.address < bl2.address)  							{  								blocks.Insert(i' bl);    								bl = null;  								break;  							}  						}    						if(bl != null)  						{  							if(signatureFile != null)  							{  								using(System.IO.FileStream fs = new FileStream(signatureFile' System.IO.FileMode.Open' System.IO.FileAccess.Read))  								{  									if(fs.Length != 128)  									{  										throw new ArgumentOutOfRangeException(String.Format("Signature is not 128 bytes long; it is {0} bytes long"' fs.Length));  									}    									byte[] signature = new byte[128];    									if(128 != fs.Read(signature' 0' 128))  									{  										throw new ArgumentOutOfRangeException("Could not read 128 bytes from signature file");  									}    									bl.signature = signature;  								}  							}  							else  							{  								bl.signature = new byte[0];  							}                                							blocks.Add(bl);  						}  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,SRecordFile,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\SRecord.cs,Parse,The following statement contains a magic number: using(System.IO.StreamReader reader = new StreamReader(file))  			{  				string line;  				int lineNum = 0;    				while((line = reader.ReadLine()) != null)  				{  					char[] lineBytes = line.ToCharArray();  					int len = lineBytes.Length;  					int i;    					lineNum++;  					if(len == 0)  						continue;    					// we only accept S0' S3 and S7 records (header' memory loadable data' execution address)  					if(  						(Char.ToLower(lineBytes[0]) != 's') ||  						(lineBytes[1] != '0' && lineBytes[1] != '3' && lineBytes[1] != '7'))  					{  						throw new System.ArgumentException(String.Format("Unknown format at line {0} of {1}:\n {2}"' lineNum' file' line));  					}    					// we discard S0 records  					if((Char.ToLower(lineBytes[0]) == 's') && (lineBytes[1] == '0'))  					{  						continue;  					}                          					int num = Byte.Parse(new string(lineBytes' 2' 2)' System.Globalization.NumberStyles.HexNumber);  					if(num != ((len / 2) - 2))  					{  						throw new System.ArgumentException(String.Format("Incorrect length at line {0} of {1}: {2}"' lineNum' file' num));  					}    					byte crc = (byte)num;    					for(i = 4; i < len - 2; i += 2)  					{  						crc += Byte.Parse(new string(lineBytes' i' 2)' System.Globalization.NumberStyles.HexNumber);  					}    					byte checksum = Byte.Parse(new string(lineBytes' len - 2' 2)' System.Globalization.NumberStyles.HexNumber);    					if((checksum ^ crc) != 0xFF)  					{  						throw new System.ArgumentException(String.Format("Incorrect crc at line {0} of {1}: got {2:X2}' expected {3:X2}"' lineNum' file' crc' checksum));  					}    					num -= 5;    					uint address = UInt32.Parse(new string(lineBytes' 4' 8)' System.Globalization.NumberStyles.HexNumber);    					if(lineBytes[1] == '7')  					{  						entrypoint = address;  						for(i = 0; i < blocks.Count; i++)  						{  							Block bl = (Block)blocks[i];  							if(bl.address == entrypoint)  							{  								bl.executable = true;  							}  						}  						break;  					}  					else  					{  						Block bl = new Block();    						bl.address = address;  						bl.data = new MemoryStream();  						bl.executable = false;    						for(i = 0; i < num; i++)  						{  							bl.data.WriteByte(Byte.Parse(new string(lineBytes' 12 + i * 2' 2)' System.Globalization.NumberStyles.HexNumber));  						}    						for(i = 0; i < blocks.Count; i++)  						{  							Block bl2 = (Block)blocks[i];  							int num2 = (int)bl2.data.Length;    							if(bl2.address + num2 == bl.address)  							{  								byte[] data = bl.data.ToArray();    								bl2.data.Write(data' 0' data.Length);    								bl = null;  								break;  							}    							if(bl.address + num == bl2.address)  							{  								byte[] data = bl2.data.ToArray();    								bl.data.Write(data' 0' data.Length);    								bl2.address = bl.address;  								bl2.data = bl.data;    								bl = null;  								break;  							}    							if(bl.address < bl2.address)  							{  								blocks.Insert(i' bl);    								bl = null;  								break;  							}  						}    						if(bl != null)  						{  							if(signatureFile != null)  							{  								using(System.IO.FileStream fs = new FileStream(signatureFile' System.IO.FileMode.Open' System.IO.FileAccess.Read))  								{  									if(fs.Length != 128)  									{  										throw new ArgumentOutOfRangeException(String.Format("Signature is not 128 bytes long; it is {0} bytes long"' fs.Length));  									}    									byte[] signature = new byte[128];    									if(128 != fs.Read(signature' 0' 128))  									{  										throw new ArgumentOutOfRangeException("Could not read 128 bytes from signature file");  									}    									bl.signature = signature;  								}  							}  							else  							{  								bl.signature = new byte[0];  							}                                							blocks.Add(bl);  						}  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,SRecordFile,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\SRecord.cs,Encode,The following statement contains a magic number: while(len > 0)  			{  				uint size = len > 16 ? 16 : len;  				byte crc = (byte)(size + 5);    				writer.Write("S3{0:X2}{1:X8}"' size + 5' address);    				crc += (byte)(address >> 0);  				crc += (byte)(address >> 8);  				crc += (byte)(address >> 16);  				crc += (byte)(address >> 24);    				for(uint i = 0; i < size; i++)  				{  					byte v = buf[offset++];    					writer.Write("{0:X2}"' v);    					crc += v;  				}    				address += size;  				len -= size;    				writer.WriteLine("{0:X2}"' (byte)~crc);  			}
Magic Number,Microsoft.SPOT.Debugger,SRecordFile,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\SRecord.cs,Encode,The following statement contains a magic number: while(len > 0)  			{  				uint size = len > 16 ? 16 : len;  				byte crc = (byte)(size + 5);    				writer.Write("S3{0:X2}{1:X8}"' size + 5' address);    				crc += (byte)(address >> 0);  				crc += (byte)(address >> 8);  				crc += (byte)(address >> 16);  				crc += (byte)(address >> 24);    				for(uint i = 0; i < size; i++)  				{  					byte v = buf[offset++];    					writer.Write("{0:X2}"' v);    					crc += v;  				}    				address += size;  				len -= size;    				writer.WriteLine("{0:X2}"' (byte)~crc);  			}
Magic Number,Microsoft.SPOT.Debugger,SRecordFile,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\SRecord.cs,Encode,The following statement contains a magic number: while(len > 0)  			{  				uint size = len > 16 ? 16 : len;  				byte crc = (byte)(size + 5);    				writer.Write("S3{0:X2}{1:X8}"' size + 5' address);    				crc += (byte)(address >> 0);  				crc += (byte)(address >> 8);  				crc += (byte)(address >> 16);  				crc += (byte)(address >> 24);    				for(uint i = 0; i < size; i++)  				{  					byte v = buf[offset++];    					writer.Write("{0:X2}"' v);    					crc += v;  				}    				address += size;  				len -= size;    				writer.WriteLine("{0:X2}"' (byte)~crc);  			}
Magic Number,Microsoft.SPOT.Debugger,SRecordFile,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\SRecord.cs,Encode,The following statement contains a magic number: while(len > 0)  			{  				uint size = len > 16 ? 16 : len;  				byte crc = (byte)(size + 5);    				writer.Write("S3{0:X2}{1:X8}"' size + 5' address);    				crc += (byte)(address >> 0);  				crc += (byte)(address >> 8);  				crc += (byte)(address >> 16);  				crc += (byte)(address >> 24);    				for(uint i = 0; i < size; i++)  				{  					byte v = buf[offset++];    					writer.Write("{0:X2}"' v);    					crc += v;  				}    				address += size;  				len -= size;    				writer.WriteLine("{0:X2}"' (byte)~crc);  			}
Magic Number,Microsoft.SPOT.Debugger,SRecordFile,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\SRecord.cs,Encode,The following statement contains a magic number: while(len > 0)  			{  				uint size = len > 16 ? 16 : len;  				byte crc = (byte)(size + 5);    				writer.Write("S3{0:X2}{1:X8}"' size + 5' address);    				crc += (byte)(address >> 0);  				crc += (byte)(address >> 8);  				crc += (byte)(address >> 16);  				crc += (byte)(address >> 24);    				for(uint i = 0; i < size; i++)  				{  					byte v = buf[offset++];    					writer.Write("{0:X2}"' v);    					crc += v;  				}    				address += size;  				len -= size;    				writer.WriteLine("{0:X2}"' (byte)~crc);  			}
Magic Number,Microsoft.SPOT.Debugger,SRecordFile,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\SRecord.cs,Encode,The following statement contains a magic number: while(len > 0)  			{  				uint size = len > 16 ? 16 : len;  				byte crc = (byte)(size + 5);    				writer.Write("S3{0:X2}{1:X8}"' size + 5' address);    				crc += (byte)(address >> 0);  				crc += (byte)(address >> 8);  				crc += (byte)(address >> 16);  				crc += (byte)(address >> 24);    				for(uint i = 0; i < size; i++)  				{  					byte v = buf[offset++];    					writer.Write("{0:X2}"' v);    					crc += v;  				}    				address += size;  				len -= size;    				writer.WriteLine("{0:X2}"' (byte)~crc);  			}
Magic Number,Microsoft.SPOT.Debugger,SRecordFile,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\SRecord.cs,Encode,The following statement contains a magic number: while(len > 0)  			{  				uint size = len > 16 ? 16 : len;  				byte crc = (byte)(size + 5);    				writer.Write("S3{0:X2}{1:X8}"' size + 5' address);    				crc += (byte)(address >> 0);  				crc += (byte)(address >> 8);  				crc += (byte)(address >> 16);  				crc += (byte)(address >> 24);    				for(uint i = 0; i < size; i++)  				{  					byte v = buf[offset++];    					writer.Write("{0:X2}"' v);    					crc += v;  				}    				address += size;  				len -= size;    				writer.WriteLine("{0:X2}"' (byte)~crc);  			}
Magic Number,Microsoft.SPOT.Debugger,AsyncSerialStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Streams.cs,AsyncSerialStream,The following statement contains a magic number: dcb.ByteSize = 8;
Magic Number,Microsoft.SPOT.Debugger,AsyncSerialStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Streams.cs,EnumeratePorts,The following statement contains a magic number: try  			{  				RegistryKey key = Registry.LocalMachine.OpenSubKey(@"HARDWARE\DEVICEMAP\SERIALCOMM");    				foreach(string name in key.GetValueNames())  				{  					string val = (string)key.GetValue(name);  					PortDefinition pd = PortDefinition.CreateInstanceForSerial(val' @"\\.\" + val' 115200);    					lst.Add(val' pd);  				}  			}  			catch  			{  			}
Magic Number,Microsoft.SPOT.Debugger,SymDef,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\SymDef.cs,Parse,The following statement contains a magic number: using(System.IO.StreamReader reader = new StreamReader(file))  			{  				Regex reCode = new Regex("^0x([0-9a-fA-F]*) A (.*)");  				Regex reData = new Regex("^0x([0-9a-fA-F]*) D (.*)");  				string line;  				uint address;    				while((line = reader.ReadLine()) != null)  				{  					if(code != null && reCode.IsMatch(line))  					{  						GroupCollection group = reCode.Match(line).Groups;    						address = UInt32.Parse(group[1].Value' System.Globalization.NumberStyles.HexNumber);    						code[group[2].Value] = address;  					}    					if(data != null && reData.IsMatch(line))  					{  						GroupCollection group = reData.Match(line).Groups;    						address = UInt32.Parse(group[1].Value' System.Globalization.NumberStyles.HexNumber);    						data[group[2].Value] = address;  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,SymDef,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\SymDef.cs,Parse,The following statement contains a magic number: using(System.IO.StreamReader reader = new StreamReader(file))  			{  				Regex reCode = new Regex("^0x([0-9a-fA-F]*) A (.*)");  				Regex reData = new Regex("^0x([0-9a-fA-F]*) D (.*)");  				string line;  				uint address;    				while((line = reader.ReadLine()) != null)  				{  					if(code != null && reCode.IsMatch(line))  					{  						GroupCollection group = reCode.Match(line).Groups;    						address = UInt32.Parse(group[1].Value' System.Globalization.NumberStyles.HexNumber);    						code[group[2].Value] = address;  					}    					if(data != null && reData.IsMatch(line))  					{  						GroupCollection group = reData.Match(line).Groups;    						address = UInt32.Parse(group[1].Value' System.Globalization.NumberStyles.HexNumber);    						data[group[2].Value] = address;  					}  				}  			}
Magic Number,Microsoft.SPOT.Debugger,UsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\UsbStream.cs,RetrieveStringFromDevice,The following statement contains a magic number: fixed (byte* p = buffer)  			{  				if(!Native.DeviceIoControl(m_handle.DangerousGetHandle()' code' null' 0' p' buffer.Length' out read' null) || (read <= 0))  				{  					data = null;  				}  				else  				{  					if(read > (c_DeviceStringBufferSize - 2))  					{  						read = c_DeviceStringBufferSize - 2;  					}    					p[read] = 0;  					p[read + 1] = 0;    					data = new string((char*)p);  				}  			}
Magic Number,Microsoft.SPOT.Debugger,UsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\UsbStream.cs,RetrieveStringFromDevice,The following statement contains a magic number: fixed (byte* p = buffer)  			{  				if(!Native.DeviceIoControl(m_handle.DangerousGetHandle()' code' null' 0' p' buffer.Length' out read' null) || (read <= 0))  				{  					data = null;  				}  				else  				{  					if(read > (c_DeviceStringBufferSize - 2))  					{  						read = c_DeviceStringBufferSize - 2;  					}    					p[read] = 0;  					p[read + 1] = 0;    					data = new string((char*)p);  				}  			}
Magic Number,Microsoft.SPOT.Debugger,CRC,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Utility.cs,ComputeCRC,The following statement contains a magic number: while(length-- > 0)  			{  				crc = c_CRCTable[((crc >> 24) ^ (buf[offset++])) & 0xFF] ^ (crc << 8);  			}
Magic Number,Microsoft.SPOT.Debugger,CRC,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Utility.cs,ComputeCRC,The following statement contains a magic number: while(length-- > 0)  			{  				crc = c_CRCTable[((crc >> 24) ^ (buf[offset++])) & 0xFF] ^ (crc << 8);  			}
Magic Number,Microsoft.SPOT.Debugger,CRC,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Utility.cs,ComputeCRC,The following statement contains a magic number: return c_CRCTable[((crc >> 24) ^ (val)) & 0xff] ^ (crc << 8);
Magic Number,Microsoft.SPOT.Debugger,CRC,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Utility.cs,ComputeCRC,The following statement contains a magic number: return c_CRCTable[((crc >> 24) ^ (val)) & 0xff] ^ (crc << 8);
Magic Number,Microsoft.SPOT.Debugger,CommandLineBuilder,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Utility.cs,AddArgumentLoop,The following statement contains a magic number: foreach(object arg in args)  			{  				Array arr = arg as Array;    				if(arr == null)  				{  					argsT = new object[2];  					argsT[1] = arg;  				}  				else  				{  					argsT = new object[arr.Length + 1];  					arr.CopyTo(argsT' 1);  				}    				argsT[0] = command;  				AddArguments(argsT);  			}
Magic Number,Microsoft.SPOT.Debugger,CommandLineBuilder,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Utility.cs,ToString,The following statement contains a magic number: StringBuilder sb = new StringBuilder(m_args.Count * 32);
Magic Number,Microsoft.SPOT.Debugger,RuntimeValue,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Values.cs,Assign,The following statement contains a magic number: return m_eng.AssignRuntimeValue(referenceIdDirect - 4' this.ReferenceIdDirect - 4);
Magic Number,Microsoft.SPOT.Debugger,RuntimeValue,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Values.cs,Assign,The following statement contains a magic number: return m_eng.AssignRuntimeValue(referenceIdDirect - 4' this.ReferenceIdDirect - 4);
Magic Number,Microsoft.SPOT.Debugger,RuntimeValue,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Values.cs,Assign,The following statement contains a magic number: if(this.IsReflection || (val != null && val.IsReflection))  			{  				byte[] data = new byte[8];  				uint dt = (uint)RuntimeDataType.DATATYPE_OBJECT;    				if(val != null)  				{  					dt = val.m_handle.m_dt;  					Array.Copy(val.m_handle.m_builtinValue' data' data.Length);  				}    				if(SetBlock(dt' data))  				{  					retval = this;  				}               			}  			else if(this.IsPrimitive)  			{  				if(val == null || val.IsPrimitive == false)  				{  					throw new InvalidCastException("The two runtime values are incompatible");  				}    				this.Value = val.Value;    				retval = this;  			}  			else  			{  				if(val != null && val.IsPrimitive == true)  				{  					throw new InvalidCastException("The two runtime values are incompatible");  				}    				retval = Assign(val != null ? val.ReferenceIdDirect : 0);  			}
Magic Number,Microsoft.SPOT.Debugger,WinUsb_AsyncUsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WinUsbStream.cs,EnumeratePorts,The following statement contains a magic number: System.Version win8_version = new System.Version(6' 2);
Magic Number,Microsoft.SPOT.Debugger,WinUsb_AsyncUsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WinUsbStream.cs,EnumeratePorts,The following statement contains a magic number: System.Version win8_version = new System.Version(6' 2);
Magic Number,Microsoft.SPOT.Debugger,WinUsb_AsyncUsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WinUsbStream.cs,EnumeratePorts,The following statement contains a magic number: try  			{  				Native.SP_DEVICE_INTERFACE_DATA interfaceData = new Native.SP_DEVICE_INTERFACE_DATA();  				interfaceData.cbSize = Marshal.SizeOf(interfaceData);    				int index = 0;    				while(Native.SetupDiEnumDeviceInterfaces(devInfo' 0' ref guid' index++' ref interfaceData))  				{  					try  					{  						Native.SP_DEVICE_INTERFACE_DETAIL_DATA detail = new Native.SP_DEVICE_INTERFACE_DETAIL_DATA();  						// explicit size of unmanaged structure must be provided' because it does not include transfer buffer  						// for whatever reason on 64 bit machines the detail size is 8 rather than 5' likewise the interfaceData.cbSize  						// is 32 rather than 28 for non 64bit machines' therefore' we make the detemination of the size based   						// on the interfaceData.cbSize (kind of hacky but it works).  						if(interfaceData.cbSize == 32)  						{  							detail.cbSize = 8;  						}  						else  						{  							detail.cbSize = 5;  						}      						if(Native.SetupDiGetDeviceInterfaceDetail(devInfo' ref interfaceData' ref detail' Marshal.SizeOf(detail) * 2' 0' 0))  						{  							string port = detail.DevicePath.ToLower();    							using(WinUsb_AsyncUsbStream s = new WinUsb_AsyncUsbStream(port))  							{  								//const ushort SERIAL_NUMBER_INDEX = 0;  								//const ushort MANUFACTURER_NAME_INDEX = 1;  								//const ushort PRODUCT_NAME_INDEX = 2;  								//const ushort USB_DISPLAY_STRING_INDEX = 4;  								//const ushort USB_FRIENDLY_STRING_INDEX = 5;    								string displayName = s.RetrieveStringFromDevice(USB_DISPLAY_STRING_INDEX);    								string hash = s.RetrieveStringFromDevice(USB_FRIENDLY_STRING_INDEX);  								//string operationalPort = s.RetrieveStringFromDevice(IOCTL_WINUSB_PORT_NAME' dmp);    								//if ((operationalPort == null) || (displayName == null) || (hash == null))  								if((displayName == null) || (hash == null))  								{  									return;  								}    								// change the display name if there is a collision (otherwise you will only be able to use one of the devices)  								displayName += "_" + hash;  								if(lst.ContainsKey(displayName))  								{  									int i = 2;  									while(lst.ContainsKey(displayName + " (" + i + ")"))  									{  										i++;  									}  									displayName += " (" + i + ")";  								}    								PortDefinition pd = PortDefinition.CreateInstanceForWinUsb(displayName' port);    								if(!pd.Properties.Contains(DeviceHash))  									pd.Properties.Add(DeviceHash' hash);    								lst.Add(pd.DisplayName' pd);  							}  						}  					}  					catch  					{  						// go to next device  					}  				}  			}  			finally  			{  				Native.SetupDiDestroyDeviceInfoList(devInfo);  			}
Magic Number,Microsoft.SPOT.Debugger,WinUsb_AsyncUsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WinUsbStream.cs,EnumeratePorts,The following statement contains a magic number: try  			{  				Native.SP_DEVICE_INTERFACE_DATA interfaceData = new Native.SP_DEVICE_INTERFACE_DATA();  				interfaceData.cbSize = Marshal.SizeOf(interfaceData);    				int index = 0;    				while(Native.SetupDiEnumDeviceInterfaces(devInfo' 0' ref guid' index++' ref interfaceData))  				{  					try  					{  						Native.SP_DEVICE_INTERFACE_DETAIL_DATA detail = new Native.SP_DEVICE_INTERFACE_DETAIL_DATA();  						// explicit size of unmanaged structure must be provided' because it does not include transfer buffer  						// for whatever reason on 64 bit machines the detail size is 8 rather than 5' likewise the interfaceData.cbSize  						// is 32 rather than 28 for non 64bit machines' therefore' we make the detemination of the size based   						// on the interfaceData.cbSize (kind of hacky but it works).  						if(interfaceData.cbSize == 32)  						{  							detail.cbSize = 8;  						}  						else  						{  							detail.cbSize = 5;  						}      						if(Native.SetupDiGetDeviceInterfaceDetail(devInfo' ref interfaceData' ref detail' Marshal.SizeOf(detail) * 2' 0' 0))  						{  							string port = detail.DevicePath.ToLower();    							using(WinUsb_AsyncUsbStream s = new WinUsb_AsyncUsbStream(port))  							{  								//const ushort SERIAL_NUMBER_INDEX = 0;  								//const ushort MANUFACTURER_NAME_INDEX = 1;  								//const ushort PRODUCT_NAME_INDEX = 2;  								//const ushort USB_DISPLAY_STRING_INDEX = 4;  								//const ushort USB_FRIENDLY_STRING_INDEX = 5;    								string displayName = s.RetrieveStringFromDevice(USB_DISPLAY_STRING_INDEX);    								string hash = s.RetrieveStringFromDevice(USB_FRIENDLY_STRING_INDEX);  								//string operationalPort = s.RetrieveStringFromDevice(IOCTL_WINUSB_PORT_NAME' dmp);    								//if ((operationalPort == null) || (displayName == null) || (hash == null))  								if((displayName == null) || (hash == null))  								{  									return;  								}    								// change the display name if there is a collision (otherwise you will only be able to use one of the devices)  								displayName += "_" + hash;  								if(lst.ContainsKey(displayName))  								{  									int i = 2;  									while(lst.ContainsKey(displayName + " (" + i + ")"))  									{  										i++;  									}  									displayName += " (" + i + ")";  								}    								PortDefinition pd = PortDefinition.CreateInstanceForWinUsb(displayName' port);    								if(!pd.Properties.Contains(DeviceHash))  									pd.Properties.Add(DeviceHash' hash);    								lst.Add(pd.DisplayName' pd);  							}  						}  					}  					catch  					{  						// go to next device  					}  				}  			}  			finally  			{  				Native.SetupDiDestroyDeviceInfoList(devInfo);  			}
Magic Number,Microsoft.SPOT.Debugger,WinUsb_AsyncUsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WinUsbStream.cs,EnumeratePorts,The following statement contains a magic number: try  			{  				Native.SP_DEVICE_INTERFACE_DATA interfaceData = new Native.SP_DEVICE_INTERFACE_DATA();  				interfaceData.cbSize = Marshal.SizeOf(interfaceData);    				int index = 0;    				while(Native.SetupDiEnumDeviceInterfaces(devInfo' 0' ref guid' index++' ref interfaceData))  				{  					try  					{  						Native.SP_DEVICE_INTERFACE_DETAIL_DATA detail = new Native.SP_DEVICE_INTERFACE_DETAIL_DATA();  						// explicit size of unmanaged structure must be provided' because it does not include transfer buffer  						// for whatever reason on 64 bit machines the detail size is 8 rather than 5' likewise the interfaceData.cbSize  						// is 32 rather than 28 for non 64bit machines' therefore' we make the detemination of the size based   						// on the interfaceData.cbSize (kind of hacky but it works).  						if(interfaceData.cbSize == 32)  						{  							detail.cbSize = 8;  						}  						else  						{  							detail.cbSize = 5;  						}      						if(Native.SetupDiGetDeviceInterfaceDetail(devInfo' ref interfaceData' ref detail' Marshal.SizeOf(detail) * 2' 0' 0))  						{  							string port = detail.DevicePath.ToLower();    							using(WinUsb_AsyncUsbStream s = new WinUsb_AsyncUsbStream(port))  							{  								//const ushort SERIAL_NUMBER_INDEX = 0;  								//const ushort MANUFACTURER_NAME_INDEX = 1;  								//const ushort PRODUCT_NAME_INDEX = 2;  								//const ushort USB_DISPLAY_STRING_INDEX = 4;  								//const ushort USB_FRIENDLY_STRING_INDEX = 5;    								string displayName = s.RetrieveStringFromDevice(USB_DISPLAY_STRING_INDEX);    								string hash = s.RetrieveStringFromDevice(USB_FRIENDLY_STRING_INDEX);  								//string operationalPort = s.RetrieveStringFromDevice(IOCTL_WINUSB_PORT_NAME' dmp);    								//if ((operationalPort == null) || (displayName == null) || (hash == null))  								if((displayName == null) || (hash == null))  								{  									return;  								}    								// change the display name if there is a collision (otherwise you will only be able to use one of the devices)  								displayName += "_" + hash;  								if(lst.ContainsKey(displayName))  								{  									int i = 2;  									while(lst.ContainsKey(displayName + " (" + i + ")"))  									{  										i++;  									}  									displayName += " (" + i + ")";  								}    								PortDefinition pd = PortDefinition.CreateInstanceForWinUsb(displayName' port);    								if(!pd.Properties.Contains(DeviceHash))  									pd.Properties.Add(DeviceHash' hash);    								lst.Add(pd.DisplayName' pd);  							}  						}  					}  					catch  					{  						// go to next device  					}  				}  			}  			finally  			{  				Native.SetupDiDestroyDeviceInfoList(devInfo);  			}
Magic Number,Microsoft.SPOT.Debugger,WinUsb_AsyncUsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WinUsbStream.cs,EnumeratePorts,The following statement contains a magic number: try  			{  				Native.SP_DEVICE_INTERFACE_DATA interfaceData = new Native.SP_DEVICE_INTERFACE_DATA();  				interfaceData.cbSize = Marshal.SizeOf(interfaceData);    				int index = 0;    				while(Native.SetupDiEnumDeviceInterfaces(devInfo' 0' ref guid' index++' ref interfaceData))  				{  					try  					{  						Native.SP_DEVICE_INTERFACE_DETAIL_DATA detail = new Native.SP_DEVICE_INTERFACE_DETAIL_DATA();  						// explicit size of unmanaged structure must be provided' because it does not include transfer buffer  						// for whatever reason on 64 bit machines the detail size is 8 rather than 5' likewise the interfaceData.cbSize  						// is 32 rather than 28 for non 64bit machines' therefore' we make the detemination of the size based   						// on the interfaceData.cbSize (kind of hacky but it works).  						if(interfaceData.cbSize == 32)  						{  							detail.cbSize = 8;  						}  						else  						{  							detail.cbSize = 5;  						}      						if(Native.SetupDiGetDeviceInterfaceDetail(devInfo' ref interfaceData' ref detail' Marshal.SizeOf(detail) * 2' 0' 0))  						{  							string port = detail.DevicePath.ToLower();    							using(WinUsb_AsyncUsbStream s = new WinUsb_AsyncUsbStream(port))  							{  								//const ushort SERIAL_NUMBER_INDEX = 0;  								//const ushort MANUFACTURER_NAME_INDEX = 1;  								//const ushort PRODUCT_NAME_INDEX = 2;  								//const ushort USB_DISPLAY_STRING_INDEX = 4;  								//const ushort USB_FRIENDLY_STRING_INDEX = 5;    								string displayName = s.RetrieveStringFromDevice(USB_DISPLAY_STRING_INDEX);    								string hash = s.RetrieveStringFromDevice(USB_FRIENDLY_STRING_INDEX);  								//string operationalPort = s.RetrieveStringFromDevice(IOCTL_WINUSB_PORT_NAME' dmp);    								//if ((operationalPort == null) || (displayName == null) || (hash == null))  								if((displayName == null) || (hash == null))  								{  									return;  								}    								// change the display name if there is a collision (otherwise you will only be able to use one of the devices)  								displayName += "_" + hash;  								if(lst.ContainsKey(displayName))  								{  									int i = 2;  									while(lst.ContainsKey(displayName + " (" + i + ")"))  									{  										i++;  									}  									displayName += " (" + i + ")";  								}    								PortDefinition pd = PortDefinition.CreateInstanceForWinUsb(displayName' port);    								if(!pd.Properties.Contains(DeviceHash))  									pd.Properties.Add(DeviceHash' hash);    								lst.Add(pd.DisplayName' pd);  							}  						}  					}  					catch  					{  						// go to next device  					}  				}  			}  			finally  			{  				Native.SetupDiDestroyDeviceInfoList(devInfo);  			}
Magic Number,Microsoft.SPOT.Debugger,WinUsb_AsyncUsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WinUsbStream.cs,EnumeratePorts,The following statement contains a magic number: try  			{  				Native.SP_DEVICE_INTERFACE_DATA interfaceData = new Native.SP_DEVICE_INTERFACE_DATA();  				interfaceData.cbSize = Marshal.SizeOf(interfaceData);    				int index = 0;    				while(Native.SetupDiEnumDeviceInterfaces(devInfo' 0' ref guid' index++' ref interfaceData))  				{  					try  					{  						Native.SP_DEVICE_INTERFACE_DETAIL_DATA detail = new Native.SP_DEVICE_INTERFACE_DETAIL_DATA();  						// explicit size of unmanaged structure must be provided' because it does not include transfer buffer  						// for whatever reason on 64 bit machines the detail size is 8 rather than 5' likewise the interfaceData.cbSize  						// is 32 rather than 28 for non 64bit machines' therefore' we make the detemination of the size based   						// on the interfaceData.cbSize (kind of hacky but it works).  						if(interfaceData.cbSize == 32)  						{  							detail.cbSize = 8;  						}  						else  						{  							detail.cbSize = 5;  						}      						if(Native.SetupDiGetDeviceInterfaceDetail(devInfo' ref interfaceData' ref detail' Marshal.SizeOf(detail) * 2' 0' 0))  						{  							string port = detail.DevicePath.ToLower();    							using(WinUsb_AsyncUsbStream s = new WinUsb_AsyncUsbStream(port))  							{  								//const ushort SERIAL_NUMBER_INDEX = 0;  								//const ushort MANUFACTURER_NAME_INDEX = 1;  								//const ushort PRODUCT_NAME_INDEX = 2;  								//const ushort USB_DISPLAY_STRING_INDEX = 4;  								//const ushort USB_FRIENDLY_STRING_INDEX = 5;    								string displayName = s.RetrieveStringFromDevice(USB_DISPLAY_STRING_INDEX);    								string hash = s.RetrieveStringFromDevice(USB_FRIENDLY_STRING_INDEX);  								//string operationalPort = s.RetrieveStringFromDevice(IOCTL_WINUSB_PORT_NAME' dmp);    								//if ((operationalPort == null) || (displayName == null) || (hash == null))  								if((displayName == null) || (hash == null))  								{  									return;  								}    								// change the display name if there is a collision (otherwise you will only be able to use one of the devices)  								displayName += "_" + hash;  								if(lst.ContainsKey(displayName))  								{  									int i = 2;  									while(lst.ContainsKey(displayName + " (" + i + ")"))  									{  										i++;  									}  									displayName += " (" + i + ")";  								}    								PortDefinition pd = PortDefinition.CreateInstanceForWinUsb(displayName' port);    								if(!pd.Properties.Contains(DeviceHash))  									pd.Properties.Add(DeviceHash' hash);    								lst.Add(pd.DisplayName' pd);  							}  						}  					}  					catch  					{  						// go to next device  					}  				}  			}  			finally  			{  				Native.SetupDiDestroyDeviceInfoList(devInfo);  			}
Magic Number,Microsoft.SPOT.Debugger,WinUsb_AsyncUsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WinUsbStream.cs,RetrieveStringFromDevice,The following statement contains a magic number: fixed (byte* p = buffer)  			{  				ushort wValue = (ushort)((ushort)((USB_STRING_DESCRIPTOR_TYPE << 8) & 0xFF00) | (ushort)(index & 0x00FF));  				int read = m_winUsbDevice.Do_Control_Read_Transfer(ref buffer' USB_GET_DESCRIPTOR' wValue);  				if(read != -1)  				{  					// null terminate the string  					if(read > (c_DeviceStringBufferSize - 2))  					{  						read = c_DeviceStringBufferSize - 2;  					}    					p[read] = 0;  					p[read + 1] = 0;    					// skip first two characters  					payload = p + 2;  				}  			}
Magic Number,Microsoft.SPOT.Debugger,WinUsb_AsyncUsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WinUsbStream.cs,RetrieveStringFromDevice,The following statement contains a magic number: fixed (byte* p = buffer)  			{  				ushort wValue = (ushort)((ushort)((USB_STRING_DESCRIPTOR_TYPE << 8) & 0xFF00) | (ushort)(index & 0x00FF));  				int read = m_winUsbDevice.Do_Control_Read_Transfer(ref buffer' USB_GET_DESCRIPTOR' wValue);  				if(read != -1)  				{  					// null terminate the string  					if(read > (c_DeviceStringBufferSize - 2))  					{  						read = c_DeviceStringBufferSize - 2;  					}    					p[read] = 0;  					p[read + 1] = 0;    					// skip first two characters  					payload = p + 2;  				}  			}
Magic Number,Microsoft.SPOT.Debugger,WinUsb_AsyncUsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WinUsbStream.cs,RetrieveStringFromDevice,The following statement contains a magic number: fixed (byte* p = buffer)  			{  				ushort wValue = (ushort)((ushort)((USB_STRING_DESCRIPTOR_TYPE << 8) & 0xFF00) | (ushort)(index & 0x00FF));  				int read = m_winUsbDevice.Do_Control_Read_Transfer(ref buffer' USB_GET_DESCRIPTOR' wValue);  				if(read != -1)  				{  					// null terminate the string  					if(read > (c_DeviceStringBufferSize - 2))  					{  						read = c_DeviceStringBufferSize - 2;  					}    					p[read] = 0;  					p[read + 1] = 0;    					// skip first two characters  					payload = p + 2;  				}  			}
Magic Number,Microsoft.SPOT.Debugger,WinUsb_AsyncUsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WinUsbStream.cs,RetrieveStringFromDevice,The following statement contains a magic number: fixed (byte* p = buffer)  			{  				ushort wValue = (ushort)((ushort)((USB_STRING_DESCRIPTOR_TYPE << 8) & 0xFF00) | (ushort)(index & 0x00FF));  				int read = m_winUsbDevice.Do_Control_Read_Transfer(ref buffer' USB_GET_DESCRIPTOR' wValue);  				if(read != -1)  				{  					// null terminate the string  					if(read > (c_DeviceStringBufferSize - 2))  					{  						read = c_DeviceStringBufferSize - 2;  					}    					p[read] = 0;  					p[read + 1] = 0;    					// skip first two characters  					payload = p + 2;  				}  			}
Magic Number,Microsoft.SPOT.Debugger,LibUsb_AsyncUsbStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\LibUsbStream.cs,Write,The following statement contains a magic number: var error = writer.Write (buffer' 2000' out written);
Magic Number,Microsoft.SPOT.Messaging,BitStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,BitStream,The following statement contains a magic number: AppendChunk(data' pos' len * 8);
Magic Number,Microsoft.SPOT.Messaging,BitStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,AppendChunk,The following statement contains a magic number: lock(m_lock)  			{  				if(bitlen > 0)  				{  					int len = bitlen / 8;  					int bitsInLast = bitlen % 8;  					if(bitsInLast == 0)  					{  						bitsInLast = 8;  					}  					else  					{  						len++;  					}    					Buffer next = new Buffer(data' pos' len' bitsInLast);    					if(m_last == null)  					{  						m_first = m_last = m_current = next;  						Rewind();  					}  					else  					{  						m_last.m_next = next;  						m_last = next;  					}  					Monitor.Pulse(m_lock);  				}  			}
Magic Number,Microsoft.SPOT.Messaging,BitStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,AppendChunk,The following statement contains a magic number: lock(m_lock)  			{  				if(bitlen > 0)  				{  					int len = bitlen / 8;  					int bitsInLast = bitlen % 8;  					if(bitsInLast == 0)  					{  						bitsInLast = 8;  					}  					else  					{  						len++;  					}    					Buffer next = new Buffer(data' pos' len' bitsInLast);    					if(m_last == null)  					{  						m_first = m_last = m_current = next;  						Rewind();  					}  					else  					{  						m_last.m_next = next;  						m_last = next;  					}  					Monitor.Pulse(m_lock);  				}  			}
Magic Number,Microsoft.SPOT.Messaging,BitStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,AppendChunk,The following statement contains a magic number: lock(m_lock)  			{  				if(bitlen > 0)  				{  					int len = bitlen / 8;  					int bitsInLast = bitlen % 8;  					if(bitsInLast == 0)  					{  						bitsInLast = 8;  					}  					else  					{  						len++;  					}    					Buffer next = new Buffer(data' pos' len' bitsInLast);    					if(m_last == null)  					{  						m_first = m_last = m_current = next;  						Rewind();  					}  					else  					{  						m_last.m_next = next;  						m_last = next;  					}  					Monitor.Pulse(m_lock);  				}  			}
Magic Number,Microsoft.SPOT.Messaging,BitStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ToArray,The following statement contains a magic number: lock(m_lock)  			{  				for(int pass = 0; pass < 2; pass++)  				{  					int tot = 0;  					Buffer ptr = m_first;    					while(ptr != null)  					{  						if(pass == 1)  							Array.Copy(ptr.m_data' 0' res' tot' ptr.m_length);    						tot += ptr.m_length;  						ptr = ptr.m_next;  					}    					if(pass == 0)  					{  						res = new byte[tot];  					}  				}  			}
Magic Number,Microsoft.SPOT.Messaging,BitStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,WriteBits,The following statement contains a magic number: if(bits > 32)  				throw new ArgumentException("Max number of bits per write is 32");
Magic Number,Microsoft.SPOT.Messaging,BitStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,WriteBits,The following statement contains a magic number: BinaryFormatter.WriteLine("OUTPUT: {0:X8} {1}"' val & (0xFFFFFFFF >> (32 - bits))' bits);
Magic Number,Microsoft.SPOT.Messaging,BitStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,WriteBits,The following statement contains a magic number: lock(m_lock)  			{  				while(bits > 0)  				{  					while(m_avail == 0)  					{  						m_pos++;  						m_avail = 8;    						if(m_pos >= m_current.m_data.Length)  						{  							m_current.m_avail = 8;  //WriteBits will always try to fill the last bits of a buffer.  							m_current.m_next = new Buffer();    							m_current = m_current.m_next;  							m_pos = 0;  						}    						if(m_pos >= m_current.m_length)  						{  							m_current.m_length = m_pos + 1;  						}  					}    					int insert = System.Math.Min(bits' m_avail);  					uint mask = ((1U << insert) - 1U);    					pos -= insert;  					m_current.m_data[m_pos] |= (byte)(((val >> pos) & mask) << (m_avail - insert));  					bits -= insert;  					m_avail -= insert;  				}    				if(m_pos == m_current.m_length - 1)  				{  					m_current.m_avail = 8 - m_avail;  				}    				Monitor.Pulse(m_lock);  			}
Magic Number,Microsoft.SPOT.Messaging,BitStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,WriteBits,The following statement contains a magic number: lock(m_lock)  			{  				while(bits > 0)  				{  					while(m_avail == 0)  					{  						m_pos++;  						m_avail = 8;    						if(m_pos >= m_current.m_data.Length)  						{  							m_current.m_avail = 8;  //WriteBits will always try to fill the last bits of a buffer.  							m_current.m_next = new Buffer();    							m_current = m_current.m_next;  							m_pos = 0;  						}    						if(m_pos >= m_current.m_length)  						{  							m_current.m_length = m_pos + 1;  						}  					}    					int insert = System.Math.Min(bits' m_avail);  					uint mask = ((1U << insert) - 1U);    					pos -= insert;  					m_current.m_data[m_pos] |= (byte)(((val >> pos) & mask) << (m_avail - insert));  					bits -= insert;  					m_avail -= insert;  				}    				if(m_pos == m_current.m_length - 1)  				{  					m_current.m_avail = 8 - m_avail;  				}    				Monitor.Pulse(m_lock);  			}
Magic Number,Microsoft.SPOT.Messaging,BitStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,WriteBits,The following statement contains a magic number: lock(m_lock)  			{  				while(bits > 0)  				{  					while(m_avail == 0)  					{  						m_pos++;  						m_avail = 8;    						if(m_pos >= m_current.m_data.Length)  						{  							m_current.m_avail = 8;  //WriteBits will always try to fill the last bits of a buffer.  							m_current.m_next = new Buffer();    							m_current = m_current.m_next;  							m_pos = 0;  						}    						if(m_pos >= m_current.m_length)  						{  							m_current.m_length = m_pos + 1;  						}  					}    					int insert = System.Math.Min(bits' m_avail);  					uint mask = ((1U << insert) - 1U);    					pos -= insert;  					m_current.m_data[m_pos] |= (byte)(((val >> pos) & mask) << (m_avail - insert));  					bits -= insert;  					m_avail -= insert;  				}    				if(m_pos == m_current.m_length - 1)  				{  					m_current.m_avail = 8 - m_avail;  				}    				Monitor.Pulse(m_lock);  			}
Magic Number,Microsoft.SPOT.Messaging,BitStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadBits,The following statement contains a magic number: if(bits > 32)  				throw new ArgumentException("Max number of bits per read is 32");
Magic Number,Microsoft.SPOT.Messaging,BitStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadBits,The following statement contains a magic number: lock(m_lock)  			{  				while(bits > 0)  				{  					while(m_avail == 0)  					{  						m_pos++;    						while(m_pos >= m_current.m_length)  						{  							if(m_current.m_next == null)  							{  								if(m_blockingRead && !m_streamEnded)   //Don't wait if stream has ended.  								{  									Monitor.Wait(m_lock);  								}  								else  								{  									throw new EndOfStreamException();  								}  							}  							else  							{  								m_current = m_current.m_next;  								m_pos = 0;  							}  						}    						if(m_pos < m_current.m_length - 1)  						{  							m_avail = 8;  						}  						else  						{  							m_avail = m_current.m_avail;  						}  					}    					int insert = System.Math.Min(bits' m_avail);  					uint mask = ((1U << insert) - 1U);  					int shift = m_avail - insert;    					if(m_pos == m_current.m_length - 1)  					{  						shift += 8 - m_current.m_avail;  					}    					pos -= insert;  					val |= (((uint)m_current.m_data[m_pos] >> shift) & mask) << pos;  					bits -= insert;  					m_avail -= insert;  				}  			}
Magic Number,Microsoft.SPOT.Messaging,BitStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadBits,The following statement contains a magic number: lock(m_lock)  			{  				while(bits > 0)  				{  					while(m_avail == 0)  					{  						m_pos++;    						while(m_pos >= m_current.m_length)  						{  							if(m_current.m_next == null)  							{  								if(m_blockingRead && !m_streamEnded)   //Don't wait if stream has ended.  								{  									Monitor.Wait(m_lock);  								}  								else  								{  									throw new EndOfStreamException();  								}  							}  							else  							{  								m_current = m_current.m_next;  								m_pos = 0;  							}  						}    						if(m_pos < m_current.m_length - 1)  						{  							m_avail = 8;  						}  						else  						{  							m_avail = m_current.m_avail;  						}  					}    					int insert = System.Math.Min(bits' m_avail);  					uint mask = ((1U << insert) - 1U);  					int shift = m_avail - insert;    					if(m_pos == m_current.m_length - 1)  					{  						shift += 8 - m_current.m_avail;  					}    					pos -= insert;  					val |= (((uint)m_current.m_data[m_pos] >> shift) & mask) << pos;  					bits -= insert;  					m_avail -= insert;  				}  			}
Magic Number,Microsoft.SPOT.Messaging,BitStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,WriteArray,The following statement contains a magic number: lock(m_lock)  			{  				while(len-- > 0)  				{  					WriteBits((uint)data[pos++]' 8);  				}  			}
Magic Number,Microsoft.SPOT.Messaging,BitStream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadArray,The following statement contains a magic number: lock(m_lock)  			{  				while(len-- > 0)  				{  					data[pos++] = (byte)ReadBits(8);  				}  			}
Magic Number,Microsoft.SPOT.Messaging,Buffer,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,Buffer,The following statement contains a magic number: if(bitsInLastPos < 1 || bitsInLastPos > 8)  				{  					throw new ArgumentException("bits");  				}
Magic Number,Microsoft.SPOT.Messaging,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ComputeHashForUShort,The following statement contains a magic number: hash = CRC.ComputeCRC((byte)(val >> 8)' hash);
Magic Number,Microsoft.SPOT.Messaging,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,WriteBitsLong,The following statement contains a magic number: int extra = bits - 32;
Magic Number,Microsoft.SPOT.Messaging,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,WriteBitsLong,The following statement contains a magic number: if(extra > 0)  			{  				m_stream.WriteBits((uint)(val >> 32)' extra);    				bits = 32;  			}
Magic Number,Microsoft.SPOT.Messaging,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,WriteBitsLong,The following statement contains a magic number: if(extra > 0)  			{  				m_stream.WriteBits((uint)(val >> 32)' extra);    				bits = 32;  			}
Magic Number,Microsoft.SPOT.Messaging,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadBitsLong,The following statement contains a magic number: int extra = bits - 32;
Magic Number,Microsoft.SPOT.Messaging,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadBitsLong,The following statement contains a magic number: if(extra > 0)  			{  				val = (ulong)m_stream.ReadBits(extra) << 32;  				bits = 32;  			}  			else  			{  				val = 0;  			}
Magic Number,Microsoft.SPOT.Messaging,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadBitsLong,The following statement contains a magic number: if(extra > 0)  			{  				val = (ulong)m_stream.ReadBits(extra) << 32;  				bits = 32;  			}  			else  			{  				val = 0;  			}
Magic Number,Microsoft.SPOT.Messaging,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,WriteCompressedUnsigned,The following statement contains a magic number: if(val == 0xFFFFFFFF)  			{  				m_stream.WriteBits(0xFF' 8);  			}  			else if(val < 0x80)  			{  				m_stream.WriteBits(val' 8);  			}  			else  			{  				if(val < 0x3F00)  				{  					m_stream.WriteBits(0x8000 | val' 16);  				}  				else if(val < 0x3F000000)  				{  					m_stream.WriteBits(0xC0000000 | val' 32);  				}  				else  				{  					throw new ArgumentException("Max value is 0x3F000000");  				}  			}
Magic Number,Microsoft.SPOT.Messaging,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,WriteCompressedUnsigned,The following statement contains a magic number: if(val == 0xFFFFFFFF)  			{  				m_stream.WriteBits(0xFF' 8);  			}  			else if(val < 0x80)  			{  				m_stream.WriteBits(val' 8);  			}  			else  			{  				if(val < 0x3F00)  				{  					m_stream.WriteBits(0x8000 | val' 16);  				}  				else if(val < 0x3F000000)  				{  					m_stream.WriteBits(0xC0000000 | val' 32);  				}  				else  				{  					throw new ArgumentException("Max value is 0x3F000000");  				}  			}
Magic Number,Microsoft.SPOT.Messaging,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,WriteCompressedUnsigned,The following statement contains a magic number: if(val == 0xFFFFFFFF)  			{  				m_stream.WriteBits(0xFF' 8);  			}  			else if(val < 0x80)  			{  				m_stream.WriteBits(val' 8);  			}  			else  			{  				if(val < 0x3F00)  				{  					m_stream.WriteBits(0x8000 | val' 16);  				}  				else if(val < 0x3F000000)  				{  					m_stream.WriteBits(0xC0000000 | val' 32);  				}  				else  				{  					throw new ArgumentException("Max value is 0x3F000000");  				}  			}
Magic Number,Microsoft.SPOT.Messaging,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,WriteCompressedUnsigned,The following statement contains a magic number: if(val == 0xFFFFFFFF)  			{  				m_stream.WriteBits(0xFF' 8);  			}  			else if(val < 0x80)  			{  				m_stream.WriteBits(val' 8);  			}  			else  			{  				if(val < 0x3F00)  				{  					m_stream.WriteBits(0x8000 | val' 16);  				}  				else if(val < 0x3F000000)  				{  					m_stream.WriteBits(0xC0000000 | val' 32);  				}  				else  				{  					throw new ArgumentException("Max value is 0x3F000000");  				}  			}
Magic Number,Microsoft.SPOT.Messaging,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadCompressedUnsigned,The following statement contains a magic number: uint val = m_stream.ReadBits(8);
Magic Number,Microsoft.SPOT.Messaging,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadCompressedUnsigned,The following statement contains a magic number: switch(val & 0xC0)  			{  				case 0x00:  					break;  				case 0x40:  					break;  				case 0x80:  					val = ((val & ~0xC0U) << 8) | m_stream.ReadBits(8);  					break;  				case 0xC0:  					val = ((val & ~0xC0U) << 24) | m_stream.ReadBits(24);  					break;  			}
Magic Number,Microsoft.SPOT.Messaging,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadCompressedUnsigned,The following statement contains a magic number: switch(val & 0xC0)  			{  				case 0x00:  					break;  				case 0x40:  					break;  				case 0x80:  					val = ((val & ~0xC0U) << 8) | m_stream.ReadBits(8);  					break;  				case 0xC0:  					val = ((val & ~0xC0U) << 24) | m_stream.ReadBits(24);  					break;  			}
Magic Number,Microsoft.SPOT.Messaging,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadCompressedUnsigned,The following statement contains a magic number: switch(val & 0xC0)  			{  				case 0x00:  					break;  				case 0x40:  					break;  				case 0x80:  					val = ((val & ~0xC0U) << 8) | m_stream.ReadBits(8);  					break;  				case 0xC0:  					val = ((val & ~0xC0U) << 24) | m_stream.ReadBits(24);  					break;  			}
Magic Number,Microsoft.SPOT.Messaging,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadCompressedUnsigned,The following statement contains a magic number: switch(val & 0xC0)  			{  				case 0x00:  					break;  				case 0x40:  					break;  				case 0x80:  					val = ((val & ~0xC0U) << 8) | m_stream.ReadBits(8);  					break;  				case 0xC0:  					val = ((val & ~0xC0U) << 24) | m_stream.ReadBits(24);  					break;  			}
Magic Number,Microsoft.SPOT.Messaging,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,WriteType,The following statement contains a magic number: m_stream.WriteBits(LookupHash(t)' 32);
Magic Number,Microsoft.SPOT.Messaging,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadType,The following statement contains a magic number: uint hash = m_stream.ReadBits(32);
Magic Number,Microsoft.SPOT.Messaging,TypeDescriptorBasic,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,NumberOfBits,The following statement contains a magic number: switch(et)  				{  					case ElementType.PELEMENT_TYPE_BOOLEAN:  						return 1;  					case ElementType.PELEMENT_TYPE_CHAR:  						return 16;  					case ElementType.PELEMENT_TYPE_I1:  						return 8;  					case ElementType.PELEMENT_TYPE_U1:  						return 8;  					case ElementType.PELEMENT_TYPE_I2:  						return 16;  					case ElementType.PELEMENT_TYPE_U2:  						return 16;  					case ElementType.PELEMENT_TYPE_I4:  						return 32;  					case ElementType.PELEMENT_TYPE_U4:  						return 32;  					case ElementType.PELEMENT_TYPE_I8:  						return 64;  					case ElementType.PELEMENT_TYPE_U8:  						return 64;  					case ElementType.PELEMENT_TYPE_R4:  						return 32;  					case ElementType.PELEMENT_TYPE_R8:  						return 64;  					case ElementType.PELEMENT_TYPE_STRING:  						return -1;  					default:  						return -2;  				}
Magic Number,Microsoft.SPOT.Messaging,TypeDescriptorBasic,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,NumberOfBits,The following statement contains a magic number: switch(et)  				{  					case ElementType.PELEMENT_TYPE_BOOLEAN:  						return 1;  					case ElementType.PELEMENT_TYPE_CHAR:  						return 16;  					case ElementType.PELEMENT_TYPE_I1:  						return 8;  					case ElementType.PELEMENT_TYPE_U1:  						return 8;  					case ElementType.PELEMENT_TYPE_I2:  						return 16;  					case ElementType.PELEMENT_TYPE_U2:  						return 16;  					case ElementType.PELEMENT_TYPE_I4:  						return 32;  					case ElementType.PELEMENT_TYPE_U4:  						return 32;  					case ElementType.PELEMENT_TYPE_I8:  						return 64;  					case ElementType.PELEMENT_TYPE_U8:  						return 64;  					case ElementType.PELEMENT_TYPE_R4:  						return 32;  					case ElementType.PELEMENT_TYPE_R8:  						return 64;  					case ElementType.PELEMENT_TYPE_STRING:  						return -1;  					default:  						return -2;  				}
Magic Number,Microsoft.SPOT.Messaging,TypeDescriptorBasic,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,NumberOfBits,The following statement contains a magic number: switch(et)  				{  					case ElementType.PELEMENT_TYPE_BOOLEAN:  						return 1;  					case ElementType.PELEMENT_TYPE_CHAR:  						return 16;  					case ElementType.PELEMENT_TYPE_I1:  						return 8;  					case ElementType.PELEMENT_TYPE_U1:  						return 8;  					case ElementType.PELEMENT_TYPE_I2:  						return 16;  					case ElementType.PELEMENT_TYPE_U2:  						return 16;  					case ElementType.PELEMENT_TYPE_I4:  						return 32;  					case ElementType.PELEMENT_TYPE_U4:  						return 32;  					case ElementType.PELEMENT_TYPE_I8:  						return 64;  					case ElementType.PELEMENT_TYPE_U8:  						return 64;  					case ElementType.PELEMENT_TYPE_R4:  						return 32;  					case ElementType.PELEMENT_TYPE_R8:  						return 64;  					case ElementType.PELEMENT_TYPE_STRING:  						return -1;  					default:  						return -2;  				}
Magic Number,Microsoft.SPOT.Messaging,TypeDescriptorBasic,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,NumberOfBits,The following statement contains a magic number: switch(et)  				{  					case ElementType.PELEMENT_TYPE_BOOLEAN:  						return 1;  					case ElementType.PELEMENT_TYPE_CHAR:  						return 16;  					case ElementType.PELEMENT_TYPE_I1:  						return 8;  					case ElementType.PELEMENT_TYPE_U1:  						return 8;  					case ElementType.PELEMENT_TYPE_I2:  						return 16;  					case ElementType.PELEMENT_TYPE_U2:  						return 16;  					case ElementType.PELEMENT_TYPE_I4:  						return 32;  					case ElementType.PELEMENT_TYPE_U4:  						return 32;  					case ElementType.PELEMENT_TYPE_I8:  						return 64;  					case ElementType.PELEMENT_TYPE_U8:  						return 64;  					case ElementType.PELEMENT_TYPE_R4:  						return 32;  					case ElementType.PELEMENT_TYPE_R8:  						return 64;  					case ElementType.PELEMENT_TYPE_STRING:  						return -1;  					default:  						return -2;  				}
Magic Number,Microsoft.SPOT.Messaging,TypeDescriptorBasic,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,NumberOfBits,The following statement contains a magic number: switch(et)  				{  					case ElementType.PELEMENT_TYPE_BOOLEAN:  						return 1;  					case ElementType.PELEMENT_TYPE_CHAR:  						return 16;  					case ElementType.PELEMENT_TYPE_I1:  						return 8;  					case ElementType.PELEMENT_TYPE_U1:  						return 8;  					case ElementType.PELEMENT_TYPE_I2:  						return 16;  					case ElementType.PELEMENT_TYPE_U2:  						return 16;  					case ElementType.PELEMENT_TYPE_I4:  						return 32;  					case ElementType.PELEMENT_TYPE_U4:  						return 32;  					case ElementType.PELEMENT_TYPE_I8:  						return 64;  					case ElementType.PELEMENT_TYPE_U8:  						return 64;  					case ElementType.PELEMENT_TYPE_R4:  						return 32;  					case ElementType.PELEMENT_TYPE_R8:  						return 64;  					case ElementType.PELEMENT_TYPE_STRING:  						return -1;  					default:  						return -2;  				}
Magic Number,Microsoft.SPOT.Messaging,TypeDescriptorBasic,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,NumberOfBits,The following statement contains a magic number: switch(et)  				{  					case ElementType.PELEMENT_TYPE_BOOLEAN:  						return 1;  					case ElementType.PELEMENT_TYPE_CHAR:  						return 16;  					case ElementType.PELEMENT_TYPE_I1:  						return 8;  					case ElementType.PELEMENT_TYPE_U1:  						return 8;  					case ElementType.PELEMENT_TYPE_I2:  						return 16;  					case ElementType.PELEMENT_TYPE_U2:  						return 16;  					case ElementType.PELEMENT_TYPE_I4:  						return 32;  					case ElementType.PELEMENT_TYPE_U4:  						return 32;  					case ElementType.PELEMENT_TYPE_I8:  						return 64;  					case ElementType.PELEMENT_TYPE_U8:  						return 64;  					case ElementType.PELEMENT_TYPE_R4:  						return 32;  					case ElementType.PELEMENT_TYPE_R8:  						return 64;  					case ElementType.PELEMENT_TYPE_STRING:  						return -1;  					default:  						return -2;  				}
Magic Number,Microsoft.SPOT.Messaging,TypeDescriptorBasic,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,NumberOfBits,The following statement contains a magic number: switch(et)  				{  					case ElementType.PELEMENT_TYPE_BOOLEAN:  						return 1;  					case ElementType.PELEMENT_TYPE_CHAR:  						return 16;  					case ElementType.PELEMENT_TYPE_I1:  						return 8;  					case ElementType.PELEMENT_TYPE_U1:  						return 8;  					case ElementType.PELEMENT_TYPE_I2:  						return 16;  					case ElementType.PELEMENT_TYPE_U2:  						return 16;  					case ElementType.PELEMENT_TYPE_I4:  						return 32;  					case ElementType.PELEMENT_TYPE_U4:  						return 32;  					case ElementType.PELEMENT_TYPE_I8:  						return 64;  					case ElementType.PELEMENT_TYPE_U8:  						return 64;  					case ElementType.PELEMENT_TYPE_R4:  						return 32;  					case ElementType.PELEMENT_TYPE_R8:  						return 64;  					case ElementType.PELEMENT_TYPE_STRING:  						return -1;  					default:  						return -2;  				}
Magic Number,Microsoft.SPOT.Messaging,TypeDescriptorBasic,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,NumberOfBits,The following statement contains a magic number: switch(et)  				{  					case ElementType.PELEMENT_TYPE_BOOLEAN:  						return 1;  					case ElementType.PELEMENT_TYPE_CHAR:  						return 16;  					case ElementType.PELEMENT_TYPE_I1:  						return 8;  					case ElementType.PELEMENT_TYPE_U1:  						return 8;  					case ElementType.PELEMENT_TYPE_I2:  						return 16;  					case ElementType.PELEMENT_TYPE_U2:  						return 16;  					case ElementType.PELEMENT_TYPE_I4:  						return 32;  					case ElementType.PELEMENT_TYPE_U4:  						return 32;  					case ElementType.PELEMENT_TYPE_I8:  						return 64;  					case ElementType.PELEMENT_TYPE_U8:  						return 64;  					case ElementType.PELEMENT_TYPE_R4:  						return 32;  					case ElementType.PELEMENT_TYPE_R8:  						return 64;  					case ElementType.PELEMENT_TYPE_STRING:  						return -1;  					default:  						return -2;  				}
Magic Number,Microsoft.SPOT.Messaging,TypeDescriptorBasic,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,NumberOfBits,The following statement contains a magic number: switch(et)  				{  					case ElementType.PELEMENT_TYPE_BOOLEAN:  						return 1;  					case ElementType.PELEMENT_TYPE_CHAR:  						return 16;  					case ElementType.PELEMENT_TYPE_I1:  						return 8;  					case ElementType.PELEMENT_TYPE_U1:  						return 8;  					case ElementType.PELEMENT_TYPE_I2:  						return 16;  					case ElementType.PELEMENT_TYPE_U2:  						return 16;  					case ElementType.PELEMENT_TYPE_I4:  						return 32;  					case ElementType.PELEMENT_TYPE_U4:  						return 32;  					case ElementType.PELEMENT_TYPE_I8:  						return 64;  					case ElementType.PELEMENT_TYPE_U8:  						return 64;  					case ElementType.PELEMENT_TYPE_R4:  						return 32;  					case ElementType.PELEMENT_TYPE_R8:  						return 64;  					case ElementType.PELEMENT_TYPE_STRING:  						return -1;  					default:  						return -2;  				}
Magic Number,Microsoft.SPOT.Messaging,TypeDescriptorBasic,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,NumberOfBits,The following statement contains a magic number: switch(et)  				{  					case ElementType.PELEMENT_TYPE_BOOLEAN:  						return 1;  					case ElementType.PELEMENT_TYPE_CHAR:  						return 16;  					case ElementType.PELEMENT_TYPE_I1:  						return 8;  					case ElementType.PELEMENT_TYPE_U1:  						return 8;  					case ElementType.PELEMENT_TYPE_I2:  						return 16;  					case ElementType.PELEMENT_TYPE_U2:  						return 16;  					case ElementType.PELEMENT_TYPE_I4:  						return 32;  					case ElementType.PELEMENT_TYPE_U4:  						return 32;  					case ElementType.PELEMENT_TYPE_I8:  						return 64;  					case ElementType.PELEMENT_TYPE_U8:  						return 64;  					case ElementType.PELEMENT_TYPE_R4:  						return 32;  					case ElementType.PELEMENT_TYPE_R8:  						return 64;  					case ElementType.PELEMENT_TYPE_STRING:  						return -1;  					default:  						return -2;  				}
Magic Number,Microsoft.SPOT.Messaging,TypeDescriptorBasic,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,NumberOfBits,The following statement contains a magic number: switch(et)  				{  					case ElementType.PELEMENT_TYPE_BOOLEAN:  						return 1;  					case ElementType.PELEMENT_TYPE_CHAR:  						return 16;  					case ElementType.PELEMENT_TYPE_I1:  						return 8;  					case ElementType.PELEMENT_TYPE_U1:  						return 8;  					case ElementType.PELEMENT_TYPE_I2:  						return 16;  					case ElementType.PELEMENT_TYPE_U2:  						return 16;  					case ElementType.PELEMENT_TYPE_I4:  						return 32;  					case ElementType.PELEMENT_TYPE_U4:  						return 32;  					case ElementType.PELEMENT_TYPE_I8:  						return 64;  					case ElementType.PELEMENT_TYPE_U8:  						return 64;  					case ElementType.PELEMENT_TYPE_R4:  						return 32;  					case ElementType.PELEMENT_TYPE_R8:  						return 64;  					case ElementType.PELEMENT_TYPE_STRING:  						return -1;  					default:  						return -2;  				}
Magic Number,Microsoft.SPOT.Messaging,TypeDescriptorBasic,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,NumberOfBits,The following statement contains a magic number: switch(et)  				{  					case ElementType.PELEMENT_TYPE_BOOLEAN:  						return 1;  					case ElementType.PELEMENT_TYPE_CHAR:  						return 16;  					case ElementType.PELEMENT_TYPE_I1:  						return 8;  					case ElementType.PELEMENT_TYPE_U1:  						return 8;  					case ElementType.PELEMENT_TYPE_I2:  						return 16;  					case ElementType.PELEMENT_TYPE_U2:  						return 16;  					case ElementType.PELEMENT_TYPE_I4:  						return 32;  					case ElementType.PELEMENT_TYPE_U4:  						return 32;  					case ElementType.PELEMENT_TYPE_I8:  						return 64;  					case ElementType.PELEMENT_TYPE_U8:  						return 64;  					case ElementType.PELEMENT_TYPE_R4:  						return 32;  					case ElementType.PELEMENT_TYPE_R8:  						return 64;  					case ElementType.PELEMENT_TYPE_STRING:  						return -1;  					default:  						return -2;  				}
Magic Number,Microsoft.SPOT.Messaging,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,EmitValue,The following statement contains a magic number: if(m_type.m_base.IsPrimitive)  				{  					switch(m_type.m_base.m_et)  					{  						case ElementType.PELEMENT_TYPE_BOOLEAN:  							val = (bool)m_value ? 1UL : 0UL;  							break;  						case ElementType.PELEMENT_TYPE_CHAR:  							val = (ulong)(char)m_value;  							break;  						case ElementType.PELEMENT_TYPE_I1:  							val = (ulong)(sbyte)m_value;  							break;  						case ElementType.PELEMENT_TYPE_U1:  							val = (ulong)(byte)m_value;  							break;  						case ElementType.PELEMENT_TYPE_I2:  							val = (ulong)(short)m_value;  							break;  						case ElementType.PELEMENT_TYPE_U2:  							val = (ulong)(ushort)m_value;  							break;  						case ElementType.PELEMENT_TYPE_I4:  							val = (ulong)(int)m_value;  							break;  						case ElementType.PELEMENT_TYPE_U4:  							val = (ulong)(uint)m_value;  							break;  						case ElementType.PELEMENT_TYPE_I8:  							val = (ulong)(long)m_value;  							break;  						case ElementType.PELEMENT_TYPE_U8:  							val = (ulong)(ulong)m_value;  							break;  						case ElementType.PELEMENT_TYPE_R4:  							val = BytesFromFloat((float)m_value);  							break;  						case ElementType.PELEMENT_TYPE_R8:  							val = BytesFromDouble((double)m_value);  							break;    						case ElementType.PELEMENT_TYPE_STRING:  							{  								byte[] buf = Encoding.UTF8.GetBytes((string)m_value);    								m_bf.WriteCompressedUnsigned((uint)buf.Length);  								m_bf.WriteArray(buf' 0' buf.Length);    								BinaryFormatter.WriteLine("Value: STRING {0}"' m_value);    								return c_Action_None;  							}    						default:  							throw TypeDescriptorBasic.Error("Bad primitive");  					}    					bits = TypeDescriptorBasic.NumberOfBits(m_type.m_base.m_et);  					fSigned = TypeDescriptorBasic.IsSigned(m_type.m_base.m_et);  				}  				else if(m_value is DateTime)  				{  					val = (ulong)((DateTime)m_value).Ticks;  					bits = 64;  					fSigned = false;  				}  				else if(m_value is TimeSpan)  				{  					val = (ulong)((TimeSpan)m_value).Ticks;  					bits = 64;  					fSigned = true;  				}  				else  				{  					return TrackObject();  				}
Magic Number,Microsoft.SPOT.Messaging,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,EmitValue,The following statement contains a magic number: if(m_type.m_base.IsPrimitive)  				{  					switch(m_type.m_base.m_et)  					{  						case ElementType.PELEMENT_TYPE_BOOLEAN:  							val = (bool)m_value ? 1UL : 0UL;  							break;  						case ElementType.PELEMENT_TYPE_CHAR:  							val = (ulong)(char)m_value;  							break;  						case ElementType.PELEMENT_TYPE_I1:  							val = (ulong)(sbyte)m_value;  							break;  						case ElementType.PELEMENT_TYPE_U1:  							val = (ulong)(byte)m_value;  							break;  						case ElementType.PELEMENT_TYPE_I2:  							val = (ulong)(short)m_value;  							break;  						case ElementType.PELEMENT_TYPE_U2:  							val = (ulong)(ushort)m_value;  							break;  						case ElementType.PELEMENT_TYPE_I4:  							val = (ulong)(int)m_value;  							break;  						case ElementType.PELEMENT_TYPE_U4:  							val = (ulong)(uint)m_value;  							break;  						case ElementType.PELEMENT_TYPE_I8:  							val = (ulong)(long)m_value;  							break;  						case ElementType.PELEMENT_TYPE_U8:  							val = (ulong)(ulong)m_value;  							break;  						case ElementType.PELEMENT_TYPE_R4:  							val = BytesFromFloat((float)m_value);  							break;  						case ElementType.PELEMENT_TYPE_R8:  							val = BytesFromDouble((double)m_value);  							break;    						case ElementType.PELEMENT_TYPE_STRING:  							{  								byte[] buf = Encoding.UTF8.GetBytes((string)m_value);    								m_bf.WriteCompressedUnsigned((uint)buf.Length);  								m_bf.WriteArray(buf' 0' buf.Length);    								BinaryFormatter.WriteLine("Value: STRING {0}"' m_value);    								return c_Action_None;  							}    						default:  							throw TypeDescriptorBasic.Error("Bad primitive");  					}    					bits = TypeDescriptorBasic.NumberOfBits(m_type.m_base.m_et);  					fSigned = TypeDescriptorBasic.IsSigned(m_type.m_base.m_et);  				}  				else if(m_value is DateTime)  				{  					val = (ulong)((DateTime)m_value).Ticks;  					bits = 64;  					fSigned = false;  				}  				else if(m_value is TimeSpan)  				{  					val = (ulong)((TimeSpan)m_value).Ticks;  					bits = 64;  					fSigned = true;  				}  				else  				{  					return TrackObject();  				}
Magic Number,Microsoft.SPOT.Messaging,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,EmitValue,The following statement contains a magic number: if(fSigned)  				{  					long valS = (long)val;    					if(this.Hints_Scale != 0)  						valS /= (long)this.Hints_Scale;    					if(bits != 64)  					{  						long maxVal = (1L << (bits - 1)) - 1;    						fValid = (valS <= maxVal) && (valS >= -maxVal - 1);  					}    					val = (ulong)valS;  				}  				else  				{  					ulong valU = (ulong)val;    					if(this.Hints_Scale != 0)  						valU /= (ulong)this.Hints_Scale;    					if(bits != 64)  					{  						ulong maxVal = (1UL << bits) - 1;    						fValid = (valU <= maxVal);  					}    					val = (ulong)valU;  				}
Magic Number,Microsoft.SPOT.Messaging,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,EmitValue,The following statement contains a magic number: if(fSigned)  				{  					long valS = (long)val;    					if(this.Hints_Scale != 0)  						valS /= (long)this.Hints_Scale;    					if(bits != 64)  					{  						long maxVal = (1L << (bits - 1)) - 1;    						fValid = (valS <= maxVal) && (valS >= -maxVal - 1);  					}    					val = (ulong)valS;  				}  				else  				{  					ulong valU = (ulong)val;    					if(this.Hints_Scale != 0)  						valU /= (ulong)this.Hints_Scale;    					if(bits != 64)  					{  						ulong maxVal = (1UL << bits) - 1;    						fValid = (valU <= maxVal);  					}    					val = (ulong)valU;  				}
Magic Number,Microsoft.SPOT.Messaging,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadValue,The following statement contains a magic number: if(m_type.m_base.IsPrimitive)  				{  					if(m_type.m_base.m_et == ElementType.PELEMENT_TYPE_STRING)  					{  						uint len = m_bf.ReadCompressedUnsigned();    						if(len == 0xFFFFFFFF)  						{  							m_value = null;  						}  						else  						{  							byte[] buf = new byte[len];    							m_bf.ReadArray(buf' 0' (int)len);    							m_value = Encoding.UTF8.GetString(buf);  						}    						BinaryFormatter.WriteLine("Value: STRING {0}"' m_value);    						return c_Action_None;  					}    					bits = TypeDescriptorBasic.NumberOfBits(m_type.m_base.m_et);  					fSigned = TypeDescriptorBasic.IsSigned(m_type.m_base.m_et);    					if(bits < 0)  					{  						throw TypeDescriptorBasic.Error("Bad primitive");  					}  				}  				else if(m_type.Type == typeof(DateTime))  				{  					bits = 64;  					fSigned = false;  				}  				else if(m_type.Type == typeof(TimeSpan))  				{  					bits = 64;  					fSigned = true;  				}  				else  				{  					return TrackObject();  				}
Magic Number,Microsoft.SPOT.Messaging,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadValue,The following statement contains a magic number: if(m_type.m_base.IsPrimitive)  				{  					if(m_type.m_base.m_et == ElementType.PELEMENT_TYPE_STRING)  					{  						uint len = m_bf.ReadCompressedUnsigned();    						if(len == 0xFFFFFFFF)  						{  							m_value = null;  						}  						else  						{  							byte[] buf = new byte[len];    							m_bf.ReadArray(buf' 0' (int)len);    							m_value = Encoding.UTF8.GetString(buf);  						}    						BinaryFormatter.WriteLine("Value: STRING {0}"' m_value);    						return c_Action_None;  					}    					bits = TypeDescriptorBasic.NumberOfBits(m_type.m_base.m_et);  					fSigned = TypeDescriptorBasic.IsSigned(m_type.m_base.m_et);    					if(bits < 0)  					{  						throw TypeDescriptorBasic.Error("Bad primitive");  					}  				}  				else if(m_type.Type == typeof(DateTime))  				{  					bits = 64;  					fSigned = false;  				}  				else if(m_type.Type == typeof(TimeSpan))  				{  					bits = 64;  					fSigned = true;  				}  				else  				{  					return TrackObject();  				}
Magic Number,Microsoft.SPOT.Messaging,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadValue,The following statement contains a magic number: if(fSigned)  				{  					long valS;    					if(bits != 64)  					{  						valS = (long)(val << (64 - bits));  						val = (ulong)(valS >> (64 - bits));  					}    					valS = (long)val;    					if(this.Hints_Scale != 0)  						valS *= (long)this.Hints_Scale;    					val = (ulong)valS;  				}  				else  				{  					ulong valU;    					if(bits != 64)  					{  						valU = (ulong)(val << (64 - bits));  						val = (ulong)(valU >> (64 - bits));  					}    					valU = (ulong)val;    					if(this.Hints_Scale != 0)  						valU *= (ulong)this.Hints_Scale;    					val = (ulong)valU;  				}
Magic Number,Microsoft.SPOT.Messaging,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadValue,The following statement contains a magic number: if(fSigned)  				{  					long valS;    					if(bits != 64)  					{  						valS = (long)(val << (64 - bits));  						val = (ulong)(valS >> (64 - bits));  					}    					valS = (long)val;    					if(this.Hints_Scale != 0)  						valS *= (long)this.Hints_Scale;    					val = (ulong)valS;  				}  				else  				{  					ulong valU;    					if(bits != 64)  					{  						valU = (ulong)(val << (64 - bits));  						val = (ulong)(valU >> (64 - bits));  					}    					valU = (ulong)val;    					if(this.Hints_Scale != 0)  						valU *= (ulong)this.Hints_Scale;    					val = (ulong)valU;  				}
Magic Number,Microsoft.SPOT.Messaging,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadValue,The following statement contains a magic number: if(fSigned)  				{  					long valS;    					if(bits != 64)  					{  						valS = (long)(val << (64 - bits));  						val = (ulong)(valS >> (64 - bits));  					}    					valS = (long)val;    					if(this.Hints_Scale != 0)  						valS *= (long)this.Hints_Scale;    					val = (ulong)valS;  				}  				else  				{  					ulong valU;    					if(bits != 64)  					{  						valU = (ulong)(val << (64 - bits));  						val = (ulong)(valU >> (64 - bits));  					}    					valU = (ulong)val;    					if(this.Hints_Scale != 0)  						valU *= (ulong)this.Hints_Scale;    					val = (ulong)valU;  				}
Magic Number,Microsoft.SPOT.Messaging,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadValue,The following statement contains a magic number: if(fSigned)  				{  					long valS;    					if(bits != 64)  					{  						valS = (long)(val << (64 - bits));  						val = (ulong)(valS >> (64 - bits));  					}    					valS = (long)val;    					if(this.Hints_Scale != 0)  						valS *= (long)this.Hints_Scale;    					val = (ulong)valS;  				}  				else  				{  					ulong valU;    					if(bits != 64)  					{  						valU = (ulong)(val << (64 - bits));  						val = (ulong)(valU >> (64 - bits));  					}    					valU = (ulong)val;    					if(this.Hints_Scale != 0)  						valU *= (ulong)this.Hints_Scale;    					val = (ulong)valU;  				}
Magic Number,Microsoft.SPOT.Messaging,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadValue,The following statement contains a magic number: if(fSigned)  				{  					long valS;    					if(bits != 64)  					{  						valS = (long)(val << (64 - bits));  						val = (ulong)(valS >> (64 - bits));  					}    					valS = (long)val;    					if(this.Hints_Scale != 0)  						valS *= (long)this.Hints_Scale;    					val = (ulong)valS;  				}  				else  				{  					ulong valU;    					if(bits != 64)  					{  						valU = (ulong)(val << (64 - bits));  						val = (ulong)(valU >> (64 - bits));  					}    					valU = (ulong)val;    					if(this.Hints_Scale != 0)  						valU *= (ulong)this.Hints_Scale;    					val = (ulong)valU;  				}
Magic Number,Microsoft.SPOT.Messaging,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadValue,The following statement contains a magic number: if(fSigned)  				{  					long valS;    					if(bits != 64)  					{  						valS = (long)(val << (64 - bits));  						val = (ulong)(valS >> (64 - bits));  					}    					valS = (long)val;    					if(this.Hints_Scale != 0)  						valS *= (long)this.Hints_Scale;    					val = (ulong)valS;  				}  				else  				{  					ulong valU;    					if(bits != 64)  					{  						valU = (ulong)(val << (64 - bits));  						val = (ulong)(valU >> (64 - bits));  					}    					valU = (ulong)val;    					if(this.Hints_Scale != 0)  						valU *= (ulong)this.Hints_Scale;    					val = (ulong)valU;  				}
Magic Number,Microsoft.SPOT.Messaging,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,FloatFromBytes,The following statement contains a magic number: if(m_bf.m_capabilities.FloatingPoint)  				{  					uint val2 = (uint)val;    					uint* ptr = &val2;    					ret = *(float*)ptr;  				}  				else  				{  					ret = ((float)val) / 1024;  				}
Magic Number,Microsoft.SPOT.Messaging,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,DoubleFromBytes,The following statement contains a magic number: if(m_bf.m_capabilities.FloatingPoint)  				{  					ulong* ptr = &val;    					ret = *(double*)ptr;  				}  				else  				{  					ret = ((double)val) / 65536;  				}
Magic Number,Microsoft.SPOT.Messaging,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,BytesFromFloat,The following statement contains a magic number: if(m_bf.m_capabilities.FloatingPoint)  				{  					float* ptr = &val;    					ret = (ulong)*(uint*)ptr;  				}  				else  				{  					ret = (ulong)(long)((float)val * 1024);  				}
Magic Number,Microsoft.SPOT.Messaging,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,BytesFromDouble,The following statement contains a magic number: if(m_bf.m_capabilities.FloatingPoint)  				{  					double* ptr = &val;    					ret = *(ulong*)ptr;  				}  				else  				{  					ret = (ulong)(long)((double)val * 65536);  				}
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,FifoBuffer,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Controller.cs,FifoBuffer,The following statement contains a magic number: m_buffer = new byte[1024];
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,FifoBuffer,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Controller.cs,Write,The following statement contains a magic number: while(count > 0)  			{  				int len = m_buffer.Length;  				int avail = len - m_count;    				if(avail == 0) // Buffer full. Expand it.  				{  					byte[] buffer = new byte[len * 2];    					//  					// Double the buffer and copy all the data to the left side.  					//  					Array.Copy(m_buffer' m_offset' buffer' 0' len - m_offset);  					Array.Copy(m_buffer' 0' buffer' len - m_offset' m_offset);    					m_buffer = buffer;  					m_offset = 0;  					len *= 2;  					avail = len;  				}    				int offsetWrite = m_offset + m_count;  				if(offsetWrite >= len)  					offsetWrite -= len;    				if(avail + offsetWrite > len)  					avail = len - offsetWrite;    				if(avail > count)  					avail = count;    				Array.Copy(buf' offset' m_buffer' offsetWrite' avail);    				offset += avail;  				m_count += avail;  				count -= avail;  			}
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,FifoBuffer,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Controller.cs,Write,The following statement contains a magic number: while(count > 0)  			{  				int len = m_buffer.Length;  				int avail = len - m_count;    				if(avail == 0) // Buffer full. Expand it.  				{  					byte[] buffer = new byte[len * 2];    					//  					// Double the buffer and copy all the data to the left side.  					//  					Array.Copy(m_buffer' m_offset' buffer' 0' len - m_offset);  					Array.Copy(m_buffer' 0' buffer' len - m_offset' m_offset);    					m_buffer = buffer;  					m_offset = 0;  					len *= 2;  					avail = len;  				}    				int offsetWrite = m_offset + m_count;  				if(offsetWrite >= len)  					offsetWrite -= len;    				if(avail + offsetWrite > len)  					avail = len - offsetWrite;    				if(avail > count)  					avail = count;    				Array.Copy(buf' offset' m_buffer' offsetWrite' avail);    				offset += avail;  				m_count += avail;  				count -= avail;  			}
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Controller,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Controller.cs,Controller,The following statement contains a magic number: m_lastOutboundMessage = random.Next(65536);
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Controller,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Controller.cs,Process,The following statement contains a magic number: while(m_state.IsRunning)  			{  				try  				{  					msg.Process();  				}  				catch(ThreadAbortException)  				{  					((IController)this).Stop();  					break;  				}  				catch  				{  					((IController)this).ClosePort();    					Thread.Sleep(100);                      				}  			}
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Controller,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Controller.cs,ReceiveInput,The following statement contains a magic number: byte[] buf = new byte[128];
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Controller,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Controller.cs,ReceiveInput,The following statement contains a magic number: int invalidOperationRetry = 5;
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Controller,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Controller.cs,ReceiveInput,The following statement contains a magic number: while(m_state.IsRunning)  			{  				try  				{  					Stream stream = ((IControllerLocal)this).OpenPort();    					IStreamAvailableCharacters streamAvail = stream as IStreamAvailableCharacters;  					int avail = 0;    					if(streamAvail != null)  					{  						avail = streamAvail.AvailableCharacters;    						if(avail == 0)  						{  							Thread.Sleep(100);  							continue;  						}  					}    					if(avail == 0)  						avail = 1;    					if(avail > buf.Length)  						buf = new byte[avail];    					int read = stream.Read(buf' 0' avail);    					if(read > 0)  					{  						m_lastActivity = DateTime.UtcNow;    						m_inboundData.Write(buf' 0' read);  					}  					else if(read == 0)  					{  						Thread.Sleep(100);  					}  				}  				catch(ProcessExitException)  				{  					ProcessExit();    					((IController)this).ClosePort();    					return;  				}  				catch(InvalidOperationException)  				{  					if(invalidOperationRetry <= 0)  					{  						ProcessExit();    						((IController)this).ClosePort();    						return;  					}  					else  					{  						invalidOperationRetry--;    						((IController)this).ClosePort();    						Thread.Sleep(200);  					}  				}  				catch(IOException)  				{  					((IController)this).ClosePort();    					Thread.Sleep(200);  				}  				catch  				{  					((IController)this).ClosePort();    					Thread.Sleep(200);  				}  			}
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Controller,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Controller.cs,ReceiveInput,The following statement contains a magic number: while(m_state.IsRunning)  			{  				try  				{  					Stream stream = ((IControllerLocal)this).OpenPort();    					IStreamAvailableCharacters streamAvail = stream as IStreamAvailableCharacters;  					int avail = 0;    					if(streamAvail != null)  					{  						avail = streamAvail.AvailableCharacters;    						if(avail == 0)  						{  							Thread.Sleep(100);  							continue;  						}  					}    					if(avail == 0)  						avail = 1;    					if(avail > buf.Length)  						buf = new byte[avail];    					int read = stream.Read(buf' 0' avail);    					if(read > 0)  					{  						m_lastActivity = DateTime.UtcNow;    						m_inboundData.Write(buf' 0' read);  					}  					else if(read == 0)  					{  						Thread.Sleep(100);  					}  				}  				catch(ProcessExitException)  				{  					ProcessExit();    					((IController)this).ClosePort();    					return;  				}  				catch(InvalidOperationException)  				{  					if(invalidOperationRetry <= 0)  					{  						ProcessExit();    						((IController)this).ClosePort();    						return;  					}  					else  					{  						invalidOperationRetry--;    						((IController)this).ClosePort();    						Thread.Sleep(200);  					}  				}  				catch(IOException)  				{  					((IController)this).ClosePort();    					Thread.Sleep(200);  				}  				catch  				{  					((IController)this).ClosePort();    					Thread.Sleep(200);  				}  			}
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Controller,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Controller.cs,ReceiveInput,The following statement contains a magic number: while(m_state.IsRunning)  			{  				try  				{  					Stream stream = ((IControllerLocal)this).OpenPort();    					IStreamAvailableCharacters streamAvail = stream as IStreamAvailableCharacters;  					int avail = 0;    					if(streamAvail != null)  					{  						avail = streamAvail.AvailableCharacters;    						if(avail == 0)  						{  							Thread.Sleep(100);  							continue;  						}  					}    					if(avail == 0)  						avail = 1;    					if(avail > buf.Length)  						buf = new byte[avail];    					int read = stream.Read(buf' 0' avail);    					if(read > 0)  					{  						m_lastActivity = DateTime.UtcNow;    						m_inboundData.Write(buf' 0' read);  					}  					else if(read == 0)  					{  						Thread.Sleep(100);  					}  				}  				catch(ProcessExitException)  				{  					ProcessExit();    					((IController)this).ClosePort();    					return;  				}  				catch(InvalidOperationException)  				{  					if(invalidOperationRetry <= 0)  					{  						ProcessExit();    						((IController)this).ClosePort();    						return;  					}  					else  					{  						invalidOperationRetry--;    						((IController)this).ClosePort();    						Thread.Sleep(200);  					}  				}  				catch(IOException)  				{  					((IController)this).ClosePort();    					Thread.Sleep(200);  				}  				catch  				{  					((IController)this).ClosePort();    					Thread.Sleep(200);  				}  			}
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Controller,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Controller.cs,ReceiveInput,The following statement contains a magic number: while(m_state.IsRunning)  			{  				try  				{  					Stream stream = ((IControllerLocal)this).OpenPort();    					IStreamAvailableCharacters streamAvail = stream as IStreamAvailableCharacters;  					int avail = 0;    					if(streamAvail != null)  					{  						avail = streamAvail.AvailableCharacters;    						if(avail == 0)  						{  							Thread.Sleep(100);  							continue;  						}  					}    					if(avail == 0)  						avail = 1;    					if(avail > buf.Length)  						buf = new byte[avail];    					int read = stream.Read(buf' 0' avail);    					if(read > 0)  					{  						m_lastActivity = DateTime.UtcNow;    						m_inboundData.Write(buf' 0' read);  					}  					else if(read == 0)  					{  						Thread.Sleep(100);  					}  				}  				catch(ProcessExitException)  				{  					ProcessExit();    					((IController)this).ClosePort();    					return;  				}  				catch(InvalidOperationException)  				{  					if(invalidOperationRetry <= 0)  					{  						ProcessExit();    						((IController)this).ClosePort();    						return;  					}  					else  					{  						invalidOperationRetry--;    						((IController)this).ClosePort();    						Thread.Sleep(200);  					}  				}  				catch(IOException)  				{  					((IController)this).ClosePort();    					Thread.Sleep(200);  				}  				catch  				{  					((IController)this).ClosePort();    					Thread.Sleep(200);  				}  			}
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Controller,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Controller.cs,ReceiveInput,The following statement contains a magic number: while(m_state.IsRunning)  			{  				try  				{  					Stream stream = ((IControllerLocal)this).OpenPort();    					IStreamAvailableCharacters streamAvail = stream as IStreamAvailableCharacters;  					int avail = 0;    					if(streamAvail != null)  					{  						avail = streamAvail.AvailableCharacters;    						if(avail == 0)  						{  							Thread.Sleep(100);  							continue;  						}  					}    					if(avail == 0)  						avail = 1;    					if(avail > buf.Length)  						buf = new byte[avail];    					int read = stream.Read(buf' 0' avail);    					if(read > 0)  					{  						m_lastActivity = DateTime.UtcNow;    						m_inboundData.Write(buf' 0' read);  					}  					else if(read == 0)  					{  						Thread.Sleep(100);  					}  				}  				catch(ProcessExitException)  				{  					ProcessExit();    					((IController)this).ClosePort();    					return;  				}  				catch(InvalidOperationException)  				{  					if(invalidOperationRetry <= 0)  					{  						ProcessExit();    						((IController)this).ClosePort();    						return;  					}  					else  					{  						invalidOperationRetry--;    						((IController)this).ClosePort();    						Thread.Sleep(200);  					}  				}  				catch(IOException)  				{  					((IController)this).ClosePort();    					Thread.Sleep(200);  				}  				catch  				{  					((IController)this).ClosePort();    					Thread.Sleep(200);  				}  			}
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Converter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Converter.cs,InternalSerializeInstance,The following statement contains a magic number: switch(Type.GetTypeCode(t))  			{  				case TypeCode.Boolean:  					writer.Write((bool)o);  					break;  				case TypeCode.Char:  					writer.Write((char)o);  					break;  				case TypeCode.SByte:  					writer.Write((sbyte)o);  					break;   				case TypeCode.Byte:  					writer.Write((byte)o);  					break;  				case TypeCode.Int16:  					writer.Write((short)o);  					break;  				case TypeCode.UInt16:  					writer.Write((ushort)o);  					break;  				case TypeCode.Int32:  					writer.Write((int)o);  					break;  				case TypeCode.UInt32:  					writer.Write((uint)o);  					break;  				case TypeCode.Int64:  					writer.Write((long)o);  					break;  				case TypeCode.UInt64:  					writer.Write((ulong)o);  					break;                  				case TypeCode.Single:  					if(m_capabilities.FloatingPoint)  						writer.Write((float)o);  					else  						writer.Write((int)((float)o * 1024));   					break;  				case TypeCode.Double:  					if(m_capabilities.FloatingPoint)  						writer.Write((double)o);  					else  						writer.Write((long)((double)o * 65536));  					break;  				case TypeCode.String:  					byte[] buf = Encoding.UTF8.GetBytes((string)o);    					writer.Write(buf.Length);  					writer.Write(buf);  					break;  				default:  					if(t == typeof(void))  					{  					}  					else if(t.IsArray)  					{  						Array arr = (Array)o;    						foreach(object arrItem in arr)  						{  							InternalSerializeInstance(writer' arrItem);  						}  					}  					else if(t.IsValueType || t.IsClass)  					{  						InternalSerializeFields(writer' o);  					}  					else  					{  						throw new System.Runtime.Serialization.SerializationException();  					}    					break;  			}
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Converter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Converter.cs,InternalSerializeInstance,The following statement contains a magic number: switch(Type.GetTypeCode(t))  			{  				case TypeCode.Boolean:  					writer.Write((bool)o);  					break;  				case TypeCode.Char:  					writer.Write((char)o);  					break;  				case TypeCode.SByte:  					writer.Write((sbyte)o);  					break;   				case TypeCode.Byte:  					writer.Write((byte)o);  					break;  				case TypeCode.Int16:  					writer.Write((short)o);  					break;  				case TypeCode.UInt16:  					writer.Write((ushort)o);  					break;  				case TypeCode.Int32:  					writer.Write((int)o);  					break;  				case TypeCode.UInt32:  					writer.Write((uint)o);  					break;  				case TypeCode.Int64:  					writer.Write((long)o);  					break;  				case TypeCode.UInt64:  					writer.Write((ulong)o);  					break;                  				case TypeCode.Single:  					if(m_capabilities.FloatingPoint)  						writer.Write((float)o);  					else  						writer.Write((int)((float)o * 1024));   					break;  				case TypeCode.Double:  					if(m_capabilities.FloatingPoint)  						writer.Write((double)o);  					else  						writer.Write((long)((double)o * 65536));  					break;  				case TypeCode.String:  					byte[] buf = Encoding.UTF8.GetBytes((string)o);    					writer.Write(buf.Length);  					writer.Write(buf);  					break;  				default:  					if(t == typeof(void))  					{  					}  					else if(t.IsArray)  					{  						Array arr = (Array)o;    						foreach(object arrItem in arr)  						{  							InternalSerializeInstance(writer' arrItem);  						}  					}  					else if(t.IsValueType || t.IsClass)  					{  						InternalSerializeFields(writer' o);  					}  					else  					{  						throw new System.Runtime.Serialization.SerializationException();  					}    					break;  			}
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Converter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Converter.cs,InternalDeserializeInstance,The following statement contains a magic number: switch(Type.GetTypeCode(t))  			{  				case TypeCode.Boolean:  					ret = reader.ReadBoolean();  					break;  				case TypeCode.Char:  					ret = reader.ReadChar();  					break;  				case TypeCode.SByte:  					ret = reader.ReadSByte();  					break;  				case TypeCode.Byte:  					ret = reader.ReadByte();  					break;  				case TypeCode.Int16:  					ret = reader.ReadInt16();  					break;  				case TypeCode.UInt16:  					ret = reader.ReadUInt16();  					break;  				case TypeCode.Int32:  					ret = reader.ReadInt32();  					break;  				case TypeCode.UInt32:  					ret = reader.ReadUInt32();  					break;  				case TypeCode.Int64:  					ret = reader.ReadInt64();  					break;  				case TypeCode.UInt64:  					ret = reader.ReadUInt64();  					break;           				case TypeCode.Single:  					if(m_capabilities.FloatingPoint)  						ret = reader.ReadSingle();  					else  						ret = (float)reader.ReadInt32() / 1024;  					break;  				case TypeCode.Double:  					if(m_capabilities.FloatingPoint)  						ret = reader.ReadDouble();  					else  						ret = (double)reader.ReadInt64() / 65536;  					break;  				case TypeCode.String:  					int num = reader.ReadInt32();  					byte[] buf = reader.ReadBytes(num);    					ret = Encoding.UTF8.GetString(buf);    					break;  				default:  					if(t.IsArray)  					{  						Array arr = (Array)o;    						for(int i = 0; i < arr.Length; i++)  						{  							object objValue = arr.GetValue(i);  							objValue = InternalDeserializeInstance(reader' objValue' t.GetElementType());  							arr.SetValue(objValue' i);  						}    						ret = o;  					}  					else if(t.IsValueType || t.IsClass)  					{  						if(o != null)  						{  							if(o.GetType() != t)  								throw new System.Runtime.Serialization.SerializationException();  						}  						else  						{  							o = System.Runtime.Serialization.FormatterServices.GetUninitializedObject(t);  						}    						InternalDeserializeFields(reader' o);    						ret = o;  					}  					else  					{  						throw new System.Runtime.Serialization.SerializationException();  					}    					break;  			}
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Converter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Converter.cs,InternalDeserializeInstance,The following statement contains a magic number: switch(Type.GetTypeCode(t))  			{  				case TypeCode.Boolean:  					ret = reader.ReadBoolean();  					break;  				case TypeCode.Char:  					ret = reader.ReadChar();  					break;  				case TypeCode.SByte:  					ret = reader.ReadSByte();  					break;  				case TypeCode.Byte:  					ret = reader.ReadByte();  					break;  				case TypeCode.Int16:  					ret = reader.ReadInt16();  					break;  				case TypeCode.UInt16:  					ret = reader.ReadUInt16();  					break;  				case TypeCode.Int32:  					ret = reader.ReadInt32();  					break;  				case TypeCode.UInt32:  					ret = reader.ReadUInt32();  					break;  				case TypeCode.Int64:  					ret = reader.ReadInt64();  					break;  				case TypeCode.UInt64:  					ret = reader.ReadUInt64();  					break;           				case TypeCode.Single:  					if(m_capabilities.FloatingPoint)  						ret = reader.ReadSingle();  					else  						ret = (float)reader.ReadInt32() / 1024;  					break;  				case TypeCode.Double:  					if(m_capabilities.FloatingPoint)  						ret = reader.ReadDouble();  					else  						ret = (double)reader.ReadInt64() / 65536;  					break;  				case TypeCode.String:  					int num = reader.ReadInt32();  					byte[] buf = reader.ReadBytes(num);    					ret = Encoding.UTF8.GetString(buf);    					break;  				default:  					if(t.IsArray)  					{  						Array arr = (Array)o;    						for(int i = 0; i < arr.Length; i++)  						{  							object objValue = arr.GetValue(i);  							objValue = InternalDeserializeInstance(reader' objValue' t.GetElementType());  							arr.SetValue(objValue' i);  						}    						ret = o;  					}  					else if(t.IsValueType || t.IsClass)  					{  						if(o != null)  						{  							if(o.GetType() != t)  								throw new System.Runtime.Serialization.SerializationException();  						}  						else  						{  							o = System.Runtime.Serialization.FormatterServices.GetUninitializedObject(t);  						}    						InternalDeserializeFields(reader' o);    						ret = o;  					}  					else  					{  						throw new System.Runtime.Serialization.SerializationException();  					}    					break;  			}
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,ReleaseInfo,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,ReleaseInfo,The following statement contains a magic number: m_info = new byte[64 - 8];
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,ReleaseInfo,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,ReleaseInfo,The following statement contains a magic number: m_info = new byte[64 - 8];
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,ReleaseInfo,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,PrepareForDeserialize,The following statement contains a magic number: m_info = new byte[64 - 8];
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,ReleaseInfo,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,PrepareForDeserialize,The following statement contains a magic number: m_info = new byte[64 - 8];
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Reply,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,PrepareForDeserialize,The following statement contains a magic number: int num = size / (3 * 4);
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Reply,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,PrepareForDeserialize,The following statement contains a magic number: int num = size / (3 * 4);
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Reply,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,PrepareForDeserialize,The following statement contains a magic number: int num = size / (3 * 4);
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Reply,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,PrepareForDeserialize,The following statement contains a magic number: int num = size / (3 * 4);
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Reply,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,PrepareForDeserialize,The following statement contains a magic number: int num = (size - 4) / (3 * 4);
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Reply,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,PrepareForDeserialize,The following statement contains a magic number: int num = (size - 4) / (3 * 4);
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Reply,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,PrepareForDeserialize,The following statement contains a magic number: int num = (size - 4) / (3 * 4);
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Reply,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,PrepareForDeserialize,The following statement contains a magic number: m_response = new byte[(size - 8)];
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Reply,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,PrepareForDeserialize,The following statement contains a magic number: m_missingPkts = new uint[(size - 8) / 4];
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Reply,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,PrepareForDeserialize,The following statement contains a magic number: m_missingPkts = new uint[(size - 8) / 4];
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Reply,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,PrepareForDeserialize,The following statement contains a magic number: m_pids = new uint[(size - 4) / 4];
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Reply,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,PrepareForDeserialize,The following statement contains a magic number: m_pids = new uint[(size - 4) / 4];
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Reply,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,PrepareForDeserialize,The following statement contains a magic number: if(converter.Capabilities.AppDomains)  					{  						m_data = new CallEx[(size - 12) / 16];  					}  					else  					{  						m_data = new Call[(size - 12) / 8];  					}
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Reply,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,PrepareForDeserialize,The following statement contains a magic number: if(converter.Capabilities.AppDomains)  					{  						m_data = new CallEx[(size - 12) / 16];  					}  					else  					{  						m_data = new Call[(size - 12) / 8];  					}
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Reply,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,PrepareForDeserialize,The following statement contains a magic number: if(converter.Capabilities.AppDomains)  					{  						m_data = new CallEx[(size - 12) / 16];  					}  					else  					{  						m_data = new Call[(size - 12) / 8];  					}
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Reply,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,PrepareForDeserialize,The following statement contains a magic number: if(converter.Capabilities.AppDomains)  					{  						m_data = new CallEx[(size - 12) / 16];  					}  					else  					{  						m_data = new Call[(size - 12) / 8];  					}
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Reply,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,PrepareForDeserialize,The following statement contains a magic number: m_data = new uint[(size - 512 - 4) / 4];
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Reply,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,PrepareForDeserialize,The following statement contains a magic number: m_data = new uint[(size - 512 - 4) / 4];
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Reply,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,PrepareForDeserialize,The following statement contains a magic number: m_data = new uint[(size - 512 - 4) / 4];
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,OEM_SERIAL_NUMBERS,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,OEM_SERIAL_NUMBERS,The following statement contains a magic number: module_serial_number = new byte[32];
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,OEM_SERIAL_NUMBERS,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,OEM_SERIAL_NUMBERS,The following statement contains a magic number: system_serial_number = new byte[16];
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,OEM_SERIAL_NUMBERS,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,PrepareForDeserialize,The following statement contains a magic number: module_serial_number = new byte[32];
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,OEM_SERIAL_NUMBERS,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,PrepareForDeserialize,The following statement contains a magic number: system_serial_number = new byte[16];
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Debugging_Value,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,Allocate,The following statement contains a magic number: int num = size / (12 * 4 + 128);
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Debugging_Value,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,Allocate,The following statement contains a magic number: int num = size / (12 * 4 + 128);
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Debugging_Value,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,Allocate,The following statement contains a magic number: int num = size / (12 * 4 + 128);
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Debugging_Reply_Uint_Array,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,PrepareForDeserialize,The following statement contains a magic number: m_data = new uint[(size) / 4];
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,ReplyEx,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,PrepareForDeserialize,The following statement contains a magic number: m_data = new FlashSector[(size - 6 * 4) / (3 * 4)];
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,ReplyEx,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,PrepareForDeserialize,The following statement contains a magic number: m_data = new FlashSector[(size - 6 * 4) / (3 * 4)];
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,ReplyEx,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,PrepareForDeserialize,The following statement contains a magic number: m_data = new FlashSector[(size - 6 * 4) / (3 * 4)];
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,ReplyEx,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,PrepareForDeserialize,The following statement contains a magic number: m_data = new FlashSector[(size - 6 * 4) / (3 * 4)];
Magic Number,Microsoft.SPOT.Debugger.WireProtocol,Profiling_Stream,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,PrepareForDeserialize,The following statement contains a magic number: payload = new byte[size - 4];
Missing Default,Microsoft.SPOT.Debugger,Decoder,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,DumpCondition,The following switch statement is missing a default case: switch(m_conditionCodes)  				{  					case ArmDisassembler.c_cond_EQ:  						return "EQ";  					case ArmDisassembler.c_cond_NE:  						return "NE";  					case ArmDisassembler.c_cond_CS:  						return "CS";  					case ArmDisassembler.c_cond_CC:  						return "CC";  					case ArmDisassembler.c_cond_MI:  						return "MI";  					case ArmDisassembler.c_cond_PL:  						return "PL";  					case ArmDisassembler.c_cond_VS:  						return "VS";  					case ArmDisassembler.c_cond_VC:  						return "VC";  					case ArmDisassembler.c_cond_HI:  						return "HI";  					case ArmDisassembler.c_cond_LS:  						return "LS";  					case ArmDisassembler.c_cond_GE:  						return "GE";  					case ArmDisassembler.c_cond_LT:  						return "LT";  					case ArmDisassembler.c_cond_GT:  						return "GT";  					case ArmDisassembler.c_cond_LE:  						return "LE";  					case ArmDisassembler.c_cond_AL:  						return "";  				}
Missing Default,Microsoft.SPOT.Debugger,Decoder,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,DumpOperation,The following switch statement is missing a default case: switch(alu)  				{  					case ArmDisassembler.c_operation_AND:  						return "AND";  					case ArmDisassembler.c_operation_EOR:  						return "EOR";  					case ArmDisassembler.c_operation_SUB:  						return "SUB";  					case ArmDisassembler.c_operation_RSB:  						return "RSB";  					case ArmDisassembler.c_operation_ADD:  						return "ADD";  					case ArmDisassembler.c_operation_ADC:  						return "ADC";  					case ArmDisassembler.c_operation_SBC:  						return "SBC";  					case ArmDisassembler.c_operation_RSC:  						return "RSC";  					case ArmDisassembler.c_operation_TST:  						return "TST";  					case ArmDisassembler.c_operation_TEQ:  						return "TEQ";  					case ArmDisassembler.c_operation_CMP:  						return "CMP";  					case ArmDisassembler.c_operation_CMN:  						return "CMN";  					case ArmDisassembler.c_operation_ORR:  						return "ORR";  					case ArmDisassembler.c_operation_MOV:  						return "MOV";  					case ArmDisassembler.c_operation_BIC:  						return "BIC";  					case ArmDisassembler.c_operation_MVN:  						return "MVN";  				}
Missing Default,Microsoft.SPOT.Debugger,Decoder,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,DumpRegister,The following switch statement is missing a default case: switch(reg)  				{  					case ArmDisassembler.c_register_r0:  						return "r0";  					case ArmDisassembler.c_register_r1:  						return "r1";  					case ArmDisassembler.c_register_r2:  						return "r2";  					case ArmDisassembler.c_register_r3:  						return "r3";  					case ArmDisassembler.c_register_r4:  						return "r4";  					case ArmDisassembler.c_register_r5:  						return "r5";  					case ArmDisassembler.c_register_r6:  						return "r6";  					case ArmDisassembler.c_register_r7:  						return "r7";  					case ArmDisassembler.c_register_r8:  						return "r8";  					case ArmDisassembler.c_register_r9:  						return "r9";  					case ArmDisassembler.c_register_r10:  						return "r10";  					case ArmDisassembler.c_register_r11:  						return "r11";  					case ArmDisassembler.c_register_r12:  						return "r12";  					case ArmDisassembler.c_register_sp:  						return "sp";  					case ArmDisassembler.c_register_lr:  						return "lr";  					case ArmDisassembler.c_register_pc:  						return "pc";  				}
Missing Default,Microsoft.SPOT.Debugger,Decoder,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,DumpShiftType,The following switch statement is missing a default case: switch(stype)  				{  					case ArmDisassembler.c_shift_LSL:  						return "LSL";  					case ArmDisassembler.c_shift_LSR:  						return "LSR";  					case ArmDisassembler.c_shift_ASR:  						return "ASR";  					case ArmDisassembler.c_shift_ROR:  						return "ROR";  					case ArmDisassembler.c_shift_RRX:  						return "RRX";  				}
Missing Default,Microsoft.SPOT.Debugger,Decoder,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,DumpHalfWordKind,The following switch statement is missing a default case: switch(kind)  				{  					case ArmDisassembler.c_halfwordkind_SWP:  						return "SWP";  					case ArmDisassembler.c_halfwordkind_U2:  						return "H";  					case ArmDisassembler.c_halfwordkind_I1:  						return "SB";  					case ArmDisassembler.c_halfwordkind_I2:  						return "SH";  				}
Missing Default,Microsoft.SPOT.Debugger,Decoder_DataProcessing,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,PrintPre,The following switch statement is missing a default case: switch(m_alu)  				{  					case ArmDisassembler.c_operation_MOV:  					case ArmDisassembler.c_operation_MVN:  						fMov = true;  						break;    					case ArmDisassembler.c_operation_TEQ:  					case ArmDisassembler.c_operation_TST:  					case ArmDisassembler.c_operation_CMP:  					case ArmDisassembler.c_operation_CMN:  						fTst = true;  						break;  				}
Missing Default,Microsoft.SPOT.Debugger,Decoder_DataProcessing_1,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,Print,The following switch statement is missing a default case: switch(m_alu)  					{  						case ArmDisassembler.c_operation_ADD:  							m_address_Target = (uint)(m_address_PC + 8 + offset);  							break;    						case ArmDisassembler.c_operation_SUB:  							m_address_Target = (uint)(m_address_PC + 8 - offset);  							break;  					}
Missing Default,Microsoft.SPOT.Debugger,Decoder_DataProcessing_2,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,Decoder_DataProcessing_2,The following switch statement is missing a default case: switch(m_shiftType)  					{  						case ArmDisassembler.c_shift_LSR:  						case ArmDisassembler.c_shift_ASR:  							m_shiftValue = 32;  							break;    						case ArmDisassembler.c_shift_ROR:  							m_shiftValue = 1;  							m_shiftType = ArmDisassembler.c_shift_RRX;  							break;  					}
Missing Default,Microsoft.SPOT.Debugger,Decoder_SingleDataTransfer_2,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\ArmDisassembler.cs,Decoder_SingleDataTransfer_2,The following switch statement is missing a default case: switch(m_shiftType)  					{  						case ArmDisassembler.c_shift_LSR:  						case ArmDisassembler.c_shift_ASR:  							m_shiftValue = 32;  							break;    						case ArmDisassembler.c_shift_ROR:  							m_shiftValue = 1;  							m_shiftType = ArmDisassembler.c_shift_RRX;  							break;  					}
Missing Default,Microsoft.SPOT.Debugger,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ComputeHashForField,The following switch statement is missing a default case: switch(tdSub.m_et)  			{  				case ElementType.PELEMENT_TYPE_CLASS:  				case ElementType.PELEMENT_TYPE_VALUETYPE:  					hash = ComputeHashForName(tdSub.Type.FullName' hash);  					break;  			}
Missing Default,Microsoft.SPOT.Debugger,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadCompressedUnsigned,The following switch statement is missing a default case: switch(val & 0xC0)  			{  				case 0x00:  					break;  				case 0x40:  					break;  				case 0x80:  					val = ((val & ~0xC0U) << 8) | m_stream.ReadBits(8);  					break;  				case 0xC0:  					val = ((val & ~0xC0U) << 24) | m_stream.ReadBits(24);  					break;  			}
Missing Default,Microsoft.SPOT.Debugger,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadValue,The following switch statement is missing a default case: switch(m_type.m_base.m_et)  					{  						case ElementType.PELEMENT_TYPE_BOOLEAN:  							m_value = val != 0;  							break;  						case ElementType.PELEMENT_TYPE_CHAR:  							m_value = (char)val;  							break;  						case ElementType.PELEMENT_TYPE_I1:  							m_value = (sbyte)val;  							break;  						case ElementType.PELEMENT_TYPE_U1:  							m_value = (byte)val;  							break;  						case ElementType.PELEMENT_TYPE_I2:  							m_value = (short)val;  							break;  						case ElementType.PELEMENT_TYPE_U2:  							m_value = (ushort)val;  							break;  						case ElementType.PELEMENT_TYPE_I4:  							m_value = (int)val;  							break;  						case ElementType.PELEMENT_TYPE_U4:  							m_value = (uint)val;  							break;  						case ElementType.PELEMENT_TYPE_I8:  							m_value = (long)val;  							break;  						case ElementType.PELEMENT_TYPE_U8:  							m_value = (ulong)val;  							break;  						case ElementType.PELEMENT_TYPE_R4:  							m_value = FloatFromBytes(val);  							break;  						case ElementType.PELEMENT_TYPE_R8:  							m_value = DoubleFromBytes(val);  							break;  					}
Missing Default,Microsoft.SPOT.Debugger,Engine,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Engine.cs,ProcessMessage,The following switch statement is missing a default case: switch(bp.m_cmd)  				{  					case WireProtocol.Commands.c_Monitor_Ping:  						{  							WireProtocol.Commands.Monitor_Ping.Reply cmdReply = new Microsoft.SPOT.Debugger.WireProtocol.Commands.Monitor_Ping.Reply();    							cmdReply.m_source = WireProtocol.Commands.Monitor_Ping.c_Ping_Source_Host;  							cmdReply.m_dbg_flags = (m_stopDebuggerOnConnect ? WireProtocol.Commands.Monitor_Ping.c_Ping_DbgFlag_Stop : 0);    							msg.Reply(CreateConverter()' WireProtocol.Flags.c_NonCritical' cmdReply);    							m_evtPing.Set();    							return true;  						}    					case WireProtocol.Commands.c_Monitor_Message:  						{  							WireProtocol.Commands.Monitor_Message payload = msg.Payload as WireProtocol.Commands.Monitor_Message;    							Debug.Assert(payload != null);    							if(payload != null)  							{  								QueueNotify(m_eventMessage' msg' payload.ToString());  							}    							return true;  						}    					case WireProtocol.Commands.c_Debugging_Messaging_Query:  					case WireProtocol.Commands.c_Debugging_Messaging_Reply:  					case WireProtocol.Commands.c_Debugging_Messaging_Send:  						{  							Debug.Assert(msg.Payload != null);    							if(msg.Payload != null)  							{  								QueueRpc(msg);  							}    							return true;  						}  				}
Missing Default,Microsoft.SPOT.Debugger,RuntimeValue,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Values.cs,RuntimeValue,The following switch statement is missing a default case: switch((RuntimeDataType)handle.m_dt)  			{  				case RuntimeDataType.DATATYPE_BOOLEAN:  					m_corElementType = CorElementType.ELEMENT_TYPE_BOOLEAN;  					break;  				case RuntimeDataType.DATATYPE_I1:  					m_corElementType = CorElementType.ELEMENT_TYPE_I1;  					break;  				case RuntimeDataType.DATATYPE_U1:  					m_corElementType = CorElementType.ELEMENT_TYPE_U1;  					break;                                                                  				case RuntimeDataType.DATATYPE_CHAR:  					m_corElementType = CorElementType.ELEMENT_TYPE_CHAR;  					break;  				case RuntimeDataType.DATATYPE_I2:  					m_corElementType = CorElementType.ELEMENT_TYPE_I2;  					break;  				case RuntimeDataType.DATATYPE_U2:  					m_corElementType = CorElementType.ELEMENT_TYPE_U2;  					break;                                                                  				case RuntimeDataType.DATATYPE_I4:  					m_corElementType = CorElementType.ELEMENT_TYPE_I4;  					break;  				case RuntimeDataType.DATATYPE_U4:  					m_corElementType = CorElementType.ELEMENT_TYPE_U4;  					break;  				case RuntimeDataType.DATATYPE_R4:  					m_corElementType = CorElementType.ELEMENT_TYPE_R4;  					break;                                                                  				case RuntimeDataType.DATATYPE_I8:  					m_corElementType = CorElementType.ELEMENT_TYPE_I8;  					break;  				case RuntimeDataType.DATATYPE_U8:  					m_corElementType = CorElementType.ELEMENT_TYPE_U8;  					break;  				case RuntimeDataType.DATATYPE_R8:  					m_corElementType = CorElementType.ELEMENT_TYPE_R8;  					break;                                                                  				case RuntimeDataType.DATATYPE_DATETIME:  					m_corElementType = CorElementType.ELEMENT_TYPE_VALUETYPE;  					break;  				case RuntimeDataType.DATATYPE_TIMESPAN:  					m_corElementType = CorElementType.ELEMENT_TYPE_VALUETYPE;  					break;                                                                  				case RuntimeDataType.DATATYPE_STRING:  					m_corElementType = CorElementType.ELEMENT_TYPE_STRING;  					break;                                                                  				case RuntimeDataType.DATATYPE_OBJECT:  					m_corElementType = CorElementType.ELEMENT_TYPE_OBJECT;  					break;  				case RuntimeDataType.DATATYPE_BYREF:  					m_corElementType = CorElementType.ELEMENT_TYPE_BYREF;  					break;  				case RuntimeDataType.DATATYPE_ARRAY_BYREF:  					m_corElementType = CorElementType.ELEMENT_TYPE_BYREF;  					break;                                                                  				case RuntimeDataType.DATATYPE_CLASS:  					m_corElementType = CorElementType.ELEMENT_TYPE_CLASS;  					break;  				case RuntimeDataType.DATATYPE_VALUETYPE:  					m_corElementType = CorElementType.ELEMENT_TYPE_VALUETYPE;  					break;                                                                  				case RuntimeDataType.DATATYPE_SZARRAY:  					m_corElementType = CorElementType.ELEMENT_TYPE_SZARRAY;  					break;                                                                  				case RuntimeDataType.DATATYPE_REFLECTION:  					m_corElementType = CorElementType.ELEMENT_TYPE_CLASS;  					break;                      				case RuntimeDataType.DATATYPE_DELEGATE_HEAD:  					m_corElementType = CorElementType.ELEMENT_TYPE_CLASS;  					break;  				case RuntimeDataType.DATATYPE_DELEGATELIST_HEAD:  					m_corElementType = CorElementType.ELEMENT_TYPE_CLASS;  					break;  				case RuntimeDataType.DATATYPE_WEAKCLASS:  					m_corElementType = CorElementType.ELEMENT_TYPE_CLASS;  					break;  				case RuntimeDataType.DATATYPE_TRANSPARENT_PROXY:  					m_corElementType = CorElementType.ELEMENT_TYPE_CLASS;  					break;  			}
Missing Default,Microsoft.SPOT.Messaging,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ComputeHashForField,The following switch statement is missing a default case: switch(tdSub.m_et)  			{  				case ElementType.PELEMENT_TYPE_CLASS:  				case ElementType.PELEMENT_TYPE_VALUETYPE:  					hash = ComputeHashForName(tdSub.Type.FullName' hash);  					break;  			}
Missing Default,Microsoft.SPOT.Messaging,BinaryFormatter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadCompressedUnsigned,The following switch statement is missing a default case: switch(val & 0xC0)  			{  				case 0x00:  					break;  				case 0x40:  					break;  				case 0x80:  					val = ((val & ~0xC0U) << 8) | m_stream.ReadBits(8);  					break;  				case 0xC0:  					val = ((val & ~0xC0U) << 24) | m_stream.ReadBits(24);  					break;  			}
Missing Default,Microsoft.SPOT.Messaging,TypeHandler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\BinaryFormatter.cs,ReadValue,The following switch statement is missing a default case: switch(m_type.m_base.m_et)  					{  						case ElementType.PELEMENT_TYPE_BOOLEAN:  							m_value = val != 0;  							break;  						case ElementType.PELEMENT_TYPE_CHAR:  							m_value = (char)val;  							break;  						case ElementType.PELEMENT_TYPE_I1:  							m_value = (sbyte)val;  							break;  						case ElementType.PELEMENT_TYPE_U1:  							m_value = (byte)val;  							break;  						case ElementType.PELEMENT_TYPE_I2:  							m_value = (short)val;  							break;  						case ElementType.PELEMENT_TYPE_U2:  							m_value = (ushort)val;  							break;  						case ElementType.PELEMENT_TYPE_I4:  							m_value = (int)val;  							break;  						case ElementType.PELEMENT_TYPE_U4:  							m_value = (uint)val;  							break;  						case ElementType.PELEMENT_TYPE_I8:  							m_value = (long)val;  							break;  						case ElementType.PELEMENT_TYPE_U8:  							m_value = (ulong)val;  							break;  						case ElementType.PELEMENT_TYPE_R4:  							m_value = FloatFromBytes(val);  							break;  						case ElementType.PELEMENT_TYPE_R8:  							m_value = DoubleFromBytes(val);  							break;  					}
Missing Default,Microsoft.SPOT.Debugger.WireProtocol,MessageReassembler,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\Controller.cs,Process,The following switch statement is missing a default case: switch(m_state)  					{  						case ReceiveState.Initialize:  							m_rawPos = 0;    							m_base = new MessageBase();  							m_base.m_header = new Packet();    							m_raw = new MessageRaw();  							m_raw.m_header = m_parent.CreateConverter().Serialize(m_base.m_header);    							m_state = ReceiveState.WaitingForHeader;  							goto case ReceiveState.WaitingForHeader;    						case ReceiveState.WaitingForHeader:  							count = m_raw.m_header.Length - m_rawPos;    							bytesRead = m_parent.Read(m_raw.m_header' m_rawPos' count);  							m_rawPos += bytesRead;    							while(m_rawPos > 0)  							{  								int flag_Debugger = ValidSignature(m_parent.marker_Debugger);  								int flag_Packet = ValidSignature(m_parent.marker_Packet);                                    								if(flag_Debugger == 1 || flag_Packet == 1)  								{  									m_state = ReceiveState.ReadingHeader;  									goto case ReceiveState.ReadingHeader;  								}    								if(flag_Debugger == 0 || flag_Packet == 0)  								{  									break; // Partial match.  								}    								m_parent.App.SpuriousCharacters(m_raw.m_header' 0' 1);    								Array.Copy(m_raw.m_header' 1' m_raw.m_header' 0' --m_rawPos);  							}  							break;    						case ReceiveState.ReadingHeader:  							count = m_raw.m_header.Length - m_rawPos;    							bytesRead = m_parent.Read(m_raw.m_header' m_rawPos' count);    							m_rawPos += bytesRead;    							if(bytesRead != count)  								break;    							m_state = ReceiveState.CompleteHeader;  							goto case ReceiveState.CompleteHeader;    						case ReceiveState.CompleteHeader:  							try  							{  								m_parent.CreateConverter().Deserialize(m_base.m_header' m_raw.m_header);    								if(VerifyHeader() == true)  								{  									bool fReply = (m_base.m_header.m_flags & Flags.c_Reply) != 0;    									m_base.DumpHeader("Receiving");    									if(m_base.m_header.m_size != 0)  									{  										m_raw.m_payload = new byte[m_base.m_header.m_size];  										//reuse m_rawPos for position in header to read.  										m_rawPos = 0;    										m_state = ReceiveState.ReadingPayload;  										goto case ReceiveState.ReadingPayload;  									}  									else  									{  										m_state = ReceiveState.CompletePayload;  										goto case ReceiveState.CompletePayload;  									}  								}  							}  							catch(ThreadAbortException)  							{  								throw;  							}  							catch(Exception e)  							{  								Console.WriteLine("Fault at payload deserialization:\n\n{0}"' e.ToString());  							}    							m_state = ReceiveState.Initialize;    							if((m_base.m_header.m_flags & Flags.c_NonCritical) == 0)  							{  								IncomingMessage.ReplyBadPacket(m_parent' Flags.c_BadHeader);  							}    							break;    						case ReceiveState.ReadingPayload:  							count = m_raw.m_payload.Length - m_rawPos;    							bytesRead = m_parent.Read(m_raw.m_payload' m_rawPos' count);    							m_rawPos += bytesRead;    							if(bytesRead != count)  								break;    							m_state = ReceiveState.CompletePayload;  							goto case ReceiveState.CompletePayload;    						case ReceiveState.CompletePayload:  							if(VerifyPayload() == true)  							{  								try  								{  									bool fReply = (m_base.m_header.m_flags & Flags.c_Reply) != 0;    									if((m_base.m_header.m_flags & Flags.c_NACK) != 0)  									{  										m_raw.m_payload = null;  									}    									m_parent.App.ProcessMessage(this.GetCompleteMessage()' fReply);    									m_state = ReceiveState.Initialize;  									return;  								}  								catch(ThreadAbortException)  								{  									throw;  								}  								catch(Exception e)  								{  									Console.WriteLine("Fault at payload deserialization:\n\n{0}"' e.ToString());  								}  							}    							m_state = ReceiveState.Initialize;    							if((m_base.m_header.m_flags & Flags.c_NonCritical) == 0)  							{  								IncomingMessage.ReplyBadPacket(m_parent' Flags.c_BadPayload);  							}    							break;               					}
Missing Default,Microsoft.SPOT.Debugger.WireProtocol,Commands,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,ResolveCommandToPayload,The following switch statement is missing a default case: switch(cmd)  				{  					case c_Monitor_Ping:  						return new Monitor_Ping.Reply();  					case c_Monitor_OemInfo:  						return new Monitor_OemInfo.Reply();  					case c_Monitor_ReadMemory:  						return new Monitor_ReadMemory.Reply();  					case c_Monitor_CheckMemory:  						return new Monitor_CheckMemory.Reply();  					case c_Monitor_MemoryMap:  						return new Monitor_MemoryMap.Reply();  					case c_Monitor_DeploymentMap:  						return new Monitor_DeploymentMap.Reply();  					case c_Monitor_FlashSectorMap:  						return new Monitor_FlashSectorMap.Reply();    					case c_Debugging_Execution_BasePtr:  						return new Debugging_Execution_BasePtr.Reply();  					case c_Debugging_Execution_ChangeConditions:  						return new Debugging_Execution_ChangeConditions.Reply();  					case c_Debugging_Execution_Allocate:  						return new Debugging_Execution_Allocate.Reply();  					case c_Debugging_Execution_BreakpointStatus:  						return new Debugging_Execution_BreakpointStatus.Reply();  					case c_Debugging_Execution_QueryCLRCapabilities:  						return new Debugging_Execution_QueryCLRCapabilities.Reply();    					case c_Debugging_MFUpdate_Start:  						return new Debugging_MFUpdate_Start.Reply();  					case c_Debugging_MFUpdate_AuthCmd:  						return new Debugging_MFUpdate_AuthCommand.Reply();  					case c_Debugging_MFUpdate_Authenticate:  						return new Debugging_MFUpdate_Authenticate.Reply();  					case c_Debugging_MFUpdate_GetMissingPkts:  						return new Debugging_MFUpdate_GetMissingPkts.Reply();  					case c_Debugging_MFUpdate_AddPacket:  						return new Debugging_MFUpdate_AddPacket.Reply();  					case c_Debugging_MFUpdate_Install:  						return new Debugging_MFUpdate_Install.Reply();    					case c_Debugging_UpgradeToSsl:  						return new Debugging_UpgradeToSsl.Reply();    					case c_Debugging_Thread_Create:  						return new Debugging_Thread_Create.Reply();  					case c_Debugging_Thread_CreateEx:  						return new Debugging_Thread_CreateEx.Reply();  					case c_Debugging_Thread_List:  						return new Debugging_Thread_List.Reply();  					case c_Debugging_Thread_Stack:  						return new Debugging_Thread_Stack.Reply();  					case c_Debugging_Thread_Kill:  						return new Debugging_Thread_Kill.Reply();  					case c_Debugging_Thread_GetException:  						return new Debugging_Value_Reply();  					case c_Debugging_Thread_Get:  						return new Debugging_Value_Reply();    					case c_Debugging_Stack_Info:  						return new Debugging_Stack_Info.Reply();    					case c_Debugging_Value_GetStack:  						return new Debugging_Value_Reply();  					case c_Debugging_Value_GetField:  						return new Debugging_Value_Reply();  					case c_Debugging_Value_GetArray:  						return new Debugging_Value_Reply();  					case c_Debugging_Value_GetBlock:  						return new Debugging_Value_Reply();  					case c_Debugging_Value_GetScratchPad:  						return new Debugging_Value_Reply();  					case c_Debugging_Value_AllocateObject:  						return new Debugging_Value_Reply();  					case c_Debugging_Value_AllocateString:  						return new Debugging_Value_Reply();  					case c_Debugging_Value_AllocateArray:  						return new Debugging_Value_Reply();  					case c_Debugging_Value_Assign:  						return new Debugging_Value_Reply();    					case c_Debugging_TypeSys_Assemblies:  						return new Debugging_TypeSys_Assemblies.Reply();  					case c_Debugging_TypeSys_AppDomains:  						return new Debugging_TypeSys_AppDomains.Reply();    					case c_Debugging_Resolve_Type:  						return new Debugging_Resolve_Type.Reply();  					case c_Debugging_Resolve_Field:  						return new Debugging_Resolve_Field.Reply();  					case c_Debugging_Resolve_Method:  						return new Debugging_Resolve_Method.Reply();  					case c_Debugging_Resolve_Assembly:  						return new Debugging_Resolve_Assembly.Reply();  					case c_Debugging_Resolve_VirtualMethod:  						return new Debugging_Resolve_VirtualMethod.Reply();  					case c_Debugging_Resolve_AppDomain:  						return new Debugging_Resolve_AppDomain.Reply();    					case c_Debugging_Lcd_GetFrame:  						return new Debugging_Lcd_GetFrame.Reply();    					case c_Debugging_Messaging_Query:  						return new Debugging_Messaging_Query.Reply();  					case c_Debugging_Messaging_Send:  						return new Debugging_Messaging_Send.Reply();  					case c_Debugging_Messaging_Reply:  						return new Debugging_Messaging_Reply.Reply();    					case c_Debugging_Deployment_Status:  						if(capabilities.IncrementalDeployment)  							return new Debugging_Deployment_Status.ReplyEx();  						else  							return new Debugging_Deployment_Status.Reply();    					case c_Profiling_Command:  						return new Profiling_Command.Reply();  				}
Missing Default,Microsoft.SPOT.Debugger.WireProtocol,Commands,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\Add-In Project\Debugger\WireProtocol.cs,ResolveCommandToPayload,The following switch statement is missing a default case: switch(cmd)  				{  					case c_Monitor_Ping:  						return new Monitor_Ping();  					case c_Monitor_Message:  						return new Monitor_Message();  					case c_Monitor_ReadMemory:  						return new Monitor_ReadMemory();  					case c_Monitor_WriteMemory:  						return new Monitor_WriteMemory();  					case c_Monitor_CheckMemory:  						return new Monitor_CheckMemory();  					case c_Monitor_EraseMemory:  						return new Monitor_EraseMemory();  					case c_Monitor_Execute:  						return new Monitor_Execute();  					case c_Monitor_MemoryMap:  						return new Monitor_MemoryMap();  					case c_Monitor_Reboot:  						return new Monitor_Reboot();  					case c_Monitor_DeploymentMap:  						return new Monitor_DeploymentMap();  					case c_Monitor_FlashSectorMap:  						return new Monitor_FlashSectorMap();  					case c_Monitor_SignatureKeyUpdate:  						return new Monitor_SignatureKeyUpdate();    					case c_Debugging_Execution_BasePtr:  						return new Debugging_Execution_BasePtr();  					case c_Debugging_Execution_ChangeConditions:  						return new Debugging_Execution_ChangeConditions();  					case c_Debugging_Execution_SecurityKey:  						return new Debugging_Execution_SecurityKey();  					case c_Debugging_Execution_Unlock:  						return new Debugging_Execution_Unlock();  					case c_Debugging_Execution_Allocate:  						return new Debugging_Execution_Allocate();  					case c_Debugging_Execution_BreakpointHit:  						return new Debugging_Execution_BreakpointHit();  					case c_Debugging_Execution_BreakpointStatus:  						return new Debugging_Execution_BreakpointStatus();  					case c_Debugging_Execution_QueryCLRCapabilities:  						return new Debugging_Execution_QueryCLRCapabilities();  					case c_Debugging_Execution_SetCurrentAppDomain:  						return new Debugging_Execution_SetCurrentAppDomain();    					case c_Debugging_MFUpdate_Start:  						return new Debugging_MFUpdate_Start();  					case c_Debugging_MFUpdate_AuthCmd:  						return new Debugging_MFUpdate_AuthCommand();  					case c_Debugging_MFUpdate_Authenticate:  						return new Debugging_MFUpdate_Authenticate();  					case c_Debugging_MFUpdate_GetMissingPkts:  						return new Debugging_MFUpdate_GetMissingPkts();  					case c_Debugging_MFUpdate_AddPacket:  						return new Debugging_MFUpdate_AddPacket();  					case c_Debugging_MFUpdate_Install:  						return new Debugging_MFUpdate_Install();    					case c_Debugging_UpgradeToSsl:  						return new Debugging_UpgradeToSsl();    					case c_Debugging_Thread_Create:  						return new Debugging_Thread_Create();  					case c_Debugging_Thread_CreateEx:  						return new Debugging_Thread_CreateEx();  					case c_Debugging_Thread_List:  						return new Debugging_Thread_List();  					case c_Debugging_Thread_Stack:  						return new Debugging_Thread_Stack();  					case c_Debugging_Thread_Kill:  						return new Debugging_Thread_Kill();  					case c_Debugging_Thread_Suspend:  						return new Debugging_Thread_Suspend();  					case c_Debugging_Thread_Resume:  						return new Debugging_Thread_Resume();  					case c_Debugging_Thread_GetException:  						return new Debugging_Thread_GetException();  					case c_Debugging_Thread_Unwind:  						return new Debugging_Thread_Unwind();  					case c_Debugging_Thread_Get:  						return new Debugging_Thread_Get();    					case c_Debugging_Stack_Info:  						return new Debugging_Stack_Info();  					case c_Debugging_Stack_SetIP:  						return new Debugging_Stack_SetIP();    					case c_Debugging_Value_ResizeScratchPad:  						return new Debugging_Value_ResizeScratchPad();  					case c_Debugging_Value_GetStack:  						return new Debugging_Value_GetStack();  					case c_Debugging_Value_GetField:  						return new Debugging_Value_GetField();  					case c_Debugging_Value_GetArray:  						return new Debugging_Value_GetArray();  					case c_Debugging_Value_GetBlock:  						return new Debugging_Value_GetBlock();  					case c_Debugging_Value_GetScratchPad:  						return new Debugging_Value_GetScratchPad();  					case c_Debugging_Value_SetBlock:  						return new Debugging_Value_SetBlock();  					case c_Debugging_Value_SetArray:  						return new Debugging_Value_SetArray();  					case c_Debugging_Value_AllocateObject:  						return new Debugging_Value_AllocateObject();  					case c_Debugging_Value_AllocateString:  						return new Debugging_Value_AllocateString();  					case c_Debugging_Value_AllocateArray:  						return new Debugging_Value_AllocateArray();  					case c_Debugging_Value_Assign:  						return new Debugging_Value_Assign();    					case c_Debugging_TypeSys_Assemblies:  						return new Debugging_TypeSys_Assemblies();  					case c_Debugging_TypeSys_AppDomains:  						return new Debugging_TypeSys_AppDomains();    					case c_Debugging_Resolve_Type:  						return new Debugging_Resolve_Type();  					case c_Debugging_Resolve_Field:  						return new Debugging_Resolve_Field();  					case c_Debugging_Resolve_Method:  						return new Debugging_Resolve_Method();  					case c_Debugging_Resolve_Assembly:  						return new Debugging_Resolve_Assembly();  					case c_Debugging_Resolve_VirtualMethod:  						return new Debugging_Resolve_VirtualMethod();  					case c_Debugging_Resolve_AppDomain:  						return new Debugging_Resolve_AppDomain();    					case c_Debugging_Lcd_NewFrame:  						return new Debugging_Lcd_NewFrame();  					case c_Debugging_Lcd_NewFrameData:  						return new Debugging_Lcd_NewFrameData();  					case c_Debugging_Lcd_GetFrame:  						return new Debugging_Lcd_GetFrame();    					case c_Debugging_Button_Report:  						return new Debugging_Button_Report();  					case c_Debugging_Button_Inject:  						return new Debugging_Button_Inject();    					case c_Debugging_Messaging_Query:  						return new Debugging_Messaging_Query();  					case c_Debugging_Messaging_Send:  						return new Debugging_Messaging_Send();  					case c_Debugging_Messaging_Reply:  						return new Debugging_Messaging_Reply();    					case c_Debugging_Deployment_Status:  						return new Debugging_Deployment_Status();    					case c_Debugging_Info_SetJMC:  						return new Debugging_Info_SetJMC();    					case c_Profiling_Stream:  						return new Profiling_Stream();  				}
