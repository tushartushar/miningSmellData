Implementation smell,Namespace,Class,File,Method,Description
Long Method,MFMetaDataProcessor,TinyMethodDefinitionTable,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Tables\TinyMethodDefinitionTable.cs,GetFlags,The method has 134 lines of code.
Complex Method,MFMetaDataProcessor,TinyTablesContext,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Tables\TinyTablesContext.cs,SortTypesAccordingUsagesImpl,Cyclomatic complexity of the method is 8
Complex Method,MFMetaDataProcessor,TinyFieldDefinitionTable,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Tables\TinyFieldDefinitionTable.cs,GetFlags,Cyclomatic complexity of the method is 10
Complex Method,MFMetaDataProcessor,TinyMethodDefinitionTable,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Tables\TinyMethodDefinitionTable.cs,GetFlags,Cyclomatic complexity of the method is 18
Complex Method,MFMetaDataProcessor,TinySignaturesTable,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Tables\TinySignaturesTable.cs,WriteDataType,Cyclomatic complexity of the method is 11
Complex Method,MFMetaDataProcessor,TinyTypeDefinitionTable,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Tables\TinyTypeDefinitionTable.cs,GetFlags,Cyclomatic complexity of the method is 11
Complex Conditional,MFMetaDataProcessor,NativeMethodsCrc,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Utility\NativeMethodsCrc.cs,UpdateCrc,The conditional expression  "(type.IsClass || type.IsValueType) &&                  (method.RVA == 0xFFFFFFF && !method.IsAbstract)"  is complex.
Magic Number,MFMetaDataProcessor,TinyBinaryWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Endianness\TinyBinaryWriter.cs,WriteMetadataToken,The following statement contains a magic number: if (value <= 0x7F)              {                  WriteByte((Byte) value);              }              else if (value <= 0x3FFF)              {                  WriteByte((Byte)(value >> 8 | 0x80));                  WriteByte((Byte)value);              }              else              {                  WriteByte((Byte)(value >> 24 | 0xC0));                  WriteByte((Byte)(value >> 16));                  WriteByte((Byte)(value >> 8));                  WriteByte((Byte)value);              }
Magic Number,MFMetaDataProcessor,TinyBinaryWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Endianness\TinyBinaryWriter.cs,WriteMetadataToken,The following statement contains a magic number: if (value <= 0x7F)              {                  WriteByte((Byte) value);              }              else if (value <= 0x3FFF)              {                  WriteByte((Byte)(value >> 8 | 0x80));                  WriteByte((Byte)value);              }              else              {                  WriteByte((Byte)(value >> 24 | 0xC0));                  WriteByte((Byte)(value >> 16));                  WriteByte((Byte)(value >> 8));                  WriteByte((Byte)value);              }
Magic Number,MFMetaDataProcessor,TinyBinaryWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Endianness\TinyBinaryWriter.cs,WriteMetadataToken,The following statement contains a magic number: if (value <= 0x7F)              {                  WriteByte((Byte) value);              }              else if (value <= 0x3FFF)              {                  WriteByte((Byte)(value >> 8 | 0x80));                  WriteByte((Byte)value);              }              else              {                  WriteByte((Byte)(value >> 24 | 0xC0));                  WriteByte((Byte)(value >> 16));                  WriteByte((Byte)(value >> 8));                  WriteByte((Byte)value);              }
Magic Number,MFMetaDataProcessor,TinyBinaryWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Endianness\TinyBinaryWriter.cs,WriteMetadataToken,The following statement contains a magic number: if (value <= 0x7F)              {                  WriteByte((Byte) value);              }              else if (value <= 0x3FFF)              {                  WriteByte((Byte)(value >> 8 | 0x80));                  WriteByte((Byte)value);              }              else              {                  WriteByte((Byte)(value >> 24 | 0xC0));                  WriteByte((Byte)(value >> 16));                  WriteByte((Byte)(value >> 8));                  WriteByte((Byte)value);              }
Magic Number,MFMetaDataProcessor,BigEndianBinaryWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Endianness\TinyBinaryWriter.cs,WriteUInt32,The following statement contains a magic number: fixed (Byte* pBytes = _helper.bytes)                  {                      _baseWriter.Write(pBytes[3]);                      _baseWriter.Write(pBytes[2]);                      _baseWriter.Write(pBytes[1]);                      _baseWriter.Write(pBytes[0]);                  }
Magic Number,MFMetaDataProcessor,BigEndianBinaryWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Endianness\TinyBinaryWriter.cs,WriteUInt32,The following statement contains a magic number: fixed (Byte* pBytes = _helper.bytes)                  {                      _baseWriter.Write(pBytes[3]);                      _baseWriter.Write(pBytes[2]);                      _baseWriter.Write(pBytes[1]);                      _baseWriter.Write(pBytes[0]);                  }
Magic Number,MFMetaDataProcessor,BigEndianBinaryWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Endianness\TinyBinaryWriter.cs,WriteUInt64,The following statement contains a magic number: fixed (Byte* pBytes = _helper.bytes)                  {                      _baseWriter.Write(pBytes[7]);                      _baseWriter.Write(pBytes[6]);                      _baseWriter.Write(pBytes[5]);                      _baseWriter.Write(pBytes[4]);                      _baseWriter.Write(pBytes[3]);                      _baseWriter.Write(pBytes[2]);                      _baseWriter.Write(pBytes[1]);                      _baseWriter.Write(pBytes[0]);                  }
Magic Number,MFMetaDataProcessor,BigEndianBinaryWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Endianness\TinyBinaryWriter.cs,WriteUInt64,The following statement contains a magic number: fixed (Byte* pBytes = _helper.bytes)                  {                      _baseWriter.Write(pBytes[7]);                      _baseWriter.Write(pBytes[6]);                      _baseWriter.Write(pBytes[5]);                      _baseWriter.Write(pBytes[4]);                      _baseWriter.Write(pBytes[3]);                      _baseWriter.Write(pBytes[2]);                      _baseWriter.Write(pBytes[1]);                      _baseWriter.Write(pBytes[0]);                  }
Magic Number,MFMetaDataProcessor,BigEndianBinaryWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Endianness\TinyBinaryWriter.cs,WriteUInt64,The following statement contains a magic number: fixed (Byte* pBytes = _helper.bytes)                  {                      _baseWriter.Write(pBytes[7]);                      _baseWriter.Write(pBytes[6]);                      _baseWriter.Write(pBytes[5]);                      _baseWriter.Write(pBytes[4]);                      _baseWriter.Write(pBytes[3]);                      _baseWriter.Write(pBytes[2]);                      _baseWriter.Write(pBytes[1]);                      _baseWriter.Write(pBytes[0]);                  }
Magic Number,MFMetaDataProcessor,BigEndianBinaryWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Endianness\TinyBinaryWriter.cs,WriteUInt64,The following statement contains a magic number: fixed (Byte* pBytes = _helper.bytes)                  {                      _baseWriter.Write(pBytes[7]);                      _baseWriter.Write(pBytes[6]);                      _baseWriter.Write(pBytes[5]);                      _baseWriter.Write(pBytes[4]);                      _baseWriter.Write(pBytes[3]);                      _baseWriter.Write(pBytes[2]);                      _baseWriter.Write(pBytes[1]);                      _baseWriter.Write(pBytes[0]);                  }
Magic Number,MFMetaDataProcessor,BigEndianBinaryWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Endianness\TinyBinaryWriter.cs,WriteUInt64,The following statement contains a magic number: fixed (Byte* pBytes = _helper.bytes)                  {                      _baseWriter.Write(pBytes[7]);                      _baseWriter.Write(pBytes[6]);                      _baseWriter.Write(pBytes[5]);                      _baseWriter.Write(pBytes[4]);                      _baseWriter.Write(pBytes[3]);                      _baseWriter.Write(pBytes[2]);                      _baseWriter.Write(pBytes[1]);                      _baseWriter.Write(pBytes[0]);                  }
Magic Number,MFMetaDataProcessor,BigEndianBinaryWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Endianness\TinyBinaryWriter.cs,WriteUInt64,The following statement contains a magic number: fixed (Byte* pBytes = _helper.bytes)                  {                      _baseWriter.Write(pBytes[7]);                      _baseWriter.Write(pBytes[6]);                      _baseWriter.Write(pBytes[5]);                      _baseWriter.Write(pBytes[4]);                      _baseWriter.Write(pBytes[3]);                      _baseWriter.Write(pBytes[2]);                      _baseWriter.Write(pBytes[1]);                      _baseWriter.Write(pBytes[0]);                  }
Magic Number,MFMetaDataProcessor,BigEndianBinaryWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Endianness\TinyBinaryWriter.cs,WriteSingle,The following statement contains a magic number: fixed (Byte* pBytes = _helper.bytes)                  {                      _baseWriter.Write(pBytes[3]);                      _baseWriter.Write(pBytes[2]);                      _baseWriter.Write(pBytes[1]);                      _baseWriter.Write(pBytes[0]);                  }
Magic Number,MFMetaDataProcessor,BigEndianBinaryWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Endianness\TinyBinaryWriter.cs,WriteSingle,The following statement contains a magic number: fixed (Byte* pBytes = _helper.bytes)                  {                      _baseWriter.Write(pBytes[3]);                      _baseWriter.Write(pBytes[2]);                      _baseWriter.Write(pBytes[1]);                      _baseWriter.Write(pBytes[0]);                  }
Magic Number,MFMetaDataProcessor,BigEndianBinaryWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Endianness\TinyBinaryWriter.cs,WriteDouble,The following statement contains a magic number: fixed (Byte* pBytes = _helper.bytes)                  {                      _baseWriter.Write(pBytes[7]);                      _baseWriter.Write(pBytes[6]);                      _baseWriter.Write(pBytes[5]);                      _baseWriter.Write(pBytes[4]);                      _baseWriter.Write(pBytes[3]);                      _baseWriter.Write(pBytes[2]);                      _baseWriter.Write(pBytes[1]);                      _baseWriter.Write(pBytes[0]);                  }
Magic Number,MFMetaDataProcessor,BigEndianBinaryWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Endianness\TinyBinaryWriter.cs,WriteDouble,The following statement contains a magic number: fixed (Byte* pBytes = _helper.bytes)                  {                      _baseWriter.Write(pBytes[7]);                      _baseWriter.Write(pBytes[6]);                      _baseWriter.Write(pBytes[5]);                      _baseWriter.Write(pBytes[4]);                      _baseWriter.Write(pBytes[3]);                      _baseWriter.Write(pBytes[2]);                      _baseWriter.Write(pBytes[1]);                      _baseWriter.Write(pBytes[0]);                  }
Magic Number,MFMetaDataProcessor,BigEndianBinaryWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Endianness\TinyBinaryWriter.cs,WriteDouble,The following statement contains a magic number: fixed (Byte* pBytes = _helper.bytes)                  {                      _baseWriter.Write(pBytes[7]);                      _baseWriter.Write(pBytes[6]);                      _baseWriter.Write(pBytes[5]);                      _baseWriter.Write(pBytes[4]);                      _baseWriter.Write(pBytes[3]);                      _baseWriter.Write(pBytes[2]);                      _baseWriter.Write(pBytes[1]);                      _baseWriter.Write(pBytes[0]);                  }
Magic Number,MFMetaDataProcessor,BigEndianBinaryWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Endianness\TinyBinaryWriter.cs,WriteDouble,The following statement contains a magic number: fixed (Byte* pBytes = _helper.bytes)                  {                      _baseWriter.Write(pBytes[7]);                      _baseWriter.Write(pBytes[6]);                      _baseWriter.Write(pBytes[5]);                      _baseWriter.Write(pBytes[4]);                      _baseWriter.Write(pBytes[3]);                      _baseWriter.Write(pBytes[2]);                      _baseWriter.Write(pBytes[1]);                      _baseWriter.Write(pBytes[0]);                  }
Magic Number,MFMetaDataProcessor,BigEndianBinaryWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Endianness\TinyBinaryWriter.cs,WriteDouble,The following statement contains a magic number: fixed (Byte* pBytes = _helper.bytes)                  {                      _baseWriter.Write(pBytes[7]);                      _baseWriter.Write(pBytes[6]);                      _baseWriter.Write(pBytes[5]);                      _baseWriter.Write(pBytes[4]);                      _baseWriter.Write(pBytes[3]);                      _baseWriter.Write(pBytes[2]);                      _baseWriter.Write(pBytes[1]);                      _baseWriter.Write(pBytes[0]);                  }
Magic Number,MFMetaDataProcessor,BigEndianBinaryWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Endianness\TinyBinaryWriter.cs,WriteDouble,The following statement contains a magic number: fixed (Byte* pBytes = _helper.bytes)                  {                      _baseWriter.Write(pBytes[7]);                      _baseWriter.Write(pBytes[6]);                      _baseWriter.Write(pBytes[5]);                      _baseWriter.Write(pBytes[4]);                      _baseWriter.Write(pBytes[3]);                      _baseWriter.Write(pBytes[2]);                      _baseWriter.Write(pBytes[1]);                      _baseWriter.Write(pBytes[0]);                  }
Magic Number,MFMetaDataProcessor,CodeWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Mono.Cecil\CodeWriter.cs,PreProcessMethod,The following statement contains a magic number: foreach (var instruction in methodDefinition.Body.Instructions)              {                  if (offset != 0)                  {                      if (offsetChanged)                      {                          yield return new Tuple<UInt32' UInt32>(                              (UInt32)instruction.Offset' (UInt32)(instruction.Offset + offset));                          offsetChanged = false;                      }                      instruction.Offset += offset;                  }                    switch (instruction.OpCode.OperandType)                  {                      case OperandType.InlineSwitch:  		                var targets = (Instruction[]) instruction.Operand;                          offset -= 3; // One bye used instead of Int32  		                offset -= 2 * targets.Length; // each target use Int16 instead of Int32                          offsetChanged = true;                          break;                      case OperandType.InlineString:                          stringTable.GetOrCreateStringId((String) instruction.Operand' false);                          offset -= 2;                          offsetChanged = true;                          break;                      case OperandType.InlineMethod:                      case OperandType.InlineField:                      case OperandType.InlineType:                      case OperandType.InlineBrTarget:                          // In full .NET these instructions followed by double word operand                          // but in .NET Micro Framework these instruction's operand are word                          offset -= 2;                          offsetChanged = true;                          break;                  }              }
Magic Number,MFMetaDataProcessor,CodeWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Mono.Cecil\CodeWriter.cs,PreProcessMethod,The following statement contains a magic number: foreach (var instruction in methodDefinition.Body.Instructions)              {                  if (offset != 0)                  {                      if (offsetChanged)                      {                          yield return new Tuple<UInt32' UInt32>(                              (UInt32)instruction.Offset' (UInt32)(instruction.Offset + offset));                          offsetChanged = false;                      }                      instruction.Offset += offset;                  }                    switch (instruction.OpCode.OperandType)                  {                      case OperandType.InlineSwitch:  		                var targets = (Instruction[]) instruction.Operand;                          offset -= 3; // One bye used instead of Int32  		                offset -= 2 * targets.Length; // each target use Int16 instead of Int32                          offsetChanged = true;                          break;                      case OperandType.InlineString:                          stringTable.GetOrCreateStringId((String) instruction.Operand' false);                          offset -= 2;                          offsetChanged = true;                          break;                      case OperandType.InlineMethod:                      case OperandType.InlineField:                      case OperandType.InlineType:                      case OperandType.InlineBrTarget:                          // In full .NET these instructions followed by double word operand                          // but in .NET Micro Framework these instruction's operand are word                          offset -= 2;                          offsetChanged = true;                          break;                  }              }
Magic Number,MFMetaDataProcessor,CodeWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Mono.Cecil\CodeWriter.cs,PreProcessMethod,The following statement contains a magic number: foreach (var instruction in methodDefinition.Body.Instructions)              {                  if (offset != 0)                  {                      if (offsetChanged)                      {                          yield return new Tuple<UInt32' UInt32>(                              (UInt32)instruction.Offset' (UInt32)(instruction.Offset + offset));                          offsetChanged = false;                      }                      instruction.Offset += offset;                  }                    switch (instruction.OpCode.OperandType)                  {                      case OperandType.InlineSwitch:  		                var targets = (Instruction[]) instruction.Operand;                          offset -= 3; // One bye used instead of Int32  		                offset -= 2 * targets.Length; // each target use Int16 instead of Int32                          offsetChanged = true;                          break;                      case OperandType.InlineString:                          stringTable.GetOrCreateStringId((String) instruction.Operand' false);                          offset -= 2;                          offsetChanged = true;                          break;                      case OperandType.InlineMethod:                      case OperandType.InlineField:                      case OperandType.InlineType:                      case OperandType.InlineBrTarget:                          // In full .NET these instructions followed by double word operand                          // but in .NET Micro Framework these instruction's operand are word                          offset -= 2;                          offsetChanged = true;                          break;                  }              }
Magic Number,MFMetaDataProcessor,CodeWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Mono.Cecil\CodeWriter.cs,PreProcessMethod,The following statement contains a magic number: foreach (var instruction in methodDefinition.Body.Instructions)              {                  if (offset != 0)                  {                      if (offsetChanged)                      {                          yield return new Tuple<UInt32' UInt32>(                              (UInt32)instruction.Offset' (UInt32)(instruction.Offset + offset));                          offsetChanged = false;                      }                      instruction.Offset += offset;                  }                    switch (instruction.OpCode.OperandType)                  {                      case OperandType.InlineSwitch:  		                var targets = (Instruction[]) instruction.Operand;                          offset -= 3; // One bye used instead of Int32  		                offset -= 2 * targets.Length; // each target use Int16 instead of Int32                          offsetChanged = true;                          break;                      case OperandType.InlineString:                          stringTable.GetOrCreateStringId((String) instruction.Operand' false);                          offset -= 2;                          offsetChanged = true;                          break;                      case OperandType.InlineMethod:                      case OperandType.InlineField:                      case OperandType.InlineType:                      case OperandType.InlineBrTarget:                          // In full .NET these instructions followed by double word operand                          // but in .NET Micro Framework these instruction's operand are word                          offset -= 2;                          offsetChanged = true;                          break;                  }              }
Magic Number,MFMetaDataProcessor,CodeWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Mono.Cecil\CodeWriter.cs,CorrectStackDepthByPushes,The following statement contains a magic number: switch (instruction.OpCode.StackBehaviourPush)              {                  case StackBehaviour.Push1:                  case StackBehaviour.Pushi:                  case StackBehaviour.Pushi8:                  case StackBehaviour.Pushr4:                  case StackBehaviour.Pushr8:                  case StackBehaviour.Pushref:                      ++size;                      break;                  case StackBehaviour.Push1_push1:                      size += 2;                      break;              }
Magic Number,MFMetaDataProcessor,CodeWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Mono.Cecil\CodeWriter.cs,CorrectStackDepthByPops,The following statement contains a magic number: switch (instruction.OpCode.StackBehaviourPop)              {                  case StackBehaviour.Pop1:                  case StackBehaviour.Popi:                  case StackBehaviour.Popref:                      --size;                      break;                  case StackBehaviour.Pop1_pop1:                  case StackBehaviour.Popi_pop1:                  case StackBehaviour.Popi_popi:                  case StackBehaviour.Popi_popi8:                  case StackBehaviour.Popi_popr4:                  case StackBehaviour.Popi_popr8:                  case StackBehaviour.Popref_pop1:                  case StackBehaviour.Popref_popi:                      size -= 2;                      break;                  case StackBehaviour.Popi_popi_popi:                  case StackBehaviour.Popref_popi_popi:                  case StackBehaviour.Popref_popi_popi8:                  case StackBehaviour.Popref_popi_popr4:                  case StackBehaviour.Popref_popi_popr8:                  case StackBehaviour.Popref_popi_popref:                      size -= 3;                      break;              }
Magic Number,MFMetaDataProcessor,CodeWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Mono.Cecil\CodeWriter.cs,CorrectStackDepthByPops,The following statement contains a magic number: switch (instruction.OpCode.StackBehaviourPop)              {                  case StackBehaviour.Pop1:                  case StackBehaviour.Popi:                  case StackBehaviour.Popref:                      --size;                      break;                  case StackBehaviour.Pop1_pop1:                  case StackBehaviour.Popi_pop1:                  case StackBehaviour.Popi_popi:                  case StackBehaviour.Popi_popi8:                  case StackBehaviour.Popi_popr4:                  case StackBehaviour.Popi_popr8:                  case StackBehaviour.Popref_pop1:                  case StackBehaviour.Popref_popi:                      size -= 2;                      break;                  case StackBehaviour.Popi_popi_popi:                  case StackBehaviour.Popref_popi_popi:                  case StackBehaviour.Popref_popi_popi8:                  case StackBehaviour.Popref_popi_popr4:                  case StackBehaviour.Popref_popi_popr8:                  case StackBehaviour.Popref_popi_popref:                      size -= 3;                      break;              }
Magic Number,MFMetaDataProcessor,CodeWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Mono.Cecil\CodeWriter.cs,WriteOperand,The following statement contains a magic number: switch (operandType)  		    {  		        case OperandType.InlineSwitch:  		        {  		            var targets = (Instruction[]) operand;                      _writer.WriteByte((Byte)targets.Length);  		            var diff = instruction.Offset + opcode.Size + 2 * targets.Length + 1;  		            foreach (var item in targets)  		            {  		                _writer.WriteInt16((Int16)(GetTargetOffset(item) - diff));  		            }  		            break;  		        }  		        case OperandType.ShortInlineBrTarget:  		        {  		            var target = (Instruction) operand;  		            _writer.WriteSByte((SByte)                          (GetTargetOffset(target) - (instruction.Offset + opcode.Size + 1)));  		            break;  		        }  		        case OperandType.InlineBrTarget:  		        {  		            var target = (Instruction) operand;                      _writer.WriteInt16((Int16)                          (GetTargetOffset(target) - (instruction.Offset + opcode.Size + 2)));  		            break;  		        }  		        case OperandType.ShortInlineVar:                      _writer.WriteByte((byte)GetVariableIndex((VariableDefinition)operand));  		            break;  		        case OperandType.ShortInlineArg:                      _writer.WriteByte((byte)GetParameterIndex((ParameterDefinition)operand));  		            break;  		        case OperandType.InlineVar:                      _writer.WriteInt16((short)GetVariableIndex((VariableDefinition)operand));  		            break;  		        case OperandType.InlineArg:                      _writer.WriteInt16((short)GetParameterIndex((ParameterDefinition)operand));  		            break;  		        case OperandType.InlineSig:  		            // TODO: implement this properly after finding when such code is generated  		            //WriteMetadataToken (GetStandAloneSignature ((CallSite) operand));  		            break;  		        case OperandType.ShortInlineI:  		            if (opcode == OpCodes.Ldc_I4_S)  		            {                          _writer.WriteSByte((SByte)operand);  		            }  		            else  		            {                          _writer.WriteByte((Byte)operand);                      }  		            break;  		        case OperandType.InlineI:                      _writer.WriteInt32((Int32)operand);  		            break;  		        case OperandType.InlineI8:                      _writer.WriteInt64((Int64)operand);  		            break;  		        case OperandType.ShortInlineR:                      _writer.WriteSingle((Single)operand);  		            break;  		        case OperandType.InlineR:                      _writer.WriteDouble((Double)operand);  		            break;  		        case OperandType.InlineString:  		            var stringReferenceId = _stringTable.GetOrCreateStringId((String) operand' false);                      _writer.WriteUInt16(stringReferenceId);  		            break;                  case OperandType.InlineMethod:                      _writer.WriteUInt16(_context.GetMethodReferenceId((MethodReference)operand));                      break;                  case OperandType.InlineType:                      _writer.WriteUInt16(GetTypeReferenceId((TypeReference)operand));                      break;  		        case OperandType.InlineField:                      _writer.WriteUInt16(GetFieldReferenceId((FieldReference)operand));                      break;                  case OperandType.InlineTok:                      _writer.WriteUInt32(GetMetadataToken((IMetadataTokenProvider)operand));                      break;                  default:  		            throw new ArgumentException();  		    }
Magic Number,MFMetaDataProcessor,CodeWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Mono.Cecil\CodeWriter.cs,WriteOperand,The following statement contains a magic number: switch (operandType)  		    {  		        case OperandType.InlineSwitch:  		        {  		            var targets = (Instruction[]) operand;                      _writer.WriteByte((Byte)targets.Length);  		            var diff = instruction.Offset + opcode.Size + 2 * targets.Length + 1;  		            foreach (var item in targets)  		            {  		                _writer.WriteInt16((Int16)(GetTargetOffset(item) - diff));  		            }  		            break;  		        }  		        case OperandType.ShortInlineBrTarget:  		        {  		            var target = (Instruction) operand;  		            _writer.WriteSByte((SByte)                          (GetTargetOffset(target) - (instruction.Offset + opcode.Size + 1)));  		            break;  		        }  		        case OperandType.InlineBrTarget:  		        {  		            var target = (Instruction) operand;                      _writer.WriteInt16((Int16)                          (GetTargetOffset(target) - (instruction.Offset + opcode.Size + 2)));  		            break;  		        }  		        case OperandType.ShortInlineVar:                      _writer.WriteByte((byte)GetVariableIndex((VariableDefinition)operand));  		            break;  		        case OperandType.ShortInlineArg:                      _writer.WriteByte((byte)GetParameterIndex((ParameterDefinition)operand));  		            break;  		        case OperandType.InlineVar:                      _writer.WriteInt16((short)GetVariableIndex((VariableDefinition)operand));  		            break;  		        case OperandType.InlineArg:                      _writer.WriteInt16((short)GetParameterIndex((ParameterDefinition)operand));  		            break;  		        case OperandType.InlineSig:  		            // TODO: implement this properly after finding when such code is generated  		            //WriteMetadataToken (GetStandAloneSignature ((CallSite) operand));  		            break;  		        case OperandType.ShortInlineI:  		            if (opcode == OpCodes.Ldc_I4_S)  		            {                          _writer.WriteSByte((SByte)operand);  		            }  		            else  		            {                          _writer.WriteByte((Byte)operand);                      }  		            break;  		        case OperandType.InlineI:                      _writer.WriteInt32((Int32)operand);  		            break;  		        case OperandType.InlineI8:                      _writer.WriteInt64((Int64)operand);  		            break;  		        case OperandType.ShortInlineR:                      _writer.WriteSingle((Single)operand);  		            break;  		        case OperandType.InlineR:                      _writer.WriteDouble((Double)operand);  		            break;  		        case OperandType.InlineString:  		            var stringReferenceId = _stringTable.GetOrCreateStringId((String) operand' false);                      _writer.WriteUInt16(stringReferenceId);  		            break;                  case OperandType.InlineMethod:                      _writer.WriteUInt16(_context.GetMethodReferenceId((MethodReference)operand));                      break;                  case OperandType.InlineType:                      _writer.WriteUInt16(GetTypeReferenceId((TypeReference)operand));                      break;  		        case OperandType.InlineField:                      _writer.WriteUInt16(GetFieldReferenceId((FieldReference)operand));                      break;                  case OperandType.InlineTok:                      _writer.WriteUInt32(GetMetadataToken((IMetadataTokenProvider)operand));                      break;                  default:  		            throw new ArgumentException();  		    }
Magic Number,MFMetaDataProcessor,TinyBitmapProcessor,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Utility\TinyBitmapProcessor.cs,GetTinytImageFormat,The following statement contains a magic number: if (rawFormat.Equals(ImageFormat.Jpeg))              {                  return 2;              }
Magic Number,MFMetaDataProcessor,TinyResourceDataTable,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Tables\TinyResourceDataTable.cs,AlignToWord,The following statement contains a magic number: var padding = (4 - (CurrentOffset % 4)) % 4;
Magic Number,MFMetaDataProcessor,TinyResourceDataTable,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Tables\TinyResourceDataTable.cs,AlignToWord,The following statement contains a magic number: var padding = (4 - (CurrentOffset % 4)) % 4;
Magic Number,MFMetaDataProcessor,TinyResourceDataTable,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Tables\TinyResourceDataTable.cs,AlignToWord,The following statement contains a magic number: var padding = (4 - (CurrentOffset % 4)) % 4;
Magic Number,MFMetaDataProcessor,TinyResourceFileTable,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Tables\TinyResourceFileTable.cs,Write,The following statement contains a magic number: foreach (var item in _resouces)              {                  writer.WriteUInt32(0x02); // Version                  writer.WriteUInt32(0x04); // Size of header                  writer.WriteUInt32(0x08); // Size of resouce header                    writer.WriteUInt32(item.Item2);                                    writer.WriteUInt16(item.Item1);                  writer.WriteUInt16(0x0); // paddding                    writer.WriteUInt32(offset);                  offset += 8; // Size of resource table record              }
Magic Number,MFMetaDataProcessor,TinyResourcesTable,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Tables\TinyResourcesTable.cs,Write,The following statement contains a magic number: foreach (var item in orderedResources)              {                  var kind = item.Value.Item1;                  var bytes = item.Value.Item2;                    var padding = 0;                  switch (kind)                  {                      case ResourceKind.String:                          var stringLength = (Int32)bytes[0];                          if (stringLength < 0x7F)                          {                              bytes = bytes.Skip(1).Concat(Enumerable.Repeat((Byte)0' 1)).ToArray();                          }                          else                          {                              bytes = bytes.Skip(2).Concat(Enumerable.Repeat((Byte)0' 1)).ToArray();                          }                          break;                      case ResourceKind.Bitmap:                          padding = _context.ResourceDataTable.AlignToWord();                          break;                      case ResourceKind.Binary:                          bytes = bytes.Skip(4).ToArray();                          break;                      case ResourceKind.Font:                          padding = _context.ResourceDataTable.AlignToWord();                          bytes = bytes.Skip(32).ToArray(); // File size + resource header size                          break;                  }                    // Pre-process font data (swap endiannes if needed).                  if (kind == ResourceKind.Font)                  {                      using (var stream = new MemoryStream(bytes.Length))                      {                          var fontProcessor = new TinyFontProcessor(bytes);                          fontProcessor.Process(writer.GetMemoryBasedClone(stream));                          bytes = stream.ToArray();                      }                  }                    writer.WriteInt16(item.Key);                  writer.WriteByte((Byte)kind);                  writer.WriteByte((Byte)padding);                  writer.WriteInt32(_context.ResourceDataTable.CurrentOffset);                    _context.ResourceDataTable.AddResourceData(bytes);              }
Magic Number,MFMetaDataProcessor,TinyResourcesTable,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Tables\TinyResourcesTable.cs,Write,The following statement contains a magic number: foreach (var item in orderedResources)              {                  var kind = item.Value.Item1;                  var bytes = item.Value.Item2;                    var padding = 0;                  switch (kind)                  {                      case ResourceKind.String:                          var stringLength = (Int32)bytes[0];                          if (stringLength < 0x7F)                          {                              bytes = bytes.Skip(1).Concat(Enumerable.Repeat((Byte)0' 1)).ToArray();                          }                          else                          {                              bytes = bytes.Skip(2).Concat(Enumerable.Repeat((Byte)0' 1)).ToArray();                          }                          break;                      case ResourceKind.Bitmap:                          padding = _context.ResourceDataTable.AlignToWord();                          break;                      case ResourceKind.Binary:                          bytes = bytes.Skip(4).ToArray();                          break;                      case ResourceKind.Font:                          padding = _context.ResourceDataTable.AlignToWord();                          bytes = bytes.Skip(32).ToArray(); // File size + resource header size                          break;                  }                    // Pre-process font data (swap endiannes if needed).                  if (kind == ResourceKind.Font)                  {                      using (var stream = new MemoryStream(bytes.Length))                      {                          var fontProcessor = new TinyFontProcessor(bytes);                          fontProcessor.Process(writer.GetMemoryBasedClone(stream));                          bytes = stream.ToArray();                      }                  }                    writer.WriteInt16(item.Key);                  writer.WriteByte((Byte)kind);                  writer.WriteByte((Byte)padding);                  writer.WriteInt32(_context.ResourceDataTable.CurrentOffset);                    _context.ResourceDataTable.AddResourceData(bytes);              }
Magic Number,MFMetaDataProcessor,TinyResourcesTable,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Tables\TinyResourcesTable.cs,Write,The following statement contains a magic number: foreach (var item in orderedResources)              {                  var kind = item.Value.Item1;                  var bytes = item.Value.Item2;                    var padding = 0;                  switch (kind)                  {                      case ResourceKind.String:                          var stringLength = (Int32)bytes[0];                          if (stringLength < 0x7F)                          {                              bytes = bytes.Skip(1).Concat(Enumerable.Repeat((Byte)0' 1)).ToArray();                          }                          else                          {                              bytes = bytes.Skip(2).Concat(Enumerable.Repeat((Byte)0' 1)).ToArray();                          }                          break;                      case ResourceKind.Bitmap:                          padding = _context.ResourceDataTable.AlignToWord();                          break;                      case ResourceKind.Binary:                          bytes = bytes.Skip(4).ToArray();                          break;                      case ResourceKind.Font:                          padding = _context.ResourceDataTable.AlignToWord();                          bytes = bytes.Skip(32).ToArray(); // File size + resource header size                          break;                  }                    // Pre-process font data (swap endiannes if needed).                  if (kind == ResourceKind.Font)                  {                      using (var stream = new MemoryStream(bytes.Length))                      {                          var fontProcessor = new TinyFontProcessor(bytes);                          fontProcessor.Process(writer.GetMemoryBasedClone(stream));                          bytes = stream.ToArray();                      }                  }                    writer.WriteInt16(item.Key);                  writer.WriteByte((Byte)kind);                  writer.WriteByte((Byte)padding);                  writer.WriteInt32(_context.ResourceDataTable.CurrentOffset);                    _context.ResourceDataTable.AddResourceData(bytes);              }
Magic Number,MFMetaDataProcessor,TinyResourcesTable,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Tables\TinyResourcesTable.cs,GetResourceKind,The following statement contains a magic number: using(var stream = new MemoryStream(resourceData))              using (var reader = new BinaryReader(stream))              {                  var size = reader.ReadUInt32();                  return (size > 4 && reader.ReadUInt32() == FONT_HEADER_MAGIC                      ? ResourceKind.Font                      : ResourceKind.Binary);              }
Magic Number,MFMetaDataProcessor,TinyResourcesTable,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Tables\TinyResourcesTable.cs,GenerateIdFromResourceName,The following statement contains a magic number: var hash1 = (5381 << 16) + 5381;
Magic Number,MFMetaDataProcessor,TinyResourcesTable,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Tables\TinyResourcesTable.cs,GenerateIdFromResourceName,The following statement contains a magic number: var hash1 = (5381 << 16) + 5381;
Magic Number,MFMetaDataProcessor,TinyResourcesTable,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Tables\TinyResourcesTable.cs,GenerateIdFromResourceName,The following statement contains a magic number: var hash1 = (5381 << 16) + 5381;
Magic Number,MFMetaDataProcessor,TinyResourcesTable,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Tables\TinyResourcesTable.cs,GenerateIdFromResourceName,The following statement contains a magic number: for (var i = 0; i < value.Length; ++i)              {                  var c = value[i];                  if (i % 2 == 0)                  {                      hash1 = ((hash1 << 5) + hash1) ^ c;                  }                  else                  {                      hash2 = ((hash2 << 5) + hash2) ^ c;                  }              }
Magic Number,MFMetaDataProcessor,TinyResourcesTable,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Tables\TinyResourcesTable.cs,GenerateIdFromResourceName,The following statement contains a magic number: for (var i = 0; i < value.Length; ++i)              {                  var c = value[i];                  if (i % 2 == 0)                  {                      hash1 = ((hash1 << 5) + hash1) ^ c;                  }                  else                  {                      hash2 = ((hash2 << 5) + hash2) ^ c;                  }              }
Magic Number,MFMetaDataProcessor,TinyResourcesTable,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Tables\TinyResourcesTable.cs,GenerateIdFromResourceName,The following statement contains a magic number: for (var i = 0; i < value.Length; ++i)              {                  var c = value[i];                  if (i % 2 == 0)                  {                      hash1 = ((hash1 << 5) + hash1) ^ c;                  }                  else                  {                      hash2 = ((hash2 << 5) + hash2) ^ c;                  }              }
Magic Number,MFMetaDataProcessor,TinyResourcesTable,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Tables\TinyResourcesTable.cs,GenerateIdFromResourceName,The following statement contains a magic number: var hash = hash1 + (hash2 * 1566083941);
Magic Number,MFMetaDataProcessor,TinyResourcesTable,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Tables\TinyResourcesTable.cs,GenerateIdFromResourceName,The following statement contains a magic number: return (Int16)((Int16)(hash >> 16) ^ (Int16)hash);
Magic Number,MFMetaDataProcessor,Crc32,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Utility\Crc32.cs,Compute,The following statement contains a magic number: return buffer.Aggregate(crc'                  (index' item) => _crcTable[((index >> 24) ^ item) & 0xFF] ^ (index << 8));
Magic Number,MFMetaDataProcessor,Crc32,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Utility\Crc32.cs,Compute,The following statement contains a magic number: return buffer.Aggregate(crc'                  (index' item) => _crcTable[((index >> 24) ^ item) & 0xFF] ^ (index << 8));
Magic Number,MFMetaDataProcessor,TinyAssemblyBuilder,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\TinyAssemblyBuilder.cs,Write,The following statement contains a magic number: foreach (var table in GetTables(_tablesContext))              {                  var tableBegin = (binaryWriter.BaseStream.Position + 3) & 0xFFFFFFFC;                  table.Write(binaryWriter);                    var padding = (4 - ((binaryWriter.BaseStream.Position - tableBegin) % 4)) % 4;                  binaryWriter.WriteBytes(new Byte[padding]);                    header.UpdateTableOffset(binaryWriter' tableBegin' padding);              }
Magic Number,MFMetaDataProcessor,TinyAssemblyBuilder,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\TinyAssemblyBuilder.cs,Write,The following statement contains a magic number: foreach (var table in GetTables(_tablesContext))              {                  var tableBegin = (binaryWriter.BaseStream.Position + 3) & 0xFFFFFFFC;                  table.Write(binaryWriter);                    var padding = (4 - ((binaryWriter.BaseStream.Position - tableBegin) % 4)) % 4;                  binaryWriter.WriteBytes(new Byte[padding]);                    header.UpdateTableOffset(binaryWriter' tableBegin' padding);              }
Magic Number,MFMetaDataProcessor,TinyAssemblyBuilder,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\TinyAssemblyBuilder.cs,Write,The following statement contains a magic number: foreach (var table in GetTables(_tablesContext))              {                  var tableBegin = (binaryWriter.BaseStream.Position + 3) & 0xFFFFFFFC;                  table.Write(binaryWriter);                    var padding = (4 - ((binaryWriter.BaseStream.Position - tableBegin) % 4)) % 4;                  binaryWriter.WriteBytes(new Byte[padding]);                    header.UpdateTableOffset(binaryWriter' tableBegin' padding);              }
Magic Number,MFMetaDataProcessor,TinyAssemblyBuilder,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\TinyAssemblyBuilder.cs,Write,The following statement contains a magic number: foreach (var table in GetTables(_tablesContext))              {                  var tableBegin = (binaryWriter.BaseStream.Position + 3) & 0xFFFFFFFC;                  table.Write(binaryWriter);                    var padding = (4 - ((binaryWriter.BaseStream.Position - tableBegin) % 4)) % 4;                  binaryWriter.WriteBytes(new Byte[padding]);                    header.UpdateTableOffset(binaryWriter' tableBegin' padding);              }
Magic Number,MFMetaDataProcessor,TinyAssemblyDefinition,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\TinyAssemblyDefinition.cs,Write,The following statement contains a magic number: if (isPreAllocationCall)              {                  _tablesOffset = writer.BaseStream.Position;                  for (var i = 0; i < 16; ++i)                  {                      writer.WriteUInt32(0);                  }                    writer.WriteUInt32(0); // Number of patched methods                    _paddingsOffset = writer.BaseStream.Position;                  for (var i = 0; i < 16; ++i)                  {                      writer.WriteByte(0);                  }              }              else              {                  writer.BaseStream.Seek(12' SeekOrigin.Begin);                    var assemblyCrc32 = ComputeCrc32(writer.BaseStream'                      _paddingsOffset' writer.BaseStream.Length - _paddingsOffset);                  writer.WriteUInt32(assemblyCrc32);                    writer.BaseStream.Seek(8' SeekOrigin.Begin);                    var headerCrc32 = ComputeCrc32(writer.BaseStream' 0' _paddingsOffset);                  writer.WriteUInt32(headerCrc32);              }
Magic Number,MFMetaDataProcessor,TinyAssemblyDefinition,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\TinyAssemblyDefinition.cs,Write,The following statement contains a magic number: if (isPreAllocationCall)              {                  _tablesOffset = writer.BaseStream.Position;                  for (var i = 0; i < 16; ++i)                  {                      writer.WriteUInt32(0);                  }                    writer.WriteUInt32(0); // Number of patched methods                    _paddingsOffset = writer.BaseStream.Position;                  for (var i = 0; i < 16; ++i)                  {                      writer.WriteByte(0);                  }              }              else              {                  writer.BaseStream.Seek(12' SeekOrigin.Begin);                    var assemblyCrc32 = ComputeCrc32(writer.BaseStream'                      _paddingsOffset' writer.BaseStream.Length - _paddingsOffset);                  writer.WriteUInt32(assemblyCrc32);                    writer.BaseStream.Seek(8' SeekOrigin.Begin);                    var headerCrc32 = ComputeCrc32(writer.BaseStream' 0' _paddingsOffset);                  writer.WriteUInt32(headerCrc32);              }
Magic Number,MFMetaDataProcessor,TinyAssemblyDefinition,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\TinyAssemblyDefinition.cs,Write,The following statement contains a magic number: if (isPreAllocationCall)              {                  _tablesOffset = writer.BaseStream.Position;                  for (var i = 0; i < 16; ++i)                  {                      writer.WriteUInt32(0);                  }                    writer.WriteUInt32(0); // Number of patched methods                    _paddingsOffset = writer.BaseStream.Position;                  for (var i = 0; i < 16; ++i)                  {                      writer.WriteByte(0);                  }              }              else              {                  writer.BaseStream.Seek(12' SeekOrigin.Begin);                    var assemblyCrc32 = ComputeCrc32(writer.BaseStream'                      _paddingsOffset' writer.BaseStream.Length - _paddingsOffset);                  writer.WriteUInt32(assemblyCrc32);                    writer.BaseStream.Seek(8' SeekOrigin.Begin);                    var headerCrc32 = ComputeCrc32(writer.BaseStream' 0' _paddingsOffset);                  writer.WriteUInt32(headerCrc32);              }
Magic Number,MFMetaDataProcessor,TinyAssemblyDefinition,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\TinyAssemblyDefinition.cs,Write,The following statement contains a magic number: if (isPreAllocationCall)              {                  _tablesOffset = writer.BaseStream.Position;                  for (var i = 0; i < 16; ++i)                  {                      writer.WriteUInt32(0);                  }                    writer.WriteUInt32(0); // Number of patched methods                    _paddingsOffset = writer.BaseStream.Position;                  for (var i = 0; i < 16; ++i)                  {                      writer.WriteByte(0);                  }              }              else              {                  writer.BaseStream.Seek(12' SeekOrigin.Begin);                    var assemblyCrc32 = ComputeCrc32(writer.BaseStream'                      _paddingsOffset' writer.BaseStream.Length - _paddingsOffset);                  writer.WriteUInt32(assemblyCrc32);                    writer.BaseStream.Seek(8' SeekOrigin.Begin);                    var headerCrc32 = ComputeCrc32(writer.BaseStream' 0' _paddingsOffset);                  writer.WriteUInt32(headerCrc32);              }
Magic Number,MFMetaDataProcessor,TinySignaturesTable,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Tables\TinySignaturesTable.cs,WriteSubTypeInfo,The following statement contains a magic number: if (typeDefinition is TypeSpecification &&                  _context.TypeSpecificationsTable.TryGetTypeReferenceId(typeDefinition' out referenceId))              {                      writer.WriteMetadataToken(((UInt32)referenceId << 2) | 0x04);              }              else if (_context.TypeReferencesTable.TryGetTypeReferenceId(typeDefinition' out referenceId))              {                  writer.WriteMetadataToken(((UInt32)referenceId << 2) | 0x01);              }              else if (_context.TypeDefinitionTable.TryGetTypeReferenceId(                  typeDefinition.Resolve()' out referenceId))              {                  writer.WriteMetadataToken((UInt32)referenceId << 2);              }
Magic Number,MFMetaDataProcessor,TinySignaturesTable,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Tables\TinySignaturesTable.cs,WriteSubTypeInfo,The following statement contains a magic number: if (typeDefinition is TypeSpecification &&                  _context.TypeSpecificationsTable.TryGetTypeReferenceId(typeDefinition' out referenceId))              {                      writer.WriteMetadataToken(((UInt32)referenceId << 2) | 0x04);              }              else if (_context.TypeReferencesTable.TryGetTypeReferenceId(typeDefinition' out referenceId))              {                  writer.WriteMetadataToken(((UInt32)referenceId << 2) | 0x01);              }              else if (_context.TypeDefinitionTable.TryGetTypeReferenceId(                  typeDefinition.Resolve()' out referenceId))              {                  writer.WriteMetadataToken((UInt32)referenceId << 2);              }
Magic Number,MFMetaDataProcessor,TinySignaturesTable,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Tables\TinySignaturesTable.cs,WriteSubTypeInfo,The following statement contains a magic number: if (typeDefinition is TypeSpecification &&                  _context.TypeSpecificationsTable.TryGetTypeReferenceId(typeDefinition' out referenceId))              {                      writer.WriteMetadataToken(((UInt32)referenceId << 2) | 0x04);              }              else if (_context.TypeReferencesTable.TryGetTypeReferenceId(typeDefinition' out referenceId))              {                  writer.WriteMetadataToken(((UInt32)referenceId << 2) | 0x01);              }              else if (_context.TypeDefinitionTable.TryGetTypeReferenceId(                  typeDefinition.Resolve()' out referenceId))              {                  writer.WriteMetadataToken((UInt32)referenceId << 2);              }
Magic Number,MFMetaDataProcessor,ByteArrayComparer,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Tables\TinySignaturesTable.cs,GetHashCode,The following statement contains a magic number: return that.Aggregate(37' (hash' item) => item ^ hash);
Magic Number,MFMetaDataProcessor,TinyFontProcessor,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Utility\TinyFontProcessor.cs,Process,The following statement contains a magic number: using (var stream = new MemoryStream(_fontResouce' false))              using (var reader = new BinaryReader(stream))              {                  // CLR_GFX_FontDescription                    {                      // CLR_GFX_FontMetrics                        writer.WriteUInt16(reader.ReadUInt16()); // CLR_GFX_FontMetrics.m_height                      writer.WriteInt16(reader.ReadInt16()); // CLR_GFX_FontMetrics.m_offset                        writer.WriteInt16(reader.ReadInt16()); // CLR_GFX_FontMetrics.m_ascent                      writer.WriteInt16(reader.ReadInt16()); // CLR_GFX_FontMetrics.m_descent                        writer.WriteInt16(reader.ReadInt16()); // CLR_GFX_FontMetrics.m_internalLeading                      writer.WriteInt16(reader.ReadInt16()); // CLR_GFX_FontMetrics.m_externalLeading                        writer.WriteInt16(reader.ReadInt16()); // CLR_GFX_FontMetrics.m_aveCharWidth                      writer.WriteInt16(reader.ReadInt16()); // CLR_GFX_FontMetrics.m_aveCharWidth                  }                    var rangesCount = reader.ReadInt16();                  writer.WriteInt16(rangesCount); // CLR_GFX_FontDescription.m_ranges                  var charactersCount = reader.ReadInt16();                  writer.WriteInt16(charactersCount); // CLR_GFX_FontDescription.m_characters                    var flags = reader.ReadInt16();                  writer.WriteInt16(flags); // CLR_GFX_FontDescription.m_flags                  writer.WriteInt16(reader.ReadInt16()); // CLR_GFX_FontDescription.m_pad                    // CLR_GFX_BitmapDescription                    var width = reader.ReadUInt32();                  writer.WriteUInt32(width); // CLR_GFX_BitmapDescription.m_width                  var height = reader.ReadUInt32();                  writer.WriteUInt32(height); // CLR_GFX_BitmapDescription.m_height                    writer.WriteUInt16(reader.ReadUInt16()); // CLR_GFX_BitmapDescription.m_flags                    var bitsPerPixel = reader.ReadByte();                  writer.WriteByte(bitsPerPixel); // CLR_GFX_BitmapDescription.m_bitsPerPixel                  writer.WriteByte(reader.ReadByte()); // CLR_GFX_BitmapDescription.m_type                    for (var i = 0; i <= rangesCount; ++i) // Including sentinel range                  {                      // CLR_GFX_FontCharacterRange                        writer.WriteUInt32(reader.ReadUInt32()); // CLR_GFX_FontCharacterRange.m_indexOfFirstFontCharacter                        writer.WriteUInt16(reader.ReadUInt16()); // CLR_GFX_FontCharacterRange.m_firstChar                      writer.WriteUInt16(reader.ReadUInt16()); // CLR_GFX_FontCharacterRange.m_lastChar                        writer.WriteUInt32(reader.ReadUInt32()); // CLR_GFX_FontCharacterRange.m_rangeOffset                  }                    for (var i = 0; i <= charactersCount; ++i) // Including sentinel character                  {                      // CLR_GFX_FontCharacter                        writer.WriteUInt16(reader.ReadUInt16()); // CLR_GFX_FontCharacter.m_offset                        writer.WriteByte(reader.ReadByte()); // CLR_GFX_FontCharacter.m_marginLeft                      writer.WriteByte(reader.ReadByte()); // CLR_GFX_FontCharacter.m_marginRight                  }                    if (bitsPerPixel == 0)                  {                      bitsPerPixel = 16; // Native value' rest calculations are same                  }                  var totalSizeInWords = ((width * bitsPerPixel + 31) / 32) * height;                  for (var i = 0; i < totalSizeInWords; ++i)                  {                      writer.WriteUInt32(reader.ReadUInt32());                  }                    if ((flags & FLAG_FONT_EX) == FLAG_FONT_EX)                  {                      // TODO: implement it according original idea if needed                  }                    while (stream.Position < stream.Length)                  {                      writer.WriteByte(reader.ReadByte());                  }              }
Magic Number,MFMetaDataProcessor,TinyFontProcessor,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Utility\TinyFontProcessor.cs,Process,The following statement contains a magic number: using (var stream = new MemoryStream(_fontResouce' false))              using (var reader = new BinaryReader(stream))              {                  // CLR_GFX_FontDescription                    {                      // CLR_GFX_FontMetrics                        writer.WriteUInt16(reader.ReadUInt16()); // CLR_GFX_FontMetrics.m_height                      writer.WriteInt16(reader.ReadInt16()); // CLR_GFX_FontMetrics.m_offset                        writer.WriteInt16(reader.ReadInt16()); // CLR_GFX_FontMetrics.m_ascent                      writer.WriteInt16(reader.ReadInt16()); // CLR_GFX_FontMetrics.m_descent                        writer.WriteInt16(reader.ReadInt16()); // CLR_GFX_FontMetrics.m_internalLeading                      writer.WriteInt16(reader.ReadInt16()); // CLR_GFX_FontMetrics.m_externalLeading                        writer.WriteInt16(reader.ReadInt16()); // CLR_GFX_FontMetrics.m_aveCharWidth                      writer.WriteInt16(reader.ReadInt16()); // CLR_GFX_FontMetrics.m_aveCharWidth                  }                    var rangesCount = reader.ReadInt16();                  writer.WriteInt16(rangesCount); // CLR_GFX_FontDescription.m_ranges                  var charactersCount = reader.ReadInt16();                  writer.WriteInt16(charactersCount); // CLR_GFX_FontDescription.m_characters                    var flags = reader.ReadInt16();                  writer.WriteInt16(flags); // CLR_GFX_FontDescription.m_flags                  writer.WriteInt16(reader.ReadInt16()); // CLR_GFX_FontDescription.m_pad                    // CLR_GFX_BitmapDescription                    var width = reader.ReadUInt32();                  writer.WriteUInt32(width); // CLR_GFX_BitmapDescription.m_width                  var height = reader.ReadUInt32();                  writer.WriteUInt32(height); // CLR_GFX_BitmapDescription.m_height                    writer.WriteUInt16(reader.ReadUInt16()); // CLR_GFX_BitmapDescription.m_flags                    var bitsPerPixel = reader.ReadByte();                  writer.WriteByte(bitsPerPixel); // CLR_GFX_BitmapDescription.m_bitsPerPixel                  writer.WriteByte(reader.ReadByte()); // CLR_GFX_BitmapDescription.m_type                    for (var i = 0; i <= rangesCount; ++i) // Including sentinel range                  {                      // CLR_GFX_FontCharacterRange                        writer.WriteUInt32(reader.ReadUInt32()); // CLR_GFX_FontCharacterRange.m_indexOfFirstFontCharacter                        writer.WriteUInt16(reader.ReadUInt16()); // CLR_GFX_FontCharacterRange.m_firstChar                      writer.WriteUInt16(reader.ReadUInt16()); // CLR_GFX_FontCharacterRange.m_lastChar                        writer.WriteUInt32(reader.ReadUInt32()); // CLR_GFX_FontCharacterRange.m_rangeOffset                  }                    for (var i = 0; i <= charactersCount; ++i) // Including sentinel character                  {                      // CLR_GFX_FontCharacter                        writer.WriteUInt16(reader.ReadUInt16()); // CLR_GFX_FontCharacter.m_offset                        writer.WriteByte(reader.ReadByte()); // CLR_GFX_FontCharacter.m_marginLeft                      writer.WriteByte(reader.ReadByte()); // CLR_GFX_FontCharacter.m_marginRight                  }                    if (bitsPerPixel == 0)                  {                      bitsPerPixel = 16; // Native value' rest calculations are same                  }                  var totalSizeInWords = ((width * bitsPerPixel + 31) / 32) * height;                  for (var i = 0; i < totalSizeInWords; ++i)                  {                      writer.WriteUInt32(reader.ReadUInt32());                  }                    if ((flags & FLAG_FONT_EX) == FLAG_FONT_EX)                  {                      // TODO: implement it according original idea if needed                  }                    while (stream.Position < stream.Length)                  {                      writer.WriteByte(reader.ReadByte());                  }              }
Magic Number,MFMetaDataProcessor,TinyFontProcessor,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Utility\TinyFontProcessor.cs,Process,The following statement contains a magic number: using (var stream = new MemoryStream(_fontResouce' false))              using (var reader = new BinaryReader(stream))              {                  // CLR_GFX_FontDescription                    {                      // CLR_GFX_FontMetrics                        writer.WriteUInt16(reader.ReadUInt16()); // CLR_GFX_FontMetrics.m_height                      writer.WriteInt16(reader.ReadInt16()); // CLR_GFX_FontMetrics.m_offset                        writer.WriteInt16(reader.ReadInt16()); // CLR_GFX_FontMetrics.m_ascent                      writer.WriteInt16(reader.ReadInt16()); // CLR_GFX_FontMetrics.m_descent                        writer.WriteInt16(reader.ReadInt16()); // CLR_GFX_FontMetrics.m_internalLeading                      writer.WriteInt16(reader.ReadInt16()); // CLR_GFX_FontMetrics.m_externalLeading                        writer.WriteInt16(reader.ReadInt16()); // CLR_GFX_FontMetrics.m_aveCharWidth                      writer.WriteInt16(reader.ReadInt16()); // CLR_GFX_FontMetrics.m_aveCharWidth                  }                    var rangesCount = reader.ReadInt16();                  writer.WriteInt16(rangesCount); // CLR_GFX_FontDescription.m_ranges                  var charactersCount = reader.ReadInt16();                  writer.WriteInt16(charactersCount); // CLR_GFX_FontDescription.m_characters                    var flags = reader.ReadInt16();                  writer.WriteInt16(flags); // CLR_GFX_FontDescription.m_flags                  writer.WriteInt16(reader.ReadInt16()); // CLR_GFX_FontDescription.m_pad                    // CLR_GFX_BitmapDescription                    var width = reader.ReadUInt32();                  writer.WriteUInt32(width); // CLR_GFX_BitmapDescription.m_width                  var height = reader.ReadUInt32();                  writer.WriteUInt32(height); // CLR_GFX_BitmapDescription.m_height                    writer.WriteUInt16(reader.ReadUInt16()); // CLR_GFX_BitmapDescription.m_flags                    var bitsPerPixel = reader.ReadByte();                  writer.WriteByte(bitsPerPixel); // CLR_GFX_BitmapDescription.m_bitsPerPixel                  writer.WriteByte(reader.ReadByte()); // CLR_GFX_BitmapDescription.m_type                    for (var i = 0; i <= rangesCount; ++i) // Including sentinel range                  {                      // CLR_GFX_FontCharacterRange                        writer.WriteUInt32(reader.ReadUInt32()); // CLR_GFX_FontCharacterRange.m_indexOfFirstFontCharacter                        writer.WriteUInt16(reader.ReadUInt16()); // CLR_GFX_FontCharacterRange.m_firstChar                      writer.WriteUInt16(reader.ReadUInt16()); // CLR_GFX_FontCharacterRange.m_lastChar                        writer.WriteUInt32(reader.ReadUInt32()); // CLR_GFX_FontCharacterRange.m_rangeOffset                  }                    for (var i = 0; i <= charactersCount; ++i) // Including sentinel character                  {                      // CLR_GFX_FontCharacter                        writer.WriteUInt16(reader.ReadUInt16()); // CLR_GFX_FontCharacter.m_offset                        writer.WriteByte(reader.ReadByte()); // CLR_GFX_FontCharacter.m_marginLeft                      writer.WriteByte(reader.ReadByte()); // CLR_GFX_FontCharacter.m_marginRight                  }                    if (bitsPerPixel == 0)                  {                      bitsPerPixel = 16; // Native value' rest calculations are same                  }                  var totalSizeInWords = ((width * bitsPerPixel + 31) / 32) * height;                  for (var i = 0; i < totalSizeInWords; ++i)                  {                      writer.WriteUInt32(reader.ReadUInt32());                  }                    if ((flags & FLAG_FONT_EX) == FLAG_FONT_EX)                  {                      // TODO: implement it according original idea if needed                  }                    while (stream.Position < stream.Length)                  {                      writer.WriteByte(reader.ReadByte());                  }              }
Magic Number,MFMetaDataProcessor,TinyTypeDefinitionTable,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Tables\TinyTypeDefinitionTable.cs,WriteSingleItem,The following statement contains a magic number: using (var stream = new MemoryStream(6))              {                  WriteClassFields(fieldsList' writer.GetMemoryBasedClone(stream));                    if (item.DeclaringType == null)                  {                      foreach (var method in item.Methods)                      {                          var offsets = CodeWriter                              .PreProcessMethod(method' _context.ByteCodeTable.FakeStringTable)                              .ToList();                          _byteCodeOffsets.Add(method.MetadataToken.ToUInt32()' offsets);                      }                  }                  foreach (var nestedType in item.NestedTypes)                  {                      foreach (var method in nestedType.Methods)                      {                          var offsets = CodeWriter                              .PreProcessMethod(method' _context.ByteCodeTable.FakeStringTable)                              .ToList();                          _byteCodeOffsets.Add(method.MetadataToken.ToUInt32()' offsets);                      }                  }                    WriteMethodBodies(item.Methods' item.Interfaces' writer);                    _context.SignaturesTable.WriteDataType(item' writer' false' true);                    writer.WriteBytes(stream.ToArray());              }
Missing Default,MFMetaDataProcessor,CodeWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Mono.Cecil\CodeWriter.cs,PreProcessMethod,The following switch statement is missing a default case: switch (instruction.OpCode.OperandType)                  {                      case OperandType.InlineSwitch:  		                var targets = (Instruction[]) instruction.Operand;                          offset -= 3; // One bye used instead of Int32  		                offset -= 2 * targets.Length; // each target use Int16 instead of Int32                          offsetChanged = true;                          break;                      case OperandType.InlineString:                          stringTable.GetOrCreateStringId((String) instruction.Operand' false);                          offset -= 2;                          offsetChanged = true;                          break;                      case OperandType.InlineMethod:                      case OperandType.InlineField:                      case OperandType.InlineType:                      case OperandType.InlineBrTarget:                          // In full .NET these instructions followed by double word operand                          // but in .NET Micro Framework these instruction's operand are word                          offset -= 2;                          offsetChanged = true;                          break;                  }
Missing Default,MFMetaDataProcessor,CodeWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Mono.Cecil\CodeWriter.cs,CalculateStackSize,The following switch statement is missing a default case: switch (instruction.OpCode.Code)  	            {                      case Code.Throw:                      case Code.Endfinally:                      case Code.Endfilter:                      case Code.Leave_S:                      case Code.Br_S:                      case Code.Leave:                          size = 0;                          continue;                        case Code.Newobj:  	                    {                              var method = (MethodReference)instruction.Operand;                              size -= method.Parameters.Count;                          }                          break;                        case Code.Callvirt:                      case Code.Call:  	                    {                              var method = (MethodReference)instruction.Operand;                              if (method.HasThis)                              {                                  --size;                              }                              size -= method.Parameters.Count;                              if (method.ReturnType.FullName != "System.Void")                              {                                  ++size;                              }                          }                          break;  	            }
Missing Default,MFMetaDataProcessor,CodeWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Mono.Cecil\CodeWriter.cs,CorrectStackDepthByPushes,The following switch statement is missing a default case: switch (instruction.OpCode.StackBehaviourPush)              {                  case StackBehaviour.Push1:                  case StackBehaviour.Pushi:                  case StackBehaviour.Pushi8:                  case StackBehaviour.Pushr4:                  case StackBehaviour.Pushr8:                  case StackBehaviour.Pushref:                      ++size;                      break;                  case StackBehaviour.Push1_push1:                      size += 2;                      break;              }
Missing Default,MFMetaDataProcessor,CodeWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Mono.Cecil\CodeWriter.cs,CorrectStackDepthByPops,The following switch statement is missing a default case: switch (instruction.OpCode.StackBehaviourPop)              {                  case StackBehaviour.Pop1:                  case StackBehaviour.Popi:                  case StackBehaviour.Popref:                      --size;                      break;                  case StackBehaviour.Pop1_pop1:                  case StackBehaviour.Popi_pop1:                  case StackBehaviour.Popi_popi:                  case StackBehaviour.Popi_popi8:                  case StackBehaviour.Popi_popr4:                  case StackBehaviour.Popi_popr8:                  case StackBehaviour.Popref_pop1:                  case StackBehaviour.Popref_popi:                      size -= 2;                      break;                  case StackBehaviour.Popi_popi_popi:                  case StackBehaviour.Popref_popi_popi:                  case StackBehaviour.Popref_popi_popi8:                  case StackBehaviour.Popref_popi_popr4:                  case StackBehaviour.Popref_popi_popr8:                  case StackBehaviour.Popref_popi_popref:                      size -= 3;                      break;              }
Missing Default,MFMetaDataProcessor,CodeWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Mono.Cecil\CodeWriter.cs,WriteExceptionsTable,The following switch statement is missing a default case: switch (handler.HandlerType)                  {                      case ExceptionHandlerType.Catch:                          _writer.WriteUInt16(0x0000);                          _writer.WriteUInt16(GetTypeReferenceId(handler.CatchType' 0x8000));                          break;                      case ExceptionHandlerType.Fault:                          _writer.WriteUInt16(0x0001);                          _writer.WriteUInt16(0x0000);                          break;                      case ExceptionHandlerType.Finally:                          _writer.WriteUInt16(0x0002);                          _writer.WriteUInt16(0x0000);                          break;                      case ExceptionHandlerType.Filter:                          _writer.WriteUInt16(0x0003);                          _writer.WriteUInt16((UInt16)handler.FilterStart.Offset);                          break;                  }
Missing Default,MFMetaDataProcessor,CodeWriter,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Mono.Cecil\CodeWriter.cs,GetMetadataToken,The following switch statement is missing a default case: switch (token.MetadataToken.TokenType)              {                  case TokenType.TypeRef:                      _context.TypeReferencesTable.TryGetTypeReferenceId((TypeReference)token' out referenceId);                      return (UInt32)0x01000000 | referenceId;                  case TokenType.TypeDef:                      _context.TypeDefinitionTable.TryGetTypeReferenceId((TypeDefinition)token' out referenceId);                      return (UInt32)0x04000000 | referenceId;                  case TokenType.TypeSpec:                      _context.TypeSpecificationsTable.TryGetTypeReferenceId((TypeReference) token' out referenceId);                      return (UInt32)0x08000000 | referenceId;                  case TokenType.Field:                      _context.FieldsTable.TryGetFieldReferenceId((FieldDefinition) token' false' out referenceId);                      return (UInt32)0x05000000 | referenceId;              }
Missing Default,MFMetaDataProcessor,TinyResourcesTable,C:\repos\xamarin_Monkey.Robotics\Source\Xamarin Studio Microframework Add-in\MFMetaDataProcessor\MFMetaDataProcessor.Core\Tables\TinyResourcesTable.cs,Write,The following switch statement is missing a default case: switch (kind)                  {                      case ResourceKind.String:                          var stringLength = (Int32)bytes[0];                          if (stringLength < 0x7F)                          {                              bytes = bytes.Skip(1).Concat(Enumerable.Repeat((Byte)0' 1)).ToArray();                          }                          else                          {                              bytes = bytes.Skip(2).Concat(Enumerable.Repeat((Byte)0' 1)).ToArray();                          }                          break;                      case ResourceKind.Bitmap:                          padding = _context.ResourceDataTable.AlignToWord();                          break;                      case ResourceKind.Binary:                          bytes = bytes.Skip(4).ToArray();                          break;                      case ResourceKind.Font:                          padding = _context.ResourceDataTable.AlignToWord();                          bytes = bytes.Skip(32).ToArray(); // File size + resource header size                          break;                  }
