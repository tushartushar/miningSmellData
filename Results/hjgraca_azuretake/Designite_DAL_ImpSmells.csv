Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DAL.User,AzureStore,C:\repos\hjgraca_azuretake\DAL\User\AzureStore.cs,CreateAsync,Cyclomatic complexity of the method is 9
Long Statement,DAL.Repositories,SearchRepository,C:\repos\hjgraca_azuretake\DAL\Repositories\SearchRepository.cs,Search,The length of the statement  "	var query = new TableQuery<SearchEntity> ().Where (TableQuery.GenerateFilterCondition ("PartitionKey"' QueryComparisons.Equal' postCode)); " is 138.
Long Statement,DAL.Repositories,RestaurantRepository,C:\repos\hjgraca_azuretake\DAL\Repositories\RestaurantRepository.cs,Get,The length of the statement  "	var query = new TableQuery<RestaurantEntity> ().Where (TableQuery.GenerateFilterCondition ("PartitionKey"' QueryComparisons.Equal' "NW6")); " is 139.
Long Statement,DAL.Repositories,RestaurantRepository,C:\repos\hjgraca_azuretake\DAL\Repositories\RestaurantRepository.cs,GetByPostCode,The length of the statement  "	var query = new TableQuery<RestaurantEntity> ().Where (TableQuery.GenerateFilterCondition ("PartitionKey"' QueryComparisons.Equal' postCode.ToUpper ())); " is 153.
Long Statement,DAL.User,AzureStore,C:\repos\hjgraca_azuretake\DAL\User\AzureStore.cs,GetClaimsAsync,The length of the statement  "		querySegment = await ClaimsTable.ExecuteQuerySegmentedAsync (query' querySegment != null ? querySegment.ContinuationToken : null); " is 130.
Long Statement,DAL.User,AzureStore,C:\repos\hjgraca_azuretake\DAL\User\AzureStore.cs,CreateAsync,The length of the statement  "				AzureUserLoginProviderKeyIndex loginIndexItem = new AzureUserLoginProviderKeyIndex (user.Id' login.ProviderKey' login.LoginProvider); " is 133.
Long Statement,DAL.User,AzureStore,C:\repos\hjgraca_azuretake\DAL\User\AzureStore.cs,FindByIdAsync,The length of the statement  "		TableQuery<T> query = new TableQuery<T> ().Where (TableQuery.GenerateFilterCondition ("PartitionKey"' QueryComparisons.Equal' userId)).Take (1); " is 144.
Long Statement,DAL.User,AzureStore,C:\repos\hjgraca_azuretake\DAL\User\AzureStore.cs,FindByNameAsync,The length of the statement  "	TableQuery<T> query = new TableQuery<T> ().Where (TableQuery.GenerateFilterCondition ("UserName"' QueryComparisons.Equal' userName)); " is 133.
Long Statement,DAL.User,AzureStore,C:\repos\hjgraca_azuretake\DAL\User\AzureStore.cs,GetLoginsAsync,The length of the statement  "	TableQuery<AzureLogin> query = new TableQuery<AzureLogin> ().Where (TableQuery.GenerateFilterCondition ("UserId"' QueryComparisons.Equal' user.Id)).Select (new string[] { " is 170.
Long Statement,DAL.User,AzureStore,C:\repos\hjgraca_azuretake\DAL\User\AzureStore.cs,Find,The length of the statement  "	TableQuery<AzureLogin> query = new TableQuery<AzureLogin> ().Where (TableQuery.CombineFilters (TableQuery.GenerateFilterCondition ("LoginProvider"' QueryComparisons.Equal' login.LoginProvider)' TableOperators.And' TableQuery.GenerateFilterCondition ("ProviderKey"' QueryComparisons.Equal' login.ProviderKey))).Select (new string[] { " is 332.
Long Statement,DAL.User,AzureStore,C:\repos\hjgraca_azuretake\DAL\User\AzureStore.cs,GetRolesAsync,The length of the statement  "		querySegment = await RolesTable.ExecuteQuerySegmentedAsync (query' querySegment != null ? querySegment.ContinuationToken : null); " is 129.
Empty Catch Block,DAL.User,AzureStore,C:\repos\hjgraca_azuretake\DAL\User\AzureStore.cs,CreateAsync,The method has an empty catch block.
Magic Number,DAL.User,AzureStore,C:\repos\hjgraca_azuretake\DAL\User\AzureStore.cs,CreateAsync,The following statement contains a magic number: try {  	await UserIndexTable.ExecuteAsync (indexOperation);  }  catch (StorageException ex) {  	if (ex.RequestInformation.HttpStatusCode == 409) {  		throw new DuplicateUsernameException ();  	}  	throw;  }  
Magic Number,DAL.User,AzureStore,C:\repos\hjgraca_azuretake\DAL\User\AzureStore.cs,CreateAsync,The following statement contains a magic number: if (ex.RequestInformation.HttpStatusCode == 409) {  	throw new DuplicateUsernameException ();  }  
Magic Number,DAL.User,AzureStore,C:\repos\hjgraca_azuretake\DAL\User\AzureStore.cs,CreateAsync,The following statement contains a magic number: if (!String.IsNullOrWhiteSpace (user.Email)) {  	AzureUserEmailIndex emailIndexItem = new AzureUserEmailIndex (user.Email.Base64Encode ()' user.Id);  	TableOperation emailIndexOperation = TableOperation.Insert (emailIndexItem);  	try {  		await UserEmailIndexTable.ExecuteAsync (emailIndexOperation);  	}  	catch (StorageException ex) {  		try {  			TableOperation deleteOperation = TableOperation.Delete (indexItem);  			UserIndexTable.ExecuteAsync (deleteOperation).Wait ();  		}  		catch (Exception) {  			// if we can't delete the index item throw out the exception below  		}  		if (ex.RequestInformation.HttpStatusCode == 409) {  			throw new DuplicateEmailException ();  		}  		throw;  	}  }  
Magic Number,DAL.User,AzureStore,C:\repos\hjgraca_azuretake\DAL\User\AzureStore.cs,CreateAsync,The following statement contains a magic number: try {  	await UserEmailIndexTable.ExecuteAsync (emailIndexOperation);  }  catch (StorageException ex) {  	try {  		TableOperation deleteOperation = TableOperation.Delete (indexItem);  		UserIndexTable.ExecuteAsync (deleteOperation).Wait ();  	}  	catch (Exception) {  		// if we can't delete the index item throw out the exception below  	}  	if (ex.RequestInformation.HttpStatusCode == 409) {  		throw new DuplicateEmailException ();  	}  	throw;  }  
Magic Number,DAL.User,AzureStore,C:\repos\hjgraca_azuretake\DAL\User\AzureStore.cs,CreateAsync,The following statement contains a magic number: if (ex.RequestInformation.HttpStatusCode == 409) {  	throw new DuplicateEmailException ();  }  
