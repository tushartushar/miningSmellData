Implementation smell,Namespace,Class,File,Method,Description
Long Statement,FloydPink.Flickr.Downloadr.Repository.Extensions,JsonExtensions,C:\repos\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Repository\Extensions\JsonExtensions.cs,ToJson,The length of the statement  "      InvariantCultureHelper.PerformInInvariantCulture(delegate { serialized = new JavaScriptSerializer().Serialize(value); }); " is 121.
Long Statement,FloydPink.Flickr.Downloadr.Repository.Extensions,JsonExtensions,C:\repos\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Repository\Extensions\JsonExtensions.cs,FromJson,The length of the statement  "      InvariantCultureHelper.PerformInInvariantCulture(delegate { deserialized = new JavaScriptSerializer().Deserialize<T>(json); }); " is 127.
Magic Number,FloydPink.Flickr.Downloadr.Repository.Helpers,Crypt,C:\repos\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Repository\Helpers\Crypt.cs,Encrypt,The following statement contains a magic number: try        {          // generate the key from the shared secret and the salt          var key = new Rfc2898DeriveBytes(sharedSecret' Salt);            // Create a RijndaelManaged object          aesAlg = new RijndaelManaged();          aesAlg.Key = key.GetBytes(aesAlg.KeySize/8);            // Create a decrytor to perform the stream transform.          var encryptor = aesAlg.CreateEncryptor(aesAlg.Key' aesAlg.IV);            // Create the streams used for encryption.          using (var msEncrypt = new MemoryStream())          {            // prepend the IV            msEncrypt.Write(BitConverter.GetBytes(aesAlg.IV.Length)' 0' sizeof(int));            msEncrypt.Write(aesAlg.IV' 0' aesAlg.IV.Length);            using (var csEncrypt = new CryptoStream(msEncrypt' encryptor' CryptoStreamMode.Write))            {              using (var swEncrypt = new StreamWriter(csEncrypt))              {                //Write all data to the stream.                swEncrypt.Write(plainText);              }            }            outStr = Convert.ToBase64String(msEncrypt.ToArray());          }        } finally        {          // Clear the RijndaelManaged object.          if (aesAlg != null)          {            aesAlg.Clear();          }        }
Magic Number,FloydPink.Flickr.Downloadr.Repository.Helpers,Crypt,C:\repos\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Repository\Helpers\Crypt.cs,Decrypt,The following statement contains a magic number: try        {          // generate the key from the shared secret and the salt          var key = new Rfc2898DeriveBytes(sharedSecret' Salt);            // Create the streams used for decryption.          var bytes = Convert.FromBase64String(cipherText);          using (var msDecrypt = new MemoryStream(bytes))          {            // Create a RijndaelManaged object            // with the specified key and IV.            aesAlg = new RijndaelManaged();            aesAlg.Key = key.GetBytes(aesAlg.KeySize/8);            // Get the initialization vector from the encrypted stream            aesAlg.IV = ReadByteArray(msDecrypt);            // Create a decrytor to perform the stream transform.            var decryptor = aesAlg.CreateDecryptor(aesAlg.Key' aesAlg.IV);            using (var csDecrypt = new CryptoStream(msDecrypt' decryptor' CryptoStreamMode.Read))            {              using (var srDecrypt = new StreamReader(csDecrypt))              {                // Read the decrypted bytes from the decrypting stream                // and place them in a string.                plaintext = srDecrypt.ReadToEnd();              }            }          }        } finally        {          // Clear the RijndaelManaged object.          if (aesAlg != null)          {            aesAlg.Clear();          }        }
