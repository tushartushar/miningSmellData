Implementation smell,Namespace,Class,File,Method,Description
Complex Method,FloydPink.Flickr.Downloadr.Logic,DownloadLogic,F:\newReposMay17\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\DownloadLogic.cs,DownloadPhotos,Cyclomatic complexity of the method is 13
Complex Method,FloydPink.Flickr.Downloadr.Logic,DownloadLogic,F:\newReposMay17\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\DownloadLogic.cs,DownloadAndSavePhoto,Cyclomatic complexity of the method is 8
Long Parameter List,FloydPink.Flickr.Downloadr.Logic.Interfaces,ILandingLogic,F:\newReposMay17\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\Interfaces\ILandingLogic.cs,GetPhotosetsAsync,The method has 5 parameters.
Long Parameter List,FloydPink.Flickr.Downloadr.Logic.Interfaces,IBrowserLogic,F:\newReposMay17\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\Interfaces\IBrowserLogic.cs,GetPhotosAsync,The method has 5 parameters.
Long Parameter List,FloydPink.Flickr.Downloadr.Logic.Interfaces,IBrowserLogic,F:\newReposMay17\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\Interfaces\IBrowserLogic.cs,Download,The method has 5 parameters.
Long Parameter List,FloydPink.Flickr.Downloadr.Logic.Interfaces,IDownloadLogic,F:\newReposMay17\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\Interfaces\IDownloadLogic.cs,Download,The method has 5 parameters.
Long Parameter List,FloydPink.Flickr.Downloadr.Logic,LandingLogic,F:\newReposMay17\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\LandingLogic.cs,GetPhotosetsAsync,The method has 5 parameters.
Long Parameter List,FloydPink.Flickr.Downloadr.Logic,BrowserLogic,F:\newReposMay17\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\BrowserLogic.cs,GetPhotosAsync,The method has 5 parameters.
Long Parameter List,FloydPink.Flickr.Downloadr.Logic,BrowserLogic,F:\newReposMay17\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\BrowserLogic.cs,Download,The method has 5 parameters.
Long Parameter List,FloydPink.Flickr.Downloadr.Logic,DownloadLogic,F:\newReposMay17\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\DownloadLogic.cs,Download,The method has 5 parameters.
Long Parameter List,FloydPink.Flickr.Downloadr.Logic,DownloadLogic,F:\newReposMay17\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\DownloadLogic.cs,DownloadPhotos,The method has 5 parameters.
Long Parameter List,FloydPink.Flickr.Downloadr.Logic,LoginLogic,F:\newReposMay17\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\LoginLogic.cs,LoginLogic,The method has 7 parameters.
Long Statement,FloydPink.Flickr.Downloadr.Logic,LandingLogic,F:\newReposMay17\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\LandingLogic.cs,GetCoverPhotoAsync,The length of the statement  "	var photosetsResponseDictionary = (Dictionary<string' object>)await _oAuthManager.MakeAuthenticatedRequestAsync (Methods.PeopleGetPhotos' extraParams); " is 151.
Long Statement,FloydPink.Flickr.Downloadr.Logic,LandingLogic,F:\newReposMay17\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\LandingLogic.cs,GetCoverPhotoAsync,The length of the statement  "	return photo != null ? new Photoset (null' null' null' null' 0' 0' 0' onlyPrivate ? "All Photos" : "All Public Photos"' ""' onlyPrivate ? PhotosetType.All : PhotosetType.Public' photo.SmallSquare75X75Url) : null; " is 212.
Long Statement,FloydPink.Flickr.Downloadr.Logic,LandingLogic,F:\newReposMay17\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\LandingLogic.cs,GetPhotosetsAsync,The length of the statement  "	var photosetsResponseDictionary = (Dictionary<string' object>)await _oAuthManager.MakeAuthenticatedRequestAsync (methodName' extraParams); " is 138.
Long Statement,FloydPink.Flickr.Downloadr.Logic,BrowserLogic,F:\newReposMay17\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\BrowserLogic.cs,GetPhotosAsync,The length of the statement  "	var photosResponse = (Dictionary<string' object>)await _oAuthManager.MakeAuthenticatedRequestAsync (methodName' extraParams); " is 125.
Long Statement,FloydPink.Flickr.Downloadr.Logic,DownloadLogic,F:\newReposMay17\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\DownloadLogic.cs,CreateDownloadFolder,The length of the statement  "	_currentTimestampFolder = string.Format ("flickr-downloadr{0}-{1}"' GetDownloadFolderNameForPhotoset (currentPhotoset)' GetSafeFilename (DateTime.Now.ToString ("yyyy-MM-dd_HH-mm-ss"))); " is 185.
Long Statement,FloydPink.Flickr.Downloadr.Logic,DownloadLogic,F:\newReposMay17\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\DownloadLogic.cs,WriteMetaDataFile,The length of the statement  "	var metadata = preferences.Metadata.ToDictionary (metadatum => metadatum' metadatum => photo.GetType ().GetProperty (metadatum).GetValue (photo' null).ToString ()); " is 164.
Long Statement,FloydPink.Flickr.Downloadr.Logic,OriginalTagsLogic,F:\newReposMay17\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\OriginalTagsLogic.cs,GetOriginalTagsTask,The length of the statement  "	var photoResponse = (Dictionary<string' object>)await _oAuthManager.MakeAuthenticatedRequestAsync (Methods.PhotosGetInfo' extraParams); " is 135.
Long Statement,FloydPink.Flickr.Downloadr.Logic.Extensions,DictionaryExtensions,F:\newReposMay17\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\Extensions\DictionaryExtensions.cs,GetPhotosResponseFromDictionary,The length of the statement  "	return new PhotosResponse (int.Parse (dictionary.GetSubValue (apiresponseCollectionName' "page").ToString ())' int.Parse (dictionary.GetSubValue (apiresponseCollectionName' "pages").ToString ())' int.Parse (dictionary.GetSubValue (apiresponseCollectionName' "perpage").ToString ())' int.Parse (dictionary.GetSubValue (apiresponseCollectionName' "total").ToString ())' photos); " is 376.
Long Statement,FloydPink.Flickr.Downloadr.Logic.Extensions,DictionaryExtensions,F:\newReposMay17\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\Extensions\DictionaryExtensions.cs,GetPhotosetsResponseFromDictionary,The length of the statement  "	return new PhotosetsResponse (int.Parse (dictionary.GetSubValue ("photosets"' "page").ToString ())' int.Parse (dictionary.GetSubValue ("photosets"' "pages").ToString ())' int.Parse (dictionary.GetSubValue ("photosets"' "perpage").ToString ())' int.Parse (dictionary.GetSubValue ("photosets"' "total").ToString ())' photosets); " is 326.
Long Statement,FloydPink.Flickr.Downloadr.Logic.Extensions,DictionaryExtensions,F:\newReposMay17\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\Extensions\DictionaryExtensions.cs,BuildPhoto,The length of the statement  "	return new Photo (dictionary.GetValue ("id").ToString ()' dictionary.GetValue ("owner").ToString ()' dictionary.GetValue ("secret").ToString ()' dictionary.GetValue ("server").ToString ()' int.Parse (dictionary.GetValue ("farm").ToString ())' dictionary.GetValue ("title").ToString ()' Convert.ToBoolean (dictionary.GetValue ("ispublic"))' Convert.ToBoolean (dictionary.GetValue ("isfriend"))' Convert.ToBoolean (dictionary.GetValue ("isfamily"))' dictionary.GetSubValue ("description").ToString ().Trim ()' dictionary.GetValue ("tags").ToString ()' dictionary.GetValue ("originalsecret").ToString ()' dictionary.GetValue ("originalformat").ToString ()' dictionary.GetValue ("url_sq").ToString ()' dictionary.GetValue ("url_q").ToString ()' dictionary.GetValue ("url_t").ToString ()' dictionary.GetValue ("url_s").ToString ()' dictionary.GetValue ("url_n").ToString ()' dictionary.GetValue ("url_m").ToString ()' dictionary.GetValue ("url_z").ToString ()' dictionary.GetValue ("url_c").ToString ()' dictionary.GetValue ("url_l").ToString ()' dictionary.GetValue ("url_o").ToString ()); " is 1085.
Long Statement,FloydPink.Flickr.Downloadr.Logic.Extensions,DictionaryExtensions,F:\newReposMay17\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\Extensions\DictionaryExtensions.cs,BuildPhotoset,The length of the statement  "	return new Photoset (dictionary.GetValue ("id").ToString ()' dictionary.GetValue ("primary").ToString ()' dictionary.GetValue ("secret").ToString ()' dictionary.GetValue ("server").ToString ()' int.Parse (dictionary.GetValue ("farm").ToString ())' int.Parse (dictionary.GetValue ("photos").ToString ())' int.Parse (dictionary.GetValue ("videos").ToString ())' dictionary.GetSubValue ("title").ToString ()' dictionary.GetSubValue ("description").ToString ()' PhotosetType.Album' null); " is 484.
Magic Number,FloydPink.Flickr.Downloadr.Logic,DownloadLogic,F:\newReposMay17\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\DownloadLogic.cs,DownloadPhotos,The following statement contains a magic number: foreach (var photo in photosList) {  	var photoUrl = photo.OriginalUrl;  	var photoExtension = "jpg";  	switch (preferences.DownloadSize) {  	case PhotoDownloadSize.Medium:  		photoUrl = photo.Medium800Url;  		break;  	case PhotoDownloadSize.Large:  		photoUrl = photo.Large1024Url;  		break;  	case PhotoDownloadSize.Original:  		photoUrl = photo.OriginalUrl;  		photoExtension = photo.DownloadFormat;  		break;  	}  	var photoWithPreferredTags = photo;  	if (preferences.NeedOriginalTags) {  		photoWithPreferredTags = await _originalTagsLogic.GetOriginalTagsTask (photo);  	}  	var photoName = preferences.TitleAsFilename ? GetSafeFilename (photo.Title) : photo.Id;  	var targetFileName = Path.Combine (imageDirectory.FullName' string.Format ("{0}.{1}"' photoName' photoExtension));  	WriteMetaDataFile (photoWithPreferredTags' targetFileName' preferences);  	var request = WebRequest.Create (photoUrl);  	var buffer = new byte[4096];  	await DownloadAndSavePhoto (targetFileName' request' buffer);  	doneCount++;  	progressUpdate.PercentDone = doneCount * 100 / totalCount;  	progressUpdate.DownloadedPath = imageDirectory.FullName;  	progress.Report (progressUpdate);  	if (doneCount != totalCount) {  		cancellationToken.ThrowIfCancellationRequested ();  	}  }  
Magic Number,FloydPink.Flickr.Downloadr.Logic,DownloadLogic,F:\newReposMay17\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\DownloadLogic.cs,DownloadPhotos,The following statement contains a magic number: foreach (var photo in photosList) {  	var photoUrl = photo.OriginalUrl;  	var photoExtension = "jpg";  	switch (preferences.DownloadSize) {  	case PhotoDownloadSize.Medium:  		photoUrl = photo.Medium800Url;  		break;  	case PhotoDownloadSize.Large:  		photoUrl = photo.Large1024Url;  		break;  	case PhotoDownloadSize.Original:  		photoUrl = photo.OriginalUrl;  		photoExtension = photo.DownloadFormat;  		break;  	}  	var photoWithPreferredTags = photo;  	if (preferences.NeedOriginalTags) {  		photoWithPreferredTags = await _originalTagsLogic.GetOriginalTagsTask (photo);  	}  	var photoName = preferences.TitleAsFilename ? GetSafeFilename (photo.Title) : photo.Id;  	var targetFileName = Path.Combine (imageDirectory.FullName' string.Format ("{0}.{1}"' photoName' photoExtension));  	WriteMetaDataFile (photoWithPreferredTags' targetFileName' preferences);  	var request = WebRequest.Create (photoUrl);  	var buffer = new byte[4096];  	await DownloadAndSavePhoto (targetFileName' request' buffer);  	doneCount++;  	progressUpdate.PercentDone = doneCount * 100 / totalCount;  	progressUpdate.DownloadedPath = imageDirectory.FullName;  	progress.Report (progressUpdate);  	if (doneCount != totalCount) {  		cancellationToken.ThrowIfCancellationRequested ();  	}  }  
Magic Number,FloydPink.Flickr.Downloadr.Logic,DownloadLogic,F:\newReposMay17\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\DownloadLogic.cs,DownloadPhotos,The following statement contains a magic number: progressUpdate.PercentDone = doneCount * 100 / totalCount;  
Magic Number,FloydPink.Flickr.Downloadr.Logic,DownloadLogic,F:\newReposMay17\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\DownloadLogic.cs,RandomString,The following statement contains a magic number: for (var i = 0; i < size; i++) {  	var ch = Convert.ToChar (Convert.ToInt32 (Math.Floor (26 * Random.NextDouble () + 65)' CultureInfo.InvariantCulture));  	builder.Append (ch);  }  
Magic Number,FloydPink.Flickr.Downloadr.Logic,DownloadLogic,F:\newReposMay17\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\DownloadLogic.cs,RandomString,The following statement contains a magic number: for (var i = 0; i < size; i++) {  	var ch = Convert.ToChar (Convert.ToInt32 (Math.Floor (26 * Random.NextDouble () + 65)' CultureInfo.InvariantCulture));  	builder.Append (ch);  }  
Magic Number,FloydPink.Flickr.Downloadr.Logic,DownloadLogic,F:\newReposMay17\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\DownloadLogic.cs,GetSafeFilename,The following statement contains a magic number: return string.IsNullOrWhiteSpace (safeFilename) ? RandomString (8) : safeFilename;  
Missing Default,FloydPink.Flickr.Downloadr.Logic,DownloadLogic,F:\newReposMay17\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\DownloadLogic.cs,DownloadPhotos,The following switch statement is missing a default case: switch (preferences.DownloadSize) {  case PhotoDownloadSize.Medium:  	photoUrl = photo.Medium800Url;  	break;  case PhotoDownloadSize.Large:  	photoUrl = photo.Large1024Url;  	break;  case PhotoDownloadSize.Original:  	photoUrl = photo.OriginalUrl;  	photoExtension = photo.DownloadFormat;  	break;  }  
