Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,FloydPink.Flickr.Downloadr.Logic.Interfaces,ILandingLogic,C:\repos\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\Interfaces\ILandingLogic.cs,GetPhotosetsAsync,The method has 5 parameters. Parameters: methodName' user' preferences' page' progress
Long Parameter List,FloydPink.Flickr.Downloadr.Logic.Interfaces,IBrowserLogic,C:\repos\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\Interfaces\IBrowserLogic.cs,GetPhotosAsync,The method has 5 parameters. Parameters: photoset' user' preferences' page' progress
Long Parameter List,FloydPink.Flickr.Downloadr.Logic.Interfaces,IBrowserLogic,C:\repos\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\Interfaces\IBrowserLogic.cs,Download,The method has 5 parameters. Parameters: photos' cancellationToken' progress' preferences' photoset
Long Parameter List,FloydPink.Flickr.Downloadr.Logic.Interfaces,IDownloadLogic,C:\repos\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\Interfaces\IDownloadLogic.cs,Download,The method has 5 parameters. Parameters: photos' cancellationToken' progress' preferences' photoset
Long Parameter List,FloydPink.Flickr.Downloadr.Logic,LandingLogic,C:\repos\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\LandingLogic.cs,GetPhotosetsAsync,The method has 5 parameters. Parameters: methodName' user' preferences' page' progress
Long Parameter List,FloydPink.Flickr.Downloadr.Logic,BrowserLogic,C:\repos\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\BrowserLogic.cs,GetPhotosAsync,The method has 5 parameters. Parameters: photoset' user' preferences' page' progress
Long Parameter List,FloydPink.Flickr.Downloadr.Logic,BrowserLogic,C:\repos\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\BrowserLogic.cs,Download,The method has 5 parameters. Parameters: photos' cancellationToken' progress' preferences' photoset
Long Parameter List,FloydPink.Flickr.Downloadr.Logic,DownloadLogic,C:\repos\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\DownloadLogic.cs,Download,The method has 5 parameters. Parameters: photos' cancellationToken' progress' preferences' photoset
Long Parameter List,FloydPink.Flickr.Downloadr.Logic,DownloadLogic,C:\repos\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\DownloadLogic.cs,DownloadPhotos,The method has 5 parameters. Parameters: photos' cancellationToken' progress' preferences' photoset
Long Parameter List,FloydPink.Flickr.Downloadr.Logic,LoginLogic,C:\repos\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\LoginLogic.cs,LoginLogic,The method has 7 parameters. Parameters: oAuthManager' userInfoLogic' process' tokenRepository' userRepository' preferencesRepository' updateRepository
Long Statement,FloydPink.Flickr.Downloadr.Logic,LandingLogic,C:\repos\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\LandingLogic.cs,LoadCacheForMatchingAlbums,The length of the statement  "        See the behaviour for the optional 'page' parameter' from "https://www.flickr.com/services/api/explore/flickr.photosets.getList": " is 129.
Long Statement,FloydPink.Flickr.Downloadr.Logic,LandingLogic,C:\repos\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\LandingLogic.cs,LoadCacheForMatchingAlbums,The length of the statement  "          - The page of results to get. Currently' if this is not provided' all sets are returned' but this behaviour may change in future. " is 129.
Long Statement,FloydPink.Flickr.Downloadr.Logic,LandingLogic,C:\repos\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\LandingLogic.cs,LoadCacheForMatchingAlbums,The length of the statement  "      IEnumerator<Dictionary<string' object>> browser = DictionaryExtensions.ExtractPhotosets(tmpPhotosetsToBeFiltered).GetEnumerator(); " is 130.
Long Statement,FloydPink.Flickr.Downloadr.Logic,LandingLogic,C:\repos\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\LandingLogic.cs,PaginatedCache,The length of the statement  "      return DictionaryExtensions.GetPhotosetsResponseFromFilteredDictionary(pageNumber' photosPerPage' cachedFilteredPhotosets); " is 123.
Magic Number,FloydPink.Flickr.Downloadr.Logic,DownloadLogic,C:\repos\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\DownloadLogic.cs,DownloadPhotos,The following statement contains a magic number: foreach (var photo in photosList)        {          curCount++;          var photoUrl = photo.OriginalUrl;          var photoExtension = "jpg";          switch (preferences.DownloadSize)          {            case PhotoDownloadSize.Medium:              photoUrl = photo.Medium800Url;              break;            case PhotoDownloadSize.Large:              photoUrl = photo.Large1024Url;              break;            case PhotoDownloadSize.Original:              photoUrl = photo.OriginalUrl;              photoExtension = photo.DownloadFormat;              break;          }            var photoWithPreferredTags = photo;            if (preferences.NeedOriginalTags)          {            photoWithPreferredTags = await _originalTagsLogic.GetOriginalTagsTask(photo);          }            var photoName = preferences.FileNameMode == FileNameMode.Title ? GetSafeFilename(photo.Title) : photo.Id;            if (preferences.FileNameMode == FileNameMode.OriginalOrder)          {            photoName = GetPadded(curCount);          }            var targetFileName = Path.Combine(imageDirectory.FullName'            string.Format("{0}.{1}"' photoName' photoExtension));            if (File.Exists(targetFileName)) {            targetFileName = Path.Combine(imageDirectory.FullName'            string.Format("{0}-{2}.{1}"' photoName' photoExtension' GetPadded(curCount)));          }            WriteMetaDataFile(photoWithPreferredTags' targetFileName' preferences);            var request = WebRequest.Create(photoUrl);            var buffer = new byte[4096];            await DownloadAndSavePhoto(targetFileName' request' buffer);            doneCount++;          progressUpdate.PercentDone = doneCount*100/totalCount;          progressUpdate.DownloadedPath = imageDirectory.FullName;          progress.Report(progressUpdate);          if (doneCount != totalCount)          {            cancellationToken.ThrowIfCancellationRequested();          }        }
Magic Number,FloydPink.Flickr.Downloadr.Logic,DownloadLogic,C:\repos\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\DownloadLogic.cs,DownloadPhotos,The following statement contains a magic number: foreach (var photo in photosList)        {          curCount++;          var photoUrl = photo.OriginalUrl;          var photoExtension = "jpg";          switch (preferences.DownloadSize)          {            case PhotoDownloadSize.Medium:              photoUrl = photo.Medium800Url;              break;            case PhotoDownloadSize.Large:              photoUrl = photo.Large1024Url;              break;            case PhotoDownloadSize.Original:              photoUrl = photo.OriginalUrl;              photoExtension = photo.DownloadFormat;              break;          }            var photoWithPreferredTags = photo;            if (preferences.NeedOriginalTags)          {            photoWithPreferredTags = await _originalTagsLogic.GetOriginalTagsTask(photo);          }            var photoName = preferences.FileNameMode == FileNameMode.Title ? GetSafeFilename(photo.Title) : photo.Id;            if (preferences.FileNameMode == FileNameMode.OriginalOrder)          {            photoName = GetPadded(curCount);          }            var targetFileName = Path.Combine(imageDirectory.FullName'            string.Format("{0}.{1}"' photoName' photoExtension));            if (File.Exists(targetFileName)) {            targetFileName = Path.Combine(imageDirectory.FullName'            string.Format("{0}-{2}.{1}"' photoName' photoExtension' GetPadded(curCount)));          }            WriteMetaDataFile(photoWithPreferredTags' targetFileName' preferences);            var request = WebRequest.Create(photoUrl);            var buffer = new byte[4096];            await DownloadAndSavePhoto(targetFileName' request' buffer);            doneCount++;          progressUpdate.PercentDone = doneCount*100/totalCount;          progressUpdate.DownloadedPath = imageDirectory.FullName;          progress.Report(progressUpdate);          if (doneCount != totalCount)          {            cancellationToken.ThrowIfCancellationRequested();          }        }
Magic Number,FloydPink.Flickr.Downloadr.Logic,DownloadLogic,C:\repos\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\DownloadLogic.cs,GetPadded,The following statement contains a magic number: return curCount.ToString().PadLeft(6' '0');
Magic Number,FloydPink.Flickr.Downloadr.Logic,DownloadLogic,C:\repos\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\DownloadLogic.cs,RandomString,The following statement contains a magic number: for (var i = 0; i < size; i++)        {          var ch = Convert.ToChar(Convert.ToInt32(Math.Floor(26*Random.NextDouble() + 65)' CultureInfo.InvariantCulture));          builder.Append(ch);        }
Magic Number,FloydPink.Flickr.Downloadr.Logic,DownloadLogic,C:\repos\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\DownloadLogic.cs,RandomString,The following statement contains a magic number: for (var i = 0; i < size; i++)        {          var ch = Convert.ToChar(Convert.ToInt32(Math.Floor(26*Random.NextDouble() + 65)' CultureInfo.InvariantCulture));          builder.Append(ch);        }
Magic Number,FloydPink.Flickr.Downloadr.Logic,DownloadLogic,C:\repos\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\DownloadLogic.cs,GetSafeFilename,The following statement contains a magic number: return string.IsNullOrWhiteSpace(safeFilename) ? RandomString(8) : safeFilename;
Missing Default,FloydPink.Flickr.Downloadr.Logic,DownloadLogic,C:\repos\flickr-downloadr_flickr-downloadr-gtk\source\FloydPink.Flickr.Downloadr.Logic\DownloadLogic.cs,DownloadPhotos,The following switch statement is missing a default case: switch (preferences.DownloadSize)          {            case PhotoDownloadSize.Medium:              photoUrl = photo.Medium800Url;              break;            case PhotoDownloadSize.Large:              photoUrl = photo.Large1024Url;              break;            case PhotoDownloadSize.Original:              photoUrl = photo.OriginalUrl;              photoExtension = photo.DownloadFormat;              break;          }
