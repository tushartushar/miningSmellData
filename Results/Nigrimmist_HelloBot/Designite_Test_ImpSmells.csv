Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Test,HtmlReaderManager,C:\research\architectureSmells\repos\Nigrimmist_HelloBot\TestConsoleApplication\HtmlReaderManager.cs,Request,Cyclomatic complexity of the method is 11
Long Parameter List,Test,HtmlReaderManager,C:\research\architectureSmells\repos\Nigrimmist_HelloBot\TestConsoleApplication\HtmlReaderManager.cs,TryCheckFileSizeByUrl,The method has 5 parameters. Parameters: url' maxFileSizeBytes' contentLength' contentType' _methodToCheck
Complex Conditional,Test,HtmlReaderManager,C:\research\architectureSmells\repos\Nigrimmist_HelloBot\TestConsoleApplication\HtmlReaderManager.cs,TryDownloadFileByUrl,The conditional expression  "(response.StatusCode == HttpStatusCode.OK ||                  response.StatusCode == HttpStatusCode.Moved ||                  response.StatusCode == HttpStatusCode.Redirect) &&                 response.ContentType.StartsWith("image"' StringComparison.OrdinalIgnoreCase)"  is complex.
Magic Number,Test,HtmlReaderManager,C:\research\architectureSmells\repos\Nigrimmist_HelloBot\TestConsoleApplication\HtmlReaderManager.cs,Post,The following statement contains a magic number: i < 10
Magic Number,Test,HtmlReaderManager,C:\research\architectureSmells\repos\Nigrimmist_HelloBot\TestConsoleApplication\HtmlReaderManager.cs,TryCheckFileSizeByUrl,The following statement contains a magic number: switch (_methodToCheck)                 {                     case "HEAD" :                     {                         using (System.Net.WebResponse resp = req.GetResponse())                         {                             contentType = resp.Headers.Get("Content-Type");                             int.TryParse(resp.Headers.Get("Content-Length")' out contentLength);                         }                         break;                     }                      case "GET":                     {                         //get first n bytes                         req.AddRange(0' maxFileSizeBytes);                         using (System.Net.WebResponse resp = req.GetResponse())                         {                             using (Stream stream = resp.GetResponseStream())                             {                                 byte[] buffer = new byte[1024];                                 int totalBytesRead = 0;                                 if (stream != null)                                 {                                     int read;                                     do                                     {                                         read = stream.Read(buffer' 0' 1024);                                         totalBytesRead += read;                                         if (totalBytesRead >= maxFileSizeBytes)                                         {                                             contentLength = maxFileSizeBytes+1;                                             return false;                                         }                                     } while (read!=0);                                     contentLength = totalBytesRead;                                     contentType = "image/gif";                                 }                                 else                                 {                                     return false;                                 }                             }                         }                         break;                     }                 }
Magic Number,Test,HtmlReaderManager,C:\research\architectureSmells\repos\Nigrimmist_HelloBot\TestConsoleApplication\HtmlReaderManager.cs,TryCheckFileSizeByUrl,The following statement contains a magic number: switch (_methodToCheck)                 {                     case "HEAD" :                     {                         using (System.Net.WebResponse resp = req.GetResponse())                         {                             contentType = resp.Headers.Get("Content-Type");                             int.TryParse(resp.Headers.Get("Content-Length")' out contentLength);                         }                         break;                     }                      case "GET":                     {                         //get first n bytes                         req.AddRange(0' maxFileSizeBytes);                         using (System.Net.WebResponse resp = req.GetResponse())                         {                             using (Stream stream = resp.GetResponseStream())                             {                                 byte[] buffer = new byte[1024];                                 int totalBytesRead = 0;                                 if (stream != null)                                 {                                     int read;                                     do                                     {                                         read = stream.Read(buffer' 0' 1024);                                         totalBytesRead += read;                                         if (totalBytesRead >= maxFileSizeBytes)                                         {                                             contentLength = maxFileSizeBytes+1;                                             return false;                                         }                                     } while (read!=0);                                     contentLength = totalBytesRead;                                     contentType = "image/gif";                                 }                                 else                                 {                                     return false;                                 }                             }                         }                         break;                     }                 }
Magic Number,Test,HtmlReaderManager,C:\research\architectureSmells\repos\Nigrimmist_HelloBot\TestConsoleApplication\HtmlReaderManager.cs,TryDownloadFileByUrl,The following statement contains a magic number: request.Timeout = 1000 * 15;
Magic Number,Test,HtmlReaderManager,C:\research\architectureSmells\repos\Nigrimmist_HelloBot\TestConsoleApplication\HtmlReaderManager.cs,TryDownloadFileByUrl,The following statement contains a magic number: request.Timeout = 1000 * 15;
Magic Number,Test,HtmlReaderManager,C:\research\architectureSmells\repos\Nigrimmist_HelloBot\TestConsoleApplication\HtmlReaderManager.cs,TryDownloadFileByUrl,The following statement contains a magic number: byte[] buffer = new byte[4096];
Missing Default,Test,HtmlReaderManager,C:\research\architectureSmells\repos\Nigrimmist_HelloBot\TestConsoleApplication\HtmlReaderManager.cs,TryCheckFileSizeByUrl,The following switch statement is missing a default case: switch (_methodToCheck)                 {                     case "HEAD" :                     {                         using (System.Net.WebResponse resp = req.GetResponse())                         {                             contentType = resp.Headers.Get("Content-Type");                             int.TryParse(resp.Headers.Get("Content-Length")' out contentLength);                         }                         break;                     }                      case "GET":                     {                         //get first n bytes                         req.AddRange(0' maxFileSizeBytes);                         using (System.Net.WebResponse resp = req.GetResponse())                         {                             using (Stream stream = resp.GetResponseStream())                             {                                 byte[] buffer = new byte[1024];                                 int totalBytesRead = 0;                                 if (stream != null)                                 {                                     int read;                                     do                                     {                                         read = stream.Read(buffer' 0' 1024);                                         totalBytesRead += read;                                         if (totalBytesRead >= maxFileSizeBytes)                                         {                                             contentLength = maxFileSizeBytes+1;                                             return false;                                         }                                     } while (read!=0);                                     contentLength = totalBytesRead;                                     contentType = "image/gif";                                 }                                 else                                 {                                     return false;                                 }                             }                         }                         break;                     }                 }
