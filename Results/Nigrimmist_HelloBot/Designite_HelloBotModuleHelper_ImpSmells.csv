Implementation smell,Namespace,Class,File,Method,Description
Complex Method,HelloBotModuleHelper,HtmlReaderManager,C:\repos\Nigrimmist_HelloBot\HelloBotModuleHelper\HtmlReaderManager.cs,Request,Cyclomatic complexity of the method is 8
Long Parameter List,HelloBotModuleHelper,HtmlReaderManager,C:\repos\Nigrimmist_HelloBot\HelloBotModuleHelper\HtmlReaderManager.cs,TryCheckFileSizeByUrl,The method has 5 parameters. Parameters: url' maxFileSizeBytes' contentLength' contentType' _methodToCheck
Complex Conditional,HelloBotModuleHelper,HtmlReaderManager,C:\repos\Nigrimmist_HelloBot\HelloBotModuleHelper\HtmlReaderManager.cs,TryDownloadFileByUrl,The conditional expression  "(response.StatusCode == HttpStatusCode.OK ||                   response.StatusCode == HttpStatusCode.Moved ||                   response.StatusCode == HttpStatusCode.Redirect) &&                  response.ContentType.StartsWith("image"' StringComparison.OrdinalIgnoreCase)"  is complex.
Magic Number,HelloBotModuleHelper,HtmlReaderManager,C:\repos\Nigrimmist_HelloBot\HelloBotModuleHelper\HtmlReaderManager.cs,Post,The following statement contains a magic number: for (int i = 0; i < 10; i++)              {                  bool post = false;                    switch (StatusCode)                  {                      case HttpStatusCode.MultipleChoices: // 300                      case HttpStatusCode.MovedPermanently: // 301                      case HttpStatusCode.Found: // 302                      case HttpStatusCode.SeeOther: // 303                          break;                        case HttpStatusCode.TemporaryRedirect: // 307                          post = true;                          break;                        default:                          return StatusCode;                  }                  if (Location != null)                      LastPostLocation = Location;                  if (Location == null)                      break;                    Uri uri = new Uri(new Uri(PreviousUri)' Location);                    //BaseUri = uri.Scheme + "://" + uri.Host;                  //requestUri = uri.AbsolutePath + uri.Query;                    Request(requestUri' post ? "POST" : "GET"' post ? postData : null);              }
Magic Number,HelloBotModuleHelper,HtmlReaderManager,C:\repos\Nigrimmist_HelloBot\HelloBotModuleHelper\HtmlReaderManager.cs,TryCheckFileSizeByUrl,The following statement contains a magic number: try              {                  HttpWebRequest req = System.Net.HttpWebRequest.Create(url) as HttpWebRequest;                  req.Method = _methodToCheck;                  req.CookieContainer = CookieContainer;                  req.UserAgent = UserAgent;                  req.Accept = Accept;                  req.Headers.Add("Accept-Language"' "ru-ru'ru;q=0.8'en-us;q=0.5'en;q=0.3");                                                      req.KeepAlive = true;                  switch (_methodToCheck)                  {                      case "HEAD" :                      {                          using (System.Net.WebResponse resp = req.GetResponse())                          {                              contentType = resp.Headers.Get("Content-Type");                              int.TryParse(resp.Headers.Get("Content-Length")' out contentLength);                          }                          break;                      }                        case "GET":                      {                          //get first n bytes                          req.AddRange(0' maxFileSizeBytes - 1 + 1);                          using (System.Net.WebResponse resp = req.GetResponse())                          {                              using (Stream stream = resp.GetResponseStream())                              {                                  byte[] buffer = new byte[1024];                                  int totalBytesRead = 0;                                  if (stream != null)                                  {                                      int read;                                      do                                      {                                          read = stream.Read(buffer' 0' 1024);                                          totalBytesRead += read;                                          if (totalBytesRead >= maxFileSizeBytes)                                          {                                              contentLength = maxFileSizeBytes+1;                                              return false;                                          }                                      } while (read!=0);                                      contentLength = totalBytesRead;                                      contentType = "image/gif";                                  }                                  else                                  {                                      return false;                                  }                              }                          }                          break;                      }                  }                                }              catch(Exception ex)              {                  var err = ex.ToString().ToLower();                  if ((err.Contains("method not allowed") || err.Contains("(403) forbidden")) && _methodToCheck == "HEAD")                  {                      return TryCheckFileSizeByUrl(url'maxFileSizeBytes' out contentLength' out contentType' "GET");                  }                  return false;              }
Magic Number,HelloBotModuleHelper,HtmlReaderManager,C:\repos\Nigrimmist_HelloBot\HelloBotModuleHelper\HtmlReaderManager.cs,TryCheckFileSizeByUrl,The following statement contains a magic number: try              {                  HttpWebRequest req = System.Net.HttpWebRequest.Create(url) as HttpWebRequest;                  req.Method = _methodToCheck;                  req.CookieContainer = CookieContainer;                  req.UserAgent = UserAgent;                  req.Accept = Accept;                  req.Headers.Add("Accept-Language"' "ru-ru'ru;q=0.8'en-us;q=0.5'en;q=0.3");                                                      req.KeepAlive = true;                  switch (_methodToCheck)                  {                      case "HEAD" :                      {                          using (System.Net.WebResponse resp = req.GetResponse())                          {                              contentType = resp.Headers.Get("Content-Type");                              int.TryParse(resp.Headers.Get("Content-Length")' out contentLength);                          }                          break;                      }                        case "GET":                      {                          //get first n bytes                          req.AddRange(0' maxFileSizeBytes - 1 + 1);                          using (System.Net.WebResponse resp = req.GetResponse())                          {                              using (Stream stream = resp.GetResponseStream())                              {                                  byte[] buffer = new byte[1024];                                  int totalBytesRead = 0;                                  if (stream != null)                                  {                                      int read;                                      do                                      {                                          read = stream.Read(buffer' 0' 1024);                                          totalBytesRead += read;                                          if (totalBytesRead >= maxFileSizeBytes)                                          {                                              contentLength = maxFileSizeBytes+1;                                              return false;                                          }                                      } while (read!=0);                                      contentLength = totalBytesRead;                                      contentType = "image/gif";                                  }                                  else                                  {                                      return false;                                  }                              }                          }                          break;                      }                  }                                }              catch(Exception ex)              {                  var err = ex.ToString().ToLower();                  if ((err.Contains("method not allowed") || err.Contains("(403) forbidden")) && _methodToCheck == "HEAD")                  {                      return TryCheckFileSizeByUrl(url'maxFileSizeBytes' out contentLength' out contentType' "GET");                  }                  return false;              }
Magic Number,HelloBotModuleHelper,HtmlReaderManager,C:\repos\Nigrimmist_HelloBot\HelloBotModuleHelper\HtmlReaderManager.cs,TryDownloadFileByUrl,The following statement contains a magic number: request.Timeout = 1000 * 15;
Magic Number,HelloBotModuleHelper,HtmlReaderManager,C:\repos\Nigrimmist_HelloBot\HelloBotModuleHelper\HtmlReaderManager.cs,TryDownloadFileByUrl,The following statement contains a magic number: request.Timeout = 1000 * 15;
Magic Number,HelloBotModuleHelper,HtmlReaderManager,C:\repos\Nigrimmist_HelloBot\HelloBotModuleHelper\HtmlReaderManager.cs,TryDownloadFileByUrl,The following statement contains a magic number: if ((response.StatusCode == HttpStatusCode.OK ||                   response.StatusCode == HttpStatusCode.Moved ||                   response.StatusCode == HttpStatusCode.Redirect) &&                  response.ContentType.StartsWith("image"' StringComparison.OrdinalIgnoreCase))              {                    // if the remote file was found' download it                  using (Stream inputStream = response.GetResponseStream())                  {                      byte[] buffer = new byte[4096];                      int bytesRead;                      do                      {                          bytesRead = inputStream.Read(buffer' 0' buffer.Length);                          str.Write(buffer' 0' bytesRead);                      } while (bytesRead != 0);                  }                  return true;              }              else                  return false;
Missing Default,HelloBotModuleHelper,HtmlReaderManager,C:\repos\Nigrimmist_HelloBot\HelloBotModuleHelper\HtmlReaderManager.cs,TryCheckFileSizeByUrl,The following switch statement is missing a default case: switch (_methodToCheck)                  {                      case "HEAD" :                      {                          using (System.Net.WebResponse resp = req.GetResponse())                          {                              contentType = resp.Headers.Get("Content-Type");                              int.TryParse(resp.Headers.Get("Content-Length")' out contentLength);                          }                          break;                      }                        case "GET":                      {                          //get first n bytes                          req.AddRange(0' maxFileSizeBytes - 1 + 1);                          using (System.Net.WebResponse resp = req.GetResponse())                          {                              using (Stream stream = resp.GetResponseStream())                              {                                  byte[] buffer = new byte[1024];                                  int totalBytesRead = 0;                                  if (stream != null)                                  {                                      int read;                                      do                                      {                                          read = stream.Read(buffer' 0' 1024);                                          totalBytesRead += read;                                          if (totalBytesRead >= maxFileSizeBytes)                                          {                                              contentLength = maxFileSizeBytes+1;                                              return false;                                          }                                      } while (read!=0);                                      contentLength = totalBytesRead;                                      contentType = "image/gif";                                  }                                  else                                  {                                      return false;                                  }                              }                          }                          break;                      }                  }
