Implementation smell,Namespace,Class,File,Method,Description
Long Method,YesSql,Session,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Session.cs,ReduceAsync,The method has 113 lines of code.
Long Method,YesSql.Services,DefaultQuery,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultQuery.cs,DefaultQuery,The method has 159 lines of code.
Long Method,YesSql.Services,DefaultQuery,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultQuery.cs,ConvertFragment,The method has 103 lines of code.
Complex Method,YesSql,Session,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Session.cs,Save,Cyclomatic complexity of the method is 8
Complex Method,YesSql,Session,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Session.cs,UpdateEntityAsync,Cyclomatic complexity of the method is 8
Complex Method,YesSql,Session,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Session.cs,FlushAsync,Cyclomatic complexity of the method is 8
Complex Method,YesSql,Session,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Session.cs,ReduceAsync,Cyclomatic complexity of the method is 17
Complex Method,YesSql,Session,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Session.cs,MapNew,Cyclomatic complexity of the method is 8
Complex Method,YesSql.Services,DefaultQuery,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultQuery.cs,Evaluate,Cyclomatic complexity of the method is 12
Complex Method,YesSql.Services,DefaultQuery,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultQuery.cs,GetBinaryOperator,Cyclomatic complexity of the method is 12
Complex Method,YesSql.Services,DefaultQuery,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultQuery.cs,ConvertFragment,Cyclomatic complexity of the method is 15
Complex Method,YesSql.Services,DefaultQuery,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultQuery.cs,IsParameterBased,Cyclomatic complexity of the method is 10
Complex Method,YesSql.Sql,BaseCommandInterpreter,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Sql\BaseComandInterpreter.cs,CreateSql,Cyclomatic complexity of the method is 8
Complex Method,YesSql.Sql,BaseCommandInterpreter,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Sql\BaseComandInterpreter.cs,Run,Cyclomatic complexity of the method is 8
Long Parameter List,YesSql.Services,DefaultQuery,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultQuery.cs,DefaultQuery,The method has 6 parameters. Parameters: connection' transaction' session' tablePrefix' queryState' compiledQuery
Long Parameter List,YesSql.Sql,SchemaBuilder,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Sql\SchemaBuilder.cs,CreateForeignKey,The method has 5 parameters. Parameters: name' srcTable' srcColumns' destTable' destColumns
Long Parameter List,YesSql.Sql,SchemaBuilder,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Sql\SchemaBuilder.cs,CreateForeignKey,The method has 6 parameters. Parameters: name' srcModule' srcTable' srcColumns' destTable' destColumns
Long Parameter List,YesSql.Sql,SchemaBuilder,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Sql\SchemaBuilder.cs,CreateForeignKey,The method has 6 parameters. Parameters: name' srcTable' srcColumns' destModule' destTable' destColumns
Long Parameter List,YesSql.Sql,SchemaBuilder,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Sql\SchemaBuilder.cs,CreateForeignKey,The method has 7 parameters. Parameters: name' srcModule' srcTable' srcColumns' destModule' destTable' destColumns
Long Parameter List,YesSql.Sql.Schema,CreateForeignKeyCommand,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Sql\Schema\CreateForeignKeyCommand.cs,CreateForeignKeyCommand,The method has 5 parameters. Parameters: name' srcTable' srcColumns' destTable' destColumns
Long Statement,YesSql.Commands,CreateDocumentCommand,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Commands\CreateDocumentCommand.cs,ExecuteAsync,The length of the statement  "            var insertCmd = "insert into " + dialect.QuoteForTableName(_tablePrefix + documentTable) + " (" + dialect.QuoteForColumnName("Id") + "' " + dialect.QuoteForColumnName("Type") + "' " + dialect.QuoteForColumnName("Content") + "' " + dialect.QuoteForColumnName("Version") + ") values (@Id' @Type' @Content' @Version);"; " is 316.
Long Statement,YesSql.Commands,CreateIndexCommand,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Commands\CreateIndexCommand.cs,ExecuteAsync,The length of the statement  "                var command = "update " + dialect.QuoteForTableName(_tablePrefix + type.Name) + " set " + dialect.QuoteForColumnName("DocumentId") + " = @mapid where " + dialect.QuoteForColumnName("Id") + " = @Id"; " is 198.
Long Statement,YesSql.Commands,CreateIndexCommand,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Commands\CreateIndexCommand.cs,ExecuteAsync,The length of the statement  "                await connection.ExecuteAsync(command' new { mapid = Index.GetAddedDocuments().Single().Id' Id = Index.Id }' transaction); " is 122.
Long Statement,YesSql.Commands,CreateIndexCommand,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Commands\CreateIndexCommand.cs,ExecuteAsync,The length of the statement  "                var bridgeSql = "insert into " + dialect.QuoteForTableName(_tablePrefix + bridgeTableName) + " (" + columnList + ") values (@Id' @DocumentId);"; " is 144.
Long Statement,YesSql.Commands,CreateIndexCommand,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Commands\CreateIndexCommand.cs,ExecuteAsync,The length of the statement  "                await connection.ExecuteAsync(bridgeSql' _addedDocumentIds.Select(x => new { DocumentId = x' Id = Index.Id })' transaction); " is 124.
Long Statement,YesSql.Commands,DeleteDocumentCommand,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Commands\DeleteDocumentCommand.cs,ExecuteAsync,The length of the statement  "            var deleteCmd = "delete from " + dialect.QuoteForTableName(_tablePrefix + documentTable) + " where " + dialect.QuoteForColumnName("Id") + " = @Id;"; " is 148.
Long Statement,YesSql.Commands,DeleteMapIndexCommand,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Commands\DeleteMapIndexCommand.cs,ExecuteAsync,The length of the statement  "            var command = "delete from " + dialect.QuoteForTableName(_tablePrefix + _indexType.Name) + " where " + dialect.QuoteForColumnName("DocumentId") + " = @Id"; " is 155.
Long Statement,YesSql.Commands,DeleteReduceIndexCommand,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Commands\DeleteReduceIndexCommand.cs,ExecuteAsync,The length of the statement  "            var bridgeSql = "delete from " + dialect.QuoteForTableName(_tablePrefix + bridgeTableName) +" where " + dialect.QuoteForColumnName(name + "Id") + " = @Id"; " is 155.
Long Statement,YesSql.Commands,DeleteReduceIndexCommand,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Commands\DeleteReduceIndexCommand.cs,ExecuteAsync,The length of the statement  "            var command = "delete from " + dialect.QuoteForTableName(_tablePrefix + name) + " where " + dialect.QuoteForColumnName("Id") + " = @Id"; " is 136.
Long Statement,YesSql.Commands,IndexCommand,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Commands\IndexCommand.cs,Inserts,The length of the statement  "                InsertsList[key] = result = $"INSERT INTO {dialect.QuoteForTableName(_tablePrefix + type.Name)} {values} {dialect.IdentitySelectString} {dialect.QuoteForColumnName("Id")}"; " is 172.
Long Statement,YesSql.Commands,IndexCommand,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Commands\IndexCommand.cs,Updates,The length of the statement  "                UpdatesList[key] = result = $"UPDATE {dialect.QuoteForTableName(_tablePrefix + type.Name)} SET {values} WHERE {dialect.QuoteForColumnName("Id")} = @Id;"; " is 153.
Long Statement,YesSql.Commands,UpdateDocumentCommand,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Commands\UpdateDocumentCommand.cs,ExecuteAsync,The length of the statement  "                + " set " + dialect.QuoteForColumnName("Content") + " = @Content' " + dialect.QuoteForColumnName("Version")  + " = @Version where " " is 131.
Long Statement,YesSql.Commands,UpdateDocumentCommand,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Commands\UpdateDocumentCommand.cs,ExecuteAsync,The length of the statement  "                + (_checkVersion > -1 ? " and " + dialect.QuoteForColumnName("Version") + " = " + dialect.GetSqlValue(_checkVersion) + ";" : ";") " is 129.
Long Statement,YesSql.Commands,UpdateIndexCommand,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Commands\UpdateIndexCommand.cs,ExecuteAsync,The length of the statement  "                var bridgeSqlAdd = "insert into " + dialect.QuoteForTableName(_tablePrefix + bridgeTableName) + " (" + columnList + ") values (@Id' @DocumentId);"; " is 147.
Long Statement,YesSql.Commands,UpdateIndexCommand,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Commands\UpdateIndexCommand.cs,ExecuteAsync,The length of the statement  "                var bridgeSqlRemove = "delete from " + dialect.QuoteForTableName(_tablePrefix + bridgeTableName) + " where " + dialect.QuoteForColumnName("DocumentId") + " = @DocumentId and " + dialect.QuoteForColumnName(type.Name + "Id") + " = @Id;"; " is 235.
Long Statement,YesSql.Commands,UpdateIndexCommand,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Commands\UpdateIndexCommand.cs,ExecuteAsync,The length of the statement  "                await connection.ExecuteAsync(bridgeSqlAdd' _addedDocumentIds.Select(x => new { DocumentId = x' Id = Index.Id })' transaction); " is 127.
Long Statement,YesSql.Commands,UpdateIndexCommand,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Commands\UpdateIndexCommand.cs,ExecuteAsync,The length of the statement  "                await connection.ExecuteAsync(bridgeSqlRemove' _deletedDocumentIds.Select(x => new { DocumentId = x' Id = Index.Id })' transaction); " is 132.
Long Statement,YesSql,Session,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Session.cs,Import,The length of the statement  "                    throw new InvalidOperationException("Objects without an 'Id' property can't be imported if no 'id' argument is provided."); " is 123.
Long Statement,YesSql,Session,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Session.cs,UpdateEntityAsync,The length of the statement  "                    throw new InvalidOperationException("Incorrect attempt to update an object that doesn't exist. Ensure a new object was not saved with an identifier value."); " is 157.
Long Statement,YesSql,Session,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Session.cs,UpdateEntityAsync,The length of the statement  "            await new UpdateDocumentCommand(oldDoc' Store.Configuration.TablePrefix' version).ExecuteAsync(_connection' _transaction' _dialect' _logger); " is 141.
Long Statement,YesSql,Session,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Session.cs,GetDocumentByIdAsync,The length of the statement  "            var command = "select * from " + _dialect.QuoteForTableName(_tablePrefix + documentTable) + " where " + _dialect.QuoteForColumnName("Id") + " = @Id"; " is 149.
Long Statement,YesSql,Session,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Session.cs,GetAsync,The length of the statement  "            var command = "select * from " + _dialect.QuoteForTableName(_tablePrefix + documentTable) + " where " + _dialect.QuoteForColumnName("Id") + " " + _dialect.InOperator("@Ids"); " is 174.
Long Statement,YesSql,Session,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Session.cs,ReduceForAsync,The length of the statement  "            var sql = "select * from " + _dialect.QuoteForTableName(name) + " where " + _dialect.QuoteForColumnName(descriptor.GroupKey.Name) + " = @currentKey"; " is 149.
Long Statement,YesSql.Services,DbBlockIdGenerator,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DbBlockIdGenerator.cs,InitializeAsync,The length of the statement  "            SelectCommand = "SELECT " + _dialect.QuoteForColumnName("nextval") + " FROM " + _dialect.QuoteForTableName(_tablePrefix + TableName) + " WHERE " + _dialect.QuoteForTableName("dimension") + " = @dimension;"; " is 206.
Long Statement,YesSql.Services,DbBlockIdGenerator,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DbBlockIdGenerator.cs,InitializeAsync,The length of the statement  "            UpdateCommand = "UPDATE " + _dialect.QuoteForTableName(_tablePrefix + TableName) + " SET " + _dialect.QuoteForColumnName("nextval") + "=@new WHERE " + _dialect.QuoteForColumnName("nextval") + " = @previous AND " + _dialect.QuoteForColumnName("dimension") + " = @dimension;"; " is 274.
Long Statement,YesSql.Services,DbBlockIdGenerator,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DbBlockIdGenerator.cs,InitializeAsync,The length of the statement  "            InsertCommand = "INSERT INTO " + _dialect.QuoteForTableName(_tablePrefix + TableName) + " (" + _dialect.QuoteForColumnName("dimension") + "' " + _dialect.QuoteForColumnName("nextval") + ") VALUES(@dimension' @nextval);"; " is 220.
Long Statement,YesSql.Services,DefaultIdGenerator,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultIdGenerator.cs,InitializeCollectionAsync,The length of the statement  "                    var sql = "SELECT MAX(" + _dialect.QuoteForColumnName("Id") + ") FROM " + _dialect.QuoteForTableName(_tablePrefix + tableName); " is 127.
Long Statement,YesSql.Services,QueryState,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultQuery.cs,Clone,The length of the statement  "            clone._parameterBindings = _parameterBindings == null ? null : new List<Action<object' ISqlBuilder>>(_parameterBindings); " is 121.
Long Statement,YesSql.Services,DefaultQuery,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultQuery.cs,Evaluate,The length of the statement  "                        _queryState._parameterBindings.Add((o' sqlBuilder) => sqlBuilder.Parameters[_parameterName] = ((PropertyInfo)memberExpression.Member).GetValue(o)); " is 147.
Long Statement,YesSql.Services,DefaultQuery,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultQuery.cs,Evaluate,The length of the statement  "                        _queryState._parameterBindings.Add((o' sqlBuilder) => sqlBuilder.Parameters[_parameterName] = ((PropertyInfo)memberExpression.Member).GetValue(o)); " is 147.
Long Statement,YesSql.Services,DefaultQuery,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultQuery.cs,ConvertFragment,The length of the statement  "                    ConvertFragment(builder' Expression.MakeBinary(ExpressionType.NotEqual' ((UnaryExpression)expression).Operand' Expression.Constant(true))); " is 139.
Long Statement,YesSql.Services,DefaultQuery,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultQuery.cs,ConvertComparisonBinaryExpression,The length of the statement  "                var leftIsNull = expression.Left.NodeType == ExpressionType.Constant && (expression.Left as ConstantExpression).Value == null; " is 126.
Long Statement,YesSql.Services,DefaultQuery,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultQuery.cs,ConvertComparisonBinaryExpression,The length of the statement  "                var rightIsNull = expression.Right.NodeType == ExpressionType.Constant && (expression.Right as ConstantExpression).Value == null; " is 129.
Long Statement,YesSql.Services,DefaultQuery,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultQuery.cs,For,The length of the statement  "                _queryState._sqlBuilder.WhereAlso(_queryState._sqlBuilder.FormatColumn(_queryState._documentTable' "Type") + " = @Type"); // TODO: investigate' this makes the query 3 times slower on sqlite " is 189.
Long Statement,YesSql.Services,Query<T>,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultQuery.cs,FirstOrDefaultImpl,The length of the statement  "                            return localTransaction.Connection.QueryAsync<T>(localSql' localQuery._queryState._sqlBuilder.Parameters' localTransaction); " is 124.
Long Statement,YesSql.Services,Query<T>,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultQuery.cs,FirstOrDefaultImpl,The length of the statement  "                            return localTransaction.Connection.QueryAsync<Document>(localSql' localQuery._queryState._sqlBuilder.Parameters' localTransaction); " is 131.
Long Statement,YesSql.Services,Query<T>,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultQuery.cs,ListImpl,The length of the statement  "                // TODO: [IAsyncEnumerable] Once Dapper supports IAsyncEnumerable we can return it by default' and buffer it in ListAsync instead " is 129.
Long Statement,YesSql.Services,Query<T>,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultQuery.cs,ListImpl,The length of the statement  "                            return localTransaction.Connection.QueryAsync<T>(localSql' localQuery._queryState._sqlBuilder.Parameters' localTransaction); " is 124.
Long Statement,YesSql.Services,Query<T>,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultQuery.cs,ListImpl,The length of the statement  "                            _query._queryState._sqlBuilder.OrderBy(_query._queryState._sqlBuilder.FormatColumn(_query._queryState._documentTable' "Id")); " is 125.
Long Statement,YesSql.Services,Query<T>,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultQuery.cs,ListImpl,The length of the statement  "                        _query._queryState._sqlBuilder.Selector(_query._queryState._sqlBuilder.FormatColumn(_query._queryState._documentTable' "*")); " is 125.
Long Statement,YesSql.Services,Query<T>,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultQuery.cs,ListImpl,The length of the statement  "                            return localTransaction.Connection.QueryAsync<Document>(localSql' localQuery._queryState._sqlBuilder.Parameters' localTransaction); " is 131.
Long Statement,YesSql.Services,Query<T>,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultQuery.cs,Skip,The length of the statement  "                    _query._queryState._sqlBuilder.OrderBy(_query._queryState._sqlBuilder.FormatColumn(_query._queryState._documentTable' "Id")); " is 125.
Long Statement,YesSql.Services,Query<T>,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultQuery.cs,Take,The length of the statement  "                    _query._queryState._sqlBuilder.OrderBy(_query._queryState._sqlBuilder.FormatColumn(_query._queryState._documentTable' "Id")); " is 125.
Long Statement,YesSql.Sql,BaseCommandInterpreter,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Sql\BaseComandInterpreter.cs,Run,The length of the statement  "            var primaryKeys = command.TableCommands.OfType<CreateColumnCommand>().Where(ccc => ccc.IsPrimaryKey && !ccc.IsIdentity).Select(ccc => _dialect.QuoteForColumnName(ccc.ColumnName)).ToArray(); " is 189.
Long Statement,YesSql.Sql,BaseCommandInterpreter,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Sql\BaseComandInterpreter.cs,Run,The length of the statement  "                    throw new Exception("Error while executing data migration: you need to specify the field's type in order to change its properties"); " is 132.
Long Statement,YesSql.Sql,SchemaBuilder,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Sql\SchemaBuilder.cs,CreateReduceIndexTable,The length of the statement  "                CreateForeignKey("FK_" + bridgeTableName + "_DocumentId"' bridgeTableName' new[] { "DocumentId" }' documentTable' new[] { "Id" }); " is 130.
Long Statement,Roslyn.Utilities,ObjectPool<T>,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Utils\ObjectPool.cs,ForgetTrackedObject,The length of the statement  "                Debug.WriteLine($"TRACEOBJECTPOOLLEAKS_BEGIN\nObject of type {typeof(T)} was freed' but was not from pool. \n Callstack: \n {trace} TRACEOBJECTPOOLLEAKS_END"); " is 159.
Empty Catch Block,YesSql,Store,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Store.cs,InitializeCollectionAsync,The method has an empty catch block.
Empty Catch Block,YesSql,Store,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Store.cs,InitializeCollectionAsync,The method has an empty catch block.
Empty Catch Block,YesSql.Services,DbBlockIdGenerator,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DbBlockIdGenerator.cs,InitializeAsync,The method has an empty catch block.
Magic Number,YesSql.Commands,CompoundKey,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Commands\IndexCommand.cs,GetHashCode,The following statement contains a magic number: var hashCode = 13;
Magic Number,YesSql.Commands,CompoundKey,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Commands\IndexCommand.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (!string.IsNullOrEmpty(_key1) ? _key1.GetHashCode() : 0);
Magic Number,YesSql.Commands,CompoundKey,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Commands\IndexCommand.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (!string.IsNullOrEmpty(_key2) ? _key2.GetHashCode() : 0);
Magic Number,YesSql.Commands,CompoundKey,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Commands\IndexCommand.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (!string.IsNullOrEmpty(_key3) ? _key3.GetHashCode() : 0);
Magic Number,YesSql,Configuration,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Configuration.cs,Configuration,The following statement contains a magic number: SessionPoolSize = 16;
Magic Number,YesSql,Session,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Session.cs,GetDocumentByIdAsync,The following statement contains a magic number: var result = await _store.ProduceAsync(key' (args) =>                  {                      var localStore = (Store)args[0];                      var localConnection = (DbConnection)args[1];                      var localTransaction = (DbTransaction)args[2];                      var localCommand = (string)args[3];                      var localParameters = (object)args[4];                        localStore.Configuration.Logger.LogTrace(localCommand);                      return localConnection.QueryAsync<Document>(localCommand' localParameters' localTransaction);                  }'                  _store'                  _connection'                  _transaction'                  command'                  new { Id = id });
Magic Number,YesSql,Session,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Session.cs,GetDocumentByIdAsync,The following statement contains a magic number: var result = await _store.ProduceAsync(key' (args) =>                  {                      var localStore = (Store)args[0];                      var localConnection = (DbConnection)args[1];                      var localTransaction = (DbTransaction)args[2];                      var localCommand = (string)args[3];                      var localParameters = (object)args[4];                        localStore.Configuration.Logger.LogTrace(localCommand);                      return localConnection.QueryAsync<Document>(localCommand' localParameters' localTransaction);                  }'                  _store'                  _connection'                  _transaction'                  command'                  new { Id = id });
Magic Number,YesSql,Session,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Session.cs,GetDocumentByIdAsync,The following statement contains a magic number: var result = await _store.ProduceAsync(key' (args) =>                  {                      var localStore = (Store)args[0];                      var localConnection = (DbConnection)args[1];                      var localTransaction = (DbTransaction)args[2];                      var localCommand = (string)args[3];                      var localParameters = (object)args[4];                        localStore.Configuration.Logger.LogTrace(localCommand);                      return localConnection.QueryAsync<Document>(localCommand' localParameters' localTransaction);                  }'                  _store'                  _connection'                  _transaction'                  command'                  new { Id = id });
Magic Number,YesSql,Session,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Session.cs,GetAsync,The following statement contains a magic number: var documents = await _store.ProduceAsync(key' (args) =>                  {                      var localConnection = (DbConnection)args[0];                      var localTransaction = (DbTransaction)args[1];                      var localCommand = (string)args[2];                      var localParamters = args[3];                        return localConnection.QueryAsync<Document>(localCommand' localParamters' localTransaction);                  }'                  _connection'                  _transaction'                  command'                  new { Ids = ids });
Magic Number,YesSql,Session,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Session.cs,GetAsync,The following statement contains a magic number: var documents = await _store.ProduceAsync(key' (args) =>                  {                      var localConnection = (DbConnection)args[0];                      var localTransaction = (DbTransaction)args[1];                      var localCommand = (string)args[2];                      var localParamters = args[3];                        return localConnection.QueryAsync<Document>(localCommand' localParamters' localTransaction);                  }'                  _connection'                  _transaction'                  command'                  new { Ids = ids });
Magic Number,YesSql.Data,WorkerQueryKey,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Data\WorkerQueryKey.cs,WorkerQueryKey,The following statement contains a magic number: parameters.Count < 5 && parameters.All(x => x.Value is ValueType)
Magic Number,YesSql.Data,WorkerQueryKey,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Data\WorkerQueryKey.cs,GetHashCode,The following statement contains a magic number: var combinedHash = 5381;
Magic Number,YesSql.Data,WorkerQueryKey,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Data\WorkerQueryKey.cs,GetHashCode,The following statement contains a magic number: combinedHash = ((combinedHash << 5) + combinedHash) ^ _prefix.GetHashCode();
Magic Number,YesSql.Data,WorkerQueryKey,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Data\WorkerQueryKey.cs,GetHashCode,The following statement contains a magic number: combinedHash = ((combinedHash << 5) + combinedHash) ^ parameter.Key.GetHashCode();
Magic Number,YesSql.Data,WorkerQueryKey,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Data\WorkerQueryKey.cs,GetHashCode,The following statement contains a magic number: combinedHash = ((combinedHash << 5) + combinedHash) ^ parameter.Value.GetHashCode();
Magic Number,YesSql.Services,DefaultQuery,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultQuery.cs,DefaultQuery,The following statement contains a magic number: MethodMappings[typeof(DefaultQueryExtensionsIndex).GetMethod("IsIn")] =                  (query' builder' dialect' expression) =>                  {                      var selector = expression.Arguments[1];                      var predicate = expression.Arguments[2];                        var tIndex = ((LambdaExpression)((UnaryExpression)selector).Operand).Parameters[0].Type;                      query._queryState._bound.Add(tIndex);                        var sqlBuilder = query._dialect.CreateBuilder(query._session._store.Configuration.TablePrefix);                        // Build inner query                      var _builder = new StringBuilder();                        sqlBuilder.Select();                        query.ConvertFragment(_builder' ((LambdaExpression)((UnaryExpression)selector).Operand).Body);                      sqlBuilder.Selector(_builder.ToString());                      _builder.Clear();                        sqlBuilder.Table(((LambdaExpression)((UnaryExpression)selector).Operand).Parameters[0].Type.Name);                      query.ConvertPredicate(_builder' ((LambdaExpression)((UnaryExpression)predicate).Operand).Body);                      sqlBuilder.WhereAlso(_builder.ToString());                        query._queryState._bound.RemoveAt(query._queryState._bound.Count - 1);                        // Insert query                      query.ConvertFragment(builder' expression.Arguments[0]);                      builder.Append(dialect.InSelectOperator(sqlBuilder.ToSqlString()));                  };
Magic Number,YesSql.Services,DefaultQuery,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultQuery.cs,DefaultQuery,The following statement contains a magic number: MethodMappings[typeof(DefaultQueryExtensionsIndex).GetMethod("IsNotIn")] =                  (query' builder' dialect' expression) =>                  {                      var selector = expression.Arguments[1];                      var predicate = expression.Arguments[2];                        var tIndex = ((LambdaExpression)((UnaryExpression)selector).Operand).Parameters[0].Type;                      query._queryState._bound.Add(tIndex);                        var sqlBuilder = query._dialect.CreateBuilder(query._session._store.Configuration.TablePrefix);                        // Build inner query                      var _builder = new StringBuilder();                        sqlBuilder.Select();                        query.ConvertFragment(_builder' ((LambdaExpression)((UnaryExpression)selector).Operand).Body);                      sqlBuilder.Selector(_builder.ToString());                      _builder.Clear();                        sqlBuilder.Table(query._queryState._bound.Last().Name);                      query.ConvertPredicate(_builder' ((LambdaExpression)((UnaryExpression)predicate).Operand).Body);                      sqlBuilder.WhereAlso(_builder.ToString());                        query._queryState._bound.RemoveAt(query._queryState._bound.Count - 1);                        // Insert query                      query.ConvertFragment(builder' expression.Arguments[0]);                      builder.Append(dialect.NotInSelectOperator(sqlBuilder.ToSqlString()));                  };
Magic Number,YesSql.Services,DefaultQuery,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultQuery.cs,CountAsync,The following statement contains a magic number: return await _session._store.ProduceAsync(key' (args) =>                  {                      var localSession = (Session)args[0];                      var localSql = (string)args[1];                      var localParameters = (Dictionary<string' object>)args[2];                      var localTransaction = (DbTransaction)args[3];                        localSession._store.Configuration.Logger.LogDebug(localSql);                      return localTransaction.Connection.ExecuteScalarAsync<int>(localSql' localParameters' localTransaction);                  }'                   _session' sql' parameters' transaction);
Magic Number,YesSql.Services,DefaultQuery,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultQuery.cs,CountAsync,The following statement contains a magic number: return await _session._store.ProduceAsync(key' (args) =>                  {                      var localSession = (Session)args[0];                      var localSql = (string)args[1];                      var localParameters = (Dictionary<string' object>)args[2];                      var localTransaction = (DbTransaction)args[3];                        localSession._store.Configuration.Logger.LogDebug(localSql);                      return localTransaction.Connection.ExecuteScalarAsync<int>(localSql' localParameters' localTransaction);                  }'                   _session' sql' parameters' transaction);
Magic Number,YesSql.Services,Query<T>,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultQuery.cs,FirstOrDefaultImpl,The following statement contains a magic number: return (await _query._session._store.ProduceAsync(key' (args) =>                          {                              var localQuery = (DefaultQuery)args[0];                              var localSql = (string)args[1];                              var localTransaction = (DbTransaction)args[2];                                localQuery._session._store.Configuration.Logger.LogDebug(localSql);                              return localTransaction.Connection.QueryAsync<T>(localSql' localQuery._queryState._sqlBuilder.Parameters' localTransaction);                          }'                          _query'                          sql'                          transaction                          )).FirstOrDefault();
Magic Number,YesSql.Services,Query<T>,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultQuery.cs,ListImpl,The following statement contains a magic number: return await _query._session._store.ProduceAsync(key' (args) =>                          {                              var localQuery = (DefaultQuery)args[0];                              var localSql = (string)args[1];                              var localTransaction = (DbTransaction)args[2];                                localQuery._session._store.Configuration.Logger.LogDebug(localSql);                              return localTransaction.Connection.QueryAsync<T>(localSql' localQuery._queryState._sqlBuilder.Parameters' localTransaction);                          }'                          _query'                          sql'                          transaction                          );
Magic Number,YesSql.Sql.Schema,AlterColumnCommand,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Sql\Schema\AlterColumnCommand.cs,Unlimited,The following statement contains a magic number: return WithLength(16385);
Magic Number,YesSql.Sql.Schema,ColumnCommand,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Sql\Schema\ColumnCommand.cs,Unlimited,The following statement contains a magic number: return WithLength(10000);
Magic Number,YesSql.Sql.Schema,CreateColumnCommand,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Sql\Schema\CreateColumnCommand.cs,Unlimited,The following statement contains a magic number: return WithLength(10000);
Duplicate Code,YesSql.Services,DefaultQuery,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultQuery.cs,Evaluate,The method contains a code clone-set at the following line numbers (starting from the method definition): ((33' 55)' (60' 82))
Missing Default,YesSql.Services,DefaultQuery,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultQuery.cs,Evaluate,The following switch statement is missing a default case: switch (expression.NodeType)              {                  case ExpressionType.Constant:                      return (ConstantExpression)expression;                    case ExpressionType.Convert:                      return Evaluate(((UnaryExpression)expression).Operand);                    case ExpressionType.New:                      var newExpression = (NewExpression)expression;                      var arguments = newExpression.Arguments.Select(a => Evaluate(a).Value).ToArray();                      var value = newExpression.Constructor.Invoke(arguments);                      return Expression.Constant(value);                    case ExpressionType.Call:                      var methodExpression = (MethodCallExpression)expression;                      arguments = methodExpression.Arguments.Select(a => Evaluate(a).Value).ToArray();                      object obj = null;                        // Static method?                      if (methodExpression.Object != null)                      {                          obj = Evaluate(methodExpression.Object).Value;                      }                        return Expression.Constant(methodExpression.Method.Invoke(obj' arguments));                    case ExpressionType.MemberAccess:                      var memberExpression = (MemberExpression)expression;                        if (memberExpression.Member.MemberType == MemberTypes.Field)                      {                          if (memberExpression.Expression != null)                          {                              obj = Evaluate(memberExpression.Expression).Value;                                if (obj == null)                              {                                  return Expression.Constant(null);                              }                          }                          else                          {                              // Static members                              obj = null;                          }                            _queryState._parameterBindings = _queryState._parameterBindings ?? new List<Action<object' ISqlBuilder>>();                            // Create a delegate that will be invoked every time a compiled query is reused'                          // which will re-evaluate the current node' for the current parameter.                          var _parameterName = "@p" + _queryState._sqlBuilder.Parameters.Count.ToString();                          _queryState._parameterBindings.Add((o' sqlBuilder) => sqlBuilder.Parameters[_parameterName] = ((PropertyInfo)memberExpression.Member).GetValue(o));                            value = ((FieldInfo)memberExpression.Member).GetValue(obj);                          return Expression.Constant(value);                      }                      else if (memberExpression.Member.MemberType == MemberTypes.Property)                      {                          if (memberExpression.Expression != null)                          {                              obj = Evaluate(memberExpression.Expression).Value;                                if (obj == null)                              {                                  return Expression.Constant(null);                              }                          }                          else                          {                              // Static members                              obj = null;                          }                            _queryState._parameterBindings = _queryState._parameterBindings ?? new List<Action<object' ISqlBuilder>>();                            // Create a delegate that will be invoked every time a compiled query is reused'                          // which will re-evaluate the current node' for the current parameter.                          var _parameterName = "@p" + _queryState._sqlBuilder.Parameters.Count.ToString();                          _queryState._parameterBindings.Add((o' sqlBuilder) => sqlBuilder.Parameters[_parameterName] = ((PropertyInfo)memberExpression.Member).GetValue(o));                            value = ((PropertyInfo)memberExpression.Member).GetValue(obj);                          return Expression.Constant(value);                      }                      break;              }
Missing Default,YesSql.Services,DefaultQuery,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultQuery.cs,GetBinaryOperator,The following switch statement is missing a default case: switch (expression.NodeType)              {                  case ExpressionType.LessThan:                      return " < ";                  case ExpressionType.LessThanOrEqual:                      return " <= ";                  case ExpressionType.GreaterThan:                      return " > ";                  case ExpressionType.GreaterThanOrEqual:                      return " >= ";                  case ExpressionType.And:                  case ExpressionType.AndAlso:                      return " and ";                  case ExpressionType.Or:                  case ExpressionType.OrElse:                      return " or ";                  case ExpressionType.Equal:                      return " = ";                  case ExpressionType.NotEqual:                      return " <> ";                  case ExpressionType.Add:                      return " + ";                  case ExpressionType.Subtract:                      return " - ";                  case ExpressionType.Multiply:                      return " * ";                  case ExpressionType.Divide:                      return " / ";              }
Missing Default,YesSql.Services,DefaultQuery,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Services\DefaultQuery.cs,ConvertFragment,The following switch statement is missing a default case: switch (expression.NodeType)                  {                      case ExpressionType.GreaterThan:                      case ExpressionType.GreaterThanOrEqual:                      case ExpressionType.LessThan:                      case ExpressionType.LessThanOrEqual:                      case ExpressionType.And:                      case ExpressionType.Or:                      case ExpressionType.AndAlso:                      case ExpressionType.OrElse:                      case ExpressionType.Equal:                      case ExpressionType.NotEqual:                      case ExpressionType.Add:                      case ExpressionType.Multiply:                      case ExpressionType.Divide:                      case ExpressionType.Subtract:                          // Don't reduce to a single value' just render both ends                            var binaryExpression = (BinaryExpression)expression;                          if (binaryExpression.Left is ConstantExpression left && binaryExpression.Right is ConstantExpression right)                          {                              _queryState._builder.Append(_dialect.GetSqlValue(left.Value));                              _queryState._builder.Append(GetBinaryOperator(expression));                              _queryState._builder.Append(_dialect.GetSqlValue(right.Value));                              return;                          }                            break;                  }
Missing Default,YesSql.Sql,BaseCommandInterpreter,D:\research\architectureSmells\repos1\sebastienros_yessql\src\YesSql.Core\Sql\BaseComandInterpreter.cs,CreateSql,The following switch statement is missing a default case: switch (schemaCommand.Type)                  {                      case SchemaCommandType.CreateTable:                          sqlCommands.AddRange(Run((ICreateTableCommand)schemaCommand));                          break;                      case SchemaCommandType.AlterTable:                          sqlCommands.AddRange(Run((IAlterTableCommand)schemaCommand));                          break;                      case SchemaCommandType.DropTable:                          sqlCommands.AddRange(Run((IDropTableCommand)schemaCommand));                          break;                      case SchemaCommandType.SqlStatement:                          sqlCommands.AddRange(Run((ISqlStatementCommand)schemaCommand));                          break;                      case SchemaCommandType.CreateForeignKey:                          sqlCommands.AddRange(Run((ICreateForeignKeyCommand)schemaCommand));                          break;                      case SchemaCommandType.DropForeignKey:                          sqlCommands.AddRange(Run((IDropForeignKeyCommand)schemaCommand));                          break;                  }
