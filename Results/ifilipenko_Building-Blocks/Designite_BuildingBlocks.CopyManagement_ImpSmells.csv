Implementation smell,Namespace,Class,File,Method,Description
Long Statement,BuildingBlocks.CopyManagement,HardwareIdentifiers,C:\repos\ifilipenko_Building-Blocks\src\BuildingBlocks.CopyManagement\HardwareIdentifiers.cs,GetIdentifier,The length of the statement  "                _log.Trace(m => m(string.Format("wmiClass:{0}' wmiProperty:{1}' wmiMustBeTrue:{2}"' wmiClass' wmiProperty' wmiMustBeTrue))); " is 124.
Long Statement,BuildingBlocks.CopyManagement,SmartClientApplicationIdentity,C:\repos\ifilipenko_Building-Blocks\src\BuildingBlocks.CopyManagement\SmartClientApplicationIdentity.cs,GetLocation,The length of the statement  "            return Assembly.GetEntryAssembly() != null ? Assembly.GetEntryAssembly().Location : AppDomain.CurrentDomain.SetupInformation.PrivateBinPath; " is 140.
Magic Number,BuildingBlocks.CopyManagement,CryptHelper,C:\repos\ifilipenko_Building-Blocks\src\BuildingBlocks.CopyManagement\CryptHelper.cs,BytesToHexString,The following statement contains a magic number: for (var i = 0; i < bytes.Length; i++)              {                  var b = bytes[i];                  var n = (int)b;                  var n1 = n & 15;                  var n2 = (n >> 4) & 15;                    if (n2 > 9)                  {                      stringBuilder.Append((char) n2 - 10 + 'A');                  }                  else                  {                      stringBuilder.Append(n2);                  }                    if (n1 > 9)                  {                      stringBuilder.Append((char) n1 - 10 + 'A');                  }                  else                  {                      stringBuilder.Append(n1);                  }                    if (separator.HasValue && ((i + 1) != bytes.Length && (i + 1) % 2 == 0))                  {                      stringBuilder.Append(separator.Value);                  }              }
Magic Number,BuildingBlocks.CopyManagement,CryptHelper,C:\repos\ifilipenko_Building-Blocks\src\BuildingBlocks.CopyManagement\CryptHelper.cs,BytesToHexString,The following statement contains a magic number: for (var i = 0; i < bytes.Length; i++)              {                  var b = bytes[i];                  var n = (int)b;                  var n1 = n & 15;                  var n2 = (n >> 4) & 15;                    if (n2 > 9)                  {                      stringBuilder.Append((char) n2 - 10 + 'A');                  }                  else                  {                      stringBuilder.Append(n2);                  }                    if (n1 > 9)                  {                      stringBuilder.Append((char) n1 - 10 + 'A');                  }                  else                  {                      stringBuilder.Append(n1);                  }                    if (separator.HasValue && ((i + 1) != bytes.Length && (i + 1) % 2 == 0))                  {                      stringBuilder.Append(separator.Value);                  }              }
Magic Number,BuildingBlocks.CopyManagement,CryptHelper,C:\repos\ifilipenko_Building-Blocks\src\BuildingBlocks.CopyManagement\CryptHelper.cs,BytesToHexString,The following statement contains a magic number: for (var i = 0; i < bytes.Length; i++)              {                  var b = bytes[i];                  var n = (int)b;                  var n1 = n & 15;                  var n2 = (n >> 4) & 15;                    if (n2 > 9)                  {                      stringBuilder.Append((char) n2 - 10 + 'A');                  }                  else                  {                      stringBuilder.Append(n2);                  }                    if (n1 > 9)                  {                      stringBuilder.Append((char) n1 - 10 + 'A');                  }                  else                  {                      stringBuilder.Append(n1);                  }                    if (separator.HasValue && ((i + 1) != bytes.Length && (i + 1) % 2 == 0))                  {                      stringBuilder.Append(separator.Value);                  }              }
Magic Number,BuildingBlocks.CopyManagement,CryptHelper,C:\repos\ifilipenko_Building-Blocks\src\BuildingBlocks.CopyManagement\CryptHelper.cs,BytesToHexString,The following statement contains a magic number: for (var i = 0; i < bytes.Length; i++)              {                  var b = bytes[i];                  var n = (int)b;                  var n1 = n & 15;                  var n2 = (n >> 4) & 15;                    if (n2 > 9)                  {                      stringBuilder.Append((char) n2 - 10 + 'A');                  }                  else                  {                      stringBuilder.Append(n2);                  }                    if (n1 > 9)                  {                      stringBuilder.Append((char) n1 - 10 + 'A');                  }                  else                  {                      stringBuilder.Append(n1);                  }                    if (separator.HasValue && ((i + 1) != bytes.Length && (i + 1) % 2 == 0))                  {                      stringBuilder.Append(separator.Value);                  }              }
Magic Number,BuildingBlocks.CopyManagement,CryptHelper,C:\repos\ifilipenko_Building-Blocks\src\BuildingBlocks.CopyManagement\CryptHelper.cs,BytesToHexString,The following statement contains a magic number: for (var i = 0; i < bytes.Length; i++)              {                  var b = bytes[i];                  var n = (int)b;                  var n1 = n & 15;                  var n2 = (n >> 4) & 15;                    if (n2 > 9)                  {                      stringBuilder.Append((char) n2 - 10 + 'A');                  }                  else                  {                      stringBuilder.Append(n2);                  }                    if (n1 > 9)                  {                      stringBuilder.Append((char) n1 - 10 + 'A');                  }                  else                  {                      stringBuilder.Append(n1);                  }                    if (separator.HasValue && ((i + 1) != bytes.Length && (i + 1) % 2 == 0))                  {                      stringBuilder.Append(separator.Value);                  }              }
Magic Number,BuildingBlocks.CopyManagement,CryptHelper,C:\repos\ifilipenko_Building-Blocks\src\BuildingBlocks.CopyManagement\CryptHelper.cs,BytesToHexString,The following statement contains a magic number: for (var i = 0; i < bytes.Length; i++)              {                  var b = bytes[i];                  var n = (int)b;                  var n1 = n & 15;                  var n2 = (n >> 4) & 15;                    if (n2 > 9)                  {                      stringBuilder.Append((char) n2 - 10 + 'A');                  }                  else                  {                      stringBuilder.Append(n2);                  }                    if (n1 > 9)                  {                      stringBuilder.Append((char) n1 - 10 + 'A');                  }                  else                  {                      stringBuilder.Append(n1);                  }                    if (separator.HasValue && ((i + 1) != bytes.Length && (i + 1) % 2 == 0))                  {                      stringBuilder.Append(separator.Value);                  }              }
Magic Number,BuildingBlocks.CopyManagement,CryptHelper,C:\repos\ifilipenko_Building-Blocks\src\BuildingBlocks.CopyManagement\CryptHelper.cs,BytesToHexString,The following statement contains a magic number: for (var i = 0; i < bytes.Length; i++)              {                  var b = bytes[i];                  var n = (int)b;                  var n1 = n & 15;                  var n2 = (n >> 4) & 15;                    if (n2 > 9)                  {                      stringBuilder.Append((char) n2 - 10 + 'A');                  }                  else                  {                      stringBuilder.Append(n2);                  }                    if (n1 > 9)                  {                      stringBuilder.Append((char) n1 - 10 + 'A');                  }                  else                  {                      stringBuilder.Append(n1);                  }                    if (separator.HasValue && ((i + 1) != bytes.Length && (i + 1) % 2 == 0))                  {                      stringBuilder.Append(separator.Value);                  }              }
Magic Number,BuildingBlocks.CopyManagement,CryptHelper,C:\repos\ifilipenko_Building-Blocks\src\BuildingBlocks.CopyManagement\CryptHelper.cs,BytesToHexString,The following statement contains a magic number: for (var i = 0; i < bytes.Length; i++)              {                  var b = bytes[i];                  var n = (int)b;                  var n1 = n & 15;                  var n2 = (n >> 4) & 15;                    if (n2 > 9)                  {                      stringBuilder.Append((char) n2 - 10 + 'A');                  }                  else                  {                      stringBuilder.Append(n2);                  }                    if (n1 > 9)                  {                      stringBuilder.Append((char) n1 - 10 + 'A');                  }                  else                  {                      stringBuilder.Append(n1);                  }                    if (separator.HasValue && ((i + 1) != bytes.Length && (i + 1) % 2 == 0))                  {                      stringBuilder.Append(separator.Value);                  }              }
