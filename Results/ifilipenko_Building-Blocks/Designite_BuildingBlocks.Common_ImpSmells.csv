Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,BuildingBlocks.Common.Algorithms,LargestCommonSubsequence<T>,C:\repos\ifilipenko_Building-Blocks\src\BuildingBlocks.Common\Algorithms\LargestCommonSubsequence.cs,BacktrackCore,The method has 6 parameters. Parameters: matrix' i' j' processEquals' processAdded' processDeleted
Missing Default,BuildingBlocks.Common.Configuration,KeyValueConfiguration,C:\repos\ifilipenko_Building-Blocks\src\BuildingBlocks.Common\Configuration\KeyValueConfiguration.cs,GetValueForProperty,The following switch statement is missing a default case: switch (Type.GetTypeCode(property.PropertyType))              {                  case TypeCode.Boolean:                      return Boolean.Parse(GetSetting(property.Name));                  case TypeCode.Char:                      return Char.Parse(GetSetting(property.Name));                  case TypeCode.SByte:                      return SByte.Parse(GetSetting(property.Name));                  case TypeCode.Byte:                      return Byte.Parse(GetSetting(property.Name));                  case TypeCode.Int16:                      return Int16.Parse(GetSetting(property.Name));                  case TypeCode.UInt16:                      return UInt16.Parse(GetSetting(property.Name));                  case TypeCode.Int32:                      return Int32.Parse(GetSetting(property.Name));                  case TypeCode.UInt32:                      return UInt32.Parse(GetSetting(property.Name));                  case TypeCode.Int64:                      return Int64.Parse(GetSetting(property.Name));                  case TypeCode.UInt64:                      return UInt64.Parse(GetSetting(property.Name));                  case TypeCode.Single:                      return Single.Parse(GetSetting(property.Name));                  case TypeCode.Double:                      return Double.Parse(GetSetting(property.Name));                  case TypeCode.Decimal:                      return Decimal.Parse(GetSetting(property.Name));                  case TypeCode.DateTime:                      return DateTime.Parse(GetSetting(property.Name));                  case TypeCode.String:                      return GetSetting(property.Name);              }
