Implementation smell,Namespace,Class,File,Method,Description
Long Statement,BuildingBlocks.Store.RavenDB,SessionHelpers,D:\research\architectureSmells\repos\ifilipenko_Building-Blocks\src\BuildingBlocks.Store.RavenDB\SessionHelpers.cs,WaitForNonStaleResultsAsOfLastWrite,The length of the statement  "                return ravenQueryable.Customize(customization => customization.WaitForNonStaleResultsAsOfLastWrite(TimeSpan.FromSeconds(5))); " is 125.
Magic Number,BuildingBlocks.Store.RavenDB,SessionHelpers,D:\research\architectureSmells\repos\ifilipenko_Building-Blocks\src\BuildingBlocks.Store.RavenDB\SessionHelpers.cs,WaitForNonStaleResultsAsOfLastWrite,The following statement contains a magic number: return ravenQueryable.Customize(customization => customization.WaitForNonStaleResultsAsOfLastWrite(TimeSpan.FromSeconds(5)));
Missing Default,BuildingBlocks.Store.RavenDB,RavenDbSession,D:\research\architectureSmells\repos\ifilipenko_Building-Blocks\src\BuildingBlocks.Store.RavenDB\RavenDbSession.cs,ApplyNonStaleResultsStrategy,The following switch statement is missing a default case: switch (_sessionSettings.StaleResultWhaitMode)              {                  case StaleResultWhaitMode.AtNow:                      query = whait.HasValue                                  ? query.Customize(x => x.WaitForNonStaleResultsAsOfNow(whait.Value))                                  : query.Customize(x => x.WaitForNonStaleResultsAsOfNow());                      break;                  case StaleResultWhaitMode.AllNonStale:                      query = whait.HasValue                                  ? query.Customize(x => x.WaitForNonStaleResults(whait.Value))                                  : query.Customize(x => x.WaitForNonStaleResults());                      break;                  case StaleResultWhaitMode.AtLastWrite:                      query = whait.HasValue                                  ? query.Customize(x => x.WaitForNonStaleResultsAsOfLastWrite(whait.Value))                                  : query.Customize(x => x.WaitForNonStaleResultsAsOfLastWrite());                      break;              }
