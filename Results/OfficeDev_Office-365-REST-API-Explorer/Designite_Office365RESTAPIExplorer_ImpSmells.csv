Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Office365RESTExplorerforSites.Data,DataGroup,C:\repos\OfficeDev_Office-365-REST-API-Explorer\Office365RESTAPIExplorer\DataModel\RESTDataSource.cs,DataGroup,The method has 6 parameters. Parameters: uniqueId' title' subtitle' imagePath' moreInfoText' moreInfoUri
Long Identifier,Office365RESTExplorerforSites,ItemsPage,C:\repos\OfficeDev_Office-365-REST-API-Explorer\Office365RESTAPIExplorer\ItemsPage.xaml.cs,,The length of the parameter MinimumWidthForSupportingTwoPanes is 33.
Long Identifier,Office365RESTExplorerforSites,SplitPage,C:\repos\OfficeDev_Office-365-REST-API-Explorer\Office365RESTAPIExplorer\SplitPage.xaml.cs,,The length of the parameter MinimumWidthForSupportingTwoPanes is 33.
Long Statement,Office365RESTExplorerforSites.Helpers,AuthenticationHelper,C:\repos\OfficeDev_Office-365-REST-API-Explorer\Office365RESTAPIExplorer\Helpers\AuthenticationHelper.cs,EnsureAccessTokenAvailableAsync,The length of the statement  "                    authenticationResult = await _authenticationContext.AcquireTokenAsync(serviceResourceId' currentApp.ClientId' currentApp.ReturnUri); " is 132.
Long Statement,Office365RESTExplorerforSites.Helpers,MessageDialogHelper,C:\repos\OfficeDev_Office-365-REST-API-Explorer\Office365RESTAPIExplorer\Helpers\MessageDialogHelper.cs,DisplayException,The length of the statement  "            content.AppendLine("Suggestion: Make sure you have added the Connected Services to this project as outlined in the Readme file"); " is 129.
Long Statement,Office365RESTExplorerforSites.Helpers,MessageDialogHelper,C:\repos\OfficeDev_Office-365-REST-API-Explorer\Office365RESTAPIExplorer\Helpers\MessageDialogHelper.cs,DisplayException,The length of the statement  "            content.AppendLine("Suggestion: Make sure you have added the Connected Services to this project as outlined in the Readme file."); " is 130.
Long Statement,Office365RESTExplorerforSites.Helpers,MessageDialogHelper,C:\repos\OfficeDev_Office-365-REST-API-Explorer\Office365RESTAPIExplorer\Helpers\MessageDialogHelper.cs,DisplayException,The length of the statement  "            content.AppendLine("Suggestion: Make sure you have added the Connected Services to this project as outlined in the Readme file."); " is 130.
Long Statement,Office365RESTExplorerforSites.Common,SuspensionManager,C:\repos\OfficeDev_Office-365-REST-API-Explorer\Office365RESTAPIExplorer\Common\SuspensionManager.cs,SaveAsync,The length of the statement  "                StorageFile file = await ApplicationData.Current.LocalFolder.CreateFileAsync(sessionStateFilename' CreationCollisionOption.ReplaceExisting); " is 140.
Long Statement,Office365RESTExplorerforSites.Common,SuspensionManager,C:\repos\OfficeDev_Office-365-REST-API-Explorer\Office365RESTAPIExplorer\Common\SuspensionManager.cs,RestoreAsync,The length of the statement  "                    if (weakFrameReference.TryGetTarget(out frame) && (string)frame.GetValue(FrameSessionBaseKeyProperty) == sessionBaseKey) " is 120.
Long Statement,Office365RESTExplorerforSites.Common,SuspensionManager,C:\repos\OfficeDev_Office-365-REST-API-Explorer\Office365RESTAPIExplorer\Common\SuspensionManager.cs,RegisterFrame,The length of the statement  "                throw new InvalidOperationException("Frames must be either be registered before accessing frame session state' or not registered at all"); " is 138.
Complex Conditional,Office365RESTExplorerforSites.Common,NavigationHelper,C:\repos\OfficeDev_Office-365-REST-API-Explorer\Office365RESTAPIExplorer\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "(e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167)"  is complex.
Complex Conditional,Office365RESTExplorerforSites.Common,NavigationHelper,C:\repos\OfficeDev_Office-365-REST-API-Explorer\Office365RESTAPIExplorer\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt)"  is complex.
Complex Conditional,Office365RESTExplorerforSites.Common,NavigationHelper,C:\repos\OfficeDev_Office-365-REST-API-Explorer\Office365RESTAPIExplorer\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt)"  is complex.
Empty Catch Block,Office365RESTExplorerforSites,App,C:\repos\OfficeDev_Office-365-REST-API-Explorer\Office365RESTAPIExplorer\App.xaml.cs,OnLaunched,The method has an empty catch block.
Magic Number,Office365RESTExplorerforSites.Common,NavigationHelper,C:\repos\OfficeDev_Office-365-REST-API-Explorer\Office365RESTAPIExplorer\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      e.Handled = true;                      this.GoBackCommand.Execute(null);                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      e.Handled = true;                      this.GoForwardCommand.Execute(null);                  }              }
Magic Number,Office365RESTExplorerforSites.Common,NavigationHelper,C:\repos\OfficeDev_Office-365-REST-API-Explorer\Office365RESTAPIExplorer\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      e.Handled = true;                      this.GoBackCommand.Execute(null);                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      e.Handled = true;                      this.GoForwardCommand.Execute(null);                  }              }
Magic Number,Office365RESTExplorerforSites.Common,NavigationHelper,C:\repos\OfficeDev_Office-365-REST-API-Explorer\Office365RESTAPIExplorer\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      e.Handled = true;                      this.GoBackCommand.Execute(null);                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      e.Handled = true;                      this.GoForwardCommand.Execute(null);                  }              }
Magic Number,Office365RESTExplorerforSites.Common,NavigationHelper,C:\repos\OfficeDev_Office-365-REST-API-Explorer\Office365RESTAPIExplorer\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      e.Handled = true;                      this.GoBackCommand.Execute(null);                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      e.Handled = true;                      this.GoForwardCommand.Execute(null);                  }              }
