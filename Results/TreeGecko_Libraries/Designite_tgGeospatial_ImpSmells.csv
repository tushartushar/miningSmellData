Implementation smell,Namespace,Class,File,Method,Description
Long Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Area,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Area.cs,Area,The method has 124 lines of code.
Long Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Area,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Area.cs,ToString,The method has 157 lines of code.
Long Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The method has 163 lines of code.
Long Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,ToString,The method has 226 lines of code.
Long Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Distance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Distance.cs,ToString,The method has 143 lines of code.
Long Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,ToString,The method has 115 lines of code.
Long Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,GeographicRectangle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\GeographicRectangle.cs,ReadXml,The method has 126 lines of code.
Long Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,ToString,The method has 127 lines of code.
Long Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The method has 101 lines of code.
Long Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,ToString,The method has 127 lines of code.
Long Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The method has 534 lines of code.
Long Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The method has 483 lines of code.
Long Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,IntersectionOf,The method has 108 lines of code.
Long Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,TranslateTo,The method has 171 lines of code.
Long Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Speed,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Speed.cs,ToString,The method has 126 lines of code.
Complex Method,TreeGecko.Library.Geospatial.Helpers,ConversionHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\ConversionHelper.cs,ConvertDistanceFromMeters,Cyclomatic complexity of the method is 9
Complex Method,TreeGecko.Library.Geospatial.Helpers,ConversionHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\ConversionHelper.cs,ConvertDistanceToMeters,Cyclomatic complexity of the method is 9
Complex Method,TreeGecko.Library.Geospatial.Helpers,ConversionHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\ConversionHelper.cs,ConvertSpeedFromMPS,Cyclomatic complexity of the method is 9
Complex Method,TreeGecko.Library.Geospatial.Helpers,ConversionHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\ConversionHelper.cs,ConvertSpeedToMPS,Cyclomatic complexity of the method is 9
Complex Method,TreeGecko.Library.Geospatial.Helpers,TileHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\TileHelper.cs,QuadKeyToTileXY,Cyclomatic complexity of the method is 15
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,Cyclomatic complexity of the method is 23
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,ToString,Cyclomatic complexity of the method is 14
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Area,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Area.cs,Area,Cyclomatic complexity of the method is 71
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Area,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Area.cs,ToSquareFeet,Cyclomatic complexity of the method is 9
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Area,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Area.cs,ToSquareInches,Cyclomatic complexity of the method is 9
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Area,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Area.cs,ToSquareKilometers,Cyclomatic complexity of the method is 9
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Area,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Area.cs,ToSquareMeters,Cyclomatic complexity of the method is 9
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Area,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Area.cs,ToSquareNauticalMiles,Cyclomatic complexity of the method is 9
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Area,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Area.cs,ToSquareStatuteMiles,Cyclomatic complexity of the method is 9
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Area,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Area.cs,ToAcres,Cyclomatic complexity of the method is 9
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Area,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Area.cs,ToSquareCentimeters,Cyclomatic complexity of the method is 9
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Area,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Area.cs,ToUnitType,Cyclomatic complexity of the method is 9
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Area,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Area.cs,ToString,Cyclomatic complexity of the method is 61
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,Cyclomatic complexity of the method is 90
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,FromDirection,Cyclomatic complexity of the method is 17
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,ToString,Cyclomatic complexity of the method is 24
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,CartesianPoint,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\CartesianPoint.cs,ReadXml,Cyclomatic complexity of the method is 24
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Distance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Distance.cs,Distance,Cyclomatic complexity of the method is 20
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Distance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Distance.cs,ToFeet,Cyclomatic complexity of the method is 8
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Distance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Distance.cs,ToInches,Cyclomatic complexity of the method is 8
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Distance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Distance.cs,ToKilometers,Cyclomatic complexity of the method is 8
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Distance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Distance.cs,ToMeters,Cyclomatic complexity of the method is 8
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Distance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Distance.cs,ToCentimeters,Cyclomatic complexity of the method is 8
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Distance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Distance.cs,ToNauticalMiles,Cyclomatic complexity of the method is 8
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Distance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Distance.cs,ToStatuteMiles,Cyclomatic complexity of the method is 8
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Distance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Distance.cs,ToUnitType,Cyclomatic complexity of the method is 8
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Distance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Distance.cs,ToString,Cyclomatic complexity of the method is 56
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,Cyclomatic complexity of the method is 19
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,ToString,Cyclomatic complexity of the method is 15
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Ellipsoid,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Ellipsoid.cs,OnReadXml,Cyclomatic complexity of the method is 21
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,GeographicRectangle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\GeographicRectangle.cs,GeographicRectangle,Cyclomatic complexity of the method is 14
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,GeographicRectangle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\GeographicRectangle.cs,IntersectionOf,Cyclomatic complexity of the method is 9
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,GeographicRectangle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\GeographicRectangle.cs,ReadXml,Cyclomatic complexity of the method is 49
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,Cyclomatic complexity of the method is 20
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,Cyclomatic complexity of the method is 26
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,ToString,Cyclomatic complexity of the method is 22
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,Cyclomatic complexity of the method is 27
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,ToString,Cyclomatic complexity of the method is 22
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,Cyclomatic complexity of the method is 12
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,Cyclomatic complexity of the method is 8
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,ParseAsLatLong,Cyclomatic complexity of the method is 12
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,ReadXml,Cyclomatic complexity of the method is 29
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position3D,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position3D.cs,ReadXml,Cyclomatic complexity of the method is 26
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Speed,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Speed.cs,Speed,Cyclomatic complexity of the method is 27
Complex Method,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Speed,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Speed.cs,ToString,Cyclomatic complexity of the method is 18
Complex Method,TreeGecko.Library.Geospatial.Objects,GeoDistance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Objects\GeoDistance.cs,GetFactor,Cyclomatic complexity of the method is 18
Long Parameter List,TreeGecko.Library.Geospatial.Helpers,TileHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\TileHelper.cs,LatLongToPixelXY,The method has 5 parameters.
Long Parameter List,TreeGecko.Library.Geospatial.Helpers,TileHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\TileHelper.cs,PixelXYToLatLong,The method has 5 parameters.
Long Parameter List,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Ellipsoid,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Ellipsoid.cs,Ellipsoid,The method has 5 parameters.
Long Parameter List,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Matrix,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Matrix.cs,Matrix,The method has 6 parameters.
Long Parameter List,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,Random,The method has 5 parameters.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,ToString,The length of the statement  "		if (format.IndexOf (culture.NumberFormat.NumberDecimalSeparator' StringComparison.Ordinal) != format.LastIndexOf (culture.NumberFormat.NumberDecimalSeparator' StringComparison.Ordinal)) " is 185.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,IsBetween,The length of the statement  "		return (_DecimalDegrees >= 0 && _DecimalDegrees <= end.DecimalDegrees) || (_DecimalDegrees <= 360 && _DecimalDegrees >= start.DecimalDegrees); " is 142.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,ToString,The length of the statement  "		if (format.IndexOf (culture.NumberFormat.NumberDecimalSeparator) != format.LastIndexOf (culture.NumberFormat.NumberDecimalSeparator)) " is 133.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,CartesianPoint,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\CartesianPoint.cs,ToPosition3D,The length of the statement  "	double lat = Math.Atan2 ((z + Math.Pow (ep' 2) * b * Math.Pow (Math.Sin (th)' 3))' (p - Math.Pow (e' 2) * a * Math.Pow (Math.Cos (th)' 3))); " is 140.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,CartesianPoint,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\CartesianPoint.cs,DistanceTo,The length of the statement  "	return new Distance (Math.Sqrt (Math.Pow (_point.X.Value - m_X.Value' 2) + Math.Pow (_point.Y.Value - m_Y.Value' 2))' DistanceUnit.Meters).ToLocalUnitType (); " is 158.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,CartesianPoint,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\CartesianPoint.cs,ToString,The length of the statement  "	return m_X.ToString (_format' culture) + culture.TextInfo.ListSeparator + m_Y.ToString (_format' culture) + culture.TextInfo.ListSeparator + m_Z.ToString (_format' culture); " is 173.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,ToString,The length of the statement  "		if (format.IndexOf (culture.NumberFormat.NumberDecimalSeparator) != format.LastIndexOf (culture.NumberFormat.NumberDecimalSeparator)) " is 133.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Ellipsoid,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Ellipsoid.cs,SanityCheck,The length of the statement  "		throw new ArgumentException ("The radii and inverse flattening of an allipsoid cannot be zero.   Please specify either the equatorial and polar radius' or the equatorial radius and the inverse flattening for this ellipsoid."); " is 226.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Ellipsoid,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Ellipsoid.cs,Calculate,The length of the statement  "	_Flattening = (_EquatorialRadius.ToMeters ().Value - _PolarRadius.ToMeters ().Value) / _EquatorialRadius.ToMeters ().Value; " is 123.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Ellipsoid,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Ellipsoid.cs,Calculate,The length of the statement  "	_Eccentricity = Math.Sqrt ((Math.Pow (_EquatorialRadius.Value' 2) - Math.Pow (_PolarRadius.Value' 2)) / Math.Pow (_EquatorialRadius.Value' 2)); " is 143.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Ellipsoid,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Ellipsoid.cs,Equals,The length of the statement  "	return other.EquatorialRadius.Equals (_EquatorialRadius' decimals) && other.PolarRadius.Equals (_PolarRadius' decimals); " is 120.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Ellipsoid,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Ellipsoid.cs,WriteXml,The length of the statement  "	writer.WriteElementString (Xml.GmlXmlPrefix' "inverseFlattening"' Xml.GmlXmlNamespace' InverseFlattening.ToString ("G17")); " is 123.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,GeographicRectangle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\GeographicRectangle.cs,IsEnclosing,The length of the statement  "	return (rectangle.Left.DecimalDegrees >= m_Left.DecimalDegrees && rectangle.Right.DecimalDegrees <= m_Right.DecimalDegrees && rectangle.Top.DecimalDegrees <= m_Top.DecimalDegrees && rectangle.Bottom.DecimalDegrees >= m_Bottom.DecimalDegrees); " is 242.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,GeographicRectangle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\GeographicRectangle.cs,IsEnclosing,The length of the statement  "	return ((position.Longitude.DecimalDegrees >= m_Left.DecimalDegrees) && (position.Latitude.DecimalDegrees <= m_Top.DecimalDegrees) && (position.Longitude.DecimalDegrees <= m_Right.DecimalDegrees) && (position.Latitude.DecimalDegrees >= m_Bottom.DecimalDegrees)); " is 262.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,GeographicRectangle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\GeographicRectangle.cs,CenterOn,The length of the statement  "	return new GeographicRectangle (m_Left.Add (Offset.Longitude)' m_Top.Add (Offset.Latitude)' m_Right.Add (Offset.Longitude)' m_Bottom.Add (Offset.Latitude)); " is 156.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,GeographicRectangle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\GeographicRectangle.cs,UnionWith,The length of the statement  "	return new GeographicRectangle (m_Top.DecimalDegrees > position.Latitude.DecimalDegrees ? m_Top : position.Latitude' m_Left.DecimalDegrees < position.Longitude.DecimalDegrees ? m_Left : position.Longitude' m_Bottom.DecimalDegrees < position.Latitude.DecimalDegrees ? m_Bottom : position.Latitude' m_Right.DecimalDegrees > position.Longitude.DecimalDegrees ? m_Right : position.Longitude); " is 388.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,GeographicRectangle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\GeographicRectangle.cs,Inflate,The length of the statement  "	return new GeographicRectangle (m_Left.Subtract (HalfWidthOffset)' m_Top.Add (HalfHeightOffset)' m_Right.Add (HalfWidthOffset)' m_Bottom.Subtract (HalfHeightOffset)); " is 166.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,GeographicRectangle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\GeographicRectangle.cs,Inflate,The length of the statement  "	return new GeographicRectangle (m_Left.Subtract (HalfWidthOffset)' m_Top.Add (HalfHeightOffset)' m_Right.Add (HalfWidthOffset)' m_Bottom.Subtract (HalfHeightOffset)); " is 166.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,GeographicRectangle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\GeographicRectangle.cs,IsIntersectingWith,The length of the statement  "	return ((rectangle.Left >= m_Left && rectangle.Left <= m_Right) || (rectangle.Right >= m_Left && rectangle.Right <= m_Right)) && ((rectangle.Top <= m_Top && rectangle.Top >= m_Bottom) || (rectangle.Bottom <= m_Top && rectangle.Bottom >= m_Bottom)); " is 248.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,GeographicRectangle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\GeographicRectangle.cs,IsOverlapping,The length of the statement  "	return !(rectangle.Top.DecimalDegrees < m_Bottom.DecimalDegrees || rectangle.Bottom.DecimalDegrees > m_Top.DecimalDegrees || rectangle.Left.DecimalDegrees > m_Right.DecimalDegrees || rectangle.Right.DecimalDegrees < m_Left.DecimalDegrees); " is 239.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,GeographicRectangle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\GeographicRectangle.cs,IsOverlapping,The length of the statement  "	return !(position.Longitude.DecimalDegrees < m_Left.DecimalDegrees || position.Longitude.DecimalDegrees > m_Right.DecimalDegrees || position.Latitude.DecimalDegrees > m_Top.DecimalDegrees || position.Latitude.DecimalDegrees < m_Bottom.DecimalDegrees); " is 251.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,GeographicRectangle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\GeographicRectangle.cs,UnionWith,The length of the statement  "	return new GeographicRectangle (rectangle.Top.DecimalDegrees > m_Top.DecimalDegrees ? rectangle.Top : m_Top' rectangle.Left.DecimalDegrees < m_Left.DecimalDegrees ? rectangle.Left : m_Left' rectangle.Bottom.DecimalDegrees < m_Bottom.DecimalDegrees ? rectangle.Bottom : m_Bottom' rectangle.Right.DecimalDegrees > m_Right.DecimalDegrees ? rectangle.Right : m_Right); " is 364.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,GeographicRectangle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\GeographicRectangle.cs,Equals,The length of the statement  "	return m_Left.DecimalDegrees.Equals (other.Left.DecimalDegrees) && m_Right.DecimalDegrees.Equals (other.Right.DecimalDegrees) && m_Top.DecimalDegrees.Equals (other.Top.DecimalDegrees) && m_Bottom.DecimalDegrees.Equals (other.Bottom.DecimalDegrees); " is 248.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,GeographicRectangle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\GeographicRectangle.cs,ToString,The length of the statement  "	return m_Top.ToString (format' culture) + culture.TextInfo.ListSeparator + " " + m_Left.ToString (format' culture) + culture.TextInfo.ListSeparator + " " + m_Bottom.ToString (format' culture) + culture.TextInfo.ListSeparator + " " + m_Right.ToString (format' culture); " is 268.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,GeographicRectangle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\GeographicRectangle.cs,ReadXml,The length of the statement  "	if (!reader.IsStartElement ("envelope"' Xml.GmlXmlNamespace) && !reader.IsStartElement ("Envelope"' Xml.GmlXmlNamespace) && !reader.IsStartElement ("boundedBy"' Xml.GmlXmlNamespace) && !reader.IsStartElement ("Box"' Xml.GmlXmlNamespace)) " is 237.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,ToHemisphere,The length of the statement  "	if (hemisphere == LatitudeHemisphere.North && _DecimalDegrees >= 0 || hemisphere == LatitudeHemisphere.South && _DecimalDegrees < 0) " is 132.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Random,The length of the statement  "	return new Latitude (((northernmost.DecimalDegrees - southernmost.DecimalDegrees) * generator.NextDouble ()) + southernmost.DecimalDegrees); " is 140.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,ToDecimalDegrees,The length of the statement  "	//        return -Math.Abs(hours) - Math.Round(minutes / 60.0' MaximumPrecisionDigits) - Math.Round(seconds / 3600.0' MaximumPrecisionDigits); " is 142.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,ToDecimalDegrees,The length of the statement  "	//        return Math.Abs(hours) + Math.Round(minutes / 60.0' MaximumPrecisionDigits) + Math.Round(seconds / 3600.0' MaximumPrecisionDigits); " is 141.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,ToString,The length of the statement  "		if (format.IndexOf (culture.NumberFormat.NumberDecimalSeparator) != format.LastIndexOf (culture.NumberFormat.NumberDecimalSeparator)) " is 133.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Random,The length of the statement  "	return new Longitude (((easternmost.DecimalDegrees - westernmost.DecimalDegrees) * generator.NextDouble ()) + westernmost.DecimalDegrees); " is 138.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,ToDecimalDegrees,The length of the statement  "	//        return -Math.Abs(hours) - Math.Round(minutes / 60.0' MaximumPrecisionDigits) - Math.Round(seconds / 3600.0' MaximumPrecisionDigits); " is 142.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,ToDecimalDegrees,The length of the statement  "	//        return Math.Abs(hours) + Math.Round(minutes / 60.0' MaximumPrecisionDigits) + Math.Round(seconds / 3600.0' MaximumPrecisionDigits); " is 141.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,ToString,The length of the statement  "		if (format.IndexOf (culture.NumberFormat.NumberDecimalSeparator) != format.LastIndexOf (culture.NumberFormat.NumberDecimalSeparator)) " is 133.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Matrix,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Matrix.cs,Invert,The length of the statement  "		throw new ArgumentException ("The matrix cannot be inverted (Neo would fall on his head). Use IsInvertable to check whether or not a matrix can be inverted."); " is 159.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Matrix,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Matrix.cs,Rotate,The length of the statement  "	this.Multiply (new Matrix ((float)Math.Cos (a)' (float)Math.Sin (a)' -(float)Math.Sin (a)' (float)Math.Cos (a)' 0' 0)' matrixOrder); " is 132.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Matrix,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Matrix.cs,ToString,The length of the statement  "	return string.Format ("{0:r}' {1:r}' {2:r}' {3:r}' {4:r}' {5:r}"' this._m11' this._m12' this._m21' this._m22' this._dx' this._dy); " is 130.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Matrix,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Matrix.cs,GetHashCode,The length of the statement  "	return _m11.GetHashCode () ^ _m12.GetHashCode () ^ _m21.GetHashCode () ^ _m22.GetHashCode () ^ _dx.GetHashCode () ^ _dy.GetHashCode (); " is 135.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Matrix,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Matrix.cs,Equals,The length of the statement  "	return this._dx == other._dx && this._dy == other._dy && this._m11 == other._m11 && this._m12 == other._m12 && this._m21 == other._m21 && this._m22 == other._m22; " is 162.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,PointD,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\PointD.cs,DistanceTo,The length of the statement  "	return Math.Sqrt (Math.Abs (value.X - _X) * Math.Abs (value.X - _X) + Math.Abs (value.Y - _Y) * Math.Abs (value.Y - _Y)); " is 121.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,PointD,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\PointD.cs,Equals,The length of the statement  "	return ((Math.Round (_X' precision) == Math.Round (value.X' precision)) && (Math.Round (_Y' precision) == Math.Round (value.Y' precision))); " is 140.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,ToCartesianPoint,The length of the statement  "	return new CartesianPoint (new Distance (x' DistanceUnit.Meters)' new Distance (y' DistanceUnit.Meters)' new Distance (z' DistanceUnit.Meters)); " is 144.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The length of the statement  "			//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal."); " is 122.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The length of the statement  "		double sinsigma = Math.Sqrt (Math.Pow ((Math.Cos (U2) * Math.Sin (lambda))' 2) + Math.Pow ((Math.Cos (U1) * Math.Sin (U2) - Math.Sin (U1) * Math.Cos (U2) * Math.Cos (lambda))' 2)); " is 180.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The length of the statement  "		lambda = L + (1 - C) * f * Math.Sin (alpha) * (sigma + C * Math.Sin (sigma) * (cos2sigmam + C * Math.Cos (sigma) * (-1 + 2 * Math.Pow (cos2sigmam' 2)))); " is 153.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The length of the statement  "			//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal."); " is 122.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The length of the statement  "	double deltasigma = B * Math.Sin (goodsigma) * (goodcos2sigmam + B / 4 * (Math.Cos (goodsigma) * (-1 + 2 * Math.Pow (goodcos2sigmam' 2)) - B / 6 * goodcos2sigmam * (-3 + 4 * Math.Pow (Math.Sin (goodsigma)' 2)) * (-3 + 4 * Math.Pow (goodcos2sigmam' 2)))); " is 254.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The length of the statement  "	//			'	Dim NewBearing As Double = (NewBearingRads.ToAngle.DecimalDegrees + 360) Mod 360				 '* 180.0 / Math.PI '+ 360) Mod 360 + 1 / 7200.0 " is 139.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The length of the statement  "	//    throw new ArgumentNullException("destination"' "The Position.DistanceTo method requires a non-null destination parameter."); " is 130.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The length of the statement  "		throw new ArgumentNullException ("ellipsoid"' "The Position.DistanceTo method requires a non-null ellipsoid parameter."); " is 121.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The length of the statement  "			//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal."); " is 122.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The length of the statement  "		double sinsigma = Math.Sqrt (Math.Pow ((Math.Cos (U2) * Math.Sin (lambda))' 2) + Math.Pow ((Math.Cos (U1) * Math.Sin (U2) - Math.Sin (U1) * Math.Cos (U2) * Math.Cos (lambda))' 2)); " is 180.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The length of the statement  "		lambda = L + (1 - C) * f * Math.Sin (alpha) * (sigma + C * Math.Sin (sigma) * (cos2sigmam + C * Math.Cos (sigma) * (-1 + 2 * Math.Pow (cos2sigmam' 2)))); " is 153.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The length of the statement  "			//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal."); " is 122.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The length of the statement  "	double deltasigma = B * Math.Sin (goodsigma) * (goodcos2sigmam + B / 4 * (Math.Cos (goodsigma) * (-1 + 2 * Math.Pow (goodcos2sigmam' 2)) - B / 6 * goodcos2sigmam * (-3 + 4 * Math.Pow (Math.Sin (goodsigma)' 2)) * (-3 + 4 * Math.Pow (goodcos2sigmam' 2)))); " is 254.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,IntersectionOf,The length of the statement  "	//  var latddd1 = dms2ddd(form.degreevalue[in1].value' form.minutevalue[in1].value' form.secondvalue[in1].value);  // convert latitude of point to decimal degrees then radians " is 175.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,IntersectionOf,The length of the statement  "	//  var londdd1 = dms2ddd(form.degreevalue[in2].value' form.minutevalue[in2].value' form.secondvalue[in2].value);  // likewise for longitude " is 140.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,IntersectionOf,The length of the statement  "	//  var latddd2 = dms2ddd(form.degreevalue[in4].value' form.minutevalue[in4].value' form.secondvalue[in4].value);  // convert latitude of point to decimal degrees then radians " is 175.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,IntersectionOf,The length of the statement  "	//  var londdd2 = dms2ddd(form.degreevalue[in5].value' form.minutevalue[in5].value' form.secondvalue[in5].value);  // likewise for longitude " is 140.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,IntersectionOf,The length of the statement  "	//  var crs13 = dms2ddd(form.degreevalue[in3].value' form.minutevalue[in3].value' form.secondvalue[in3].value);  //convert bearing line 1 to decimal degrees " is 156.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,IntersectionOf,The length of the statement  "	//  var crs23 = dms2ddd(form.degreevalue[in6].value' form.minutevalue[in6].value' form.secondvalue[in6].value);  //convert bearing line 2 to decimal degrees " is 156.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,IntersectionOf,The length of the statement  "	double s = 2 * Math.Asin (Math.Sqrt ((Math.Sin (v * 0.5) * Math.Sin (v * 0.5)) + (Math.Cos (latrad1) * Math.Cos (latrad2) * Math.Sin (w * 0.5) * Math.Sin (w * 0.5)))); " is 167.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,IntersectionOf,The length of the statement  "	//  var s = 2 * Math.asin(Math.sqrt((Math.sin(v * 0.5) * Math.sin(v * 0.5)) + (Math.cos(latrad1) * Math.cos(latrad2) * Math.sin(w * 0.5) * Math.sin(w * 0.5))));	 //distance between start points " is 193.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,IntersectionOf,The length of the statement  "		crs12 = 2 * Math.PI - Math.Acos ((Math.Sin (latrad2) - Math.Sin (latrad1) * Math.Cos (s)) / (Math.Sin (s) * Math.Cos (latrad1))); " is 129.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,IntersectionOf,The length of the statement  "	//	  var crs12 = 2 * pi - Math.acos((Math.sin(latrad2) - Math.sin(latrad1) * Math.cos(s)) / (Math.sin(s) * Math.cos(latrad1))); " is 127.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,IntersectionOf,The length of the statement  "		crs21 = 2 * Math.PI - Math.Acos ((Math.Sin (latrad1) - Math.Sin (latrad2) * Math.Cos (s)) / (Math.Sin (s) * Math.Cos (latrad2))); " is 129.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,IntersectionOf,The length of the statement  "	//	  var crs21 = 2 * pi - Math.acos((Math.sin(latrad1) - Math.sin(latrad2) * Math.cos(s)) / (Math.sin(s) * Math.cos(latrad2))); " is 127.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,IntersectionOf,The length of the statement  "		double latrad3 = Math.Asin (Math.Sin (latrad1) * Math.Cos (dst13) + Math.Cos (latrad1) * Math.Sin (dst13) * Math.Cos (crs13)); " is 126.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,Random,The length of the statement  "	return new Position (Longitude.Random (generator' easternmost' westernmost)' Latitude.Random (generator' northernmost' southernmost)); " is 134.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,ParseAsLatLong,The length of the statement  "		value = value.Replace ("N"' "N ").Replace ("S"' "S ").Replace ("E"' "E ").Replace ("W"' "W ").Replace ("n"' "N ").Replace ("s"' "S ").Replace ("e"' "E ").Replace ("w"' "W ")// And remove duplicate spaces " is 203.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,ParseAsLatLong,The length of the statement  "			else if (Word.IndexOf ("E") != -1 || Word.IndexOf ("e") != -1 || Word.IndexOf ("W") != -1 || Word.IndexOf ("w") != -1) { " is 120.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,Add,The length of the statement  "	return new Position (_Latitude.Add (position.Latitude.DecimalDegrees)' _Longitude.Add (position.Longitude.DecimalDegrees)); " is 123.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,Subtract,The length of the statement  "	return new Position (_Latitude.Subtract (position.Latitude.DecimalDegrees)' _Longitude.Subtract (position.Longitude.DecimalDegrees)); " is 133.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,Multiply,The length of the statement  "	return new Position (_Latitude.Multiply (position.Latitude.DecimalDegrees)' _Longitude.Multiply (position.Longitude.DecimalDegrees)); " is 133.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,Divide,The length of the statement  "	return new Position (_Latitude.Divide (position.Latitude.DecimalDegrees)' _Longitude.Divide (position.Longitude.DecimalDegrees)); " is 129.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position3D,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position3D.cs,Add,The length of the statement  "	return new Position3D (this.Latitude.Add (position.Latitude.DecimalDegrees)' this.Longitude.Add (position.Longitude.DecimalDegrees)' this._Altitude.Add (position.Altitude)); " is 173.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position3D,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position3D.cs,Subtract,The length of the statement  "	return new Position3D (this.Latitude.Subtract (position.Latitude.DecimalDegrees)' this.Longitude.Subtract (position.Longitude.DecimalDegrees)' this._Altitude.Subtract (position.Altitude)); " is 188.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position3D,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position3D.cs,Multiply,The length of the statement  "	return new Position3D (this.Latitude.Multiply (position.Latitude.DecimalDegrees)' this.Longitude.Multiply (position.Longitude.DecimalDegrees)' this._Altitude.Multiply (position.Altitude)); " is 188.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position3D,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position3D.cs,Divide,The length of the statement  "	return new Position3D (this.Latitude.Divide (position.Latitude.DecimalDegrees)' this.Longitude.Divide (position.Longitude.DecimalDegrees)' this._Altitude.Divide (position.Altitude)); " is 182.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position3D,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position3D.cs,Equals,The length of the statement  "	return Latitude.Equals (other.Latitude' decimals) && Longitude.Equals (other.Longitude' decimals) && _Altitude.Equals (other.Altitude' decimals); " is 145.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,RectangleD,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\RectangleD.cs,IsEnclosing,The length of the statement  "	return !(_rectangle.Left < m_Left || _rectangle.Right > m_Right || _rectangle.Top < m_Top || _rectangle.Bottom > m_Bottom); " is 123.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,RectangleD,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\RectangleD.cs,UnionWith,The length of the statement  "	return new RectangleD (_point.Y < m_Top ? _point.Y : m_Top' _point.X < m_Left ? _point.X : m_Left' _point.Y > m_Bottom ? _point.Y : m_Bottom' _point.X > m_Right ? _point.X : m_Right); " is 183.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,RectangleD,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\RectangleD.cs,IsIntersectingWith,The length of the statement  "	//			return ((rectangle.Left >= Left ) && (rectangle.Left <= Right) && (rectangle.Latitude >= Latitude) && (rectangle.Latitude <= Bottom)) " is 138.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,RectangleD,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\RectangleD.cs,IsIntersectingWith,The length of the statement  "	//				|| ((rectangle.Left + rectangle.Width >= Left ) && (rectangle.Left + rectangle.Width <= Left + Width) && (rectangle.Latitude >= Latitude) && (rectangle.Latitude <= Latitude + Height)) " is 189.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,RectangleD,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\RectangleD.cs,IsIntersectingWith,The length of the statement  "	//				|| ((rectangle.Left >= Left ) && (rectangle.Left <= Left + Width) && (rectangle.Latitude + rectangle.Height >= Latitude) && (rectangle.Latitude + rectangle.Height <= Latitude + Height)) " is 191.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,RectangleD,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\RectangleD.cs,IsIntersectingWith,The length of the statement  "	//				|| ((rectangle.Left + rectangle.Width >= Left ) && (rectangle.Left + rectangle.Width <= Left + Width) && (rectangle.Latitude + rectangle.Height >= Latitude) && (rectangle.Latitude + rectangle.Height <= Latitude + Height)); " is 228.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,RectangleD,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\RectangleD.cs,IsOverlapping,The length of the statement  "	return !((rectangle.Top > m_Bottom) || (rectangle.Bottom < m_Top) || (rectangle.Left > m_Right) || (rectangle.Right < m_Left)); " is 127.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,RectangleD,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\RectangleD.cs,IsEnclosingCenter,The length of the statement  "	return (rectangle.Left <= Center.X && rectangle.Right >= Center.X && rectangle.Top <= Center.Y && rectangle.Bottom >= Center.Y); " is 128.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,RectangleD,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\RectangleD.cs,UnionWith,The length of the statement  "	return new RectangleD (rectangle.Top < m_Top ? rectangle.Top : m_Top' rectangle.Left < m_Left ? rectangle.Left : m_Left' rectangle.Bottom > m_Bottom ? rectangle.Bottom : m_Bottom' rectangle.Right > m_Right ? rectangle.Right : m_Right); " is 235.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,RectangleD,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\RectangleD.cs,ToString,The length of the statement  "	return m_Left.ToString (format' formatProvider) + culture.TextInfo.ListSeparator + m_Top.ToString (format' formatProvider) + culture.TextInfo.ListSeparator + Width.ToString (format' formatProvider) + culture.TextInfo.ListSeparator + Height.ToString (format' formatProvider); " is 274.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,RectangleD,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\RectangleD.cs,ReadXml,The length of the statement  "	throw new InvalidOperationException ("Use the RectangleD(XmlReader) constructor to create a new instance instead of calling ReadXml."); " is 135.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Segment,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Segment.cs,DistanceTo,The length of the statement  "	double ratio = ((_position.Longitude.DecimalDegrees - m_Start.Longitude.DecimalDegrees) * delta.Longitude.DecimalDegrees + (_position.Latitude.DecimalDegrees - m_Start.Latitude.DecimalDegrees) * delta.Latitude.DecimalDegrees) / (delta.Longitude.DecimalDegrees * delta.Longitude.DecimalDegrees + delta.Latitude.DecimalDegrees * delta.Latitude.DecimalDegrees); " is 358.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Segment,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Segment.cs,DistanceTo,The length of the statement  "	Position destination = new Position (new Latitude ((1 - ratio) * m_Start.Latitude.DecimalDegrees + ratio * m_End.Latitude.DecimalDegrees)' new Longitude ((1 - ratio) * m_Start.Longitude.DecimalDegrees + ratio * m_End.Longitude.DecimalDegrees)); " is 244.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Segment,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Segment.cs,ToString,The length of the statement  "	return m_Start.ToString (_format' _formatProvider) + culture.TextInfo.ListSeparator + " " + m_End.ToString (_format' _formatProvider); " is 134.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Speed,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Speed.cs,ToDistance,The length of the statement  "	return new Distance (ToMetersPerSecond ().Value * time.TotalMilliseconds / 1000.0' DistanceUnit.Meters).ToLocalUnitType (); " is 123.
Long Statement,TreeGecko.Library.Geospatial.Geoframeworks.Helpers,RectangleFHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Helpers\RectangleFHelper.cs,IsRectangle,The length of the statement  "	return ((_points [0].X == _points [3].X && _points [0].Y == _points [1].Y && _points [0].X != _points [2].X && _points [0].Y != _points [2].Y) || (_points [0].X == _points [1].X && _points [0].Y == _points [3].Y && _points [0].X != _points [2].X && _points [0].Y != _points [2].Y)); " is 282.
Complex Conditional,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Area,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Area.cs,Area,The conditional expression  "Digit == "0" || Digit == "1" || Digit == "2" || Digit == "3" || Digit == "4" || Digit == "5" || Digit == "6" || Digit == "7" || Digit == "8" || Digit == "9" || Digit == culture.NumberFormat.NumberGroupSeparator || Digit == culture.NumberFormat.NumberDecimalSeparator"  is complex.
Complex Conditional,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Distance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Distance.cs,Distance,The conditional expression  "(subValue == "0") || (subValue == "1") || (subValue == "2") || (subValue == "3") || (subValue == "4") || (subValue == "5") || (subValue == "6") || (subValue == "7") || (subValue == "8") || (subValue == "9") || (subValue == culture.NumberFormat.NumberGroupSeparator) || (subValue == culture.NumberFormat.NumberDecimalSeparator)"  is complex.
Complex Conditional,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Distance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Distance.cs,Distance,The conditional expression  "(Unit == "M") || (Unit == "M.") || (Unit == "METERS") || (Unit == "METRES") || (Unit == "METRE") || (Unit == "METER")"  is complex.
Complex Conditional,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Distance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Distance.cs,Distance,The conditional expression  "(Unit == "CM") || (Unit == "CM.") || (Unit == "CENTIMETER") || (Unit == "CENTIMETERS") || (Unit == "CENTIMETRE") || (Unit == "CENTIMETRES")"  is complex.
Complex Conditional,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Distance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Distance.cs,Distance,The conditional expression  "(Unit == "KM") || (Unit == "KM.") || (Unit == "KILOMETRES") || (Unit == "KILOMETERS") || (Unit == "KILOMETRE") || (Unit == "KILOMETER")"  is complex.
Complex Conditional,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Distance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Distance.cs,Distance,The conditional expression  "(Unit == "MI") || (Unit == "MI.") || (Unit == "MILE") || (Unit == "MILES") || (Unit == "STATUTE MILES")"  is complex.
Complex Conditional,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Distance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Distance.cs,Distance,The conditional expression  "(Unit == "NM") || (Unit == "NM.") || (Unit == "NAUTICAL MILE") || (Unit == "NAUTICAL MILES")"  is complex.
Complex Conditional,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Distance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Distance.cs,Distance,The conditional expression  "(Unit == "IN") || (Unit == "IN.") || (Unit == "\"") || (Unit == "INCHES") || (Unit == "INCH")"  is complex.
Complex Conditional,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Distance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Distance.cs,Distance,The conditional expression  "(Unit == "FT") || (Unit == "FT.") || (Unit == "'") || (Unit == "FOOT") || (Unit == "FEET")"  is complex.
Complex Conditional,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Equals,The conditional expression  "obj is Elevation || obj is double || obj is string || obj is int || obj is float"  is complex.
Complex Conditional,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,ToString,The conditional expression  "format == null || format.Length == 0 || format == "g" || format == "G""  is complex.
Complex Conditional,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Ellipsoid,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Ellipsoid.cs,SanityCheck,The conditional expression  "(_EquatorialRadius.IsEmpty && _InverseFlattening == 0) || (_EquatorialRadius.IsEmpty && _PolarRadius.IsEmpty)"  is complex.
Complex Conditional,TreeGecko.Library.Geospatial.Geoframeworks.Objects,GeographicRectangle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\GeographicRectangle.cs,IsIntersectingWith,The conditional expression  "rectangle.Left > m_Left && rectangle.Right < m_Right && rectangle.Top < m_Top && rectangle.Bottom > m_Bottom"  is complex.
Complex Conditional,TreeGecko.Library.Geospatial.Geoframeworks.Objects,GeographicRectangle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\GeographicRectangle.cs,ReadXml,The conditional expression  "!reader.IsStartElement ("envelope"' Xml.GmlXmlNamespace) && !reader.IsStartElement ("Envelope"' Xml.GmlXmlNamespace) && !reader.IsStartElement ("boundedBy"' Xml.GmlXmlNamespace) && !reader.IsStartElement ("Box"' Xml.GmlXmlNamespace)"  is complex.
Complex Conditional,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,ToHemisphere,The conditional expression  "hemisphere == LatitudeHemisphere.North && _DecimalDegrees >= 0 || hemisphere == LatitudeHemisphere.South && _DecimalDegrees < 0"  is complex.
Complex Conditional,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,ParseAsLatLong,The conditional expression  "Word.IndexOf ("N") != -1 || Word.IndexOf ("n") != -1 || Word.IndexOf ("S") != -1 || Word.IndexOf ("s") != -1"  is complex.
Complex Conditional,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,ParseAsLatLong,The conditional expression  "Word.IndexOf ("E") != -1 || Word.IndexOf ("e") != -1 || Word.IndexOf ("W") != -1 || Word.IndexOf ("w") != -1"  is complex.
Complex Conditional,TreeGecko.Library.Geospatial.Objects,GeoBox,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Objects\GeoBox.cs,CalculateCorners,The conditional expression  "East != null && West != null && North != null && South != null"  is complex.
Complex Conditional,TreeGecko.Library.Geospatial.Objects,GeoBox,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Objects\GeoBox.cs,CalculatePoints,The conditional expression  "TopLeft != null && TopRight != null && BottomLeft != null && BottomRight != null"  is complex.
Complex Conditional,TreeGecko.Library.Geospatial.Objects,GeoBox,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Objects\GeoBox.cs,Contains,The conditional expression  "East != null && West != null && South != null && North != null"  is complex.
Complex Conditional,TreeGecko.Library.Geospatial.Objects,GeoBox,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Objects\GeoBox.cs,Contains,The conditional expression  "_point.X > West.X && _point.X < East.X && _point.Y > South.Y && _point.Y < North.Y"  is complex.
Empty Catch Block,TreeGecko.Library.Geospatial.Objects,GeoPoint,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Objects\GeoPoint.cs,ParseGeoJson,The method has an empty catch block.
Magic Number,TreeGecko.Library.Geospatial.Helpers,ConversionHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\ConversionHelper.cs,ConvertDistanceFromMeters,The following statement contains a magic number: switch (_toType) {  case DistanceMeasurementType.Feet: {  	multiplier = 3.2808399;  	break;  }  case DistanceMeasurementType.Kilometer: {  	multiplier = .001;  	break;  }  case DistanceMeasurementType.Mile: {  	multiplier = .000621371192;  	break;  }  case DistanceMeasurementType.Meter:  default: {  	multiplier = 1.0;  	break;  }  }  
Magic Number,TreeGecko.Library.Geospatial.Helpers,ConversionHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\ConversionHelper.cs,ConvertDistanceFromMeters,The following statement contains a magic number: switch (_toType) {  case DistanceMeasurementType.Feet: {  	multiplier = 3.2808399;  	break;  }  case DistanceMeasurementType.Kilometer: {  	multiplier = .001;  	break;  }  case DistanceMeasurementType.Mile: {  	multiplier = .000621371192;  	break;  }  case DistanceMeasurementType.Meter:  default: {  	multiplier = 1.0;  	break;  }  }  
Magic Number,TreeGecko.Library.Geospatial.Helpers,ConversionHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\ConversionHelper.cs,ConvertDistanceFromMeters,The following statement contains a magic number: switch (_toType) {  case DistanceMeasurementType.Feet: {  	multiplier = 3.2808399;  	break;  }  case DistanceMeasurementType.Kilometer: {  	multiplier = .001;  	break;  }  case DistanceMeasurementType.Mile: {  	multiplier = .000621371192;  	break;  }  case DistanceMeasurementType.Meter:  default: {  	multiplier = 1.0;  	break;  }  }  
Magic Number,TreeGecko.Library.Geospatial.Helpers,ConversionHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\ConversionHelper.cs,ConvertDistanceFromMeters,The following statement contains a magic number: multiplier = 3.2808399;  
Magic Number,TreeGecko.Library.Geospatial.Helpers,ConversionHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\ConversionHelper.cs,ConvertDistanceFromMeters,The following statement contains a magic number: multiplier = .001;  
Magic Number,TreeGecko.Library.Geospatial.Helpers,ConversionHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\ConversionHelper.cs,ConvertDistanceFromMeters,The following statement contains a magic number: multiplier = .000621371192;  
Magic Number,TreeGecko.Library.Geospatial.Helpers,ConversionHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\ConversionHelper.cs,ConvertDistanceToMeters,The following statement contains a magic number: switch (_fromType) {  case DistanceMeasurementType.Feet: {  	multiplier = .3048;  	break;  }  case DistanceMeasurementType.Kilometer: {  	multiplier = 1000.0;  	break;  }  case DistanceMeasurementType.Mile: {  	multiplier = 1609.344;  	break;  }  case DistanceMeasurementType.Meter:  default: {  	multiplier = 1.0;  	break;  }  }  
Magic Number,TreeGecko.Library.Geospatial.Helpers,ConversionHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\ConversionHelper.cs,ConvertDistanceToMeters,The following statement contains a magic number: switch (_fromType) {  case DistanceMeasurementType.Feet: {  	multiplier = .3048;  	break;  }  case DistanceMeasurementType.Kilometer: {  	multiplier = 1000.0;  	break;  }  case DistanceMeasurementType.Mile: {  	multiplier = 1609.344;  	break;  }  case DistanceMeasurementType.Meter:  default: {  	multiplier = 1.0;  	break;  }  }  
Magic Number,TreeGecko.Library.Geospatial.Helpers,ConversionHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\ConversionHelper.cs,ConvertDistanceToMeters,The following statement contains a magic number: switch (_fromType) {  case DistanceMeasurementType.Feet: {  	multiplier = .3048;  	break;  }  case DistanceMeasurementType.Kilometer: {  	multiplier = 1000.0;  	break;  }  case DistanceMeasurementType.Mile: {  	multiplier = 1609.344;  	break;  }  case DistanceMeasurementType.Meter:  default: {  	multiplier = 1.0;  	break;  }  }  
Magic Number,TreeGecko.Library.Geospatial.Helpers,ConversionHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\ConversionHelper.cs,ConvertDistanceToMeters,The following statement contains a magic number: multiplier = .3048;  
Magic Number,TreeGecko.Library.Geospatial.Helpers,ConversionHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\ConversionHelper.cs,ConvertDistanceToMeters,The following statement contains a magic number: multiplier = 1000.0;  
Magic Number,TreeGecko.Library.Geospatial.Helpers,ConversionHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\ConversionHelper.cs,ConvertDistanceToMeters,The following statement contains a magic number: multiplier = 1609.344;  
Magic Number,TreeGecko.Library.Geospatial.Helpers,ConversionHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\ConversionHelper.cs,ConvertSpeedFromMPS,The following statement contains a magic number: switch (_toType) {  case SpeedMeasurementType.FeetPerSecond: {  	multiplier = 3.2808399;  	break;  }  case SpeedMeasurementType.KilometersPerHour: {  	multiplier = 3.6;  	break;  }  case SpeedMeasurementType.MilesPerHour: {  	multiplier = 2.23693629;  	break;  }  case SpeedMeasurementType.MetersPerSecond:  default: {  	multiplier = 1.0;  	break;  }  }  
Magic Number,TreeGecko.Library.Geospatial.Helpers,ConversionHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\ConversionHelper.cs,ConvertSpeedFromMPS,The following statement contains a magic number: switch (_toType) {  case SpeedMeasurementType.FeetPerSecond: {  	multiplier = 3.2808399;  	break;  }  case SpeedMeasurementType.KilometersPerHour: {  	multiplier = 3.6;  	break;  }  case SpeedMeasurementType.MilesPerHour: {  	multiplier = 2.23693629;  	break;  }  case SpeedMeasurementType.MetersPerSecond:  default: {  	multiplier = 1.0;  	break;  }  }  
Magic Number,TreeGecko.Library.Geospatial.Helpers,ConversionHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\ConversionHelper.cs,ConvertSpeedFromMPS,The following statement contains a magic number: switch (_toType) {  case SpeedMeasurementType.FeetPerSecond: {  	multiplier = 3.2808399;  	break;  }  case SpeedMeasurementType.KilometersPerHour: {  	multiplier = 3.6;  	break;  }  case SpeedMeasurementType.MilesPerHour: {  	multiplier = 2.23693629;  	break;  }  case SpeedMeasurementType.MetersPerSecond:  default: {  	multiplier = 1.0;  	break;  }  }  
Magic Number,TreeGecko.Library.Geospatial.Helpers,ConversionHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\ConversionHelper.cs,ConvertSpeedFromMPS,The following statement contains a magic number: multiplier = 3.2808399;  
Magic Number,TreeGecko.Library.Geospatial.Helpers,ConversionHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\ConversionHelper.cs,ConvertSpeedFromMPS,The following statement contains a magic number: multiplier = 3.6;  
Magic Number,TreeGecko.Library.Geospatial.Helpers,ConversionHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\ConversionHelper.cs,ConvertSpeedFromMPS,The following statement contains a magic number: multiplier = 2.23693629;  
Magic Number,TreeGecko.Library.Geospatial.Helpers,ConversionHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\ConversionHelper.cs,ConvertSpeedToMPS,The following statement contains a magic number: switch (_fromType) {  case SpeedMeasurementType.FeetPerSecond: {  	multiplier = .3048;  	break;  }  case SpeedMeasurementType.KilometersPerHour: {  	multiplier = .277777778;  	break;  }  case SpeedMeasurementType.MilesPerHour: {  	multiplier = .44704;  	break;  }  case SpeedMeasurementType.MetersPerSecond:  default: {  	multiplier = 1.0;  	break;  }  }  
Magic Number,TreeGecko.Library.Geospatial.Helpers,ConversionHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\ConversionHelper.cs,ConvertSpeedToMPS,The following statement contains a magic number: switch (_fromType) {  case SpeedMeasurementType.FeetPerSecond: {  	multiplier = .3048;  	break;  }  case SpeedMeasurementType.KilometersPerHour: {  	multiplier = .277777778;  	break;  }  case SpeedMeasurementType.MilesPerHour: {  	multiplier = .44704;  	break;  }  case SpeedMeasurementType.MetersPerSecond:  default: {  	multiplier = 1.0;  	break;  }  }  
Magic Number,TreeGecko.Library.Geospatial.Helpers,ConversionHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\ConversionHelper.cs,ConvertSpeedToMPS,The following statement contains a magic number: switch (_fromType) {  case SpeedMeasurementType.FeetPerSecond: {  	multiplier = .3048;  	break;  }  case SpeedMeasurementType.KilometersPerHour: {  	multiplier = .277777778;  	break;  }  case SpeedMeasurementType.MilesPerHour: {  	multiplier = .44704;  	break;  }  case SpeedMeasurementType.MetersPerSecond:  default: {  	multiplier = 1.0;  	break;  }  }  
Magic Number,TreeGecko.Library.Geospatial.Helpers,ConversionHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\ConversionHelper.cs,ConvertSpeedToMPS,The following statement contains a magic number: multiplier = .3048;  
Magic Number,TreeGecko.Library.Geospatial.Helpers,ConversionHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\ConversionHelper.cs,ConvertSpeedToMPS,The following statement contains a magic number: multiplier = .277777778;  
Magic Number,TreeGecko.Library.Geospatial.Helpers,ConversionHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\ConversionHelper.cs,ConvertSpeedToMPS,The following statement contains a magic number: multiplier = .44704;  
Magic Number,TreeGecko.Library.Geospatial.Helpers,TileHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\TileHelper.cs,MapSize,The following statement contains a magic number: return (uint)256 << _levelOfDetail;  
Magic Number,TreeGecko.Library.Geospatial.Helpers,TileHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\TileHelper.cs,GroundResolution,The following statement contains a magic number: return Math.Cos (_latitude * Math.PI / 180) * 2 * Math.PI * EARTH_RADIUS / MapSize (_levelOfDetail);  
Magic Number,TreeGecko.Library.Geospatial.Helpers,TileHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\TileHelper.cs,GroundResolution,The following statement contains a magic number: return Math.Cos (_latitude * Math.PI / 180) * 2 * Math.PI * EARTH_RADIUS / MapSize (_levelOfDetail);  
Magic Number,TreeGecko.Library.Geospatial.Helpers,TileHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\TileHelper.cs,MapScale,The following statement contains a magic number: return GroundResolution (_latitude' _levelOfDetail) * _screenDpi / 0.0254;  
Magic Number,TreeGecko.Library.Geospatial.Helpers,TileHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\TileHelper.cs,LatLongToPixelXY,The following statement contains a magic number: _pixelX = (int)Clip (x * mapSize + 0.5' 0' mapSize - 1);  
Magic Number,TreeGecko.Library.Geospatial.Helpers,TileHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\TileHelper.cs,LatLongToPixelXY,The following statement contains a magic number: _pixelY = (int)Clip (y * mapSize + 0.5' 0' mapSize - 1);  
Magic Number,TreeGecko.Library.Geospatial.Helpers,TileHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\TileHelper.cs,PixelXYToLatLong,The following statement contains a magic number: _latitude = 90 - 360 * Math.Atan (Math.Exp (-y * 2 * Math.PI)) / Math.PI;  
Magic Number,TreeGecko.Library.Geospatial.Helpers,TileHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\TileHelper.cs,PixelXYToLatLong,The following statement contains a magic number: _latitude = 90 - 360 * Math.Atan (Math.Exp (-y * 2 * Math.PI)) / Math.PI;  
Magic Number,TreeGecko.Library.Geospatial.Helpers,TileHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\TileHelper.cs,PixelXYToLatLong,The following statement contains a magic number: _latitude = 90 - 360 * Math.Atan (Math.Exp (-y * 2 * Math.PI)) / Math.PI;  
Magic Number,TreeGecko.Library.Geospatial.Helpers,TileHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\TileHelper.cs,PixelXYToLatLong,The following statement contains a magic number: _longitude = 360 * x;  
Magic Number,TreeGecko.Library.Geospatial.Helpers,TileHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\TileHelper.cs,PixelXYToTileXY,The following statement contains a magic number: _tileX = _pixelX / 256;  
Magic Number,TreeGecko.Library.Geospatial.Helpers,TileHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\TileHelper.cs,PixelXYToTileXY,The following statement contains a magic number: _tileY = _pixelY / 256;  
Magic Number,TreeGecko.Library.Geospatial.Helpers,TileHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\TileHelper.cs,TileXYToPixelXY,The following statement contains a magic number: _pixelX = _tileX * 256;  
Magic Number,TreeGecko.Library.Geospatial.Helpers,TileHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Helpers\TileHelper.cs,TileXYToPixelXY,The following statement contains a magic number: _pixelY = _tileY * 256;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder newValue = new StringBuilder (_value);  	newValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] values = newValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (values.Length) {  	case 0:  		// Return a blank Angle  		m_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?                                          		if (String.Compare (values [0]' Resources.Common_Infinity' true' _culture) == 0) {  			m_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		if (String.Compare (values [0]' Properties.Resources.Common_Empty' true' _culture) == 0) {  			m_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  			return;  		}  		if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  			return;  		}  		m_DecimalDegrees = double.Parse (values [0]' _culture);  		return;  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' float.Parse (values [1]' _culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1 || values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' int.Parse (values [1]' _culture)' double.Parse (values [2]' _culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "_value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder newValue = new StringBuilder (_value);  	newValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] values = newValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (values.Length) {  	case 0:  		// Return a blank Angle  		m_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?                                          		if (String.Compare (values [0]' Resources.Common_Infinity' true' _culture) == 0) {  			m_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		if (String.Compare (values [0]' Properties.Resources.Common_Empty' true' _culture) == 0) {  			m_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  			return;  		}  		if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  			return;  		}  		m_DecimalDegrees = double.Parse (values [0]' _culture);  		return;  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' float.Parse (values [1]' _culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1 || values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' int.Parse (values [1]' _culture)' double.Parse (values [2]' _culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "_value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder newValue = new StringBuilder (_value);  	newValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] values = newValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (values.Length) {  	case 0:  		// Return a blank Angle  		m_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?                                          		if (String.Compare (values [0]' Resources.Common_Infinity' true' _culture) == 0) {  			m_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		if (String.Compare (values [0]' Properties.Resources.Common_Empty' true' _culture) == 0) {  			m_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  			return;  		}  		if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  			return;  		}  		m_DecimalDegrees = double.Parse (values [0]' _culture);  		return;  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' float.Parse (values [1]' _culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1 || values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' int.Parse (values [1]' _culture)' double.Parse (values [2]' _culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "_value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder newValue = new StringBuilder (_value);  	newValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] values = newValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (values.Length) {  	case 0:  		// Return a blank Angle  		m_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?                                          		if (String.Compare (values [0]' Resources.Common_Infinity' true' _culture) == 0) {  			m_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		if (String.Compare (values [0]' Properties.Resources.Common_Empty' true' _culture) == 0) {  			m_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  			return;  		}  		if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  			return;  		}  		m_DecimalDegrees = double.Parse (values [0]' _culture);  		return;  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' float.Parse (values [1]' _culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1 || values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' int.Parse (values [1]' _culture)' double.Parse (values [2]' _culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "_value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder newValue = new StringBuilder (_value);  	newValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] values = newValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (values.Length) {  	case 0:  		// Return a blank Angle  		m_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?                                          		if (String.Compare (values [0]' Resources.Common_Infinity' true' _culture) == 0) {  			m_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		if (String.Compare (values [0]' Properties.Resources.Common_Empty' true' _culture) == 0) {  			m_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  			return;  		}  		if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  			return;  		}  		m_DecimalDegrees = double.Parse (values [0]' _culture);  		return;  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' float.Parse (values [1]' _culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1 || values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' int.Parse (values [1]' _culture)' double.Parse (values [2]' _culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "_value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder newValue = new StringBuilder (_value);  	newValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] values = newValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (values.Length) {  	case 0:  		// Return a blank Angle  		m_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?                                          		if (String.Compare (values [0]' Resources.Common_Infinity' true' _culture) == 0) {  			m_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		if (String.Compare (values [0]' Properties.Resources.Common_Empty' true' _culture) == 0) {  			m_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  			return;  		}  		if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  			return;  		}  		m_DecimalDegrees = double.Parse (values [0]' _culture);  		return;  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' float.Parse (values [1]' _culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1 || values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' int.Parse (values [1]' _culture)' double.Parse (values [2]' _culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "_value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder newValue = new StringBuilder (_value);  	newValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] values = newValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (values.Length) {  	case 0:  		// Return a blank Angle  		m_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?                                          		if (String.Compare (values [0]' Resources.Common_Infinity' true' _culture) == 0) {  			m_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		if (String.Compare (values [0]' Properties.Resources.Common_Empty' true' _culture) == 0) {  			m_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  			return;  		}  		if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  			return;  		}  		m_DecimalDegrees = double.Parse (values [0]' _culture);  		return;  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' float.Parse (values [1]' _culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1 || values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' int.Parse (values [1]' _culture)' double.Parse (values [2]' _culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "_value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder newValue = new StringBuilder (_value);  	newValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] values = newValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (values.Length) {  	case 0:  		// Return a blank Angle  		m_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?                                          		if (String.Compare (values [0]' Resources.Common_Infinity' true' _culture) == 0) {  			m_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		if (String.Compare (values [0]' Properties.Resources.Common_Empty' true' _culture) == 0) {  			m_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  			return;  		}  		if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  			return;  		}  		m_DecimalDegrees = double.Parse (values [0]' _culture);  		return;  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' float.Parse (values [1]' _culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1 || values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' int.Parse (values [1]' _culture)' double.Parse (values [2]' _culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "_value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder newValue = new StringBuilder (_value);  	newValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] values = newValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (values.Length) {  	case 0:  		// Return a blank Angle  		m_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?                                          		if (String.Compare (values [0]' Resources.Common_Infinity' true' _culture) == 0) {  			m_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		if (String.Compare (values [0]' Properties.Resources.Common_Empty' true' _culture) == 0) {  			m_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  			return;  		}  		if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  			return;  		}  		m_DecimalDegrees = double.Parse (values [0]' _culture);  		return;  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' float.Parse (values [1]' _culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1 || values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' int.Parse (values [1]' _culture)' double.Parse (values [2]' _culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "_value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder newValue = new StringBuilder (_value);  	newValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] values = newValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (values.Length) {  	case 0:  		// Return a blank Angle  		m_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?                                          		if (String.Compare (values [0]' Resources.Common_Infinity' true' _culture) == 0) {  			m_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		if (String.Compare (values [0]' Properties.Resources.Common_Empty' true' _culture) == 0) {  			m_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  			return;  		}  		if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  			return;  		}  		m_DecimalDegrees = double.Parse (values [0]' _culture);  		return;  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' float.Parse (values [1]' _culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1 || values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' int.Parse (values [1]' _culture)' double.Parse (values [2]' _culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "_value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder newValue = new StringBuilder (_value);  	newValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] values = newValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (values.Length) {  	case 0:  		// Return a blank Angle  		m_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?                                          		if (String.Compare (values [0]' Resources.Common_Infinity' true' _culture) == 0) {  			m_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		if (String.Compare (values [0]' Properties.Resources.Common_Empty' true' _culture) == 0) {  			m_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  			return;  		}  		if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  			return;  		}  		m_DecimalDegrees = double.Parse (values [0]' _culture);  		return;  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' float.Parse (values [1]' _culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1 || values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' int.Parse (values [1]' _culture)' double.Parse (values [2]' _culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "_value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder newValue = new StringBuilder (_value);  	newValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] values = newValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (values.Length) {  	case 0:  		// Return a blank Angle  		m_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?                                          		if (String.Compare (values [0]' Resources.Common_Infinity' true' _culture) == 0) {  			m_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		if (String.Compare (values [0]' Properties.Resources.Common_Empty' true' _culture) == 0) {  			m_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  			return;  		}  		if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  			return;  		}  		m_DecimalDegrees = double.Parse (values [0]' _culture);  		return;  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' float.Parse (values [1]' _culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1 || values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' int.Parse (values [1]' _culture)' double.Parse (values [2]' _culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "_value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder newValue = new StringBuilder (_value);  	newValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] values = newValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (values.Length) {  	case 0:  		// Return a blank Angle  		m_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?                                          		if (String.Compare (values [0]' Resources.Common_Infinity' true' _culture) == 0) {  			m_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		if (String.Compare (values [0]' Properties.Resources.Common_Empty' true' _culture) == 0) {  			m_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  			return;  		}  		if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  			return;  		}  		m_DecimalDegrees = double.Parse (values [0]' _culture);  		return;  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' float.Parse (values [1]' _culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1 || values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' int.Parse (values [1]' _culture)' double.Parse (values [2]' _culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "_value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder newValue = new StringBuilder (_value);  	newValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] values = newValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (values.Length) {  	case 0:  		// Return a blank Angle  		m_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?                                          		if (String.Compare (values [0]' Resources.Common_Infinity' true' _culture) == 0) {  			m_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		if (String.Compare (values [0]' Properties.Resources.Common_Empty' true' _culture) == 0) {  			m_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  			return;  		}  		if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  			return;  		}  		m_DecimalDegrees = double.Parse (values [0]' _culture);  		return;  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' float.Parse (values [1]' _culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1 || values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' int.Parse (values [1]' _culture)' double.Parse (values [2]' _culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "_value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: switch (values.Length) {  case 0:  	// Return a blank Angle  	m_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?                                          	if (String.Compare (values [0]' Resources.Common_Infinity' true' _culture) == 0) {  		m_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	if (String.Compare (values [0]' Properties.Resources.Common_Empty' true' _culture) == 0) {  		m_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  		return;  	}  	if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  		return;  	}  	m_DecimalDegrees = double.Parse (values [0]' _culture);  	return;  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' float.Parse (values [1]' _culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1 || values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' int.Parse (values [1]' _culture)' double.Parse (values [2]' _culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: switch (values.Length) {  case 0:  	// Return a blank Angle  	m_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?                                          	if (String.Compare (values [0]' Resources.Common_Infinity' true' _culture) == 0) {  		m_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	if (String.Compare (values [0]' Properties.Resources.Common_Empty' true' _culture) == 0) {  		m_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  		return;  	}  	if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  		return;  	}  	m_DecimalDegrees = double.Parse (values [0]' _culture);  	return;  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' float.Parse (values [1]' _culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1 || values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' int.Parse (values [1]' _culture)' double.Parse (values [2]' _culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: switch (values.Length) {  case 0:  	// Return a blank Angle  	m_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?                                          	if (String.Compare (values [0]' Resources.Common_Infinity' true' _culture) == 0) {  		m_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	if (String.Compare (values [0]' Properties.Resources.Common_Empty' true' _culture) == 0) {  		m_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  		return;  	}  	if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  		return;  	}  	m_DecimalDegrees = double.Parse (values [0]' _culture);  	return;  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' float.Parse (values [1]' _culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1 || values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' int.Parse (values [1]' _culture)' double.Parse (values [2]' _culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: switch (values.Length) {  case 0:  	// Return a blank Angle  	m_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?                                          	if (String.Compare (values [0]' Resources.Common_Infinity' true' _culture) == 0) {  		m_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	if (String.Compare (values [0]' Properties.Resources.Common_Empty' true' _culture) == 0) {  		m_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  		return;  	}  	if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  		return;  	}  	m_DecimalDegrees = double.Parse (values [0]' _culture);  	return;  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' float.Parse (values [1]' _culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1 || values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' int.Parse (values [1]' _culture)' double.Parse (values [2]' _culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: switch (values.Length) {  case 0:  	// Return a blank Angle  	m_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?                                          	if (String.Compare (values [0]' Resources.Common_Infinity' true' _culture) == 0) {  		m_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	if (String.Compare (values [0]' Properties.Resources.Common_Empty' true' _culture) == 0) {  		m_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  		return;  	}  	if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  		return;  	}  	m_DecimalDegrees = double.Parse (values [0]' _culture);  	return;  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' float.Parse (values [1]' _culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1 || values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' int.Parse (values [1]' _culture)' double.Parse (values [2]' _culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: switch (values.Length) {  case 0:  	// Return a blank Angle  	m_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?                                          	if (String.Compare (values [0]' Resources.Common_Infinity' true' _culture) == 0) {  		m_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	if (String.Compare (values [0]' Properties.Resources.Common_Empty' true' _culture) == 0) {  		m_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  		return;  	}  	if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  		return;  	}  	m_DecimalDegrees = double.Parse (values [0]' _culture);  	return;  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' float.Parse (values [1]' _culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1 || values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' int.Parse (values [1]' _culture)' double.Parse (values [2]' _culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: switch (values.Length) {  case 0:  	// Return a blank Angle  	m_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?                                          	if (String.Compare (values [0]' Resources.Common_Infinity' true' _culture) == 0) {  		m_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	if (String.Compare (values [0]' Properties.Resources.Common_Empty' true' _culture) == 0) {  		m_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  		return;  	}  	if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  		return;  	}  	m_DecimalDegrees = double.Parse (values [0]' _culture);  	return;  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' float.Parse (values [1]' _culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1 || values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' int.Parse (values [1]' _culture)' double.Parse (values [2]' _culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: switch (values.Length) {  case 0:  	// Return a blank Angle  	m_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?                                          	if (String.Compare (values [0]' Resources.Common_Infinity' true' _culture) == 0) {  		m_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	if (String.Compare (values [0]' Properties.Resources.Common_Empty' true' _culture) == 0) {  		m_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  		return;  	}  	if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  		return;  	}  	m_DecimalDegrees = double.Parse (values [0]' _culture);  	return;  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' float.Parse (values [1]' _culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1 || values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' int.Parse (values [1]' _culture)' double.Parse (values [2]' _culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: switch (values.Length) {  case 0:  	// Return a blank Angle  	m_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?                                          	if (String.Compare (values [0]' Resources.Common_Infinity' true' _culture) == 0) {  		m_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	if (String.Compare (values [0]' Properties.Resources.Common_Empty' true' _culture) == 0) {  		m_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  		return;  	}  	if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  		return;  	}  	m_DecimalDegrees = double.Parse (values [0]' _culture);  	return;  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' float.Parse (values [1]' _culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1 || values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' int.Parse (values [1]' _culture)' double.Parse (values [2]' _culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: switch (values.Length) {  case 0:  	// Return a blank Angle  	m_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?                                          	if (String.Compare (values [0]' Resources.Common_Infinity' true' _culture) == 0) {  		m_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	if (String.Compare (values [0]' Properties.Resources.Common_Empty' true' _culture) == 0) {  		m_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  		return;  	}  	if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  		return;  	}  	m_DecimalDegrees = double.Parse (values [0]' _culture);  	return;  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' float.Parse (values [1]' _culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1 || values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' int.Parse (values [1]' _culture)' double.Parse (values [2]' _culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: switch (values.Length) {  case 0:  	// Return a blank Angle  	m_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?                                          	if (String.Compare (values [0]' Resources.Common_Infinity' true' _culture) == 0) {  		m_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	if (String.Compare (values [0]' Properties.Resources.Common_Empty' true' _culture) == 0) {  		m_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  		return;  	}  	if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  		return;  	}  	m_DecimalDegrees = double.Parse (values [0]' _culture);  	return;  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' float.Parse (values [1]' _culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1 || values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' int.Parse (values [1]' _culture)' double.Parse (values [2]' _culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: switch (values.Length) {  case 0:  	// Return a blank Angle  	m_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?                                          	if (String.Compare (values [0]' Resources.Common_Infinity' true' _culture) == 0) {  		m_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	if (String.Compare (values [0]' Properties.Resources.Common_Empty' true' _culture) == 0) {  		m_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  		return;  	}  	if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  		return;  	}  	m_DecimalDegrees = double.Parse (values [0]' _culture);  	return;  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' float.Parse (values [1]' _culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1 || values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' int.Parse (values [1]' _culture)' double.Parse (values [2]' _culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: switch (values.Length) {  case 0:  	// Return a blank Angle  	m_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?                                          	if (String.Compare (values [0]' Resources.Common_Infinity' true' _culture) == 0) {  		m_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	if (String.Compare (values [0]' Properties.Resources.Common_Empty' true' _culture) == 0) {  		m_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  		return;  	}  	if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  		return;  	}  	m_DecimalDegrees = double.Parse (values [0]' _culture);  	return;  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' float.Parse (values [1]' _culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1 || values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' int.Parse (values [1]' _culture)' double.Parse (values [2]' _culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: switch (values.Length) {  case 0:  	// Return a blank Angle  	m_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?                                          	if (String.Compare (values [0]' Resources.Common_Infinity' true' _culture) == 0) {  		m_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	if (String.Compare (values [0]' Properties.Resources.Common_Empty' true' _culture) == 0) {  		m_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  		return;  	}  	if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  		return;  	}  	m_DecimalDegrees = double.Parse (values [0]' _culture);  	return;  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' float.Parse (values [1]' _culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1 || values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Resources.Angle_OnlyRightmostIsDecimal' "_value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' int.Parse (values [1]' _culture)' double.Parse (values [2]' _culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: if (values [0].Length == 7 && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 3)' _culture)' int.Parse (values [0].Substring (3' 2)' _culture)' double.Parse (values [0].Substring (5' 2)' _culture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: if (values [0].Length == 8 && values [0] [0] == '-' && values [0].IndexOf (_culture.NumberFormat.NumberDecimalSeparator' StringComparison.CurrentCulture) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0].Substring (0' 4)' _culture)' int.Parse (values [0].Substring (4' 2)' _culture)' double.Parse (values [0].Substring (6' 2)' _culture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Angle,The following statement contains a magic number: m_DecimalDegrees = ToDecimalDegrees (int.Parse (values [0]' _culture)' int.Parse (values [1]' _culture)' double.Parse (values [2]' _culture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Mirror,The following statement contains a magic number: return new Angle (m_DecimalDegrees + 180.0).Normalize ();  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Normalize,The following statement contains a magic number: while (_Value < 0) {  	_Value += 360.0;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Normalize,The following statement contains a magic number: _Value += 360.0;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Normalize,The following statement contains a magic number: return new Angle (_Value % 360);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,RoundSeconds,The following statement contains a magic number: return RoundSeconds (15.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,RoundSeconds,The following statement contains a magic number: for (double value = 0; value < 60; value += interval) {  	// Calculate the value of the next interval  	double NextInterval = value + interval;  	// Is the seconds value greater than the next interval?  	if (NewSeconds > NextInterval)  		// Yes.  Continue on  		continue;  	// Is the seconds value closer to the current or next interval?  	if (NewSeconds < (value + NextInterval) * 0.5)  		// Closer to the current interval' so adjust it  		NewSeconds = value;  	else  		NewSeconds = NextInterval;  	// Is the new value 60?  If so' make it zero  	if (NewSeconds == 60)  		NewSeconds = 0;  	// Return the new value  	return new Angle (Hours' Minutes' NewSeconds);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,RoundSeconds,The following statement contains a magic number: for (double value = 0; value < 60; value += interval) {  	// Calculate the value of the next interval  	double NextInterval = value + interval;  	// Is the seconds value greater than the next interval?  	if (NewSeconds > NextInterval)  		// Yes.  Continue on  		continue;  	// Is the seconds value closer to the current or next interval?  	if (NewSeconds < (value + NextInterval) * 0.5)  		// Closer to the current interval' so adjust it  		NewSeconds = value;  	else  		NewSeconds = NextInterval;  	// Is the new value 60?  If so' make it zero  	if (NewSeconds == 60)  		NewSeconds = 0;  	// Return the new value  	return new Angle (Hours' Minutes' NewSeconds);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,RoundSeconds,The following statement contains a magic number: for (double value = 0; value < 60; value += interval) {  	// Calculate the value of the next interval  	double NextInterval = value + interval;  	// Is the seconds value greater than the next interval?  	if (NewSeconds > NextInterval)  		// Yes.  Continue on  		continue;  	// Is the seconds value closer to the current or next interval?  	if (NewSeconds < (value + NextInterval) * 0.5)  		// Closer to the current interval' so adjust it  		NewSeconds = value;  	else  		NewSeconds = NextInterval;  	// Is the new value 60?  If so' make it zero  	if (NewSeconds == 60)  		NewSeconds = 0;  	// Return the new value  	return new Angle (Hours' Minutes' NewSeconds);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,RoundSeconds,The following statement contains a magic number: if (NewSeconds < (value + NextInterval) * 0.5)  	// Closer to the current interval' so adjust it  	NewSeconds = value;  else  	NewSeconds = NextInterval;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,RoundSeconds,The following statement contains a magic number: if (NewSeconds == 60)  	NewSeconds = 0;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,Random,The following statement contains a magic number: return new Angle (generator.NextDouble () * 360.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,ToDecimalDegrees,The following statement contains a magic number: return hours < 0 ? -(-hours + minutes / 60.0 + seconds / 3600.0) : (hours + minutes / 60.0 + seconds / 3600.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,ToDecimalDegrees,The following statement contains a magic number: return hours < 0 ? -(-hours + minutes / 60.0 + seconds / 3600.0) : (hours + minutes / 60.0 + seconds / 3600.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,ToDecimalDegrees,The following statement contains a magic number: return hours < 0 ? -(-hours + minutes / 60.0 + seconds / 3600.0) : (hours + minutes / 60.0 + seconds / 3600.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,ToDecimalDegrees,The following statement contains a magic number: return hours < 0 ? -(-hours + minutes / 60.0 + seconds / 3600.0) : (hours + minutes / 60.0 + seconds / 3600.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,ToDecimalDegrees,The following statement contains a magic number: return hours < 0 ? -(-hours + decimalMinutes / 60.0) : (hours + decimalMinutes / 60.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Angle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Angle.cs,ToDecimalDegrees,The following statement contains a magic number: return hours < 0 ? -(-hours + decimalMinutes / 60.0) : (hours + decimalMinutes / 60.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Area,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Area.cs,Random,The following statement contains a magic number: return new Area (generator.NextDouble () * 1000' AreaUnit.SquareMeters).ToLocalUnitType ();  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Area,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Area.cs,ToString,The following statement contains a magic number: try {  	// Use the default if "g" is passed  	if (String.Compare (format' "g"' true' CultureInfo.InvariantCulture) == 0) {  		format = "#" + culture.NumberFormat.NumberGroupSeparator + "##0.00 uu";  	}  	// Convert the localized format string to a US format  	format = format.Replace ("v"' "0").ToUpper (CultureInfo.InvariantCulture);  	// First' replace commas and dots with silly symbols  	//				format = format.Replace(culture.NumberFormat.NumberDecimalSeparator' "#DECIMAL#");  	//				format = format.Replace(culture.NumberFormat.NumberGroupSeparator' "#GROUP#");  	//				// And change them to the local culture  	//				format = format.Replace("#DECIMAL#"' ".");  	//				format = format.Replace("#GROUP#"' "'");  	// Replace the "d" with "h" since degrees is the same as hours  	format = Value.ToString (format' culture);  	// Is there a units specifier?  	StartChar = format.IndexOf ("U");  	if (StartChar > -1) {  		// Yes. Look for subsequent H characters or a period  		EndChar = format.LastIndexOf ("U");  		// Extract the sub-string  		SubFormat = format.Substring (StartChar' EndChar - StartChar + 1);  		// Show the unit based on the length  		switch (SubFormat.Length) {  		case 1:  			switch (_Units) {  			case AreaUnit.Acres:  				format = format.Replace ("U"' "A");  				break;  			case AreaUnit.SquareCentimeters:  				format = format.Replace ("U"' "cm�");  				break;  			case AreaUnit.SquareFeet:  				format = format.Replace ("U"' "ft�");  				break;  			case AreaUnit.SquareInches:  				format = format.Replace ("U"' "in�");  				break;  			case AreaUnit.SquareKilometers:  				format = format.Replace ("U"' "km�");  				break;  			case AreaUnit.SquareMeters:  				format = format.Replace ("U"' "m�");  				break;  			case AreaUnit.SquareStatuteMiles:  				format = format.Replace ("U"' "mi�");  				break;  			case AreaUnit.SquareNauticalMiles:  				format = format.Replace ("U"' "nm�");  				break;  			}  			break;  		case 2:  			switch (_Units) {  			case AreaUnit.Acres:  				format = format.Replace ("UU"' "ac");  				break;  			case AreaUnit.SquareCentimeters:  				format = format.Replace ("UU"' "sq. cm");  				break;  			case AreaUnit.SquareFeet:  				format = format.Replace ("UU"' "sq. ft");  				break;  			case AreaUnit.SquareInches:  				format = format.Replace ("UU"' "sq. in");  				break;  			case AreaUnit.SquareKilometers:  				format = format.Replace ("UU"' "sq. km");  				break;  			case AreaUnit.SquareMeters:  				format = format.Replace ("UU"' "sq. m");  				break;  			case AreaUnit.SquareStatuteMiles:  				format = format.Replace ("UU"' "sq. mi");  				break;  			case AreaUnit.SquareNauticalMiles:  				format = format.Replace ("UU"' "sq. nmi");  				break;  			}  			break;  		case 3:  			if (Value == 1) {  				switch (_Units) {  				case AreaUnit.Acres:  					format = format.Replace ("UUU"' "acre");  					break;  				case AreaUnit.SquareCentimeters:  					format = format.Replace ("UUU"' "square centimeter");  					break;  				case AreaUnit.SquareFeet:  					format = format.Replace ("UUU"' "square foot");  					break;  				case AreaUnit.SquareInches:  					format = format.Replace ("UUU"' "square inch");  					break;  				case AreaUnit.SquareKilometers:  					format = format.Replace ("UUU"' "square kilometer");  					break;  				case AreaUnit.SquareMeters:  					format = format.Replace ("UUU"' "square meter");  					break;  				case AreaUnit.SquareStatuteMiles:  					format = format.Replace ("UUU"' "square mile");  					break;  				case AreaUnit.SquareNauticalMiles:  					format = format.Replace ("UUU"' "square nautical mile");  					break;  				}  			}  			else {  				switch (_Units) {  				case AreaUnit.Acres:  					format = format.Replace ("UUU"' "acres");  					break;  				case AreaUnit.SquareCentimeters:  					format = format.Replace ("UUU"' "square centimeters");  					break;  				case AreaUnit.SquareFeet:  					format = format.Replace ("UUU"' "square feet");  					break;  				case AreaUnit.SquareInches:  					format = format.Replace ("UUU"' "square inches");  					break;  				case AreaUnit.SquareKilometers:  					format = format.Replace ("UUU"' "square kilometers");  					break;  				case AreaUnit.SquareMeters:  					format = format.Replace ("UUU"' "square meters");  					break;  				case AreaUnit.SquareStatuteMiles:  					format = format.Replace ("UUU"' "square miles");  					break;  				case AreaUnit.SquareNauticalMiles:  					format = format.Replace ("UUU"' "square nautical miles");  					break;  				}  			}  			break;  		}  	}  	// Return the final value  	return format;  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Area_InvalidFormat' "format"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Area,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Area.cs,ToString,The following statement contains a magic number: try {  	// Use the default if "g" is passed  	if (String.Compare (format' "g"' true' CultureInfo.InvariantCulture) == 0) {  		format = "#" + culture.NumberFormat.NumberGroupSeparator + "##0.00 uu";  	}  	// Convert the localized format string to a US format  	format = format.Replace ("v"' "0").ToUpper (CultureInfo.InvariantCulture);  	// First' replace commas and dots with silly symbols  	//				format = format.Replace(culture.NumberFormat.NumberDecimalSeparator' "#DECIMAL#");  	//				format = format.Replace(culture.NumberFormat.NumberGroupSeparator' "#GROUP#");  	//				// And change them to the local culture  	//				format = format.Replace("#DECIMAL#"' ".");  	//				format = format.Replace("#GROUP#"' "'");  	// Replace the "d" with "h" since degrees is the same as hours  	format = Value.ToString (format' culture);  	// Is there a units specifier?  	StartChar = format.IndexOf ("U");  	if (StartChar > -1) {  		// Yes. Look for subsequent H characters or a period  		EndChar = format.LastIndexOf ("U");  		// Extract the sub-string  		SubFormat = format.Substring (StartChar' EndChar - StartChar + 1);  		// Show the unit based on the length  		switch (SubFormat.Length) {  		case 1:  			switch (_Units) {  			case AreaUnit.Acres:  				format = format.Replace ("U"' "A");  				break;  			case AreaUnit.SquareCentimeters:  				format = format.Replace ("U"' "cm�");  				break;  			case AreaUnit.SquareFeet:  				format = format.Replace ("U"' "ft�");  				break;  			case AreaUnit.SquareInches:  				format = format.Replace ("U"' "in�");  				break;  			case AreaUnit.SquareKilometers:  				format = format.Replace ("U"' "km�");  				break;  			case AreaUnit.SquareMeters:  				format = format.Replace ("U"' "m�");  				break;  			case AreaUnit.SquareStatuteMiles:  				format = format.Replace ("U"' "mi�");  				break;  			case AreaUnit.SquareNauticalMiles:  				format = format.Replace ("U"' "nm�");  				break;  			}  			break;  		case 2:  			switch (_Units) {  			case AreaUnit.Acres:  				format = format.Replace ("UU"' "ac");  				break;  			case AreaUnit.SquareCentimeters:  				format = format.Replace ("UU"' "sq. cm");  				break;  			case AreaUnit.SquareFeet:  				format = format.Replace ("UU"' "sq. ft");  				break;  			case AreaUnit.SquareInches:  				format = format.Replace ("UU"' "sq. in");  				break;  			case AreaUnit.SquareKilometers:  				format = format.Replace ("UU"' "sq. km");  				break;  			case AreaUnit.SquareMeters:  				format = format.Replace ("UU"' "sq. m");  				break;  			case AreaUnit.SquareStatuteMiles:  				format = format.Replace ("UU"' "sq. mi");  				break;  			case AreaUnit.SquareNauticalMiles:  				format = format.Replace ("UU"' "sq. nmi");  				break;  			}  			break;  		case 3:  			if (Value == 1) {  				switch (_Units) {  				case AreaUnit.Acres:  					format = format.Replace ("UUU"' "acre");  					break;  				case AreaUnit.SquareCentimeters:  					format = format.Replace ("UUU"' "square centimeter");  					break;  				case AreaUnit.SquareFeet:  					format = format.Replace ("UUU"' "square foot");  					break;  				case AreaUnit.SquareInches:  					format = format.Replace ("UUU"' "square inch");  					break;  				case AreaUnit.SquareKilometers:  					format = format.Replace ("UUU"' "square kilometer");  					break;  				case AreaUnit.SquareMeters:  					format = format.Replace ("UUU"' "square meter");  					break;  				case AreaUnit.SquareStatuteMiles:  					format = format.Replace ("UUU"' "square mile");  					break;  				case AreaUnit.SquareNauticalMiles:  					format = format.Replace ("UUU"' "square nautical mile");  					break;  				}  			}  			else {  				switch (_Units) {  				case AreaUnit.Acres:  					format = format.Replace ("UUU"' "acres");  					break;  				case AreaUnit.SquareCentimeters:  					format = format.Replace ("UUU"' "square centimeters");  					break;  				case AreaUnit.SquareFeet:  					format = format.Replace ("UUU"' "square feet");  					break;  				case AreaUnit.SquareInches:  					format = format.Replace ("UUU"' "square inches");  					break;  				case AreaUnit.SquareKilometers:  					format = format.Replace ("UUU"' "square kilometers");  					break;  				case AreaUnit.SquareMeters:  					format = format.Replace ("UUU"' "square meters");  					break;  				case AreaUnit.SquareStatuteMiles:  					format = format.Replace ("UUU"' "square miles");  					break;  				case AreaUnit.SquareNauticalMiles:  					format = format.Replace ("UUU"' "square nautical miles");  					break;  				}  			}  			break;  		}  	}  	// Return the final value  	return format;  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Area_InvalidFormat' "format"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Area,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Area.cs,ToString,The following statement contains a magic number: if (StartChar > -1) {  	// Yes. Look for subsequent H characters or a period  	EndChar = format.LastIndexOf ("U");  	// Extract the sub-string  	SubFormat = format.Substring (StartChar' EndChar - StartChar + 1);  	// Show the unit based on the length  	switch (SubFormat.Length) {  	case 1:  		switch (_Units) {  		case AreaUnit.Acres:  			format = format.Replace ("U"' "A");  			break;  		case AreaUnit.SquareCentimeters:  			format = format.Replace ("U"' "cm�");  			break;  		case AreaUnit.SquareFeet:  			format = format.Replace ("U"' "ft�");  			break;  		case AreaUnit.SquareInches:  			format = format.Replace ("U"' "in�");  			break;  		case AreaUnit.SquareKilometers:  			format = format.Replace ("U"' "km�");  			break;  		case AreaUnit.SquareMeters:  			format = format.Replace ("U"' "m�");  			break;  		case AreaUnit.SquareStatuteMiles:  			format = format.Replace ("U"' "mi�");  			break;  		case AreaUnit.SquareNauticalMiles:  			format = format.Replace ("U"' "nm�");  			break;  		}  		break;  	case 2:  		switch (_Units) {  		case AreaUnit.Acres:  			format = format.Replace ("UU"' "ac");  			break;  		case AreaUnit.SquareCentimeters:  			format = format.Replace ("UU"' "sq. cm");  			break;  		case AreaUnit.SquareFeet:  			format = format.Replace ("UU"' "sq. ft");  			break;  		case AreaUnit.SquareInches:  			format = format.Replace ("UU"' "sq. in");  			break;  		case AreaUnit.SquareKilometers:  			format = format.Replace ("UU"' "sq. km");  			break;  		case AreaUnit.SquareMeters:  			format = format.Replace ("UU"' "sq. m");  			break;  		case AreaUnit.SquareStatuteMiles:  			format = format.Replace ("UU"' "sq. mi");  			break;  		case AreaUnit.SquareNauticalMiles:  			format = format.Replace ("UU"' "sq. nmi");  			break;  		}  		break;  	case 3:  		if (Value == 1) {  			switch (_Units) {  			case AreaUnit.Acres:  				format = format.Replace ("UUU"' "acre");  				break;  			case AreaUnit.SquareCentimeters:  				format = format.Replace ("UUU"' "square centimeter");  				break;  			case AreaUnit.SquareFeet:  				format = format.Replace ("UUU"' "square foot");  				break;  			case AreaUnit.SquareInches:  				format = format.Replace ("UUU"' "square inch");  				break;  			case AreaUnit.SquareKilometers:  				format = format.Replace ("UUU"' "square kilometer");  				break;  			case AreaUnit.SquareMeters:  				format = format.Replace ("UUU"' "square meter");  				break;  			case AreaUnit.SquareStatuteMiles:  				format = format.Replace ("UUU"' "square mile");  				break;  			case AreaUnit.SquareNauticalMiles:  				format = format.Replace ("UUU"' "square nautical mile");  				break;  			}  		}  		else {  			switch (_Units) {  			case AreaUnit.Acres:  				format = format.Replace ("UUU"' "acres");  				break;  			case AreaUnit.SquareCentimeters:  				format = format.Replace ("UUU"' "square centimeters");  				break;  			case AreaUnit.SquareFeet:  				format = format.Replace ("UUU"' "square feet");  				break;  			case AreaUnit.SquareInches:  				format = format.Replace ("UUU"' "square inches");  				break;  			case AreaUnit.SquareKilometers:  				format = format.Replace ("UUU"' "square kilometers");  				break;  			case AreaUnit.SquareMeters:  				format = format.Replace ("UUU"' "square meters");  				break;  			case AreaUnit.SquareStatuteMiles:  				format = format.Replace ("UUU"' "square miles");  				break;  			case AreaUnit.SquareNauticalMiles:  				format = format.Replace ("UUU"' "square nautical miles");  				break;  			}  		}  		break;  	}  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Area,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Area.cs,ToString,The following statement contains a magic number: if (StartChar > -1) {  	// Yes. Look for subsequent H characters or a period  	EndChar = format.LastIndexOf ("U");  	// Extract the sub-string  	SubFormat = format.Substring (StartChar' EndChar - StartChar + 1);  	// Show the unit based on the length  	switch (SubFormat.Length) {  	case 1:  		switch (_Units) {  		case AreaUnit.Acres:  			format = format.Replace ("U"' "A");  			break;  		case AreaUnit.SquareCentimeters:  			format = format.Replace ("U"' "cm�");  			break;  		case AreaUnit.SquareFeet:  			format = format.Replace ("U"' "ft�");  			break;  		case AreaUnit.SquareInches:  			format = format.Replace ("U"' "in�");  			break;  		case AreaUnit.SquareKilometers:  			format = format.Replace ("U"' "km�");  			break;  		case AreaUnit.SquareMeters:  			format = format.Replace ("U"' "m�");  			break;  		case AreaUnit.SquareStatuteMiles:  			format = format.Replace ("U"' "mi�");  			break;  		case AreaUnit.SquareNauticalMiles:  			format = format.Replace ("U"' "nm�");  			break;  		}  		break;  	case 2:  		switch (_Units) {  		case AreaUnit.Acres:  			format = format.Replace ("UU"' "ac");  			break;  		case AreaUnit.SquareCentimeters:  			format = format.Replace ("UU"' "sq. cm");  			break;  		case AreaUnit.SquareFeet:  			format = format.Replace ("UU"' "sq. ft");  			break;  		case AreaUnit.SquareInches:  			format = format.Replace ("UU"' "sq. in");  			break;  		case AreaUnit.SquareKilometers:  			format = format.Replace ("UU"' "sq. km");  			break;  		case AreaUnit.SquareMeters:  			format = format.Replace ("UU"' "sq. m");  			break;  		case AreaUnit.SquareStatuteMiles:  			format = format.Replace ("UU"' "sq. mi");  			break;  		case AreaUnit.SquareNauticalMiles:  			format = format.Replace ("UU"' "sq. nmi");  			break;  		}  		break;  	case 3:  		if (Value == 1) {  			switch (_Units) {  			case AreaUnit.Acres:  				format = format.Replace ("UUU"' "acre");  				break;  			case AreaUnit.SquareCentimeters:  				format = format.Replace ("UUU"' "square centimeter");  				break;  			case AreaUnit.SquareFeet:  				format = format.Replace ("UUU"' "square foot");  				break;  			case AreaUnit.SquareInches:  				format = format.Replace ("UUU"' "square inch");  				break;  			case AreaUnit.SquareKilometers:  				format = format.Replace ("UUU"' "square kilometer");  				break;  			case AreaUnit.SquareMeters:  				format = format.Replace ("UUU"' "square meter");  				break;  			case AreaUnit.SquareStatuteMiles:  				format = format.Replace ("UUU"' "square mile");  				break;  			case AreaUnit.SquareNauticalMiles:  				format = format.Replace ("UUU"' "square nautical mile");  				break;  			}  		}  		else {  			switch (_Units) {  			case AreaUnit.Acres:  				format = format.Replace ("UUU"' "acres");  				break;  			case AreaUnit.SquareCentimeters:  				format = format.Replace ("UUU"' "square centimeters");  				break;  			case AreaUnit.SquareFeet:  				format = format.Replace ("UUU"' "square feet");  				break;  			case AreaUnit.SquareInches:  				format = format.Replace ("UUU"' "square inches");  				break;  			case AreaUnit.SquareKilometers:  				format = format.Replace ("UUU"' "square kilometers");  				break;  			case AreaUnit.SquareMeters:  				format = format.Replace ("UUU"' "square meters");  				break;  			case AreaUnit.SquareStatuteMiles:  				format = format.Replace ("UUU"' "square miles");  				break;  			case AreaUnit.SquareNauticalMiles:  				format = format.Replace ("UUU"' "square nautical miles");  				break;  			}  		}  		break;  	}  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Area,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Area.cs,ToString,The following statement contains a magic number: switch (SubFormat.Length) {  case 1:  	switch (_Units) {  	case AreaUnit.Acres:  		format = format.Replace ("U"' "A");  		break;  	case AreaUnit.SquareCentimeters:  		format = format.Replace ("U"' "cm�");  		break;  	case AreaUnit.SquareFeet:  		format = format.Replace ("U"' "ft�");  		break;  	case AreaUnit.SquareInches:  		format = format.Replace ("U"' "in�");  		break;  	case AreaUnit.SquareKilometers:  		format = format.Replace ("U"' "km�");  		break;  	case AreaUnit.SquareMeters:  		format = format.Replace ("U"' "m�");  		break;  	case AreaUnit.SquareStatuteMiles:  		format = format.Replace ("U"' "mi�");  		break;  	case AreaUnit.SquareNauticalMiles:  		format = format.Replace ("U"' "nm�");  		break;  	}  	break;  case 2:  	switch (_Units) {  	case AreaUnit.Acres:  		format = format.Replace ("UU"' "ac");  		break;  	case AreaUnit.SquareCentimeters:  		format = format.Replace ("UU"' "sq. cm");  		break;  	case AreaUnit.SquareFeet:  		format = format.Replace ("UU"' "sq. ft");  		break;  	case AreaUnit.SquareInches:  		format = format.Replace ("UU"' "sq. in");  		break;  	case AreaUnit.SquareKilometers:  		format = format.Replace ("UU"' "sq. km");  		break;  	case AreaUnit.SquareMeters:  		format = format.Replace ("UU"' "sq. m");  		break;  	case AreaUnit.SquareStatuteMiles:  		format = format.Replace ("UU"' "sq. mi");  		break;  	case AreaUnit.SquareNauticalMiles:  		format = format.Replace ("UU"' "sq. nmi");  		break;  	}  	break;  case 3:  	if (Value == 1) {  		switch (_Units) {  		case AreaUnit.Acres:  			format = format.Replace ("UUU"' "acre");  			break;  		case AreaUnit.SquareCentimeters:  			format = format.Replace ("UUU"' "square centimeter");  			break;  		case AreaUnit.SquareFeet:  			format = format.Replace ("UUU"' "square foot");  			break;  		case AreaUnit.SquareInches:  			format = format.Replace ("UUU"' "square inch");  			break;  		case AreaUnit.SquareKilometers:  			format = format.Replace ("UUU"' "square kilometer");  			break;  		case AreaUnit.SquareMeters:  			format = format.Replace ("UUU"' "square meter");  			break;  		case AreaUnit.SquareStatuteMiles:  			format = format.Replace ("UUU"' "square mile");  			break;  		case AreaUnit.SquareNauticalMiles:  			format = format.Replace ("UUU"' "square nautical mile");  			break;  		}  	}  	else {  		switch (_Units) {  		case AreaUnit.Acres:  			format = format.Replace ("UUU"' "acres");  			break;  		case AreaUnit.SquareCentimeters:  			format = format.Replace ("UUU"' "square centimeters");  			break;  		case AreaUnit.SquareFeet:  			format = format.Replace ("UUU"' "square feet");  			break;  		case AreaUnit.SquareInches:  			format = format.Replace ("UUU"' "square inches");  			break;  		case AreaUnit.SquareKilometers:  			format = format.Replace ("UUU"' "square kilometers");  			break;  		case AreaUnit.SquareMeters:  			format = format.Replace ("UUU"' "square meters");  			break;  		case AreaUnit.SquareStatuteMiles:  			format = format.Replace ("UUU"' "square miles");  			break;  		case AreaUnit.SquareNauticalMiles:  			format = format.Replace ("UUU"' "square nautical miles");  			break;  		}  	}  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Area,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Area.cs,ToString,The following statement contains a magic number: switch (SubFormat.Length) {  case 1:  	switch (_Units) {  	case AreaUnit.Acres:  		format = format.Replace ("U"' "A");  		break;  	case AreaUnit.SquareCentimeters:  		format = format.Replace ("U"' "cm�");  		break;  	case AreaUnit.SquareFeet:  		format = format.Replace ("U"' "ft�");  		break;  	case AreaUnit.SquareInches:  		format = format.Replace ("U"' "in�");  		break;  	case AreaUnit.SquareKilometers:  		format = format.Replace ("U"' "km�");  		break;  	case AreaUnit.SquareMeters:  		format = format.Replace ("U"' "m�");  		break;  	case AreaUnit.SquareStatuteMiles:  		format = format.Replace ("U"' "mi�");  		break;  	case AreaUnit.SquareNauticalMiles:  		format = format.Replace ("U"' "nm�");  		break;  	}  	break;  case 2:  	switch (_Units) {  	case AreaUnit.Acres:  		format = format.Replace ("UU"' "ac");  		break;  	case AreaUnit.SquareCentimeters:  		format = format.Replace ("UU"' "sq. cm");  		break;  	case AreaUnit.SquareFeet:  		format = format.Replace ("UU"' "sq. ft");  		break;  	case AreaUnit.SquareInches:  		format = format.Replace ("UU"' "sq. in");  		break;  	case AreaUnit.SquareKilometers:  		format = format.Replace ("UU"' "sq. km");  		break;  	case AreaUnit.SquareMeters:  		format = format.Replace ("UU"' "sq. m");  		break;  	case AreaUnit.SquareStatuteMiles:  		format = format.Replace ("UU"' "sq. mi");  		break;  	case AreaUnit.SquareNauticalMiles:  		format = format.Replace ("UU"' "sq. nmi");  		break;  	}  	break;  case 3:  	if (Value == 1) {  		switch (_Units) {  		case AreaUnit.Acres:  			format = format.Replace ("UUU"' "acre");  			break;  		case AreaUnit.SquareCentimeters:  			format = format.Replace ("UUU"' "square centimeter");  			break;  		case AreaUnit.SquareFeet:  			format = format.Replace ("UUU"' "square foot");  			break;  		case AreaUnit.SquareInches:  			format = format.Replace ("UUU"' "square inch");  			break;  		case AreaUnit.SquareKilometers:  			format = format.Replace ("UUU"' "square kilometer");  			break;  		case AreaUnit.SquareMeters:  			format = format.Replace ("UUU"' "square meter");  			break;  		case AreaUnit.SquareStatuteMiles:  			format = format.Replace ("UUU"' "square mile");  			break;  		case AreaUnit.SquareNauticalMiles:  			format = format.Replace ("UUU"' "square nautical mile");  			break;  		}  	}  	else {  		switch (_Units) {  		case AreaUnit.Acres:  			format = format.Replace ("UUU"' "acres");  			break;  		case AreaUnit.SquareCentimeters:  			format = format.Replace ("UUU"' "square centimeters");  			break;  		case AreaUnit.SquareFeet:  			format = format.Replace ("UUU"' "square feet");  			break;  		case AreaUnit.SquareInches:  			format = format.Replace ("UUU"' "square inches");  			break;  		case AreaUnit.SquareKilometers:  			format = format.Replace ("UUU"' "square kilometers");  			break;  		case AreaUnit.SquareMeters:  			format = format.Replace ("UUU"' "square meters");  			break;  		case AreaUnit.SquareStatuteMiles:  			format = format.Replace ("UUU"' "square miles");  			break;  		case AreaUnit.SquareNauticalMiles:  			format = format.Replace ("UUU"' "square nautical miles");  			break;  		}  	}  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Azimuth  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?  		if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  			return;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  			return;  		}  		else {  			_DecimalDegrees = double.Parse (Values [0]' culture);  			return;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Azimuth  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?  		if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  			return;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  			return;  		}  		else {  			_DecimalDegrees = double.Parse (Values [0]' culture);  			return;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Azimuth  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?  		if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  			return;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  			return;  		}  		else {  			_DecimalDegrees = double.Parse (Values [0]' culture);  			return;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Azimuth  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?  		if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  			return;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  			return;  		}  		else {  			_DecimalDegrees = double.Parse (Values [0]' culture);  			return;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Azimuth  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?  		if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  			return;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  			return;  		}  		else {  			_DecimalDegrees = double.Parse (Values [0]' culture);  			return;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Azimuth  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?  		if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  			return;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  			return;  		}  		else {  			_DecimalDegrees = double.Parse (Values [0]' culture);  			return;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Azimuth  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?  		if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  			return;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  			return;  		}  		else {  			_DecimalDegrees = double.Parse (Values [0]' culture);  			return;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Azimuth  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?  		if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  			return;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  			return;  		}  		else {  			_DecimalDegrees = double.Parse (Values [0]' culture);  			return;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Azimuth  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?  		if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  			return;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  			return;  		}  		else {  			_DecimalDegrees = double.Parse (Values [0]' culture);  			return;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Azimuth  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?  		if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  			return;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  			return;  		}  		else {  			_DecimalDegrees = double.Parse (Values [0]' culture);  			return;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Azimuth  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?  		if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  			return;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  			return;  		}  		else {  			_DecimalDegrees = double.Parse (Values [0]' culture);  			return;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Azimuth  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?  		if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  			return;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  			return;  		}  		else {  			_DecimalDegrees = double.Parse (Values [0]' culture);  			return;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Azimuth  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?  		if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  			return;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  			return;  		}  		else {  			_DecimalDegrees = double.Parse (Values [0]' culture);  			return;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Azimuth  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?  		if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  			return;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  			return;  		}  		else {  			_DecimalDegrees = double.Parse (Values [0]' culture);  			return;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Azimuth  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?  	if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  		return;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  		return;  	}  	else {  		_DecimalDegrees = double.Parse (Values [0]' culture);  		return;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Azimuth  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?  	if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  		return;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  		return;  	}  	else {  		_DecimalDegrees = double.Parse (Values [0]' culture);  		return;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Azimuth  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?  	if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  		return;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  		return;  	}  	else {  		_DecimalDegrees = double.Parse (Values [0]' culture);  		return;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Azimuth  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?  	if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  		return;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  		return;  	}  	else {  		_DecimalDegrees = double.Parse (Values [0]' culture);  		return;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Azimuth  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?  	if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  		return;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  		return;  	}  	else {  		_DecimalDegrees = double.Parse (Values [0]' culture);  		return;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Azimuth  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?  	if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  		return;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  		return;  	}  	else {  		_DecimalDegrees = double.Parse (Values [0]' culture);  		return;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Azimuth  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?  	if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  		return;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  		return;  	}  	else {  		_DecimalDegrees = double.Parse (Values [0]' culture);  		return;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Azimuth  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?  	if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  		return;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  		return;  	}  	else {  		_DecimalDegrees = double.Parse (Values [0]' culture);  		return;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Azimuth  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?  	if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  		return;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  		return;  	}  	else {  		_DecimalDegrees = double.Parse (Values [0]' culture);  		return;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Azimuth  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?  	if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  		return;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  		return;  	}  	else {  		_DecimalDegrees = double.Parse (Values [0]' culture);  		return;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Azimuth  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?  	if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  		return;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  		return;  	}  	else {  		_DecimalDegrees = double.Parse (Values [0]' culture);  		return;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Azimuth  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?  	if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  		return;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  		return;  	}  	else {  		_DecimalDegrees = double.Parse (Values [0]' culture);  		return;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Azimuth  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?  	if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  		return;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  		return;  	}  	else {  		_DecimalDegrees = double.Parse (Values [0]' culture);  		return;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Azimuth  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?  	if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  		return;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  		return;  	}  	else {  		_DecimalDegrees = double.Parse (Values [0]' culture);  		return;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: _DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: _DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: _DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: _DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: _DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: _DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: _DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: _DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: _DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: _DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following statement contains a magic number: _DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Normalize,The following statement contains a magic number: while (_Value < 0) {  	_Value += 360.0;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Normalize,The following statement contains a magic number: _Value += 360.0;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Normalize,The following statement contains a magic number: return new Azimuth (_Value % 360);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,IsBetween,The following statement contains a magic number: if (start.DecimalDegrees <= end.DecimalDegrees) {  	// Yes.  This is a simple check  	return _DecimalDegrees >= start.DecimalDegrees && _DecimalDegrees <= end.DecimalDegrees;  }  else {  	// No' the value crosses the 0/360 line.  	return (_DecimalDegrees >= 0 && _DecimalDegrees <= end.DecimalDegrees) || (_DecimalDegrees <= 360 && _DecimalDegrees >= start.DecimalDegrees);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,IsBetween,The following statement contains a magic number: return (_DecimalDegrees >= 0 && _DecimalDegrees <= end.DecimalDegrees) || (_DecimalDegrees <= 360 && _DecimalDegrees >= start.DecimalDegrees);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,RoundSeconds,The following statement contains a magic number: return RoundSeconds (15.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,RoundSeconds,The following statement contains a magic number: for (double value = 0; value < 60; value += interval) {  	// Calculate the value of the next interval  	double NextInterval = value + interval;  	// Is the seconds value greater than the next interval?  	if (NewSeconds > NextInterval)  		// Yes.  Continue on  		continue;  	// Is the seconds value closer to the current or next interval?  	if (NewSeconds < (value + NextInterval) * 0.5)  		// Closer to the current interval' so adjust it  		NewSeconds = value;  	else  		NewSeconds = NextInterval;  	// Is the new value 60?  If so' make it zero  	if (NewSeconds == 60)  		NewSeconds = 0;  	// Return the new value  	return new Azimuth (Hours' Minutes' NewSeconds);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,RoundSeconds,The following statement contains a magic number: for (double value = 0; value < 60; value += interval) {  	// Calculate the value of the next interval  	double NextInterval = value + interval;  	// Is the seconds value greater than the next interval?  	if (NewSeconds > NextInterval)  		// Yes.  Continue on  		continue;  	// Is the seconds value closer to the current or next interval?  	if (NewSeconds < (value + NextInterval) * 0.5)  		// Closer to the current interval' so adjust it  		NewSeconds = value;  	else  		NewSeconds = NextInterval;  	// Is the new value 60?  If so' make it zero  	if (NewSeconds == 60)  		NewSeconds = 0;  	// Return the new value  	return new Azimuth (Hours' Minutes' NewSeconds);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,RoundSeconds,The following statement contains a magic number: for (double value = 0; value < 60; value += interval) {  	// Calculate the value of the next interval  	double NextInterval = value + interval;  	// Is the seconds value greater than the next interval?  	if (NewSeconds > NextInterval)  		// Yes.  Continue on  		continue;  	// Is the seconds value closer to the current or next interval?  	if (NewSeconds < (value + NextInterval) * 0.5)  		// Closer to the current interval' so adjust it  		NewSeconds = value;  	else  		NewSeconds = NextInterval;  	// Is the new value 60?  If so' make it zero  	if (NewSeconds == 60)  		NewSeconds = 0;  	// Return the new value  	return new Azimuth (Hours' Minutes' NewSeconds);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,RoundSeconds,The following statement contains a magic number: if (NewSeconds < (value + NextInterval) * 0.5)  	// Closer to the current interval' so adjust it  	NewSeconds = value;  else  	NewSeconds = NextInterval;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,RoundSeconds,The following statement contains a magic number: if (NewSeconds == 60)  	NewSeconds = 0;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Mirror,The following statement contains a magic number: return new Azimuth (_DecimalDegrees + 180.0).Normalize ();  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Random,The following statement contains a magic number: return new Azimuth (generator.NextDouble () * 360.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,ToDecimalDegrees,The following statement contains a magic number: return hours < 0 ? -(-hours + minutes / 60.0 + seconds / 3600.0) : (hours + minutes / 60.0 + seconds / 3600.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,ToDecimalDegrees,The following statement contains a magic number: return hours < 0 ? -(-hours + minutes / 60.0 + seconds / 3600.0) : (hours + minutes / 60.0 + seconds / 3600.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,ToDecimalDegrees,The following statement contains a magic number: return hours < 0 ? -(-hours + minutes / 60.0 + seconds / 3600.0) : (hours + minutes / 60.0 + seconds / 3600.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,ToDecimalDegrees,The following statement contains a magic number: return hours < 0 ? -(-hours + minutes / 60.0 + seconds / 3600.0) : (hours + minutes / 60.0 + seconds / 3600.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,ToDecimalDegrees,The following statement contains a magic number: return hours < 0 ? -(-hours + decimalMinutes / 60.0) : (hours + decimalMinutes / 60.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,ToDecimalDegrees,The following statement contains a magic number: return hours < 0 ? -(-hours + decimalMinutes / 60.0) : (hours + decimalMinutes / 60.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,CartesianPoint,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\CartesianPoint.cs,ToPosition3D,The following statement contains a magic number: lon = lon % (2 * Math.PI);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,CartesianPoint,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\CartesianPoint.cs,DistanceTo,The following statement contains a magic number: return new Distance (Math.Sqrt (Math.Pow (_point.X.Value - m_X.Value' 2) + Math.Pow (_point.Y.Value - m_Y.Value' 2))' DistanceUnit.Meters).ToLocalUnitType ();  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,CartesianPoint,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\CartesianPoint.cs,DistanceTo,The following statement contains a magic number: return new Distance (Math.Sqrt (Math.Pow (_point.X.Value - m_X.Value' 2) + Math.Pow (_point.Y.Value - m_Y.Value' 2))' DistanceUnit.Meters).ToLocalUnitType ();  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,CartesianPoint,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\CartesianPoint.cs,ReadXml,The following statement contains a magic number: switch (_reader.LocalName.ToLower (CultureInfo.InvariantCulture)) {  case "pos":  	// Read the "X Y" string' then split by the space between them  	string[] values = _reader.ReadElementContentAsString ().Split (' ');  	// Deserialize the X  	m_X = Distance.FromMeters (double.Parse (values [0]' CultureInfo.InvariantCulture));  	// Deserialize the Y  	if (values.Length >= 2)  		m_Y = Distance.FromMeters (double.Parse (values [1]' CultureInfo.InvariantCulture));  	// Deserialize the Z  	if (values.Length == 3)  		m_Z = Distance.FromMeters (double.Parse (values [2]' CultureInfo.InvariantCulture));  	break;  case "coord":  	// Read the <gml:coord> start tag  	_reader.ReadStartElement ();  	// Now read up to 3 elements: X' and optionally Y or Z  	for (int index = 0; index < 3; index++) {  		switch (_reader.LocalName.ToLower (CultureInfo.InvariantCulture)) {  		case "x":  			// Read X as meters (there's no unit type in the spec :P morons)  			m_X = Distance.FromMeters (_reader.ReadElementContentAsDouble ());  			break;  		case "y":  			// Read Y as meters (there's no unit type in the spec :P morons)  			m_Y = Distance.FromMeters (_reader.ReadElementContentAsDouble ());  			break;  		case "z":  			// Read Z as meters (there's no unit type in the spec :P morons)  			m_Z = Distance.FromMeters (_reader.ReadElementContentAsDouble ());  			break;  		}  		// If we're at an end element' stop  		if (_reader.NodeType == XmlNodeType.EndElement)  			break;  	}  	// Read the </gml:coord> end tag  	_reader.ReadEndElement ();  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,CartesianPoint,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\CartesianPoint.cs,ReadXml,The following statement contains a magic number: switch (_reader.LocalName.ToLower (CultureInfo.InvariantCulture)) {  case "pos":  	// Read the "X Y" string' then split by the space between them  	string[] values = _reader.ReadElementContentAsString ().Split (' ');  	// Deserialize the X  	m_X = Distance.FromMeters (double.Parse (values [0]' CultureInfo.InvariantCulture));  	// Deserialize the Y  	if (values.Length >= 2)  		m_Y = Distance.FromMeters (double.Parse (values [1]' CultureInfo.InvariantCulture));  	// Deserialize the Z  	if (values.Length == 3)  		m_Z = Distance.FromMeters (double.Parse (values [2]' CultureInfo.InvariantCulture));  	break;  case "coord":  	// Read the <gml:coord> start tag  	_reader.ReadStartElement ();  	// Now read up to 3 elements: X' and optionally Y or Z  	for (int index = 0; index < 3; index++) {  		switch (_reader.LocalName.ToLower (CultureInfo.InvariantCulture)) {  		case "x":  			// Read X as meters (there's no unit type in the spec :P morons)  			m_X = Distance.FromMeters (_reader.ReadElementContentAsDouble ());  			break;  		case "y":  			// Read Y as meters (there's no unit type in the spec :P morons)  			m_Y = Distance.FromMeters (_reader.ReadElementContentAsDouble ());  			break;  		case "z":  			// Read Z as meters (there's no unit type in the spec :P morons)  			m_Z = Distance.FromMeters (_reader.ReadElementContentAsDouble ());  			break;  		}  		// If we're at an end element' stop  		if (_reader.NodeType == XmlNodeType.EndElement)  			break;  	}  	// Read the </gml:coord> end tag  	_reader.ReadEndElement ();  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,CartesianPoint,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\CartesianPoint.cs,ReadXml,The following statement contains a magic number: switch (_reader.LocalName.ToLower (CultureInfo.InvariantCulture)) {  case "pos":  	// Read the "X Y" string' then split by the space between them  	string[] values = _reader.ReadElementContentAsString ().Split (' ');  	// Deserialize the X  	m_X = Distance.FromMeters (double.Parse (values [0]' CultureInfo.InvariantCulture));  	// Deserialize the Y  	if (values.Length >= 2)  		m_Y = Distance.FromMeters (double.Parse (values [1]' CultureInfo.InvariantCulture));  	// Deserialize the Z  	if (values.Length == 3)  		m_Z = Distance.FromMeters (double.Parse (values [2]' CultureInfo.InvariantCulture));  	break;  case "coord":  	// Read the <gml:coord> start tag  	_reader.ReadStartElement ();  	// Now read up to 3 elements: X' and optionally Y or Z  	for (int index = 0; index < 3; index++) {  		switch (_reader.LocalName.ToLower (CultureInfo.InvariantCulture)) {  		case "x":  			// Read X as meters (there's no unit type in the spec :P morons)  			m_X = Distance.FromMeters (_reader.ReadElementContentAsDouble ());  			break;  		case "y":  			// Read Y as meters (there's no unit type in the spec :P morons)  			m_Y = Distance.FromMeters (_reader.ReadElementContentAsDouble ());  			break;  		case "z":  			// Read Z as meters (there's no unit type in the spec :P morons)  			m_Z = Distance.FromMeters (_reader.ReadElementContentAsDouble ());  			break;  		}  		// If we're at an end element' stop  		if (_reader.NodeType == XmlNodeType.EndElement)  			break;  	}  	// Read the </gml:coord> end tag  	_reader.ReadEndElement ();  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,CartesianPoint,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\CartesianPoint.cs,ReadXml,The following statement contains a magic number: switch (_reader.LocalName.ToLower (CultureInfo.InvariantCulture)) {  case "pos":  	// Read the "X Y" string' then split by the space between them  	string[] values = _reader.ReadElementContentAsString ().Split (' ');  	// Deserialize the X  	m_X = Distance.FromMeters (double.Parse (values [0]' CultureInfo.InvariantCulture));  	// Deserialize the Y  	if (values.Length >= 2)  		m_Y = Distance.FromMeters (double.Parse (values [1]' CultureInfo.InvariantCulture));  	// Deserialize the Z  	if (values.Length == 3)  		m_Z = Distance.FromMeters (double.Parse (values [2]' CultureInfo.InvariantCulture));  	break;  case "coord":  	// Read the <gml:coord> start tag  	_reader.ReadStartElement ();  	// Now read up to 3 elements: X' and optionally Y or Z  	for (int index = 0; index < 3; index++) {  		switch (_reader.LocalName.ToLower (CultureInfo.InvariantCulture)) {  		case "x":  			// Read X as meters (there's no unit type in the spec :P morons)  			m_X = Distance.FromMeters (_reader.ReadElementContentAsDouble ());  			break;  		case "y":  			// Read Y as meters (there's no unit type in the spec :P morons)  			m_Y = Distance.FromMeters (_reader.ReadElementContentAsDouble ());  			break;  		case "z":  			// Read Z as meters (there's no unit type in the spec :P morons)  			m_Z = Distance.FromMeters (_reader.ReadElementContentAsDouble ());  			break;  		}  		// If we're at an end element' stop  		if (_reader.NodeType == XmlNodeType.EndElement)  			break;  	}  	// Read the </gml:coord> end tag  	_reader.ReadEndElement ();  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,CartesianPoint,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\CartesianPoint.cs,ReadXml,The following statement contains a magic number: if (values.Length >= 2)  	m_Y = Distance.FromMeters (double.Parse (values [1]' CultureInfo.InvariantCulture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,CartesianPoint,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\CartesianPoint.cs,ReadXml,The following statement contains a magic number: if (values.Length == 3)  	m_Z = Distance.FromMeters (double.Parse (values [2]' CultureInfo.InvariantCulture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,CartesianPoint,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\CartesianPoint.cs,ReadXml,The following statement contains a magic number: if (values.Length == 3)  	m_Z = Distance.FromMeters (double.Parse (values [2]' CultureInfo.InvariantCulture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,CartesianPoint,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\CartesianPoint.cs,ReadXml,The following statement contains a magic number: m_Z = Distance.FromMeters (double.Parse (values [2]' CultureInfo.InvariantCulture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,CartesianPoint,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\CartesianPoint.cs,ReadXml,The following statement contains a magic number: for (int index = 0; index < 3; index++) {  	switch (_reader.LocalName.ToLower (CultureInfo.InvariantCulture)) {  	case "x":  		// Read X as meters (there's no unit type in the spec :P morons)  		m_X = Distance.FromMeters (_reader.ReadElementContentAsDouble ());  		break;  	case "y":  		// Read Y as meters (there's no unit type in the spec :P morons)  		m_Y = Distance.FromMeters (_reader.ReadElementContentAsDouble ());  		break;  	case "z":  		// Read Z as meters (there's no unit type in the spec :P morons)  		m_Z = Distance.FromMeters (_reader.ReadElementContentAsDouble ());  		break;  	}  	// If we're at an end element' stop  	if (_reader.NodeType == XmlNodeType.EndElement)  		break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Distance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Distance.cs,ToSpeed,The following statement contains a magic number: return new Speed (ToMeters ().Value / (time.TotalMilliseconds / 1000.0)' SpeedUnit.MetersPerSecond).ToLocalUnitType ();  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Distance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Distance.cs,Random,The following statement contains a magic number: return new Distance (generator.NextDouble () * 1000' DistanceUnit.Meters).ToLocalUnitType ();  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Distance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Distance.cs,ToString,The following statement contains a magic number: try {  	// Use the default if "g" is passed  	if (String.Compare (format' "g"' true' culture) == 0) {  		format = "#" + culture.NumberFormat.NumberGroupSeparator + "##0.00 uu";  	}  	if (culture == null)  		culture = CultureInfo.CurrentCulture;  	// Convert the format to uppercase  	format = format.ToUpper (CultureInfo.InvariantCulture);  	// Convert the localized format string to a US format  	format = format.Replace ("V"' "0");  	// Replace the "d" with "h" since degrees is the same as hours  	format = Value.ToString (format' culture);  	// Is there a units specifier?  	int StartChar = format.IndexOf ("U");  	if (StartChar > -1) {  		// Yes. Look for subsequent U characters or a period  		int EndChar = format.LastIndexOf ("U");  		// Extract the sub-string  		string SubFormat = format.Substring (StartChar' EndChar - StartChar + 1);  		// Show the unit based on the length  		switch (SubFormat.Length) {  		case 1:  			switch (_Units) {  			case DistanceUnit.Centimeters:  				format = format.Replace ("U"' "cm");  				break;  			case DistanceUnit.Feet:  				format = format.Replace ("U"' "'");  				break;  			case DistanceUnit.Inches:  				format = format.Replace ("U"' "\"");  				break;  			case DistanceUnit.Kilometers:  				format = format.Replace ("U"' "km");  				break;  			case DistanceUnit.Meters:  				format = format.Replace ("U"' "m");  				break;  			case DistanceUnit.StatuteMiles:  				format = format.Replace ("U"' "mi");  				break;  			case DistanceUnit.NauticalMiles:  				format = format.Replace ("U"' "nm");  				break;  			}  			break;  		case 2:  			switch (_Units) {  			case DistanceUnit.Centimeters:  				format = format.Replace ("UU"' "cm");  				break;  			case DistanceUnit.Feet:  				format = format.Replace ("UU"' "ft");  				break;  			case DistanceUnit.Inches:  				format = format.Replace ("UU"' "in");  				break;  			case DistanceUnit.Kilometers:  				format = format.Replace ("UU"' "km");  				break;  			case DistanceUnit.Meters:  				format = format.Replace ("UU"' "m");  				break;  			case DistanceUnit.StatuteMiles:  				format = format.Replace ("UU"' "mi");  				break;  			case DistanceUnit.NauticalMiles:  				format = format.Replace ("UU"' "nm");  				break;  			}  			break;  		case 3:  			if (Value == 1) {  				switch (_Units) {  				case DistanceUnit.Centimeters:  					format = format.Replace ("UUU"' "centimeter");  					break;  				case DistanceUnit.Feet:  					format = format.Replace ("UUU"' "foot");  					break;  				case DistanceUnit.Inches:  					format = format.Replace ("UUU"' "inch");  					break;  				case DistanceUnit.Kilometers:  					format = format.Replace ("UUU"' "kilometer");  					break;  				case DistanceUnit.Meters:  					format = format.Replace ("UUU"' "meter");  					break;  				case DistanceUnit.StatuteMiles:  					format = format.Replace ("UUU"' "mile");  					break;  				case DistanceUnit.NauticalMiles:  					format = format.Replace ("UUU"' "nautical mile");  					break;  				}  			}  			else {  				switch (_Units) {  				case DistanceUnit.Centimeters:  					format = format.Replace ("UUU"' "centimeters");  					break;  				case DistanceUnit.Feet:  					format = format.Replace ("UUU"' "feet");  					break;  				case DistanceUnit.Inches:  					format = format.Replace ("UUU"' "inches");  					break;  				case DistanceUnit.Kilometers:  					format = format.Replace ("UUU"' "kilometers");  					break;  				case DistanceUnit.Meters:  					format = format.Replace ("UUU"' "meters");  					break;  				case DistanceUnit.StatuteMiles:  					format = format.Replace ("UUU"' "miles");  					break;  				case DistanceUnit.NauticalMiles:  					format = format.Replace ("UUU"' "nautical miles");  					break;  				}  			}  			break;  		}  	}  	// Return the final value  	return format;  }  catch (Exception ex) {  	throw new FormatException (Properties.Resources.Distance_InvalidFormat' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Distance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Distance.cs,ToString,The following statement contains a magic number: try {  	// Use the default if "g" is passed  	if (String.Compare (format' "g"' true' culture) == 0) {  		format = "#" + culture.NumberFormat.NumberGroupSeparator + "##0.00 uu";  	}  	if (culture == null)  		culture = CultureInfo.CurrentCulture;  	// Convert the format to uppercase  	format = format.ToUpper (CultureInfo.InvariantCulture);  	// Convert the localized format string to a US format  	format = format.Replace ("V"' "0");  	// Replace the "d" with "h" since degrees is the same as hours  	format = Value.ToString (format' culture);  	// Is there a units specifier?  	int StartChar = format.IndexOf ("U");  	if (StartChar > -1) {  		// Yes. Look for subsequent U characters or a period  		int EndChar = format.LastIndexOf ("U");  		// Extract the sub-string  		string SubFormat = format.Substring (StartChar' EndChar - StartChar + 1);  		// Show the unit based on the length  		switch (SubFormat.Length) {  		case 1:  			switch (_Units) {  			case DistanceUnit.Centimeters:  				format = format.Replace ("U"' "cm");  				break;  			case DistanceUnit.Feet:  				format = format.Replace ("U"' "'");  				break;  			case DistanceUnit.Inches:  				format = format.Replace ("U"' "\"");  				break;  			case DistanceUnit.Kilometers:  				format = format.Replace ("U"' "km");  				break;  			case DistanceUnit.Meters:  				format = format.Replace ("U"' "m");  				break;  			case DistanceUnit.StatuteMiles:  				format = format.Replace ("U"' "mi");  				break;  			case DistanceUnit.NauticalMiles:  				format = format.Replace ("U"' "nm");  				break;  			}  			break;  		case 2:  			switch (_Units) {  			case DistanceUnit.Centimeters:  				format = format.Replace ("UU"' "cm");  				break;  			case DistanceUnit.Feet:  				format = format.Replace ("UU"' "ft");  				break;  			case DistanceUnit.Inches:  				format = format.Replace ("UU"' "in");  				break;  			case DistanceUnit.Kilometers:  				format = format.Replace ("UU"' "km");  				break;  			case DistanceUnit.Meters:  				format = format.Replace ("UU"' "m");  				break;  			case DistanceUnit.StatuteMiles:  				format = format.Replace ("UU"' "mi");  				break;  			case DistanceUnit.NauticalMiles:  				format = format.Replace ("UU"' "nm");  				break;  			}  			break;  		case 3:  			if (Value == 1) {  				switch (_Units) {  				case DistanceUnit.Centimeters:  					format = format.Replace ("UUU"' "centimeter");  					break;  				case DistanceUnit.Feet:  					format = format.Replace ("UUU"' "foot");  					break;  				case DistanceUnit.Inches:  					format = format.Replace ("UUU"' "inch");  					break;  				case DistanceUnit.Kilometers:  					format = format.Replace ("UUU"' "kilometer");  					break;  				case DistanceUnit.Meters:  					format = format.Replace ("UUU"' "meter");  					break;  				case DistanceUnit.StatuteMiles:  					format = format.Replace ("UUU"' "mile");  					break;  				case DistanceUnit.NauticalMiles:  					format = format.Replace ("UUU"' "nautical mile");  					break;  				}  			}  			else {  				switch (_Units) {  				case DistanceUnit.Centimeters:  					format = format.Replace ("UUU"' "centimeters");  					break;  				case DistanceUnit.Feet:  					format = format.Replace ("UUU"' "feet");  					break;  				case DistanceUnit.Inches:  					format = format.Replace ("UUU"' "inches");  					break;  				case DistanceUnit.Kilometers:  					format = format.Replace ("UUU"' "kilometers");  					break;  				case DistanceUnit.Meters:  					format = format.Replace ("UUU"' "meters");  					break;  				case DistanceUnit.StatuteMiles:  					format = format.Replace ("UUU"' "miles");  					break;  				case DistanceUnit.NauticalMiles:  					format = format.Replace ("UUU"' "nautical miles");  					break;  				}  			}  			break;  		}  	}  	// Return the final value  	return format;  }  catch (Exception ex) {  	throw new FormatException (Properties.Resources.Distance_InvalidFormat' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Distance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Distance.cs,ToString,The following statement contains a magic number: if (StartChar > -1) {  	// Yes. Look for subsequent U characters or a period  	int EndChar = format.LastIndexOf ("U");  	// Extract the sub-string  	string SubFormat = format.Substring (StartChar' EndChar - StartChar + 1);  	// Show the unit based on the length  	switch (SubFormat.Length) {  	case 1:  		switch (_Units) {  		case DistanceUnit.Centimeters:  			format = format.Replace ("U"' "cm");  			break;  		case DistanceUnit.Feet:  			format = format.Replace ("U"' "'");  			break;  		case DistanceUnit.Inches:  			format = format.Replace ("U"' "\"");  			break;  		case DistanceUnit.Kilometers:  			format = format.Replace ("U"' "km");  			break;  		case DistanceUnit.Meters:  			format = format.Replace ("U"' "m");  			break;  		case DistanceUnit.StatuteMiles:  			format = format.Replace ("U"' "mi");  			break;  		case DistanceUnit.NauticalMiles:  			format = format.Replace ("U"' "nm");  			break;  		}  		break;  	case 2:  		switch (_Units) {  		case DistanceUnit.Centimeters:  			format = format.Replace ("UU"' "cm");  			break;  		case DistanceUnit.Feet:  			format = format.Replace ("UU"' "ft");  			break;  		case DistanceUnit.Inches:  			format = format.Replace ("UU"' "in");  			break;  		case DistanceUnit.Kilometers:  			format = format.Replace ("UU"' "km");  			break;  		case DistanceUnit.Meters:  			format = format.Replace ("UU"' "m");  			break;  		case DistanceUnit.StatuteMiles:  			format = format.Replace ("UU"' "mi");  			break;  		case DistanceUnit.NauticalMiles:  			format = format.Replace ("UU"' "nm");  			break;  		}  		break;  	case 3:  		if (Value == 1) {  			switch (_Units) {  			case DistanceUnit.Centimeters:  				format = format.Replace ("UUU"' "centimeter");  				break;  			case DistanceUnit.Feet:  				format = format.Replace ("UUU"' "foot");  				break;  			case DistanceUnit.Inches:  				format = format.Replace ("UUU"' "inch");  				break;  			case DistanceUnit.Kilometers:  				format = format.Replace ("UUU"' "kilometer");  				break;  			case DistanceUnit.Meters:  				format = format.Replace ("UUU"' "meter");  				break;  			case DistanceUnit.StatuteMiles:  				format = format.Replace ("UUU"' "mile");  				break;  			case DistanceUnit.NauticalMiles:  				format = format.Replace ("UUU"' "nautical mile");  				break;  			}  		}  		else {  			switch (_Units) {  			case DistanceUnit.Centimeters:  				format = format.Replace ("UUU"' "centimeters");  				break;  			case DistanceUnit.Feet:  				format = format.Replace ("UUU"' "feet");  				break;  			case DistanceUnit.Inches:  				format = format.Replace ("UUU"' "inches");  				break;  			case DistanceUnit.Kilometers:  				format = format.Replace ("UUU"' "kilometers");  				break;  			case DistanceUnit.Meters:  				format = format.Replace ("UUU"' "meters");  				break;  			case DistanceUnit.StatuteMiles:  				format = format.Replace ("UUU"' "miles");  				break;  			case DistanceUnit.NauticalMiles:  				format = format.Replace ("UUU"' "nautical miles");  				break;  			}  		}  		break;  	}  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Distance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Distance.cs,ToString,The following statement contains a magic number: if (StartChar > -1) {  	// Yes. Look for subsequent U characters or a period  	int EndChar = format.LastIndexOf ("U");  	// Extract the sub-string  	string SubFormat = format.Substring (StartChar' EndChar - StartChar + 1);  	// Show the unit based on the length  	switch (SubFormat.Length) {  	case 1:  		switch (_Units) {  		case DistanceUnit.Centimeters:  			format = format.Replace ("U"' "cm");  			break;  		case DistanceUnit.Feet:  			format = format.Replace ("U"' "'");  			break;  		case DistanceUnit.Inches:  			format = format.Replace ("U"' "\"");  			break;  		case DistanceUnit.Kilometers:  			format = format.Replace ("U"' "km");  			break;  		case DistanceUnit.Meters:  			format = format.Replace ("U"' "m");  			break;  		case DistanceUnit.StatuteMiles:  			format = format.Replace ("U"' "mi");  			break;  		case DistanceUnit.NauticalMiles:  			format = format.Replace ("U"' "nm");  			break;  		}  		break;  	case 2:  		switch (_Units) {  		case DistanceUnit.Centimeters:  			format = format.Replace ("UU"' "cm");  			break;  		case DistanceUnit.Feet:  			format = format.Replace ("UU"' "ft");  			break;  		case DistanceUnit.Inches:  			format = format.Replace ("UU"' "in");  			break;  		case DistanceUnit.Kilometers:  			format = format.Replace ("UU"' "km");  			break;  		case DistanceUnit.Meters:  			format = format.Replace ("UU"' "m");  			break;  		case DistanceUnit.StatuteMiles:  			format = format.Replace ("UU"' "mi");  			break;  		case DistanceUnit.NauticalMiles:  			format = format.Replace ("UU"' "nm");  			break;  		}  		break;  	case 3:  		if (Value == 1) {  			switch (_Units) {  			case DistanceUnit.Centimeters:  				format = format.Replace ("UUU"' "centimeter");  				break;  			case DistanceUnit.Feet:  				format = format.Replace ("UUU"' "foot");  				break;  			case DistanceUnit.Inches:  				format = format.Replace ("UUU"' "inch");  				break;  			case DistanceUnit.Kilometers:  				format = format.Replace ("UUU"' "kilometer");  				break;  			case DistanceUnit.Meters:  				format = format.Replace ("UUU"' "meter");  				break;  			case DistanceUnit.StatuteMiles:  				format = format.Replace ("UUU"' "mile");  				break;  			case DistanceUnit.NauticalMiles:  				format = format.Replace ("UUU"' "nautical mile");  				break;  			}  		}  		else {  			switch (_Units) {  			case DistanceUnit.Centimeters:  				format = format.Replace ("UUU"' "centimeters");  				break;  			case DistanceUnit.Feet:  				format = format.Replace ("UUU"' "feet");  				break;  			case DistanceUnit.Inches:  				format = format.Replace ("UUU"' "inches");  				break;  			case DistanceUnit.Kilometers:  				format = format.Replace ("UUU"' "kilometers");  				break;  			case DistanceUnit.Meters:  				format = format.Replace ("UUU"' "meters");  				break;  			case DistanceUnit.StatuteMiles:  				format = format.Replace ("UUU"' "miles");  				break;  			case DistanceUnit.NauticalMiles:  				format = format.Replace ("UUU"' "nautical miles");  				break;  			}  		}  		break;  	}  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Distance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Distance.cs,ToString,The following statement contains a magic number: switch (SubFormat.Length) {  case 1:  	switch (_Units) {  	case DistanceUnit.Centimeters:  		format = format.Replace ("U"' "cm");  		break;  	case DistanceUnit.Feet:  		format = format.Replace ("U"' "'");  		break;  	case DistanceUnit.Inches:  		format = format.Replace ("U"' "\"");  		break;  	case DistanceUnit.Kilometers:  		format = format.Replace ("U"' "km");  		break;  	case DistanceUnit.Meters:  		format = format.Replace ("U"' "m");  		break;  	case DistanceUnit.StatuteMiles:  		format = format.Replace ("U"' "mi");  		break;  	case DistanceUnit.NauticalMiles:  		format = format.Replace ("U"' "nm");  		break;  	}  	break;  case 2:  	switch (_Units) {  	case DistanceUnit.Centimeters:  		format = format.Replace ("UU"' "cm");  		break;  	case DistanceUnit.Feet:  		format = format.Replace ("UU"' "ft");  		break;  	case DistanceUnit.Inches:  		format = format.Replace ("UU"' "in");  		break;  	case DistanceUnit.Kilometers:  		format = format.Replace ("UU"' "km");  		break;  	case DistanceUnit.Meters:  		format = format.Replace ("UU"' "m");  		break;  	case DistanceUnit.StatuteMiles:  		format = format.Replace ("UU"' "mi");  		break;  	case DistanceUnit.NauticalMiles:  		format = format.Replace ("UU"' "nm");  		break;  	}  	break;  case 3:  	if (Value == 1) {  		switch (_Units) {  		case DistanceUnit.Centimeters:  			format = format.Replace ("UUU"' "centimeter");  			break;  		case DistanceUnit.Feet:  			format = format.Replace ("UUU"' "foot");  			break;  		case DistanceUnit.Inches:  			format = format.Replace ("UUU"' "inch");  			break;  		case DistanceUnit.Kilometers:  			format = format.Replace ("UUU"' "kilometer");  			break;  		case DistanceUnit.Meters:  			format = format.Replace ("UUU"' "meter");  			break;  		case DistanceUnit.StatuteMiles:  			format = format.Replace ("UUU"' "mile");  			break;  		case DistanceUnit.NauticalMiles:  			format = format.Replace ("UUU"' "nautical mile");  			break;  		}  	}  	else {  		switch (_Units) {  		case DistanceUnit.Centimeters:  			format = format.Replace ("UUU"' "centimeters");  			break;  		case DistanceUnit.Feet:  			format = format.Replace ("UUU"' "feet");  			break;  		case DistanceUnit.Inches:  			format = format.Replace ("UUU"' "inches");  			break;  		case DistanceUnit.Kilometers:  			format = format.Replace ("UUU"' "kilometers");  			break;  		case DistanceUnit.Meters:  			format = format.Replace ("UUU"' "meters");  			break;  		case DistanceUnit.StatuteMiles:  			format = format.Replace ("UUU"' "miles");  			break;  		case DistanceUnit.NauticalMiles:  			format = format.Replace ("UUU"' "nautical miles");  			break;  		}  	}  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Distance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Distance.cs,ToString,The following statement contains a magic number: switch (SubFormat.Length) {  case 1:  	switch (_Units) {  	case DistanceUnit.Centimeters:  		format = format.Replace ("U"' "cm");  		break;  	case DistanceUnit.Feet:  		format = format.Replace ("U"' "'");  		break;  	case DistanceUnit.Inches:  		format = format.Replace ("U"' "\"");  		break;  	case DistanceUnit.Kilometers:  		format = format.Replace ("U"' "km");  		break;  	case DistanceUnit.Meters:  		format = format.Replace ("U"' "m");  		break;  	case DistanceUnit.StatuteMiles:  		format = format.Replace ("U"' "mi");  		break;  	case DistanceUnit.NauticalMiles:  		format = format.Replace ("U"' "nm");  		break;  	}  	break;  case 2:  	switch (_Units) {  	case DistanceUnit.Centimeters:  		format = format.Replace ("UU"' "cm");  		break;  	case DistanceUnit.Feet:  		format = format.Replace ("UU"' "ft");  		break;  	case DistanceUnit.Inches:  		format = format.Replace ("UU"' "in");  		break;  	case DistanceUnit.Kilometers:  		format = format.Replace ("UU"' "km");  		break;  	case DistanceUnit.Meters:  		format = format.Replace ("UU"' "m");  		break;  	case DistanceUnit.StatuteMiles:  		format = format.Replace ("UU"' "mi");  		break;  	case DistanceUnit.NauticalMiles:  		format = format.Replace ("UU"' "nm");  		break;  	}  	break;  case 3:  	if (Value == 1) {  		switch (_Units) {  		case DistanceUnit.Centimeters:  			format = format.Replace ("UUU"' "centimeter");  			break;  		case DistanceUnit.Feet:  			format = format.Replace ("UUU"' "foot");  			break;  		case DistanceUnit.Inches:  			format = format.Replace ("UUU"' "inch");  			break;  		case DistanceUnit.Kilometers:  			format = format.Replace ("UUU"' "kilometer");  			break;  		case DistanceUnit.Meters:  			format = format.Replace ("UUU"' "meter");  			break;  		case DistanceUnit.StatuteMiles:  			format = format.Replace ("UUU"' "mile");  			break;  		case DistanceUnit.NauticalMiles:  			format = format.Replace ("UUU"' "nautical mile");  			break;  		}  	}  	else {  		switch (_Units) {  		case DistanceUnit.Centimeters:  			format = format.Replace ("UUU"' "centimeters");  			break;  		case DistanceUnit.Feet:  			format = format.Replace ("UUU"' "feet");  			break;  		case DistanceUnit.Inches:  			format = format.Replace ("UUU"' "inches");  			break;  		case DistanceUnit.Kilometers:  			format = format.Replace ("UUU"' "kilometers");  			break;  		case DistanceUnit.Meters:  			format = format.Replace ("UUU"' "meters");  			break;  		case DistanceUnit.StatuteMiles:  			format = format.Replace ("UUU"' "miles");  			break;  		case DistanceUnit.NauticalMiles:  			format = format.Replace ("UUU"' "nautical miles");  			break;  		}  	}  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Elevation  		m_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?  		if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			m_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			m_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  			return;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  			return;  		}  		else {  			m_DecimalDegrees = double.Parse (Values [0]' culture);  			return;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Elevation  		m_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?  		if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			m_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			m_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  			return;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  			return;  		}  		else {  			m_DecimalDegrees = double.Parse (Values [0]' culture);  			return;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Elevation  		m_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?  		if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			m_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			m_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  			return;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  			return;  		}  		else {  			m_DecimalDegrees = double.Parse (Values [0]' culture);  			return;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Elevation  		m_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?  		if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			m_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			m_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  			return;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  			return;  		}  		else {  			m_DecimalDegrees = double.Parse (Values [0]' culture);  			return;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Elevation  		m_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?  		if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			m_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			m_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  			return;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  			return;  		}  		else {  			m_DecimalDegrees = double.Parse (Values [0]' culture);  			return;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Elevation  		m_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?  		if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			m_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			m_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  			return;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  			return;  		}  		else {  			m_DecimalDegrees = double.Parse (Values [0]' culture);  			return;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Elevation  		m_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?  		if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			m_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			m_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  			return;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  			return;  		}  		else {  			m_DecimalDegrees = double.Parse (Values [0]' culture);  			return;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Elevation  		m_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?  		if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			m_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			m_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  			return;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  			return;  		}  		else {  			m_DecimalDegrees = double.Parse (Values [0]' culture);  			return;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Elevation  		m_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?  		if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			m_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			m_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  			return;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  			return;  		}  		else {  			m_DecimalDegrees = double.Parse (Values [0]' culture);  			return;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Elevation  		m_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?  		if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			m_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			m_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  			return;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  			return;  		}  		else {  			m_DecimalDegrees = double.Parse (Values [0]' culture);  			return;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Elevation  		m_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?  		if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			m_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			m_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  			return;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  			return;  		}  		else {  			m_DecimalDegrees = double.Parse (Values [0]' culture);  			return;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Elevation  		m_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?  		if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			m_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			m_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  			return;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  			return;  		}  		else {  			m_DecimalDegrees = double.Parse (Values [0]' culture);  			return;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Elevation  		m_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?  		if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			m_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			m_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  			return;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  			return;  		}  		else {  			m_DecimalDegrees = double.Parse (Values [0]' culture);  			return;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Elevation  		m_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it infinity?  		if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			m_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			m_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  			return;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  			return;  		}  		else {  			m_DecimalDegrees = double.Parse (Values [0]' culture);  			return;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  		return;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  		return;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Angle_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Elevation  	m_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?  	if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		m_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		m_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  		return;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  		return;  	}  	else {  		m_DecimalDegrees = double.Parse (Values [0]' culture);  		return;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Elevation  	m_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?  	if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		m_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		m_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  		return;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  		return;  	}  	else {  		m_DecimalDegrees = double.Parse (Values [0]' culture);  		return;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Elevation  	m_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?  	if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		m_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		m_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  		return;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  		return;  	}  	else {  		m_DecimalDegrees = double.Parse (Values [0]' culture);  		return;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Elevation  	m_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?  	if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		m_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		m_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  		return;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  		return;  	}  	else {  		m_DecimalDegrees = double.Parse (Values [0]' culture);  		return;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Elevation  	m_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?  	if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		m_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		m_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  		return;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  		return;  	}  	else {  		m_DecimalDegrees = double.Parse (Values [0]' culture);  		return;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Elevation  	m_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?  	if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		m_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		m_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  		return;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  		return;  	}  	else {  		m_DecimalDegrees = double.Parse (Values [0]' culture);  		return;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Elevation  	m_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?  	if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		m_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		m_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  		return;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  		return;  	}  	else {  		m_DecimalDegrees = double.Parse (Values [0]' culture);  		return;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Elevation  	m_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?  	if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		m_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		m_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  		return;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  		return;  	}  	else {  		m_DecimalDegrees = double.Parse (Values [0]' culture);  		return;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Elevation  	m_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?  	if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		m_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		m_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  		return;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  		return;  	}  	else {  		m_DecimalDegrees = double.Parse (Values [0]' culture);  		return;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Elevation  	m_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?  	if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		m_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		m_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  		return;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  		return;  	}  	else {  		m_DecimalDegrees = double.Parse (Values [0]' culture);  		return;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Elevation  	m_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?  	if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		m_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		m_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  		return;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  		return;  	}  	else {  		m_DecimalDegrees = double.Parse (Values [0]' culture);  		return;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Elevation  	m_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?  	if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		m_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		m_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  		return;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  		return;  	}  	else {  		m_DecimalDegrees = double.Parse (Values [0]' culture);  		return;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Elevation  	m_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?  	if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		m_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		m_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  		return;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  		return;  	}  	else {  		m_DecimalDegrees = double.Parse (Values [0]' culture);  		return;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Elevation  	m_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it infinity?  	if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		m_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		m_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  		return;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  		return;  	}  	else {  		m_DecimalDegrees = double.Parse (Values [0]' culture);  		return;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture));  	return;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Angle_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	m_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	m_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	m_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	m_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	m_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	m_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	m_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	m_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	m_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	m_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	m_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	m_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	m_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	m_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	m_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	m_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	m_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	m_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	m_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	m_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	m_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	m_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	m_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	m_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	m_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	m_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	m_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	m_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	m_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	m_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	m_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	m_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	m_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	m_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	m_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	m_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  	return;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  	return;  }  else {  	m_DecimalDegrees = double.Parse (Values [0]' culture);  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Elevation,The following statement contains a magic number: m_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Normalize,The following statement contains a magic number: if (NewValue > 90)  	NewValue = 180 - NewValue;  // If the value id < -180' return -180 - X  else if (NewValue < -90.0)  	NewValue = -180.0 - NewValue;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Normalize,The following statement contains a magic number: if (NewValue > 90)  	NewValue = 180 - NewValue;  // If the value id < -180' return -180 - X  else if (NewValue < -90.0)  	NewValue = -180.0 - NewValue;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Normalize,The following statement contains a magic number: if (NewValue > 90)  	NewValue = 180 - NewValue;  // If the value id < -180' return -180 - X  else if (NewValue < -90.0)  	NewValue = -180.0 - NewValue;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Normalize,The following statement contains a magic number: if (NewValue > 90)  	NewValue = 180 - NewValue;  // If the value id < -180' return -180 - X  else if (NewValue < -90.0)  	NewValue = -180.0 - NewValue;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Normalize,The following statement contains a magic number: NewValue = 180 - NewValue;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Normalize,The following statement contains a magic number: if (NewValue < -90.0)  	NewValue = -180.0 - NewValue;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Normalize,The following statement contains a magic number: if (NewValue < -90.0)  	NewValue = -180.0 - NewValue;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Normalize,The following statement contains a magic number: NewValue = -180.0 - NewValue;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Normalize,The following statement contains a magic number: if (HemisphereFlips % 2 != 0)  	return new Elevation (-NewValue);  else  	return new Elevation (NewValue);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,RoundSeconds,The following statement contains a magic number: return RoundSeconds (15.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,RoundSeconds,The following statement contains a magic number: for (double value = 0; value < 60; value += interval) {  	// Calculate the value of the next interval  	double NextInterval = value + interval;  	// Is the seconds value greater than the next interval?  	if (NewSeconds > NextInterval)  		// Yes.  Continue on  		continue;  	// Is the seconds value closer to the current or next interval?  	if (NewSeconds < (value + NextInterval) * 0.5)  		// Closer to the current interval' so adjust it  		NewSeconds = value;  	else  		NewSeconds = NextInterval;  	// Is the new value 60?  If so' make it zero  	if (NewSeconds == 60)  		NewSeconds = 0;  	// Return the new value  	return new Elevation (Hours' Minutes' NewSeconds);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,RoundSeconds,The following statement contains a magic number: for (double value = 0; value < 60; value += interval) {  	// Calculate the value of the next interval  	double NextInterval = value + interval;  	// Is the seconds value greater than the next interval?  	if (NewSeconds > NextInterval)  		// Yes.  Continue on  		continue;  	// Is the seconds value closer to the current or next interval?  	if (NewSeconds < (value + NextInterval) * 0.5)  		// Closer to the current interval' so adjust it  		NewSeconds = value;  	else  		NewSeconds = NextInterval;  	// Is the new value 60?  If so' make it zero  	if (NewSeconds == 60)  		NewSeconds = 0;  	// Return the new value  	return new Elevation (Hours' Minutes' NewSeconds);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,RoundSeconds,The following statement contains a magic number: for (double value = 0; value < 60; value += interval) {  	// Calculate the value of the next interval  	double NextInterval = value + interval;  	// Is the seconds value greater than the next interval?  	if (NewSeconds > NextInterval)  		// Yes.  Continue on  		continue;  	// Is the seconds value closer to the current or next interval?  	if (NewSeconds < (value + NextInterval) * 0.5)  		// Closer to the current interval' so adjust it  		NewSeconds = value;  	else  		NewSeconds = NextInterval;  	// Is the new value 60?  If so' make it zero  	if (NewSeconds == 60)  		NewSeconds = 0;  	// Return the new value  	return new Elevation (Hours' Minutes' NewSeconds);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,RoundSeconds,The following statement contains a magic number: if (NewSeconds < (value + NextInterval) * 0.5)  	// Closer to the current interval' so adjust it  	NewSeconds = value;  else  	NewSeconds = NextInterval;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,RoundSeconds,The following statement contains a magic number: if (NewSeconds == 60)  	NewSeconds = 0;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Mirror,The following statement contains a magic number: return new Elevation (m_DecimalDegrees + 180.0).Normalize ();  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,ToDecimalDegrees,The following statement contains a magic number: return hours < 0 ? -(-hours + minutes / 60.0 + seconds / 3600.0) : (hours + minutes / 60.0 + seconds / 3600.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,ToDecimalDegrees,The following statement contains a magic number: return hours < 0 ? -(-hours + minutes / 60.0 + seconds / 3600.0) : (hours + minutes / 60.0 + seconds / 3600.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,ToDecimalDegrees,The following statement contains a magic number: return hours < 0 ? -(-hours + minutes / 60.0 + seconds / 3600.0) : (hours + minutes / 60.0 + seconds / 3600.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,ToDecimalDegrees,The following statement contains a magic number: return hours < 0 ? -(-hours + minutes / 60.0 + seconds / 3600.0) : (hours + minutes / 60.0 + seconds / 3600.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,ToDecimalDegrees,The following statement contains a magic number: return hours < 0 ? -(-hours + decimalMinutes / 60.0) : (hours + decimalMinutes / 60.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,ToDecimalDegrees,The following statement contains a magic number: return hours < 0 ? -(-hours + decimalMinutes / 60.0) : (hours + decimalMinutes / 60.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,Random,The following statement contains a magic number: return new Elevation (generator.NextDouble () * 360.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,ToString,The following statement contains a magic number: if (format == "e") {  	if (DecimalDegrees < 0)  		return "Below the horizon";  	else if (DecimalDegrees < 30)  		return "Near the horizon";  	else if (DecimalDegrees < 60)  		return "Halfway up from the horizon";  	else if (DecimalDegrees < 80)  		return "Almost directly overhead";  	else  		return "Directly overhead";  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,ToString,The following statement contains a magic number: if (format == "e") {  	if (DecimalDegrees < 0)  		return "Below the horizon";  	else if (DecimalDegrees < 30)  		return "Near the horizon";  	else if (DecimalDegrees < 60)  		return "Halfway up from the horizon";  	else if (DecimalDegrees < 80)  		return "Almost directly overhead";  	else  		return "Directly overhead";  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,ToString,The following statement contains a magic number: if (format == "e") {  	if (DecimalDegrees < 0)  		return "Below the horizon";  	else if (DecimalDegrees < 30)  		return "Near the horizon";  	else if (DecimalDegrees < 60)  		return "Halfway up from the horizon";  	else if (DecimalDegrees < 80)  		return "Almost directly overhead";  	else  		return "Directly overhead";  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,ToString,The following statement contains a magic number: if (DecimalDegrees < 0)  	return "Below the horizon";  else if (DecimalDegrees < 30)  	return "Near the horizon";  else if (DecimalDegrees < 60)  	return "Halfway up from the horizon";  else if (DecimalDegrees < 80)  	return "Almost directly overhead";  else  	return "Directly overhead";  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,ToString,The following statement contains a magic number: if (DecimalDegrees < 0)  	return "Below the horizon";  else if (DecimalDegrees < 30)  	return "Near the horizon";  else if (DecimalDegrees < 60)  	return "Halfway up from the horizon";  else if (DecimalDegrees < 80)  	return "Almost directly overhead";  else  	return "Directly overhead";  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,ToString,The following statement contains a magic number: if (DecimalDegrees < 0)  	return "Below the horizon";  else if (DecimalDegrees < 30)  	return "Near the horizon";  else if (DecimalDegrees < 60)  	return "Halfway up from the horizon";  else if (DecimalDegrees < 80)  	return "Almost directly overhead";  else  	return "Directly overhead";  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,ToString,The following statement contains a magic number: if (DecimalDegrees < 30)  	return "Near the horizon";  else if (DecimalDegrees < 60)  	return "Halfway up from the horizon";  else if (DecimalDegrees < 80)  	return "Almost directly overhead";  else  	return "Directly overhead";  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,ToString,The following statement contains a magic number: if (DecimalDegrees < 30)  	return "Near the horizon";  else if (DecimalDegrees < 60)  	return "Halfway up from the horizon";  else if (DecimalDegrees < 80)  	return "Almost directly overhead";  else  	return "Directly overhead";  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,ToString,The following statement contains a magic number: if (DecimalDegrees < 30)  	return "Near the horizon";  else if (DecimalDegrees < 60)  	return "Halfway up from the horizon";  else if (DecimalDegrees < 80)  	return "Almost directly overhead";  else  	return "Directly overhead";  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,ToString,The following statement contains a magic number: if (DecimalDegrees < 60)  	return "Halfway up from the horizon";  else if (DecimalDegrees < 80)  	return "Almost directly overhead";  else  	return "Directly overhead";  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,ToString,The following statement contains a magic number: if (DecimalDegrees < 60)  	return "Halfway up from the horizon";  else if (DecimalDegrees < 80)  	return "Almost directly overhead";  else  	return "Directly overhead";  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Elevation,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Elevation.cs,ToString,The following statement contains a magic number: if (DecimalDegrees < 80)  	return "Almost directly overhead";  else  	return "Directly overhead";  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Ellipsoid,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Ellipsoid.cs,Calculate,The following statement contains a magic number: _Eccentricity = Math.Sqrt ((Math.Pow (_EquatorialRadius.Value' 2) - Math.Pow (_PolarRadius.Value' 2)) / Math.Pow (_EquatorialRadius.Value' 2));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Ellipsoid,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Ellipsoid.cs,Calculate,The following statement contains a magic number: _Eccentricity = Math.Sqrt ((Math.Pow (_EquatorialRadius.Value' 2) - Math.Pow (_PolarRadius.Value' 2)) / Math.Pow (_EquatorialRadius.Value' 2));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Ellipsoid,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Ellipsoid.cs,Calculate,The following statement contains a magic number: _Eccentricity = Math.Sqrt ((Math.Pow (_EquatorialRadius.Value' 2) - Math.Pow (_PolarRadius.Value' 2)) / Math.Pow (_EquatorialRadius.Value' 2));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Ellipsoid,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Ellipsoid.cs,Calculate,The following statement contains a magic number: _EccentricitySquared = Math.Pow (Eccentricity' 2);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,GeographicRectangle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\GeographicRectangle.cs,GeographicRectangle,The following statement contains a magic number: switch (Values.Length) {  case 4:  	// Extract each item  	try {  		bool IsTopHandled = false;  		bool IsLeftHandled = false;  		bool IsRightHandled = false;  		bool IsBottomHandled = false;  		Latitude TempTop = Latitude.Empty;  		Longitude TempLeft = Longitude.Empty;  		Latitude TempBottom = Latitude.Empty;  		Longitude TempRight = Longitude.Empty;  		for (int index = 0; index < Values.Length; index++) {  			// Is this a latitude or longitude?  			string word = Values [index];  			#if Framework20  			                            if (word.IndexOf("W"' StringComparison.InvariantCultureIgnoreCase) != -1                                 || word.IndexOf("E"' StringComparison.InvariantCultureIgnoreCase) != -1) #else  			if (word.IndexOf ("W") != -1 || word.IndexOf ("E") != -1)  			#endif  			 {  				if (IsLeftHandled && IsRightHandled)  					throw new FormatException ("A GeographicRectangle object could not be converted from a string because more than two longitude values were encountered.  Only two are allowed.");  				// Longitude.  Is the left handled?  				if (IsLeftHandled) {  					// This is the right side  					TempRight = Longitude.Parse (word' culture);  					IsRightHandled = true;  				}  				else {  					// This is the left side  					TempLeft = Longitude.Parse (word' culture);  					IsLeftHandled = true;  				}  			}  			#if Framework20  			                            else if (word.IndexOf("N"' StringComparison.InvariantCultureIgnoreCase) != -1                                 || word.IndexOf("S"' StringComparison.InvariantCultureIgnoreCase) != -1) #else  			else if (word.IndexOf ("N") != -1 || word.IndexOf ("S") != -1)  			#endif  			 {  				if (IsTopHandled && IsBottomHandled)  					throw new FormatException ("A GeographicRectangle object could not be converted from a string because more than two latitude values were encountered.  Only two are allowed.");  				// Longitude.  Is the left handled?  				if (IsTopHandled) {  					// This is the bottom side  					TempBottom = Latitude.Parse (word' culture);  					IsBottomHandled = true;  				}  				else {  					// This is the top side  					TempTop = Latitude.Parse (word' culture);  					IsTopHandled = true;  				}  			}  			else {  				throw new FormatException ("A GeographicRectangle object could not be created because a number could not be categorized as a latitude or longitude.  Add a N' S' E' or W letter to resolve the issue.");  			}  		}  		// Flip any coordinates which are backwards  		m_Top = TempTop.DecimalDegrees > TempBottom.DecimalDegrees ? TempTop : TempBottom;  		m_Left = TempLeft.DecimalDegrees < TempRight.DecimalDegrees ? TempLeft : TempRight;  		m_Bottom = TempBottom.DecimalDegrees < TempTop.DecimalDegrees ? TempBottom : TempTop;  		m_Right = TempRight.DecimalDegrees > TempLeft.DecimalDegrees ? TempRight : TempLeft;  		m_Center = Position.Invalid;  		m_Center = Hypotenuse.Midpoint;  		break;  	}  	catch {  		throw;  	}  default:  	throw new FormatException ("The specified value could not be parsed into a GeographicRectangle object because four delimited values are required (Top' Left' Bottom' Right).");  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,GeographicRectangle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\GeographicRectangle.cs,ReadXml,The following statement contains a magic number: switch (reader.LocalName.ToLower (CultureInfo.InvariantCulture)) {  case "envelope":  	#region <gml:Envelope>  	Position southWest = Position.Invalid;  	Position northEast = Position.Invalid;  	// Read the element' <gml:envelope>  	reader.ReadStartElement ();  	// Read the next two elements' either "lowerCorner" or "upperCorner"  	for (int index = 0; index < 2; index++) {  		switch (reader.LocalName.ToLower (CultureInfo.InvariantCulture)) {  		case "pos":  			// There is probably one or two <gml:pos> objects  			if (southWest.IsInvalid)  				southWest = new Position (reader);  			else  				northEast = new Position (reader);  			break;  		case "lowercorner":  			// Read the start element' <lowerCorner>  			reader.ReadStartElement ();  			// Read the position  			southWest = new Position (reader);  			// Read the end element </lowerCorner>  			reader.ReadEndElement ();  			break;  		case "uppercorner":  			// Read the start element' <lowerCorner>  			reader.ReadStartElement ();  			// Read the position  			northEast = new Position (reader);  			// Read the end element </lowerCorner>  			reader.ReadEndElement ();  			break;  		default:  			// Skip this unknown element  			break;  		}  	}  	// Calculate bounds  	m_Left = southWest.Longitude < northEast.Longitude ? southWest.Longitude : northEast.Longitude;  	m_Right = northEast.Longitude > southWest.Longitude ? northEast.Longitude : southWest.Longitude;  	m_Top = northEast.Latitude > southWest.Latitude ? northEast.Latitude : southWest.Latitude;  	m_Bottom = southWest.Latitude < northEast.Latitude ? southWest.Latitude : northEast.Latitude;  	// Lastly' calculate the center  	m_Center = Position.Invalid;  	m_Center = Hypotenuse.Midpoint;  	// Read the end element' </gml:envelope>  	reader.ReadEndElement ();  	#endregion  	return;  case "boundedby":  	#region <gml:boundedBy>  	// Read the start element' <gml:boundedBy>  	reader.ReadStartElement ();  	// Make a recursive call into here to read <gml:envelope>  	GeographicRectangle value = new GeographicRectangle (reader);  	// Copy the values  	m_Left = value.Left;  	m_Top = value.Top;  	m_Right = value.Right;  	m_Bottom = value.Bottom;  	m_Center = value.Center;  	// Read the end element' </gml:boundedBy>  	reader.ReadEndElement ();  	#endregion  	return;  case "box":  	#region <gml:Box>  	// Read the start element' <gml:boundedBy>  	reader.ReadStartElement ();  	// Read the coordinates  	Position Corner1 = new Position (reader);  	Position Corner2 = new Position (reader);  	// Set the values  	if (Corner1.Latitude < Corner2.Latitude) {  		m_Bottom = Corner1.Latitude;  		m_Top = Corner2.Latitude;  	}  	else {  		m_Bottom = Corner2.Latitude;  		m_Top = Corner1.Latitude;  	}  	if (Corner1.Longitude < Corner2.Longitude) {  		m_Left = Corner1.Longitude;  		m_Right = Corner2.Longitude;  	}  	else {  		m_Left = Corner2.Longitude;  		m_Right = Corner1.Longitude;  	}  	// Lastly' calculate the center  	m_Center = Position.Invalid;  	m_Center = Hypotenuse.Midpoint;  	// Read the end element' </gml:boundedBy>  	reader.ReadEndElement ();  	#endregion  	return;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,GeographicRectangle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\GeographicRectangle.cs,ReadXml,The following statement contains a magic number: for (int index = 0; index < 2; index++) {  	switch (reader.LocalName.ToLower (CultureInfo.InvariantCulture)) {  	case "pos":  		// There is probably one or two <gml:pos> objects  		if (southWest.IsInvalid)  			southWest = new Position (reader);  		else  			northEast = new Position (reader);  		break;  	case "lowercorner":  		// Read the start element' <lowerCorner>  		reader.ReadStartElement ();  		// Read the position  		southWest = new Position (reader);  		// Read the end element </lowerCorner>  		reader.ReadEndElement ();  		break;  	case "uppercorner":  		// Read the start element' <lowerCorner>  		reader.ReadStartElement ();  		// Read the position  		northEast = new Position (reader);  		// Read the end element </lowerCorner>  		reader.ReadEndElement ();  		break;  	default:  		// Skip this unknown element  		break;  	}  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,GeographicSize,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\GeographicSize.cs,GeographicSize,The following statement contains a magic number: switch (Values.Length) {  case 2:  	m_Width = Distance.Parse (Values [0]' culture);  	m_Height = Distance.Parse (Values [1]' culture);  	break;  default:  	throw new ArgumentException ("A GeographicSize could not be created from a string because the string was not in an identifiable format.  The format should be \"(w'h)\" where \"w\" represents a width in degrees' and \"h\" represents a height in degrees.  The values should be separated by a comma (or other character depending on the current culture).");  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,Interpolator,The following statement contains a magic number: lock (SyncRoot) {  	_Count = 10;  	_InterpolationMethod = InterpolationMethod.Linear;  	Recalculate ();  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,Interpolator,The following statement contains a magic number: _Count = 10;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: switch (this.InterpolationMethod) {  case InterpolationMethod.Snap:  	return _Maximum;  case InterpolationMethod.Linear:  	// Simple linear values - no acceleration or deceleration   	return ((_Maximum - _Minimum) * index / zeroCount + _Minimum);  case InterpolationMethod.QuadraticEaseIn:  	// Quadratic (Time ^ 2) easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index + _Minimum);  case InterpolationMethod.QuadraticEaseOut:  	// Quadratic (Index^2) easing out - decelerating to zero velocity  	return (-(_Maximum - _Minimum) * (index = index / zeroCount) * (index - 2) + _Minimum);  case InterpolationMethod.QuadraticEaseInAndOut:  	// Quadratic easing in/out - acceleration until halfway' then deceleration  	if ((index /= zeroCount * 0.5) < 1) {  		return ((_Maximum - _Minimum) * 0.5 * index * index + _Minimum);  	}  	else {  		return (-(_Maximum - _Minimum) * 0.5 * ((--index) * (index - 2) - 1) + _Minimum);  	}  case InterpolationMethod.CubicEaseIn:  	// Cubic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index * index + _Minimum);  case InterpolationMethod.CubicEaseOut:  	// Cubic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * ((index = index / zeroCount - 1) * index * index + 1) + _Minimum);  case InterpolationMethod.CubicEaseInOut:  	// Cubic easing in - accelerating from zero velocity  	if ((index /= zeroCount * 0.5) < 1) {  		return ((_Maximum - _Minimum) * 0.5 * index * index * index + _Minimum);  	}  	else {  		return ((_Maximum - _Minimum) * 0.5 * ((index -= 2) * index * index + 2) + _Minimum);  	}  case InterpolationMethod.QuarticEaseIn:  	// Quartic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index * index * index + _Minimum);  case InterpolationMethod.ExponentialEaseIn:  	// Exponential (2^Index) easing in - accelerating from zero velocity  	if (index == 0) {  		return _Minimum;  	}  	else {  		return ((_Maximum - _Minimum) * Math.Pow (2' (10 * (index / zeroCount - 1))) + _Minimum);  	}  case InterpolationMethod.ExponentialEaseOut:  	// exponential (2^Index) easing out - decelerating to zero velocity  	if (index == zeroCount) {  		return (_Minimum + (_Maximum - _Minimum));  	}  	else {  		return ((_Maximum - _Minimum) * (-Math.Pow (2' -10 * index / zeroCount) + 1) + _Minimum);  	}  default:  	return 0;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: switch (this.InterpolationMethod) {  case InterpolationMethod.Snap:  	return _Maximum;  case InterpolationMethod.Linear:  	// Simple linear values - no acceleration or deceleration   	return ((_Maximum - _Minimum) * index / zeroCount + _Minimum);  case InterpolationMethod.QuadraticEaseIn:  	// Quadratic (Time ^ 2) easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index + _Minimum);  case InterpolationMethod.QuadraticEaseOut:  	// Quadratic (Index^2) easing out - decelerating to zero velocity  	return (-(_Maximum - _Minimum) * (index = index / zeroCount) * (index - 2) + _Minimum);  case InterpolationMethod.QuadraticEaseInAndOut:  	// Quadratic easing in/out - acceleration until halfway' then deceleration  	if ((index /= zeroCount * 0.5) < 1) {  		return ((_Maximum - _Minimum) * 0.5 * index * index + _Minimum);  	}  	else {  		return (-(_Maximum - _Minimum) * 0.5 * ((--index) * (index - 2) - 1) + _Minimum);  	}  case InterpolationMethod.CubicEaseIn:  	// Cubic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index * index + _Minimum);  case InterpolationMethod.CubicEaseOut:  	// Cubic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * ((index = index / zeroCount - 1) * index * index + 1) + _Minimum);  case InterpolationMethod.CubicEaseInOut:  	// Cubic easing in - accelerating from zero velocity  	if ((index /= zeroCount * 0.5) < 1) {  		return ((_Maximum - _Minimum) * 0.5 * index * index * index + _Minimum);  	}  	else {  		return ((_Maximum - _Minimum) * 0.5 * ((index -= 2) * index * index + 2) + _Minimum);  	}  case InterpolationMethod.QuarticEaseIn:  	// Quartic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index * index * index + _Minimum);  case InterpolationMethod.ExponentialEaseIn:  	// Exponential (2^Index) easing in - accelerating from zero velocity  	if (index == 0) {  		return _Minimum;  	}  	else {  		return ((_Maximum - _Minimum) * Math.Pow (2' (10 * (index / zeroCount - 1))) + _Minimum);  	}  case InterpolationMethod.ExponentialEaseOut:  	// exponential (2^Index) easing out - decelerating to zero velocity  	if (index == zeroCount) {  		return (_Minimum + (_Maximum - _Minimum));  	}  	else {  		return ((_Maximum - _Minimum) * (-Math.Pow (2' -10 * index / zeroCount) + 1) + _Minimum);  	}  default:  	return 0;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: switch (this.InterpolationMethod) {  case InterpolationMethod.Snap:  	return _Maximum;  case InterpolationMethod.Linear:  	// Simple linear values - no acceleration or deceleration   	return ((_Maximum - _Minimum) * index / zeroCount + _Minimum);  case InterpolationMethod.QuadraticEaseIn:  	// Quadratic (Time ^ 2) easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index + _Minimum);  case InterpolationMethod.QuadraticEaseOut:  	// Quadratic (Index^2) easing out - decelerating to zero velocity  	return (-(_Maximum - _Minimum) * (index = index / zeroCount) * (index - 2) + _Minimum);  case InterpolationMethod.QuadraticEaseInAndOut:  	// Quadratic easing in/out - acceleration until halfway' then deceleration  	if ((index /= zeroCount * 0.5) < 1) {  		return ((_Maximum - _Minimum) * 0.5 * index * index + _Minimum);  	}  	else {  		return (-(_Maximum - _Minimum) * 0.5 * ((--index) * (index - 2) - 1) + _Minimum);  	}  case InterpolationMethod.CubicEaseIn:  	// Cubic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index * index + _Minimum);  case InterpolationMethod.CubicEaseOut:  	// Cubic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * ((index = index / zeroCount - 1) * index * index + 1) + _Minimum);  case InterpolationMethod.CubicEaseInOut:  	// Cubic easing in - accelerating from zero velocity  	if ((index /= zeroCount * 0.5) < 1) {  		return ((_Maximum - _Minimum) * 0.5 * index * index * index + _Minimum);  	}  	else {  		return ((_Maximum - _Minimum) * 0.5 * ((index -= 2) * index * index + 2) + _Minimum);  	}  case InterpolationMethod.QuarticEaseIn:  	// Quartic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index * index * index + _Minimum);  case InterpolationMethod.ExponentialEaseIn:  	// Exponential (2^Index) easing in - accelerating from zero velocity  	if (index == 0) {  		return _Minimum;  	}  	else {  		return ((_Maximum - _Minimum) * Math.Pow (2' (10 * (index / zeroCount - 1))) + _Minimum);  	}  case InterpolationMethod.ExponentialEaseOut:  	// exponential (2^Index) easing out - decelerating to zero velocity  	if (index == zeroCount) {  		return (_Minimum + (_Maximum - _Minimum));  	}  	else {  		return ((_Maximum - _Minimum) * (-Math.Pow (2' -10 * index / zeroCount) + 1) + _Minimum);  	}  default:  	return 0;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: switch (this.InterpolationMethod) {  case InterpolationMethod.Snap:  	return _Maximum;  case InterpolationMethod.Linear:  	// Simple linear values - no acceleration or deceleration   	return ((_Maximum - _Minimum) * index / zeroCount + _Minimum);  case InterpolationMethod.QuadraticEaseIn:  	// Quadratic (Time ^ 2) easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index + _Minimum);  case InterpolationMethod.QuadraticEaseOut:  	// Quadratic (Index^2) easing out - decelerating to zero velocity  	return (-(_Maximum - _Minimum) * (index = index / zeroCount) * (index - 2) + _Minimum);  case InterpolationMethod.QuadraticEaseInAndOut:  	// Quadratic easing in/out - acceleration until halfway' then deceleration  	if ((index /= zeroCount * 0.5) < 1) {  		return ((_Maximum - _Minimum) * 0.5 * index * index + _Minimum);  	}  	else {  		return (-(_Maximum - _Minimum) * 0.5 * ((--index) * (index - 2) - 1) + _Minimum);  	}  case InterpolationMethod.CubicEaseIn:  	// Cubic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index * index + _Minimum);  case InterpolationMethod.CubicEaseOut:  	// Cubic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * ((index = index / zeroCount - 1) * index * index + 1) + _Minimum);  case InterpolationMethod.CubicEaseInOut:  	// Cubic easing in - accelerating from zero velocity  	if ((index /= zeroCount * 0.5) < 1) {  		return ((_Maximum - _Minimum) * 0.5 * index * index * index + _Minimum);  	}  	else {  		return ((_Maximum - _Minimum) * 0.5 * ((index -= 2) * index * index + 2) + _Minimum);  	}  case InterpolationMethod.QuarticEaseIn:  	// Quartic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index * index * index + _Minimum);  case InterpolationMethod.ExponentialEaseIn:  	// Exponential (2^Index) easing in - accelerating from zero velocity  	if (index == 0) {  		return _Minimum;  	}  	else {  		return ((_Maximum - _Minimum) * Math.Pow (2' (10 * (index / zeroCount - 1))) + _Minimum);  	}  case InterpolationMethod.ExponentialEaseOut:  	// exponential (2^Index) easing out - decelerating to zero velocity  	if (index == zeroCount) {  		return (_Minimum + (_Maximum - _Minimum));  	}  	else {  		return ((_Maximum - _Minimum) * (-Math.Pow (2' -10 * index / zeroCount) + 1) + _Minimum);  	}  default:  	return 0;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: switch (this.InterpolationMethod) {  case InterpolationMethod.Snap:  	return _Maximum;  case InterpolationMethod.Linear:  	// Simple linear values - no acceleration or deceleration   	return ((_Maximum - _Minimum) * index / zeroCount + _Minimum);  case InterpolationMethod.QuadraticEaseIn:  	// Quadratic (Time ^ 2) easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index + _Minimum);  case InterpolationMethod.QuadraticEaseOut:  	// Quadratic (Index^2) easing out - decelerating to zero velocity  	return (-(_Maximum - _Minimum) * (index = index / zeroCount) * (index - 2) + _Minimum);  case InterpolationMethod.QuadraticEaseInAndOut:  	// Quadratic easing in/out - acceleration until halfway' then deceleration  	if ((index /= zeroCount * 0.5) < 1) {  		return ((_Maximum - _Minimum) * 0.5 * index * index + _Minimum);  	}  	else {  		return (-(_Maximum - _Minimum) * 0.5 * ((--index) * (index - 2) - 1) + _Minimum);  	}  case InterpolationMethod.CubicEaseIn:  	// Cubic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index * index + _Minimum);  case InterpolationMethod.CubicEaseOut:  	// Cubic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * ((index = index / zeroCount - 1) * index * index + 1) + _Minimum);  case InterpolationMethod.CubicEaseInOut:  	// Cubic easing in - accelerating from zero velocity  	if ((index /= zeroCount * 0.5) < 1) {  		return ((_Maximum - _Minimum) * 0.5 * index * index * index + _Minimum);  	}  	else {  		return ((_Maximum - _Minimum) * 0.5 * ((index -= 2) * index * index + 2) + _Minimum);  	}  case InterpolationMethod.QuarticEaseIn:  	// Quartic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index * index * index + _Minimum);  case InterpolationMethod.ExponentialEaseIn:  	// Exponential (2^Index) easing in - accelerating from zero velocity  	if (index == 0) {  		return _Minimum;  	}  	else {  		return ((_Maximum - _Minimum) * Math.Pow (2' (10 * (index / zeroCount - 1))) + _Minimum);  	}  case InterpolationMethod.ExponentialEaseOut:  	// exponential (2^Index) easing out - decelerating to zero velocity  	if (index == zeroCount) {  		return (_Minimum + (_Maximum - _Minimum));  	}  	else {  		return ((_Maximum - _Minimum) * (-Math.Pow (2' -10 * index / zeroCount) + 1) + _Minimum);  	}  default:  	return 0;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: switch (this.InterpolationMethod) {  case InterpolationMethod.Snap:  	return _Maximum;  case InterpolationMethod.Linear:  	// Simple linear values - no acceleration or deceleration   	return ((_Maximum - _Minimum) * index / zeroCount + _Minimum);  case InterpolationMethod.QuadraticEaseIn:  	// Quadratic (Time ^ 2) easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index + _Minimum);  case InterpolationMethod.QuadraticEaseOut:  	// Quadratic (Index^2) easing out - decelerating to zero velocity  	return (-(_Maximum - _Minimum) * (index = index / zeroCount) * (index - 2) + _Minimum);  case InterpolationMethod.QuadraticEaseInAndOut:  	// Quadratic easing in/out - acceleration until halfway' then deceleration  	if ((index /= zeroCount * 0.5) < 1) {  		return ((_Maximum - _Minimum) * 0.5 * index * index + _Minimum);  	}  	else {  		return (-(_Maximum - _Minimum) * 0.5 * ((--index) * (index - 2) - 1) + _Minimum);  	}  case InterpolationMethod.CubicEaseIn:  	// Cubic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index * index + _Minimum);  case InterpolationMethod.CubicEaseOut:  	// Cubic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * ((index = index / zeroCount - 1) * index * index + 1) + _Minimum);  case InterpolationMethod.CubicEaseInOut:  	// Cubic easing in - accelerating from zero velocity  	if ((index /= zeroCount * 0.5) < 1) {  		return ((_Maximum - _Minimum) * 0.5 * index * index * index + _Minimum);  	}  	else {  		return ((_Maximum - _Minimum) * 0.5 * ((index -= 2) * index * index + 2) + _Minimum);  	}  case InterpolationMethod.QuarticEaseIn:  	// Quartic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index * index * index + _Minimum);  case InterpolationMethod.ExponentialEaseIn:  	// Exponential (2^Index) easing in - accelerating from zero velocity  	if (index == 0) {  		return _Minimum;  	}  	else {  		return ((_Maximum - _Minimum) * Math.Pow (2' (10 * (index / zeroCount - 1))) + _Minimum);  	}  case InterpolationMethod.ExponentialEaseOut:  	// exponential (2^Index) easing out - decelerating to zero velocity  	if (index == zeroCount) {  		return (_Minimum + (_Maximum - _Minimum));  	}  	else {  		return ((_Maximum - _Minimum) * (-Math.Pow (2' -10 * index / zeroCount) + 1) + _Minimum);  	}  default:  	return 0;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: switch (this.InterpolationMethod) {  case InterpolationMethod.Snap:  	return _Maximum;  case InterpolationMethod.Linear:  	// Simple linear values - no acceleration or deceleration   	return ((_Maximum - _Minimum) * index / zeroCount + _Minimum);  case InterpolationMethod.QuadraticEaseIn:  	// Quadratic (Time ^ 2) easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index + _Minimum);  case InterpolationMethod.QuadraticEaseOut:  	// Quadratic (Index^2) easing out - decelerating to zero velocity  	return (-(_Maximum - _Minimum) * (index = index / zeroCount) * (index - 2) + _Minimum);  case InterpolationMethod.QuadraticEaseInAndOut:  	// Quadratic easing in/out - acceleration until halfway' then deceleration  	if ((index /= zeroCount * 0.5) < 1) {  		return ((_Maximum - _Minimum) * 0.5 * index * index + _Minimum);  	}  	else {  		return (-(_Maximum - _Minimum) * 0.5 * ((--index) * (index - 2) - 1) + _Minimum);  	}  case InterpolationMethod.CubicEaseIn:  	// Cubic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index * index + _Minimum);  case InterpolationMethod.CubicEaseOut:  	// Cubic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * ((index = index / zeroCount - 1) * index * index + 1) + _Minimum);  case InterpolationMethod.CubicEaseInOut:  	// Cubic easing in - accelerating from zero velocity  	if ((index /= zeroCount * 0.5) < 1) {  		return ((_Maximum - _Minimum) * 0.5 * index * index * index + _Minimum);  	}  	else {  		return ((_Maximum - _Minimum) * 0.5 * ((index -= 2) * index * index + 2) + _Minimum);  	}  case InterpolationMethod.QuarticEaseIn:  	// Quartic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index * index * index + _Minimum);  case InterpolationMethod.ExponentialEaseIn:  	// Exponential (2^Index) easing in - accelerating from zero velocity  	if (index == 0) {  		return _Minimum;  	}  	else {  		return ((_Maximum - _Minimum) * Math.Pow (2' (10 * (index / zeroCount - 1))) + _Minimum);  	}  case InterpolationMethod.ExponentialEaseOut:  	// exponential (2^Index) easing out - decelerating to zero velocity  	if (index == zeroCount) {  		return (_Minimum + (_Maximum - _Minimum));  	}  	else {  		return ((_Maximum - _Minimum) * (-Math.Pow (2' -10 * index / zeroCount) + 1) + _Minimum);  	}  default:  	return 0;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: switch (this.InterpolationMethod) {  case InterpolationMethod.Snap:  	return _Maximum;  case InterpolationMethod.Linear:  	// Simple linear values - no acceleration or deceleration   	return ((_Maximum - _Minimum) * index / zeroCount + _Minimum);  case InterpolationMethod.QuadraticEaseIn:  	// Quadratic (Time ^ 2) easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index + _Minimum);  case InterpolationMethod.QuadraticEaseOut:  	// Quadratic (Index^2) easing out - decelerating to zero velocity  	return (-(_Maximum - _Minimum) * (index = index / zeroCount) * (index - 2) + _Minimum);  case InterpolationMethod.QuadraticEaseInAndOut:  	// Quadratic easing in/out - acceleration until halfway' then deceleration  	if ((index /= zeroCount * 0.5) < 1) {  		return ((_Maximum - _Minimum) * 0.5 * index * index + _Minimum);  	}  	else {  		return (-(_Maximum - _Minimum) * 0.5 * ((--index) * (index - 2) - 1) + _Minimum);  	}  case InterpolationMethod.CubicEaseIn:  	// Cubic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index * index + _Minimum);  case InterpolationMethod.CubicEaseOut:  	// Cubic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * ((index = index / zeroCount - 1) * index * index + 1) + _Minimum);  case InterpolationMethod.CubicEaseInOut:  	// Cubic easing in - accelerating from zero velocity  	if ((index /= zeroCount * 0.5) < 1) {  		return ((_Maximum - _Minimum) * 0.5 * index * index * index + _Minimum);  	}  	else {  		return ((_Maximum - _Minimum) * 0.5 * ((index -= 2) * index * index + 2) + _Minimum);  	}  case InterpolationMethod.QuarticEaseIn:  	// Quartic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index * index * index + _Minimum);  case InterpolationMethod.ExponentialEaseIn:  	// Exponential (2^Index) easing in - accelerating from zero velocity  	if (index == 0) {  		return _Minimum;  	}  	else {  		return ((_Maximum - _Minimum) * Math.Pow (2' (10 * (index / zeroCount - 1))) + _Minimum);  	}  case InterpolationMethod.ExponentialEaseOut:  	// exponential (2^Index) easing out - decelerating to zero velocity  	if (index == zeroCount) {  		return (_Minimum + (_Maximum - _Minimum));  	}  	else {  		return ((_Maximum - _Minimum) * (-Math.Pow (2' -10 * index / zeroCount) + 1) + _Minimum);  	}  default:  	return 0;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: switch (this.InterpolationMethod) {  case InterpolationMethod.Snap:  	return _Maximum;  case InterpolationMethod.Linear:  	// Simple linear values - no acceleration or deceleration   	return ((_Maximum - _Minimum) * index / zeroCount + _Minimum);  case InterpolationMethod.QuadraticEaseIn:  	// Quadratic (Time ^ 2) easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index + _Minimum);  case InterpolationMethod.QuadraticEaseOut:  	// Quadratic (Index^2) easing out - decelerating to zero velocity  	return (-(_Maximum - _Minimum) * (index = index / zeroCount) * (index - 2) + _Minimum);  case InterpolationMethod.QuadraticEaseInAndOut:  	// Quadratic easing in/out - acceleration until halfway' then deceleration  	if ((index /= zeroCount * 0.5) < 1) {  		return ((_Maximum - _Minimum) * 0.5 * index * index + _Minimum);  	}  	else {  		return (-(_Maximum - _Minimum) * 0.5 * ((--index) * (index - 2) - 1) + _Minimum);  	}  case InterpolationMethod.CubicEaseIn:  	// Cubic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index * index + _Minimum);  case InterpolationMethod.CubicEaseOut:  	// Cubic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * ((index = index / zeroCount - 1) * index * index + 1) + _Minimum);  case InterpolationMethod.CubicEaseInOut:  	// Cubic easing in - accelerating from zero velocity  	if ((index /= zeroCount * 0.5) < 1) {  		return ((_Maximum - _Minimum) * 0.5 * index * index * index + _Minimum);  	}  	else {  		return ((_Maximum - _Minimum) * 0.5 * ((index -= 2) * index * index + 2) + _Minimum);  	}  case InterpolationMethod.QuarticEaseIn:  	// Quartic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index * index * index + _Minimum);  case InterpolationMethod.ExponentialEaseIn:  	// Exponential (2^Index) easing in - accelerating from zero velocity  	if (index == 0) {  		return _Minimum;  	}  	else {  		return ((_Maximum - _Minimum) * Math.Pow (2' (10 * (index / zeroCount - 1))) + _Minimum);  	}  case InterpolationMethod.ExponentialEaseOut:  	// exponential (2^Index) easing out - decelerating to zero velocity  	if (index == zeroCount) {  		return (_Minimum + (_Maximum - _Minimum));  	}  	else {  		return ((_Maximum - _Minimum) * (-Math.Pow (2' -10 * index / zeroCount) + 1) + _Minimum);  	}  default:  	return 0;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: switch (this.InterpolationMethod) {  case InterpolationMethod.Snap:  	return _Maximum;  case InterpolationMethod.Linear:  	// Simple linear values - no acceleration or deceleration   	return ((_Maximum - _Minimum) * index / zeroCount + _Minimum);  case InterpolationMethod.QuadraticEaseIn:  	// Quadratic (Time ^ 2) easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index + _Minimum);  case InterpolationMethod.QuadraticEaseOut:  	// Quadratic (Index^2) easing out - decelerating to zero velocity  	return (-(_Maximum - _Minimum) * (index = index / zeroCount) * (index - 2) + _Minimum);  case InterpolationMethod.QuadraticEaseInAndOut:  	// Quadratic easing in/out - acceleration until halfway' then deceleration  	if ((index /= zeroCount * 0.5) < 1) {  		return ((_Maximum - _Minimum) * 0.5 * index * index + _Minimum);  	}  	else {  		return (-(_Maximum - _Minimum) * 0.5 * ((--index) * (index - 2) - 1) + _Minimum);  	}  case InterpolationMethod.CubicEaseIn:  	// Cubic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index * index + _Minimum);  case InterpolationMethod.CubicEaseOut:  	// Cubic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * ((index = index / zeroCount - 1) * index * index + 1) + _Minimum);  case InterpolationMethod.CubicEaseInOut:  	// Cubic easing in - accelerating from zero velocity  	if ((index /= zeroCount * 0.5) < 1) {  		return ((_Maximum - _Minimum) * 0.5 * index * index * index + _Minimum);  	}  	else {  		return ((_Maximum - _Minimum) * 0.5 * ((index -= 2) * index * index + 2) + _Minimum);  	}  case InterpolationMethod.QuarticEaseIn:  	// Quartic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index * index * index + _Minimum);  case InterpolationMethod.ExponentialEaseIn:  	// Exponential (2^Index) easing in - accelerating from zero velocity  	if (index == 0) {  		return _Minimum;  	}  	else {  		return ((_Maximum - _Minimum) * Math.Pow (2' (10 * (index / zeroCount - 1))) + _Minimum);  	}  case InterpolationMethod.ExponentialEaseOut:  	// exponential (2^Index) easing out - decelerating to zero velocity  	if (index == zeroCount) {  		return (_Minimum + (_Maximum - _Minimum));  	}  	else {  		return ((_Maximum - _Minimum) * (-Math.Pow (2' -10 * index / zeroCount) + 1) + _Minimum);  	}  default:  	return 0;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: switch (this.InterpolationMethod) {  case InterpolationMethod.Snap:  	return _Maximum;  case InterpolationMethod.Linear:  	// Simple linear values - no acceleration or deceleration   	return ((_Maximum - _Minimum) * index / zeroCount + _Minimum);  case InterpolationMethod.QuadraticEaseIn:  	// Quadratic (Time ^ 2) easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index + _Minimum);  case InterpolationMethod.QuadraticEaseOut:  	// Quadratic (Index^2) easing out - decelerating to zero velocity  	return (-(_Maximum - _Minimum) * (index = index / zeroCount) * (index - 2) + _Minimum);  case InterpolationMethod.QuadraticEaseInAndOut:  	// Quadratic easing in/out - acceleration until halfway' then deceleration  	if ((index /= zeroCount * 0.5) < 1) {  		return ((_Maximum - _Minimum) * 0.5 * index * index + _Minimum);  	}  	else {  		return (-(_Maximum - _Minimum) * 0.5 * ((--index) * (index - 2) - 1) + _Minimum);  	}  case InterpolationMethod.CubicEaseIn:  	// Cubic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index * index + _Minimum);  case InterpolationMethod.CubicEaseOut:  	// Cubic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * ((index = index / zeroCount - 1) * index * index + 1) + _Minimum);  case InterpolationMethod.CubicEaseInOut:  	// Cubic easing in - accelerating from zero velocity  	if ((index /= zeroCount * 0.5) < 1) {  		return ((_Maximum - _Minimum) * 0.5 * index * index * index + _Minimum);  	}  	else {  		return ((_Maximum - _Minimum) * 0.5 * ((index -= 2) * index * index + 2) + _Minimum);  	}  case InterpolationMethod.QuarticEaseIn:  	// Quartic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index * index * index + _Minimum);  case InterpolationMethod.ExponentialEaseIn:  	// Exponential (2^Index) easing in - accelerating from zero velocity  	if (index == 0) {  		return _Minimum;  	}  	else {  		return ((_Maximum - _Minimum) * Math.Pow (2' (10 * (index / zeroCount - 1))) + _Minimum);  	}  case InterpolationMethod.ExponentialEaseOut:  	// exponential (2^Index) easing out - decelerating to zero velocity  	if (index == zeroCount) {  		return (_Minimum + (_Maximum - _Minimum));  	}  	else {  		return ((_Maximum - _Minimum) * (-Math.Pow (2' -10 * index / zeroCount) + 1) + _Minimum);  	}  default:  	return 0;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: switch (this.InterpolationMethod) {  case InterpolationMethod.Snap:  	return _Maximum;  case InterpolationMethod.Linear:  	// Simple linear values - no acceleration or deceleration   	return ((_Maximum - _Minimum) * index / zeroCount + _Minimum);  case InterpolationMethod.QuadraticEaseIn:  	// Quadratic (Time ^ 2) easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index + _Minimum);  case InterpolationMethod.QuadraticEaseOut:  	// Quadratic (Index^2) easing out - decelerating to zero velocity  	return (-(_Maximum - _Minimum) * (index = index / zeroCount) * (index - 2) + _Minimum);  case InterpolationMethod.QuadraticEaseInAndOut:  	// Quadratic easing in/out - acceleration until halfway' then deceleration  	if ((index /= zeroCount * 0.5) < 1) {  		return ((_Maximum - _Minimum) * 0.5 * index * index + _Minimum);  	}  	else {  		return (-(_Maximum - _Minimum) * 0.5 * ((--index) * (index - 2) - 1) + _Minimum);  	}  case InterpolationMethod.CubicEaseIn:  	// Cubic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index * index + _Minimum);  case InterpolationMethod.CubicEaseOut:  	// Cubic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * ((index = index / zeroCount - 1) * index * index + 1) + _Minimum);  case InterpolationMethod.CubicEaseInOut:  	// Cubic easing in - accelerating from zero velocity  	if ((index /= zeroCount * 0.5) < 1) {  		return ((_Maximum - _Minimum) * 0.5 * index * index * index + _Minimum);  	}  	else {  		return ((_Maximum - _Minimum) * 0.5 * ((index -= 2) * index * index + 2) + _Minimum);  	}  case InterpolationMethod.QuarticEaseIn:  	// Quartic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index * index * index + _Minimum);  case InterpolationMethod.ExponentialEaseIn:  	// Exponential (2^Index) easing in - accelerating from zero velocity  	if (index == 0) {  		return _Minimum;  	}  	else {  		return ((_Maximum - _Minimum) * Math.Pow (2' (10 * (index / zeroCount - 1))) + _Minimum);  	}  case InterpolationMethod.ExponentialEaseOut:  	// exponential (2^Index) easing out - decelerating to zero velocity  	if (index == zeroCount) {  		return (_Minimum + (_Maximum - _Minimum));  	}  	else {  		return ((_Maximum - _Minimum) * (-Math.Pow (2' -10 * index / zeroCount) + 1) + _Minimum);  	}  default:  	return 0;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: switch (this.InterpolationMethod) {  case InterpolationMethod.Snap:  	return _Maximum;  case InterpolationMethod.Linear:  	// Simple linear values - no acceleration or deceleration   	return ((_Maximum - _Minimum) * index / zeroCount + _Minimum);  case InterpolationMethod.QuadraticEaseIn:  	// Quadratic (Time ^ 2) easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index + _Minimum);  case InterpolationMethod.QuadraticEaseOut:  	// Quadratic (Index^2) easing out - decelerating to zero velocity  	return (-(_Maximum - _Minimum) * (index = index / zeroCount) * (index - 2) + _Minimum);  case InterpolationMethod.QuadraticEaseInAndOut:  	// Quadratic easing in/out - acceleration until halfway' then deceleration  	if ((index /= zeroCount * 0.5) < 1) {  		return ((_Maximum - _Minimum) * 0.5 * index * index + _Minimum);  	}  	else {  		return (-(_Maximum - _Minimum) * 0.5 * ((--index) * (index - 2) - 1) + _Minimum);  	}  case InterpolationMethod.CubicEaseIn:  	// Cubic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index * index + _Minimum);  case InterpolationMethod.CubicEaseOut:  	// Cubic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * ((index = index / zeroCount - 1) * index * index + 1) + _Minimum);  case InterpolationMethod.CubicEaseInOut:  	// Cubic easing in - accelerating from zero velocity  	if ((index /= zeroCount * 0.5) < 1) {  		return ((_Maximum - _Minimum) * 0.5 * index * index * index + _Minimum);  	}  	else {  		return ((_Maximum - _Minimum) * 0.5 * ((index -= 2) * index * index + 2) + _Minimum);  	}  case InterpolationMethod.QuarticEaseIn:  	// Quartic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index * index * index + _Minimum);  case InterpolationMethod.ExponentialEaseIn:  	// Exponential (2^Index) easing in - accelerating from zero velocity  	if (index == 0) {  		return _Minimum;  	}  	else {  		return ((_Maximum - _Minimum) * Math.Pow (2' (10 * (index / zeroCount - 1))) + _Minimum);  	}  case InterpolationMethod.ExponentialEaseOut:  	// exponential (2^Index) easing out - decelerating to zero velocity  	if (index == zeroCount) {  		return (_Minimum + (_Maximum - _Minimum));  	}  	else {  		return ((_Maximum - _Minimum) * (-Math.Pow (2' -10 * index / zeroCount) + 1) + _Minimum);  	}  default:  	return 0;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: switch (this.InterpolationMethod) {  case InterpolationMethod.Snap:  	return _Maximum;  case InterpolationMethod.Linear:  	// Simple linear values - no acceleration or deceleration   	return ((_Maximum - _Minimum) * index / zeroCount + _Minimum);  case InterpolationMethod.QuadraticEaseIn:  	// Quadratic (Time ^ 2) easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index + _Minimum);  case InterpolationMethod.QuadraticEaseOut:  	// Quadratic (Index^2) easing out - decelerating to zero velocity  	return (-(_Maximum - _Minimum) * (index = index / zeroCount) * (index - 2) + _Minimum);  case InterpolationMethod.QuadraticEaseInAndOut:  	// Quadratic easing in/out - acceleration until halfway' then deceleration  	if ((index /= zeroCount * 0.5) < 1) {  		return ((_Maximum - _Minimum) * 0.5 * index * index + _Minimum);  	}  	else {  		return (-(_Maximum - _Minimum) * 0.5 * ((--index) * (index - 2) - 1) + _Minimum);  	}  case InterpolationMethod.CubicEaseIn:  	// Cubic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index * index + _Minimum);  case InterpolationMethod.CubicEaseOut:  	// Cubic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * ((index = index / zeroCount - 1) * index * index + 1) + _Minimum);  case InterpolationMethod.CubicEaseInOut:  	// Cubic easing in - accelerating from zero velocity  	if ((index /= zeroCount * 0.5) < 1) {  		return ((_Maximum - _Minimum) * 0.5 * index * index * index + _Minimum);  	}  	else {  		return ((_Maximum - _Minimum) * 0.5 * ((index -= 2) * index * index + 2) + _Minimum);  	}  case InterpolationMethod.QuarticEaseIn:  	// Quartic easing in - accelerating from zero velocity  	return ((_Maximum - _Minimum) * (index /= zeroCount) * index * index * index + _Minimum);  case InterpolationMethod.ExponentialEaseIn:  	// Exponential (2^Index) easing in - accelerating from zero velocity  	if (index == 0) {  		return _Minimum;  	}  	else {  		return ((_Maximum - _Minimum) * Math.Pow (2' (10 * (index / zeroCount - 1))) + _Minimum);  	}  case InterpolationMethod.ExponentialEaseOut:  	// exponential (2^Index) easing out - decelerating to zero velocity  	if (index == zeroCount) {  		return (_Minimum + (_Maximum - _Minimum));  	}  	else {  		return ((_Maximum - _Minimum) * (-Math.Pow (2' -10 * index / zeroCount) + 1) + _Minimum);  	}  default:  	return 0;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: return (-(_Maximum - _Minimum) * (index = index / zeroCount) * (index - 2) + _Minimum);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: if ((index /= zeroCount * 0.5) < 1) {  	return ((_Maximum - _Minimum) * 0.5 * index * index + _Minimum);  }  else {  	return (-(_Maximum - _Minimum) * 0.5 * ((--index) * (index - 2) - 1) + _Minimum);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: if ((index /= zeroCount * 0.5) < 1) {  	return ((_Maximum - _Minimum) * 0.5 * index * index + _Minimum);  }  else {  	return (-(_Maximum - _Minimum) * 0.5 * ((--index) * (index - 2) - 1) + _Minimum);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: if ((index /= zeroCount * 0.5) < 1) {  	return ((_Maximum - _Minimum) * 0.5 * index * index + _Minimum);  }  else {  	return (-(_Maximum - _Minimum) * 0.5 * ((--index) * (index - 2) - 1) + _Minimum);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: if ((index /= zeroCount * 0.5) < 1) {  	return ((_Maximum - _Minimum) * 0.5 * index * index + _Minimum);  }  else {  	return (-(_Maximum - _Minimum) * 0.5 * ((--index) * (index - 2) - 1) + _Minimum);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: return ((_Maximum - _Minimum) * 0.5 * index * index + _Minimum);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: return (-(_Maximum - _Minimum) * 0.5 * ((--index) * (index - 2) - 1) + _Minimum);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: return (-(_Maximum - _Minimum) * 0.5 * ((--index) * (index - 2) - 1) + _Minimum);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: if ((index /= zeroCount * 0.5) < 1) {  	return ((_Maximum - _Minimum) * 0.5 * index * index * index + _Minimum);  }  else {  	return ((_Maximum - _Minimum) * 0.5 * ((index -= 2) * index * index + 2) + _Minimum);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: if ((index /= zeroCount * 0.5) < 1) {  	return ((_Maximum - _Minimum) * 0.5 * index * index * index + _Minimum);  }  else {  	return ((_Maximum - _Minimum) * 0.5 * ((index -= 2) * index * index + 2) + _Minimum);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: if ((index /= zeroCount * 0.5) < 1) {  	return ((_Maximum - _Minimum) * 0.5 * index * index * index + _Minimum);  }  else {  	return ((_Maximum - _Minimum) * 0.5 * ((index -= 2) * index * index + 2) + _Minimum);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: if ((index /= zeroCount * 0.5) < 1) {  	return ((_Maximum - _Minimum) * 0.5 * index * index * index + _Minimum);  }  else {  	return ((_Maximum - _Minimum) * 0.5 * ((index -= 2) * index * index + 2) + _Minimum);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: if ((index /= zeroCount * 0.5) < 1) {  	return ((_Maximum - _Minimum) * 0.5 * index * index * index + _Minimum);  }  else {  	return ((_Maximum - _Minimum) * 0.5 * ((index -= 2) * index * index + 2) + _Minimum);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: return ((_Maximum - _Minimum) * 0.5 * index * index * index + _Minimum);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: return ((_Maximum - _Minimum) * 0.5 * ((index -= 2) * index * index + 2) + _Minimum);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: return ((_Maximum - _Minimum) * 0.5 * ((index -= 2) * index * index + 2) + _Minimum);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: return ((_Maximum - _Minimum) * 0.5 * ((index -= 2) * index * index + 2) + _Minimum);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: if (index == 0) {  	return _Minimum;  }  else {  	return ((_Maximum - _Minimum) * Math.Pow (2' (10 * (index / zeroCount - 1))) + _Minimum);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: if (index == 0) {  	return _Minimum;  }  else {  	return ((_Maximum - _Minimum) * Math.Pow (2' (10 * (index / zeroCount - 1))) + _Minimum);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: return ((_Maximum - _Minimum) * Math.Pow (2' (10 * (index / zeroCount - 1))) + _Minimum);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: return ((_Maximum - _Minimum) * Math.Pow (2' (10 * (index / zeroCount - 1))) + _Minimum);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: if (index == zeroCount) {  	return (_Minimum + (_Maximum - _Minimum));  }  else {  	return ((_Maximum - _Minimum) * (-Math.Pow (2' -10 * index / zeroCount) + 1) + _Minimum);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: if (index == zeroCount) {  	return (_Minimum + (_Maximum - _Minimum));  }  else {  	return ((_Maximum - _Minimum) * (-Math.Pow (2' -10 * index / zeroCount) + 1) + _Minimum);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: return ((_Maximum - _Minimum) * (-Math.Pow (2' -10 * index / zeroCount) + 1) + _Minimum);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Interpolator,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Interpolator.cs,CalculateValue,The following statement contains a magic number: return ((_Maximum - _Minimum) * (-Math.Pow (2' -10 * index / zeroCount) + 1) + _Minimum);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Latitude  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it nothing?  		if (Values [0].Length == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Is it infinity?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  			break;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  			break;  		}  		else {  			_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  			break;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  		break;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  		break;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Latitude_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Latitude  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it nothing?  		if (Values [0].Length == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Is it infinity?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  			break;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  			break;  		}  		else {  			_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  			break;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  		break;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  		break;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Latitude_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Latitude  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it nothing?  		if (Values [0].Length == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Is it infinity?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  			break;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  			break;  		}  		else {  			_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  			break;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  		break;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  		break;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Latitude_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Latitude  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it nothing?  		if (Values [0].Length == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Is it infinity?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  			break;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  			break;  		}  		else {  			_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  			break;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  		break;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  		break;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Latitude_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Latitude  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it nothing?  		if (Values [0].Length == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Is it infinity?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  			break;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  			break;  		}  		else {  			_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  			break;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  		break;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  		break;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Latitude_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Latitude  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it nothing?  		if (Values [0].Length == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Is it infinity?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  			break;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  			break;  		}  		else {  			_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  			break;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  		break;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  		break;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Latitude_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Latitude  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it nothing?  		if (Values [0].Length == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Is it infinity?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  			break;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  			break;  		}  		else {  			_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  			break;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  		break;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  		break;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Latitude_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Latitude  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it nothing?  		if (Values [0].Length == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Is it infinity?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  			break;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  			break;  		}  		else {  			_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  			break;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  		break;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  		break;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Latitude_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Latitude  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it nothing?  		if (Values [0].Length == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Is it infinity?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  			break;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  			break;  		}  		else {  			_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  			break;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  		break;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  		break;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Latitude_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Latitude  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it nothing?  		if (Values [0].Length == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Is it infinity?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  			break;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  			break;  		}  		else {  			_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  			break;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  		break;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  		break;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Latitude_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Latitude  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it nothing?  		if (Values [0].Length == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Is it infinity?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  			break;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  			break;  		}  		else {  			_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  			break;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  		break;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  		break;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Latitude_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Latitude  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it nothing?  		if (Values [0].Length == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Is it infinity?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  			break;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  			break;  		}  		else {  			_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  			break;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  		break;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  		break;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Latitude_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Latitude  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it nothing?  		if (Values [0].Length == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Is it infinity?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  			break;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  			break;  		}  		else {  			_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  			break;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  		break;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  		break;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Latitude_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: try {  	// Clean up the string  	StringBuilder NewValue = new StringBuilder (value);  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Latitude  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it nothing?  		if (Values [0].Length == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Is it infinity?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  			break;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  			break;  		}  		else {  			_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  			break;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  		break;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  		break;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Latitude_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Latitude  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it nothing?  	if (Values [0].Length == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Is it infinity?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  		break;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  		break;  	}  	else {  		_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  		break;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  	break;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Latitude  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it nothing?  	if (Values [0].Length == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Is it infinity?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  		break;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  		break;  	}  	else {  		_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  		break;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  	break;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Latitude  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it nothing?  	if (Values [0].Length == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Is it infinity?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  		break;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  		break;  	}  	else {  		_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  		break;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  	break;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Latitude  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it nothing?  	if (Values [0].Length == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Is it infinity?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  		break;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  		break;  	}  	else {  		_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  		break;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  	break;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Latitude  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it nothing?  	if (Values [0].Length == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Is it infinity?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  		break;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  		break;  	}  	else {  		_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  		break;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  	break;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Latitude  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it nothing?  	if (Values [0].Length == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Is it infinity?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  		break;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  		break;  	}  	else {  		_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  		break;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  	break;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Latitude  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it nothing?  	if (Values [0].Length == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Is it infinity?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  		break;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  		break;  	}  	else {  		_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  		break;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  	break;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Latitude  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it nothing?  	if (Values [0].Length == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Is it infinity?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  		break;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  		break;  	}  	else {  		_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  		break;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  	break;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Latitude  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it nothing?  	if (Values [0].Length == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Is it infinity?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  		break;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  		break;  	}  	else {  		_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  		break;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  	break;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Latitude  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it nothing?  	if (Values [0].Length == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Is it infinity?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  		break;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  		break;  	}  	else {  		_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  		break;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  	break;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Latitude  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it nothing?  	if (Values [0].Length == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Is it infinity?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  		break;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  		break;  	}  	else {  		_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  		break;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  	break;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Latitude  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it nothing?  	if (Values [0].Length == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Is it infinity?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  		break;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  		break;  	}  	else {  		_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  		break;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  	break;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Latitude  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it nothing?  	if (Values [0].Length == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Is it infinity?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  		break;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  		break;  	}  	else {  		_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  		break;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  	break;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Latitude  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it nothing?  	if (Values [0].Length == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Is it infinity?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  		break;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  		break;  	}  	else {  		_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  		break;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  	break;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (Values [0].Length == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Is it infinity?  else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (Values [0].Length == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Is it infinity?  else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (Values [0].Length == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Is it infinity?  else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (Values [0].Length == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Is it infinity?  else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (Values [0].Length == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Is it infinity?  else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (Values [0].Length == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Is it infinity?  else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (Values [0].Length == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Is it infinity?  else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (Values [0].Length == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Is it infinity?  else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (Values [0].Length == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Is it infinity?  else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (Values [0].Length == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Is it infinity?  else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (Values [0].Length == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Is it infinity?  else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (Values [0].Length == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Is it infinity?  else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: _DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: _DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: _DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: _DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: _DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: _DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: _DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: _DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: _DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: _DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Latitude,The following statement contains a magic number: _DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Normalize,The following statement contains a magic number: if (NewValue > 90)  	NewValue = 180 - NewValue;  // If the value id < -180' return -180 - X  else if (NewValue < -90.0)  	NewValue = -180.0 - NewValue;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Normalize,The following statement contains a magic number: if (NewValue > 90)  	NewValue = 180 - NewValue;  // If the value id < -180' return -180 - X  else if (NewValue < -90.0)  	NewValue = -180.0 - NewValue;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Normalize,The following statement contains a magic number: if (NewValue > 90)  	NewValue = 180 - NewValue;  // If the value id < -180' return -180 - X  else if (NewValue < -90.0)  	NewValue = -180.0 - NewValue;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Normalize,The following statement contains a magic number: if (NewValue > 90)  	NewValue = 180 - NewValue;  // If the value id < -180' return -180 - X  else if (NewValue < -90.0)  	NewValue = -180.0 - NewValue;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Normalize,The following statement contains a magic number: NewValue = 180 - NewValue;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Normalize,The following statement contains a magic number: if (NewValue < -90.0)  	NewValue = -180.0 - NewValue;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Normalize,The following statement contains a magic number: if (NewValue < -90.0)  	NewValue = -180.0 - NewValue;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Normalize,The following statement contains a magic number: NewValue = -180.0 - NewValue;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Normalize,The following statement contains a magic number: if (HemisphereFlips % 2 != 0)  	return new Latitude (-NewValue);  else  	return new Latitude (NewValue);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,RoundSeconds,The following statement contains a magic number: return RoundSeconds (15.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,RoundSeconds,The following statement contains a magic number: for (double value = 0; value < 60; value += interval) {  	// Calculate the value of the next interval  	double NextInterval = value + interval;  	// Is the seconds value greater than the next interval?  	if (NewSeconds > NextInterval)  		// Yes.  Continue on  		continue;  	// Is the seconds value closer to the current or next interval?  	if (NewSeconds < (value + NextInterval) * 0.5)  		// Closer to the current interval' so adjust it  		NewSeconds = value;  	else  		NewSeconds = NextInterval;  	// Is the new value 60?  If so' make it zero  	if (NewSeconds == 60)  		NewSeconds = 0;  	// Return the new value  	return new Latitude (Hours' Minutes' NewSeconds);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,RoundSeconds,The following statement contains a magic number: for (double value = 0; value < 60; value += interval) {  	// Calculate the value of the next interval  	double NextInterval = value + interval;  	// Is the seconds value greater than the next interval?  	if (NewSeconds > NextInterval)  		// Yes.  Continue on  		continue;  	// Is the seconds value closer to the current or next interval?  	if (NewSeconds < (value + NextInterval) * 0.5)  		// Closer to the current interval' so adjust it  		NewSeconds = value;  	else  		NewSeconds = NextInterval;  	// Is the new value 60?  If so' make it zero  	if (NewSeconds == 60)  		NewSeconds = 0;  	// Return the new value  	return new Latitude (Hours' Minutes' NewSeconds);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,RoundSeconds,The following statement contains a magic number: for (double value = 0; value < 60; value += interval) {  	// Calculate the value of the next interval  	double NextInterval = value + interval;  	// Is the seconds value greater than the next interval?  	if (NewSeconds > NextInterval)  		// Yes.  Continue on  		continue;  	// Is the seconds value closer to the current or next interval?  	if (NewSeconds < (value + NextInterval) * 0.5)  		// Closer to the current interval' so adjust it  		NewSeconds = value;  	else  		NewSeconds = NextInterval;  	// Is the new value 60?  If so' make it zero  	if (NewSeconds == 60)  		NewSeconds = 0;  	// Return the new value  	return new Latitude (Hours' Minutes' NewSeconds);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,RoundSeconds,The following statement contains a magic number: if (NewSeconds < (value + NextInterval) * 0.5)  	// Closer to the current interval' so adjust it  	NewSeconds = value;  else  	NewSeconds = NextInterval;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,RoundSeconds,The following statement contains a magic number: if (NewSeconds == 60)  	NewSeconds = 0;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Random,The following statement contains a magic number: return new Latitude ((generator.NextDouble () * 180.0) - 90.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,Random,The following statement contains a magic number: return new Latitude ((generator.NextDouble () * 180.0) - 90.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,ToDecimalDegrees,The following statement contains a magic number: return hours < 0 ? -(-hours + minutes / 60.0 + seconds / 3600.0) : (hours + minutes / 60.0 + seconds / 3600.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,ToDecimalDegrees,The following statement contains a magic number: return hours < 0 ? -(-hours + minutes / 60.0 + seconds / 3600.0) : (hours + minutes / 60.0 + seconds / 3600.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,ToDecimalDegrees,The following statement contains a magic number: return hours < 0 ? -(-hours + minutes / 60.0 + seconds / 3600.0) : (hours + minutes / 60.0 + seconds / 3600.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,ToDecimalDegrees,The following statement contains a magic number: return hours < 0 ? -(-hours + minutes / 60.0 + seconds / 3600.0) : (hours + minutes / 60.0 + seconds / 3600.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,ToDecimalDegrees,The following statement contains a magic number: return hours < 0 ? -(-hours + decimalMinutes / 60.0) : (hours + decimalMinutes / 60.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,ToDecimalDegrees,The following statement contains a magic number: return hours < 0 ? -(-hours + decimalMinutes / 60.0) : (hours + decimalMinutes / 60.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,ToDecimalDegrees,The following statement contains a magic number: switch (hemisphere) {  case LatitudeHemisphere.South:  	return -Math.Abs (hours) - decimalMinutes / 60.0;  case LatitudeHemisphere.North:  	return Math.Abs (hours) + decimalMinutes / 60.0;  default:  	return ToDecimalDegrees (hours' decimalMinutes);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,ToDecimalDegrees,The following statement contains a magic number: switch (hemisphere) {  case LatitudeHemisphere.South:  	return -Math.Abs (hours) - decimalMinutes / 60.0;  case LatitudeHemisphere.North:  	return Math.Abs (hours) + decimalMinutes / 60.0;  default:  	return ToDecimalDegrees (hours' decimalMinutes);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,ToDecimalDegrees,The following statement contains a magic number: return -Math.Abs (hours) - decimalMinutes / 60.0;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,ToDecimalDegrees,The following statement contains a magic number: return Math.Abs (hours) + decimalMinutes / 60.0;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,ToDecimalDegrees,The following statement contains a magic number: switch (hemisphere) {  case LatitudeHemisphere.South:  	return -Math.Abs (hours) - minutes / 60.0 - seconds / 3600.0;  case LatitudeHemisphere.North:  	return Math.Abs (hours) + minutes / 60.0 + seconds / 3600.0;  default:  	return ToDecimalDegrees (hours' minutes' seconds);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,ToDecimalDegrees,The following statement contains a magic number: switch (hemisphere) {  case LatitudeHemisphere.South:  	return -Math.Abs (hours) - minutes / 60.0 - seconds / 3600.0;  case LatitudeHemisphere.North:  	return Math.Abs (hours) + minutes / 60.0 + seconds / 3600.0;  default:  	return ToDecimalDegrees (hours' minutes' seconds);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,ToDecimalDegrees,The following statement contains a magic number: switch (hemisphere) {  case LatitudeHemisphere.South:  	return -Math.Abs (hours) - minutes / 60.0 - seconds / 3600.0;  case LatitudeHemisphere.North:  	return Math.Abs (hours) + minutes / 60.0 + seconds / 3600.0;  default:  	return ToDecimalDegrees (hours' minutes' seconds);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,ToDecimalDegrees,The following statement contains a magic number: switch (hemisphere) {  case LatitudeHemisphere.South:  	return -Math.Abs (hours) - minutes / 60.0 - seconds / 3600.0;  case LatitudeHemisphere.North:  	return Math.Abs (hours) + minutes / 60.0 + seconds / 3600.0;  default:  	return ToDecimalDegrees (hours' minutes' seconds);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,ToDecimalDegrees,The following statement contains a magic number: return -Math.Abs (hours) - minutes / 60.0 - seconds / 3600.0;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,ToDecimalDegrees,The following statement contains a magic number: return -Math.Abs (hours) - minutes / 60.0 - seconds / 3600.0;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,ToDecimalDegrees,The following statement contains a magic number: return Math.Abs (hours) + minutes / 60.0 + seconds / 3600.0;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,ToDecimalDegrees,The following statement contains a magic number: return Math.Abs (hours) + minutes / 60.0 + seconds / 3600.0;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,ToString,The following statement contains a magic number: try {  	// Is it infinity?  	if (double.IsPositiveInfinity (DecimalDegrees))  		return "+" + Properties.Resources.Common_Infinity;  	// Is it infinity?  	if (double.IsNegativeInfinity (DecimalDegrees))  		return "-" + Properties.Resources.Common_Infinity;  	if (double.IsNaN (DecimalDegrees))  		return "NaN";  	// Use the default if "g" is passed  	format = format.ToLower (culture);  	// IF the format is "G"' use the default format  	if (String.Compare (format' "g"' true' culture) == 0)  		format = "HH�MM'SS.SSSS\"i";  	// Replace the "d" with "h" since degrees is the same as hours  	format = format.Replace ("d"' "h")// Convert the format to uppercase  	.ToUpper (culture);  	// Only one decimal is allowed  	if (format.IndexOf (culture.NumberFormat.NumberDecimalSeparator) != format.LastIndexOf (culture.NumberFormat.NumberDecimalSeparator))  		throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal);  	// Is there an hours specifier?  	StartChar = format.IndexOf ("H");  	if (StartChar > -1) {  		// Yes. Look for subsequent H characters or a period  		EndChar = format.LastIndexOf ("H");  		// Extract the sub-string  		SubFormat = format.Substring (StartChar' EndChar - StartChar + 1);  		// Convert to a numberic-formattable string  		NewFormat = SubFormat.Replace ("H"' "0");  		// Replace the hours  		if (NewFormat.IndexOf (culture.NumberFormat.NumberDecimalSeparator) > -1) {  			IsDecimalHandled = true;  			// If an indicator is present' drop the minus sign  			if (format.IndexOf ("I") > -1)  				format = format.Replace (SubFormat' Math.Abs (_DecimalDegrees).ToString (NewFormat' culture));  			else  				format = format.Replace (SubFormat' _DecimalDegrees.ToString (NewFormat' culture));  		}  		else {  			if (format.IndexOf ("I") > -1)  				format = format.Replace (SubFormat' Math.Abs ((long)Hours).ToString (NewFormat' culture));  			else  				format = format.Replace (SubFormat' Hours.ToString (NewFormat' culture));  		}  	}  	// Is there an hours specifier�  	StartChar = format.IndexOf ("M");  	if (StartChar > -1) {  		// Yes. Look for subsequent H characters or a period  		EndChar = format.LastIndexOf ("M");  		// Extract the sub-string  		SubFormat = format.Substring (StartChar' EndChar - StartChar + 1);  		// Convert to a numberic-formattable string  		NewFormat = SubFormat.Replace ("M"' "0");  		// Replace the hours  		if (NewFormat.IndexOf (culture.NumberFormat.NumberDecimalSeparator) > -1) {  			if (IsDecimalHandled) {  				throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal);  			}  			IsDecimalHandled = true;  			format = format.Replace (SubFormat' DecimalMinutes.ToString (NewFormat' culture));  		}  		else {  			format = format.Replace (SubFormat' Minutes.ToString (NewFormat' culture));  		}  	}  	// Is there an hours specifier�  	StartChar = format.IndexOf ("S");  	if (StartChar > -1) {  		// Yes. Look for subsequent H characters or a period  		EndChar = format.LastIndexOf ("S");  		// Extract the sub-string  		SubFormat = format.Substring (StartChar' EndChar - StartChar + 1);  		// Convert to a numberic-formattable string  		NewFormat = SubFormat.Replace ("S"' "0");  		// Replace the hours  		if (NewFormat.IndexOf (culture.NumberFormat.NumberDecimalSeparator) > -1) {  			if (IsDecimalHandled) {  				throw new ArgumentException (Properties.Resources.Latitude_OnlyRightmostIsDecimal);  			}  			IsDecimalHandled = true;  			format = format.Replace (SubFormat' Seconds.ToString (NewFormat' culture));  		}  		else {  			format = format.Replace (SubFormat' Seconds.ToString (NewFormat' culture));  		}  	}  	// Now add on an indicator if specified  	// Is there an hours specifier�  	StartChar = format.IndexOf ("I");  	if (StartChar > -1) {  		// Yes. Look for subsequent H characters or a period  		EndChar = format.LastIndexOf ("I");  		// Extract the sub-string  		SubFormat = format.Substring (StartChar' EndChar - StartChar + 1);  		// Convert to a numberic-formattable string  		switch (SubFormat.Length) {  		case 1:  			// Double character  			format = format.Replace ("I"' Hemisphere.ToString ().Substring (0' 1));  			break;  		case 3:  			// multiple character  			format = format.Replace ("III"' Hemisphere.ToString ());  			break;  		}  	}  	// If nothing then return zero  	if (String.Compare (format' "�"' true' culture) == 0)  		return "0�";  	return format;  }  catch {  	throw new ArgumentException (Properties.Resources.Angle_InvalidToStringFormat);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,ToString,The following statement contains a magic number: if (StartChar > -1) {  	// Yes. Look for subsequent H characters or a period  	EndChar = format.LastIndexOf ("I");  	// Extract the sub-string  	SubFormat = format.Substring (StartChar' EndChar - StartChar + 1);  	// Convert to a numberic-formattable string  	switch (SubFormat.Length) {  	case 1:  		// Double character  		format = format.Replace ("I"' Hemisphere.ToString ().Substring (0' 1));  		break;  	case 3:  		// multiple character  		format = format.Replace ("III"' Hemisphere.ToString ());  		break;  	}  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,ToString,The following statement contains a magic number: switch (SubFormat.Length) {  case 1:  	// Double character  	format = format.Replace ("I"' Hemisphere.ToString ().Substring (0' 1));  	break;  case 3:  	// multiple character  	format = format.Replace ("III"' Hemisphere.ToString ());  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: try {  	// Clean up the string  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Longitude  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it nothing?  		if (Values [0].Length == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Is it infinity?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  			break;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  			break;  		}  		else {  			_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  			break;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  		break;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  		break;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Longitude_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: try {  	// Clean up the string  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Longitude  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it nothing?  		if (Values [0].Length == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Is it infinity?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  			break;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  			break;  		}  		else {  			_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  			break;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  		break;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  		break;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Longitude_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: try {  	// Clean up the string  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Longitude  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it nothing?  		if (Values [0].Length == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Is it infinity?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  			break;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  			break;  		}  		else {  			_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  			break;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  		break;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  		break;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Longitude_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: try {  	// Clean up the string  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Longitude  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it nothing?  		if (Values [0].Length == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Is it infinity?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  			break;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  			break;  		}  		else {  			_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  			break;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  		break;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  		break;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Longitude_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: try {  	// Clean up the string  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Longitude  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it nothing?  		if (Values [0].Length == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Is it infinity?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  			break;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  			break;  		}  		else {  			_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  			break;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  		break;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  		break;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Longitude_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: try {  	// Clean up the string  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Longitude  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it nothing?  		if (Values [0].Length == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Is it infinity?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  			break;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  			break;  		}  		else {  			_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  			break;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  		break;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  		break;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Longitude_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: try {  	// Clean up the string  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Longitude  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it nothing?  		if (Values [0].Length == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Is it infinity?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  			break;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  			break;  		}  		else {  			_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  			break;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  		break;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  		break;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Longitude_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: try {  	// Clean up the string  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Longitude  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it nothing?  		if (Values [0].Length == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Is it infinity?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  			break;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  			break;  		}  		else {  			_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  			break;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  		break;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  		break;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Longitude_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: try {  	// Clean up the string  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Longitude  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it nothing?  		if (Values [0].Length == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Is it infinity?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  			break;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  			break;  		}  		else {  			_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  			break;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  		break;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  		break;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Longitude_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: try {  	// Clean up the string  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Longitude  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it nothing?  		if (Values [0].Length == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Is it infinity?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  			break;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  			break;  		}  		else {  			_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  			break;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  		break;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  		break;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Longitude_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: try {  	// Clean up the string  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Longitude  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it nothing?  		if (Values [0].Length == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Is it infinity?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  			break;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  			break;  		}  		else {  			_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  			break;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  		break;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  		break;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Longitude_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: try {  	// Clean up the string  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Longitude  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it nothing?  		if (Values [0].Length == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Is it infinity?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  			break;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  			break;  		}  		else {  			_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  			break;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  		break;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  		break;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Longitude_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: try {  	// Clean up the string  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Longitude  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it nothing?  		if (Values [0].Length == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Is it infinity?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  			break;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  			break;  		}  		else {  			_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  			break;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  		break;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  		break;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Longitude_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: try {  	// Clean up the string  	NewValue.Replace ("�"' " ").Replace ("'"' " ").Replace ("\""' " ").Replace ("  "' " ");  	// Now split the values into an array  	string[] Values = NewValue.ToString ().Trim ().Split (' ');  	// How many elements are in the array?  	switch (Values.Length) {  	case 0:  		// Return a blank Longitude  		_DecimalDegrees = 0.0;  		return;  	case 1:  		// Decimal degrees  		// Is it nothing?  		if (Values [0].Length == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Is it infinity?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  			_DecimalDegrees = double.PositiveInfinity;  			return;  		}  		// Is it empty?  		else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  			_DecimalDegrees = 0.0;  			return;  		}  		// Look at the number of digits' this might be HHHMMSS format.  		else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  			break;  		}  		else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  			_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  			break;  		}  		else {  			_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  			break;  		}  	case 2:  		// Hours and decimal minutes  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  		break;  	default:  		// Hours' minutes and seconds  (most likely)  		// If this is a fractional value' remember that it is  		if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  			throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  		}  		// Set decimal degrees  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  		break;  	}  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Longitude_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Longitude  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it nothing?  	if (Values [0].Length == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Is it infinity?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  		break;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  		break;  	}  	else {  		_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  		break;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  	break;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Longitude  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it nothing?  	if (Values [0].Length == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Is it infinity?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  		break;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  		break;  	}  	else {  		_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  		break;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  	break;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Longitude  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it nothing?  	if (Values [0].Length == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Is it infinity?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  		break;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  		break;  	}  	else {  		_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  		break;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  	break;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Longitude  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it nothing?  	if (Values [0].Length == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Is it infinity?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  		break;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  		break;  	}  	else {  		_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  		break;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  	break;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Longitude  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it nothing?  	if (Values [0].Length == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Is it infinity?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  		break;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  		break;  	}  	else {  		_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  		break;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  	break;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Longitude  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it nothing?  	if (Values [0].Length == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Is it infinity?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  		break;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  		break;  	}  	else {  		_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  		break;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  	break;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Longitude  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it nothing?  	if (Values [0].Length == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Is it infinity?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  		break;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  		break;  	}  	else {  		_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  		break;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  	break;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Longitude  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it nothing?  	if (Values [0].Length == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Is it infinity?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  		break;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  		break;  	}  	else {  		_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  		break;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  	break;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Longitude  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it nothing?  	if (Values [0].Length == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Is it infinity?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  		break;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  		break;  	}  	else {  		_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  		break;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  	break;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Longitude  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it nothing?  	if (Values [0].Length == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Is it infinity?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  		break;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  		break;  	}  	else {  		_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  		break;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  	break;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Longitude  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it nothing?  	if (Values [0].Length == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Is it infinity?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  		break;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  		break;  	}  	else {  		_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  		break;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  	break;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Longitude  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it nothing?  	if (Values [0].Length == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Is it infinity?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  		break;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  		break;  	}  	else {  		_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  		break;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  	break;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Longitude  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it nothing?  	if (Values [0].Length == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Is it infinity?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  		break;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  		break;  	}  	else {  		_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  		break;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  	break;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: switch (Values.Length) {  case 0:  	// Return a blank Longitude  	_DecimalDegrees = 0.0;  	return;  case 1:  	// Decimal degrees  	// Is it nothing?  	if (Values [0].Length == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Is it infinity?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  		_DecimalDegrees = double.PositiveInfinity;  		return;  	}  	// Is it empty?  	else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  		_DecimalDegrees = 0.0;  		return;  	}  	// Look at the number of digits' this might be HHHMMSS format.  	else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  		break;  	}  	else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  		_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  		break;  	}  	else {  		_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  		break;  	}  case 2:  	// Hours and decimal minutes  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' float.Parse (Values [1]' culture)' hemisphere);  	break;  default:  	// Hours' minutes and seconds  (most likely)  	// If this is a fractional value' remember that it is  	if (Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1 || Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) != -1) {  		throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal' "value");  	}  	// Set decimal degrees  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (Values [0].Length == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Is it infinity?  else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (Values [0].Length == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Is it infinity?  else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (Values [0].Length == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Is it infinity?  else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (Values [0].Length == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Is it infinity?  else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (Values [0].Length == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Is it infinity?  else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (Values [0].Length == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Is it infinity?  else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (Values [0].Length == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Is it infinity?  else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (Values [0].Length == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Is it infinity?  else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (Values [0].Length == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Is it infinity?  else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (Values [0].Length == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Is it infinity?  else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (Values [0].Length == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Is it infinity?  else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (Values [0].Length == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Is it infinity?  else if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Infinity' true' culture) == 0) {  	_DecimalDegrees = double.PositiveInfinity;  	return;  }  // Is it empty?  else if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (String.Compare (Values [0]' Properties.Resources.Common_Empty' true' culture) == 0) {  	_DecimalDegrees = 0.0;  	return;  }  // Look at the number of digits' this might be HHHMMSS format.  else if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (Values [0].Length == 7 && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  	break;  }  else if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: _DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: _DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: _DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: _DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: _DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 3)' culture)' int.Parse (Values [0].Substring (3' 2)' culture)' double.Parse (Values [0].Substring (5' 2)' culture)' hemisphere);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: if (Values [0].Length == 8 && Values [0] [0] == '-' && Values [0].IndexOf (culture.NumberFormat.NumberDecimalSeparator) == -1) {  	_DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  	break;  }  else {  	_DecimalDegrees = ToDecimalDegrees (double.Parse (Values [0]' culture)' hemisphere);  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: _DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: _DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: _DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: _DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: _DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0].Substring (0' 4)' culture)' int.Parse (Values [0].Substring (4' 2)' culture)' double.Parse (Values [0].Substring (6' 2)' culture)' hemisphere);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Longitude,The following statement contains a magic number: _DecimalDegrees = ToDecimalDegrees (int.Parse (Values [0]' culture)' int.Parse (Values [1]' culture)' double.Parse (Values [2]' culture)' hemisphere);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,RoundSeconds,The following statement contains a magic number: return RoundSeconds (15.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,RoundSeconds,The following statement contains a magic number: for (double value = 0; value < 60; value += interval) {  	// Calculate the value of the next interval  	double NextInterval = value + interval;  	// Is the seconds value greater than the next interval?  	if (NewSeconds > NextInterval)  		// Yes.  Continue on  		continue;  	// Is the seconds value closer to the current or next interval?  	if (NewSeconds < (value + NextInterval) * 0.5)  		// Closer to the current interval' so adjust it  		NewSeconds = value;  	else  		NewSeconds = NextInterval;  	// Is the new value 60?  If so' make it zero  	if (NewSeconds == 60)  		NewSeconds = 0;  	// Return the new value  	return new Longitude (Hours' Minutes' NewSeconds);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,RoundSeconds,The following statement contains a magic number: for (double value = 0; value < 60; value += interval) {  	// Calculate the value of the next interval  	double NextInterval = value + interval;  	// Is the seconds value greater than the next interval?  	if (NewSeconds > NextInterval)  		// Yes.  Continue on  		continue;  	// Is the seconds value closer to the current or next interval?  	if (NewSeconds < (value + NextInterval) * 0.5)  		// Closer to the current interval' so adjust it  		NewSeconds = value;  	else  		NewSeconds = NextInterval;  	// Is the new value 60?  If so' make it zero  	if (NewSeconds == 60)  		NewSeconds = 0;  	// Return the new value  	return new Longitude (Hours' Minutes' NewSeconds);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,RoundSeconds,The following statement contains a magic number: for (double value = 0; value < 60; value += interval) {  	// Calculate the value of the next interval  	double NextInterval = value + interval;  	// Is the seconds value greater than the next interval?  	if (NewSeconds > NextInterval)  		// Yes.  Continue on  		continue;  	// Is the seconds value closer to the current or next interval?  	if (NewSeconds < (value + NextInterval) * 0.5)  		// Closer to the current interval' so adjust it  		NewSeconds = value;  	else  		NewSeconds = NextInterval;  	// Is the new value 60?  If so' make it zero  	if (NewSeconds == 60)  		NewSeconds = 0;  	// Return the new value  	return new Longitude (Hours' Minutes' NewSeconds);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,RoundSeconds,The following statement contains a magic number: if (NewSeconds < (value + NextInterval) * 0.5)  	// Closer to the current interval' so adjust it  	NewSeconds = value;  else  	NewSeconds = NextInterval;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,RoundSeconds,The following statement contains a magic number: if (NewSeconds == 60)  	NewSeconds = 0;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Normalize,The following statement contains a magic number: if (double.IsInfinity (_DecimalDegrees) || double.IsNaN (_DecimalDegrees))  	return this;  // If we're off the eastern edge (180E) wrap back around from the west   else if (_DecimalDegrees > 180)  	return new Longitude (-180 + (_DecimalDegrees % 180));  // If we're off the western edge (180W) wrap back around from the east  else if (_DecimalDegrees < -180)  	return new Longitude (180 + (_DecimalDegrees % 180));  // We're in bounds already' so just return the current instance  else  	return this;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Normalize,The following statement contains a magic number: if (double.IsInfinity (_DecimalDegrees) || double.IsNaN (_DecimalDegrees))  	return this;  // If we're off the eastern edge (180E) wrap back around from the west   else if (_DecimalDegrees > 180)  	return new Longitude (-180 + (_DecimalDegrees % 180));  // If we're off the western edge (180W) wrap back around from the east  else if (_DecimalDegrees < -180)  	return new Longitude (180 + (_DecimalDegrees % 180));  // We're in bounds already' so just return the current instance  else  	return this;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Normalize,The following statement contains a magic number: if (double.IsInfinity (_DecimalDegrees) || double.IsNaN (_DecimalDegrees))  	return this;  // If we're off the eastern edge (180E) wrap back around from the west   else if (_DecimalDegrees > 180)  	return new Longitude (-180 + (_DecimalDegrees % 180));  // If we're off the western edge (180W) wrap back around from the east  else if (_DecimalDegrees < -180)  	return new Longitude (180 + (_DecimalDegrees % 180));  // We're in bounds already' so just return the current instance  else  	return this;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Normalize,The following statement contains a magic number: if (double.IsInfinity (_DecimalDegrees) || double.IsNaN (_DecimalDegrees))  	return this;  // If we're off the eastern edge (180E) wrap back around from the west   else if (_DecimalDegrees > 180)  	return new Longitude (-180 + (_DecimalDegrees % 180));  // If we're off the western edge (180W) wrap back around from the east  else if (_DecimalDegrees < -180)  	return new Longitude (180 + (_DecimalDegrees % 180));  // We're in bounds already' so just return the current instance  else  	return this;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Normalize,The following statement contains a magic number: if (double.IsInfinity (_DecimalDegrees) || double.IsNaN (_DecimalDegrees))  	return this;  // If we're off the eastern edge (180E) wrap back around from the west   else if (_DecimalDegrees > 180)  	return new Longitude (-180 + (_DecimalDegrees % 180));  // If we're off the western edge (180W) wrap back around from the east  else if (_DecimalDegrees < -180)  	return new Longitude (180 + (_DecimalDegrees % 180));  // We're in bounds already' so just return the current instance  else  	return this;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Normalize,The following statement contains a magic number: if (double.IsInfinity (_DecimalDegrees) || double.IsNaN (_DecimalDegrees))  	return this;  // If we're off the eastern edge (180E) wrap back around from the west   else if (_DecimalDegrees > 180)  	return new Longitude (-180 + (_DecimalDegrees % 180));  // If we're off the western edge (180W) wrap back around from the east  else if (_DecimalDegrees < -180)  	return new Longitude (180 + (_DecimalDegrees % 180));  // We're in bounds already' so just return the current instance  else  	return this;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Normalize,The following statement contains a magic number: if (_DecimalDegrees > 180)  	return new Longitude (-180 + (_DecimalDegrees % 180));  // If we're off the western edge (180W) wrap back around from the east  else if (_DecimalDegrees < -180)  	return new Longitude (180 + (_DecimalDegrees % 180));  // We're in bounds already' so just return the current instance  else  	return this;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Normalize,The following statement contains a magic number: if (_DecimalDegrees > 180)  	return new Longitude (-180 + (_DecimalDegrees % 180));  // If we're off the western edge (180W) wrap back around from the east  else if (_DecimalDegrees < -180)  	return new Longitude (180 + (_DecimalDegrees % 180));  // We're in bounds already' so just return the current instance  else  	return this;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Normalize,The following statement contains a magic number: if (_DecimalDegrees > 180)  	return new Longitude (-180 + (_DecimalDegrees % 180));  // If we're off the western edge (180W) wrap back around from the east  else if (_DecimalDegrees < -180)  	return new Longitude (180 + (_DecimalDegrees % 180));  // We're in bounds already' so just return the current instance  else  	return this;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Normalize,The following statement contains a magic number: if (_DecimalDegrees > 180)  	return new Longitude (-180 + (_DecimalDegrees % 180));  // If we're off the western edge (180W) wrap back around from the east  else if (_DecimalDegrees < -180)  	return new Longitude (180 + (_DecimalDegrees % 180));  // We're in bounds already' so just return the current instance  else  	return this;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Normalize,The following statement contains a magic number: if (_DecimalDegrees > 180)  	return new Longitude (-180 + (_DecimalDegrees % 180));  // If we're off the western edge (180W) wrap back around from the east  else if (_DecimalDegrees < -180)  	return new Longitude (180 + (_DecimalDegrees % 180));  // We're in bounds already' so just return the current instance  else  	return this;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Normalize,The following statement contains a magic number: if (_DecimalDegrees > 180)  	return new Longitude (-180 + (_DecimalDegrees % 180));  // If we're off the western edge (180W) wrap back around from the east  else if (_DecimalDegrees < -180)  	return new Longitude (180 + (_DecimalDegrees % 180));  // We're in bounds already' so just return the current instance  else  	return this;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Normalize,The following statement contains a magic number: return new Longitude (-180 + (_DecimalDegrees % 180));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Normalize,The following statement contains a magic number: return new Longitude (-180 + (_DecimalDegrees % 180));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Normalize,The following statement contains a magic number: if (_DecimalDegrees < -180)  	return new Longitude (180 + (_DecimalDegrees % 180));  // We're in bounds already' so just return the current instance  else  	return this;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Normalize,The following statement contains a magic number: if (_DecimalDegrees < -180)  	return new Longitude (180 + (_DecimalDegrees % 180));  // We're in bounds already' so just return the current instance  else  	return this;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Normalize,The following statement contains a magic number: if (_DecimalDegrees < -180)  	return new Longitude (180 + (_DecimalDegrees % 180));  // We're in bounds already' so just return the current instance  else  	return this;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Normalize,The following statement contains a magic number: return new Longitude (180 + (_DecimalDegrees % 180));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Normalize,The following statement contains a magic number: return new Longitude (180 + (_DecimalDegrees % 180));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Random,The following statement contains a magic number: return new Longitude ((generator.NextDouble () * 180.0) - 90.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,Random,The following statement contains a magic number: return new Longitude ((generator.NextDouble () * 180.0) - 90.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,ToDecimalDegrees,The following statement contains a magic number: return hours < 0 ? -(-hours + minutes / 60.0 + seconds / 3600.0) : (hours + minutes / 60.0 + seconds / 3600.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,ToDecimalDegrees,The following statement contains a magic number: return hours < 0 ? -(-hours + minutes / 60.0 + seconds / 3600.0) : (hours + minutes / 60.0 + seconds / 3600.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,ToDecimalDegrees,The following statement contains a magic number: return hours < 0 ? -(-hours + minutes / 60.0 + seconds / 3600.0) : (hours + minutes / 60.0 + seconds / 3600.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,ToDecimalDegrees,The following statement contains a magic number: return hours < 0 ? -(-hours + minutes / 60.0 + seconds / 3600.0) : (hours + minutes / 60.0 + seconds / 3600.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,ToDecimalDegrees,The following statement contains a magic number: return hours < 0 ? -(-hours + decimalMinutes / 60.0) : (hours + decimalMinutes / 60.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,ToDecimalDegrees,The following statement contains a magic number: return hours < 0 ? -(-hours + decimalMinutes / 60.0) : (hours + decimalMinutes / 60.0);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,ToDecimalDegrees,The following statement contains a magic number: switch (hemisphere) {  case LongitudeHemisphere.West:  	return -Math.Abs (hours) - decimalMinutes / 60.0;  case LongitudeHemisphere.East:  	return Math.Abs (hours) + decimalMinutes / 60.0;  default:  	return ToDecimalDegrees (hours' decimalMinutes);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,ToDecimalDegrees,The following statement contains a magic number: switch (hemisphere) {  case LongitudeHemisphere.West:  	return -Math.Abs (hours) - decimalMinutes / 60.0;  case LongitudeHemisphere.East:  	return Math.Abs (hours) + decimalMinutes / 60.0;  default:  	return ToDecimalDegrees (hours' decimalMinutes);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,ToDecimalDegrees,The following statement contains a magic number: return -Math.Abs (hours) - decimalMinutes / 60.0;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,ToDecimalDegrees,The following statement contains a magic number: return Math.Abs (hours) + decimalMinutes / 60.0;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,ToDecimalDegrees,The following statement contains a magic number: switch (hemisphere) {  case LongitudeHemisphere.West:  	return -Math.Abs (hours) - minutes / 60.0 - seconds / 3600.0;  case LongitudeHemisphere.East:  	return Math.Abs (hours) + minutes / 60.0 + seconds / 3600.0;  default:  	return ToDecimalDegrees (hours' minutes' seconds);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,ToDecimalDegrees,The following statement contains a magic number: switch (hemisphere) {  case LongitudeHemisphere.West:  	return -Math.Abs (hours) - minutes / 60.0 - seconds / 3600.0;  case LongitudeHemisphere.East:  	return Math.Abs (hours) + minutes / 60.0 + seconds / 3600.0;  default:  	return ToDecimalDegrees (hours' minutes' seconds);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,ToDecimalDegrees,The following statement contains a magic number: switch (hemisphere) {  case LongitudeHemisphere.West:  	return -Math.Abs (hours) - minutes / 60.0 - seconds / 3600.0;  case LongitudeHemisphere.East:  	return Math.Abs (hours) + minutes / 60.0 + seconds / 3600.0;  default:  	return ToDecimalDegrees (hours' minutes' seconds);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,ToDecimalDegrees,The following statement contains a magic number: switch (hemisphere) {  case LongitudeHemisphere.West:  	return -Math.Abs (hours) - minutes / 60.0 - seconds / 3600.0;  case LongitudeHemisphere.East:  	return Math.Abs (hours) + minutes / 60.0 + seconds / 3600.0;  default:  	return ToDecimalDegrees (hours' minutes' seconds);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,ToDecimalDegrees,The following statement contains a magic number: return -Math.Abs (hours) - minutes / 60.0 - seconds / 3600.0;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,ToDecimalDegrees,The following statement contains a magic number: return -Math.Abs (hours) - minutes / 60.0 - seconds / 3600.0;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,ToDecimalDegrees,The following statement contains a magic number: return Math.Abs (hours) + minutes / 60.0 + seconds / 3600.0;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,ToDecimalDegrees,The following statement contains a magic number: return Math.Abs (hours) + minutes / 60.0 + seconds / 3600.0;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,ToString,The following statement contains a magic number: try {  	// Is it infinity?  	if (double.IsPositiveInfinity (DecimalDegrees))  		return "+" + Properties.Resources.Common_Infinity;  	// Is it infinity?  	if (double.IsNegativeInfinity (DecimalDegrees))  		return "-" + Properties.Resources.Common_Infinity;  	if (double.IsNaN (DecimalDegrees))  		return "NaN";  	// Use the default if "g" is passed  	format = format.ToLower (culture);  	// IF the format is "G"' use the default format  	if (String.Compare (format' "g"' true' culture) == 0)  		format = "HHH�MM'SS.SSSS\"i";  	// Replace the "d" with "h" since degrees is the same as hours  	format = format.Replace ("d"' "h")// Convert the format to uppercase  	.ToUpper (culture);  	// Only one decimal is allowed  	if (format.IndexOf (culture.NumberFormat.NumberDecimalSeparator) != format.LastIndexOf (culture.NumberFormat.NumberDecimalSeparator))  		throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal);  	// Is there an hours specifier?  	StartChar = format.IndexOf ("H");  	if (StartChar > -1) {  		// Yes. Look for subsequent H characters or a period  		EndChar = format.LastIndexOf ("H");  		// Extract the sub-string  		SubFormat = format.Substring (StartChar' EndChar - StartChar + 1);  		// Convert to a numberic-formattable string  		NewFormat = SubFormat.Replace ("H"' "0");  		// Replace the hours  		if (NewFormat.IndexOf (culture.NumberFormat.NumberDecimalSeparator) > -1) {  			IsDecimalHandled = true;  			// If an indicator is present' drop the minus sign  			if (format.IndexOf ("I") > -1)  				format = format.Replace (SubFormat' Math.Abs (_DecimalDegrees).ToString (NewFormat' culture));  			else  				format = format.Replace (SubFormat' _DecimalDegrees.ToString (NewFormat' culture));  		}  		else {  			if (format.IndexOf ("I") > -1)  				format = format.Replace (SubFormat' Math.Abs (Hours).ToString (NewFormat' culture));  			else  				format = format.Replace (SubFormat' Hours.ToString (NewFormat' culture));  		}  	}  	// Is there an hours specifier�  	StartChar = format.IndexOf ("M");  	if (StartChar > -1) {  		// Yes. Look for subsequent H characters or a period  		EndChar = format.LastIndexOf ("M");  		// Extract the sub-string  		SubFormat = format.Substring (StartChar' EndChar - StartChar + 1);  		// Convert to a numberic-formattable string  		NewFormat = SubFormat.Replace ("M"' "0");  		// Replace the hours  		if (NewFormat.IndexOf (culture.NumberFormat.NumberDecimalSeparator) > -1) {  			if (IsDecimalHandled) {  				throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal);  			}  			IsDecimalHandled = true;  			format = format.Replace (SubFormat' DecimalMinutes.ToString (NewFormat' culture));  		}  		else {  			format = format.Replace (SubFormat' Minutes.ToString (NewFormat' culture));  		}  	}  	// Is there an hours specifier�  	StartChar = format.IndexOf ("S");  	if (StartChar > -1) {  		// Yes. Look for subsequent H characters or a period  		EndChar = format.LastIndexOf ("S");  		// Extract the sub-string  		SubFormat = format.Substring (StartChar' EndChar - StartChar + 1);  		// Convert to a numberic-formattable string  		NewFormat = SubFormat.Replace ("S"' "0");  		// Replace the hours  		if (NewFormat.IndexOf (culture.NumberFormat.NumberDecimalSeparator) > -1) {  			if (IsDecimalHandled) {  				throw new ArgumentException (Properties.Resources.Longitude_OnlyRightmostIsDecimal);  			}  			IsDecimalHandled = true;  			format = format.Replace (SubFormat' Seconds.ToString (NewFormat' culture));  		}  		else {  			format = format.Replace (SubFormat' Seconds.ToString (NewFormat' culture));  		}  	}  	// Now add on an indicator if specified  	// Is there an hours specifier�  	StartChar = format.IndexOf ("I");  	if (StartChar > -1) {  		// Yes. Look for subsequent H characters or a period  		EndChar = format.LastIndexOf ("I");  		// Extract the sub-string  		SubFormat = format.Substring (StartChar' EndChar - StartChar + 1);  		// Convert to a numberic-formattable string  		switch (SubFormat.Length) {  		case 1:  			// Double character  			format = format.Replace ("I"' Hemisphere.ToString ().Substring (0' 1));  			break;  		case 3:  			// multiple character  			format = format.Replace ("III"' Hemisphere.ToString ());  			break;  		}  	}  	// If nothing then return zero  	if (String.Compare (format' "�"' true' culture) == 0)  		return "0�";  	return format;  }  catch {  	throw new ArgumentException (Properties.Resources.Angle_InvalidToStringFormat);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,ToString,The following statement contains a magic number: if (StartChar > -1) {  	// Yes. Look for subsequent H characters or a period  	EndChar = format.LastIndexOf ("I");  	// Extract the sub-string  	SubFormat = format.Substring (StartChar' EndChar - StartChar + 1);  	// Convert to a numberic-formattable string  	switch (SubFormat.Length) {  	case 1:  		// Double character  		format = format.Replace ("I"' Hemisphere.ToString ().Substring (0' 1));  		break;  	case 3:  		// multiple character  		format = format.Replace ("III"' Hemisphere.ToString ());  		break;  	}  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,ToString,The following statement contains a magic number: switch (SubFormat.Length) {  case 1:  	// Double character  	format = format.Replace ("I"' Hemisphere.ToString ().Substring (0' 1));  	break;  case 3:  	// multiple character  	format = format.Replace ("III"' Hemisphere.ToString ());  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: if (Math.Abs (Math.PI * 0.5 - Math.Abs (lat1)) < 1E-10) {  	lat1 = Math.Sign (lat1) * (Math.PI * 0.5 - 1E-10);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: if (Math.Abs (Math.PI * 0.5 - Math.Abs (lat1)) < 1E-10) {  	lat1 = Math.Sign (lat1) * (Math.PI * 0.5 - 1E-10);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: if (Math.Abs (Math.PI * 0.5 - Math.Abs (lat1)) < 1E-10) {  	lat1 = Math.Sign (lat1) * (Math.PI * 0.5 - 1E-10);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: if (Math.Abs (Math.PI * 0.5 - Math.Abs (lat1)) < 1E-10) {  	lat1 = Math.Sign (lat1) * (Math.PI * 0.5 - 1E-10);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: lat1 = Math.Sign (lat1) * (Math.PI * 0.5 - 1E-10);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: lat1 = Math.Sign (lat1) * (Math.PI * 0.5 - 1E-10);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: if (Math.Abs (Math.PI * 0.5 - Math.Abs (lat2)) < 1E-10) {  	lat2 = Math.Sign (lat2) * (Math.PI * 0.5 - 1E-10);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: if (Math.Abs (Math.PI * 0.5 - Math.Abs (lat2)) < 1E-10) {  	lat2 = Math.Sign (lat2) * (Math.PI * 0.5 - 1E-10);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: if (Math.Abs (Math.PI * 0.5 - Math.Abs (lat2)) < 1E-10) {  	lat2 = Math.Sign (lat2) * (Math.PI * 0.5 - 1E-10);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: if (Math.Abs (Math.PI * 0.5 - Math.Abs (lat2)) < 1E-10) {  	lat2 = Math.Sign (lat2) * (Math.PI * 0.5 - 1E-10);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: lat2 = Math.Sign (lat2) * (Math.PI * 0.5 - 1E-10);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: lat2 = Math.Sign (lat2) * (Math.PI * 0.5 - 1E-10);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: lon1 = lon1 % (2 * Math.PI);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: lon2 = lon2 % (2 * Math.PI);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: if (L > Math.PI) {  	L = 2.0 * Math.PI - L;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: L = 2.0 * Math.PI - L;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: while (notdone) {  	//    %disp(['lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    itercount = itercount+1;  	itercount++;  	//    if itercount > 50  	if (itercount > 50) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambda(notdone) = pi;  		lambda = Math.PI;  		//        break  		break;  		//    end  	}  	//    lambdaold(notdone) = lambda(notdone);  	lambdaold = lambda;  	//    sinsigma(notdone) = sqrt((cos(U2(notdone)).*sin(lambda(notdone)))...  	//        .^2+(cos(U1(notdone)).*sin(U2(notdone))-sin(U1(notdone)).*...  	//        cos(U2(notdone)).*cos(lambda(notdone))).^2);  	double sinsigma = Math.Sqrt (Math.Pow ((Math.Cos (U2) * Math.Sin (lambda))' 2) + Math.Pow ((Math.Cos (U1) * Math.Sin (U2) - Math.Sin (U1) * Math.Cos (U2) * Math.Cos (lambda))' 2));  	//    cossigma(notdone) = sin(U1(notdone)).*sin(U2(notdone))+...  	//        cos(U1(notdone)).*cos(U2(notdone)).*cos(lambda(notdone));  	double cossigma = Math.Sin (U1) * Math.Sin (U2) + Math.Cos (U1) * Math.Cos (U2) * Math.Cos (lambda);  	//    % eliminate rare imaginary portions at limit of numerical precision:  	//    sinsigma(notdone)=real(sinsigma(notdone));  	//    cossigma(notdone)=real(cossigma(notdone));  	// Eliminate rare imaginary portions at limit of numerical precision:  	// ?  	//    sigma(notdone) = atan2(sinsigma(notdone)'cossigma(notdone));  	sigma = Math.Atan2 (sinsigma' cossigma);  	//    alpha(notdone) = asin(cos(U1(notdone)).*cos(U2(notdone)).*...  	//        sin(lambda(notdone))./sin(sigma(notdone)));  	alpha = Math.Asin (Math.Cos (U1) * Math.Cos (U2) * Math.Sin (lambda) / Math.Sin (sigma));  	//    cos2sigmam(notdone) = cos(sigma(notdone))-2*sin(U1(notdone)).*...  	//        sin(U2(notdone))./cos(alpha(notdone)).^2;  	cos2sigmam = Math.Cos (sigma) - 2.0 * Math.Sin (U1) * Math.Sin (U2) / Math.Pow (Math.Cos (alpha)' 2);  	//    C(notdone) = f/16*cos(alpha(notdone)).^2.*(4+f*(4-3*...  	//        cos(alpha(notdone)).^2));  	C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  	//    lambda(notdone) = L(notdone)+(1-C(notdone)).*f.*sin(alpha(notdone))...  	//        .*(sigma(notdone)+C(notdone).*sin(sigma(notdone)).*...  	//        (cos2sigmam(notdone)+C(notdone).*cos(sigma(notdone)).*...  	//        (-1+2.*cos2sigmam(notdone).^2)));  	lambda = L + (1 - C) * f * Math.Sin (alpha) * (sigma + C * Math.Sin (sigma) * (cos2sigmam + C * Math.Cos (sigma) * (-1 + 2 * Math.Pow (cos2sigmam' 2))));  	//    %disp(['then' lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    % correct for convergence failure in the case of essentially antipodal  	//    % points  	// Correct for convergence failure in the case of essentially antipodal points  	//    if any(lambda(notdone) > pi)  	if (lambda > Math.PI) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambdaold(lambda>pi) = pi;  		lambdaold = Math.PI;  		//        lambda(lambda>pi) = pi;  		lambda = Math.PI;  		//    end  	}  	//    notdone = abs(lambda-lambdaold) > 1e-12;  	notdone = Math.Abs (lambda - lambdaold) > TargetAccuracy;  	//end  	// NOTE: In some cases "alpha" would return a "NaN".  If values are healthy'   	// remember them so we get a good distance calc.  	if (!double.IsNaN (alpha)) {  		goodlambda = lambda;  		goodalpha = alpha;  		goodsigma = sigma;  		goodcos2sigmam = cos2sigmam;  	}  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: while (notdone) {  	//    %disp(['lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    itercount = itercount+1;  	itercount++;  	//    if itercount > 50  	if (itercount > 50) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambda(notdone) = pi;  		lambda = Math.PI;  		//        break  		break;  		//    end  	}  	//    lambdaold(notdone) = lambda(notdone);  	lambdaold = lambda;  	//    sinsigma(notdone) = sqrt((cos(U2(notdone)).*sin(lambda(notdone)))...  	//        .^2+(cos(U1(notdone)).*sin(U2(notdone))-sin(U1(notdone)).*...  	//        cos(U2(notdone)).*cos(lambda(notdone))).^2);  	double sinsigma = Math.Sqrt (Math.Pow ((Math.Cos (U2) * Math.Sin (lambda))' 2) + Math.Pow ((Math.Cos (U1) * Math.Sin (U2) - Math.Sin (U1) * Math.Cos (U2) * Math.Cos (lambda))' 2));  	//    cossigma(notdone) = sin(U1(notdone)).*sin(U2(notdone))+...  	//        cos(U1(notdone)).*cos(U2(notdone)).*cos(lambda(notdone));  	double cossigma = Math.Sin (U1) * Math.Sin (U2) + Math.Cos (U1) * Math.Cos (U2) * Math.Cos (lambda);  	//    % eliminate rare imaginary portions at limit of numerical precision:  	//    sinsigma(notdone)=real(sinsigma(notdone));  	//    cossigma(notdone)=real(cossigma(notdone));  	// Eliminate rare imaginary portions at limit of numerical precision:  	// ?  	//    sigma(notdone) = atan2(sinsigma(notdone)'cossigma(notdone));  	sigma = Math.Atan2 (sinsigma' cossigma);  	//    alpha(notdone) = asin(cos(U1(notdone)).*cos(U2(notdone)).*...  	//        sin(lambda(notdone))./sin(sigma(notdone)));  	alpha = Math.Asin (Math.Cos (U1) * Math.Cos (U2) * Math.Sin (lambda) / Math.Sin (sigma));  	//    cos2sigmam(notdone) = cos(sigma(notdone))-2*sin(U1(notdone)).*...  	//        sin(U2(notdone))./cos(alpha(notdone)).^2;  	cos2sigmam = Math.Cos (sigma) - 2.0 * Math.Sin (U1) * Math.Sin (U2) / Math.Pow (Math.Cos (alpha)' 2);  	//    C(notdone) = f/16*cos(alpha(notdone)).^2.*(4+f*(4-3*...  	//        cos(alpha(notdone)).^2));  	C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  	//    lambda(notdone) = L(notdone)+(1-C(notdone)).*f.*sin(alpha(notdone))...  	//        .*(sigma(notdone)+C(notdone).*sin(sigma(notdone)).*...  	//        (cos2sigmam(notdone)+C(notdone).*cos(sigma(notdone)).*...  	//        (-1+2.*cos2sigmam(notdone).^2)));  	lambda = L + (1 - C) * f * Math.Sin (alpha) * (sigma + C * Math.Sin (sigma) * (cos2sigmam + C * Math.Cos (sigma) * (-1 + 2 * Math.Pow (cos2sigmam' 2))));  	//    %disp(['then' lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    % correct for convergence failure in the case of essentially antipodal  	//    % points  	// Correct for convergence failure in the case of essentially antipodal points  	//    if any(lambda(notdone) > pi)  	if (lambda > Math.PI) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambdaold(lambda>pi) = pi;  		lambdaold = Math.PI;  		//        lambda(lambda>pi) = pi;  		lambda = Math.PI;  		//    end  	}  	//    notdone = abs(lambda-lambdaold) > 1e-12;  	notdone = Math.Abs (lambda - lambdaold) > TargetAccuracy;  	//end  	// NOTE: In some cases "alpha" would return a "NaN".  If values are healthy'   	// remember them so we get a good distance calc.  	if (!double.IsNaN (alpha)) {  		goodlambda = lambda;  		goodalpha = alpha;  		goodsigma = sigma;  		goodcos2sigmam = cos2sigmam;  	}  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: while (notdone) {  	//    %disp(['lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    itercount = itercount+1;  	itercount++;  	//    if itercount > 50  	if (itercount > 50) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambda(notdone) = pi;  		lambda = Math.PI;  		//        break  		break;  		//    end  	}  	//    lambdaold(notdone) = lambda(notdone);  	lambdaold = lambda;  	//    sinsigma(notdone) = sqrt((cos(U2(notdone)).*sin(lambda(notdone)))...  	//        .^2+(cos(U1(notdone)).*sin(U2(notdone))-sin(U1(notdone)).*...  	//        cos(U2(notdone)).*cos(lambda(notdone))).^2);  	double sinsigma = Math.Sqrt (Math.Pow ((Math.Cos (U2) * Math.Sin (lambda))' 2) + Math.Pow ((Math.Cos (U1) * Math.Sin (U2) - Math.Sin (U1) * Math.Cos (U2) * Math.Cos (lambda))' 2));  	//    cossigma(notdone) = sin(U1(notdone)).*sin(U2(notdone))+...  	//        cos(U1(notdone)).*cos(U2(notdone)).*cos(lambda(notdone));  	double cossigma = Math.Sin (U1) * Math.Sin (U2) + Math.Cos (U1) * Math.Cos (U2) * Math.Cos (lambda);  	//    % eliminate rare imaginary portions at limit of numerical precision:  	//    sinsigma(notdone)=real(sinsigma(notdone));  	//    cossigma(notdone)=real(cossigma(notdone));  	// Eliminate rare imaginary portions at limit of numerical precision:  	// ?  	//    sigma(notdone) = atan2(sinsigma(notdone)'cossigma(notdone));  	sigma = Math.Atan2 (sinsigma' cossigma);  	//    alpha(notdone) = asin(cos(U1(notdone)).*cos(U2(notdone)).*...  	//        sin(lambda(notdone))./sin(sigma(notdone)));  	alpha = Math.Asin (Math.Cos (U1) * Math.Cos (U2) * Math.Sin (lambda) / Math.Sin (sigma));  	//    cos2sigmam(notdone) = cos(sigma(notdone))-2*sin(U1(notdone)).*...  	//        sin(U2(notdone))./cos(alpha(notdone)).^2;  	cos2sigmam = Math.Cos (sigma) - 2.0 * Math.Sin (U1) * Math.Sin (U2) / Math.Pow (Math.Cos (alpha)' 2);  	//    C(notdone) = f/16*cos(alpha(notdone)).^2.*(4+f*(4-3*...  	//        cos(alpha(notdone)).^2));  	C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  	//    lambda(notdone) = L(notdone)+(1-C(notdone)).*f.*sin(alpha(notdone))...  	//        .*(sigma(notdone)+C(notdone).*sin(sigma(notdone)).*...  	//        (cos2sigmam(notdone)+C(notdone).*cos(sigma(notdone)).*...  	//        (-1+2.*cos2sigmam(notdone).^2)));  	lambda = L + (1 - C) * f * Math.Sin (alpha) * (sigma + C * Math.Sin (sigma) * (cos2sigmam + C * Math.Cos (sigma) * (-1 + 2 * Math.Pow (cos2sigmam' 2))));  	//    %disp(['then' lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    % correct for convergence failure in the case of essentially antipodal  	//    % points  	// Correct for convergence failure in the case of essentially antipodal points  	//    if any(lambda(notdone) > pi)  	if (lambda > Math.PI) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambdaold(lambda>pi) = pi;  		lambdaold = Math.PI;  		//        lambda(lambda>pi) = pi;  		lambda = Math.PI;  		//    end  	}  	//    notdone = abs(lambda-lambdaold) > 1e-12;  	notdone = Math.Abs (lambda - lambdaold) > TargetAccuracy;  	//end  	// NOTE: In some cases "alpha" would return a "NaN".  If values are healthy'   	// remember them so we get a good distance calc.  	if (!double.IsNaN (alpha)) {  		goodlambda = lambda;  		goodalpha = alpha;  		goodsigma = sigma;  		goodcos2sigmam = cos2sigmam;  	}  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: while (notdone) {  	//    %disp(['lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    itercount = itercount+1;  	itercount++;  	//    if itercount > 50  	if (itercount > 50) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambda(notdone) = pi;  		lambda = Math.PI;  		//        break  		break;  		//    end  	}  	//    lambdaold(notdone) = lambda(notdone);  	lambdaold = lambda;  	//    sinsigma(notdone) = sqrt((cos(U2(notdone)).*sin(lambda(notdone)))...  	//        .^2+(cos(U1(notdone)).*sin(U2(notdone))-sin(U1(notdone)).*...  	//        cos(U2(notdone)).*cos(lambda(notdone))).^2);  	double sinsigma = Math.Sqrt (Math.Pow ((Math.Cos (U2) * Math.Sin (lambda))' 2) + Math.Pow ((Math.Cos (U1) * Math.Sin (U2) - Math.Sin (U1) * Math.Cos (U2) * Math.Cos (lambda))' 2));  	//    cossigma(notdone) = sin(U1(notdone)).*sin(U2(notdone))+...  	//        cos(U1(notdone)).*cos(U2(notdone)).*cos(lambda(notdone));  	double cossigma = Math.Sin (U1) * Math.Sin (U2) + Math.Cos (U1) * Math.Cos (U2) * Math.Cos (lambda);  	//    % eliminate rare imaginary portions at limit of numerical precision:  	//    sinsigma(notdone)=real(sinsigma(notdone));  	//    cossigma(notdone)=real(cossigma(notdone));  	// Eliminate rare imaginary portions at limit of numerical precision:  	// ?  	//    sigma(notdone) = atan2(sinsigma(notdone)'cossigma(notdone));  	sigma = Math.Atan2 (sinsigma' cossigma);  	//    alpha(notdone) = asin(cos(U1(notdone)).*cos(U2(notdone)).*...  	//        sin(lambda(notdone))./sin(sigma(notdone)));  	alpha = Math.Asin (Math.Cos (U1) * Math.Cos (U2) * Math.Sin (lambda) / Math.Sin (sigma));  	//    cos2sigmam(notdone) = cos(sigma(notdone))-2*sin(U1(notdone)).*...  	//        sin(U2(notdone))./cos(alpha(notdone)).^2;  	cos2sigmam = Math.Cos (sigma) - 2.0 * Math.Sin (U1) * Math.Sin (U2) / Math.Pow (Math.Cos (alpha)' 2);  	//    C(notdone) = f/16*cos(alpha(notdone)).^2.*(4+f*(4-3*...  	//        cos(alpha(notdone)).^2));  	C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  	//    lambda(notdone) = L(notdone)+(1-C(notdone)).*f.*sin(alpha(notdone))...  	//        .*(sigma(notdone)+C(notdone).*sin(sigma(notdone)).*...  	//        (cos2sigmam(notdone)+C(notdone).*cos(sigma(notdone)).*...  	//        (-1+2.*cos2sigmam(notdone).^2)));  	lambda = L + (1 - C) * f * Math.Sin (alpha) * (sigma + C * Math.Sin (sigma) * (cos2sigmam + C * Math.Cos (sigma) * (-1 + 2 * Math.Pow (cos2sigmam' 2))));  	//    %disp(['then' lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    % correct for convergence failure in the case of essentially antipodal  	//    % points  	// Correct for convergence failure in the case of essentially antipodal points  	//    if any(lambda(notdone) > pi)  	if (lambda > Math.PI) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambdaold(lambda>pi) = pi;  		lambdaold = Math.PI;  		//        lambda(lambda>pi) = pi;  		lambda = Math.PI;  		//    end  	}  	//    notdone = abs(lambda-lambdaold) > 1e-12;  	notdone = Math.Abs (lambda - lambdaold) > TargetAccuracy;  	//end  	// NOTE: In some cases "alpha" would return a "NaN".  If values are healthy'   	// remember them so we get a good distance calc.  	if (!double.IsNaN (alpha)) {  		goodlambda = lambda;  		goodalpha = alpha;  		goodsigma = sigma;  		goodcos2sigmam = cos2sigmam;  	}  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: while (notdone) {  	//    %disp(['lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    itercount = itercount+1;  	itercount++;  	//    if itercount > 50  	if (itercount > 50) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambda(notdone) = pi;  		lambda = Math.PI;  		//        break  		break;  		//    end  	}  	//    lambdaold(notdone) = lambda(notdone);  	lambdaold = lambda;  	//    sinsigma(notdone) = sqrt((cos(U2(notdone)).*sin(lambda(notdone)))...  	//        .^2+(cos(U1(notdone)).*sin(U2(notdone))-sin(U1(notdone)).*...  	//        cos(U2(notdone)).*cos(lambda(notdone))).^2);  	double sinsigma = Math.Sqrt (Math.Pow ((Math.Cos (U2) * Math.Sin (lambda))' 2) + Math.Pow ((Math.Cos (U1) * Math.Sin (U2) - Math.Sin (U1) * Math.Cos (U2) * Math.Cos (lambda))' 2));  	//    cossigma(notdone) = sin(U1(notdone)).*sin(U2(notdone))+...  	//        cos(U1(notdone)).*cos(U2(notdone)).*cos(lambda(notdone));  	double cossigma = Math.Sin (U1) * Math.Sin (U2) + Math.Cos (U1) * Math.Cos (U2) * Math.Cos (lambda);  	//    % eliminate rare imaginary portions at limit of numerical precision:  	//    sinsigma(notdone)=real(sinsigma(notdone));  	//    cossigma(notdone)=real(cossigma(notdone));  	// Eliminate rare imaginary portions at limit of numerical precision:  	// ?  	//    sigma(notdone) = atan2(sinsigma(notdone)'cossigma(notdone));  	sigma = Math.Atan2 (sinsigma' cossigma);  	//    alpha(notdone) = asin(cos(U1(notdone)).*cos(U2(notdone)).*...  	//        sin(lambda(notdone))./sin(sigma(notdone)));  	alpha = Math.Asin (Math.Cos (U1) * Math.Cos (U2) * Math.Sin (lambda) / Math.Sin (sigma));  	//    cos2sigmam(notdone) = cos(sigma(notdone))-2*sin(U1(notdone)).*...  	//        sin(U2(notdone))./cos(alpha(notdone)).^2;  	cos2sigmam = Math.Cos (sigma) - 2.0 * Math.Sin (U1) * Math.Sin (U2) / Math.Pow (Math.Cos (alpha)' 2);  	//    C(notdone) = f/16*cos(alpha(notdone)).^2.*(4+f*(4-3*...  	//        cos(alpha(notdone)).^2));  	C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  	//    lambda(notdone) = L(notdone)+(1-C(notdone)).*f.*sin(alpha(notdone))...  	//        .*(sigma(notdone)+C(notdone).*sin(sigma(notdone)).*...  	//        (cos2sigmam(notdone)+C(notdone).*cos(sigma(notdone)).*...  	//        (-1+2.*cos2sigmam(notdone).^2)));  	lambda = L + (1 - C) * f * Math.Sin (alpha) * (sigma + C * Math.Sin (sigma) * (cos2sigmam + C * Math.Cos (sigma) * (-1 + 2 * Math.Pow (cos2sigmam' 2))));  	//    %disp(['then' lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    % correct for convergence failure in the case of essentially antipodal  	//    % points  	// Correct for convergence failure in the case of essentially antipodal points  	//    if any(lambda(notdone) > pi)  	if (lambda > Math.PI) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambdaold(lambda>pi) = pi;  		lambdaold = Math.PI;  		//        lambda(lambda>pi) = pi;  		lambda = Math.PI;  		//    end  	}  	//    notdone = abs(lambda-lambdaold) > 1e-12;  	notdone = Math.Abs (lambda - lambdaold) > TargetAccuracy;  	//end  	// NOTE: In some cases "alpha" would return a "NaN".  If values are healthy'   	// remember them so we get a good distance calc.  	if (!double.IsNaN (alpha)) {  		goodlambda = lambda;  		goodalpha = alpha;  		goodsigma = sigma;  		goodcos2sigmam = cos2sigmam;  	}  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: while (notdone) {  	//    %disp(['lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    itercount = itercount+1;  	itercount++;  	//    if itercount > 50  	if (itercount > 50) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambda(notdone) = pi;  		lambda = Math.PI;  		//        break  		break;  		//    end  	}  	//    lambdaold(notdone) = lambda(notdone);  	lambdaold = lambda;  	//    sinsigma(notdone) = sqrt((cos(U2(notdone)).*sin(lambda(notdone)))...  	//        .^2+(cos(U1(notdone)).*sin(U2(notdone))-sin(U1(notdone)).*...  	//        cos(U2(notdone)).*cos(lambda(notdone))).^2);  	double sinsigma = Math.Sqrt (Math.Pow ((Math.Cos (U2) * Math.Sin (lambda))' 2) + Math.Pow ((Math.Cos (U1) * Math.Sin (U2) - Math.Sin (U1) * Math.Cos (U2) * Math.Cos (lambda))' 2));  	//    cossigma(notdone) = sin(U1(notdone)).*sin(U2(notdone))+...  	//        cos(U1(notdone)).*cos(U2(notdone)).*cos(lambda(notdone));  	double cossigma = Math.Sin (U1) * Math.Sin (U2) + Math.Cos (U1) * Math.Cos (U2) * Math.Cos (lambda);  	//    % eliminate rare imaginary portions at limit of numerical precision:  	//    sinsigma(notdone)=real(sinsigma(notdone));  	//    cossigma(notdone)=real(cossigma(notdone));  	// Eliminate rare imaginary portions at limit of numerical precision:  	// ?  	//    sigma(notdone) = atan2(sinsigma(notdone)'cossigma(notdone));  	sigma = Math.Atan2 (sinsigma' cossigma);  	//    alpha(notdone) = asin(cos(U1(notdone)).*cos(U2(notdone)).*...  	//        sin(lambda(notdone))./sin(sigma(notdone)));  	alpha = Math.Asin (Math.Cos (U1) * Math.Cos (U2) * Math.Sin (lambda) / Math.Sin (sigma));  	//    cos2sigmam(notdone) = cos(sigma(notdone))-2*sin(U1(notdone)).*...  	//        sin(U2(notdone))./cos(alpha(notdone)).^2;  	cos2sigmam = Math.Cos (sigma) - 2.0 * Math.Sin (U1) * Math.Sin (U2) / Math.Pow (Math.Cos (alpha)' 2);  	//    C(notdone) = f/16*cos(alpha(notdone)).^2.*(4+f*(4-3*...  	//        cos(alpha(notdone)).^2));  	C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  	//    lambda(notdone) = L(notdone)+(1-C(notdone)).*f.*sin(alpha(notdone))...  	//        .*(sigma(notdone)+C(notdone).*sin(sigma(notdone)).*...  	//        (cos2sigmam(notdone)+C(notdone).*cos(sigma(notdone)).*...  	//        (-1+2.*cos2sigmam(notdone).^2)));  	lambda = L + (1 - C) * f * Math.Sin (alpha) * (sigma + C * Math.Sin (sigma) * (cos2sigmam + C * Math.Cos (sigma) * (-1 + 2 * Math.Pow (cos2sigmam' 2))));  	//    %disp(['then' lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    % correct for convergence failure in the case of essentially antipodal  	//    % points  	// Correct for convergence failure in the case of essentially antipodal points  	//    if any(lambda(notdone) > pi)  	if (lambda > Math.PI) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambdaold(lambda>pi) = pi;  		lambdaold = Math.PI;  		//        lambda(lambda>pi) = pi;  		lambda = Math.PI;  		//    end  	}  	//    notdone = abs(lambda-lambdaold) > 1e-12;  	notdone = Math.Abs (lambda - lambdaold) > TargetAccuracy;  	//end  	// NOTE: In some cases "alpha" would return a "NaN".  If values are healthy'   	// remember them so we get a good distance calc.  	if (!double.IsNaN (alpha)) {  		goodlambda = lambda;  		goodalpha = alpha;  		goodsigma = sigma;  		goodcos2sigmam = cos2sigmam;  	}  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: while (notdone) {  	//    %disp(['lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    itercount = itercount+1;  	itercount++;  	//    if itercount > 50  	if (itercount > 50) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambda(notdone) = pi;  		lambda = Math.PI;  		//        break  		break;  		//    end  	}  	//    lambdaold(notdone) = lambda(notdone);  	lambdaold = lambda;  	//    sinsigma(notdone) = sqrt((cos(U2(notdone)).*sin(lambda(notdone)))...  	//        .^2+(cos(U1(notdone)).*sin(U2(notdone))-sin(U1(notdone)).*...  	//        cos(U2(notdone)).*cos(lambda(notdone))).^2);  	double sinsigma = Math.Sqrt (Math.Pow ((Math.Cos (U2) * Math.Sin (lambda))' 2) + Math.Pow ((Math.Cos (U1) * Math.Sin (U2) - Math.Sin (U1) * Math.Cos (U2) * Math.Cos (lambda))' 2));  	//    cossigma(notdone) = sin(U1(notdone)).*sin(U2(notdone))+...  	//        cos(U1(notdone)).*cos(U2(notdone)).*cos(lambda(notdone));  	double cossigma = Math.Sin (U1) * Math.Sin (U2) + Math.Cos (U1) * Math.Cos (U2) * Math.Cos (lambda);  	//    % eliminate rare imaginary portions at limit of numerical precision:  	//    sinsigma(notdone)=real(sinsigma(notdone));  	//    cossigma(notdone)=real(cossigma(notdone));  	// Eliminate rare imaginary portions at limit of numerical precision:  	// ?  	//    sigma(notdone) = atan2(sinsigma(notdone)'cossigma(notdone));  	sigma = Math.Atan2 (sinsigma' cossigma);  	//    alpha(notdone) = asin(cos(U1(notdone)).*cos(U2(notdone)).*...  	//        sin(lambda(notdone))./sin(sigma(notdone)));  	alpha = Math.Asin (Math.Cos (U1) * Math.Cos (U2) * Math.Sin (lambda) / Math.Sin (sigma));  	//    cos2sigmam(notdone) = cos(sigma(notdone))-2*sin(U1(notdone)).*...  	//        sin(U2(notdone))./cos(alpha(notdone)).^2;  	cos2sigmam = Math.Cos (sigma) - 2.0 * Math.Sin (U1) * Math.Sin (U2) / Math.Pow (Math.Cos (alpha)' 2);  	//    C(notdone) = f/16*cos(alpha(notdone)).^2.*(4+f*(4-3*...  	//        cos(alpha(notdone)).^2));  	C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  	//    lambda(notdone) = L(notdone)+(1-C(notdone)).*f.*sin(alpha(notdone))...  	//        .*(sigma(notdone)+C(notdone).*sin(sigma(notdone)).*...  	//        (cos2sigmam(notdone)+C(notdone).*cos(sigma(notdone)).*...  	//        (-1+2.*cos2sigmam(notdone).^2)));  	lambda = L + (1 - C) * f * Math.Sin (alpha) * (sigma + C * Math.Sin (sigma) * (cos2sigmam + C * Math.Cos (sigma) * (-1 + 2 * Math.Pow (cos2sigmam' 2))));  	//    %disp(['then' lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    % correct for convergence failure in the case of essentially antipodal  	//    % points  	// Correct for convergence failure in the case of essentially antipodal points  	//    if any(lambda(notdone) > pi)  	if (lambda > Math.PI) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambdaold(lambda>pi) = pi;  		lambdaold = Math.PI;  		//        lambda(lambda>pi) = pi;  		lambda = Math.PI;  		//    end  	}  	//    notdone = abs(lambda-lambdaold) > 1e-12;  	notdone = Math.Abs (lambda - lambdaold) > TargetAccuracy;  	//end  	// NOTE: In some cases "alpha" would return a "NaN".  If values are healthy'   	// remember them so we get a good distance calc.  	if (!double.IsNaN (alpha)) {  		goodlambda = lambda;  		goodalpha = alpha;  		goodsigma = sigma;  		goodcos2sigmam = cos2sigmam;  	}  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: while (notdone) {  	//    %disp(['lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    itercount = itercount+1;  	itercount++;  	//    if itercount > 50  	if (itercount > 50) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambda(notdone) = pi;  		lambda = Math.PI;  		//        break  		break;  		//    end  	}  	//    lambdaold(notdone) = lambda(notdone);  	lambdaold = lambda;  	//    sinsigma(notdone) = sqrt((cos(U2(notdone)).*sin(lambda(notdone)))...  	//        .^2+(cos(U1(notdone)).*sin(U2(notdone))-sin(U1(notdone)).*...  	//        cos(U2(notdone)).*cos(lambda(notdone))).^2);  	double sinsigma = Math.Sqrt (Math.Pow ((Math.Cos (U2) * Math.Sin (lambda))' 2) + Math.Pow ((Math.Cos (U1) * Math.Sin (U2) - Math.Sin (U1) * Math.Cos (U2) * Math.Cos (lambda))' 2));  	//    cossigma(notdone) = sin(U1(notdone)).*sin(U2(notdone))+...  	//        cos(U1(notdone)).*cos(U2(notdone)).*cos(lambda(notdone));  	double cossigma = Math.Sin (U1) * Math.Sin (U2) + Math.Cos (U1) * Math.Cos (U2) * Math.Cos (lambda);  	//    % eliminate rare imaginary portions at limit of numerical precision:  	//    sinsigma(notdone)=real(sinsigma(notdone));  	//    cossigma(notdone)=real(cossigma(notdone));  	// Eliminate rare imaginary portions at limit of numerical precision:  	// ?  	//    sigma(notdone) = atan2(sinsigma(notdone)'cossigma(notdone));  	sigma = Math.Atan2 (sinsigma' cossigma);  	//    alpha(notdone) = asin(cos(U1(notdone)).*cos(U2(notdone)).*...  	//        sin(lambda(notdone))./sin(sigma(notdone)));  	alpha = Math.Asin (Math.Cos (U1) * Math.Cos (U2) * Math.Sin (lambda) / Math.Sin (sigma));  	//    cos2sigmam(notdone) = cos(sigma(notdone))-2*sin(U1(notdone)).*...  	//        sin(U2(notdone))./cos(alpha(notdone)).^2;  	cos2sigmam = Math.Cos (sigma) - 2.0 * Math.Sin (U1) * Math.Sin (U2) / Math.Pow (Math.Cos (alpha)' 2);  	//    C(notdone) = f/16*cos(alpha(notdone)).^2.*(4+f*(4-3*...  	//        cos(alpha(notdone)).^2));  	C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  	//    lambda(notdone) = L(notdone)+(1-C(notdone)).*f.*sin(alpha(notdone))...  	//        .*(sigma(notdone)+C(notdone).*sin(sigma(notdone)).*...  	//        (cos2sigmam(notdone)+C(notdone).*cos(sigma(notdone)).*...  	//        (-1+2.*cos2sigmam(notdone).^2)));  	lambda = L + (1 - C) * f * Math.Sin (alpha) * (sigma + C * Math.Sin (sigma) * (cos2sigmam + C * Math.Cos (sigma) * (-1 + 2 * Math.Pow (cos2sigmam' 2))));  	//    %disp(['then' lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    % correct for convergence failure in the case of essentially antipodal  	//    % points  	// Correct for convergence failure in the case of essentially antipodal points  	//    if any(lambda(notdone) > pi)  	if (lambda > Math.PI) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambdaold(lambda>pi) = pi;  		lambdaold = Math.PI;  		//        lambda(lambda>pi) = pi;  		lambda = Math.PI;  		//    end  	}  	//    notdone = abs(lambda-lambdaold) > 1e-12;  	notdone = Math.Abs (lambda - lambdaold) > TargetAccuracy;  	//end  	// NOTE: In some cases "alpha" would return a "NaN".  If values are healthy'   	// remember them so we get a good distance calc.  	if (!double.IsNaN (alpha)) {  		goodlambda = lambda;  		goodalpha = alpha;  		goodsigma = sigma;  		goodcos2sigmam = cos2sigmam;  	}  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: while (notdone) {  	//    %disp(['lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    itercount = itercount+1;  	itercount++;  	//    if itercount > 50  	if (itercount > 50) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambda(notdone) = pi;  		lambda = Math.PI;  		//        break  		break;  		//    end  	}  	//    lambdaold(notdone) = lambda(notdone);  	lambdaold = lambda;  	//    sinsigma(notdone) = sqrt((cos(U2(notdone)).*sin(lambda(notdone)))...  	//        .^2+(cos(U1(notdone)).*sin(U2(notdone))-sin(U1(notdone)).*...  	//        cos(U2(notdone)).*cos(lambda(notdone))).^2);  	double sinsigma = Math.Sqrt (Math.Pow ((Math.Cos (U2) * Math.Sin (lambda))' 2) + Math.Pow ((Math.Cos (U1) * Math.Sin (U2) - Math.Sin (U1) * Math.Cos (U2) * Math.Cos (lambda))' 2));  	//    cossigma(notdone) = sin(U1(notdone)).*sin(U2(notdone))+...  	//        cos(U1(notdone)).*cos(U2(notdone)).*cos(lambda(notdone));  	double cossigma = Math.Sin (U1) * Math.Sin (U2) + Math.Cos (U1) * Math.Cos (U2) * Math.Cos (lambda);  	//    % eliminate rare imaginary portions at limit of numerical precision:  	//    sinsigma(notdone)=real(sinsigma(notdone));  	//    cossigma(notdone)=real(cossigma(notdone));  	// Eliminate rare imaginary portions at limit of numerical precision:  	// ?  	//    sigma(notdone) = atan2(sinsigma(notdone)'cossigma(notdone));  	sigma = Math.Atan2 (sinsigma' cossigma);  	//    alpha(notdone) = asin(cos(U1(notdone)).*cos(U2(notdone)).*...  	//        sin(lambda(notdone))./sin(sigma(notdone)));  	alpha = Math.Asin (Math.Cos (U1) * Math.Cos (U2) * Math.Sin (lambda) / Math.Sin (sigma));  	//    cos2sigmam(notdone) = cos(sigma(notdone))-2*sin(U1(notdone)).*...  	//        sin(U2(notdone))./cos(alpha(notdone)).^2;  	cos2sigmam = Math.Cos (sigma) - 2.0 * Math.Sin (U1) * Math.Sin (U2) / Math.Pow (Math.Cos (alpha)' 2);  	//    C(notdone) = f/16*cos(alpha(notdone)).^2.*(4+f*(4-3*...  	//        cos(alpha(notdone)).^2));  	C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  	//    lambda(notdone) = L(notdone)+(1-C(notdone)).*f.*sin(alpha(notdone))...  	//        .*(sigma(notdone)+C(notdone).*sin(sigma(notdone)).*...  	//        (cos2sigmam(notdone)+C(notdone).*cos(sigma(notdone)).*...  	//        (-1+2.*cos2sigmam(notdone).^2)));  	lambda = L + (1 - C) * f * Math.Sin (alpha) * (sigma + C * Math.Sin (sigma) * (cos2sigmam + C * Math.Cos (sigma) * (-1 + 2 * Math.Pow (cos2sigmam' 2))));  	//    %disp(['then' lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    % correct for convergence failure in the case of essentially antipodal  	//    % points  	// Correct for convergence failure in the case of essentially antipodal points  	//    if any(lambda(notdone) > pi)  	if (lambda > Math.PI) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambdaold(lambda>pi) = pi;  		lambdaold = Math.PI;  		//        lambda(lambda>pi) = pi;  		lambda = Math.PI;  		//    end  	}  	//    notdone = abs(lambda-lambdaold) > 1e-12;  	notdone = Math.Abs (lambda - lambdaold) > TargetAccuracy;  	//end  	// NOTE: In some cases "alpha" would return a "NaN".  If values are healthy'   	// remember them so we get a good distance calc.  	if (!double.IsNaN (alpha)) {  		goodlambda = lambda;  		goodalpha = alpha;  		goodsigma = sigma;  		goodcos2sigmam = cos2sigmam;  	}  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: while (notdone) {  	//    %disp(['lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    itercount = itercount+1;  	itercount++;  	//    if itercount > 50  	if (itercount > 50) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambda(notdone) = pi;  		lambda = Math.PI;  		//        break  		break;  		//    end  	}  	//    lambdaold(notdone) = lambda(notdone);  	lambdaold = lambda;  	//    sinsigma(notdone) = sqrt((cos(U2(notdone)).*sin(lambda(notdone)))...  	//        .^2+(cos(U1(notdone)).*sin(U2(notdone))-sin(U1(notdone)).*...  	//        cos(U2(notdone)).*cos(lambda(notdone))).^2);  	double sinsigma = Math.Sqrt (Math.Pow ((Math.Cos (U2) * Math.Sin (lambda))' 2) + Math.Pow ((Math.Cos (U1) * Math.Sin (U2) - Math.Sin (U1) * Math.Cos (U2) * Math.Cos (lambda))' 2));  	//    cossigma(notdone) = sin(U1(notdone)).*sin(U2(notdone))+...  	//        cos(U1(notdone)).*cos(U2(notdone)).*cos(lambda(notdone));  	double cossigma = Math.Sin (U1) * Math.Sin (U2) + Math.Cos (U1) * Math.Cos (U2) * Math.Cos (lambda);  	//    % eliminate rare imaginary portions at limit of numerical precision:  	//    sinsigma(notdone)=real(sinsigma(notdone));  	//    cossigma(notdone)=real(cossigma(notdone));  	// Eliminate rare imaginary portions at limit of numerical precision:  	// ?  	//    sigma(notdone) = atan2(sinsigma(notdone)'cossigma(notdone));  	sigma = Math.Atan2 (sinsigma' cossigma);  	//    alpha(notdone) = asin(cos(U1(notdone)).*cos(U2(notdone)).*...  	//        sin(lambda(notdone))./sin(sigma(notdone)));  	alpha = Math.Asin (Math.Cos (U1) * Math.Cos (U2) * Math.Sin (lambda) / Math.Sin (sigma));  	//    cos2sigmam(notdone) = cos(sigma(notdone))-2*sin(U1(notdone)).*...  	//        sin(U2(notdone))./cos(alpha(notdone)).^2;  	cos2sigmam = Math.Cos (sigma) - 2.0 * Math.Sin (U1) * Math.Sin (U2) / Math.Pow (Math.Cos (alpha)' 2);  	//    C(notdone) = f/16*cos(alpha(notdone)).^2.*(4+f*(4-3*...  	//        cos(alpha(notdone)).^2));  	C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  	//    lambda(notdone) = L(notdone)+(1-C(notdone)).*f.*sin(alpha(notdone))...  	//        .*(sigma(notdone)+C(notdone).*sin(sigma(notdone)).*...  	//        (cos2sigmam(notdone)+C(notdone).*cos(sigma(notdone)).*...  	//        (-1+2.*cos2sigmam(notdone).^2)));  	lambda = L + (1 - C) * f * Math.Sin (alpha) * (sigma + C * Math.Sin (sigma) * (cos2sigmam + C * Math.Cos (sigma) * (-1 + 2 * Math.Pow (cos2sigmam' 2))));  	//    %disp(['then' lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    % correct for convergence failure in the case of essentially antipodal  	//    % points  	// Correct for convergence failure in the case of essentially antipodal points  	//    if any(lambda(notdone) > pi)  	if (lambda > Math.PI) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambdaold(lambda>pi) = pi;  		lambdaold = Math.PI;  		//        lambda(lambda>pi) = pi;  		lambda = Math.PI;  		//    end  	}  	//    notdone = abs(lambda-lambdaold) > 1e-12;  	notdone = Math.Abs (lambda - lambdaold) > TargetAccuracy;  	//end  	// NOTE: In some cases "alpha" would return a "NaN".  If values are healthy'   	// remember them so we get a good distance calc.  	if (!double.IsNaN (alpha)) {  		goodlambda = lambda;  		goodalpha = alpha;  		goodsigma = sigma;  		goodcos2sigmam = cos2sigmam;  	}  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: while (notdone) {  	//    %disp(['lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    itercount = itercount+1;  	itercount++;  	//    if itercount > 50  	if (itercount > 50) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambda(notdone) = pi;  		lambda = Math.PI;  		//        break  		break;  		//    end  	}  	//    lambdaold(notdone) = lambda(notdone);  	lambdaold = lambda;  	//    sinsigma(notdone) = sqrt((cos(U2(notdone)).*sin(lambda(notdone)))...  	//        .^2+(cos(U1(notdone)).*sin(U2(notdone))-sin(U1(notdone)).*...  	//        cos(U2(notdone)).*cos(lambda(notdone))).^2);  	double sinsigma = Math.Sqrt (Math.Pow ((Math.Cos (U2) * Math.Sin (lambda))' 2) + Math.Pow ((Math.Cos (U1) * Math.Sin (U2) - Math.Sin (U1) * Math.Cos (U2) * Math.Cos (lambda))' 2));  	//    cossigma(notdone) = sin(U1(notdone)).*sin(U2(notdone))+...  	//        cos(U1(notdone)).*cos(U2(notdone)).*cos(lambda(notdone));  	double cossigma = Math.Sin (U1) * Math.Sin (U2) + Math.Cos (U1) * Math.Cos (U2) * Math.Cos (lambda);  	//    % eliminate rare imaginary portions at limit of numerical precision:  	//    sinsigma(notdone)=real(sinsigma(notdone));  	//    cossigma(notdone)=real(cossigma(notdone));  	// Eliminate rare imaginary portions at limit of numerical precision:  	// ?  	//    sigma(notdone) = atan2(sinsigma(notdone)'cossigma(notdone));  	sigma = Math.Atan2 (sinsigma' cossigma);  	//    alpha(notdone) = asin(cos(U1(notdone)).*cos(U2(notdone)).*...  	//        sin(lambda(notdone))./sin(sigma(notdone)));  	alpha = Math.Asin (Math.Cos (U1) * Math.Cos (U2) * Math.Sin (lambda) / Math.Sin (sigma));  	//    cos2sigmam(notdone) = cos(sigma(notdone))-2*sin(U1(notdone)).*...  	//        sin(U2(notdone))./cos(alpha(notdone)).^2;  	cos2sigmam = Math.Cos (sigma) - 2.0 * Math.Sin (U1) * Math.Sin (U2) / Math.Pow (Math.Cos (alpha)' 2);  	//    C(notdone) = f/16*cos(alpha(notdone)).^2.*(4+f*(4-3*...  	//        cos(alpha(notdone)).^2));  	C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  	//    lambda(notdone) = L(notdone)+(1-C(notdone)).*f.*sin(alpha(notdone))...  	//        .*(sigma(notdone)+C(notdone).*sin(sigma(notdone)).*...  	//        (cos2sigmam(notdone)+C(notdone).*cos(sigma(notdone)).*...  	//        (-1+2.*cos2sigmam(notdone).^2)));  	lambda = L + (1 - C) * f * Math.Sin (alpha) * (sigma + C * Math.Sin (sigma) * (cos2sigmam + C * Math.Cos (sigma) * (-1 + 2 * Math.Pow (cos2sigmam' 2))));  	//    %disp(['then' lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    % correct for convergence failure in the case of essentially antipodal  	//    % points  	// Correct for convergence failure in the case of essentially antipodal points  	//    if any(lambda(notdone) > pi)  	if (lambda > Math.PI) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambdaold(lambda>pi) = pi;  		lambdaold = Math.PI;  		//        lambda(lambda>pi) = pi;  		lambda = Math.PI;  		//    end  	}  	//    notdone = abs(lambda-lambdaold) > 1e-12;  	notdone = Math.Abs (lambda - lambdaold) > TargetAccuracy;  	//end  	// NOTE: In some cases "alpha" would return a "NaN".  If values are healthy'   	// remember them so we get a good distance calc.  	if (!double.IsNaN (alpha)) {  		goodlambda = lambda;  		goodalpha = alpha;  		goodsigma = sigma;  		goodcos2sigmam = cos2sigmam;  	}  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: while (notdone) {  	//    %disp(['lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    itercount = itercount+1;  	itercount++;  	//    if itercount > 50  	if (itercount > 50) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambda(notdone) = pi;  		lambda = Math.PI;  		//        break  		break;  		//    end  	}  	//    lambdaold(notdone) = lambda(notdone);  	lambdaold = lambda;  	//    sinsigma(notdone) = sqrt((cos(U2(notdone)).*sin(lambda(notdone)))...  	//        .^2+(cos(U1(notdone)).*sin(U2(notdone))-sin(U1(notdone)).*...  	//        cos(U2(notdone)).*cos(lambda(notdone))).^2);  	double sinsigma = Math.Sqrt (Math.Pow ((Math.Cos (U2) * Math.Sin (lambda))' 2) + Math.Pow ((Math.Cos (U1) * Math.Sin (U2) - Math.Sin (U1) * Math.Cos (U2) * Math.Cos (lambda))' 2));  	//    cossigma(notdone) = sin(U1(notdone)).*sin(U2(notdone))+...  	//        cos(U1(notdone)).*cos(U2(notdone)).*cos(lambda(notdone));  	double cossigma = Math.Sin (U1) * Math.Sin (U2) + Math.Cos (U1) * Math.Cos (U2) * Math.Cos (lambda);  	//    % eliminate rare imaginary portions at limit of numerical precision:  	//    sinsigma(notdone)=real(sinsigma(notdone));  	//    cossigma(notdone)=real(cossigma(notdone));  	// Eliminate rare imaginary portions at limit of numerical precision:  	// ?  	//    sigma(notdone) = atan2(sinsigma(notdone)'cossigma(notdone));  	sigma = Math.Atan2 (sinsigma' cossigma);  	//    alpha(notdone) = asin(cos(U1(notdone)).*cos(U2(notdone)).*...  	//        sin(lambda(notdone))./sin(sigma(notdone)));  	alpha = Math.Asin (Math.Cos (U1) * Math.Cos (U2) * Math.Sin (lambda) / Math.Sin (sigma));  	//    cos2sigmam(notdone) = cos(sigma(notdone))-2*sin(U1(notdone)).*...  	//        sin(U2(notdone))./cos(alpha(notdone)).^2;  	cos2sigmam = Math.Cos (sigma) - 2.0 * Math.Sin (U1) * Math.Sin (U2) / Math.Pow (Math.Cos (alpha)' 2);  	//    C(notdone) = f/16*cos(alpha(notdone)).^2.*(4+f*(4-3*...  	//        cos(alpha(notdone)).^2));  	C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  	//    lambda(notdone) = L(notdone)+(1-C(notdone)).*f.*sin(alpha(notdone))...  	//        .*(sigma(notdone)+C(notdone).*sin(sigma(notdone)).*...  	//        (cos2sigmam(notdone)+C(notdone).*cos(sigma(notdone)).*...  	//        (-1+2.*cos2sigmam(notdone).^2)));  	lambda = L + (1 - C) * f * Math.Sin (alpha) * (sigma + C * Math.Sin (sigma) * (cos2sigmam + C * Math.Cos (sigma) * (-1 + 2 * Math.Pow (cos2sigmam' 2))));  	//    %disp(['then' lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    % correct for convergence failure in the case of essentially antipodal  	//    % points  	// Correct for convergence failure in the case of essentially antipodal points  	//    if any(lambda(notdone) > pi)  	if (lambda > Math.PI) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambdaold(lambda>pi) = pi;  		lambdaold = Math.PI;  		//        lambda(lambda>pi) = pi;  		lambda = Math.PI;  		//    end  	}  	//    notdone = abs(lambda-lambdaold) > 1e-12;  	notdone = Math.Abs (lambda - lambdaold) > TargetAccuracy;  	//end  	// NOTE: In some cases "alpha" would return a "NaN".  If values are healthy'   	// remember them so we get a good distance calc.  	if (!double.IsNaN (alpha)) {  		goodlambda = lambda;  		goodalpha = alpha;  		goodsigma = sigma;  		goodcos2sigmam = cos2sigmam;  	}  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: while (notdone) {  	//    %disp(['lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    itercount = itercount+1;  	itercount++;  	//    if itercount > 50  	if (itercount > 50) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambda(notdone) = pi;  		lambda = Math.PI;  		//        break  		break;  		//    end  	}  	//    lambdaold(notdone) = lambda(notdone);  	lambdaold = lambda;  	//    sinsigma(notdone) = sqrt((cos(U2(notdone)).*sin(lambda(notdone)))...  	//        .^2+(cos(U1(notdone)).*sin(U2(notdone))-sin(U1(notdone)).*...  	//        cos(U2(notdone)).*cos(lambda(notdone))).^2);  	double sinsigma = Math.Sqrt (Math.Pow ((Math.Cos (U2) * Math.Sin (lambda))' 2) + Math.Pow ((Math.Cos (U1) * Math.Sin (U2) - Math.Sin (U1) * Math.Cos (U2) * Math.Cos (lambda))' 2));  	//    cossigma(notdone) = sin(U1(notdone)).*sin(U2(notdone))+...  	//        cos(U1(notdone)).*cos(U2(notdone)).*cos(lambda(notdone));  	double cossigma = Math.Sin (U1) * Math.Sin (U2) + Math.Cos (U1) * Math.Cos (U2) * Math.Cos (lambda);  	//    % eliminate rare imaginary portions at limit of numerical precision:  	//    sinsigma(notdone)=real(sinsigma(notdone));  	//    cossigma(notdone)=real(cossigma(notdone));  	// Eliminate rare imaginary portions at limit of numerical precision:  	// ?  	//    sigma(notdone) = atan2(sinsigma(notdone)'cossigma(notdone));  	sigma = Math.Atan2 (sinsigma' cossigma);  	//    alpha(notdone) = asin(cos(U1(notdone)).*cos(U2(notdone)).*...  	//        sin(lambda(notdone))./sin(sigma(notdone)));  	alpha = Math.Asin (Math.Cos (U1) * Math.Cos (U2) * Math.Sin (lambda) / Math.Sin (sigma));  	//    cos2sigmam(notdone) = cos(sigma(notdone))-2*sin(U1(notdone)).*...  	//        sin(U2(notdone))./cos(alpha(notdone)).^2;  	cos2sigmam = Math.Cos (sigma) - 2.0 * Math.Sin (U1) * Math.Sin (U2) / Math.Pow (Math.Cos (alpha)' 2);  	//    C(notdone) = f/16*cos(alpha(notdone)).^2.*(4+f*(4-3*...  	//        cos(alpha(notdone)).^2));  	C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  	//    lambda(notdone) = L(notdone)+(1-C(notdone)).*f.*sin(alpha(notdone))...  	//        .*(sigma(notdone)+C(notdone).*sin(sigma(notdone)).*...  	//        (cos2sigmam(notdone)+C(notdone).*cos(sigma(notdone)).*...  	//        (-1+2.*cos2sigmam(notdone).^2)));  	lambda = L + (1 - C) * f * Math.Sin (alpha) * (sigma + C * Math.Sin (sigma) * (cos2sigmam + C * Math.Cos (sigma) * (-1 + 2 * Math.Pow (cos2sigmam' 2))));  	//    %disp(['then' lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    % correct for convergence failure in the case of essentially antipodal  	//    % points  	// Correct for convergence failure in the case of essentially antipodal points  	//    if any(lambda(notdone) > pi)  	if (lambda > Math.PI) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambdaold(lambda>pi) = pi;  		lambdaold = Math.PI;  		//        lambda(lambda>pi) = pi;  		lambda = Math.PI;  		//    end  	}  	//    notdone = abs(lambda-lambdaold) > 1e-12;  	notdone = Math.Abs (lambda - lambdaold) > TargetAccuracy;  	//end  	// NOTE: In some cases "alpha" would return a "NaN".  If values are healthy'   	// remember them so we get a good distance calc.  	if (!double.IsNaN (alpha)) {  		goodlambda = lambda;  		goodalpha = alpha;  		goodsigma = sigma;  		goodcos2sigmam = cos2sigmam;  	}  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: if (itercount > 50) {  	//        if ~warninggiven  	//if (!warninggiven)  	//{  	//    //            warning(['Essentially antipodal points encountered. ' ...  	//    //                'Precision may be reduced slightly.']);  	//    warninggiven = true;  	//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  	//}  	//        end  	//        lambda(notdone) = pi;  	lambda = Math.PI;  	//        break  	break;  	//    end  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: cos2sigmam = Math.Cos (sigma) - 2.0 * Math.Sin (U1) * Math.Sin (U2) / Math.Pow (Math.Cos (alpha)' 2);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: cos2sigmam = Math.Cos (sigma) - 2.0 * Math.Sin (U1) * Math.Sin (U2) / Math.Pow (Math.Cos (alpha)' 2);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: lambda = L + (1 - C) * f * Math.Sin (alpha) * (sigma + C * Math.Sin (sigma) * (cos2sigmam + C * Math.Cos (sigma) * (-1 + 2 * Math.Pow (cos2sigmam' 2))));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: lambda = L + (1 - C) * f * Math.Sin (alpha) * (sigma + C * Math.Sin (sigma) * (cos2sigmam + C * Math.Cos (sigma) * (-1 + 2 * Math.Pow (cos2sigmam' 2))));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: if (kidx)  	a12 = a12 + 2 * Math.PI;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: a12 = a12 + 2 * Math.PI;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: if (lat1tr <= -90.0)  	a12 = 0;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,BearingTo,The following statement contains a magic number: if (lat1tr >= 90)  	a12 = Math.PI;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: a = Math.Pow (sinlat' 2) + Math.Cos (lat1) * Math.Cos (lat2) * Math.Pow (sinlon' 2);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: a = Math.Pow (sinlat' 2) + Math.Cos (lat1) * Math.Cos (lat2) * Math.Pow (sinlon' 2);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: if (Math.Abs (Math.PI * 0.5 - Math.Abs (lat1)) < 1E-10) {  	lat1 = Math.Sign (lat1) * (Math.PI * 0.5 - 1E-10);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: if (Math.Abs (Math.PI * 0.5 - Math.Abs (lat1)) < 1E-10) {  	lat1 = Math.Sign (lat1) * (Math.PI * 0.5 - 1E-10);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: if (Math.Abs (Math.PI * 0.5 - Math.Abs (lat1)) < 1E-10) {  	lat1 = Math.Sign (lat1) * (Math.PI * 0.5 - 1E-10);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: if (Math.Abs (Math.PI * 0.5 - Math.Abs (lat1)) < 1E-10) {  	lat1 = Math.Sign (lat1) * (Math.PI * 0.5 - 1E-10);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: lat1 = Math.Sign (lat1) * (Math.PI * 0.5 - 1E-10);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: lat1 = Math.Sign (lat1) * (Math.PI * 0.5 - 1E-10);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: if (Math.Abs (Math.PI * 0.5 - Math.Abs (lat2)) < 1E-10) {  	lat2 = Math.Sign (lat2) * (Math.PI * 0.5 - 1E-10);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: if (Math.Abs (Math.PI * 0.5 - Math.Abs (lat2)) < 1E-10) {  	lat2 = Math.Sign (lat2) * (Math.PI * 0.5 - 1E-10);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: if (Math.Abs (Math.PI * 0.5 - Math.Abs (lat2)) < 1E-10) {  	lat2 = Math.Sign (lat2) * (Math.PI * 0.5 - 1E-10);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: if (Math.Abs (Math.PI * 0.5 - Math.Abs (lat2)) < 1E-10) {  	lat2 = Math.Sign (lat2) * (Math.PI * 0.5 - 1E-10);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: lat2 = Math.Sign (lat2) * (Math.PI * 0.5 - 1E-10);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: lat2 = Math.Sign (lat2) * (Math.PI * 0.5 - 1E-10);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: lon1 = lon1 % (2 * Math.PI);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: lon2 = lon2 % (2 * Math.PI);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: if (L > Math.PI) {  	L = 2.0 * Math.PI - L;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: L = 2.0 * Math.PI - L;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: while (notdone) {  	//    %disp(['lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    itercount = itercount+1;  	itercount++;  	//    if itercount > 50  	if (itercount > 50) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambda(notdone) = pi;  		lambda = Math.PI;  		//        break  		break;  		//    end  	}  	//    lambdaold(notdone) = lambda(notdone);  	lambdaold = lambda;  	//    sinsigma(notdone) = sqrt((cos(U2(notdone)).*sin(lambda(notdone)))...  	//        .^2+(cos(U1(notdone)).*sin(U2(notdone))-sin(U1(notdone)).*...  	//        cos(U2(notdone)).*cos(lambda(notdone))).^2);  	double sinsigma = Math.Sqrt (Math.Pow ((Math.Cos (U2) * Math.Sin (lambda))' 2) + Math.Pow ((Math.Cos (U1) * Math.Sin (U2) - Math.Sin (U1) * Math.Cos (U2) * Math.Cos (lambda))' 2));  	//    cossigma(notdone) = sin(U1(notdone)).*sin(U2(notdone))+...  	//        cos(U1(notdone)).*cos(U2(notdone)).*cos(lambda(notdone));  	double cossigma = Math.Sin (U1) * Math.Sin (U2) + Math.Cos (U1) * Math.Cos (U2) * Math.Cos (lambda);  	//    % eliminate rare imaginary portions at limit of numerical precision:  	//    sinsigma(notdone)=real(sinsigma(notdone));  	//    cossigma(notdone)=real(cossigma(notdone));  	// Eliminate rare imaginary portions at limit of numerical precision:  	// ?  	//    sigma(notdone) = atan2(sinsigma(notdone)'cossigma(notdone));  	sigma = Math.Atan2 (sinsigma' cossigma);  	//    alpha(notdone) = asin(cos(U1(notdone)).*cos(U2(notdone)).*...  	//        sin(lambda(notdone))./sin(sigma(notdone)));  	alpha = Math.Asin (Math.Cos (U1) * Math.Cos (U2) * Math.Sin (lambda) / Math.Sin (sigma));  	//    cos2sigmam(notdone) = cos(sigma(notdone))-2*sin(U1(notdone)).*...  	//        sin(U2(notdone))./cos(alpha(notdone)).^2;  	cos2sigmam = Math.Cos (sigma) - 2.0 * Math.Sin (U1) * Math.Sin (U2) / Math.Pow (Math.Cos (alpha)' 2);  	//    C(notdone) = f/16*cos(alpha(notdone)).^2.*(4+f*(4-3*...  	//        cos(alpha(notdone)).^2));  	C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  	//    lambda(notdone) = L(notdone)+(1-C(notdone)).*f.*sin(alpha(notdone))...  	//        .*(sigma(notdone)+C(notdone).*sin(sigma(notdone)).*...  	//        (cos2sigmam(notdone)+C(notdone).*cos(sigma(notdone)).*...  	//        (-1+2.*cos2sigmam(notdone).^2)));  	lambda = L + (1 - C) * f * Math.Sin (alpha) * (sigma + C * Math.Sin (sigma) * (cos2sigmam + C * Math.Cos (sigma) * (-1 + 2 * Math.Pow (cos2sigmam' 2))));  	//    %disp(['then' lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    % correct for convergence failure in the case of essentially antipodal  	//    % points  	// Correct for convergence failure in the case of essentially antipodal points  	//    if any(lambda(notdone) > pi)  	if (lambda > Math.PI) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambdaold(lambda>pi) = pi;  		lambdaold = Math.PI;  		//        lambda(lambda>pi) = pi;  		lambda = Math.PI;  		//    end  	}  	//    notdone = abs(lambda-lambdaold) > 1e-12;  	notdone = Math.Abs (lambda - lambdaold) > TargetAccuracy;  	//end  	// NOTE: In some cases "alpha" would return a "NaN".  If values are healthy'   	// remember them so we get a good distance calc.  	if (!double.IsNaN (alpha)) {  		goodalpha = alpha;  		goodsigma = sigma;  		goodcos2sigmam = cos2sigmam;  	}  	// Allow other threads some breathing room  	Thread.Sleep (0);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: while (notdone) {  	//    %disp(['lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    itercount = itercount+1;  	itercount++;  	//    if itercount > 50  	if (itercount > 50) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambda(notdone) = pi;  		lambda = Math.PI;  		//        break  		break;  		//    end  	}  	//    lambdaold(notdone) = lambda(notdone);  	lambdaold = lambda;  	//    sinsigma(notdone) = sqrt((cos(U2(notdone)).*sin(lambda(notdone)))...  	//        .^2+(cos(U1(notdone)).*sin(U2(notdone))-sin(U1(notdone)).*...  	//        cos(U2(notdone)).*cos(lambda(notdone))).^2);  	double sinsigma = Math.Sqrt (Math.Pow ((Math.Cos (U2) * Math.Sin (lambda))' 2) + Math.Pow ((Math.Cos (U1) * Math.Sin (U2) - Math.Sin (U1) * Math.Cos (U2) * Math.Cos (lambda))' 2));  	//    cossigma(notdone) = sin(U1(notdone)).*sin(U2(notdone))+...  	//        cos(U1(notdone)).*cos(U2(notdone)).*cos(lambda(notdone));  	double cossigma = Math.Sin (U1) * Math.Sin (U2) + Math.Cos (U1) * Math.Cos (U2) * Math.Cos (lambda);  	//    % eliminate rare imaginary portions at limit of numerical precision:  	//    sinsigma(notdone)=real(sinsigma(notdone));  	//    cossigma(notdone)=real(cossigma(notdone));  	// Eliminate rare imaginary portions at limit of numerical precision:  	// ?  	//    sigma(notdone) = atan2(sinsigma(notdone)'cossigma(notdone));  	sigma = Math.Atan2 (sinsigma' cossigma);  	//    alpha(notdone) = asin(cos(U1(notdone)).*cos(U2(notdone)).*...  	//        sin(lambda(notdone))./sin(sigma(notdone)));  	alpha = Math.Asin (Math.Cos (U1) * Math.Cos (U2) * Math.Sin (lambda) / Math.Sin (sigma));  	//    cos2sigmam(notdone) = cos(sigma(notdone))-2*sin(U1(notdone)).*...  	//        sin(U2(notdone))./cos(alpha(notdone)).^2;  	cos2sigmam = Math.Cos (sigma) - 2.0 * Math.Sin (U1) * Math.Sin (U2) / Math.Pow (Math.Cos (alpha)' 2);  	//    C(notdone) = f/16*cos(alpha(notdone)).^2.*(4+f*(4-3*...  	//        cos(alpha(notdone)).^2));  	C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  	//    lambda(notdone) = L(notdone)+(1-C(notdone)).*f.*sin(alpha(notdone))...  	//        .*(sigma(notdone)+C(notdone).*sin(sigma(notdone)).*...  	//        (cos2sigmam(notdone)+C(notdone).*cos(sigma(notdone)).*...  	//        (-1+2.*cos2sigmam(notdone).^2)));  	lambda = L + (1 - C) * f * Math.Sin (alpha) * (sigma + C * Math.Sin (sigma) * (cos2sigmam + C * Math.Cos (sigma) * (-1 + 2 * Math.Pow (cos2sigmam' 2))));  	//    %disp(['then' lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    % correct for convergence failure in the case of essentially antipodal  	//    % points  	// Correct for convergence failure in the case of essentially antipodal points  	//    if any(lambda(notdone) > pi)  	if (lambda > Math.PI) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambdaold(lambda>pi) = pi;  		lambdaold = Math.PI;  		//        lambda(lambda>pi) = pi;  		lambda = Math.PI;  		//    end  	}  	//    notdone = abs(lambda-lambdaold) > 1e-12;  	notdone = Math.Abs (lambda - lambdaold) > TargetAccuracy;  	//end  	// NOTE: In some cases "alpha" would return a "NaN".  If values are healthy'   	// remember them so we get a good distance calc.  	if (!double.IsNaN (alpha)) {  		goodalpha = alpha;  		goodsigma = sigma;  		goodcos2sigmam = cos2sigmam;  	}  	// Allow other threads some breathing room  	Thread.Sleep (0);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: while (notdone) {  	//    %disp(['lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    itercount = itercount+1;  	itercount++;  	//    if itercount > 50  	if (itercount > 50) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambda(notdone) = pi;  		lambda = Math.PI;  		//        break  		break;  		//    end  	}  	//    lambdaold(notdone) = lambda(notdone);  	lambdaold = lambda;  	//    sinsigma(notdone) = sqrt((cos(U2(notdone)).*sin(lambda(notdone)))...  	//        .^2+(cos(U1(notdone)).*sin(U2(notdone))-sin(U1(notdone)).*...  	//        cos(U2(notdone)).*cos(lambda(notdone))).^2);  	double sinsigma = Math.Sqrt (Math.Pow ((Math.Cos (U2) * Math.Sin (lambda))' 2) + Math.Pow ((Math.Cos (U1) * Math.Sin (U2) - Math.Sin (U1) * Math.Cos (U2) * Math.Cos (lambda))' 2));  	//    cossigma(notdone) = sin(U1(notdone)).*sin(U2(notdone))+...  	//        cos(U1(notdone)).*cos(U2(notdone)).*cos(lambda(notdone));  	double cossigma = Math.Sin (U1) * Math.Sin (U2) + Math.Cos (U1) * Math.Cos (U2) * Math.Cos (lambda);  	//    % eliminate rare imaginary portions at limit of numerical precision:  	//    sinsigma(notdone)=real(sinsigma(notdone));  	//    cossigma(notdone)=real(cossigma(notdone));  	// Eliminate rare imaginary portions at limit of numerical precision:  	// ?  	//    sigma(notdone) = atan2(sinsigma(notdone)'cossigma(notdone));  	sigma = Math.Atan2 (sinsigma' cossigma);  	//    alpha(notdone) = asin(cos(U1(notdone)).*cos(U2(notdone)).*...  	//        sin(lambda(notdone))./sin(sigma(notdone)));  	alpha = Math.Asin (Math.Cos (U1) * Math.Cos (U2) * Math.Sin (lambda) / Math.Sin (sigma));  	//    cos2sigmam(notdone) = cos(sigma(notdone))-2*sin(U1(notdone)).*...  	//        sin(U2(notdone))./cos(alpha(notdone)).^2;  	cos2sigmam = Math.Cos (sigma) - 2.0 * Math.Sin (U1) * Math.Sin (U2) / Math.Pow (Math.Cos (alpha)' 2);  	//    C(notdone) = f/16*cos(alpha(notdone)).^2.*(4+f*(4-3*...  	//        cos(alpha(notdone)).^2));  	C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  	//    lambda(notdone) = L(notdone)+(1-C(notdone)).*f.*sin(alpha(notdone))...  	//        .*(sigma(notdone)+C(notdone).*sin(sigma(notdone)).*...  	//        (cos2sigmam(notdone)+C(notdone).*cos(sigma(notdone)).*...  	//        (-1+2.*cos2sigmam(notdone).^2)));  	lambda = L + (1 - C) * f * Math.Sin (alpha) * (sigma + C * Math.Sin (sigma) * (cos2sigmam + C * Math.Cos (sigma) * (-1 + 2 * Math.Pow (cos2sigmam' 2))));  	//    %disp(['then' lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    % correct for convergence failure in the case of essentially antipodal  	//    % points  	// Correct for convergence failure in the case of essentially antipodal points  	//    if any(lambda(notdone) > pi)  	if (lambda > Math.PI) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambdaold(lambda>pi) = pi;  		lambdaold = Math.PI;  		//        lambda(lambda>pi) = pi;  		lambda = Math.PI;  		//    end  	}  	//    notdone = abs(lambda-lambdaold) > 1e-12;  	notdone = Math.Abs (lambda - lambdaold) > TargetAccuracy;  	//end  	// NOTE: In some cases "alpha" would return a "NaN".  If values are healthy'   	// remember them so we get a good distance calc.  	if (!double.IsNaN (alpha)) {  		goodalpha = alpha;  		goodsigma = sigma;  		goodcos2sigmam = cos2sigmam;  	}  	// Allow other threads some breathing room  	Thread.Sleep (0);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: while (notdone) {  	//    %disp(['lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    itercount = itercount+1;  	itercount++;  	//    if itercount > 50  	if (itercount > 50) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambda(notdone) = pi;  		lambda = Math.PI;  		//        break  		break;  		//    end  	}  	//    lambdaold(notdone) = lambda(notdone);  	lambdaold = lambda;  	//    sinsigma(notdone) = sqrt((cos(U2(notdone)).*sin(lambda(notdone)))...  	//        .^2+(cos(U1(notdone)).*sin(U2(notdone))-sin(U1(notdone)).*...  	//        cos(U2(notdone)).*cos(lambda(notdone))).^2);  	double sinsigma = Math.Sqrt (Math.Pow ((Math.Cos (U2) * Math.Sin (lambda))' 2) + Math.Pow ((Math.Cos (U1) * Math.Sin (U2) - Math.Sin (U1) * Math.Cos (U2) * Math.Cos (lambda))' 2));  	//    cossigma(notdone) = sin(U1(notdone)).*sin(U2(notdone))+...  	//        cos(U1(notdone)).*cos(U2(notdone)).*cos(lambda(notdone));  	double cossigma = Math.Sin (U1) * Math.Sin (U2) + Math.Cos (U1) * Math.Cos (U2) * Math.Cos (lambda);  	//    % eliminate rare imaginary portions at limit of numerical precision:  	//    sinsigma(notdone)=real(sinsigma(notdone));  	//    cossigma(notdone)=real(cossigma(notdone));  	// Eliminate rare imaginary portions at limit of numerical precision:  	// ?  	//    sigma(notdone) = atan2(sinsigma(notdone)'cossigma(notdone));  	sigma = Math.Atan2 (sinsigma' cossigma);  	//    alpha(notdone) = asin(cos(U1(notdone)).*cos(U2(notdone)).*...  	//        sin(lambda(notdone))./sin(sigma(notdone)));  	alpha = Math.Asin (Math.Cos (U1) * Math.Cos (U2) * Math.Sin (lambda) / Math.Sin (sigma));  	//    cos2sigmam(notdone) = cos(sigma(notdone))-2*sin(U1(notdone)).*...  	//        sin(U2(notdone))./cos(alpha(notdone)).^2;  	cos2sigmam = Math.Cos (sigma) - 2.0 * Math.Sin (U1) * Math.Sin (U2) / Math.Pow (Math.Cos (alpha)' 2);  	//    C(notdone) = f/16*cos(alpha(notdone)).^2.*(4+f*(4-3*...  	//        cos(alpha(notdone)).^2));  	C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  	//    lambda(notdone) = L(notdone)+(1-C(notdone)).*f.*sin(alpha(notdone))...  	//        .*(sigma(notdone)+C(notdone).*sin(sigma(notdone)).*...  	//        (cos2sigmam(notdone)+C(notdone).*cos(sigma(notdone)).*...  	//        (-1+2.*cos2sigmam(notdone).^2)));  	lambda = L + (1 - C) * f * Math.Sin (alpha) * (sigma + C * Math.Sin (sigma) * (cos2sigmam + C * Math.Cos (sigma) * (-1 + 2 * Math.Pow (cos2sigmam' 2))));  	//    %disp(['then' lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    % correct for convergence failure in the case of essentially antipodal  	//    % points  	// Correct for convergence failure in the case of essentially antipodal points  	//    if any(lambda(notdone) > pi)  	if (lambda > Math.PI) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambdaold(lambda>pi) = pi;  		lambdaold = Math.PI;  		//        lambda(lambda>pi) = pi;  		lambda = Math.PI;  		//    end  	}  	//    notdone = abs(lambda-lambdaold) > 1e-12;  	notdone = Math.Abs (lambda - lambdaold) > TargetAccuracy;  	//end  	// NOTE: In some cases "alpha" would return a "NaN".  If values are healthy'   	// remember them so we get a good distance calc.  	if (!double.IsNaN (alpha)) {  		goodalpha = alpha;  		goodsigma = sigma;  		goodcos2sigmam = cos2sigmam;  	}  	// Allow other threads some breathing room  	Thread.Sleep (0);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: while (notdone) {  	//    %disp(['lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    itercount = itercount+1;  	itercount++;  	//    if itercount > 50  	if (itercount > 50) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambda(notdone) = pi;  		lambda = Math.PI;  		//        break  		break;  		//    end  	}  	//    lambdaold(notdone) = lambda(notdone);  	lambdaold = lambda;  	//    sinsigma(notdone) = sqrt((cos(U2(notdone)).*sin(lambda(notdone)))...  	//        .^2+(cos(U1(notdone)).*sin(U2(notdone))-sin(U1(notdone)).*...  	//        cos(U2(notdone)).*cos(lambda(notdone))).^2);  	double sinsigma = Math.Sqrt (Math.Pow ((Math.Cos (U2) * Math.Sin (lambda))' 2) + Math.Pow ((Math.Cos (U1) * Math.Sin (U2) - Math.Sin (U1) * Math.Cos (U2) * Math.Cos (lambda))' 2));  	//    cossigma(notdone) = sin(U1(notdone)).*sin(U2(notdone))+...  	//        cos(U1(notdone)).*cos(U2(notdone)).*cos(lambda(notdone));  	double cossigma = Math.Sin (U1) * Math.Sin (U2) + Math.Cos (U1) * Math.Cos (U2) * Math.Cos (lambda);  	//    % eliminate rare imaginary portions at limit of numerical precision:  	//    sinsigma(notdone)=real(sinsigma(notdone));  	//    cossigma(notdone)=real(cossigma(notdone));  	// Eliminate rare imaginary portions at limit of numerical precision:  	// ?  	//    sigma(notdone) = atan2(sinsigma(notdone)'cossigma(notdone));  	sigma = Math.Atan2 (sinsigma' cossigma);  	//    alpha(notdone) = asin(cos(U1(notdone)).*cos(U2(notdone)).*...  	//        sin(lambda(notdone))./sin(sigma(notdone)));  	alpha = Math.Asin (Math.Cos (U1) * Math.Cos (U2) * Math.Sin (lambda) / Math.Sin (sigma));  	//    cos2sigmam(notdone) = cos(sigma(notdone))-2*sin(U1(notdone)).*...  	//        sin(U2(notdone))./cos(alpha(notdone)).^2;  	cos2sigmam = Math.Cos (sigma) - 2.0 * Math.Sin (U1) * Math.Sin (U2) / Math.Pow (Math.Cos (alpha)' 2);  	//    C(notdone) = f/16*cos(alpha(notdone)).^2.*(4+f*(4-3*...  	//        cos(alpha(notdone)).^2));  	C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  	//    lambda(notdone) = L(notdone)+(1-C(notdone)).*f.*sin(alpha(notdone))...  	//        .*(sigma(notdone)+C(notdone).*sin(sigma(notdone)).*...  	//        (cos2sigmam(notdone)+C(notdone).*cos(sigma(notdone)).*...  	//        (-1+2.*cos2sigmam(notdone).^2)));  	lambda = L + (1 - C) * f * Math.Sin (alpha) * (sigma + C * Math.Sin (sigma) * (cos2sigmam + C * Math.Cos (sigma) * (-1 + 2 * Math.Pow (cos2sigmam' 2))));  	//    %disp(['then' lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    % correct for convergence failure in the case of essentially antipodal  	//    % points  	// Correct for convergence failure in the case of essentially antipodal points  	//    if any(lambda(notdone) > pi)  	if (lambda > Math.PI) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambdaold(lambda>pi) = pi;  		lambdaold = Math.PI;  		//        lambda(lambda>pi) = pi;  		lambda = Math.PI;  		//    end  	}  	//    notdone = abs(lambda-lambdaold) > 1e-12;  	notdone = Math.Abs (lambda - lambdaold) > TargetAccuracy;  	//end  	// NOTE: In some cases "alpha" would return a "NaN".  If values are healthy'   	// remember them so we get a good distance calc.  	if (!double.IsNaN (alpha)) {  		goodalpha = alpha;  		goodsigma = sigma;  		goodcos2sigmam = cos2sigmam;  	}  	// Allow other threads some breathing room  	Thread.Sleep (0);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: while (notdone) {  	//    %disp(['lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    itercount = itercount+1;  	itercount++;  	//    if itercount > 50  	if (itercount > 50) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambda(notdone) = pi;  		lambda = Math.PI;  		//        break  		break;  		//    end  	}  	//    lambdaold(notdone) = lambda(notdone);  	lambdaold = lambda;  	//    sinsigma(notdone) = sqrt((cos(U2(notdone)).*sin(lambda(notdone)))...  	//        .^2+(cos(U1(notdone)).*sin(U2(notdone))-sin(U1(notdone)).*...  	//        cos(U2(notdone)).*cos(lambda(notdone))).^2);  	double sinsigma = Math.Sqrt (Math.Pow ((Math.Cos (U2) * Math.Sin (lambda))' 2) + Math.Pow ((Math.Cos (U1) * Math.Sin (U2) - Math.Sin (U1) * Math.Cos (U2) * Math.Cos (lambda))' 2));  	//    cossigma(notdone) = sin(U1(notdone)).*sin(U2(notdone))+...  	//        cos(U1(notdone)).*cos(U2(notdone)).*cos(lambda(notdone));  	double cossigma = Math.Sin (U1) * Math.Sin (U2) + Math.Cos (U1) * Math.Cos (U2) * Math.Cos (lambda);  	//    % eliminate rare imaginary portions at limit of numerical precision:  	//    sinsigma(notdone)=real(sinsigma(notdone));  	//    cossigma(notdone)=real(cossigma(notdone));  	// Eliminate rare imaginary portions at limit of numerical precision:  	// ?  	//    sigma(notdone) = atan2(sinsigma(notdone)'cossigma(notdone));  	sigma = Math.Atan2 (sinsigma' cossigma);  	//    alpha(notdone) = asin(cos(U1(notdone)).*cos(U2(notdone)).*...  	//        sin(lambda(notdone))./sin(sigma(notdone)));  	alpha = Math.Asin (Math.Cos (U1) * Math.Cos (U2) * Math.Sin (lambda) / Math.Sin (sigma));  	//    cos2sigmam(notdone) = cos(sigma(notdone))-2*sin(U1(notdone)).*...  	//        sin(U2(notdone))./cos(alpha(notdone)).^2;  	cos2sigmam = Math.Cos (sigma) - 2.0 * Math.Sin (U1) * Math.Sin (U2) / Math.Pow (Math.Cos (alpha)' 2);  	//    C(notdone) = f/16*cos(alpha(notdone)).^2.*(4+f*(4-3*...  	//        cos(alpha(notdone)).^2));  	C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  	//    lambda(notdone) = L(notdone)+(1-C(notdone)).*f.*sin(alpha(notdone))...  	//        .*(sigma(notdone)+C(notdone).*sin(sigma(notdone)).*...  	//        (cos2sigmam(notdone)+C(notdone).*cos(sigma(notdone)).*...  	//        (-1+2.*cos2sigmam(notdone).^2)));  	lambda = L + (1 - C) * f * Math.Sin (alpha) * (sigma + C * Math.Sin (sigma) * (cos2sigmam + C * Math.Cos (sigma) * (-1 + 2 * Math.Pow (cos2sigmam' 2))));  	//    %disp(['then' lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    % correct for convergence failure in the case of essentially antipodal  	//    % points  	// Correct for convergence failure in the case of essentially antipodal points  	//    if any(lambda(notdone) > pi)  	if (lambda > Math.PI) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambdaold(lambda>pi) = pi;  		lambdaold = Math.PI;  		//        lambda(lambda>pi) = pi;  		lambda = Math.PI;  		//    end  	}  	//    notdone = abs(lambda-lambdaold) > 1e-12;  	notdone = Math.Abs (lambda - lambdaold) > TargetAccuracy;  	//end  	// NOTE: In some cases "alpha" would return a "NaN".  If values are healthy'   	// remember them so we get a good distance calc.  	if (!double.IsNaN (alpha)) {  		goodalpha = alpha;  		goodsigma = sigma;  		goodcos2sigmam = cos2sigmam;  	}  	// Allow other threads some breathing room  	Thread.Sleep (0);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: while (notdone) {  	//    %disp(['lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    itercount = itercount+1;  	itercount++;  	//    if itercount > 50  	if (itercount > 50) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambda(notdone) = pi;  		lambda = Math.PI;  		//        break  		break;  		//    end  	}  	//    lambdaold(notdone) = lambda(notdone);  	lambdaold = lambda;  	//    sinsigma(notdone) = sqrt((cos(U2(notdone)).*sin(lambda(notdone)))...  	//        .^2+(cos(U1(notdone)).*sin(U2(notdone))-sin(U1(notdone)).*...  	//        cos(U2(notdone)).*cos(lambda(notdone))).^2);  	double sinsigma = Math.Sqrt (Math.Pow ((Math.Cos (U2) * Math.Sin (lambda))' 2) + Math.Pow ((Math.Cos (U1) * Math.Sin (U2) - Math.Sin (U1) * Math.Cos (U2) * Math.Cos (lambda))' 2));  	//    cossigma(notdone) = sin(U1(notdone)).*sin(U2(notdone))+...  	//        cos(U1(notdone)).*cos(U2(notdone)).*cos(lambda(notdone));  	double cossigma = Math.Sin (U1) * Math.Sin (U2) + Math.Cos (U1) * Math.Cos (U2) * Math.Cos (lambda);  	//    % eliminate rare imaginary portions at limit of numerical precision:  	//    sinsigma(notdone)=real(sinsigma(notdone));  	//    cossigma(notdone)=real(cossigma(notdone));  	// Eliminate rare imaginary portions at limit of numerical precision:  	// ?  	//    sigma(notdone) = atan2(sinsigma(notdone)'cossigma(notdone));  	sigma = Math.Atan2 (sinsigma' cossigma);  	//    alpha(notdone) = asin(cos(U1(notdone)).*cos(U2(notdone)).*...  	//        sin(lambda(notdone))./sin(sigma(notdone)));  	alpha = Math.Asin (Math.Cos (U1) * Math.Cos (U2) * Math.Sin (lambda) / Math.Sin (sigma));  	//    cos2sigmam(notdone) = cos(sigma(notdone))-2*sin(U1(notdone)).*...  	//        sin(U2(notdone))./cos(alpha(notdone)).^2;  	cos2sigmam = Math.Cos (sigma) - 2.0 * Math.Sin (U1) * Math.Sin (U2) / Math.Pow (Math.Cos (alpha)' 2);  	//    C(notdone) = f/16*cos(alpha(notdone)).^2.*(4+f*(4-3*...  	//        cos(alpha(notdone)).^2));  	C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  	//    lambda(notdone) = L(notdone)+(1-C(notdone)).*f.*sin(alpha(notdone))...  	//        .*(sigma(notdone)+C(notdone).*sin(sigma(notdone)).*...  	//        (cos2sigmam(notdone)+C(notdone).*cos(sigma(notdone)).*...  	//        (-1+2.*cos2sigmam(notdone).^2)));  	lambda = L + (1 - C) * f * Math.Sin (alpha) * (sigma + C * Math.Sin (sigma) * (cos2sigmam + C * Math.Cos (sigma) * (-1 + 2 * Math.Pow (cos2sigmam' 2))));  	//    %disp(['then' lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    % correct for convergence failure in the case of essentially antipodal  	//    % points  	// Correct for convergence failure in the case of essentially antipodal points  	//    if any(lambda(notdone) > pi)  	if (lambda > Math.PI) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambdaold(lambda>pi) = pi;  		lambdaold = Math.PI;  		//        lambda(lambda>pi) = pi;  		lambda = Math.PI;  		//    end  	}  	//    notdone = abs(lambda-lambdaold) > 1e-12;  	notdone = Math.Abs (lambda - lambdaold) > TargetAccuracy;  	//end  	// NOTE: In some cases "alpha" would return a "NaN".  If values are healthy'   	// remember them so we get a good distance calc.  	if (!double.IsNaN (alpha)) {  		goodalpha = alpha;  		goodsigma = sigma;  		goodcos2sigmam = cos2sigmam;  	}  	// Allow other threads some breathing room  	Thread.Sleep (0);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: while (notdone) {  	//    %disp(['lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    itercount = itercount+1;  	itercount++;  	//    if itercount > 50  	if (itercount > 50) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambda(notdone) = pi;  		lambda = Math.PI;  		//        break  		break;  		//    end  	}  	//    lambdaold(notdone) = lambda(notdone);  	lambdaold = lambda;  	//    sinsigma(notdone) = sqrt((cos(U2(notdone)).*sin(lambda(notdone)))...  	//        .^2+(cos(U1(notdone)).*sin(U2(notdone))-sin(U1(notdone)).*...  	//        cos(U2(notdone)).*cos(lambda(notdone))).^2);  	double sinsigma = Math.Sqrt (Math.Pow ((Math.Cos (U2) * Math.Sin (lambda))' 2) + Math.Pow ((Math.Cos (U1) * Math.Sin (U2) - Math.Sin (U1) * Math.Cos (U2) * Math.Cos (lambda))' 2));  	//    cossigma(notdone) = sin(U1(notdone)).*sin(U2(notdone))+...  	//        cos(U1(notdone)).*cos(U2(notdone)).*cos(lambda(notdone));  	double cossigma = Math.Sin (U1) * Math.Sin (U2) + Math.Cos (U1) * Math.Cos (U2) * Math.Cos (lambda);  	//    % eliminate rare imaginary portions at limit of numerical precision:  	//    sinsigma(notdone)=real(sinsigma(notdone));  	//    cossigma(notdone)=real(cossigma(notdone));  	// Eliminate rare imaginary portions at limit of numerical precision:  	// ?  	//    sigma(notdone) = atan2(sinsigma(notdone)'cossigma(notdone));  	sigma = Math.Atan2 (sinsigma' cossigma);  	//    alpha(notdone) = asin(cos(U1(notdone)).*cos(U2(notdone)).*...  	//        sin(lambda(notdone))./sin(sigma(notdone)));  	alpha = Math.Asin (Math.Cos (U1) * Math.Cos (U2) * Math.Sin (lambda) / Math.Sin (sigma));  	//    cos2sigmam(notdone) = cos(sigma(notdone))-2*sin(U1(notdone)).*...  	//        sin(U2(notdone))./cos(alpha(notdone)).^2;  	cos2sigmam = Math.Cos (sigma) - 2.0 * Math.Sin (U1) * Math.Sin (U2) / Math.Pow (Math.Cos (alpha)' 2);  	//    C(notdone) = f/16*cos(alpha(notdone)).^2.*(4+f*(4-3*...  	//        cos(alpha(notdone)).^2));  	C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  	//    lambda(notdone) = L(notdone)+(1-C(notdone)).*f.*sin(alpha(notdone))...  	//        .*(sigma(notdone)+C(notdone).*sin(sigma(notdone)).*...  	//        (cos2sigmam(notdone)+C(notdone).*cos(sigma(notdone)).*...  	//        (-1+2.*cos2sigmam(notdone).^2)));  	lambda = L + (1 - C) * f * Math.Sin (alpha) * (sigma + C * Math.Sin (sigma) * (cos2sigmam + C * Math.Cos (sigma) * (-1 + 2 * Math.Pow (cos2sigmam' 2))));  	//    %disp(['then' lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    % correct for convergence failure in the case of essentially antipodal  	//    % points  	// Correct for convergence failure in the case of essentially antipodal points  	//    if any(lambda(notdone) > pi)  	if (lambda > Math.PI) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambdaold(lambda>pi) = pi;  		lambdaold = Math.PI;  		//        lambda(lambda>pi) = pi;  		lambda = Math.PI;  		//    end  	}  	//    notdone = abs(lambda-lambdaold) > 1e-12;  	notdone = Math.Abs (lambda - lambdaold) > TargetAccuracy;  	//end  	// NOTE: In some cases "alpha" would return a "NaN".  If values are healthy'   	// remember them so we get a good distance calc.  	if (!double.IsNaN (alpha)) {  		goodalpha = alpha;  		goodsigma = sigma;  		goodcos2sigmam = cos2sigmam;  	}  	// Allow other threads some breathing room  	Thread.Sleep (0);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: while (notdone) {  	//    %disp(['lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    itercount = itercount+1;  	itercount++;  	//    if itercount > 50  	if (itercount > 50) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambda(notdone) = pi;  		lambda = Math.PI;  		//        break  		break;  		//    end  	}  	//    lambdaold(notdone) = lambda(notdone);  	lambdaold = lambda;  	//    sinsigma(notdone) = sqrt((cos(U2(notdone)).*sin(lambda(notdone)))...  	//        .^2+(cos(U1(notdone)).*sin(U2(notdone))-sin(U1(notdone)).*...  	//        cos(U2(notdone)).*cos(lambda(notdone))).^2);  	double sinsigma = Math.Sqrt (Math.Pow ((Math.Cos (U2) * Math.Sin (lambda))' 2) + Math.Pow ((Math.Cos (U1) * Math.Sin (U2) - Math.Sin (U1) * Math.Cos (U2) * Math.Cos (lambda))' 2));  	//    cossigma(notdone) = sin(U1(notdone)).*sin(U2(notdone))+...  	//        cos(U1(notdone)).*cos(U2(notdone)).*cos(lambda(notdone));  	double cossigma = Math.Sin (U1) * Math.Sin (U2) + Math.Cos (U1) * Math.Cos (U2) * Math.Cos (lambda);  	//    % eliminate rare imaginary portions at limit of numerical precision:  	//    sinsigma(notdone)=real(sinsigma(notdone));  	//    cossigma(notdone)=real(cossigma(notdone));  	// Eliminate rare imaginary portions at limit of numerical precision:  	// ?  	//    sigma(notdone) = atan2(sinsigma(notdone)'cossigma(notdone));  	sigma = Math.Atan2 (sinsigma' cossigma);  	//    alpha(notdone) = asin(cos(U1(notdone)).*cos(U2(notdone)).*...  	//        sin(lambda(notdone))./sin(sigma(notdone)));  	alpha = Math.Asin (Math.Cos (U1) * Math.Cos (U2) * Math.Sin (lambda) / Math.Sin (sigma));  	//    cos2sigmam(notdone) = cos(sigma(notdone))-2*sin(U1(notdone)).*...  	//        sin(U2(notdone))./cos(alpha(notdone)).^2;  	cos2sigmam = Math.Cos (sigma) - 2.0 * Math.Sin (U1) * Math.Sin (U2) / Math.Pow (Math.Cos (alpha)' 2);  	//    C(notdone) = f/16*cos(alpha(notdone)).^2.*(4+f*(4-3*...  	//        cos(alpha(notdone)).^2));  	C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  	//    lambda(notdone) = L(notdone)+(1-C(notdone)).*f.*sin(alpha(notdone))...  	//        .*(sigma(notdone)+C(notdone).*sin(sigma(notdone)).*...  	//        (cos2sigmam(notdone)+C(notdone).*cos(sigma(notdone)).*...  	//        (-1+2.*cos2sigmam(notdone).^2)));  	lambda = L + (1 - C) * f * Math.Sin (alpha) * (sigma + C * Math.Sin (sigma) * (cos2sigmam + C * Math.Cos (sigma) * (-1 + 2 * Math.Pow (cos2sigmam' 2))));  	//    %disp(['then' lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    % correct for convergence failure in the case of essentially antipodal  	//    % points  	// Correct for convergence failure in the case of essentially antipodal points  	//    if any(lambda(notdone) > pi)  	if (lambda > Math.PI) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambdaold(lambda>pi) = pi;  		lambdaold = Math.PI;  		//        lambda(lambda>pi) = pi;  		lambda = Math.PI;  		//    end  	}  	//    notdone = abs(lambda-lambdaold) > 1e-12;  	notdone = Math.Abs (lambda - lambdaold) > TargetAccuracy;  	//end  	// NOTE: In some cases "alpha" would return a "NaN".  If values are healthy'   	// remember them so we get a good distance calc.  	if (!double.IsNaN (alpha)) {  		goodalpha = alpha;  		goodsigma = sigma;  		goodcos2sigmam = cos2sigmam;  	}  	// Allow other threads some breathing room  	Thread.Sleep (0);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: while (notdone) {  	//    %disp(['lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    itercount = itercount+1;  	itercount++;  	//    if itercount > 50  	if (itercount > 50) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambda(notdone) = pi;  		lambda = Math.PI;  		//        break  		break;  		//    end  	}  	//    lambdaold(notdone) = lambda(notdone);  	lambdaold = lambda;  	//    sinsigma(notdone) = sqrt((cos(U2(notdone)).*sin(lambda(notdone)))...  	//        .^2+(cos(U1(notdone)).*sin(U2(notdone))-sin(U1(notdone)).*...  	//        cos(U2(notdone)).*cos(lambda(notdone))).^2);  	double sinsigma = Math.Sqrt (Math.Pow ((Math.Cos (U2) * Math.Sin (lambda))' 2) + Math.Pow ((Math.Cos (U1) * Math.Sin (U2) - Math.Sin (U1) * Math.Cos (U2) * Math.Cos (lambda))' 2));  	//    cossigma(notdone) = sin(U1(notdone)).*sin(U2(notdone))+...  	//        cos(U1(notdone)).*cos(U2(notdone)).*cos(lambda(notdone));  	double cossigma = Math.Sin (U1) * Math.Sin (U2) + Math.Cos (U1) * Math.Cos (U2) * Math.Cos (lambda);  	//    % eliminate rare imaginary portions at limit of numerical precision:  	//    sinsigma(notdone)=real(sinsigma(notdone));  	//    cossigma(notdone)=real(cossigma(notdone));  	// Eliminate rare imaginary portions at limit of numerical precision:  	// ?  	//    sigma(notdone) = atan2(sinsigma(notdone)'cossigma(notdone));  	sigma = Math.Atan2 (sinsigma' cossigma);  	//    alpha(notdone) = asin(cos(U1(notdone)).*cos(U2(notdone)).*...  	//        sin(lambda(notdone))./sin(sigma(notdone)));  	alpha = Math.Asin (Math.Cos (U1) * Math.Cos (U2) * Math.Sin (lambda) / Math.Sin (sigma));  	//    cos2sigmam(notdone) = cos(sigma(notdone))-2*sin(U1(notdone)).*...  	//        sin(U2(notdone))./cos(alpha(notdone)).^2;  	cos2sigmam = Math.Cos (sigma) - 2.0 * Math.Sin (U1) * Math.Sin (U2) / Math.Pow (Math.Cos (alpha)' 2);  	//    C(notdone) = f/16*cos(alpha(notdone)).^2.*(4+f*(4-3*...  	//        cos(alpha(notdone)).^2));  	C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  	//    lambda(notdone) = L(notdone)+(1-C(notdone)).*f.*sin(alpha(notdone))...  	//        .*(sigma(notdone)+C(notdone).*sin(sigma(notdone)).*...  	//        (cos2sigmam(notdone)+C(notdone).*cos(sigma(notdone)).*...  	//        (-1+2.*cos2sigmam(notdone).^2)));  	lambda = L + (1 - C) * f * Math.Sin (alpha) * (sigma + C * Math.Sin (sigma) * (cos2sigmam + C * Math.Cos (sigma) * (-1 + 2 * Math.Pow (cos2sigmam' 2))));  	//    %disp(['then' lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    % correct for convergence failure in the case of essentially antipodal  	//    % points  	// Correct for convergence failure in the case of essentially antipodal points  	//    if any(lambda(notdone) > pi)  	if (lambda > Math.PI) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambdaold(lambda>pi) = pi;  		lambdaold = Math.PI;  		//        lambda(lambda>pi) = pi;  		lambda = Math.PI;  		//    end  	}  	//    notdone = abs(lambda-lambdaold) > 1e-12;  	notdone = Math.Abs (lambda - lambdaold) > TargetAccuracy;  	//end  	// NOTE: In some cases "alpha" would return a "NaN".  If values are healthy'   	// remember them so we get a good distance calc.  	if (!double.IsNaN (alpha)) {  		goodalpha = alpha;  		goodsigma = sigma;  		goodcos2sigmam = cos2sigmam;  	}  	// Allow other threads some breathing room  	Thread.Sleep (0);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: while (notdone) {  	//    %disp(['lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    itercount = itercount+1;  	itercount++;  	//    if itercount > 50  	if (itercount > 50) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambda(notdone) = pi;  		lambda = Math.PI;  		//        break  		break;  		//    end  	}  	//    lambdaold(notdone) = lambda(notdone);  	lambdaold = lambda;  	//    sinsigma(notdone) = sqrt((cos(U2(notdone)).*sin(lambda(notdone)))...  	//        .^2+(cos(U1(notdone)).*sin(U2(notdone))-sin(U1(notdone)).*...  	//        cos(U2(notdone)).*cos(lambda(notdone))).^2);  	double sinsigma = Math.Sqrt (Math.Pow ((Math.Cos (U2) * Math.Sin (lambda))' 2) + Math.Pow ((Math.Cos (U1) * Math.Sin (U2) - Math.Sin (U1) * Math.Cos (U2) * Math.Cos (lambda))' 2));  	//    cossigma(notdone) = sin(U1(notdone)).*sin(U2(notdone))+...  	//        cos(U1(notdone)).*cos(U2(notdone)).*cos(lambda(notdone));  	double cossigma = Math.Sin (U1) * Math.Sin (U2) + Math.Cos (U1) * Math.Cos (U2) * Math.Cos (lambda);  	//    % eliminate rare imaginary portions at limit of numerical precision:  	//    sinsigma(notdone)=real(sinsigma(notdone));  	//    cossigma(notdone)=real(cossigma(notdone));  	// Eliminate rare imaginary portions at limit of numerical precision:  	// ?  	//    sigma(notdone) = atan2(sinsigma(notdone)'cossigma(notdone));  	sigma = Math.Atan2 (sinsigma' cossigma);  	//    alpha(notdone) = asin(cos(U1(notdone)).*cos(U2(notdone)).*...  	//        sin(lambda(notdone))./sin(sigma(notdone)));  	alpha = Math.Asin (Math.Cos (U1) * Math.Cos (U2) * Math.Sin (lambda) / Math.Sin (sigma));  	//    cos2sigmam(notdone) = cos(sigma(notdone))-2*sin(U1(notdone)).*...  	//        sin(U2(notdone))./cos(alpha(notdone)).^2;  	cos2sigmam = Math.Cos (sigma) - 2.0 * Math.Sin (U1) * Math.Sin (U2) / Math.Pow (Math.Cos (alpha)' 2);  	//    C(notdone) = f/16*cos(alpha(notdone)).^2.*(4+f*(4-3*...  	//        cos(alpha(notdone)).^2));  	C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  	//    lambda(notdone) = L(notdone)+(1-C(notdone)).*f.*sin(alpha(notdone))...  	//        .*(sigma(notdone)+C(notdone).*sin(sigma(notdone)).*...  	//        (cos2sigmam(notdone)+C(notdone).*cos(sigma(notdone)).*...  	//        (-1+2.*cos2sigmam(notdone).^2)));  	lambda = L + (1 - C) * f * Math.Sin (alpha) * (sigma + C * Math.Sin (sigma) * (cos2sigmam + C * Math.Cos (sigma) * (-1 + 2 * Math.Pow (cos2sigmam' 2))));  	//    %disp(['then' lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    % correct for convergence failure in the case of essentially antipodal  	//    % points  	// Correct for convergence failure in the case of essentially antipodal points  	//    if any(lambda(notdone) > pi)  	if (lambda > Math.PI) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambdaold(lambda>pi) = pi;  		lambdaold = Math.PI;  		//        lambda(lambda>pi) = pi;  		lambda = Math.PI;  		//    end  	}  	//    notdone = abs(lambda-lambdaold) > 1e-12;  	notdone = Math.Abs (lambda - lambdaold) > TargetAccuracy;  	//end  	// NOTE: In some cases "alpha" would return a "NaN".  If values are healthy'   	// remember them so we get a good distance calc.  	if (!double.IsNaN (alpha)) {  		goodalpha = alpha;  		goodsigma = sigma;  		goodcos2sigmam = cos2sigmam;  	}  	// Allow other threads some breathing room  	Thread.Sleep (0);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: while (notdone) {  	//    %disp(['lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    itercount = itercount+1;  	itercount++;  	//    if itercount > 50  	if (itercount > 50) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambda(notdone) = pi;  		lambda = Math.PI;  		//        break  		break;  		//    end  	}  	//    lambdaold(notdone) = lambda(notdone);  	lambdaold = lambda;  	//    sinsigma(notdone) = sqrt((cos(U2(notdone)).*sin(lambda(notdone)))...  	//        .^2+(cos(U1(notdone)).*sin(U2(notdone))-sin(U1(notdone)).*...  	//        cos(U2(notdone)).*cos(lambda(notdone))).^2);  	double sinsigma = Math.Sqrt (Math.Pow ((Math.Cos (U2) * Math.Sin (lambda))' 2) + Math.Pow ((Math.Cos (U1) * Math.Sin (U2) - Math.Sin (U1) * Math.Cos (U2) * Math.Cos (lambda))' 2));  	//    cossigma(notdone) = sin(U1(notdone)).*sin(U2(notdone))+...  	//        cos(U1(notdone)).*cos(U2(notdone)).*cos(lambda(notdone));  	double cossigma = Math.Sin (U1) * Math.Sin (U2) + Math.Cos (U1) * Math.Cos (U2) * Math.Cos (lambda);  	//    % eliminate rare imaginary portions at limit of numerical precision:  	//    sinsigma(notdone)=real(sinsigma(notdone));  	//    cossigma(notdone)=real(cossigma(notdone));  	// Eliminate rare imaginary portions at limit of numerical precision:  	// ?  	//    sigma(notdone) = atan2(sinsigma(notdone)'cossigma(notdone));  	sigma = Math.Atan2 (sinsigma' cossigma);  	//    alpha(notdone) = asin(cos(U1(notdone)).*cos(U2(notdone)).*...  	//        sin(lambda(notdone))./sin(sigma(notdone)));  	alpha = Math.Asin (Math.Cos (U1) * Math.Cos (U2) * Math.Sin (lambda) / Math.Sin (sigma));  	//    cos2sigmam(notdone) = cos(sigma(notdone))-2*sin(U1(notdone)).*...  	//        sin(U2(notdone))./cos(alpha(notdone)).^2;  	cos2sigmam = Math.Cos (sigma) - 2.0 * Math.Sin (U1) * Math.Sin (U2) / Math.Pow (Math.Cos (alpha)' 2);  	//    C(notdone) = f/16*cos(alpha(notdone)).^2.*(4+f*(4-3*...  	//        cos(alpha(notdone)).^2));  	C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  	//    lambda(notdone) = L(notdone)+(1-C(notdone)).*f.*sin(alpha(notdone))...  	//        .*(sigma(notdone)+C(notdone).*sin(sigma(notdone)).*...  	//        (cos2sigmam(notdone)+C(notdone).*cos(sigma(notdone)).*...  	//        (-1+2.*cos2sigmam(notdone).^2)));  	lambda = L + (1 - C) * f * Math.Sin (alpha) * (sigma + C * Math.Sin (sigma) * (cos2sigmam + C * Math.Cos (sigma) * (-1 + 2 * Math.Pow (cos2sigmam' 2))));  	//    %disp(['then' lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    % correct for convergence failure in the case of essentially antipodal  	//    % points  	// Correct for convergence failure in the case of essentially antipodal points  	//    if any(lambda(notdone) > pi)  	if (lambda > Math.PI) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambdaold(lambda>pi) = pi;  		lambdaold = Math.PI;  		//        lambda(lambda>pi) = pi;  		lambda = Math.PI;  		//    end  	}  	//    notdone = abs(lambda-lambdaold) > 1e-12;  	notdone = Math.Abs (lambda - lambdaold) > TargetAccuracy;  	//end  	// NOTE: In some cases "alpha" would return a "NaN".  If values are healthy'   	// remember them so we get a good distance calc.  	if (!double.IsNaN (alpha)) {  		goodalpha = alpha;  		goodsigma = sigma;  		goodcos2sigmam = cos2sigmam;  	}  	// Allow other threads some breathing room  	Thread.Sleep (0);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: while (notdone) {  	//    %disp(['lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    itercount = itercount+1;  	itercount++;  	//    if itercount > 50  	if (itercount > 50) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambda(notdone) = pi;  		lambda = Math.PI;  		//        break  		break;  		//    end  	}  	//    lambdaold(notdone) = lambda(notdone);  	lambdaold = lambda;  	//    sinsigma(notdone) = sqrt((cos(U2(notdone)).*sin(lambda(notdone)))...  	//        .^2+(cos(U1(notdone)).*sin(U2(notdone))-sin(U1(notdone)).*...  	//        cos(U2(notdone)).*cos(lambda(notdone))).^2);  	double sinsigma = Math.Sqrt (Math.Pow ((Math.Cos (U2) * Math.Sin (lambda))' 2) + Math.Pow ((Math.Cos (U1) * Math.Sin (U2) - Math.Sin (U1) * Math.Cos (U2) * Math.Cos (lambda))' 2));  	//    cossigma(notdone) = sin(U1(notdone)).*sin(U2(notdone))+...  	//        cos(U1(notdone)).*cos(U2(notdone)).*cos(lambda(notdone));  	double cossigma = Math.Sin (U1) * Math.Sin (U2) + Math.Cos (U1) * Math.Cos (U2) * Math.Cos (lambda);  	//    % eliminate rare imaginary portions at limit of numerical precision:  	//    sinsigma(notdone)=real(sinsigma(notdone));  	//    cossigma(notdone)=real(cossigma(notdone));  	// Eliminate rare imaginary portions at limit of numerical precision:  	// ?  	//    sigma(notdone) = atan2(sinsigma(notdone)'cossigma(notdone));  	sigma = Math.Atan2 (sinsigma' cossigma);  	//    alpha(notdone) = asin(cos(U1(notdone)).*cos(U2(notdone)).*...  	//        sin(lambda(notdone))./sin(sigma(notdone)));  	alpha = Math.Asin (Math.Cos (U1) * Math.Cos (U2) * Math.Sin (lambda) / Math.Sin (sigma));  	//    cos2sigmam(notdone) = cos(sigma(notdone))-2*sin(U1(notdone)).*...  	//        sin(U2(notdone))./cos(alpha(notdone)).^2;  	cos2sigmam = Math.Cos (sigma) - 2.0 * Math.Sin (U1) * Math.Sin (U2) / Math.Pow (Math.Cos (alpha)' 2);  	//    C(notdone) = f/16*cos(alpha(notdone)).^2.*(4+f*(4-3*...  	//        cos(alpha(notdone)).^2));  	C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  	//    lambda(notdone) = L(notdone)+(1-C(notdone)).*f.*sin(alpha(notdone))...  	//        .*(sigma(notdone)+C(notdone).*sin(sigma(notdone)).*...  	//        (cos2sigmam(notdone)+C(notdone).*cos(sigma(notdone)).*...  	//        (-1+2.*cos2sigmam(notdone).^2)));  	lambda = L + (1 - C) * f * Math.Sin (alpha) * (sigma + C * Math.Sin (sigma) * (cos2sigmam + C * Math.Cos (sigma) * (-1 + 2 * Math.Pow (cos2sigmam' 2))));  	//    %disp(['then' lambda(21752) = ' num2str(lambda(21752)'20)]);  	//    % correct for convergence failure in the case of essentially antipodal  	//    % points  	// Correct for convergence failure in the case of essentially antipodal points  	//    if any(lambda(notdone) > pi)  	if (lambda > Math.PI) {  		//        if ~warninggiven  		//if (!warninggiven)  		//{  		//    //            warning(['Essentially antipodal points encountered. ' ...  		//    //                'Precision may be reduced slightly.']);  		//    warninggiven = true;  		//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  		//}  		//        end  		//        lambdaold(lambda>pi) = pi;  		lambdaold = Math.PI;  		//        lambda(lambda>pi) = pi;  		lambda = Math.PI;  		//    end  	}  	//    notdone = abs(lambda-lambdaold) > 1e-12;  	notdone = Math.Abs (lambda - lambdaold) > TargetAccuracy;  	//end  	// NOTE: In some cases "alpha" would return a "NaN".  If values are healthy'   	// remember them so we get a good distance calc.  	if (!double.IsNaN (alpha)) {  		goodalpha = alpha;  		goodsigma = sigma;  		goodcos2sigmam = cos2sigmam;  	}  	// Allow other threads some breathing room  	Thread.Sleep (0);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: if (itercount > 50) {  	//        if ~warninggiven  	//if (!warninggiven)  	//{  	//    //            warning(['Essentially antipodal points encountered. ' ...  	//    //                'Precision may be reduced slightly.']);  	//    warninggiven = true;  	//    throw new WarningException("Distance calculation accuracy may be reduced because the two endpoints are antipodal.");  	//}  	//        end  	//        lambda(notdone) = pi;  	lambda = Math.PI;  	//        break  	break;  	//    end  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: cos2sigmam = Math.Cos (sigma) - 2.0 * Math.Sin (U1) * Math.Sin (U2) / Math.Pow (Math.Cos (alpha)' 2);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: cos2sigmam = Math.Cos (sigma) - 2.0 * Math.Sin (U1) * Math.Sin (U2) / Math.Pow (Math.Cos (alpha)' 2);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: C = f / 16 * Math.Pow (Math.Cos (alpha)' 2) * (4 + f * (4 - 3 * Math.Pow (Math.Cos (alpha)' 2)));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: lambda = L + (1 - C) * f * Math.Sin (alpha) * (sigma + C * Math.Sin (sigma) * (cos2sigmam + C * Math.Cos (sigma) * (-1 + 2 * Math.Pow (cos2sigmam' 2))));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,DistanceTo,The following statement contains a magic number: lambda = L + (1 - C) * f * Math.Sin (alpha) * (sigma + C * Math.Sin (sigma) * (cos2sigmam + C * Math.Cos (sigma) * (-1 + 2 * Math.Pow (cos2sigmam' 2))));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,IntersectionOf,The following statement contains a magic number: if (Math.Sin (lonrad1 - lonrad2) < 0) {  	crs12 = Math.Acos ((Math.Sin (latrad2) - Math.Sin (latrad1) * Math.Cos (s)) / (Math.Sin (s) * Math.Cos (latrad1)));  }  else {  	crs12 = 2 * Math.PI - Math.Acos ((Math.Sin (latrad2) - Math.Sin (latrad1) * Math.Cos (s)) / (Math.Sin (s) * Math.Cos (latrad1)));  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,IntersectionOf,The following statement contains a magic number: crs12 = 2 * Math.PI - Math.Acos ((Math.Sin (latrad2) - Math.Sin (latrad1) * Math.Cos (s)) / (Math.Sin (s) * Math.Cos (latrad1)));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,IntersectionOf,The following statement contains a magic number: if (Math.Sin (lonrad2 - lonrad1) < 0) {  	crs21 = Math.Acos ((Math.Sin (latrad1) - Math.Sin (latrad2) * Math.Cos (s)) / (Math.Sin (s) * Math.Cos (latrad2)));  }  else {  	crs21 = 2 * Math.PI - Math.Acos ((Math.Sin (latrad1) - Math.Sin (latrad2) * Math.Cos (s)) / (Math.Sin (s) * Math.Cos (latrad2)));  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,IntersectionOf,The following statement contains a magic number: crs21 = 2 * Math.PI - Math.Acos ((Math.Sin (latrad1) - Math.Sin (latrad2) * Math.Cos (s)) / (Math.Sin (s) * Math.Cos (latrad2)));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,IntersectionOf,The following statement contains a magic number: if (Math.Sin (ang1) * Math.Sin (ang2) <= Math.Sqrt (tol)) {  	// NO EXCEPTION IS THROWN.  RETURN NULL  	return Position.Empty;  	//throw new GeoException("No intersection exists between these two points and the given bearings.");  }  else {  	ang1 = Math.Abs (ang1);  	ang2 = Math.Abs (ang2);  	double ang3 = Math.Acos (Math.Sin (ang1) * Math.Sin (ang2) * Math.Cos (s) - Math.Cos (ang1) * Math.Cos (ang2));  	double dst13 = Math.Asin (Math.Sin (ang2) * Math.Sin (s) / Math.Sin (ang3));  	double latrad3 = Math.Asin (Math.Sin (latrad1) * Math.Cos (dst13) + Math.Cos (latrad1) * Math.Sin (dst13) * Math.Cos (crs13));  	double lonrad3 = lonrad1 + Math.Asin (Math.Sin (crs13) * Math.Sin (dst13) / Math.Cos (latrad3));  	lonrad3 = ((lonrad3 + Math.PI) % (2 * Math.PI)) - Math.PI;  	Latitude NewLatitude = new Latitude (latrad3 * 180 / Math.PI);  	Longitude NewLongitude = new Longitude (lonrad3 * 180 / Math.PI);  	// Return the new position  	return new Position (NewLatitude' NewLongitude);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,IntersectionOf,The following statement contains a magic number: if (Math.Sin (ang1) * Math.Sin (ang2) <= Math.Sqrt (tol)) {  	// NO EXCEPTION IS THROWN.  RETURN NULL  	return Position.Empty;  	//throw new GeoException("No intersection exists between these two points and the given bearings.");  }  else {  	ang1 = Math.Abs (ang1);  	ang2 = Math.Abs (ang2);  	double ang3 = Math.Acos (Math.Sin (ang1) * Math.Sin (ang2) * Math.Cos (s) - Math.Cos (ang1) * Math.Cos (ang2));  	double dst13 = Math.Asin (Math.Sin (ang2) * Math.Sin (s) / Math.Sin (ang3));  	double latrad3 = Math.Asin (Math.Sin (latrad1) * Math.Cos (dst13) + Math.Cos (latrad1) * Math.Sin (dst13) * Math.Cos (crs13));  	double lonrad3 = lonrad1 + Math.Asin (Math.Sin (crs13) * Math.Sin (dst13) / Math.Cos (latrad3));  	lonrad3 = ((lonrad3 + Math.PI) % (2 * Math.PI)) - Math.PI;  	Latitude NewLatitude = new Latitude (latrad3 * 180 / Math.PI);  	Longitude NewLongitude = new Longitude (lonrad3 * 180 / Math.PI);  	// Return the new position  	return new Position (NewLatitude' NewLongitude);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,IntersectionOf,The following statement contains a magic number: if (Math.Sin (ang1) * Math.Sin (ang2) <= Math.Sqrt (tol)) {  	// NO EXCEPTION IS THROWN.  RETURN NULL  	return Position.Empty;  	//throw new GeoException("No intersection exists between these two points and the given bearings.");  }  else {  	ang1 = Math.Abs (ang1);  	ang2 = Math.Abs (ang2);  	double ang3 = Math.Acos (Math.Sin (ang1) * Math.Sin (ang2) * Math.Cos (s) - Math.Cos (ang1) * Math.Cos (ang2));  	double dst13 = Math.Asin (Math.Sin (ang2) * Math.Sin (s) / Math.Sin (ang3));  	double latrad3 = Math.Asin (Math.Sin (latrad1) * Math.Cos (dst13) + Math.Cos (latrad1) * Math.Sin (dst13) * Math.Cos (crs13));  	double lonrad3 = lonrad1 + Math.Asin (Math.Sin (crs13) * Math.Sin (dst13) / Math.Cos (latrad3));  	lonrad3 = ((lonrad3 + Math.PI) % (2 * Math.PI)) - Math.PI;  	Latitude NewLatitude = new Latitude (latrad3 * 180 / Math.PI);  	Longitude NewLongitude = new Longitude (lonrad3 * 180 / Math.PI);  	// Return the new position  	return new Position (NewLatitude' NewLongitude);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,IntersectionOf,The following statement contains a magic number: lonrad3 = ((lonrad3 + Math.PI) % (2 * Math.PI)) - Math.PI;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,TranslateTo,The following statement contains a magic number: X = (X - 2.0) / X;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,TranslateTo,The following statement contains a magic number: C = (X * X / 4.0 + 1.0) / C;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,TranslateTo,The following statement contains a magic number: do {  	//    SY = Math.sin(Y);  	SY = Math.Sin (Y);  	//    CY = Math.cos(Y);  	CY = Math.Cos (Y);  	//    CZ = Math.cos(BAZ+Y);  	CZ = Math.Cos (BAZ + Y);  	//    E  = CZ*CZ*2.0-1.0;  	E = CZ * CZ * 2.0 - 1.0;  	//    C  = Y;  	C = Y;  	//    X  = E*CY;  	X = E * CY;  	//    Y  = E+E-1.0;  	Y = E + E - 1.0;  	//    Y  = (((SY*SY*4.0-3.0)*Y*CZ*D/6.0+X)*D/4.0-CZ)*SY*D+TU;  	Y = (((SY * SY * 4.0 - 3.0) * Y * CZ * D / 6.0 + X) * D / 4.0 - CZ) * SY * D + TU;  	//} while (Math.abs(Y-C) > TOLERANCE_1);  	Iterations++;  }  while (Iterations < 30 && Math.Abs (Y - C) > TargetAccuracy);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,TranslateTo,The following statement contains a magic number: do {  	//    SY = Math.sin(Y);  	SY = Math.Sin (Y);  	//    CY = Math.cos(Y);  	CY = Math.Cos (Y);  	//    CZ = Math.cos(BAZ+Y);  	CZ = Math.Cos (BAZ + Y);  	//    E  = CZ*CZ*2.0-1.0;  	E = CZ * CZ * 2.0 - 1.0;  	//    C  = Y;  	C = Y;  	//    X  = E*CY;  	X = E * CY;  	//    Y  = E+E-1.0;  	Y = E + E - 1.0;  	//    Y  = (((SY*SY*4.0-3.0)*Y*CZ*D/6.0+X)*D/4.0-CZ)*SY*D+TU;  	Y = (((SY * SY * 4.0 - 3.0) * Y * CZ * D / 6.0 + X) * D / 4.0 - CZ) * SY * D + TU;  	//} while (Math.abs(Y-C) > TOLERANCE_1);  	Iterations++;  }  while (Iterations < 30 && Math.Abs (Y - C) > TargetAccuracy);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,TranslateTo,The following statement contains a magic number: do {  	//    SY = Math.sin(Y);  	SY = Math.Sin (Y);  	//    CY = Math.cos(Y);  	CY = Math.Cos (Y);  	//    CZ = Math.cos(BAZ+Y);  	CZ = Math.Cos (BAZ + Y);  	//    E  = CZ*CZ*2.0-1.0;  	E = CZ * CZ * 2.0 - 1.0;  	//    C  = Y;  	C = Y;  	//    X  = E*CY;  	X = E * CY;  	//    Y  = E+E-1.0;  	Y = E + E - 1.0;  	//    Y  = (((SY*SY*4.0-3.0)*Y*CZ*D/6.0+X)*D/4.0-CZ)*SY*D+TU;  	Y = (((SY * SY * 4.0 - 3.0) * Y * CZ * D / 6.0 + X) * D / 4.0 - CZ) * SY * D + TU;  	//} while (Math.abs(Y-C) > TOLERANCE_1);  	Iterations++;  }  while (Iterations < 30 && Math.Abs (Y - C) > TargetAccuracy);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,TranslateTo,The following statement contains a magic number: do {  	//    SY = Math.sin(Y);  	SY = Math.Sin (Y);  	//    CY = Math.cos(Y);  	CY = Math.Cos (Y);  	//    CZ = Math.cos(BAZ+Y);  	CZ = Math.Cos (BAZ + Y);  	//    E  = CZ*CZ*2.0-1.0;  	E = CZ * CZ * 2.0 - 1.0;  	//    C  = Y;  	C = Y;  	//    X  = E*CY;  	X = E * CY;  	//    Y  = E+E-1.0;  	Y = E + E - 1.0;  	//    Y  = (((SY*SY*4.0-3.0)*Y*CZ*D/6.0+X)*D/4.0-CZ)*SY*D+TU;  	Y = (((SY * SY * 4.0 - 3.0) * Y * CZ * D / 6.0 + X) * D / 4.0 - CZ) * SY * D + TU;  	//} while (Math.abs(Y-C) > TOLERANCE_1);  	Iterations++;  }  while (Iterations < 30 && Math.Abs (Y - C) > TargetAccuracy);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,TranslateTo,The following statement contains a magic number: do {  	//    SY = Math.sin(Y);  	SY = Math.Sin (Y);  	//    CY = Math.cos(Y);  	CY = Math.Cos (Y);  	//    CZ = Math.cos(BAZ+Y);  	CZ = Math.Cos (BAZ + Y);  	//    E  = CZ*CZ*2.0-1.0;  	E = CZ * CZ * 2.0 - 1.0;  	//    C  = Y;  	C = Y;  	//    X  = E*CY;  	X = E * CY;  	//    Y  = E+E-1.0;  	Y = E + E - 1.0;  	//    Y  = (((SY*SY*4.0-3.0)*Y*CZ*D/6.0+X)*D/4.0-CZ)*SY*D+TU;  	Y = (((SY * SY * 4.0 - 3.0) * Y * CZ * D / 6.0 + X) * D / 4.0 - CZ) * SY * D + TU;  	//} while (Math.abs(Y-C) > TOLERANCE_1);  	Iterations++;  }  while (Iterations < 30 && Math.Abs (Y - C) > TargetAccuracy);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,TranslateTo,The following statement contains a magic number: do {  	//    SY = Math.sin(Y);  	SY = Math.Sin (Y);  	//    CY = Math.cos(Y);  	CY = Math.Cos (Y);  	//    CZ = Math.cos(BAZ+Y);  	CZ = Math.Cos (BAZ + Y);  	//    E  = CZ*CZ*2.0-1.0;  	E = CZ * CZ * 2.0 - 1.0;  	//    C  = Y;  	C = Y;  	//    X  = E*CY;  	X = E * CY;  	//    Y  = E+E-1.0;  	Y = E + E - 1.0;  	//    Y  = (((SY*SY*4.0-3.0)*Y*CZ*D/6.0+X)*D/4.0-CZ)*SY*D+TU;  	Y = (((SY * SY * 4.0 - 3.0) * Y * CZ * D / 6.0 + X) * D / 4.0 - CZ) * SY * D + TU;  	//} while (Math.abs(Y-C) > TOLERANCE_1);  	Iterations++;  }  while (Iterations < 30 && Math.Abs (Y - C) > TargetAccuracy);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,TranslateTo,The following statement contains a magic number: E = CZ * CZ * 2.0 - 1.0;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,TranslateTo,The following statement contains a magic number: Y = (((SY * SY * 4.0 - 3.0) * Y * CZ * D / 6.0 + X) * D / 4.0 - CZ) * SY * D + TU;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,TranslateTo,The following statement contains a magic number: Y = (((SY * SY * 4.0 - 3.0) * Y * CZ * D / 6.0 + X) * D / 4.0 - CZ) * SY * D + TU;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,TranslateTo,The following statement contains a magic number: Y = (((SY * SY * 4.0 - 3.0) * Y * CZ * D / 6.0 + X) * D / 4.0 - CZ) * SY * D + TU;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,TranslateTo,The following statement contains a magic number: Y = (((SY * SY * 4.0 - 3.0) * Y * CZ * D / 6.0 + X) * D / 4.0 - CZ) * SY * D + TU;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,TranslateTo,The following statement contains a magic number: C = ((-3.0 * C2A + 4.0) * f + 4.0) * C2A * f / 16.0;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,TranslateTo,The following statement contains a magic number: C = ((-3.0 * C2A + 4.0) * f + 4.0) * C2A * f / 16.0;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,TranslateTo,The following statement contains a magic number: C = ((-3.0 * C2A + 4.0) * f + 4.0) * C2A * f / 16.0;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,TranslateTo,The following statement contains a magic number: C = ((-3.0 * C2A + 4.0) * f + 4.0) * C2A * f / 16.0;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,TranslateTo,The following statement contains a magic number: long2 = long2 - (2 * Math.PI) * Math.Floor (long2 / (2 * Math.PI) + 0.5);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,TranslateTo,The following statement contains a magic number: long2 = long2 - (2 * Math.PI) * Math.Floor (long2 / (2 * Math.PI) + 0.5);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,TranslateTo,The following statement contains a magic number: long2 = long2 - (2 * Math.PI) * Math.Floor (long2 / (2 * Math.PI) + 0.5);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,TranslateTo,The following statement contains a magic number: return new Position (Latitude.FromRadians (lat2).Round (10)' Longitude.FromRadians (long2).Round (10));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,TranslateTo,The following statement contains a magic number: return new Position (Latitude.FromRadians (lat2).Round (10)' Longitude.FromRadians (long2).Round (10));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,ReadXml,The following statement contains a magic number: switch (reader.LocalName.ToLower (CultureInfo.InvariantCulture)) {  case "pos":  	// Read the "X Y" string' then split by the space between them  	string[] Values = reader.ReadElementContentAsString ().Split (' ');  	// Deserialize the longitude  	_Longitude = new Longitude (double.Parse (Values [0]' CultureInfo.InvariantCulture));  	// Deserialize the latitude  	if (Values.Length > 1)  		_Latitude = new Latitude (double.Parse (Values [1]' CultureInfo.InvariantCulture));  	break;  case "coordinates":  	// Read the "X Y" string' then split by the space between them  	string[] CoordSets = reader.ReadElementContentAsString ().Split (' ');  	string[] Coords = CoordSets [0].Split (''');  	// Deserialize the longitude  	_Longitude = new Longitude (double.Parse (Coords [0]' CultureInfo.InvariantCulture));  	// Deserialize the latitude  	if (Coords.Length > 1)  		_Latitude = new Latitude (double.Parse (Coords [1]' CultureInfo.InvariantCulture));  	break;  case "coord":  	// Read the <gml:coord> start tag  	reader.ReadStartElement ();  	// Now read up to 3 elements: X' and optionally Y or Z  	for (int index = 0; index < 3; index++) {  		/* According to the GML specification' a "gml:x" tag is lower-case.  However'                          * FWTools outputs tags in uppercase "gml:X".  As a result' make this                           * test case-insensitive.                          */switch (reader.LocalName.ToLower (CultureInfo.InvariantCulture)) {  		case "x":  			_Longitude = new Longitude (reader.ReadElementContentAsDouble ());  			break;  		case "y":  			_Latitude = new Latitude (reader.ReadElementContentAsDouble ());  			break;  		case "z":  			// Skip Z  			reader.Skip ();  			break;  		}  		// If we're at an end element' stop  		if (reader.NodeType == XmlNodeType.EndElement)  			break;  	}  	// Read the </gml:coord> end tag  	reader.ReadEndElement ();  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,ReadXml,The following statement contains a magic number: for (int index = 0; index < 3; index++) {  	/* According to the GML specification' a "gml:x" tag is lower-case.  However'                          * FWTools outputs tags in uppercase "gml:X".  As a result' make this                           * test case-insensitive.                          */switch (reader.LocalName.ToLower (CultureInfo.InvariantCulture)) {  	case "x":  		_Longitude = new Longitude (reader.ReadElementContentAsDouble ());  		break;  	case "y":  		_Latitude = new Latitude (reader.ReadElementContentAsDouble ());  		break;  	case "z":  		// Skip Z  		reader.Skip ();  		break;  	}  	// If we're at an end element' stop  	if (reader.NodeType == XmlNodeType.EndElement)  		break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position3D,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position3D.cs,ReadXml,The following statement contains a magic number: switch (reader.LocalName.ToLower (CultureInfo.InvariantCulture)) {  case "pos":  	// Read the "X Y" string' then split by the space between them  	string[] Values = reader.ReadElementContentAsString ().Split (' ');  	// Deserialize the longitude  	longitude = new Longitude (Values [0]' CultureInfo.InvariantCulture);  	// Deserialize the latitude  	if (Values.Length >= 2)  		latitude = new Latitude (Values [1]' CultureInfo.InvariantCulture);  	// Deserialize the altitude  	if (Values.Length == 3)  		_Altitude = Distance.FromMeters (double.Parse (Values [2]' CultureInfo.InvariantCulture));  	// Make the position  	_Position = new Position (latitude' longitude);  	break;  case "coord":  	// Read the <gml:coord> start tag  	reader.ReadStartElement ();  	// Now read up to 3 elements: X' and optionally Y or Z  	for (int index = 0; index < 3; index++) {  		switch (reader.LocalName.ToLower (CultureInfo.InvariantCulture)) {  		case "x":  			longitude = new Longitude (reader.ReadElementContentAsDouble ());  			break;  		case "y":  			latitude = new Latitude (reader.ReadElementContentAsDouble ());  			break;  		case "z":  			// Read Z as meters (there's no unit type in the spec :P morons)  			_Altitude = Distance.FromMeters (reader.ReadElementContentAsDouble ());  			break;  		}  		// If we're at an end element' stop  		if (reader.NodeType == XmlNodeType.EndElement)  			break;  	}  	// Make the position  	_Position = new Position (latitude' longitude);  	// Read the </gml:coord> end tag  	reader.ReadEndElement ();  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position3D,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position3D.cs,ReadXml,The following statement contains a magic number: switch (reader.LocalName.ToLower (CultureInfo.InvariantCulture)) {  case "pos":  	// Read the "X Y" string' then split by the space between them  	string[] Values = reader.ReadElementContentAsString ().Split (' ');  	// Deserialize the longitude  	longitude = new Longitude (Values [0]' CultureInfo.InvariantCulture);  	// Deserialize the latitude  	if (Values.Length >= 2)  		latitude = new Latitude (Values [1]' CultureInfo.InvariantCulture);  	// Deserialize the altitude  	if (Values.Length == 3)  		_Altitude = Distance.FromMeters (double.Parse (Values [2]' CultureInfo.InvariantCulture));  	// Make the position  	_Position = new Position (latitude' longitude);  	break;  case "coord":  	// Read the <gml:coord> start tag  	reader.ReadStartElement ();  	// Now read up to 3 elements: X' and optionally Y or Z  	for (int index = 0; index < 3; index++) {  		switch (reader.LocalName.ToLower (CultureInfo.InvariantCulture)) {  		case "x":  			longitude = new Longitude (reader.ReadElementContentAsDouble ());  			break;  		case "y":  			latitude = new Latitude (reader.ReadElementContentAsDouble ());  			break;  		case "z":  			// Read Z as meters (there's no unit type in the spec :P morons)  			_Altitude = Distance.FromMeters (reader.ReadElementContentAsDouble ());  			break;  		}  		// If we're at an end element' stop  		if (reader.NodeType == XmlNodeType.EndElement)  			break;  	}  	// Make the position  	_Position = new Position (latitude' longitude);  	// Read the </gml:coord> end tag  	reader.ReadEndElement ();  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position3D,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position3D.cs,ReadXml,The following statement contains a magic number: switch (reader.LocalName.ToLower (CultureInfo.InvariantCulture)) {  case "pos":  	// Read the "X Y" string' then split by the space between them  	string[] Values = reader.ReadElementContentAsString ().Split (' ');  	// Deserialize the longitude  	longitude = new Longitude (Values [0]' CultureInfo.InvariantCulture);  	// Deserialize the latitude  	if (Values.Length >= 2)  		latitude = new Latitude (Values [1]' CultureInfo.InvariantCulture);  	// Deserialize the altitude  	if (Values.Length == 3)  		_Altitude = Distance.FromMeters (double.Parse (Values [2]' CultureInfo.InvariantCulture));  	// Make the position  	_Position = new Position (latitude' longitude);  	break;  case "coord":  	// Read the <gml:coord> start tag  	reader.ReadStartElement ();  	// Now read up to 3 elements: X' and optionally Y or Z  	for (int index = 0; index < 3; index++) {  		switch (reader.LocalName.ToLower (CultureInfo.InvariantCulture)) {  		case "x":  			longitude = new Longitude (reader.ReadElementContentAsDouble ());  			break;  		case "y":  			latitude = new Latitude (reader.ReadElementContentAsDouble ());  			break;  		case "z":  			// Read Z as meters (there's no unit type in the spec :P morons)  			_Altitude = Distance.FromMeters (reader.ReadElementContentAsDouble ());  			break;  		}  		// If we're at an end element' stop  		if (reader.NodeType == XmlNodeType.EndElement)  			break;  	}  	// Make the position  	_Position = new Position (latitude' longitude);  	// Read the </gml:coord> end tag  	reader.ReadEndElement ();  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position3D,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position3D.cs,ReadXml,The following statement contains a magic number: switch (reader.LocalName.ToLower (CultureInfo.InvariantCulture)) {  case "pos":  	// Read the "X Y" string' then split by the space between them  	string[] Values = reader.ReadElementContentAsString ().Split (' ');  	// Deserialize the longitude  	longitude = new Longitude (Values [0]' CultureInfo.InvariantCulture);  	// Deserialize the latitude  	if (Values.Length >= 2)  		latitude = new Latitude (Values [1]' CultureInfo.InvariantCulture);  	// Deserialize the altitude  	if (Values.Length == 3)  		_Altitude = Distance.FromMeters (double.Parse (Values [2]' CultureInfo.InvariantCulture));  	// Make the position  	_Position = new Position (latitude' longitude);  	break;  case "coord":  	// Read the <gml:coord> start tag  	reader.ReadStartElement ();  	// Now read up to 3 elements: X' and optionally Y or Z  	for (int index = 0; index < 3; index++) {  		switch (reader.LocalName.ToLower (CultureInfo.InvariantCulture)) {  		case "x":  			longitude = new Longitude (reader.ReadElementContentAsDouble ());  			break;  		case "y":  			latitude = new Latitude (reader.ReadElementContentAsDouble ());  			break;  		case "z":  			// Read Z as meters (there's no unit type in the spec :P morons)  			_Altitude = Distance.FromMeters (reader.ReadElementContentAsDouble ());  			break;  		}  		// If we're at an end element' stop  		if (reader.NodeType == XmlNodeType.EndElement)  			break;  	}  	// Make the position  	_Position = new Position (latitude' longitude);  	// Read the </gml:coord> end tag  	reader.ReadEndElement ();  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position3D,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position3D.cs,ReadXml,The following statement contains a magic number: if (Values.Length >= 2)  	latitude = new Latitude (Values [1]' CultureInfo.InvariantCulture);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position3D,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position3D.cs,ReadXml,The following statement contains a magic number: if (Values.Length == 3)  	_Altitude = Distance.FromMeters (double.Parse (Values [2]' CultureInfo.InvariantCulture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position3D,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position3D.cs,ReadXml,The following statement contains a magic number: if (Values.Length == 3)  	_Altitude = Distance.FromMeters (double.Parse (Values [2]' CultureInfo.InvariantCulture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position3D,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position3D.cs,ReadXml,The following statement contains a magic number: _Altitude = Distance.FromMeters (double.Parse (Values [2]' CultureInfo.InvariantCulture));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position3D,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position3D.cs,ReadXml,The following statement contains a magic number: for (int index = 0; index < 3; index++) {  	switch (reader.LocalName.ToLower (CultureInfo.InvariantCulture)) {  	case "x":  		longitude = new Longitude (reader.ReadElementContentAsDouble ());  		break;  	case "y":  		latitude = new Latitude (reader.ReadElementContentAsDouble ());  		break;  	case "z":  		// Read Z as meters (there's no unit type in the spec :P morons)  		_Altitude = Distance.FromMeters (reader.ReadElementContentAsDouble ());  		break;  	}  	// If we're at an end element' stop  	if (reader.NodeType == XmlNodeType.EndElement)  		break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,RectangleD,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\RectangleD.cs,RectangleD,The following statement contains a magic number: if (Values.Length == 4) {  	// Extract each item  	m_Top = double.Parse (Values [0]' _culture);  	m_Left = double.Parse (Values [1]' _culture);  	m_Bottom = double.Parse (Values [2]' _culture);  	m_Right = double.Parse (Values [3]' _culture);  }  else {  	throw new FormatException (Properties.Resources.RectangleD_InvalidFormat);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,RectangleD,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\RectangleD.cs,RectangleD,The following statement contains a magic number: if (Values.Length == 4) {  	// Extract each item  	m_Top = double.Parse (Values [0]' _culture);  	m_Left = double.Parse (Values [1]' _culture);  	m_Bottom = double.Parse (Values [2]' _culture);  	m_Right = double.Parse (Values [3]' _culture);  }  else {  	throw new FormatException (Properties.Resources.RectangleD_InvalidFormat);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,RectangleD,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\RectangleD.cs,RectangleD,The following statement contains a magic number: if (Values.Length == 4) {  	// Extract each item  	m_Top = double.Parse (Values [0]' _culture);  	m_Left = double.Parse (Values [1]' _culture);  	m_Bottom = double.Parse (Values [2]' _culture);  	m_Right = double.Parse (Values [3]' _culture);  }  else {  	throw new FormatException (Properties.Resources.RectangleD_InvalidFormat);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,RectangleD,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\RectangleD.cs,RectangleD,The following statement contains a magic number: m_Bottom = double.Parse (Values [2]' _culture);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,RectangleD,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\RectangleD.cs,RectangleD,The following statement contains a magic number: m_Right = double.Parse (Values [3]' _culture);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,RectangleD,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\RectangleD.cs,CenterOn,The following statement contains a magic number: return new RectangleD (new PointD (_point.X - (Width * 0.5)' _point.Y - (Height * 0.5))' Size);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,RectangleD,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\RectangleD.cs,CenterOn,The following statement contains a magic number: return new RectangleD (new PointD (_point.X - (Width * 0.5)' _point.Y - (Height * 0.5))' Size);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,RectangleD,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\RectangleD.cs,Inflate,The following statement contains a magic number: _widthOffset *= .5;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,RectangleD,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\RectangleD.cs,Inflate,The following statement contains a magic number: _heightOffset *= .5;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,SizeD,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\SizeD.cs,SizeD,The following statement contains a magic number: if (values.Length != 2)  	throw new FormatException (Properties.Resources.SizeD_InvalidFormat);  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Speed,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Speed.cs,ToDistance,The following statement contains a magic number: return new Distance (ToMetersPerSecond ().Value * time.TotalMilliseconds / 1000.0' DistanceUnit.Meters).ToLocalUnitType ();  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Speed,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Speed.cs,Random,The following statement contains a magic number: return new Speed (generator.NextDouble () * 200' SpeedUnit.KilometersPerHour).ToLocalUnitType ();  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Speed,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Speed.cs,ToString,The following statement contains a magic number: try {  	// Convert the format to uppercase  	format = format.ToUpper (CultureInfo.InvariantCulture);  	// Use the default if "g" is passed  	if (String.Compare (format' "G"' true' culture) == 0)  		format = "#" + culture.NumberFormat.NumberGroupSeparator + "##0.00 U";  	// Replace "V" with zeroes  	format = format.Replace ("V"' "0");  	// Replace the "d" with "h" since degrees is the same as hours  	if (format.Replace ("U"' "").Length != 0)  		format = Value.ToString (format' culture);  	// Is there a units specifier�  	StartChar = format.IndexOf ("U");  	if (StartChar > -1) {  		// Yes. Look for subsequent H characters or a period  		EndChar = format.LastIndexOf ("U");  		// Extract the sub-string  		SubFormat = format.Substring (StartChar' EndChar - StartChar + 1);  		// Show the unit based on the length  		switch (SubFormat.Length) {  		case 1:  			switch (Units) {  			case SpeedUnit.FeetPerSecond:  				format = format.Replace ("U"' "ft/s");  				break;  			case SpeedUnit.KilometersPerHour:  				format = format.Replace ("U"' "km/h");  				break;  			case SpeedUnit.KilometersPerSecond:  				format = format.Replace ("U"' "km/s");  				break;  			case SpeedUnit.Knots:  				format = format.Replace ("U"' "kts");  				break;  			case SpeedUnit.MetersPerSecond:  				format = format.Replace ("U"' "m/s");  				break;  			case SpeedUnit.StatuteMilesPerHour:  				format = format.Replace ("U"' "MPH");  				break;  			}  			break;  		case 2:  			switch (Units) {  			case SpeedUnit.FeetPerSecond:  				format = format.Replace ("UU"' "ft/sec");  				break;  			case SpeedUnit.KilometersPerHour:  				format = format.Replace ("UU"' "km/hour");  				break;  			case SpeedUnit.KilometersPerSecond:  				format = format.Replace ("UU"' "km/sec");  				break;  			case SpeedUnit.Knots:  				format = format.Replace ("UU"' "kts");  				break;  			case SpeedUnit.MetersPerSecond:  				format = format.Replace ("UU"' "m/sec");  				break;  			case SpeedUnit.StatuteMilesPerHour:  				format = format.Replace ("UU"' "mi/hour");  				break;  			}  			break;  		case 3:  			switch (Units) {  			case SpeedUnit.FeetPerSecond:  				format = format.Replace ("UUU"' "feet/second");  				break;  			case SpeedUnit.KilometersPerHour:  				format = format.Replace ("UUU"' "kilometers/hour");  				break;  			case SpeedUnit.KilometersPerSecond:  				format = format.Replace ("UUU"' "kilometers/second");  				break;  			case SpeedUnit.Knots:  				format = format.Replace ("UUU"' "knots");  				break;  			case SpeedUnit.MetersPerSecond:  				format = format.Replace ("UUU"' "meters/second");  				break;  			case SpeedUnit.StatuteMilesPerHour:  				format = format.Replace ("UUU"' "miles/hour");  				break;  			}  			break;  		case 4:  			switch (Units) {  			case SpeedUnit.FeetPerSecond:  				format = format.Replace ("UUUU"' "feet per second");  				break;  			case SpeedUnit.KilometersPerHour:  				format = format.Replace ("UUUU"' "kilometers per hour");  				break;  			case SpeedUnit.KilometersPerSecond:  				format = format.Replace ("UUUU"' "kilometers per second");  				break;  			case SpeedUnit.Knots:  				format = format.Replace ("UUUU"' "knots");  				break;  			case SpeedUnit.MetersPerSecond:  				format = format.Replace ("UUUU"' "meters per second");  				break;  			case SpeedUnit.StatuteMilesPerHour:  				format = format.Replace ("UUUU"' "miles per hour");  				break;  			}  			break;  		}  	}  	// Return the final value  	return format;  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Speed_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Speed,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Speed.cs,ToString,The following statement contains a magic number: try {  	// Convert the format to uppercase  	format = format.ToUpper (CultureInfo.InvariantCulture);  	// Use the default if "g" is passed  	if (String.Compare (format' "G"' true' culture) == 0)  		format = "#" + culture.NumberFormat.NumberGroupSeparator + "##0.00 U";  	// Replace "V" with zeroes  	format = format.Replace ("V"' "0");  	// Replace the "d" with "h" since degrees is the same as hours  	if (format.Replace ("U"' "").Length != 0)  		format = Value.ToString (format' culture);  	// Is there a units specifier�  	StartChar = format.IndexOf ("U");  	if (StartChar > -1) {  		// Yes. Look for subsequent H characters or a period  		EndChar = format.LastIndexOf ("U");  		// Extract the sub-string  		SubFormat = format.Substring (StartChar' EndChar - StartChar + 1);  		// Show the unit based on the length  		switch (SubFormat.Length) {  		case 1:  			switch (Units) {  			case SpeedUnit.FeetPerSecond:  				format = format.Replace ("U"' "ft/s");  				break;  			case SpeedUnit.KilometersPerHour:  				format = format.Replace ("U"' "km/h");  				break;  			case SpeedUnit.KilometersPerSecond:  				format = format.Replace ("U"' "km/s");  				break;  			case SpeedUnit.Knots:  				format = format.Replace ("U"' "kts");  				break;  			case SpeedUnit.MetersPerSecond:  				format = format.Replace ("U"' "m/s");  				break;  			case SpeedUnit.StatuteMilesPerHour:  				format = format.Replace ("U"' "MPH");  				break;  			}  			break;  		case 2:  			switch (Units) {  			case SpeedUnit.FeetPerSecond:  				format = format.Replace ("UU"' "ft/sec");  				break;  			case SpeedUnit.KilometersPerHour:  				format = format.Replace ("UU"' "km/hour");  				break;  			case SpeedUnit.KilometersPerSecond:  				format = format.Replace ("UU"' "km/sec");  				break;  			case SpeedUnit.Knots:  				format = format.Replace ("UU"' "kts");  				break;  			case SpeedUnit.MetersPerSecond:  				format = format.Replace ("UU"' "m/sec");  				break;  			case SpeedUnit.StatuteMilesPerHour:  				format = format.Replace ("UU"' "mi/hour");  				break;  			}  			break;  		case 3:  			switch (Units) {  			case SpeedUnit.FeetPerSecond:  				format = format.Replace ("UUU"' "feet/second");  				break;  			case SpeedUnit.KilometersPerHour:  				format = format.Replace ("UUU"' "kilometers/hour");  				break;  			case SpeedUnit.KilometersPerSecond:  				format = format.Replace ("UUU"' "kilometers/second");  				break;  			case SpeedUnit.Knots:  				format = format.Replace ("UUU"' "knots");  				break;  			case SpeedUnit.MetersPerSecond:  				format = format.Replace ("UUU"' "meters/second");  				break;  			case SpeedUnit.StatuteMilesPerHour:  				format = format.Replace ("UUU"' "miles/hour");  				break;  			}  			break;  		case 4:  			switch (Units) {  			case SpeedUnit.FeetPerSecond:  				format = format.Replace ("UUUU"' "feet per second");  				break;  			case SpeedUnit.KilometersPerHour:  				format = format.Replace ("UUUU"' "kilometers per hour");  				break;  			case SpeedUnit.KilometersPerSecond:  				format = format.Replace ("UUUU"' "kilometers per second");  				break;  			case SpeedUnit.Knots:  				format = format.Replace ("UUUU"' "knots");  				break;  			case SpeedUnit.MetersPerSecond:  				format = format.Replace ("UUUU"' "meters per second");  				break;  			case SpeedUnit.StatuteMilesPerHour:  				format = format.Replace ("UUUU"' "miles per hour");  				break;  			}  			break;  		}  	}  	// Return the final value  	return format;  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Speed_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Speed,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Speed.cs,ToString,The following statement contains a magic number: try {  	// Convert the format to uppercase  	format = format.ToUpper (CultureInfo.InvariantCulture);  	// Use the default if "g" is passed  	if (String.Compare (format' "G"' true' culture) == 0)  		format = "#" + culture.NumberFormat.NumberGroupSeparator + "##0.00 U";  	// Replace "V" with zeroes  	format = format.Replace ("V"' "0");  	// Replace the "d" with "h" since degrees is the same as hours  	if (format.Replace ("U"' "").Length != 0)  		format = Value.ToString (format' culture);  	// Is there a units specifier�  	StartChar = format.IndexOf ("U");  	if (StartChar > -1) {  		// Yes. Look for subsequent H characters or a period  		EndChar = format.LastIndexOf ("U");  		// Extract the sub-string  		SubFormat = format.Substring (StartChar' EndChar - StartChar + 1);  		// Show the unit based on the length  		switch (SubFormat.Length) {  		case 1:  			switch (Units) {  			case SpeedUnit.FeetPerSecond:  				format = format.Replace ("U"' "ft/s");  				break;  			case SpeedUnit.KilometersPerHour:  				format = format.Replace ("U"' "km/h");  				break;  			case SpeedUnit.KilometersPerSecond:  				format = format.Replace ("U"' "km/s");  				break;  			case SpeedUnit.Knots:  				format = format.Replace ("U"' "kts");  				break;  			case SpeedUnit.MetersPerSecond:  				format = format.Replace ("U"' "m/s");  				break;  			case SpeedUnit.StatuteMilesPerHour:  				format = format.Replace ("U"' "MPH");  				break;  			}  			break;  		case 2:  			switch (Units) {  			case SpeedUnit.FeetPerSecond:  				format = format.Replace ("UU"' "ft/sec");  				break;  			case SpeedUnit.KilometersPerHour:  				format = format.Replace ("UU"' "km/hour");  				break;  			case SpeedUnit.KilometersPerSecond:  				format = format.Replace ("UU"' "km/sec");  				break;  			case SpeedUnit.Knots:  				format = format.Replace ("UU"' "kts");  				break;  			case SpeedUnit.MetersPerSecond:  				format = format.Replace ("UU"' "m/sec");  				break;  			case SpeedUnit.StatuteMilesPerHour:  				format = format.Replace ("UU"' "mi/hour");  				break;  			}  			break;  		case 3:  			switch (Units) {  			case SpeedUnit.FeetPerSecond:  				format = format.Replace ("UUU"' "feet/second");  				break;  			case SpeedUnit.KilometersPerHour:  				format = format.Replace ("UUU"' "kilometers/hour");  				break;  			case SpeedUnit.KilometersPerSecond:  				format = format.Replace ("UUU"' "kilometers/second");  				break;  			case SpeedUnit.Knots:  				format = format.Replace ("UUU"' "knots");  				break;  			case SpeedUnit.MetersPerSecond:  				format = format.Replace ("UUU"' "meters/second");  				break;  			case SpeedUnit.StatuteMilesPerHour:  				format = format.Replace ("UUU"' "miles/hour");  				break;  			}  			break;  		case 4:  			switch (Units) {  			case SpeedUnit.FeetPerSecond:  				format = format.Replace ("UUUU"' "feet per second");  				break;  			case SpeedUnit.KilometersPerHour:  				format = format.Replace ("UUUU"' "kilometers per hour");  				break;  			case SpeedUnit.KilometersPerSecond:  				format = format.Replace ("UUUU"' "kilometers per second");  				break;  			case SpeedUnit.Knots:  				format = format.Replace ("UUUU"' "knots");  				break;  			case SpeedUnit.MetersPerSecond:  				format = format.Replace ("UUUU"' "meters per second");  				break;  			case SpeedUnit.StatuteMilesPerHour:  				format = format.Replace ("UUUU"' "miles per hour");  				break;  			}  			break;  		}  	}  	// Return the final value  	return format;  }  catch (Exception ex) {  	throw new ArgumentException (Properties.Resources.Speed_InvalidFormat' "value"' ex);  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Speed,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Speed.cs,ToString,The following statement contains a magic number: if (StartChar > -1) {  	// Yes. Look for subsequent H characters or a period  	EndChar = format.LastIndexOf ("U");  	// Extract the sub-string  	SubFormat = format.Substring (StartChar' EndChar - StartChar + 1);  	// Show the unit based on the length  	switch (SubFormat.Length) {  	case 1:  		switch (Units) {  		case SpeedUnit.FeetPerSecond:  			format = format.Replace ("U"' "ft/s");  			break;  		case SpeedUnit.KilometersPerHour:  			format = format.Replace ("U"' "km/h");  			break;  		case SpeedUnit.KilometersPerSecond:  			format = format.Replace ("U"' "km/s");  			break;  		case SpeedUnit.Knots:  			format = format.Replace ("U"' "kts");  			break;  		case SpeedUnit.MetersPerSecond:  			format = format.Replace ("U"' "m/s");  			break;  		case SpeedUnit.StatuteMilesPerHour:  			format = format.Replace ("U"' "MPH");  			break;  		}  		break;  	case 2:  		switch (Units) {  		case SpeedUnit.FeetPerSecond:  			format = format.Replace ("UU"' "ft/sec");  			break;  		case SpeedUnit.KilometersPerHour:  			format = format.Replace ("UU"' "km/hour");  			break;  		case SpeedUnit.KilometersPerSecond:  			format = format.Replace ("UU"' "km/sec");  			break;  		case SpeedUnit.Knots:  			format = format.Replace ("UU"' "kts");  			break;  		case SpeedUnit.MetersPerSecond:  			format = format.Replace ("UU"' "m/sec");  			break;  		case SpeedUnit.StatuteMilesPerHour:  			format = format.Replace ("UU"' "mi/hour");  			break;  		}  		break;  	case 3:  		switch (Units) {  		case SpeedUnit.FeetPerSecond:  			format = format.Replace ("UUU"' "feet/second");  			break;  		case SpeedUnit.KilometersPerHour:  			format = format.Replace ("UUU"' "kilometers/hour");  			break;  		case SpeedUnit.KilometersPerSecond:  			format = format.Replace ("UUU"' "kilometers/second");  			break;  		case SpeedUnit.Knots:  			format = format.Replace ("UUU"' "knots");  			break;  		case SpeedUnit.MetersPerSecond:  			format = format.Replace ("UUU"' "meters/second");  			break;  		case SpeedUnit.StatuteMilesPerHour:  			format = format.Replace ("UUU"' "miles/hour");  			break;  		}  		break;  	case 4:  		switch (Units) {  		case SpeedUnit.FeetPerSecond:  			format = format.Replace ("UUUU"' "feet per second");  			break;  		case SpeedUnit.KilometersPerHour:  			format = format.Replace ("UUUU"' "kilometers per hour");  			break;  		case SpeedUnit.KilometersPerSecond:  			format = format.Replace ("UUUU"' "kilometers per second");  			break;  		case SpeedUnit.Knots:  			format = format.Replace ("UUUU"' "knots");  			break;  		case SpeedUnit.MetersPerSecond:  			format = format.Replace ("UUUU"' "meters per second");  			break;  		case SpeedUnit.StatuteMilesPerHour:  			format = format.Replace ("UUUU"' "miles per hour");  			break;  		}  		break;  	}  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Speed,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Speed.cs,ToString,The following statement contains a magic number: if (StartChar > -1) {  	// Yes. Look for subsequent H characters or a period  	EndChar = format.LastIndexOf ("U");  	// Extract the sub-string  	SubFormat = format.Substring (StartChar' EndChar - StartChar + 1);  	// Show the unit based on the length  	switch (SubFormat.Length) {  	case 1:  		switch (Units) {  		case SpeedUnit.FeetPerSecond:  			format = format.Replace ("U"' "ft/s");  			break;  		case SpeedUnit.KilometersPerHour:  			format = format.Replace ("U"' "km/h");  			break;  		case SpeedUnit.KilometersPerSecond:  			format = format.Replace ("U"' "km/s");  			break;  		case SpeedUnit.Knots:  			format = format.Replace ("U"' "kts");  			break;  		case SpeedUnit.MetersPerSecond:  			format = format.Replace ("U"' "m/s");  			break;  		case SpeedUnit.StatuteMilesPerHour:  			format = format.Replace ("U"' "MPH");  			break;  		}  		break;  	case 2:  		switch (Units) {  		case SpeedUnit.FeetPerSecond:  			format = format.Replace ("UU"' "ft/sec");  			break;  		case SpeedUnit.KilometersPerHour:  			format = format.Replace ("UU"' "km/hour");  			break;  		case SpeedUnit.KilometersPerSecond:  			format = format.Replace ("UU"' "km/sec");  			break;  		case SpeedUnit.Knots:  			format = format.Replace ("UU"' "kts");  			break;  		case SpeedUnit.MetersPerSecond:  			format = format.Replace ("UU"' "m/sec");  			break;  		case SpeedUnit.StatuteMilesPerHour:  			format = format.Replace ("UU"' "mi/hour");  			break;  		}  		break;  	case 3:  		switch (Units) {  		case SpeedUnit.FeetPerSecond:  			format = format.Replace ("UUU"' "feet/second");  			break;  		case SpeedUnit.KilometersPerHour:  			format = format.Replace ("UUU"' "kilometers/hour");  			break;  		case SpeedUnit.KilometersPerSecond:  			format = format.Replace ("UUU"' "kilometers/second");  			break;  		case SpeedUnit.Knots:  			format = format.Replace ("UUU"' "knots");  			break;  		case SpeedUnit.MetersPerSecond:  			format = format.Replace ("UUU"' "meters/second");  			break;  		case SpeedUnit.StatuteMilesPerHour:  			format = format.Replace ("UUU"' "miles/hour");  			break;  		}  		break;  	case 4:  		switch (Units) {  		case SpeedUnit.FeetPerSecond:  			format = format.Replace ("UUUU"' "feet per second");  			break;  		case SpeedUnit.KilometersPerHour:  			format = format.Replace ("UUUU"' "kilometers per hour");  			break;  		case SpeedUnit.KilometersPerSecond:  			format = format.Replace ("UUUU"' "kilometers per second");  			break;  		case SpeedUnit.Knots:  			format = format.Replace ("UUUU"' "knots");  			break;  		case SpeedUnit.MetersPerSecond:  			format = format.Replace ("UUUU"' "meters per second");  			break;  		case SpeedUnit.StatuteMilesPerHour:  			format = format.Replace ("UUUU"' "miles per hour");  			break;  		}  		break;  	}  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Speed,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Speed.cs,ToString,The following statement contains a magic number: if (StartChar > -1) {  	// Yes. Look for subsequent H characters or a period  	EndChar = format.LastIndexOf ("U");  	// Extract the sub-string  	SubFormat = format.Substring (StartChar' EndChar - StartChar + 1);  	// Show the unit based on the length  	switch (SubFormat.Length) {  	case 1:  		switch (Units) {  		case SpeedUnit.FeetPerSecond:  			format = format.Replace ("U"' "ft/s");  			break;  		case SpeedUnit.KilometersPerHour:  			format = format.Replace ("U"' "km/h");  			break;  		case SpeedUnit.KilometersPerSecond:  			format = format.Replace ("U"' "km/s");  			break;  		case SpeedUnit.Knots:  			format = format.Replace ("U"' "kts");  			break;  		case SpeedUnit.MetersPerSecond:  			format = format.Replace ("U"' "m/s");  			break;  		case SpeedUnit.StatuteMilesPerHour:  			format = format.Replace ("U"' "MPH");  			break;  		}  		break;  	case 2:  		switch (Units) {  		case SpeedUnit.FeetPerSecond:  			format = format.Replace ("UU"' "ft/sec");  			break;  		case SpeedUnit.KilometersPerHour:  			format = format.Replace ("UU"' "km/hour");  			break;  		case SpeedUnit.KilometersPerSecond:  			format = format.Replace ("UU"' "km/sec");  			break;  		case SpeedUnit.Knots:  			format = format.Replace ("UU"' "kts");  			break;  		case SpeedUnit.MetersPerSecond:  			format = format.Replace ("UU"' "m/sec");  			break;  		case SpeedUnit.StatuteMilesPerHour:  			format = format.Replace ("UU"' "mi/hour");  			break;  		}  		break;  	case 3:  		switch (Units) {  		case SpeedUnit.FeetPerSecond:  			format = format.Replace ("UUU"' "feet/second");  			break;  		case SpeedUnit.KilometersPerHour:  			format = format.Replace ("UUU"' "kilometers/hour");  			break;  		case SpeedUnit.KilometersPerSecond:  			format = format.Replace ("UUU"' "kilometers/second");  			break;  		case SpeedUnit.Knots:  			format = format.Replace ("UUU"' "knots");  			break;  		case SpeedUnit.MetersPerSecond:  			format = format.Replace ("UUU"' "meters/second");  			break;  		case SpeedUnit.StatuteMilesPerHour:  			format = format.Replace ("UUU"' "miles/hour");  			break;  		}  		break;  	case 4:  		switch (Units) {  		case SpeedUnit.FeetPerSecond:  			format = format.Replace ("UUUU"' "feet per second");  			break;  		case SpeedUnit.KilometersPerHour:  			format = format.Replace ("UUUU"' "kilometers per hour");  			break;  		case SpeedUnit.KilometersPerSecond:  			format = format.Replace ("UUUU"' "kilometers per second");  			break;  		case SpeedUnit.Knots:  			format = format.Replace ("UUUU"' "knots");  			break;  		case SpeedUnit.MetersPerSecond:  			format = format.Replace ("UUUU"' "meters per second");  			break;  		case SpeedUnit.StatuteMilesPerHour:  			format = format.Replace ("UUUU"' "miles per hour");  			break;  		}  		break;  	}  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Speed,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Speed.cs,ToString,The following statement contains a magic number: switch (SubFormat.Length) {  case 1:  	switch (Units) {  	case SpeedUnit.FeetPerSecond:  		format = format.Replace ("U"' "ft/s");  		break;  	case SpeedUnit.KilometersPerHour:  		format = format.Replace ("U"' "km/h");  		break;  	case SpeedUnit.KilometersPerSecond:  		format = format.Replace ("U"' "km/s");  		break;  	case SpeedUnit.Knots:  		format = format.Replace ("U"' "kts");  		break;  	case SpeedUnit.MetersPerSecond:  		format = format.Replace ("U"' "m/s");  		break;  	case SpeedUnit.StatuteMilesPerHour:  		format = format.Replace ("U"' "MPH");  		break;  	}  	break;  case 2:  	switch (Units) {  	case SpeedUnit.FeetPerSecond:  		format = format.Replace ("UU"' "ft/sec");  		break;  	case SpeedUnit.KilometersPerHour:  		format = format.Replace ("UU"' "km/hour");  		break;  	case SpeedUnit.KilometersPerSecond:  		format = format.Replace ("UU"' "km/sec");  		break;  	case SpeedUnit.Knots:  		format = format.Replace ("UU"' "kts");  		break;  	case SpeedUnit.MetersPerSecond:  		format = format.Replace ("UU"' "m/sec");  		break;  	case SpeedUnit.StatuteMilesPerHour:  		format = format.Replace ("UU"' "mi/hour");  		break;  	}  	break;  case 3:  	switch (Units) {  	case SpeedUnit.FeetPerSecond:  		format = format.Replace ("UUU"' "feet/second");  		break;  	case SpeedUnit.KilometersPerHour:  		format = format.Replace ("UUU"' "kilometers/hour");  		break;  	case SpeedUnit.KilometersPerSecond:  		format = format.Replace ("UUU"' "kilometers/second");  		break;  	case SpeedUnit.Knots:  		format = format.Replace ("UUU"' "knots");  		break;  	case SpeedUnit.MetersPerSecond:  		format = format.Replace ("UUU"' "meters/second");  		break;  	case SpeedUnit.StatuteMilesPerHour:  		format = format.Replace ("UUU"' "miles/hour");  		break;  	}  	break;  case 4:  	switch (Units) {  	case SpeedUnit.FeetPerSecond:  		format = format.Replace ("UUUU"' "feet per second");  		break;  	case SpeedUnit.KilometersPerHour:  		format = format.Replace ("UUUU"' "kilometers per hour");  		break;  	case SpeedUnit.KilometersPerSecond:  		format = format.Replace ("UUUU"' "kilometers per second");  		break;  	case SpeedUnit.Knots:  		format = format.Replace ("UUUU"' "knots");  		break;  	case SpeedUnit.MetersPerSecond:  		format = format.Replace ("UUUU"' "meters per second");  		break;  	case SpeedUnit.StatuteMilesPerHour:  		format = format.Replace ("UUUU"' "miles per hour");  		break;  	}  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Speed,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Speed.cs,ToString,The following statement contains a magic number: switch (SubFormat.Length) {  case 1:  	switch (Units) {  	case SpeedUnit.FeetPerSecond:  		format = format.Replace ("U"' "ft/s");  		break;  	case SpeedUnit.KilometersPerHour:  		format = format.Replace ("U"' "km/h");  		break;  	case SpeedUnit.KilometersPerSecond:  		format = format.Replace ("U"' "km/s");  		break;  	case SpeedUnit.Knots:  		format = format.Replace ("U"' "kts");  		break;  	case SpeedUnit.MetersPerSecond:  		format = format.Replace ("U"' "m/s");  		break;  	case SpeedUnit.StatuteMilesPerHour:  		format = format.Replace ("U"' "MPH");  		break;  	}  	break;  case 2:  	switch (Units) {  	case SpeedUnit.FeetPerSecond:  		format = format.Replace ("UU"' "ft/sec");  		break;  	case SpeedUnit.KilometersPerHour:  		format = format.Replace ("UU"' "km/hour");  		break;  	case SpeedUnit.KilometersPerSecond:  		format = format.Replace ("UU"' "km/sec");  		break;  	case SpeedUnit.Knots:  		format = format.Replace ("UU"' "kts");  		break;  	case SpeedUnit.MetersPerSecond:  		format = format.Replace ("UU"' "m/sec");  		break;  	case SpeedUnit.StatuteMilesPerHour:  		format = format.Replace ("UU"' "mi/hour");  		break;  	}  	break;  case 3:  	switch (Units) {  	case SpeedUnit.FeetPerSecond:  		format = format.Replace ("UUU"' "feet/second");  		break;  	case SpeedUnit.KilometersPerHour:  		format = format.Replace ("UUU"' "kilometers/hour");  		break;  	case SpeedUnit.KilometersPerSecond:  		format = format.Replace ("UUU"' "kilometers/second");  		break;  	case SpeedUnit.Knots:  		format = format.Replace ("UUU"' "knots");  		break;  	case SpeedUnit.MetersPerSecond:  		format = format.Replace ("UUU"' "meters/second");  		break;  	case SpeedUnit.StatuteMilesPerHour:  		format = format.Replace ("UUU"' "miles/hour");  		break;  	}  	break;  case 4:  	switch (Units) {  	case SpeedUnit.FeetPerSecond:  		format = format.Replace ("UUUU"' "feet per second");  		break;  	case SpeedUnit.KilometersPerHour:  		format = format.Replace ("UUUU"' "kilometers per hour");  		break;  	case SpeedUnit.KilometersPerSecond:  		format = format.Replace ("UUUU"' "kilometers per second");  		break;  	case SpeedUnit.Knots:  		format = format.Replace ("UUUU"' "knots");  		break;  	case SpeedUnit.MetersPerSecond:  		format = format.Replace ("UUUU"' "meters per second");  		break;  	case SpeedUnit.StatuteMilesPerHour:  		format = format.Replace ("UUUU"' "miles per hour");  		break;  	}  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Speed,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Speed.cs,ToString,The following statement contains a magic number: switch (SubFormat.Length) {  case 1:  	switch (Units) {  	case SpeedUnit.FeetPerSecond:  		format = format.Replace ("U"' "ft/s");  		break;  	case SpeedUnit.KilometersPerHour:  		format = format.Replace ("U"' "km/h");  		break;  	case SpeedUnit.KilometersPerSecond:  		format = format.Replace ("U"' "km/s");  		break;  	case SpeedUnit.Knots:  		format = format.Replace ("U"' "kts");  		break;  	case SpeedUnit.MetersPerSecond:  		format = format.Replace ("U"' "m/s");  		break;  	case SpeedUnit.StatuteMilesPerHour:  		format = format.Replace ("U"' "MPH");  		break;  	}  	break;  case 2:  	switch (Units) {  	case SpeedUnit.FeetPerSecond:  		format = format.Replace ("UU"' "ft/sec");  		break;  	case SpeedUnit.KilometersPerHour:  		format = format.Replace ("UU"' "km/hour");  		break;  	case SpeedUnit.KilometersPerSecond:  		format = format.Replace ("UU"' "km/sec");  		break;  	case SpeedUnit.Knots:  		format = format.Replace ("UU"' "kts");  		break;  	case SpeedUnit.MetersPerSecond:  		format = format.Replace ("UU"' "m/sec");  		break;  	case SpeedUnit.StatuteMilesPerHour:  		format = format.Replace ("UU"' "mi/hour");  		break;  	}  	break;  case 3:  	switch (Units) {  	case SpeedUnit.FeetPerSecond:  		format = format.Replace ("UUU"' "feet/second");  		break;  	case SpeedUnit.KilometersPerHour:  		format = format.Replace ("UUU"' "kilometers/hour");  		break;  	case SpeedUnit.KilometersPerSecond:  		format = format.Replace ("UUU"' "kilometers/second");  		break;  	case SpeedUnit.Knots:  		format = format.Replace ("UUU"' "knots");  		break;  	case SpeedUnit.MetersPerSecond:  		format = format.Replace ("UUU"' "meters/second");  		break;  	case SpeedUnit.StatuteMilesPerHour:  		format = format.Replace ("UUU"' "miles/hour");  		break;  	}  	break;  case 4:  	switch (Units) {  	case SpeedUnit.FeetPerSecond:  		format = format.Replace ("UUUU"' "feet per second");  		break;  	case SpeedUnit.KilometersPerHour:  		format = format.Replace ("UUUU"' "kilometers per hour");  		break;  	case SpeedUnit.KilometersPerSecond:  		format = format.Replace ("UUUU"' "kilometers per second");  		break;  	case SpeedUnit.Knots:  		format = format.Replace ("UUUU"' "knots");  		break;  	case SpeedUnit.MetersPerSecond:  		format = format.Replace ("UUUU"' "meters per second");  		break;  	case SpeedUnit.StatuteMilesPerHour:  		format = format.Replace ("UUUU"' "miles per hour");  		break;  	}  	break;  }  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Helpers,RectangleFHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Helpers\RectangleFHelper.cs,Hypotenuse,The following statement contains a magic number: return (float)Math.Sqrt (Math.Pow (_rectangle.Width' 2) + Math.Pow (_rectangle.Height' 2));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Helpers,RectangleFHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Helpers\RectangleFHelper.cs,Hypotenuse,The following statement contains a magic number: return (float)Math.Sqrt (Math.Pow (_rectangle.Width' 2) + Math.Pow (_rectangle.Height' 2));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Helpers,RectangleFHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Helpers\RectangleFHelper.cs,IsRectangle,The following statement contains a magic number: if (_points.Length != 4)  	return false;  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Helpers,RectangleFHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Helpers\RectangleFHelper.cs,IsRectangle,The following statement contains a magic number: return ((_points [0].X == _points [3].X && _points [0].Y == _points [1].Y && _points [0].X != _points [2].X && _points [0].Y != _points [2].Y) || (_points [0].X == _points [1].X && _points [0].Y == _points [3].Y && _points [0].X != _points [2].X && _points [0].Y != _points [2].Y));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Helpers,RectangleFHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Helpers\RectangleFHelper.cs,IsRectangle,The following statement contains a magic number: return ((_points [0].X == _points [3].X && _points [0].Y == _points [1].Y && _points [0].X != _points [2].X && _points [0].Y != _points [2].Y) || (_points [0].X == _points [1].X && _points [0].Y == _points [3].Y && _points [0].X != _points [2].X && _points [0].Y != _points [2].Y));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Helpers,RectangleFHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Helpers\RectangleFHelper.cs,IsRectangle,The following statement contains a magic number: return ((_points [0].X == _points [3].X && _points [0].Y == _points [1].Y && _points [0].X != _points [2].X && _points [0].Y != _points [2].Y) || (_points [0].X == _points [1].X && _points [0].Y == _points [3].Y && _points [0].X != _points [2].X && _points [0].Y != _points [2].Y));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Helpers,RectangleFHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Helpers\RectangleFHelper.cs,IsRectangle,The following statement contains a magic number: return ((_points [0].X == _points [3].X && _points [0].Y == _points [1].Y && _points [0].X != _points [2].X && _points [0].Y != _points [2].Y) || (_points [0].X == _points [1].X && _points [0].Y == _points [3].Y && _points [0].X != _points [2].X && _points [0].Y != _points [2].Y));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Helpers,RectangleFHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Helpers\RectangleFHelper.cs,IsRectangle,The following statement contains a magic number: return ((_points [0].X == _points [3].X && _points [0].Y == _points [1].Y && _points [0].X != _points [2].X && _points [0].Y != _points [2].Y) || (_points [0].X == _points [1].X && _points [0].Y == _points [3].Y && _points [0].X != _points [2].X && _points [0].Y != _points [2].Y));  
Magic Number,TreeGecko.Library.Geospatial.Geoframeworks.Helpers,RectangleFHelper,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Helpers\RectangleFHelper.cs,IsRectangle,The following statement contains a magic number: return ((_points [0].X == _points [3].X && _points [0].Y == _points [1].Y && _points [0].X != _points [2].X && _points [0].Y != _points [2].Y) || (_points [0].X == _points [1].X && _points [0].Y == _points [3].Y && _points [0].X != _points [2].X && _points [0].Y != _points [2].Y));  
Magic Number,TreeGecko.Library.Geospatial.Objects,GeoBox,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Objects\GeoBox.cs,SetCenter,The following statement contains a magic number: Center = new GeoPoint ((TopRight.X + TopLeft.X) / 2' (TopRight.Y + BottomRight.Y) / 2);  
Magic Number,TreeGecko.Library.Geospatial.Objects,GeoBox,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Objects\GeoBox.cs,SetCenter,The following statement contains a magic number: Center = new GeoPoint ((TopRight.X + TopLeft.X) / 2' (TopRight.Y + BottomRight.Y) / 2);  
Magic Number,TreeGecko.Library.Geospatial.Objects,GeoBox,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Objects\GeoBox.cs,CalculatePoints,The following statement contains a magic number: if (TopLeft != null && TopRight != null && BottomLeft != null && BottomRight != null) {  	East = new GeoPoint (TopRight.X' (TopRight.Y + BottomRight.Y) / 2);  	West = new GeoPoint (TopLeft.X' (TopLeft.Y + BottomLeft.Y) / 2);  	North = new GeoPoint ((TopLeft.X + TopRight.X) / 2' TopLeft.Y);  	South = new GeoPoint ((BottomLeft.X + BottomRight.X) / 2' BottomLeft.Y);  }  
Magic Number,TreeGecko.Library.Geospatial.Objects,GeoBox,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Objects\GeoBox.cs,CalculatePoints,The following statement contains a magic number: if (TopLeft != null && TopRight != null && BottomLeft != null && BottomRight != null) {  	East = new GeoPoint (TopRight.X' (TopRight.Y + BottomRight.Y) / 2);  	West = new GeoPoint (TopLeft.X' (TopLeft.Y + BottomLeft.Y) / 2);  	North = new GeoPoint ((TopLeft.X + TopRight.X) / 2' TopLeft.Y);  	South = new GeoPoint ((BottomLeft.X + BottomRight.X) / 2' BottomLeft.Y);  }  
Magic Number,TreeGecko.Library.Geospatial.Objects,GeoBox,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Objects\GeoBox.cs,CalculatePoints,The following statement contains a magic number: if (TopLeft != null && TopRight != null && BottomLeft != null && BottomRight != null) {  	East = new GeoPoint (TopRight.X' (TopRight.Y + BottomRight.Y) / 2);  	West = new GeoPoint (TopLeft.X' (TopLeft.Y + BottomLeft.Y) / 2);  	North = new GeoPoint ((TopLeft.X + TopRight.X) / 2' TopLeft.Y);  	South = new GeoPoint ((BottomLeft.X + BottomRight.X) / 2' BottomLeft.Y);  }  
Magic Number,TreeGecko.Library.Geospatial.Objects,GeoBox,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Objects\GeoBox.cs,CalculatePoints,The following statement contains a magic number: if (TopLeft != null && TopRight != null && BottomLeft != null && BottomRight != null) {  	East = new GeoPoint (TopRight.X' (TopRight.Y + BottomRight.Y) / 2);  	West = new GeoPoint (TopLeft.X' (TopLeft.Y + BottomLeft.Y) / 2);  	North = new GeoPoint ((TopLeft.X + TopRight.X) / 2' TopLeft.Y);  	South = new GeoPoint ((BottomLeft.X + BottomRight.X) / 2' BottomLeft.Y);  }  
Magic Number,TreeGecko.Library.Geospatial.Objects,GeoBox,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Objects\GeoBox.cs,CalculatePoints,The following statement contains a magic number: East = new GeoPoint (TopRight.X' (TopRight.Y + BottomRight.Y) / 2);  
Magic Number,TreeGecko.Library.Geospatial.Objects,GeoBox,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Objects\GeoBox.cs,CalculatePoints,The following statement contains a magic number: West = new GeoPoint (TopLeft.X' (TopLeft.Y + BottomLeft.Y) / 2);  
Magic Number,TreeGecko.Library.Geospatial.Objects,GeoBox,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Objects\GeoBox.cs,CalculatePoints,The following statement contains a magic number: North = new GeoPoint ((TopLeft.X + TopRight.X) / 2' TopLeft.Y);  
Magic Number,TreeGecko.Library.Geospatial.Objects,GeoBox,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Objects\GeoBox.cs,CalculatePoints,The following statement contains a magic number: South = new GeoPoint ((BottomLeft.X + BottomRight.X) / 2' BottomLeft.Y);  
Magic Number,TreeGecko.Library.Geospatial.Objects,GeoLine,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Objects\GeoLine.cs,ParseOpenGISText,The following statement contains a magic number: if (wkt.StartsWith ("LineString"' StringComparison.InvariantCultureIgnoreCase)) {  	int start = wkt.IndexOf ("(");  	int end = wkt.IndexOf (")");  	string inner = wkt.Substring (start + 1' end - (start + 1));  	string[] points = inner.Split ("'".ToCharArray ()' StringSplitOptions.RemoveEmptyEntries);  	foreach (string point in points) {  		string[] parts = point.Split (" ".ToCharArray ()' StringSplitOptions.RemoveEmptyEntries);  		if (parts.Length == 2) {  			GeoPoint gp = new GeoPoint {  				X = Convert.ToDouble (parts [0])'  				Y = Convert.ToDouble (parts [1])  			};  			Points.Add (gp);  		}  		else {  			TraceFileHelper.Warning (string.Format ("Invalid Point Definition - {0}"' wkt));  			throw new Exception ("Invalid Line definition");  		}  	}  }  else {  	TraceFileHelper.Warning (string.Format ("Not a line - {0}"' wkt));  	throw new Exception ("Not a line");  }  
Magic Number,TreeGecko.Library.Geospatial.Objects,GeoLine,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Objects\GeoLine.cs,ParseOpenGISText,The following statement contains a magic number: foreach (string point in points) {  	string[] parts = point.Split (" ".ToCharArray ()' StringSplitOptions.RemoveEmptyEntries);  	if (parts.Length == 2) {  		GeoPoint gp = new GeoPoint {  			X = Convert.ToDouble (parts [0])'  			Y = Convert.ToDouble (parts [1])  		};  		Points.Add (gp);  	}  	else {  		TraceFileHelper.Warning (string.Format ("Invalid Point Definition - {0}"' wkt));  		throw new Exception ("Invalid Line definition");  	}  }  
Magic Number,TreeGecko.Library.Geospatial.Objects,GeoLine,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Objects\GeoLine.cs,ParseOpenGISText,The following statement contains a magic number: if (parts.Length == 2) {  	GeoPoint gp = new GeoPoint {  		X = Convert.ToDouble (parts [0])'  		Y = Convert.ToDouble (parts [1])  	};  	Points.Add (gp);  }  else {  	TraceFileHelper.Warning (string.Format ("Invalid Point Definition - {0}"' wkt));  	throw new Exception ("Invalid Line definition");  }  
Magic Number,TreeGecko.Library.Geospatial.Objects,GeoPoint,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Objects\GeoPoint.cs,ParseOpenGISText,The following statement contains a magic number: if (wkt.StartsWith ("Point"' StringComparison.InvariantCultureIgnoreCase)) {  	int start = wkt.IndexOf ("(");  	int end = wkt.IndexOf (")");  	string inner = wkt.Substring (start + 1' end - (start + 1));  	string[] parts = inner.Split (" ".ToCharArray ());  	if (parts.Length == 2) {  		X = Convert.ToDouble (parts [0]);  		Y = Convert.ToDouble (parts [1]);  	}  	else {  		TraceFileHelper.Warning (string.Format ("Invalid Point Definition - {0}"' wkt));  		throw new Exception ("Invalid Point definition");  	}  }  else {  	TraceFileHelper.Warning (string.Format ("Not a point - {0}"' wkt));  	throw new Exception ("Not a point");  }  
Magic Number,TreeGecko.Library.Geospatial.Objects,GeoPoint,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Objects\GeoPoint.cs,ParseOpenGISText,The following statement contains a magic number: if (parts.Length == 2) {  	X = Convert.ToDouble (parts [0]);  	Y = Convert.ToDouble (parts [1]);  }  else {  	TraceFileHelper.Warning (string.Format ("Invalid Point Definition - {0}"' wkt));  	throw new Exception ("Invalid Point definition");  }  
Magic Number,TreeGecko.Library.Geospatial.Objects,GeoPolygon,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Objects\GeoPolygon.cs,ParseOpenGISText,The following statement contains a magic number: if (wkt.StartsWith ("Polygon"' StringComparison.InvariantCultureIgnoreCase)) {  	int start = wkt.IndexOf ("(("' StringComparison.InvariantCulture);  	int end = wkt.IndexOf ("))"' StringComparison.InvariantCulture);  	string inner = wkt.Substring (start + 2' end - (start + 2));  	string[] points = inner.Split ("'".ToCharArray ()' StringSplitOptions.RemoveEmptyEntries);  	foreach (string point in points) {  		string[] parts = point.Split (" ".ToCharArray ()' StringSplitOptions.RemoveEmptyEntries);  		if (parts.Length == 2) {  			GeoPoint gp = new GeoPoint {  				X = Convert.ToDouble (parts [0])'  				Y = Convert.ToDouble (parts [1])  			};  			Points.Add (gp);  		}  		else {  			TraceFileHelper.Warning (string.Format ("Invalid Point Definition - {0}"' wkt));  			throw new Exception ("Invalid Line definition");  		}  	}  }  else {  	TraceFileHelper.Warning (string.Format ("Not a line - {0}"' wkt));  	throw new Exception ("Not a line");  }  
Magic Number,TreeGecko.Library.Geospatial.Objects,GeoPolygon,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Objects\GeoPolygon.cs,ParseOpenGISText,The following statement contains a magic number: if (wkt.StartsWith ("Polygon"' StringComparison.InvariantCultureIgnoreCase)) {  	int start = wkt.IndexOf ("(("' StringComparison.InvariantCulture);  	int end = wkt.IndexOf ("))"' StringComparison.InvariantCulture);  	string inner = wkt.Substring (start + 2' end - (start + 2));  	string[] points = inner.Split ("'".ToCharArray ()' StringSplitOptions.RemoveEmptyEntries);  	foreach (string point in points) {  		string[] parts = point.Split (" ".ToCharArray ()' StringSplitOptions.RemoveEmptyEntries);  		if (parts.Length == 2) {  			GeoPoint gp = new GeoPoint {  				X = Convert.ToDouble (parts [0])'  				Y = Convert.ToDouble (parts [1])  			};  			Points.Add (gp);  		}  		else {  			TraceFileHelper.Warning (string.Format ("Invalid Point Definition - {0}"' wkt));  			throw new Exception ("Invalid Line definition");  		}  	}  }  else {  	TraceFileHelper.Warning (string.Format ("Not a line - {0}"' wkt));  	throw new Exception ("Not a line");  }  
Magic Number,TreeGecko.Library.Geospatial.Objects,GeoPolygon,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Objects\GeoPolygon.cs,ParseOpenGISText,The following statement contains a magic number: if (wkt.StartsWith ("Polygon"' StringComparison.InvariantCultureIgnoreCase)) {  	int start = wkt.IndexOf ("(("' StringComparison.InvariantCulture);  	int end = wkt.IndexOf ("))"' StringComparison.InvariantCulture);  	string inner = wkt.Substring (start + 2' end - (start + 2));  	string[] points = inner.Split ("'".ToCharArray ()' StringSplitOptions.RemoveEmptyEntries);  	foreach (string point in points) {  		string[] parts = point.Split (" ".ToCharArray ()' StringSplitOptions.RemoveEmptyEntries);  		if (parts.Length == 2) {  			GeoPoint gp = new GeoPoint {  				X = Convert.ToDouble (parts [0])'  				Y = Convert.ToDouble (parts [1])  			};  			Points.Add (gp);  		}  		else {  			TraceFileHelper.Warning (string.Format ("Invalid Point Definition - {0}"' wkt));  			throw new Exception ("Invalid Line definition");  		}  	}  }  else {  	TraceFileHelper.Warning (string.Format ("Not a line - {0}"' wkt));  	throw new Exception ("Not a line");  }  
Magic Number,TreeGecko.Library.Geospatial.Objects,GeoPolygon,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Objects\GeoPolygon.cs,ParseOpenGISText,The following statement contains a magic number: foreach (string point in points) {  	string[] parts = point.Split (" ".ToCharArray ()' StringSplitOptions.RemoveEmptyEntries);  	if (parts.Length == 2) {  		GeoPoint gp = new GeoPoint {  			X = Convert.ToDouble (parts [0])'  			Y = Convert.ToDouble (parts [1])  		};  		Points.Add (gp);  	}  	else {  		TraceFileHelper.Warning (string.Format ("Invalid Point Definition - {0}"' wkt));  		throw new Exception ("Invalid Line definition");  	}  }  
Magic Number,TreeGecko.Library.Geospatial.Objects,GeoPolygon,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Objects\GeoPolygon.cs,ParseOpenGISText,The following statement contains a magic number: if (parts.Length == 2) {  	GeoPoint gp = new GeoPoint {  		X = Convert.ToDouble (parts [0])'  		Y = Convert.ToDouble (parts [1])  	};  	Points.Add (gp);  }  else {  	TraceFileHelper.Warning (string.Format ("Invalid Point Definition - {0}"' wkt));  	throw new Exception ("Invalid Line definition");  }  
Duplicate Code,TreeGecko.Library.Geospatial.Geoframeworks.Objects,GeographicRectangle,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\GeographicRectangle.cs,IntersectionOf,The method contains a code clone-set at the following line numbers (starting from the method definition): ((26' 47)' (68' 89))
Missing Default,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Area,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Area.cs,ToString,The following switch statement is missing a default case: switch (SubFormat.Length) {  case 1:  	switch (_Units) {  	case AreaUnit.Acres:  		format = format.Replace ("U"' "A");  		break;  	case AreaUnit.SquareCentimeters:  		format = format.Replace ("U"' "cm�");  		break;  	case AreaUnit.SquareFeet:  		format = format.Replace ("U"' "ft�");  		break;  	case AreaUnit.SquareInches:  		format = format.Replace ("U"' "in�");  		break;  	case AreaUnit.SquareKilometers:  		format = format.Replace ("U"' "km�");  		break;  	case AreaUnit.SquareMeters:  		format = format.Replace ("U"' "m�");  		break;  	case AreaUnit.SquareStatuteMiles:  		format = format.Replace ("U"' "mi�");  		break;  	case AreaUnit.SquareNauticalMiles:  		format = format.Replace ("U"' "nm�");  		break;  	}  	break;  case 2:  	switch (_Units) {  	case AreaUnit.Acres:  		format = format.Replace ("UU"' "ac");  		break;  	case AreaUnit.SquareCentimeters:  		format = format.Replace ("UU"' "sq. cm");  		break;  	case AreaUnit.SquareFeet:  		format = format.Replace ("UU"' "sq. ft");  		break;  	case AreaUnit.SquareInches:  		format = format.Replace ("UU"' "sq. in");  		break;  	case AreaUnit.SquareKilometers:  		format = format.Replace ("UU"' "sq. km");  		break;  	case AreaUnit.SquareMeters:  		format = format.Replace ("UU"' "sq. m");  		break;  	case AreaUnit.SquareStatuteMiles:  		format = format.Replace ("UU"' "sq. mi");  		break;  	case AreaUnit.SquareNauticalMiles:  		format = format.Replace ("UU"' "sq. nmi");  		break;  	}  	break;  case 3:  	if (Value == 1) {  		switch (_Units) {  		case AreaUnit.Acres:  			format = format.Replace ("UUU"' "acre");  			break;  		case AreaUnit.SquareCentimeters:  			format = format.Replace ("UUU"' "square centimeter");  			break;  		case AreaUnit.SquareFeet:  			format = format.Replace ("UUU"' "square foot");  			break;  		case AreaUnit.SquareInches:  			format = format.Replace ("UUU"' "square inch");  			break;  		case AreaUnit.SquareKilometers:  			format = format.Replace ("UUU"' "square kilometer");  			break;  		case AreaUnit.SquareMeters:  			format = format.Replace ("UUU"' "square meter");  			break;  		case AreaUnit.SquareStatuteMiles:  			format = format.Replace ("UUU"' "square mile");  			break;  		case AreaUnit.SquareNauticalMiles:  			format = format.Replace ("UUU"' "square nautical mile");  			break;  		}  	}  	else {  		switch (_Units) {  		case AreaUnit.Acres:  			format = format.Replace ("UUU"' "acres");  			break;  		case AreaUnit.SquareCentimeters:  			format = format.Replace ("UUU"' "square centimeters");  			break;  		case AreaUnit.SquareFeet:  			format = format.Replace ("UUU"' "square feet");  			break;  		case AreaUnit.SquareInches:  			format = format.Replace ("UUU"' "square inches");  			break;  		case AreaUnit.SquareKilometers:  			format = format.Replace ("UUU"' "square kilometers");  			break;  		case AreaUnit.SquareMeters:  			format = format.Replace ("UUU"' "square meters");  			break;  		case AreaUnit.SquareStatuteMiles:  			format = format.Replace ("UUU"' "square miles");  			break;  		case AreaUnit.SquareNauticalMiles:  			format = format.Replace ("UUU"' "square nautical miles");  			break;  		}  	}  	break;  }  
Missing Default,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Area,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Area.cs,ToString,The following switch statement is missing a default case: switch (_Units) {  case AreaUnit.Acres:  	format = format.Replace ("U"' "A");  	break;  case AreaUnit.SquareCentimeters:  	format = format.Replace ("U"' "cm�");  	break;  case AreaUnit.SquareFeet:  	format = format.Replace ("U"' "ft�");  	break;  case AreaUnit.SquareInches:  	format = format.Replace ("U"' "in�");  	break;  case AreaUnit.SquareKilometers:  	format = format.Replace ("U"' "km�");  	break;  case AreaUnit.SquareMeters:  	format = format.Replace ("U"' "m�");  	break;  case AreaUnit.SquareStatuteMiles:  	format = format.Replace ("U"' "mi�");  	break;  case AreaUnit.SquareNauticalMiles:  	format = format.Replace ("U"' "nm�");  	break;  }  
Missing Default,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Area,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Area.cs,ToString,The following switch statement is missing a default case: switch (_Units) {  case AreaUnit.Acres:  	format = format.Replace ("UU"' "ac");  	break;  case AreaUnit.SquareCentimeters:  	format = format.Replace ("UU"' "sq. cm");  	break;  case AreaUnit.SquareFeet:  	format = format.Replace ("UU"' "sq. ft");  	break;  case AreaUnit.SquareInches:  	format = format.Replace ("UU"' "sq. in");  	break;  case AreaUnit.SquareKilometers:  	format = format.Replace ("UU"' "sq. km");  	break;  case AreaUnit.SquareMeters:  	format = format.Replace ("UU"' "sq. m");  	break;  case AreaUnit.SquareStatuteMiles:  	format = format.Replace ("UU"' "sq. mi");  	break;  case AreaUnit.SquareNauticalMiles:  	format = format.Replace ("UU"' "sq. nmi");  	break;  }  
Missing Default,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Area,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Area.cs,ToString,The following switch statement is missing a default case: switch (_Units) {  case AreaUnit.Acres:  	format = format.Replace ("UUU"' "acre");  	break;  case AreaUnit.SquareCentimeters:  	format = format.Replace ("UUU"' "square centimeter");  	break;  case AreaUnit.SquareFeet:  	format = format.Replace ("UUU"' "square foot");  	break;  case AreaUnit.SquareInches:  	format = format.Replace ("UUU"' "square inch");  	break;  case AreaUnit.SquareKilometers:  	format = format.Replace ("UUU"' "square kilometer");  	break;  case AreaUnit.SquareMeters:  	format = format.Replace ("UUU"' "square meter");  	break;  case AreaUnit.SquareStatuteMiles:  	format = format.Replace ("UUU"' "square mile");  	break;  case AreaUnit.SquareNauticalMiles:  	format = format.Replace ("UUU"' "square nautical mile");  	break;  }  
Missing Default,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Area,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Area.cs,ToString,The following switch statement is missing a default case: switch (_Units) {  case AreaUnit.Acres:  	format = format.Replace ("UUU"' "acres");  	break;  case AreaUnit.SquareCentimeters:  	format = format.Replace ("UUU"' "square centimeters");  	break;  case AreaUnit.SquareFeet:  	format = format.Replace ("UUU"' "square feet");  	break;  case AreaUnit.SquareInches:  	format = format.Replace ("UUU"' "square inches");  	break;  case AreaUnit.SquareKilometers:  	format = format.Replace ("UUU"' "square kilometers");  	break;  case AreaUnit.SquareMeters:  	format = format.Replace ("UUU"' "square meters");  	break;  case AreaUnit.SquareStatuteMiles:  	format = format.Replace ("UUU"' "square miles");  	break;  case AreaUnit.SquareNauticalMiles:  	format = format.Replace ("UUU"' "square nautical miles");  	break;  }  
Missing Default,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,Azimuth,The following switch statement is missing a default case: switch (value.Trim ().ToUpper (CultureInfo.InvariantCulture)) {  case "N":  case "NORTH":  	_DecimalDegrees = Azimuth.North.DecimalDegrees;  	return;  case "NNE":  case "NORTHNORTHEAST":  case "NORTH-NORTHEAST":  case "NORTH NORTHEAST":  	_DecimalDegrees = Azimuth.NorthNortheast.DecimalDegrees;  	return;  case "NE":  case "NORTHEAST":  case "NORTH-EAST":  case "NORTH EAST":  	_DecimalDegrees = Azimuth.Northeast.DecimalDegrees;  	return;  case "ENE":  case "EASTNORTHEAST":  case "EAST-NORTHEAST":  case "EAST NORTHEAST":  	_DecimalDegrees = Azimuth.EastNortheast.DecimalDegrees;  	return;  case "E":  case "EAST":  	_DecimalDegrees = Azimuth.East.DecimalDegrees;  	return;  case "ESE":  case "EASTSOUTHEAST":  case "EAST-SOUTHEAST":  case "EAST SOUTHEAST":  	_DecimalDegrees = Azimuth.EastSoutheast.DecimalDegrees;  	return;  case "SE":  case "SOUTHEAST":  case "SOUTH-EAST":  case "SOUTH EAST":  	_DecimalDegrees = Azimuth.Southeast.DecimalDegrees;  	return;  case "SSE":  case "SOUTHSOUTHEAST":  case "SOUTH-SOUTHEAST":  case "SOUTH SOUTHEAST":  	_DecimalDegrees = Azimuth.SouthSoutheast.DecimalDegrees;  	return;  case "S":  case "SOUTH":  	_DecimalDegrees = Azimuth.South.DecimalDegrees;  	return;  case "SSW":  case "SOUTHSOUTHWEST":  case "SOUTH-SOUTHWEST":  case "SOUTH SOUTHWEST":  	_DecimalDegrees = Azimuth.SouthSouthwest.DecimalDegrees;  	return;  case "SW":  case "SOUTHWEST":  case "SOUTH-WEST":  case "SOUTH WEST":  	_DecimalDegrees = Azimuth.Southwest.DecimalDegrees;  	return;  case "WSW":  case "WESTSOUTHWEST":  case "WEST-SOUTHWEST":  case "WEST SOUTHWEST":  	_DecimalDegrees = Azimuth.WestSouthwest.DecimalDegrees;  	return;  case "W":  case "WEST":  	_DecimalDegrees = Azimuth.West.DecimalDegrees;  	return;  case "WNW":  case "WESTNORTHWEST":  case "WEST-NORTHWEST":  case "WEST NORTHWEST":  	_DecimalDegrees = Azimuth.WestNorthwest.DecimalDegrees;  	return;  case "NW":  case "NORTHWEST":  case "NORTH-WEST":  case "NORTH WEST":  	_DecimalDegrees = Azimuth.Northwest.DecimalDegrees;  	return;  case "NNW":  case "NORTHNORTHWEST":  case "NORTH-NORTHWEST":  case "NORTH NORTHWEST":  	_DecimalDegrees = Azimuth.NorthNorthwest.DecimalDegrees;  	return;  }  
Missing Default,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,ToString,The following switch statement is missing a default case: switch (Direction) {  case Direction.North:  	format = format.Replace (SubFormat' "N");  	break;  case Direction.NorthNortheast:  	format = format.Replace (SubFormat' "NNE");  	break;  case Direction.Northeast:  	format = format.Replace (SubFormat' "NE");  	break;  case Direction.EastNortheast:  	format = format.Replace (SubFormat' "ENE");  	break;  case Direction.East:  	format = format.Replace (SubFormat' "E");  	break;  case Direction.EastSoutheast:  	format = format.Replace (SubFormat' "ESE");  	break;  case Direction.Southeast:  	format = format.Replace (SubFormat' "SE");  	break;  case Direction.SouthSoutheast:  	format = format.Replace (SubFormat' "SSE");  	break;  case Direction.South:  	format = format.Replace (SubFormat' "S");  	break;  case Direction.SouthSouthwest:  	format = format.Replace (SubFormat' "SSW");  	break;  case Direction.Southwest:  	format = format.Replace (SubFormat' "SW");  	break;  case Direction.WestSouthwest:  	format = format.Replace (SubFormat' "WSW");  	break;  case Direction.West:  	format = format.Replace (SubFormat' "W");  	break;  case Direction.WestNorthwest:  	format = format.Replace (SubFormat' "WNW");  	break;  case Direction.Northwest:  	format = format.Replace (SubFormat' "NW");  	break;  case Direction.NorthNorthwest:  	format = format.Replace (SubFormat' "NNW");  	break;  }  
Missing Default,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Azimuth,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Azimuth.cs,ToString,The following switch statement is missing a default case: switch (Direction) {  case Direction.North:  	format = format.Replace (SubFormat' "North");  	break;  case Direction.NorthNortheast:  	format = format.Replace (SubFormat' "North-Northeast");  	break;  case Direction.Northeast:  	format = format.Replace (SubFormat' "Northeast");  	break;  case Direction.EastNortheast:  	format = format.Replace (SubFormat' "East-Northeast");  	break;  case Direction.East:  	format = format.Replace (SubFormat' "East");  	break;  case Direction.EastSoutheast:  	format = format.Replace (SubFormat' "East-Southeast");  	break;  case Direction.Southeast:  	format = format.Replace (SubFormat' "Southeast");  	break;  case Direction.SouthSoutheast:  	format = format.Replace (SubFormat' "South-Southeast");  	break;  case Direction.South:  	format = format.Replace (SubFormat' "South");  	break;  case Direction.SouthSouthwest:  	format = format.Replace (SubFormat' "South-Southwest");  	break;  case Direction.Southwest:  	format = format.Replace (SubFormat' "Southwest");  	break;  case Direction.WestSouthwest:  	format = format.Replace (SubFormat' "West-Southwest");  	break;  case Direction.West:  	format = format.Replace (SubFormat' "West");  	break;  case Direction.WestNorthwest:  	format = format.Replace (SubFormat' "West-Northwest");  	break;  case Direction.Northwest:  	format = format.Replace (SubFormat' "Northwest");  	break;  case Direction.NorthNorthwest:  	format = format.Replace (SubFormat' "North-Northwest");  	break;  }  
Missing Default,TreeGecko.Library.Geospatial.Geoframeworks.Objects,CartesianPoint,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\CartesianPoint.cs,ReadXml,The following switch statement is missing a default case: switch (_reader.LocalName.ToLower (CultureInfo.InvariantCulture)) {  case "pos":  	// Read the "X Y" string' then split by the space between them  	string[] values = _reader.ReadElementContentAsString ().Split (' ');  	// Deserialize the X  	m_X = Distance.FromMeters (double.Parse (values [0]' CultureInfo.InvariantCulture));  	// Deserialize the Y  	if (values.Length >= 2)  		m_Y = Distance.FromMeters (double.Parse (values [1]' CultureInfo.InvariantCulture));  	// Deserialize the Z  	if (values.Length == 3)  		m_Z = Distance.FromMeters (double.Parse (values [2]' CultureInfo.InvariantCulture));  	break;  case "coord":  	// Read the <gml:coord> start tag  	_reader.ReadStartElement ();  	// Now read up to 3 elements: X' and optionally Y or Z  	for (int index = 0; index < 3; index++) {  		switch (_reader.LocalName.ToLower (CultureInfo.InvariantCulture)) {  		case "x":  			// Read X as meters (there's no unit type in the spec :P morons)  			m_X = Distance.FromMeters (_reader.ReadElementContentAsDouble ());  			break;  		case "y":  			// Read Y as meters (there's no unit type in the spec :P morons)  			m_Y = Distance.FromMeters (_reader.ReadElementContentAsDouble ());  			break;  		case "z":  			// Read Z as meters (there's no unit type in the spec :P morons)  			m_Z = Distance.FromMeters (_reader.ReadElementContentAsDouble ());  			break;  		}  		// If we're at an end element' stop  		if (_reader.NodeType == XmlNodeType.EndElement)  			break;  	}  	// Read the </gml:coord> end tag  	_reader.ReadEndElement ();  	break;  }  
Missing Default,TreeGecko.Library.Geospatial.Geoframeworks.Objects,CartesianPoint,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\CartesianPoint.cs,ReadXml,The following switch statement is missing a default case: switch (_reader.LocalName.ToLower (CultureInfo.InvariantCulture)) {  case "x":  	// Read X as meters (there's no unit type in the spec :P morons)  	m_X = Distance.FromMeters (_reader.ReadElementContentAsDouble ());  	break;  case "y":  	// Read Y as meters (there's no unit type in the spec :P morons)  	m_Y = Distance.FromMeters (_reader.ReadElementContentAsDouble ());  	break;  case "z":  	// Read Z as meters (there's no unit type in the spec :P morons)  	m_Z = Distance.FromMeters (_reader.ReadElementContentAsDouble ());  	break;  }  
Missing Default,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Distance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Distance.cs,ToString,The following switch statement is missing a default case: switch (SubFormat.Length) {  case 1:  	switch (_Units) {  	case DistanceUnit.Centimeters:  		format = format.Replace ("U"' "cm");  		break;  	case DistanceUnit.Feet:  		format = format.Replace ("U"' "'");  		break;  	case DistanceUnit.Inches:  		format = format.Replace ("U"' "\"");  		break;  	case DistanceUnit.Kilometers:  		format = format.Replace ("U"' "km");  		break;  	case DistanceUnit.Meters:  		format = format.Replace ("U"' "m");  		break;  	case DistanceUnit.StatuteMiles:  		format = format.Replace ("U"' "mi");  		break;  	case DistanceUnit.NauticalMiles:  		format = format.Replace ("U"' "nm");  		break;  	}  	break;  case 2:  	switch (_Units) {  	case DistanceUnit.Centimeters:  		format = format.Replace ("UU"' "cm");  		break;  	case DistanceUnit.Feet:  		format = format.Replace ("UU"' "ft");  		break;  	case DistanceUnit.Inches:  		format = format.Replace ("UU"' "in");  		break;  	case DistanceUnit.Kilometers:  		format = format.Replace ("UU"' "km");  		break;  	case DistanceUnit.Meters:  		format = format.Replace ("UU"' "m");  		break;  	case DistanceUnit.StatuteMiles:  		format = format.Replace ("UU"' "mi");  		break;  	case DistanceUnit.NauticalMiles:  		format = format.Replace ("UU"' "nm");  		break;  	}  	break;  case 3:  	if (Value == 1) {  		switch (_Units) {  		case DistanceUnit.Centimeters:  			format = format.Replace ("UUU"' "centimeter");  			break;  		case DistanceUnit.Feet:  			format = format.Replace ("UUU"' "foot");  			break;  		case DistanceUnit.Inches:  			format = format.Replace ("UUU"' "inch");  			break;  		case DistanceUnit.Kilometers:  			format = format.Replace ("UUU"' "kilometer");  			break;  		case DistanceUnit.Meters:  			format = format.Replace ("UUU"' "meter");  			break;  		case DistanceUnit.StatuteMiles:  			format = format.Replace ("UUU"' "mile");  			break;  		case DistanceUnit.NauticalMiles:  			format = format.Replace ("UUU"' "nautical mile");  			break;  		}  	}  	else {  		switch (_Units) {  		case DistanceUnit.Centimeters:  			format = format.Replace ("UUU"' "centimeters");  			break;  		case DistanceUnit.Feet:  			format = format.Replace ("UUU"' "feet");  			break;  		case DistanceUnit.Inches:  			format = format.Replace ("UUU"' "inches");  			break;  		case DistanceUnit.Kilometers:  			format = format.Replace ("UUU"' "kilometers");  			break;  		case DistanceUnit.Meters:  			format = format.Replace ("UUU"' "meters");  			break;  		case DistanceUnit.StatuteMiles:  			format = format.Replace ("UUU"' "miles");  			break;  		case DistanceUnit.NauticalMiles:  			format = format.Replace ("UUU"' "nautical miles");  			break;  		}  	}  	break;  }  
Missing Default,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Distance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Distance.cs,ToString,The following switch statement is missing a default case: switch (_Units) {  case DistanceUnit.Centimeters:  	format = format.Replace ("U"' "cm");  	break;  case DistanceUnit.Feet:  	format = format.Replace ("U"' "'");  	break;  case DistanceUnit.Inches:  	format = format.Replace ("U"' "\"");  	break;  case DistanceUnit.Kilometers:  	format = format.Replace ("U"' "km");  	break;  case DistanceUnit.Meters:  	format = format.Replace ("U"' "m");  	break;  case DistanceUnit.StatuteMiles:  	format = format.Replace ("U"' "mi");  	break;  case DistanceUnit.NauticalMiles:  	format = format.Replace ("U"' "nm");  	break;  }  
Missing Default,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Distance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Distance.cs,ToString,The following switch statement is missing a default case: switch (_Units) {  case DistanceUnit.Centimeters:  	format = format.Replace ("UU"' "cm");  	break;  case DistanceUnit.Feet:  	format = format.Replace ("UU"' "ft");  	break;  case DistanceUnit.Inches:  	format = format.Replace ("UU"' "in");  	break;  case DistanceUnit.Kilometers:  	format = format.Replace ("UU"' "km");  	break;  case DistanceUnit.Meters:  	format = format.Replace ("UU"' "m");  	break;  case DistanceUnit.StatuteMiles:  	format = format.Replace ("UU"' "mi");  	break;  case DistanceUnit.NauticalMiles:  	format = format.Replace ("UU"' "nm");  	break;  }  
Missing Default,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Distance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Distance.cs,ToString,The following switch statement is missing a default case: switch (_Units) {  case DistanceUnit.Centimeters:  	format = format.Replace ("UUU"' "centimeter");  	break;  case DistanceUnit.Feet:  	format = format.Replace ("UUU"' "foot");  	break;  case DistanceUnit.Inches:  	format = format.Replace ("UUU"' "inch");  	break;  case DistanceUnit.Kilometers:  	format = format.Replace ("UUU"' "kilometer");  	break;  case DistanceUnit.Meters:  	format = format.Replace ("UUU"' "meter");  	break;  case DistanceUnit.StatuteMiles:  	format = format.Replace ("UUU"' "mile");  	break;  case DistanceUnit.NauticalMiles:  	format = format.Replace ("UUU"' "nautical mile");  	break;  }  
Missing Default,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Distance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Distance.cs,ToString,The following switch statement is missing a default case: switch (_Units) {  case DistanceUnit.Centimeters:  	format = format.Replace ("UUU"' "centimeters");  	break;  case DistanceUnit.Feet:  	format = format.Replace ("UUU"' "feet");  	break;  case DistanceUnit.Inches:  	format = format.Replace ("UUU"' "inches");  	break;  case DistanceUnit.Kilometers:  	format = format.Replace ("UUU"' "kilometers");  	break;  case DistanceUnit.Meters:  	format = format.Replace ("UUU"' "meters");  	break;  case DistanceUnit.StatuteMiles:  	format = format.Replace ("UUU"' "miles");  	break;  case DistanceUnit.NauticalMiles:  	format = format.Replace ("UUU"' "nautical miles");  	break;  }  
Missing Default,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Latitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Latitude.cs,ToString,The following switch statement is missing a default case: switch (SubFormat.Length) {  case 1:  	// Double character  	format = format.Replace ("I"' Hemisphere.ToString ().Substring (0' 1));  	break;  case 3:  	// multiple character  	format = format.Replace ("III"' Hemisphere.ToString ());  	break;  }  
Missing Default,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Longitude,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Longitude.cs,ToString,The following switch statement is missing a default case: switch (SubFormat.Length) {  case 1:  	// Double character  	format = format.Replace ("I"' Hemisphere.ToString ().Substring (0' 1));  	break;  case 3:  	// multiple character  	format = format.Replace ("III"' Hemisphere.ToString ());  	break;  }  
Missing Default,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,ReadXml,The following switch statement is missing a default case: switch (reader.LocalName.ToLower (CultureInfo.InvariantCulture)) {  case "pos":  	// Read the "X Y" string' then split by the space between them  	string[] Values = reader.ReadElementContentAsString ().Split (' ');  	// Deserialize the longitude  	_Longitude = new Longitude (double.Parse (Values [0]' CultureInfo.InvariantCulture));  	// Deserialize the latitude  	if (Values.Length > 1)  		_Latitude = new Latitude (double.Parse (Values [1]' CultureInfo.InvariantCulture));  	break;  case "coordinates":  	// Read the "X Y" string' then split by the space between them  	string[] CoordSets = reader.ReadElementContentAsString ().Split (' ');  	string[] Coords = CoordSets [0].Split (''');  	// Deserialize the longitude  	_Longitude = new Longitude (double.Parse (Coords [0]' CultureInfo.InvariantCulture));  	// Deserialize the latitude  	if (Coords.Length > 1)  		_Latitude = new Latitude (double.Parse (Coords [1]' CultureInfo.InvariantCulture));  	break;  case "coord":  	// Read the <gml:coord> start tag  	reader.ReadStartElement ();  	// Now read up to 3 elements: X' and optionally Y or Z  	for (int index = 0; index < 3; index++) {  		/* According to the GML specification' a "gml:x" tag is lower-case.  However'                          * FWTools outputs tags in uppercase "gml:X".  As a result' make this                           * test case-insensitive.                          */switch (reader.LocalName.ToLower (CultureInfo.InvariantCulture)) {  		case "x":  			_Longitude = new Longitude (reader.ReadElementContentAsDouble ());  			break;  		case "y":  			_Latitude = new Latitude (reader.ReadElementContentAsDouble ());  			break;  		case "z":  			// Skip Z  			reader.Skip ();  			break;  		}  		// If we're at an end element' stop  		if (reader.NodeType == XmlNodeType.EndElement)  			break;  	}  	// Read the </gml:coord> end tag  	reader.ReadEndElement ();  	break;  }  
Missing Default,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position.cs,ReadXml,The following switch statement is missing a default case: switch (reader.LocalName.ToLower (CultureInfo.InvariantCulture)) {  case "x":  	_Longitude = new Longitude (reader.ReadElementContentAsDouble ());  	break;  case "y":  	_Latitude = new Latitude (reader.ReadElementContentAsDouble ());  	break;  case "z":  	// Skip Z  	reader.Skip ();  	break;  }  
Missing Default,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position3D,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position3D.cs,ReadXml,The following switch statement is missing a default case: switch (reader.LocalName.ToLower (CultureInfo.InvariantCulture)) {  case "pos":  	// Read the "X Y" string' then split by the space between them  	string[] Values = reader.ReadElementContentAsString ().Split (' ');  	// Deserialize the longitude  	longitude = new Longitude (Values [0]' CultureInfo.InvariantCulture);  	// Deserialize the latitude  	if (Values.Length >= 2)  		latitude = new Latitude (Values [1]' CultureInfo.InvariantCulture);  	// Deserialize the altitude  	if (Values.Length == 3)  		_Altitude = Distance.FromMeters (double.Parse (Values [2]' CultureInfo.InvariantCulture));  	// Make the position  	_Position = new Position (latitude' longitude);  	break;  case "coord":  	// Read the <gml:coord> start tag  	reader.ReadStartElement ();  	// Now read up to 3 elements: X' and optionally Y or Z  	for (int index = 0; index < 3; index++) {  		switch (reader.LocalName.ToLower (CultureInfo.InvariantCulture)) {  		case "x":  			longitude = new Longitude (reader.ReadElementContentAsDouble ());  			break;  		case "y":  			latitude = new Latitude (reader.ReadElementContentAsDouble ());  			break;  		case "z":  			// Read Z as meters (there's no unit type in the spec :P morons)  			_Altitude = Distance.FromMeters (reader.ReadElementContentAsDouble ());  			break;  		}  		// If we're at an end element' stop  		if (reader.NodeType == XmlNodeType.EndElement)  			break;  	}  	// Make the position  	_Position = new Position (latitude' longitude);  	// Read the </gml:coord> end tag  	reader.ReadEndElement ();  	break;  }  
Missing Default,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Position3D,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Position3D.cs,ReadXml,The following switch statement is missing a default case: switch (reader.LocalName.ToLower (CultureInfo.InvariantCulture)) {  case "x":  	longitude = new Longitude (reader.ReadElementContentAsDouble ());  	break;  case "y":  	latitude = new Latitude (reader.ReadElementContentAsDouble ());  	break;  case "z":  	// Read Z as meters (there's no unit type in the spec :P morons)  	_Altitude = Distance.FromMeters (reader.ReadElementContentAsDouble ());  	break;  }  
Missing Default,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Speed,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Speed.cs,ToString,The following switch statement is missing a default case: switch (SubFormat.Length) {  case 1:  	switch (Units) {  	case SpeedUnit.FeetPerSecond:  		format = format.Replace ("U"' "ft/s");  		break;  	case SpeedUnit.KilometersPerHour:  		format = format.Replace ("U"' "km/h");  		break;  	case SpeedUnit.KilometersPerSecond:  		format = format.Replace ("U"' "km/s");  		break;  	case SpeedUnit.Knots:  		format = format.Replace ("U"' "kts");  		break;  	case SpeedUnit.MetersPerSecond:  		format = format.Replace ("U"' "m/s");  		break;  	case SpeedUnit.StatuteMilesPerHour:  		format = format.Replace ("U"' "MPH");  		break;  	}  	break;  case 2:  	switch (Units) {  	case SpeedUnit.FeetPerSecond:  		format = format.Replace ("UU"' "ft/sec");  		break;  	case SpeedUnit.KilometersPerHour:  		format = format.Replace ("UU"' "km/hour");  		break;  	case SpeedUnit.KilometersPerSecond:  		format = format.Replace ("UU"' "km/sec");  		break;  	case SpeedUnit.Knots:  		format = format.Replace ("UU"' "kts");  		break;  	case SpeedUnit.MetersPerSecond:  		format = format.Replace ("UU"' "m/sec");  		break;  	case SpeedUnit.StatuteMilesPerHour:  		format = format.Replace ("UU"' "mi/hour");  		break;  	}  	break;  case 3:  	switch (Units) {  	case SpeedUnit.FeetPerSecond:  		format = format.Replace ("UUU"' "feet/second");  		break;  	case SpeedUnit.KilometersPerHour:  		format = format.Replace ("UUU"' "kilometers/hour");  		break;  	case SpeedUnit.KilometersPerSecond:  		format = format.Replace ("UUU"' "kilometers/second");  		break;  	case SpeedUnit.Knots:  		format = format.Replace ("UUU"' "knots");  		break;  	case SpeedUnit.MetersPerSecond:  		format = format.Replace ("UUU"' "meters/second");  		break;  	case SpeedUnit.StatuteMilesPerHour:  		format = format.Replace ("UUU"' "miles/hour");  		break;  	}  	break;  case 4:  	switch (Units) {  	case SpeedUnit.FeetPerSecond:  		format = format.Replace ("UUUU"' "feet per second");  		break;  	case SpeedUnit.KilometersPerHour:  		format = format.Replace ("UUUU"' "kilometers per hour");  		break;  	case SpeedUnit.KilometersPerSecond:  		format = format.Replace ("UUUU"' "kilometers per second");  		break;  	case SpeedUnit.Knots:  		format = format.Replace ("UUUU"' "knots");  		break;  	case SpeedUnit.MetersPerSecond:  		format = format.Replace ("UUUU"' "meters per second");  		break;  	case SpeedUnit.StatuteMilesPerHour:  		format = format.Replace ("UUUU"' "miles per hour");  		break;  	}  	break;  }  
Missing Default,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Speed,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Speed.cs,ToString,The following switch statement is missing a default case: switch (Units) {  case SpeedUnit.FeetPerSecond:  	format = format.Replace ("U"' "ft/s");  	break;  case SpeedUnit.KilometersPerHour:  	format = format.Replace ("U"' "km/h");  	break;  case SpeedUnit.KilometersPerSecond:  	format = format.Replace ("U"' "km/s");  	break;  case SpeedUnit.Knots:  	format = format.Replace ("U"' "kts");  	break;  case SpeedUnit.MetersPerSecond:  	format = format.Replace ("U"' "m/s");  	break;  case SpeedUnit.StatuteMilesPerHour:  	format = format.Replace ("U"' "MPH");  	break;  }  
Missing Default,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Speed,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Speed.cs,ToString,The following switch statement is missing a default case: switch (Units) {  case SpeedUnit.FeetPerSecond:  	format = format.Replace ("UU"' "ft/sec");  	break;  case SpeedUnit.KilometersPerHour:  	format = format.Replace ("UU"' "km/hour");  	break;  case SpeedUnit.KilometersPerSecond:  	format = format.Replace ("UU"' "km/sec");  	break;  case SpeedUnit.Knots:  	format = format.Replace ("UU"' "kts");  	break;  case SpeedUnit.MetersPerSecond:  	format = format.Replace ("UU"' "m/sec");  	break;  case SpeedUnit.StatuteMilesPerHour:  	format = format.Replace ("UU"' "mi/hour");  	break;  }  
Missing Default,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Speed,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Speed.cs,ToString,The following switch statement is missing a default case: switch (Units) {  case SpeedUnit.FeetPerSecond:  	format = format.Replace ("UUU"' "feet/second");  	break;  case SpeedUnit.KilometersPerHour:  	format = format.Replace ("UUU"' "kilometers/hour");  	break;  case SpeedUnit.KilometersPerSecond:  	format = format.Replace ("UUU"' "kilometers/second");  	break;  case SpeedUnit.Knots:  	format = format.Replace ("UUU"' "knots");  	break;  case SpeedUnit.MetersPerSecond:  	format = format.Replace ("UUU"' "meters/second");  	break;  case SpeedUnit.StatuteMilesPerHour:  	format = format.Replace ("UUU"' "miles/hour");  	break;  }  
Missing Default,TreeGecko.Library.Geospatial.Geoframeworks.Objects,Speed,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Geoframeworks\Objects\Speed.cs,ToString,The following switch statement is missing a default case: switch (Units) {  case SpeedUnit.FeetPerSecond:  	format = format.Replace ("UUUU"' "feet per second");  	break;  case SpeedUnit.KilometersPerHour:  	format = format.Replace ("UUUU"' "kilometers per hour");  	break;  case SpeedUnit.KilometersPerSecond:  	format = format.Replace ("UUUU"' "kilometers per second");  	break;  case SpeedUnit.Knots:  	format = format.Replace ("UUUU"' "knots");  	break;  case SpeedUnit.MetersPerSecond:  	format = format.Replace ("UUUU"' "meters per second");  	break;  case SpeedUnit.StatuteMilesPerHour:  	format = format.Replace ("UUUU"' "miles per hour");  	break;  }  
Missing Default,TreeGecko.Library.Geospatial.Objects,GeoDistance,C:\repos\TreeGecko_Libraries\src\tgGeospatial\Objects\GeoDistance.cs,GetFactor,The following switch statement is missing a default case: switch (_distanceUnit) {  case DistanceUnits.Feet:  	factor = FEET_TO_METERS;  	break;  case DistanceUnits.Kilometers:  	factor = KILOMETERS_TO_METERS;  	break;  case DistanceUnits.Meters:  	factor = METERS_TO_METERS;  	break;  case DistanceUnits.NauticalMiles:  	factor = NAUTICAL_MILES_TO_METERS;  	break;  case DistanceUnits.StatuteMiles:  	factor = STATUTE_MILES_TO_METERS;  	break;  case DistanceUnits.Yards:  	factor = YARDS_TO_METERS;  	break;  }  
