Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MonoDevelop.Debugger.Gdb,GdbSession,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbSession.cs,ProcessOutput,Cyclomatic complexity of the method is 15
Complex Method,MonoDevelop.Debugger.Gdb,GdbSession,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbSession.cs,HandleEvent,Cyclomatic complexity of the method is 18
Complex Method,MonoDevelop.Debugger.Gdb,GdbBacktrace,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbBacktrace.cs,GetExpressionCompletionData,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.Debugger.Gdb,GdbBacktrace,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbBacktrace.cs,CreateFrame,Cyclomatic complexity of the method is 9
Long Statement,MonoDevelop.Debugger.Gdb,GdbSession,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbSession.cs,OnRun,The length of the statement  "				console = Runtime.ProcessService.StartConsoleProcess (script' ""' "."' ExternalConsoleFactory.Instance.CreateConsole (true)' null); " is 131.
Long Statement,MonoDevelop.Debugger.Gdb,GdbBacktrace,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbBacktrace.cs,GetParameters,The length of the statement  "	GdbCommandResult res = session.RunCommand ("-stack-list-arguments"' "0"' frameIndex.ToString ()' frameIndex.ToString ()); " is 121.
Long Statement,MonoDevelop.Debugger.Gdb,GdbDissassemblyBuffer,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbBacktrace.cs,GetLines,The length of the statement  "		ResultData data = session.RunCommand ("-data-disassemble"' "-s"' startAddr.ToString ()' "-e"' endAddr.ToString ()' "--"' "0"); " is 126.
Empty Catch Block,MonoDevelop.Debugger.Gdb,GdbSession,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbSession.cs,OnRun,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Debugger.Gdb,GdbSession,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbSession.cs,OnInsertBreakEvent,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Debugger.Gdb,GdbBacktrace,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbBacktrace.cs,CreateFrame,The method has an empty catch block.
Magic Number,MonoDevelop.Debugger.Gdb,GdbSession,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbSession.cs,OnRun,The following statement contains a magic number: lock (gdbLock) {  	string tty = string.Empty;  	if (!Platform.IsWindows) {  		// Create a script to be run in a terminal  		string script = Path.GetTempFileName ();  		string ttyfile = Path.GetTempFileName ();  		string ttyfileDone = ttyfile + "_done";  		try {  			File.WriteAllText (script' "tty > " + ttyfile + "\ntouch " + ttyfileDone + "\nsleep 10000d");  			Mono.Unix.Native.Syscall.chmod (script' FilePermissions.ALLPERMS);  			console = Runtime.ProcessService.StartConsoleProcess (script' ""' "."' ExternalConsoleFactory.Instance.CreateConsole (true)' null);  			DateTime tim = DateTime.Now;  			while (!File.Exists (ttyfileDone)) {  				System.Threading.Thread.Sleep (100);  				if ((DateTime.Now - tim).TotalSeconds > 10)  					throw new InvalidOperationException ("Console could not be created.");  			}  			tty = File.ReadAllText (ttyfile).Trim (' '' '\n');  		}  		finally {  			try {  				if (File.Exists (script))  					File.Delete (script);  				if (File.Exists (ttyfile))  					File.Delete (ttyfile);  				if (File.Exists (ttyfileDone))  					File.Delete (ttyfileDone);  			}  			catch {  				// Ignore  			}  		}  	}  	StartGdb ();  	// Initialize the terminal  	if (Platform.IsWindows) {  		RunCommand ("set new-console on");  	}  	else {  		RunCommand ("-inferior-tty-set"' Escape (tty));  	}  	AttachConsole (proc.Id);  	try {  		RunCommand ("-file-exec-and-symbols"' Escape (startInfo.Command));  	}  	catch {  		FireTargetEvent (TargetEventType.TargetExited' null);  		throw;  	}  	RunCommand ("-environment-cd"' Escape (startInfo.WorkingDirectory));  	// Set inferior arguments  	if (!string.IsNullOrEmpty (startInfo.Arguments))  		RunCommand ("-exec-arguments"' startInfo.Arguments);  	if (startInfo.EnvironmentVariables != null) {  		foreach (var v in startInfo.EnvironmentVariables)  			RunCommand ("-gdb-set"' "environment"' v.Key' v.Value);  	}  	currentProcessName = startInfo.Command + " " + startInfo.Arguments;  	CheckIsMonoProcess ();  	OnStarted ();  	RunCommand ("-exec-run");  }  
Magic Number,MonoDevelop.Debugger.Gdb,GdbSession,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbSession.cs,OnRun,The following statement contains a magic number: lock (gdbLock) {  	string tty = string.Empty;  	if (!Platform.IsWindows) {  		// Create a script to be run in a terminal  		string script = Path.GetTempFileName ();  		string ttyfile = Path.GetTempFileName ();  		string ttyfileDone = ttyfile + "_done";  		try {  			File.WriteAllText (script' "tty > " + ttyfile + "\ntouch " + ttyfileDone + "\nsleep 10000d");  			Mono.Unix.Native.Syscall.chmod (script' FilePermissions.ALLPERMS);  			console = Runtime.ProcessService.StartConsoleProcess (script' ""' "."' ExternalConsoleFactory.Instance.CreateConsole (true)' null);  			DateTime tim = DateTime.Now;  			while (!File.Exists (ttyfileDone)) {  				System.Threading.Thread.Sleep (100);  				if ((DateTime.Now - tim).TotalSeconds > 10)  					throw new InvalidOperationException ("Console could not be created.");  			}  			tty = File.ReadAllText (ttyfile).Trim (' '' '\n');  		}  		finally {  			try {  				if (File.Exists (script))  					File.Delete (script);  				if (File.Exists (ttyfile))  					File.Delete (ttyfile);  				if (File.Exists (ttyfileDone))  					File.Delete (ttyfileDone);  			}  			catch {  				// Ignore  			}  		}  	}  	StartGdb ();  	// Initialize the terminal  	if (Platform.IsWindows) {  		RunCommand ("set new-console on");  	}  	else {  		RunCommand ("-inferior-tty-set"' Escape (tty));  	}  	AttachConsole (proc.Id);  	try {  		RunCommand ("-file-exec-and-symbols"' Escape (startInfo.Command));  	}  	catch {  		FireTargetEvent (TargetEventType.TargetExited' null);  		throw;  	}  	RunCommand ("-environment-cd"' Escape (startInfo.WorkingDirectory));  	// Set inferior arguments  	if (!string.IsNullOrEmpty (startInfo.Arguments))  		RunCommand ("-exec-arguments"' startInfo.Arguments);  	if (startInfo.EnvironmentVariables != null) {  		foreach (var v in startInfo.EnvironmentVariables)  			RunCommand ("-gdb-set"' "environment"' v.Key' v.Value);  	}  	currentProcessName = startInfo.Command + " " + startInfo.Arguments;  	CheckIsMonoProcess ();  	OnStarted ();  	RunCommand ("-exec-run");  }  
Magic Number,MonoDevelop.Debugger.Gdb,GdbSession,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbSession.cs,OnRun,The following statement contains a magic number: if (!Platform.IsWindows) {  	// Create a script to be run in a terminal  	string script = Path.GetTempFileName ();  	string ttyfile = Path.GetTempFileName ();  	string ttyfileDone = ttyfile + "_done";  	try {  		File.WriteAllText (script' "tty > " + ttyfile + "\ntouch " + ttyfileDone + "\nsleep 10000d");  		Mono.Unix.Native.Syscall.chmod (script' FilePermissions.ALLPERMS);  		console = Runtime.ProcessService.StartConsoleProcess (script' ""' "."' ExternalConsoleFactory.Instance.CreateConsole (true)' null);  		DateTime tim = DateTime.Now;  		while (!File.Exists (ttyfileDone)) {  			System.Threading.Thread.Sleep (100);  			if ((DateTime.Now - tim).TotalSeconds > 10)  				throw new InvalidOperationException ("Console could not be created.");  		}  		tty = File.ReadAllText (ttyfile).Trim (' '' '\n');  	}  	finally {  		try {  			if (File.Exists (script))  				File.Delete (script);  			if (File.Exists (ttyfile))  				File.Delete (ttyfile);  			if (File.Exists (ttyfileDone))  				File.Delete (ttyfileDone);  		}  		catch {  			// Ignore  		}  	}  }  
Magic Number,MonoDevelop.Debugger.Gdb,GdbSession,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbSession.cs,OnRun,The following statement contains a magic number: if (!Platform.IsWindows) {  	// Create a script to be run in a terminal  	string script = Path.GetTempFileName ();  	string ttyfile = Path.GetTempFileName ();  	string ttyfileDone = ttyfile + "_done";  	try {  		File.WriteAllText (script' "tty > " + ttyfile + "\ntouch " + ttyfileDone + "\nsleep 10000d");  		Mono.Unix.Native.Syscall.chmod (script' FilePermissions.ALLPERMS);  		console = Runtime.ProcessService.StartConsoleProcess (script' ""' "."' ExternalConsoleFactory.Instance.CreateConsole (true)' null);  		DateTime tim = DateTime.Now;  		while (!File.Exists (ttyfileDone)) {  			System.Threading.Thread.Sleep (100);  			if ((DateTime.Now - tim).TotalSeconds > 10)  				throw new InvalidOperationException ("Console could not be created.");  		}  		tty = File.ReadAllText (ttyfile).Trim (' '' '\n');  	}  	finally {  		try {  			if (File.Exists (script))  				File.Delete (script);  			if (File.Exists (ttyfile))  				File.Delete (ttyfile);  			if (File.Exists (ttyfileDone))  				File.Delete (ttyfileDone);  		}  		catch {  			// Ignore  		}  	}  }  
Magic Number,MonoDevelop.Debugger.Gdb,GdbSession,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbSession.cs,OnRun,The following statement contains a magic number: try {  	File.WriteAllText (script' "tty > " + ttyfile + "\ntouch " + ttyfileDone + "\nsleep 10000d");  	Mono.Unix.Native.Syscall.chmod (script' FilePermissions.ALLPERMS);  	console = Runtime.ProcessService.StartConsoleProcess (script' ""' "."' ExternalConsoleFactory.Instance.CreateConsole (true)' null);  	DateTime tim = DateTime.Now;  	while (!File.Exists (ttyfileDone)) {  		System.Threading.Thread.Sleep (100);  		if ((DateTime.Now - tim).TotalSeconds > 10)  			throw new InvalidOperationException ("Console could not be created.");  	}  	tty = File.ReadAllText (ttyfile).Trim (' '' '\n');  }  finally {  	try {  		if (File.Exists (script))  			File.Delete (script);  		if (File.Exists (ttyfile))  			File.Delete (ttyfile);  		if (File.Exists (ttyfileDone))  			File.Delete (ttyfileDone);  	}  	catch {  		// Ignore  	}  }  
Magic Number,MonoDevelop.Debugger.Gdb,GdbSession,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbSession.cs,OnRun,The following statement contains a magic number: try {  	File.WriteAllText (script' "tty > " + ttyfile + "\ntouch " + ttyfileDone + "\nsleep 10000d");  	Mono.Unix.Native.Syscall.chmod (script' FilePermissions.ALLPERMS);  	console = Runtime.ProcessService.StartConsoleProcess (script' ""' "."' ExternalConsoleFactory.Instance.CreateConsole (true)' null);  	DateTime tim = DateTime.Now;  	while (!File.Exists (ttyfileDone)) {  		System.Threading.Thread.Sleep (100);  		if ((DateTime.Now - tim).TotalSeconds > 10)  			throw new InvalidOperationException ("Console could not be created.");  	}  	tty = File.ReadAllText (ttyfile).Trim (' '' '\n');  }  finally {  	try {  		if (File.Exists (script))  			File.Delete (script);  		if (File.Exists (ttyfile))  			File.Delete (ttyfile);  		if (File.Exists (ttyfileDone))  			File.Delete (ttyfileDone);  	}  	catch {  		// Ignore  	}  }  
Magic Number,MonoDevelop.Debugger.Gdb,GdbSession,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbSession.cs,OnRun,The following statement contains a magic number: while (!File.Exists (ttyfileDone)) {  	System.Threading.Thread.Sleep (100);  	if ((DateTime.Now - tim).TotalSeconds > 10)  		throw new InvalidOperationException ("Console could not be created.");  }  
Magic Number,MonoDevelop.Debugger.Gdb,GdbSession,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbSession.cs,OnRun,The following statement contains a magic number: while (!File.Exists (ttyfileDone)) {  	System.Threading.Thread.Sleep (100);  	if ((DateTime.Now - tim).TotalSeconds > 10)  		throw new InvalidOperationException ("Console could not be created.");  }  
Magic Number,MonoDevelop.Debugger.Gdb,GdbSession,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbSession.cs,OnRun,The following statement contains a magic number: System.Threading.Thread.Sleep (100);  
Magic Number,MonoDevelop.Debugger.Gdb,GdbSession,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbSession.cs,OnRun,The following statement contains a magic number: if ((DateTime.Now - tim).TotalSeconds > 10)  	throw new InvalidOperationException ("Console could not be created.");  
Magic Number,MonoDevelop.Debugger.Gdb,GdbSession,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbSession.cs,OnDisassembleFile,The following statement contains a magic number: do {  	ResultData data = null;  	try {  		data = RunCommand ("-data-disassemble"' "-f"' file' "-l"' cline.ToString ()' "--"' "1");  	}  	catch {  		break;  	}  	ResultData asm_insns = data.GetObject ("asm_insns");  	int newLine = cline;  	for (int n = 0; n < asm_insns.Count; n++) {  		ResultData src_and_asm_line = asm_insns.GetObject (n).GetObject ("src_and_asm_line");  		newLine = src_and_asm_line.GetInt ("line");  		ResultData line_asm_insn = src_and_asm_line.GetObject ("line_asm_insn");  		for (int i = 0; i < line_asm_insn.Count; i++) {  			ResultData asm = line_asm_insn.GetObject (i);  			long addr = long.Parse (asm.GetValue ("address").Substring (2)' NumberStyles.HexNumber);  			string code = asm.GetValue ("inst");  			lines.Add (new AssemblyLine (addr' code' newLine));  		}  	}  	if (newLine <= cline)  		break;  	cline = newLine + 1;  }  while (true);  
Magic Number,MonoDevelop.Debugger.Gdb,GdbSession,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbSession.cs,OnDisassembleFile,The following statement contains a magic number: for (int n = 0; n < asm_insns.Count; n++) {  	ResultData src_and_asm_line = asm_insns.GetObject (n).GetObject ("src_and_asm_line");  	newLine = src_and_asm_line.GetInt ("line");  	ResultData line_asm_insn = src_and_asm_line.GetObject ("line_asm_insn");  	for (int i = 0; i < line_asm_insn.Count; i++) {  		ResultData asm = line_asm_insn.GetObject (i);  		long addr = long.Parse (asm.GetValue ("address").Substring (2)' NumberStyles.HexNumber);  		string code = asm.GetValue ("inst");  		lines.Add (new AssemblyLine (addr' code' newLine));  	}  }  
Magic Number,MonoDevelop.Debugger.Gdb,GdbSession,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbSession.cs,OnDisassembleFile,The following statement contains a magic number: for (int i = 0; i < line_asm_insn.Count; i++) {  	ResultData asm = line_asm_insn.GetObject (i);  	long addr = long.Parse (asm.GetValue ("address").Substring (2)' NumberStyles.HexNumber);  	string code = asm.GetValue ("inst");  	lines.Add (new AssemblyLine (addr' code' newLine));  }  
Magic Number,MonoDevelop.Debugger.Gdb,GdbSession,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbSession.cs,RunCommand,The following statement contains a magic number: lock (gdbLock) {  	lock (syncLock) {  		lastResult = null;  		lock (eventLock) {  			_isRunning = true;  		}  		if (logGdb)  			Console.WriteLine ("gdb<: " + command + " " + string.Join (" "' args));  		sin.WriteLine (command + " " + string.Join (" "' args));  		if (!Monitor.Wait (syncLock' 4000))  			throw new InvalidOperationException ("Command execution timeout.");  		if (lastResult.Status == CommandStatus.Error)  			throw new InvalidOperationException (lastResult.ErrorMessage);  		return lastResult;  	}  }  
Magic Number,MonoDevelop.Debugger.Gdb,GdbSession,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbSession.cs,RunCommand,The following statement contains a magic number: lock (syncLock) {  	lastResult = null;  	lock (eventLock) {  		_isRunning = true;  	}  	if (logGdb)  		Console.WriteLine ("gdb<: " + command + " " + string.Join (" "' args));  	sin.WriteLine (command + " " + string.Join (" "' args));  	if (!Monitor.Wait (syncLock' 4000))  		throw new InvalidOperationException ("Command execution timeout.");  	if (lastResult.Status == CommandStatus.Error)  		throw new InvalidOperationException (lastResult.ErrorMessage);  	return lastResult;  }  
Magic Number,MonoDevelop.Debugger.Gdb,GdbSession,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbSession.cs,RunCommand,The following statement contains a magic number: if (!Monitor.Wait (syncLock' 4000))  	throw new InvalidOperationException ("Command execution timeout.");  
Magic Number,MonoDevelop.Debugger.Gdb,GdbSession,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbSession.cs,InternalStop,The following statement contains a magic number: lock (eventLock) {  	if (!_isRunning)  		return false;  	internalStop = true;  	SendSigIntToProcess (proc.Id);  	if (!Monitor.Wait (eventLock' 4000))  		throw new InvalidOperationException ("Target could not be interrupted.");  }  
Magic Number,MonoDevelop.Debugger.Gdb,GdbSession,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbSession.cs,InternalStop,The following statement contains a magic number: if (!Monitor.Wait (eventLock' 4000))  	throw new InvalidOperationException ("Target could not be interrupted.");  
Magic Number,MonoDevelop.Debugger.Gdb,GdbSession,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbSession.cs,ProcessOutput,The following statement contains a magic number: switch (line [0]) {  case '^':  	lock (syncLock) {  		lastResult = new GdbCommandResult (line);  		_isRunning = (lastResult.Status == CommandStatus.Running);  		Monitor.PulseAll (syncLock);  	}  	break;  case '~':  case '&':  	if (line.Length > 1 && line [1] == '"')  		line = line.Substring (2' line.Length - 5);  	ThreadPool.QueueUserWorkItem (delegate {  		OnTargetOutput (false' line + "\n");  	});  	break;  case '*':  	GdbEvent ev;  	lock (eventLock) {  		ev = new GdbEvent (line);  		_isRunning = (ev.Name == "running");  		string ti = ev.GetValue ("thread-id");  		if (ti != null && ti != "all")  			currentThread = activeThread = int.Parse (ti);  		Monitor.PulseAll (eventLock);  		if (internalStop) {  			internalStop = false;  			return;  		}  	}  	ThreadPool.QueueUserWorkItem (delegate {  		try {  			HandleEvent (ev);  		}  		catch (Exception ex) {  			Console.WriteLine (ex);  		}  	});  	break;  }  
Magic Number,MonoDevelop.Debugger.Gdb,GdbSession,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbSession.cs,ProcessOutput,The following statement contains a magic number: switch (line [0]) {  case '^':  	lock (syncLock) {  		lastResult = new GdbCommandResult (line);  		_isRunning = (lastResult.Status == CommandStatus.Running);  		Monitor.PulseAll (syncLock);  	}  	break;  case '~':  case '&':  	if (line.Length > 1 && line [1] == '"')  		line = line.Substring (2' line.Length - 5);  	ThreadPool.QueueUserWorkItem (delegate {  		OnTargetOutput (false' line + "\n");  	});  	break;  case '*':  	GdbEvent ev;  	lock (eventLock) {  		ev = new GdbEvent (line);  		_isRunning = (ev.Name == "running");  		string ti = ev.GetValue ("thread-id");  		if (ti != null && ti != "all")  			currentThread = activeThread = int.Parse (ti);  		Monitor.PulseAll (eventLock);  		if (internalStop) {  			internalStop = false;  			return;  		}  	}  	ThreadPool.QueueUserWorkItem (delegate {  		try {  			HandleEvent (ev);  		}  		catch (Exception ex) {  			Console.WriteLine (ex);  		}  	});  	break;  }  
Magic Number,MonoDevelop.Debugger.Gdb,GdbSession,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbSession.cs,ProcessOutput,The following statement contains a magic number: if (line.Length > 1 && line [1] == '"')  	line = line.Substring (2' line.Length - 5);  
Magic Number,MonoDevelop.Debugger.Gdb,GdbSession,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbSession.cs,ProcessOutput,The following statement contains a magic number: if (line.Length > 1 && line [1] == '"')  	line = line.Substring (2' line.Length - 5);  
Magic Number,MonoDevelop.Debugger.Gdb,GdbSession,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbSession.cs,ProcessOutput,The following statement contains a magic number: line = line.Substring (2' line.Length - 5);  
Magic Number,MonoDevelop.Debugger.Gdb,GdbSession,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbSession.cs,ProcessOutput,The following statement contains a magic number: line = line.Substring (2' line.Length - 5);  
Magic Number,MonoDevelop.Debugger.Gdb,GdbSessionFactory,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbSessionFactory.cs,IsExecutable,The following statement contains a magic number: using (StreamReader sr = new StreamReader (file)) {  	char[] chars = new char[3];  	int n = 0' nr = 0;  	while (n < chars.Length && (nr = sr.ReadBlock (chars' n' chars.Length - n)) != 0)  		n += nr;  	if (nr != chars.Length)  		return true;  	if (chars [0] == '#' && chars [1] == '!')  		return false;  }  
Magic Number,MonoDevelop.Debugger.Gdb,GdbBacktrace,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbBacktrace.cs,GetExpressionCompletionData,The following statement contains a magic number: if (pointer || exp.EndsWith (".")) {  	exp = exp.Substring (0' exp.Length - (pointer ? 2 : 1));  	i = 0;  	while (i < exp.Length) {  		ObjectValue val = CreateVarObject (exp);  		if (!val.IsUnknown && !val.IsError) {  			CompletionData data = new CompletionData ();  			foreach (ObjectValue cv in val.GetAllChildren ())  				data.Items.Add (new CompletionItem (cv.Name' cv.Flags));  			data.ExpressionLength = 0;  			return data;  		}  		i++;  	}  	return null;  }  
Magic Number,MonoDevelop.Debugger.Gdb,GdbBacktrace,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbBacktrace.cs,GetExpressionCompletionData,The following statement contains a magic number: exp = exp.Substring (0' exp.Length - (pointer ? 2 : 1));  
Magic Number,MonoDevelop.Debugger.Gdb,GdbBacktrace,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbBacktrace.cs,CreateFrame,The following statement contains a magic number: if (!string.IsNullOrEmpty (sadr))  	addr = long.Parse (sadr.Substring (2)' NumberStyles.HexNumber);  else  	addr = 0;  
Magic Number,MonoDevelop.Debugger.Gdb,GdbBacktrace,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbBacktrace.cs,CreateFrame,The following statement contains a magic number: addr = long.Parse (sadr.Substring (2)' NumberStyles.HexNumber);  
Magic Number,MonoDevelop.Debugger.Gdb,GdbBacktrace,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbBacktrace.cs,Disassemble,The following statement contains a magic number: if (buffer == null) {  	ResultData data = session.RunCommand ("-stack-info-frame");  	long addr = long.Parse (data.GetObject ("frame").GetValue ("addr").Substring (2)' NumberStyles.HexNumber);  	buffer = new GdbDissassemblyBuffer (session' addr);  	disBuffers [frameIndex] = buffer;  }  
Magic Number,MonoDevelop.Debugger.Gdb,GdbDissassemblyBuffer,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbBacktrace.cs,GetLines,The following statement contains a magic number: try {  	ResultData data = session.RunCommand ("-data-disassemble"' "-s"' startAddr.ToString ()' "-e"' endAddr.ToString ()' "--"' "0");  	ResultData ins = data.GetObject ("asm_insns");  	AssemblyLine[] alines = new AssemblyLine[ins.Count];  	for (int n = 0; n < ins.Count; n++) {  		ResultData aline = ins.GetObject (n);  		long addr = long.Parse (aline.GetValue ("address").Substring (2)' NumberStyles.HexNumber);  		AssemblyLine line = new AssemblyLine (addr' aline.GetValue ("inst"));  		alines [n] = line;  	}  	return alines;  }  catch {  	return new AssemblyLine[0];  }  
Magic Number,MonoDevelop.Debugger.Gdb,GdbDissassemblyBuffer,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbBacktrace.cs,GetLines,The following statement contains a magic number: for (int n = 0; n < ins.Count; n++) {  	ResultData aline = ins.GetObject (n);  	long addr = long.Parse (aline.GetValue ("address").Substring (2)' NumberStyles.HexNumber);  	AssemblyLine line = new AssemblyLine (addr' aline.GetValue ("inst"));  	alines [n] = line;  }  
Magic Number,MonoDevelop.Debugger.Gdb,ResultData,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\ResultData.cs,ReadTuple,The following statement contains a magic number: while (pos < str.Length && str [pos] != '}') {  	string name;  	object val;  	ReadResult (str' ref pos' out name' out val);  	if (data.props.ContainsKey (name)) {  		object ob = data.props [name];  		ResultData rd = ob as ResultData;  		if (rd != null && rd.isArrayProperty) {  			object[] newArr = new object[rd.array.Length + 1];  			Array.Copy (rd.array' newArr' rd.array.Length);  			newArr [rd.array.Length] = val;  			rd.array = newArr;  		}  		else {  			rd = new ResultData ();  			rd.isArrayProperty = true;  			rd.array = new object[2];  			rd.array [0] = ob;  			rd.array [1] = val;  			data.props [name] = rd;  		}  	}  	else {  		data.props [name] = val;  	}  	TryReadChar (str' ref pos' ''');  }  
Magic Number,MonoDevelop.Debugger.Gdb,ResultData,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\ResultData.cs,ReadTuple,The following statement contains a magic number: if (data.props.ContainsKey (name)) {  	object ob = data.props [name];  	ResultData rd = ob as ResultData;  	if (rd != null && rd.isArrayProperty) {  		object[] newArr = new object[rd.array.Length + 1];  		Array.Copy (rd.array' newArr' rd.array.Length);  		newArr [rd.array.Length] = val;  		rd.array = newArr;  	}  	else {  		rd = new ResultData ();  		rd.isArrayProperty = true;  		rd.array = new object[2];  		rd.array [0] = ob;  		rd.array [1] = val;  		data.props [name] = rd;  	}  }  else {  	data.props [name] = val;  }  
Magic Number,MonoDevelop.Debugger.Gdb,ResultData,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\ResultData.cs,ReadTuple,The following statement contains a magic number: if (rd != null && rd.isArrayProperty) {  	object[] newArr = new object[rd.array.Length + 1];  	Array.Copy (rd.array' newArr' rd.array.Length);  	newArr [rd.array.Length] = val;  	rd.array = newArr;  }  else {  	rd = new ResultData ();  	rd.isArrayProperty = true;  	rd.array = new object[2];  	rd.array [0] = ob;  	rd.array [1] = val;  	data.props [name] = rd;  }  
Magic Number,MonoDevelop.Debugger.Gdb,ResultData,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\ResultData.cs,ReadTuple,The following statement contains a magic number: rd.array = new object[2];  
Magic Number,MonoDevelop.Debugger.Gdb,GdbCommandResult,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbCommandResult.cs,GdbCommandResult,The following statement contains a magic number: if (line.StartsWith ("^done")) {  	Status = CommandStatus.Done;  	ReadResults (line' 6);  }  else if (line.StartsWith ("^error")) {  	Status = CommandStatus.Error;  	if (line.Length > 7) {  		ReadResults (line' 7);  		ErrorMessage = GetValue ("msg");  	}  }  else if (line.StartsWith ("^running")) {  	Status = CommandStatus.Running;  }  
Magic Number,MonoDevelop.Debugger.Gdb,GdbCommandResult,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbCommandResult.cs,GdbCommandResult,The following statement contains a magic number: if (line.StartsWith ("^done")) {  	Status = CommandStatus.Done;  	ReadResults (line' 6);  }  else if (line.StartsWith ("^error")) {  	Status = CommandStatus.Error;  	if (line.Length > 7) {  		ReadResults (line' 7);  		ErrorMessage = GetValue ("msg");  	}  }  else if (line.StartsWith ("^running")) {  	Status = CommandStatus.Running;  }  
Magic Number,MonoDevelop.Debugger.Gdb,GdbCommandResult,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbCommandResult.cs,GdbCommandResult,The following statement contains a magic number: if (line.StartsWith ("^done")) {  	Status = CommandStatus.Done;  	ReadResults (line' 6);  }  else if (line.StartsWith ("^error")) {  	Status = CommandStatus.Error;  	if (line.Length > 7) {  		ReadResults (line' 7);  		ErrorMessage = GetValue ("msg");  	}  }  else if (line.StartsWith ("^running")) {  	Status = CommandStatus.Running;  }  
Magic Number,MonoDevelop.Debugger.Gdb,GdbCommandResult,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbCommandResult.cs,GdbCommandResult,The following statement contains a magic number: ReadResults (line' 6);  
Magic Number,MonoDevelop.Debugger.Gdb,GdbCommandResult,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbCommandResult.cs,GdbCommandResult,The following statement contains a magic number: if (line.StartsWith ("^error")) {  	Status = CommandStatus.Error;  	if (line.Length > 7) {  		ReadResults (line' 7);  		ErrorMessage = GetValue ("msg");  	}  }  else if (line.StartsWith ("^running")) {  	Status = CommandStatus.Running;  }  
Magic Number,MonoDevelop.Debugger.Gdb,GdbCommandResult,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbCommandResult.cs,GdbCommandResult,The following statement contains a magic number: if (line.StartsWith ("^error")) {  	Status = CommandStatus.Error;  	if (line.Length > 7) {  		ReadResults (line' 7);  		ErrorMessage = GetValue ("msg");  	}  }  else if (line.StartsWith ("^running")) {  	Status = CommandStatus.Running;  }  
Magic Number,MonoDevelop.Debugger.Gdb,GdbCommandResult,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbCommandResult.cs,GdbCommandResult,The following statement contains a magic number: if (line.Length > 7) {  	ReadResults (line' 7);  	ErrorMessage = GetValue ("msg");  }  
Magic Number,MonoDevelop.Debugger.Gdb,GdbCommandResult,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbCommandResult.cs,GdbCommandResult,The following statement contains a magic number: if (line.Length > 7) {  	ReadResults (line' 7);  	ErrorMessage = GetValue ("msg");  }  
Magic Number,MonoDevelop.Debugger.Gdb,GdbCommandResult,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbCommandResult.cs,GdbCommandResult,The following statement contains a magic number: ReadResults (line' 7);  
Missing Default,MonoDevelop.Debugger.Gdb,GdbSession,C:\repos\marek-g_MonoDevelop.Debugger.Gdb.Windows\GdbSession.cs,ProcessOutput,The following switch statement is missing a default case: switch (line [0]) {  case '^':  	lock (syncLock) {  		lastResult = new GdbCommandResult (line);  		_isRunning = (lastResult.Status == CommandStatus.Running);  		Monitor.PulseAll (syncLock);  	}  	break;  case '~':  case '&':  	if (line.Length > 1 && line [1] == '"')  		line = line.Substring (2' line.Length - 5);  	ThreadPool.QueueUserWorkItem (delegate {  		OnTargetOutput (false' line + "\n");  	});  	break;  case '*':  	GdbEvent ev;  	lock (eventLock) {  		ev = new GdbEvent (line);  		_isRunning = (ev.Name == "running");  		string ti = ev.GetValue ("thread-id");  		if (ti != null && ti != "all")  			currentThread = activeThread = int.Parse (ti);  		Monitor.PulseAll (eventLock);  		if (internalStop) {  			internalStop = false;  			return;  		}  	}  	ThreadPool.QueueUserWorkItem (delegate {  		try {  			HandleEvent (ev);  		}  		catch (Exception ex) {  			Console.WriteLine (ex);  		}  	});  	break;  }  
