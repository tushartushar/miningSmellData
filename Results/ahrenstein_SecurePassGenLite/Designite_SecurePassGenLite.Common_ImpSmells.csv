Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SecurePassGenLite.Common,PassGenCore,C:\repos\ahrenstein_SecurePassGenLite\SecurePassGenLite.Common\PassGenCore.cs,GenPass,Cyclomatic complexity of the method is 12
Long Statement,SecurePassGenLite.Common,PassGenCore,C:\repos\ahrenstein_SecurePassGenLite\SecurePassGenLite.Common\PassGenCore.cs,GenPass,The length of the statement  "		else if (sPassword.Length != 0 && sPassword.Length != iMaxLength - 1)// prevents the password from starting or ending in a number or symbol " is 139.
Complex Conditional,SecurePassGenLite.Common,PassGenCore,C:\repos\ahrenstein_SecurePassGenLite\SecurePassGenLite.Common\PassGenCore.cs,GenPass,The conditional expression  "hasUpperCase && hasLowerCase && hasSymbol && hasNumber"  is complex.
Magic Number,SecurePassGenLite.Common,PassGenFunctions,C:\repos\ahrenstein_SecurePassGenLite\SecurePassGenLite.Common\PassGenFunctions.cs,GeneratePassword,The following statement contains a magic number: if (passwordLength <= 8)  	passwordLength = 8;  
Magic Number,SecurePassGenLite.Common,PassGenFunctions,C:\repos\ahrenstein_SecurePassGenLite\SecurePassGenLite.Common\PassGenFunctions.cs,GeneratePassword,The following statement contains a magic number: if (passwordLength <= 8)  	passwordLength = 8;  
Magic Number,SecurePassGenLite.Common,PassGenFunctions,C:\repos\ahrenstein_SecurePassGenLite\SecurePassGenLite.Common\PassGenFunctions.cs,GeneratePassword,The following statement contains a magic number: passwordLength = 8;  
Magic Number,SecurePassGenLite.Common,PassGenCore,C:\repos\ahrenstein_SecurePassGenLite\SecurePassGenLite.Common\PassGenCore.cs,GenPass,The following statement contains a magic number: while (sPassword.Length != iMaxLength) {  	char ch = (char)rnd.Next (33' 126);  	// blocks the use of excluded characters  	if (sCharactersNotAllowed.IndexOf (ch) != -1)  		continue;  	// determines if we have used at least 1 upper case letter yet  	if (Char.IsUpper (ch) && !hasUpperCase) {  		sPassword += ch;  		hasUpperCase = true;  	}  	else if (Char.IsLower (ch) && !hasLowerCase)// determines if we have used at least 1 lower case letter yet  	 {  		sPassword += ch;  		hasLowerCase = true;  	}  	else if (sPassword.Length != 0 && sPassword.Length != iMaxLength - 1)// prevents the password from starting or ending in a number or symbol  	 {  		// determines if we have used at least 1 number yet  		if (char.IsNumber (ch) && !hasNumber) {  			sPassword += ch;  			hasNumber = true;  		}  		else if (Char.IsSymbol (ch) && !hasSymbol)// determines if we have used at least 1 symbol yet  		 {  			sPassword += ch;  			hasSymbol = true;  		}  	}  	// forces the password to start' and end in a letter of any case  	if (sPassword.Length == iMaxLength - 1) {  		hasUpperCase = hasLowerCase = false;  	}  	if (hasUpperCase && hasLowerCase && hasSymbol && hasNumber)  		hasUpperCase = hasLowerCase = hasSymbol = hasNumber = false;  }  
Magic Number,SecurePassGenLite.Common,PassGenCore,C:\repos\ahrenstein_SecurePassGenLite\SecurePassGenLite.Common\PassGenCore.cs,GenPass,The following statement contains a magic number: while (sPassword.Length != iMaxLength) {  	char ch = (char)rnd.Next (33' 126);  	// blocks the use of excluded characters  	if (sCharactersNotAllowed.IndexOf (ch) != -1)  		continue;  	// determines if we have used at least 1 upper case letter yet  	if (Char.IsUpper (ch) && !hasUpperCase) {  		sPassword += ch;  		hasUpperCase = true;  	}  	else if (Char.IsLower (ch) && !hasLowerCase)// determines if we have used at least 1 lower case letter yet  	 {  		sPassword += ch;  		hasLowerCase = true;  	}  	else if (sPassword.Length != 0 && sPassword.Length != iMaxLength - 1)// prevents the password from starting or ending in a number or symbol  	 {  		// determines if we have used at least 1 number yet  		if (char.IsNumber (ch) && !hasNumber) {  			sPassword += ch;  			hasNumber = true;  		}  		else if (Char.IsSymbol (ch) && !hasSymbol)// determines if we have used at least 1 symbol yet  		 {  			sPassword += ch;  			hasSymbol = true;  		}  	}  	// forces the password to start' and end in a letter of any case  	if (sPassword.Length == iMaxLength - 1) {  		hasUpperCase = hasLowerCase = false;  	}  	if (hasUpperCase && hasLowerCase && hasSymbol && hasNumber)  		hasUpperCase = hasLowerCase = hasSymbol = hasNumber = false;  }  
