Implementation smell,Namespace,Class,File,Method,Description
Long Statement,NetCoreSample,CustomBackgroundJobFactory,D:\research\architectureSmells\repos\HangfireIO_Hangfire\samples\NetCoreSample\Program.cs,Create,The length of the statement  "            Console.WriteLine($"Create: {context.Job.Type.FullName}.{context.Job.Method.Name} in {context.InitialState?.Name} state"); " is 122.
Long Statement,NetCoreSample,CustomBackgroundJobPerformer,D:\research\architectureSmells\repos\HangfireIO_Hangfire\samples\NetCoreSample\Program.cs,Perform,The length of the statement  "            Console.WriteLine($"Perform {context.BackgroundJob.Id} ({context.BackgroundJob.Job.Type.FullName}.{context.BackgroundJob.Job.Method.Name})"); " is 141.
Long Statement,NetCoreSample,RecurringJobsService,D:\research\architectureSmells\repos\HangfireIO_Hangfire\samples\NetCoreSample\Program.cs,ExecuteAsync,The length of the statement  "                _recurringJobs.AddOrUpdate("Hawaiian"' () => Console.WriteLine("Hawaiian")'  "15 08 * * *"' TimeZoneInfo.FindSystemTimeZoneById("Hawaiian Standard Time")); " is 155.
Magic Number,NetCoreSample,Program,D:\research\architectureSmells\repos\HangfireIO_Hangfire\samples\NetCoreSample\Program.cs,Main,The following statement contains a magic number: var host = new HostBuilder()                  .ConfigureLogging(x => x.AddConsole().SetMinimumLevel(LogLevel.Information))                  .ConfigureServices((hostContext' services) =>                  {                      services.Configure<HostOptions>(option =>                      {                          option.ShutdownTimeout = TimeSpan.FromSeconds(60);                      });                        services.TryAddSingleton<SqlServerStorageOptions>(new SqlServerStorageOptions                      {                          CommandBatchMaxTimeout = TimeSpan.FromMinutes(5)'                          QueuePollInterval = TimeSpan.FromTicks(1)'                          UseRecommendedIsolationLevel = true'                          SlidingInvisibilityTimeout = TimeSpan.FromMinutes(1)                      });                        services.TryAddSingleton<IBackgroundJobFactory>(x => new CustomBackgroundJobFactory(                          new BackgroundJobFactory(x.GetRequiredService<IJobFilterProvider>())));                        services.TryAddSingleton<IBackgroundJobPerformer>(x => new CustomBackgroundJobPerformer(                          new BackgroundJobPerformer(                              x.GetRequiredService<IJobFilterProvider>()'                              x.GetRequiredService<JobActivator>()'                              TaskScheduler.Default)));                        services.TryAddSingleton<IBackgroundJobStateChanger>(x => new CustomBackgroundJobStateChanger(                              new BackgroundJobStateChanger(x.GetRequiredService<IJobFilterProvider>())));                        services.AddHangfire((provider' configuration) => configuration                          .SetDataCompatibilityLevel(CompatibilityLevel.Version_170)                          .UseSimpleAssemblyNameTypeSerializer()                          .UseSqlServerStorage(                              @"Server=.\;Database=Hangfire.Sample;Trusted_Connection=True;"'                               provider.GetRequiredService<SqlServerStorageOptions>()));                        services.AddHostedService<RecurringJobsService>();                      services.AddHangfireServer(options =>                      {                          options.StopTimeout = TimeSpan.FromSeconds(15);                          options.ShutdownTimeout = TimeSpan.FromSeconds(30);                      });                  })                  .Build();
Magic Number,NetCoreSample,Program,D:\research\architectureSmells\repos\HangfireIO_Hangfire\samples\NetCoreSample\Program.cs,Main,The following statement contains a magic number: var host = new HostBuilder()                  .ConfigureLogging(x => x.AddConsole().SetMinimumLevel(LogLevel.Information))                  .ConfigureServices((hostContext' services) =>                  {                      services.Configure<HostOptions>(option =>                      {                          option.ShutdownTimeout = TimeSpan.FromSeconds(60);                      });                        services.TryAddSingleton<SqlServerStorageOptions>(new SqlServerStorageOptions                      {                          CommandBatchMaxTimeout = TimeSpan.FromMinutes(5)'                          QueuePollInterval = TimeSpan.FromTicks(1)'                          UseRecommendedIsolationLevel = true'                          SlidingInvisibilityTimeout = TimeSpan.FromMinutes(1)                      });                        services.TryAddSingleton<IBackgroundJobFactory>(x => new CustomBackgroundJobFactory(                          new BackgroundJobFactory(x.GetRequiredService<IJobFilterProvider>())));                        services.TryAddSingleton<IBackgroundJobPerformer>(x => new CustomBackgroundJobPerformer(                          new BackgroundJobPerformer(                              x.GetRequiredService<IJobFilterProvider>()'                              x.GetRequiredService<JobActivator>()'                              TaskScheduler.Default)));                        services.TryAddSingleton<IBackgroundJobStateChanger>(x => new CustomBackgroundJobStateChanger(                              new BackgroundJobStateChanger(x.GetRequiredService<IJobFilterProvider>())));                        services.AddHangfire((provider' configuration) => configuration                          .SetDataCompatibilityLevel(CompatibilityLevel.Version_170)                          .UseSimpleAssemblyNameTypeSerializer()                          .UseSqlServerStorage(                              @"Server=.\;Database=Hangfire.Sample;Trusted_Connection=True;"'                               provider.GetRequiredService<SqlServerStorageOptions>()));                        services.AddHostedService<RecurringJobsService>();                      services.AddHangfireServer(options =>                      {                          options.StopTimeout = TimeSpan.FromSeconds(15);                          options.ShutdownTimeout = TimeSpan.FromSeconds(30);                      });                  })                  .Build();
Magic Number,NetCoreSample,Program,D:\research\architectureSmells\repos\HangfireIO_Hangfire\samples\NetCoreSample\Program.cs,Main,The following statement contains a magic number: var host = new HostBuilder()                  .ConfigureLogging(x => x.AddConsole().SetMinimumLevel(LogLevel.Information))                  .ConfigureServices((hostContext' services) =>                  {                      services.Configure<HostOptions>(option =>                      {                          option.ShutdownTimeout = TimeSpan.FromSeconds(60);                      });                        services.TryAddSingleton<SqlServerStorageOptions>(new SqlServerStorageOptions                      {                          CommandBatchMaxTimeout = TimeSpan.FromMinutes(5)'                          QueuePollInterval = TimeSpan.FromTicks(1)'                          UseRecommendedIsolationLevel = true'                          SlidingInvisibilityTimeout = TimeSpan.FromMinutes(1)                      });                        services.TryAddSingleton<IBackgroundJobFactory>(x => new CustomBackgroundJobFactory(                          new BackgroundJobFactory(x.GetRequiredService<IJobFilterProvider>())));                        services.TryAddSingleton<IBackgroundJobPerformer>(x => new CustomBackgroundJobPerformer(                          new BackgroundJobPerformer(                              x.GetRequiredService<IJobFilterProvider>()'                              x.GetRequiredService<JobActivator>()'                              TaskScheduler.Default)));                        services.TryAddSingleton<IBackgroundJobStateChanger>(x => new CustomBackgroundJobStateChanger(                              new BackgroundJobStateChanger(x.GetRequiredService<IJobFilterProvider>())));                        services.AddHangfire((provider' configuration) => configuration                          .SetDataCompatibilityLevel(CompatibilityLevel.Version_170)                          .UseSimpleAssemblyNameTypeSerializer()                          .UseSqlServerStorage(                              @"Server=.\;Database=Hangfire.Sample;Trusted_Connection=True;"'                               provider.GetRequiredService<SqlServerStorageOptions>()));                        services.AddHostedService<RecurringJobsService>();                      services.AddHangfireServer(options =>                      {                          options.StopTimeout = TimeSpan.FromSeconds(15);                          options.ShutdownTimeout = TimeSpan.FromSeconds(30);                      });                  })                  .Build();
Magic Number,NetCoreSample,Program,D:\research\architectureSmells\repos\HangfireIO_Hangfire\samples\NetCoreSample\Program.cs,Main,The following statement contains a magic number: var host = new HostBuilder()                  .ConfigureLogging(x => x.AddConsole().SetMinimumLevel(LogLevel.Information))                  .ConfigureServices((hostContext' services) =>                  {                      services.Configure<HostOptions>(option =>                      {                          option.ShutdownTimeout = TimeSpan.FromSeconds(60);                      });                        services.TryAddSingleton<SqlServerStorageOptions>(new SqlServerStorageOptions                      {                          CommandBatchMaxTimeout = TimeSpan.FromMinutes(5)'                          QueuePollInterval = TimeSpan.FromTicks(1)'                          UseRecommendedIsolationLevel = true'                          SlidingInvisibilityTimeout = TimeSpan.FromMinutes(1)                      });                        services.TryAddSingleton<IBackgroundJobFactory>(x => new CustomBackgroundJobFactory(                          new BackgroundJobFactory(x.GetRequiredService<IJobFilterProvider>())));                        services.TryAddSingleton<IBackgroundJobPerformer>(x => new CustomBackgroundJobPerformer(                          new BackgroundJobPerformer(                              x.GetRequiredService<IJobFilterProvider>()'                              x.GetRequiredService<JobActivator>()'                              TaskScheduler.Default)));                        services.TryAddSingleton<IBackgroundJobStateChanger>(x => new CustomBackgroundJobStateChanger(                              new BackgroundJobStateChanger(x.GetRequiredService<IJobFilterProvider>())));                        services.AddHangfire((provider' configuration) => configuration                          .SetDataCompatibilityLevel(CompatibilityLevel.Version_170)                          .UseSimpleAssemblyNameTypeSerializer()                          .UseSqlServerStorage(                              @"Server=.\;Database=Hangfire.Sample;Trusted_Connection=True;"'                               provider.GetRequiredService<SqlServerStorageOptions>()));                        services.AddHostedService<RecurringJobsService>();                      services.AddHangfireServer(options =>                      {                          options.StopTimeout = TimeSpan.FromSeconds(15);                          options.ShutdownTimeout = TimeSpan.FromSeconds(30);                      });                  })                  .Build();
