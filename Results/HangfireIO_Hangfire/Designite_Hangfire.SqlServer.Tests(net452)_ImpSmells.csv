Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,Hangfire.SqlServer.Tests,ConnectionUtils,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\Utils\ConnectionUtils.cs,,The length of the parameter ConnectionStringTemplateVariable is 32.
Long Identifier,Hangfire.SqlServer.Tests,ConnectionUtils,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\Utils\ConnectionUtils.cs,,The length of the parameter DefaultConnectionStringTemplate is 31.
Long Statement,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,UseConnections,The length of the statement  "                var storage = new SqlServerStorage(sqlConnection' new SqlServerStorageOptions { CommandBatchMaxTimeout = useBatching ? TimeSpan.FromMinutes(1) : (TimeSpan?)null }); " is 164.
Long Statement,Hangfire.SqlServer.Tests,SqlServerJobQueueFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerJobQueueFacts.cs,CreateJobQueue,The length of the statement  "            return new SqlServerJobQueue(storage' new SqlServerStorageOptions { SlidingInvisibilityTimeout = invisibilityTimeout }); " is 120.
Long Statement,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,AddToQueue_EnqueuesAJobDirectly_WhenDefaultQueueProviderIsUsed,The length of the statement  "            var options = new SqlServerStorageOptions { PrepareSchemaIfNecessary = false' CommandTimeout = TimeSpan.FromSeconds(-5) }; " is 122.
Long Statement,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey,The length of the statement  "                var records = sql.Query($"select * from [{Constants.DefaultSchema}].Hash").ToDictionary(x => (string)x.Key' x => (DateTime?)x.ExpireAt); " is 136.
Long Statement,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,ExpireSet_SetsExpirationTime_OnASet_WithGivenKey,The length of the statement  "                var records = sql.Query($"select * from [{Constants.DefaultSchema}].[Set]").ToDictionary(x => (string)x.Key' x => (DateTime?)x.ExpireAt); " is 137.
Long Statement,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,ExpireList_SetsExpirationTime_OnAList_WithGivenKey,The length of the statement  "                var records = sql.Query($"select * from [{Constants.DefaultSchema}].[List]").ToDictionary(x => (string)x.Key' x => (DateTime?)x.ExpireAt); " is 138.
Long Statement,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,PersistHash_ClearsExpirationTime_OnAGivenHash,The length of the statement  "                var records = sql.Query($"select * from [{Constants.DefaultSchema}].Hash").ToDictionary(x => (string)x.Key' x => (DateTime?)x.ExpireAt); " is 136.
Long Statement,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,PersistSet_ClearsExpirationTime_OnAGivenHash,The length of the statement  "                var records = sql.Query($"select * from [{Constants.DefaultSchema}].[Set]").ToDictionary(x => (string)x.Key' x => (DateTime?)x.ExpireAt); " is 137.
Long Statement,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,PersistList_ClearsExpirationTime_OnAGivenHash,The length of the statement  "                var records = sql.Query($"select * from [{Constants.DefaultSchema}].[List]").ToDictionary(x => (string)x.Key' x => (DateTime?)x.ExpireAt); " is 138.
Long Statement,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,Commit,The length of the statement  "            var storage = new Mock<SqlServerStorage>(connection' new SqlServerStorageOptions { CommandBatchMaxTimeout = useBatching ? TimeSpan.FromMinutes(1) : (TimeSpan?)null }); " is 167.
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,AcquireDistributedLock_ThrowsAnException_WhenResourceIsNullOrEmpty,The following statement contains a magic number: UseConnection(connection =>              {                  var exception = Assert.Throws<ArgumentNullException>(                  () => connection.AcquireDistributedLock(""' TimeSpan.FromMinutes(5)));                    Assert.Equal("resource"' exception.ParamName);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,AcquireDistributedLock_AcquiresExclusiveApplicationLock_OnSession,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  using (connection.AcquireDistributedLock("hello"' TimeSpan.FromMinutes(5)))                  {                      var lockMode = sql.Query<string>(                          $"select applock_mode('public'' '{Constants.DefaultSchema}:hello'' 'session')").Single();                        Assert.Equal("Exclusive"' lockMode);                  }              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,AcquireDistributedLock_ThrowsAnException_IfLockCanNotBeGranted,The following statement contains a magic number: var thread = new Thread(                  () => UseConnection(connection1 =>                  {                      using (connection1.AcquireDistributedLock("exclusive"' TimeSpan.FromSeconds(5)))                      {                          lockAcquired.Set();                          releaseLock.Wait();                      }                  }));
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,AcquireDistributedLock_ThrowsAnException_IfLockCanNotBeGranted,The following statement contains a magic number: UseConnection(connection2 =>              {                  Assert.Throws<DistributedLockTimeoutException>(                      () =>                      {                          using (connection2.AcquireDistributedLock("exclusive"' TimeSpan.FromSeconds(5)))                          {                          }                      });              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,AcquireDistributedLock_Dispose_ReleasesExclusiveApplicationLock,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  var distributedLock = connection.AcquireDistributedLock("hello"' TimeSpan.FromMinutes(5));                  distributedLock.Dispose();                    var lockMode = sql.Query<string>(                      "select applock_mode('public'' 'hello'' 'session')").Single();                    Assert.Equal("NoLock"' lockMode);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,AcquireDistributedLock_IsReentrant_FromTheSameConnection_OnTheSameResource,The following statement contains a magic number: UseConnection(connection =>              {                  using (connection.AcquireDistributedLock("hello"' TimeSpan.FromMinutes(5)))                  using (connection.AcquireDistributedLock("hello"' TimeSpan.FromMinutes(5)))                  {                      Assert.True(true);                  }              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,AcquireDistributedLock_IsReentrant_FromTheSameConnection_OnTheSameResource,The following statement contains a magic number: UseConnection(connection =>              {                  using (connection.AcquireDistributedLock("hello"' TimeSpan.FromMinutes(5)))                  using (connection.AcquireDistributedLock("hello"' TimeSpan.FromMinutes(5)))                  {                      Assert.True(true);                  }              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  var createdAt = new DateTime(2012' 12' 12);                  var jobId = connection.CreateExpiredJob(                      Job.FromExpression(() => SampleMethod("Hello"))'                      new Dictionary<string' string> { { "Key1"' "Value1" }' { "Key2"' "Value2" }' { "Key3"' "Value3" } }'                      createdAt'                      TimeSpan.FromDays(1));                    Assert.NotNull(jobId);                  Assert.NotEmpty(jobId);                    var sqlJob = sql.Query($"select * from [{Constants.DefaultSchema}].Job").Single();                  Assert.Equal(jobId' sqlJob.Id.ToString());                  Assert.Equal(createdAt' sqlJob.CreatedAt);                  Assert.Equal(null' (int?) sqlJob.StateId);                  Assert.Equal(null' (string) sqlJob.StateName);                    var invocationData = InvocationData.DeserializePayload((string)sqlJob.InvocationData);                  invocationData.Arguments = sqlJob.Arguments;                    var job = invocationData.Deserialize();                  Assert.Equal(typeof(SqlServerConnectionFacts)' job.Type);                  Assert.Equal("SampleMethod"' job.Method.Name);                  Assert.Equal("Hello"' job.Args[0]);                    Assert.True(createdAt.AddDays(1).AddMinutes(-1) < sqlJob.ExpireAt);                  Assert.True(sqlJob.ExpireAt < createdAt.AddDays(1).AddMinutes(1));                    var parameters = sql.Query(                      $"select * from [{Constants.DefaultSchema}].JobParameter where JobId = @id"'                      new { id = jobId })                      .ToDictionary(x => (string) x.Name' x => (string) x.Value);                    Assert.Equal("Value1"' parameters["Key1"]);                  Assert.Equal("Value2"' parameters["Key2"]);                  Assert.Equal("Value3"' parameters["Key3"]);              }' useBatching);
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  var createdAt = new DateTime(2012' 12' 12);                  var jobId = connection.CreateExpiredJob(                      Job.FromExpression(() => SampleMethod("Hello"))'                      new Dictionary<string' string> { { "Key1"' "Value1" }' { "Key2"' "Value2" }' { "Key3"' "Value3" } }'                      createdAt'                      TimeSpan.FromDays(1));                    Assert.NotNull(jobId);                  Assert.NotEmpty(jobId);                    var sqlJob = sql.Query($"select * from [{Constants.DefaultSchema}].Job").Single();                  Assert.Equal(jobId' sqlJob.Id.ToString());                  Assert.Equal(createdAt' sqlJob.CreatedAt);                  Assert.Equal(null' (int?) sqlJob.StateId);                  Assert.Equal(null' (string) sqlJob.StateName);                    var invocationData = InvocationData.DeserializePayload((string)sqlJob.InvocationData);                  invocationData.Arguments = sqlJob.Arguments;                    var job = invocationData.Deserialize();                  Assert.Equal(typeof(SqlServerConnectionFacts)' job.Type);                  Assert.Equal("SampleMethod"' job.Method.Name);                  Assert.Equal("Hello"' job.Args[0]);                    Assert.True(createdAt.AddDays(1).AddMinutes(-1) < sqlJob.ExpireAt);                  Assert.True(sqlJob.ExpireAt < createdAt.AddDays(1).AddMinutes(1));                    var parameters = sql.Query(                      $"select * from [{Constants.DefaultSchema}].JobParameter where JobId = @id"'                      new { id = jobId })                      .ToDictionary(x => (string) x.Name' x => (string) x.Value);                    Assert.Equal("Value1"' parameters["Key1"]);                  Assert.Equal("Value2"' parameters["Key2"]);                  Assert.Equal("Value3"' parameters["Key3"]);              }' useBatching);
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  var createdAt = new DateTime(2012' 12' 12);                  var jobId = connection.CreateExpiredJob(                      Job.FromExpression(() => SampleMethod("Hello"))'                      new Dictionary<string' string> { { "Key1"' "Value1" }' { "Key2"' "Value2" }' { "Key3"' "Value3" } }'                      createdAt'                      TimeSpan.FromDays(1));                    Assert.NotNull(jobId);                  Assert.NotEmpty(jobId);                    var sqlJob = sql.Query($"select * from [{Constants.DefaultSchema}].Job").Single();                  Assert.Equal(jobId' sqlJob.Id.ToString());                  Assert.Equal(createdAt' sqlJob.CreatedAt);                  Assert.Equal(null' (int?) sqlJob.StateId);                  Assert.Equal(null' (string) sqlJob.StateName);                    var invocationData = InvocationData.DeserializePayload((string)sqlJob.InvocationData);                  invocationData.Arguments = sqlJob.Arguments;                    var job = invocationData.Deserialize();                  Assert.Equal(typeof(SqlServerConnectionFacts)' job.Type);                  Assert.Equal("SampleMethod"' job.Method.Name);                  Assert.Equal("Hello"' job.Args[0]);                    Assert.True(createdAt.AddDays(1).AddMinutes(-1) < sqlJob.ExpireAt);                  Assert.True(sqlJob.ExpireAt < createdAt.AddDays(1).AddMinutes(1));                    var parameters = sql.Query(                      $"select * from [{Constants.DefaultSchema}].JobParameter where JobId = @id"'                      new { id = jobId })                      .ToDictionary(x => (string) x.Name' x => (string) x.Value);                    Assert.Equal("Value1"' parameters["Key1"]);                  Assert.Equal("Value2"' parameters["Key2"]);                  Assert.Equal("Value3"' parameters["Key3"]);              }' useBatching);
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,CreateExpiredJob_CanCreateParametersWithNullValues,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  var createdAt = new DateTime(2012' 12' 12);                  var jobId = connection.CreateExpiredJob(                      Job.FromExpression(() => SampleMethod("Hello"))'                      new Dictionary<string' string> { { "Key1"' null } }'                      createdAt'                      TimeSpan.FromDays(1));                    var parameters = sql                      .Query($"select * from [{Constants.DefaultSchema}].JobParameter where JobId = @id"' new { id = jobId })                      .ToDictionary(x => (string)x.Name' x => (string)x.Value);                    Assert.Equal(null' parameters["Key1"]);              }' useBatching);
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,CreateExpiredJob_CanCreateParametersWithNullValues,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  var createdAt = new DateTime(2012' 12' 12);                  var jobId = connection.CreateExpiredJob(                      Job.FromExpression(() => SampleMethod("Hello"))'                      new Dictionary<string' string> { { "Key1"' null } }'                      createdAt'                      TimeSpan.FromDays(1));                    var parameters = sql                      .Query($"select * from [{Constants.DefaultSchema}].JobParameter where JobId = @id"' new { id = jobId })                      .ToDictionary(x => (string)x.Name' x => (string)x.Value);                    Assert.Equal(null' parameters["Key1"]);              }' useBatching);
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,CreateExpiredJob_CanCreateParametersWithNullValues,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  var createdAt = new DateTime(2012' 12' 12);                  var jobId = connection.CreateExpiredJob(                      Job.FromExpression(() => SampleMethod("Hello"))'                      new Dictionary<string' string> { { "Key1"' null } }'                      createdAt'                      TimeSpan.FromDays(1));                    var parameters = sql                      .Query($"select * from [{Constants.DefaultSchema}].JobParameter where JobId = @id"' new { id = jobId })                      .ToDictionary(x => (string)x.Name' x => (string)x.Value);                    Assert.Equal(null' parameters["Key1"]);              }' useBatching);
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,CreateExpiredJob_CanCreateTwoParametersWithNullValues,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  var createdAt = new DateTime(2012' 12' 12);                  var jobId = connection.CreateExpiredJob(                      Job.FromExpression(() => SampleMethod("Hello"))'                      new Dictionary<string' string> { { "Key1"' null }' { "Key2"' null } }'                      createdAt'                      TimeSpan.FromDays(1));                    var parameters = sql                      .Query($"select * from [{Constants.DefaultSchema}].JobParameter where JobId = @id"' new { id = jobId })                      .ToDictionary(x => (string)x.Name' x => (string)x.Value);                    Assert.Equal(null' parameters["Key1"]);                  Assert.Equal(null' parameters["Key2"]);              }' useBatching);
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,CreateExpiredJob_CanCreateTwoParametersWithNullValues,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  var createdAt = new DateTime(2012' 12' 12);                  var jobId = connection.CreateExpiredJob(                      Job.FromExpression(() => SampleMethod("Hello"))'                      new Dictionary<string' string> { { "Key1"' null }' { "Key2"' null } }'                      createdAt'                      TimeSpan.FromDays(1));                    var parameters = sql                      .Query($"select * from [{Constants.DefaultSchema}].JobParameter where JobId = @id"' new { id = jobId })                      .ToDictionary(x => (string)x.Name' x => (string)x.Value);                    Assert.Equal(null' parameters["Key1"]);                  Assert.Equal(null' parameters["Key2"]);              }' useBatching);
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,CreateExpiredJob_CanCreateTwoParametersWithNullValues,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  var createdAt = new DateTime(2012' 12' 12);                  var jobId = connection.CreateExpiredJob(                      Job.FromExpression(() => SampleMethod("Hello"))'                      new Dictionary<string' string> { { "Key1"' null }' { "Key2"' null } }'                      createdAt'                      TimeSpan.FromDays(1));                    var parameters = sql                      .Query($"select * from [{Constants.DefaultSchema}].JobParameter where JobId = @id"' new { id = jobId })                      .ToDictionary(x => (string)x.Name' x => (string)x.Value);                    Assert.Equal(null' parameters["Key1"]);                  Assert.Equal(null' parameters["Key2"]);              }' useBatching);
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,CreateExpiredJob_CanCreateMultipleParametersWithNullValues,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  var createdAt = new DateTime(2012' 12' 12);                  var jobId = connection.CreateExpiredJob(                      Job.FromExpression(() => SampleMethod("Hello"))'                      new Dictionary<string' string> { { "Key1"' null }' { "Key2"' null }' { "Key3"' null } }'                      createdAt'                      TimeSpan.FromDays(1));                    var parameters = sql                      .Query($"select * from [{Constants.DefaultSchema}].JobParameter where JobId = @id"' new { id = jobId })                      .ToDictionary(x => (string)x.Name' x => (string)x.Value);                    Assert.Equal(null' parameters["Key1"]);                  Assert.Equal(null' parameters["Key2"]);                  Assert.Equal(null' parameters["Key3"]);              }' useBatching);
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,CreateExpiredJob_CanCreateMultipleParametersWithNullValues,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  var createdAt = new DateTime(2012' 12' 12);                  var jobId = connection.CreateExpiredJob(                      Job.FromExpression(() => SampleMethod("Hello"))'                      new Dictionary<string' string> { { "Key1"' null }' { "Key2"' null }' { "Key3"' null } }'                      createdAt'                      TimeSpan.FromDays(1));                    var parameters = sql                      .Query($"select * from [{Constants.DefaultSchema}].JobParameter where JobId = @id"' new { id = jobId })                      .ToDictionary(x => (string)x.Name' x => (string)x.Value);                    Assert.Equal(null' parameters["Key1"]);                  Assert.Equal(null' parameters["Key2"]);                  Assert.Equal(null' parameters["Key3"]);              }' useBatching);
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,CreateExpiredJob_CanCreateMultipleParametersWithNullValues,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  var createdAt = new DateTime(2012' 12' 12);                  var jobId = connection.CreateExpiredJob(                      Job.FromExpression(() => SampleMethod("Hello"))'                      new Dictionary<string' string> { { "Key1"' null }' { "Key2"' null }' { "Key3"' null } }'                      createdAt'                      TimeSpan.FromDays(1));                    var parameters = sql                      .Query($"select * from [{Constants.DefaultSchema}].JobParameter where JobId = @id"' new { id = jobId })                      .ToDictionary(x => (string)x.Name' x => (string)x.Value);                    Assert.Equal(null' parameters["Key1"]);                  Assert.Equal(null' parameters["Key2"]);                  Assert.Equal(null' parameters["Key3"]);              }' useBatching);
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,CreateExpiredJob_CanCreateJobWithoutParameters,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  var createdAt = new DateTime(2012' 12' 12);                  var jobId = connection.CreateExpiredJob(                      Job.FromExpression(() => SampleMethod("Hello"))'                      new Dictionary<string' string>()'                       createdAt'                      TimeSpan.FromDays(1));                    var parameters = sql                      .Query($"select * from [{Constants.DefaultSchema}].JobParameter where JobId = @id"' new { id = jobId })                      .ToDictionary(x => (string)x.Name' x => (string)x.Value);                    Assert.Empty(parameters);              }' useBatching);
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,CreateExpiredJob_CanCreateJobWithoutParameters,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  var createdAt = new DateTime(2012' 12' 12);                  var jobId = connection.CreateExpiredJob(                      Job.FromExpression(() => SampleMethod("Hello"))'                      new Dictionary<string' string>()'                       createdAt'                      TimeSpan.FromDays(1));                    var parameters = sql                      .Query($"select * from [{Constants.DefaultSchema}].JobParameter where JobId = @id"' new { id = jobId })                      .ToDictionary(x => (string)x.Name' x => (string)x.Value);                    Assert.Empty(parameters);              }' useBatching);
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,CreateExpiredJob_CanCreateJobWithoutParameters,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  var createdAt = new DateTime(2012' 12' 12);                  var jobId = connection.CreateExpiredJob(                      Job.FromExpression(() => SampleMethod("Hello"))'                      new Dictionary<string' string>()'                       createdAt'                      TimeSpan.FromDays(1));                    var parameters = sql                      .Query($"select * from [{Constants.DefaultSchema}].JobParameter where JobId = @id"' new { id = jobId })                      .ToDictionary(x => (string)x.Name' x => (string)x.Value);                    Assert.Empty(parameters);              }' useBatching);
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,GetFirstByLowestScoreFromSet_ReturnsEmpty_WhenNoneExist,The following statement contains a magic number: UseConnection(connection =>              {                  var result = connection.GetFirstByLowestScoreFromSet("key"' 0' 1' 10);                  Assert.Empty(result);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,GetFirstByLowestScoreFromSet_ReturnsN_WhenMoreThanNExist,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  sql.Execute(arrangeSql);                                    var result = connection.GetFirstByLowestScoreFromSet("key"' -10.0' 10.0' 2);                                    Assert.Equal(2' result.Count);                  Assert.Equal("890"' result.ElementAt(0));                  Assert.Equal("567"' result.ElementAt(1));              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,GetFirstByLowestScoreFromSet_ReturnsN_WhenMoreThanNExist,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  sql.Execute(arrangeSql);                                    var result = connection.GetFirstByLowestScoreFromSet("key"' -10.0' 10.0' 2);                                    Assert.Equal(2' result.Count);                  Assert.Equal("890"' result.ElementAt(0));                  Assert.Equal("567"' result.ElementAt(1));              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,GetFirstByLowestScoreFromSet_ReturnsN_WhenMoreThanNExist,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  sql.Execute(arrangeSql);                                    var result = connection.GetFirstByLowestScoreFromSet("key"' -10.0' 10.0' 2);                                    Assert.Equal(2' result.Count);                  Assert.Equal("890"' result.ElementAt(0));                  Assert.Equal("567"' result.ElementAt(1));              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,GetFirstByLowestScoreFromSet_ReturnsN_WhenMoreThanNExist,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  sql.Execute(arrangeSql);                                    var result = connection.GetFirstByLowestScoreFromSet("key"' -10.0' 10.0' 2);                                    Assert.Equal(2' result.Count);                  Assert.Equal("890"' result.ElementAt(0));                  Assert.Equal("567"' result.ElementAt(1));              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,GetFirstByLowestScoreFromSet_ReturnsN_WhenMoreThanNExist_And_RequestedCountIsGreaterThanN,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  sql.Execute(arrangeSql);                                    var result = connection.GetFirstByLowestScoreFromSet("another-key"' -10.0' 10.0' 5);                                    Assert.Equal(1' result.Count);                  Assert.Equal("abcd"' result.First());              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,GetFirstByLowestScoreFromSet_ReturnsN_WhenMoreThanNExist_And_RequestedCountIsGreaterThanN,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  sql.Execute(arrangeSql);                                    var result = connection.GetFirstByLowestScoreFromSet("another-key"' -10.0' 10.0' 5);                                    Assert.Equal(1' result.Count);                  Assert.Equal("abcd"' result.First());              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,GetFirstByLowestScoreFromSet_ReturnsN_WhenMoreThanNExist_And_RequestedCountIsGreaterThanN,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  sql.Execute(arrangeSql);                                    var result = connection.GetFirstByLowestScoreFromSet("another-key"' -10.0' 10.0' 5);                                    Assert.Equal(1' result.Count);                  Assert.Equal("abcd"' result.First());              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  sql.Execute(arrangeSql);                    var result = connection.GetFirstByLowestScoreFromSet("key"' -1.0' 3.0);                                    Assert.Equal("-1.0"' result);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,AnnounceServer_CreatesOrUpdatesARecord,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  var context1 = new ServerContext                  {                      Queues = new[] { "critical"' "default" }'                      WorkerCount = 4                  };                  connection.AnnounceServer("server"' context1);                    var server = sql.Query($"select * from [{Constants.DefaultSchema}].Server").Single();                  Assert.Equal("server"' server.Id);                  Assert.True(((string)server.Data).StartsWith(                      "{\"WorkerCount\":4'\"Queues\":[\"critical\"'\"default\"]'\"StartedAt\":")'                      server.Data);                  Assert.NotNull(server.LastHeartbeat);                    var context2 = new ServerContext                  {                      Queues = new[] { "default" }'                      WorkerCount = 1000                   };                  connection.AnnounceServer("server"' context2);                  var sameServer = sql.Query($"select * from [{Constants.DefaultSchema}].Server").Single();                  Assert.Equal("server"' sameServer.Id);                  Assert.Contains("1000"' sameServer.Data);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,AnnounceServer_CreatesOrUpdatesARecord,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  var context1 = new ServerContext                  {                      Queues = new[] { "critical"' "default" }'                      WorkerCount = 4                  };                  connection.AnnounceServer("server"' context1);                    var server = sql.Query($"select * from [{Constants.DefaultSchema}].Server").Single();                  Assert.Equal("server"' server.Id);                  Assert.True(((string)server.Data).StartsWith(                      "{\"WorkerCount\":4'\"Queues\":[\"critical\"'\"default\"]'\"StartedAt\":")'                      server.Data);                  Assert.NotNull(server.LastHeartbeat);                    var context2 = new ServerContext                  {                      Queues = new[] { "default" }'                      WorkerCount = 1000                   };                  connection.AnnounceServer("server"' context2);                  var sameServer = sql.Query($"select * from [{Constants.DefaultSchema}].Server").Single();                  Assert.Equal("server"' sameServer.Id);                  Assert.Contains("1000"' sameServer.Data);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  sql.Execute(arrangeSql);                    connection.Heartbeat("server1");                    var servers = sql.Query($"select * from [{Constants.DefaultSchema}].Server")                      .ToDictionary(x => (string)x.Id' x => (DateTime)x.LastHeartbeat);                    Assert.NotEqual(2012' servers["server1"].Year);                  Assert.Equal(2012' servers["server2"].Year);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  sql.Execute(arrangeSql);                    connection.Heartbeat("server1");                    var servers = sql.Query($"select * from [{Constants.DefaultSchema}].Server")                      .ToDictionary(x => (string)x.Id' x => (DateTime)x.LastHeartbeat);                    Assert.NotEqual(2012' servers["server1"].Year);                  Assert.Equal(2012' servers["server2"].Year);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative,The following statement contains a magic number: UseConnection(connection => Assert.Throws<ArgumentException>(                  () => connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5))));
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,RemoveTimedOutServers_DoItsWorkPerfectly,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  sql.Execute(                      arrangeSql'                      new[]                      {                          new { id = "server1"' heartbeat = DateTime.UtcNow.AddDays(-1) }'                          new { id = "server2"' heartbeat = DateTime.UtcNow.AddHours(-12) }                      });                    connection.RemoveTimedOutServers(TimeSpan.FromHours(15));                    var liveServer = sql.Query($"select * from [{Constants.DefaultSchema}].Server").Single();                  Assert.Equal("server2"' liveServer.Id);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,RemoveTimedOutServers_DoItsWorkPerfectly,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  sql.Execute(                      arrangeSql'                      new[]                      {                          new { id = "server1"' heartbeat = DateTime.UtcNow.AddDays(-1) }'                          new { id = "server2"' heartbeat = DateTime.UtcNow.AddHours(-12) }                      });                    connection.RemoveTimedOutServers(TimeSpan.FromHours(15));                    var liveServer = sql.Query($"select * from [{Constants.DefaultSchema}].Server").Single();                  Assert.Equal("server2"' liveServer.Id);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,GetAllItemsFromSet_ReturnsAllItems,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  // Arrange                  sql.Execute(arrangeSql' new[]                  {                      new { key = "some-set"' value = "1" }'                      new { key = "some-set"' value = "2" }'                      new { key = "another-set"' value = "3" }                  });                    // Act                  var result = connection.GetAllItemsFromSet("some-set");                    // Assert                  Assert.Equal(2' result.Count);                  Assert.Contains("1"' result);                  Assert.Contains("2"' result);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,GetAllEntriesFromHash_ReturnsAllKeysAndTheirValues,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  // Arrange                  sql.Execute(arrangeSql' new[]                  {                      new { key = "some-hash"' field = "Key1"' value = "Value1" }'                      new { key = "some-hash"' field = "Key2"' value = "Value2" }'                      new { key = "another-hash"' field = "Key3"' value = "Value3" }                  });                    // Act                  var result = connection.GetAllEntriesFromHash("some-hash");                    // Assert                  Assert.NotNull(result);                  Assert.Equal(2' result.Count);                  Assert.Equal("Value1"' result["Key1"]);                  Assert.Equal("Value2"' result["Key2"]);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,GetSetCount_ReturnsNumberOfElements_InASet,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  sql.Execute(arrangeSql' new List<dynamic>                  {                      new { key = "set-1"' value = "value-1" }'                      new { key = "set-2"' value = "value-1" }'                      new { key = "set-1"' value = "value-2" }                  });                    var result = connection.GetSetCount("set-1");                    Assert.Equal(2' result);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,GetRangeFromSet_ReturnsPagedElements,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  sql.Execute(arrangeSql' new List<dynamic>                  {                      new { Key = "set-1"' Value = "1" }'                      new { Key = "set-1"' Value = "2" }'                      new { Key = "set-1"' Value = "3" }'                      new { Key = "set-1"' Value = "4" }'                      new { Key = "set-2"' Value = "4" }'                      new { Key = "set-1"' Value = "5" }                  });                    var result = connection.GetRangeFromSet("set-1"' 2' 3);                    Assert.Equal(new [] { "3"' "4" }' result);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,GetRangeFromSet_ReturnsPagedElements,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  sql.Execute(arrangeSql' new List<dynamic>                  {                      new { Key = "set-1"' Value = "1" }'                      new { Key = "set-1"' Value = "2" }'                      new { Key = "set-1"' Value = "3" }'                      new { Key = "set-1"' Value = "4" }'                      new { Key = "set-2"' Value = "4" }'                      new { Key = "set-1"' Value = "5" }                  });                    var result = connection.GetRangeFromSet("set-1"' 2' 3);                    Assert.Equal(new [] { "3"' "4" }' result);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,GetCounter_ReturnsSumOfValues_InCounterTable,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  // Arrange                  sql.Execute(arrangeSql' new[]                  {                      new { key = "counter-1"' value = 1 }'                      new { key = "counter-2"' value = 1 }'                      new { key = "counter-1"' value = 1 }                  });                    // Act                  var result = connection.GetCounter("counter-1");                    // Assert                  Assert.Equal(2' result);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,GetCounter_IncludesValues_FromCounterAggregateTable,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  // Arrange                  sql.Execute(arrangeSql' new[]                  {                      new { key = "counter-1"' value = 12 }'                      new { key = "counter-2"' value = 15 }                  });                    // Act                  var result = connection.GetCounter("counter-1");                    Assert.Equal(12' result);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,GetCounter_IncludesValues_FromCounterAggregateTable,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  // Arrange                  sql.Execute(arrangeSql' new[]                  {                      new { key = "counter-1"' value = 12 }'                      new { key = "counter-2"' value = 15 }                  });                    // Act                  var result = connection.GetCounter("counter-1");                    Assert.Equal(12' result);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,GetCounter_IncludesValues_FromCounterAggregateTable,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  // Arrange                  sql.Execute(arrangeSql' new[]                  {                      new { key = "counter-1"' value = 12 }'                      new { key = "counter-2"' value = 15 }                  });                    // Act                  var result = connection.GetCounter("counter-1");                    Assert.Equal(12' result);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,GetHashCount_ReturnsNumber_OfHashFields,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  // Arrange                  sql.Execute(arrangeSql' new[]                  {                      new { key = "hash-1"' field = "field-1" }'                      new { key = "hash-1"' field = "field-2" }'                      new { key = "hash-2"' field = "field-1" }                  });                    // Act                  var result = connection.GetHashCount("hash-1");                    // Assert                  Assert.Equal(2' result);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,GetHashTtl_ReturnsExpirationTimeForHash,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  // Arrange                  sql.Execute(arrangeSql' new[]                  {                      new { key = "hash-1"' field = "field"' expireAt = (DateTime?)DateTime.UtcNow.AddHours(1) }'                      new { key = "hash-2"' field = "field"' expireAt = (DateTime?) null }                  });                    // Act                  var result = connection.GetHashTtl("hash-1");                    // Assert                  Assert.True(TimeSpan.FromMinutes(59) < result);                  Assert.True(result < TimeSpan.FromMinutes(61));              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,GetHashTtl_ReturnsExpirationTimeForHash,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  // Arrange                  sql.Execute(arrangeSql' new[]                  {                      new { key = "hash-1"' field = "field"' expireAt = (DateTime?)DateTime.UtcNow.AddHours(1) }'                      new { key = "hash-2"' field = "field"' expireAt = (DateTime?) null }                  });                    // Act                  var result = connection.GetHashTtl("hash-1");                    // Assert                  Assert.True(TimeSpan.FromMinutes(59) < result);                  Assert.True(result < TimeSpan.FromMinutes(61));              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,GetListCount_ReturnsTheNumberOfListElements,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  // Arrange                  sql.Execute(arrangeSql' new[]                  {                      new { key = "list-1" }'                      new { key = "list-1" }'                      new { key = "list-2" }                  });                    // Act                  var result = connection.GetListCount("list-1");                    // Assert                  Assert.Equal(2' result);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,GetListTtl_ReturnsExpirationTimeForList,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  // Arrange                  sql.Execute(arrangeSql' new[]                  {                      new { key = "list-1"' expireAt = (DateTime?) DateTime.UtcNow.AddHours(1) }'                      new { key = "list-2"' expireAt = (DateTime?) null }                  });                    // Act                  var result = connection.GetListTtl("list-1");                    // Assert                  Assert.True(TimeSpan.FromMinutes(59) < result);                  Assert.True(result < TimeSpan.FromMinutes(61));              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,GetListTtl_ReturnsExpirationTimeForList,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  // Arrange                  sql.Execute(arrangeSql' new[]                  {                      new { key = "list-1"' expireAt = (DateTime?) DateTime.UtcNow.AddHours(1) }'                      new { key = "list-2"' expireAt = (DateTime?) null }                  });                    // Act                  var result = connection.GetListTtl("list-1");                    // Assert                  Assert.True(TimeSpan.FromMinutes(59) < result);                  Assert.True(result < TimeSpan.FromMinutes(61));              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,GetRangeFromList_ReturnsAllEntries_WithinGivenBounds,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  // Arrange                  sql.Execute(arrangeSql' new[]                  {                      new { key = "list-1"' value = "1" }'                      new { key = "list-2"' value = "2" }'                      new { key = "list-1"' value = "3" }'                      new { key = "list-1"' value = "4" }'                      new { key = "list-1"' value = "5" }                  });                    // Act                  var result = connection.GetRangeFromList("list-1"' 1' 2);                                    // Assert                  Assert.Equal(new [] { "4"' "3" }' result);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,GetSetTtl_ReturnsExpirationTime_OfAGivenSet,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  // Arrange                  sql.Execute(arrangeSql' new[]                  {                      new { key = "set-1"' value = "1"' expireAt = (DateTime?) DateTime.UtcNow.AddMinutes(60) }'                      new { key = "set-2"' value = "2"' expireAt = (DateTime?) null }                  });                    // Act                  var result = connection.GetSetTtl("set-1");                    // Assert                  Assert.True(TimeSpan.FromMinutes(59) < result);                  Assert.True(result < TimeSpan.FromMinutes(61));              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,GetSetTtl_ReturnsExpirationTime_OfAGivenSet,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  // Arrange                  sql.Execute(arrangeSql' new[]                  {                      new { key = "set-1"' value = "1"' expireAt = (DateTime?) DateTime.UtcNow.AddMinutes(60) }'                      new { key = "set-2"' value = "2"' expireAt = (DateTime?) null }                  });                    // Act                  var result = connection.GetSetTtl("set-1");                    // Assert                  Assert.True(TimeSpan.FromMinutes(59) < result);                  Assert.True(result < TimeSpan.FromMinutes(61));              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,GetSetTtl_ReturnsExpirationTime_OfAGivenSet,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  // Arrange                  sql.Execute(arrangeSql' new[]                  {                      new { key = "set-1"' value = "1"' expireAt = (DateTime?) DateTime.UtcNow.AddMinutes(60) }'                      new { key = "set-2"' value = "2"' expireAt = (DateTime?) null }                  });                    // Act                  var result = connection.GetSetTtl("set-1");                    // Assert                  Assert.True(TimeSpan.FromMinutes(59) < result);                  Assert.True(result < TimeSpan.FromMinutes(61));              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,CreateExpiredJob_HandlesJobIdCanExceedInt32Max,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  // Arrange                  sql.Query($"DBCC CHECKIDENT('[{Constants.DefaultSchema}].Job'' RESEED' {int.MaxValue + 1L});");                    // Act                  var createdAt = new DateTime(2012' 12' 12);                  var jobId = connection.CreateExpiredJob(                      Job.FromExpression(() => SampleMethod("Hello"))'                      new Dictionary<string' string>()'                      createdAt'                      TimeSpan.FromDays(1));                    // Assert                  Assert.True(int.MaxValue < long.Parse(jobId));              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,CreateExpiredJob_HandlesJobIdCanExceedInt32Max,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  // Arrange                  sql.Query($"DBCC CHECKIDENT('[{Constants.DefaultSchema}].Job'' RESEED' {int.MaxValue + 1L});");                    // Act                  var createdAt = new DateTime(2012' 12' 12);                  var jobId = connection.CreateExpiredJob(                      Job.FromExpression(() => SampleMethod("Hello"))'                      new Dictionary<string' string>()'                      createdAt'                      TimeSpan.FromDays(1));                    // Assert                  Assert.True(int.MaxValue < long.Parse(jobId));              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,CreateExpiredJob_HandlesJobIdCanExceedInt32Max,The following statement contains a magic number: UseConnections((sql' connection) =>              {                  // Arrange                  sql.Query($"DBCC CHECKIDENT('[{Constants.DefaultSchema}].Job'' RESEED' {int.MaxValue + 1L});");                    // Act                  var createdAt = new DateTime(2012' 12' 12);                  var jobId = connection.CreateExpiredJob(                      Job.FromExpression(() => SampleMethod("Hello"))'                      new Dictionary<string' string>()'                      createdAt'                      TimeSpan.FromDays(1));                    // Assert                  Assert.True(int.MaxValue < long.Parse(jobId));              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerConnectionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerConnectionFacts.cs,HandlesChangingProcessOfStateDataSerialization,The following statement contains a magic number: Assert.Equal(2' deserializedStateData.Count);
Magic Number,Hangfire.SqlServer.Tests,SqlServerJobQueueFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerJobQueueFacts.cs,Dequeue_ShouldWaitIndefinitely_WhenThereAreNoJobs,The following statement contains a magic number: UseConnection(connection =>              {                  var cts = new CancellationTokenSource(200);                  var queue = CreateJobQueue(connection' invisibilityTimeout: null);                    Assert.Throws<OperationCanceledException>(                      () => queue.Dequeue(DefaultQueues' cts.Token));              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerJobQueueFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerJobQueueFacts.cs,Dequeue_InvisibilityTimeout_ShouldWaitIndefinitely_WhenThereAreNoJobs,The following statement contains a magic number: UseConnection(connection =>              {                  var cts = new CancellationTokenSource(200);                  var queue = CreateJobQueue(connection' invisibilityTimeout: DefaultTimeout);                    Assert.Throws<OperationCanceledException>(                      () => queue.Dequeue(DefaultQueues' cts.Token));              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerMonitoringApiFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerMonitoringApiFacts.cs,HandlesChangingProcessOfServerDataSerialization,The following statement contains a magic number: var serverData = new ServerData              {                  WorkerCount = 5'                  Queues = new[] { "default"' "critical" }'                  StartedAt = new DateTime(2016' 12' 01' 14' 33' 00)              };
Magic Number,Hangfire.SqlServer.Tests,SqlServerMonitoringApiFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerMonitoringApiFacts.cs,HandlesChangingProcessOfServerDataSerialization,The following statement contains a magic number: var serverData = new ServerData              {                  WorkerCount = 5'                  Queues = new[] { "default"' "critical" }'                  StartedAt = new DateTime(2016' 12' 01' 14' 33' 00)              };
Magic Number,Hangfire.SqlServer.Tests,SqlServerMonitoringApiFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerMonitoringApiFacts.cs,HandlesChangingProcessOfServerDataSerialization,The following statement contains a magic number: var serverData = new ServerData              {                  WorkerCount = 5'                  Queues = new[] { "default"' "critical" }'                  StartedAt = new DateTime(2016' 12' 01' 14' 33' 00)              };
Magic Number,Hangfire.SqlServer.Tests,SqlServerMonitoringApiFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerMonitoringApiFacts.cs,HandlesChangingProcessOfServerDataSerialization,The following statement contains a magic number: var serverData = new ServerData              {                  WorkerCount = 5'                  Queues = new[] { "default"' "critical" }'                  StartedAt = new DateTime(2016' 12' 01' 14' 33' 00)              };
Magic Number,Hangfire.SqlServer.Tests,SqlServerMonitoringApiFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerMonitoringApiFacts.cs,HandlesChangingProcessOfServerDataSerialization,The following statement contains a magic number: var serverData = new ServerData              {                  WorkerCount = 5'                  Queues = new[] { "default"' "critical" }'                  StartedAt = new DateTime(2016' 12' 01' 14' 33' 00)              };
Magic Number,Hangfire.SqlServer.Tests,SqlServerMonitoringApiFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerMonitoringApiFacts.cs,HandlesChangingProcessOfServerDataSerialization,The following statement contains a magic number: Assert.Equal(5' deserializedServerData.WorkerCount);
Magic Number,Hangfire.SqlServer.Tests,SqlServerMonitoringApiFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerMonitoringApiFacts.cs,HandlesChangingProcessOfServerDataSerialization,The following statement contains a magic number: Assert.Equal(new DateTime(2016' 12' 01' 14' 33' 00)' deserializedServerData.StartedAt);
Magic Number,Hangfire.SqlServer.Tests,SqlServerMonitoringApiFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerMonitoringApiFacts.cs,HandlesChangingProcessOfServerDataSerialization,The following statement contains a magic number: Assert.Equal(new DateTime(2016' 12' 01' 14' 33' 00)' deserializedServerData.StartedAt);
Magic Number,Hangfire.SqlServer.Tests,SqlServerMonitoringApiFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerMonitoringApiFacts.cs,HandlesChangingProcessOfServerDataSerialization,The following statement contains a magic number: Assert.Equal(new DateTime(2016' 12' 01' 14' 33' 00)' deserializedServerData.StartedAt);
Magic Number,Hangfire.SqlServer.Tests,SqlServerMonitoringApiFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerMonitoringApiFacts.cs,HandlesChangingProcessOfServerDataSerialization,The following statement contains a magic number: Assert.Equal(new DateTime(2016' 12' 01' 14' 33' 00)' deserializedServerData.StartedAt);
Magic Number,Hangfire.SqlServer.Tests,SqlServerTimeoutJobFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerTimeoutJobFacts.cs,RemoveFromQueue_DoesNotDelete_UnrelatedJobs,The following statement contains a magic number: UseConnection((sql' storage) =>              {                  // Arrange                  CreateJobQueueRecord(sql' "1"' "default"' FetchedAt);                  CreateJobQueueRecord(sql' "1"' "critical"' FetchedAt);                  CreateJobQueueRecord(sql' "2"' "default"' FetchedAt);                    using (var fetchedJob = new SqlServerTimeoutJob(storage' 999' "1"' "default"' FetchedAt))                  {                      // Act                      fetchedJob.RemoveFromQueue();                        // Assert                      var count = sql.Query<int>($"select count(*) from [{Constants.DefaultSchema}].JobQueue").Single();                      Assert.Equal(3' count);                  }              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerTimeoutJobFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerTimeoutJobFacts.cs,RemoveFromQueue_DoesNotDelete_UnrelatedJobs,The following statement contains a magic number: UseConnection((sql' storage) =>              {                  // Arrange                  CreateJobQueueRecord(sql' "1"' "default"' FetchedAt);                  CreateJobQueueRecord(sql' "1"' "critical"' FetchedAt);                  CreateJobQueueRecord(sql' "2"' "default"' FetchedAt);                    using (var fetchedJob = new SqlServerTimeoutJob(storage' 999' "1"' "default"' FetchedAt))                  {                      // Act                      fetchedJob.RemoveFromQueue();                        // Assert                      var count = sql.Query<int>($"select count(*) from [{Constants.DefaultSchema}].JobQueue").Single();                      Assert.Equal(3' count);                  }              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerTimeoutJobFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerTimeoutJobFacts.cs,Timer_UpdatesFetchedAtColumn,The following statement contains a magic number: UseConnection((sql' storage) =>              {                  // Arrange                  var id = CreateJobQueueRecord(sql' "1"' "default"' FetchedAt);                  using (var processingJob = new SqlServerTimeoutJob(storage' id' "1"' "default"' FetchedAt))                  {                      Thread.Sleep(TimeSpan.FromSeconds(10));                        var record = sql.Query($"select * from [{Constants.DefaultSchema}].JobQueue").Single();                        Assert.NotNull(processingJob.FetchedAt);                      Assert.Equal<DateTime?>(processingJob.FetchedAt' record.FetchedAt);                      var now = DateTime.UtcNow;                      Assert.True(now.AddSeconds(-5) < record.FetchedAt' (now - record.FetchedAt).ToString());                  }              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerTimeoutJobFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerTimeoutJobFacts.cs,Timer_UpdatesFetchedAtColumn,The following statement contains a magic number: UseConnection((sql' storage) =>              {                  // Arrange                  var id = CreateJobQueueRecord(sql' "1"' "default"' FetchedAt);                  using (var processingJob = new SqlServerTimeoutJob(storage' id' "1"' "default"' FetchedAt))                  {                      Thread.Sleep(TimeSpan.FromSeconds(10));                        var record = sql.Query($"select * from [{Constants.DefaultSchema}].JobQueue").Single();                        Assert.NotNull(processingJob.FetchedAt);                      Assert.Equal<DateTime?>(processingJob.FetchedAt' record.FetchedAt);                      var now = DateTime.UtcNow;                      Assert.True(now.AddSeconds(-5) < record.FetchedAt' (now - record.FetchedAt).ToString());                  }              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerTimeoutJobFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerTimeoutJobFacts.cs,RemoveFromQueue_AfterTimer_RemovesJobFromTheQueue,The following statement contains a magic number: UseConnection((sql' storage) =>              {                  // Arrange                  var id = CreateJobQueueRecord(sql' "1"' "default"' FetchedAt);                  using (var processingJob = new SqlServerTimeoutJob(storage' id' "1"' "default"' FetchedAt))                  {                      Thread.Sleep(TimeSpan.FromSeconds(10));                        // Act                      processingJob.RemoveFromQueue();                        // Assert                      var count = sql.Query<int>($"select count(*) from [{Constants.DefaultSchema}].JobQueue").Single();                      Assert.Equal(0' count);                  }              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerTimeoutJobFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerTimeoutJobFacts.cs,RequeueQueue_AfterTimer_SetsFetchedAtValueToNull,The following statement contains a magic number: UseConnection((sql' storage) =>              {                  // Arrange                  var id = CreateJobQueueRecord(sql' "1"' "default"' FetchedAt);                  using (var processingJob = new SqlServerTimeoutJob(storage' id' "1"' "default"' FetchedAt))                  {                      Thread.Sleep(TimeSpan.FromSeconds(10));                        // Act                      processingJob.Requeue();                        // Assert                      var record = sql.Query($"select * from [{Constants.DefaultSchema}].JobQueue").Single();                      Assert.Null(record.FetchedAt);                  }              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerTimeoutJobFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerTimeoutJobFacts.cs,UseConnection,The following statement contains a magic number: var storage = new SqlServerStorage(                      connection'                      new SqlServerStorageOptions { SlidingInvisibilityTimeout = TimeSpan.FromSeconds(10) });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,ExpireJob_SetsJobExpirationData,The following statement contains a magic number: UseConnection(sql =>              {                  var jobId = sql.Query(arrangeSql).Single().Id.ToString();                  var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();                    Commit(sql' x => x.ExpireJob(jobId' TimeSpan.FromHours(24))' useBatching);                    var job = GetTestJob(sql' jobId);                  Assert.True(DateTime.UtcNow.AddHours(23) < job.ExpireAt && job.ExpireAt < DateTime.UtcNow.AddHours(25));                    var anotherJob = GetTestJob(sql' anotherJobId);                  Assert.Null(anotherJob.ExpireAt);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,ExpireJob_SetsJobExpirationData,The following statement contains a magic number: UseConnection(sql =>              {                  var jobId = sql.Query(arrangeSql).Single().Id.ToString();                  var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();                    Commit(sql' x => x.ExpireJob(jobId' TimeSpan.FromHours(24))' useBatching);                    var job = GetTestJob(sql' jobId);                  Assert.True(DateTime.UtcNow.AddHours(23) < job.ExpireAt && job.ExpireAt < DateTime.UtcNow.AddHours(25));                    var anotherJob = GetTestJob(sql' anotherJobId);                  Assert.Null(anotherJob.ExpireAt);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,ExpireJob_SetsJobExpirationData,The following statement contains a magic number: UseConnection(sql =>              {                  var jobId = sql.Query(arrangeSql).Single().Id.ToString();                  var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();                    Commit(sql' x => x.ExpireJob(jobId' TimeSpan.FromHours(24))' useBatching);                    var job = GetTestJob(sql' jobId);                  Assert.True(DateTime.UtcNow.AddHours(23) < job.ExpireAt && job.ExpireAt < DateTime.UtcNow.AddHours(25));                    var anotherJob = GetTestJob(sql' anotherJobId);                  Assert.Null(anotherJob.ExpireAt);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,AddToQueue_EnqueuesAJobDirectly_WhenDefaultQueueProviderIsUsed,The following statement contains a magic number: var options = new SqlServerStorageOptions { PrepareSchemaIfNecessary = false' CommandTimeout = TimeSpan.FromSeconds(-5) };
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet,The following statement contains a magic number: UseConnection(sql =>              {                  Commit(sql' x => x.IncrementCounter("my-key"' TimeSpan.FromDays(1))' useBatching);                    var record = sql.Query($"select * from [{Constants.DefaultSchema}].Counter").Single();                    Assert.Equal("my-key"' record.Key);                  Assert.Equal(1' record.Value);                  Assert.NotNull(record.ExpireAt);                    var expireAt = (DateTime) record.ExpireAt;                    Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);                  Assert.True(expireAt < DateTime.UtcNow.AddHours(25));              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet,The following statement contains a magic number: UseConnection(sql =>              {                  Commit(sql' x => x.IncrementCounter("my-key"' TimeSpan.FromDays(1))' useBatching);                    var record = sql.Query($"select * from [{Constants.DefaultSchema}].Counter").Single();                    Assert.Equal("my-key"' record.Key);                  Assert.Equal(1' record.Value);                  Assert.NotNull(record.ExpireAt);                    var expireAt = (DateTime) record.ExpireAt;                    Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);                  Assert.True(expireAt < DateTime.UtcNow.AddHours(25));              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,IncrementCounter_WithExistingKey_AddsAnotherRecord,The following statement contains a magic number: UseConnection(sql =>              {                  Commit(sql' x =>                  {                      x.IncrementCounter("my-key");                      x.IncrementCounter("my-key");                  }' useBatching);                    var recordCount = sql.Query<int>($"select count(*) from [{Constants.DefaultSchema}].Counter").Single();                                    Assert.Equal(2' recordCount);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet,The following statement contains a magic number: UseConnection(sql =>              {                  Commit(sql' x => x.DecrementCounter("my-key"' TimeSpan.FromDays(1))' useBatching);                    var record = sql.Query($"select * from [{Constants.DefaultSchema}].Counter").Single();                    Assert.Equal("my-key"' record.Key);                  Assert.Equal(-1' record.Value);                  Assert.NotNull(record.ExpireAt);                    var expireAt = (DateTime)record.ExpireAt;                    Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);                  Assert.True(expireAt < DateTime.UtcNow.AddHours(25));              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet,The following statement contains a magic number: UseConnection(sql =>              {                  Commit(sql' x => x.DecrementCounter("my-key"' TimeSpan.FromDays(1))' useBatching);                    var record = sql.Query($"select * from [{Constants.DefaultSchema}].Counter").Single();                    Assert.Equal("my-key"' record.Key);                  Assert.Equal(-1' record.Value);                  Assert.NotNull(record.ExpireAt);                    var expireAt = (DateTime)record.ExpireAt;                    Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);                  Assert.True(expireAt < DateTime.UtcNow.AddHours(25));              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,DecrementCounter_WithExistingKey_AddsAnotherRecord,The following statement contains a magic number: UseConnection(sql =>              {                  Commit(sql' x =>                  {                      x.DecrementCounter("my-key");                      x.DecrementCounter("my-key");                  }' useBatching);                    var recordCount = sql.Query<int>($"select count(*) from [{Constants.DefaultSchema}].Counter").Single();                    Assert.Equal(2' recordCount);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue,The following statement contains a magic number: UseConnection(sql =>              {                  Commit(sql' x => x.AddToSet("my-key"' "my-value")' useBatching);                    var record = sql.Query($"select * from [{Constants.DefaultSchema}].[Set]").Single();                    Assert.Equal("my-key"' record.Key);                  Assert.Equal("my-value"' record.Value);                  Assert.Equal(0.0' record.Score' 2);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent,The following statement contains a magic number: UseConnection(sql =>              {                  Commit(sql' x =>                  {                      x.AddToSet("my-key"' "my-value");                      x.AddToSet("my-key"' "another-value");                  }' useBatching);                    var recordCount = sql.Query<int>($"select count(*) from [{Constants.DefaultSchema}].[Set]").Single();                    Assert.Equal(2' recordCount);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist,The following statement contains a magic number: UseConnection(sql =>              {                  Commit(sql' x => x.AddToSet("my-key"' "my-value"' 3.2)' useBatching);                    var record = sql.Query($"select * from [{Constants.DefaultSchema}].[Set]").Single();                    Assert.Equal("my-key"' record.Key);                  Assert.Equal("my-value"' record.Value);                  Assert.Equal(3.2' record.Score' 3);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist,The following statement contains a magic number: UseConnection(sql =>              {                  Commit(sql' x => x.AddToSet("my-key"' "my-value"' 3.2)' useBatching);                    var record = sql.Query($"select * from [{Constants.DefaultSchema}].[Set]").Single();                    Assert.Equal("my-key"' record.Key);                  Assert.Equal("my-value"' record.Value);                  Assert.Equal(3.2' record.Score' 3);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist,The following statement contains a magic number: UseConnection(sql =>              {                  Commit(sql' x => x.AddToSet("my-key"' "my-value"' 3.2)' useBatching);                    var record = sql.Query($"select * from [{Constants.DefaultSchema}].[Set]").Single();                    Assert.Equal("my-key"' record.Key);                  Assert.Equal("my-value"' record.Value);                  Assert.Equal(3.2' record.Score' 3);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist,The following statement contains a magic number: UseConnection(sql =>              {                  Commit(sql' x =>                  {                      x.AddToSet("my-key"' "my-value");                      x.AddToSet("my-key"' "my-value"' 3.2);                  }' useBatching);                    var record = sql.Query($"select * from [{Constants.DefaultSchema}].[Set]").Single();                    Assert.Equal(3.2' record.Score' 3);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist,The following statement contains a magic number: UseConnection(sql =>              {                  Commit(sql' x =>                  {                      x.AddToSet("my-key"' "my-value");                      x.AddToSet("my-key"' "my-value"' 3.2);                  }' useBatching);                    var record = sql.Query($"select * from [{Constants.DefaultSchema}].[Set]").Single();                    Assert.Equal(3.2' record.Score' 3);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist,The following statement contains a magic number: UseConnection(sql =>              {                  Commit(sql' x =>                  {                      x.AddToSet("my-key"' "my-value");                      x.AddToSet("my-key"' "my-value"' 3.2);                  }' useBatching);                    var record = sql.Query($"select * from [{Constants.DefaultSchema}].[Set]").Single();                    Assert.Equal(3.2' record.Score' 3);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist,The following statement contains a magic number: UseConnection(sql =>              {                  Commit(sql' x =>                  {                      x.InsertToList("my-key"' "my-value");                      x.InsertToList("my-key"' "my-value");                  }' useBatching);                    var recordCount = sql.Query<int>($"select count(*) from [{Constants.DefaultSchema}].List").Single();                    Assert.Equal(2' recordCount);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,TrimList_TrimsAList_ToASpecifiedRange,The following statement contains a magic number: UseConnection(sql =>              {                  Commit(sql' x =>                  {                      x.InsertToList("my-key"' "0");                      x.InsertToList("my-key"' "1");                      x.InsertToList("my-key"' "2");                      x.InsertToList("my-key"' "3");                      x.TrimList("my-key"' 1' 2);                  }' useBatching);                    var records = sql.Query($"select * from [{Constants.DefaultSchema}].List").ToArray();                    Assert.Equal(2' records.Length);                  Assert.Equal("1"' records[0].Value);                  Assert.Equal("2"' records[1].Value);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,TrimList_TrimsAList_ToASpecifiedRange,The following statement contains a magic number: UseConnection(sql =>              {                  Commit(sql' x =>                  {                      x.InsertToList("my-key"' "0");                      x.InsertToList("my-key"' "1");                      x.InsertToList("my-key"' "2");                      x.InsertToList("my-key"' "3");                      x.TrimList("my-key"' 1' 2);                  }' useBatching);                    var records = sql.Query($"select * from [{Constants.DefaultSchema}].List").ToArray();                    Assert.Equal(2' records.Length);                  Assert.Equal("1"' records[0].Value);                  Assert.Equal("2"' records[1].Value);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex,The following statement contains a magic number: UseConnection(sql =>              {                  Commit(sql' x =>                  {                      x.InsertToList("my-key"' "0");                      x.InsertToList("my-key"' "1");                      x.InsertToList("my-key"' "2");                      x.TrimList("my-key"' 1' 100);                  }' useBatching);                    var recordCount = sql.Query<int>($"select count(*) from [{Constants.DefaultSchema}].List").Single();                    Assert.Equal(2' recordCount);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex,The following statement contains a magic number: UseConnection(sql =>              {                  Commit(sql' x =>                  {                      x.InsertToList("my-key"' "0");                      x.InsertToList("my-key"' "1");                      x.InsertToList("my-key"' "2");                      x.TrimList("my-key"' 1' 100);                  }' useBatching);                    var recordCount = sql.Query<int>($"select count(*) from [{Constants.DefaultSchema}].List").Single();                    Assert.Equal(2' recordCount);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex,The following statement contains a magic number: UseConnection(sql =>              {                  Commit(sql' x =>                  {                      x.InsertToList("my-key"' "0");                      x.TrimList("my-key"' 1' 100);                  }' useBatching);                    var recordCount = sql.Query<int>($"select count(*) from [{Constants.DefaultSchema}].List").Single();                    Assert.Equal(0' recordCount);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,ExpireHash_ThrowsAnException_WhenKeyIsNull,The following statement contains a magic number: UseConnection(sql =>              {                  var exception = Assert.Throws<ArgumentNullException>(                      () => Commit(sql' x => x.ExpireHash(null' TimeSpan.FromMinutes(5))' useBatching));                    Assert.Equal("key"' exception.ParamName);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey,The following statement contains a magic number: UseConnection(sql =>              {                  // Arrange                  sql.Execute(arrangeSql' new[]                  {                      new { key = "hash-1"' field = "field" }'                      new { key = "hash-2"' field = "field" }                  });                    // Act                  Commit(sql' x => x.ExpireHash("hash-1"' TimeSpan.FromMinutes(60))' useBatching);                    // Assert                  var records = sql.Query($"select * from [{Constants.DefaultSchema}].Hash").ToDictionary(x => (string)x.Key' x => (DateTime?)x.ExpireAt);                  Assert.True(DateTime.UtcNow.AddMinutes(59) < records["hash-1"]);                  Assert.True(records["hash-1"] < DateTime.UtcNow.AddMinutes(61));                  Assert.Null(records["hash-2"]);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey,The following statement contains a magic number: UseConnection(sql =>              {                  // Arrange                  sql.Execute(arrangeSql' new[]                  {                      new { key = "hash-1"' field = "field" }'                      new { key = "hash-2"' field = "field" }                  });                    // Act                  Commit(sql' x => x.ExpireHash("hash-1"' TimeSpan.FromMinutes(60))' useBatching);                    // Assert                  var records = sql.Query($"select * from [{Constants.DefaultSchema}].Hash").ToDictionary(x => (string)x.Key' x => (DateTime?)x.ExpireAt);                  Assert.True(DateTime.UtcNow.AddMinutes(59) < records["hash-1"]);                  Assert.True(records["hash-1"] < DateTime.UtcNow.AddMinutes(61));                  Assert.Null(records["hash-2"]);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey,The following statement contains a magic number: UseConnection(sql =>              {                  // Arrange                  sql.Execute(arrangeSql' new[]                  {                      new { key = "hash-1"' field = "field" }'                      new { key = "hash-2"' field = "field" }                  });                    // Act                  Commit(sql' x => x.ExpireHash("hash-1"' TimeSpan.FromMinutes(60))' useBatching);                    // Assert                  var records = sql.Query($"select * from [{Constants.DefaultSchema}].Hash").ToDictionary(x => (string)x.Key' x => (DateTime?)x.ExpireAt);                  Assert.True(DateTime.UtcNow.AddMinutes(59) < records["hash-1"]);                  Assert.True(records["hash-1"] < DateTime.UtcNow.AddMinutes(61));                  Assert.Null(records["hash-2"]);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,ExpireSet_ThrowsAnException_WhenKeyIsNull,The following statement contains a magic number: UseConnection(sql =>              {                  var exception = Assert.Throws<ArgumentNullException>(                      () => Commit(sql' x => x.ExpireSet(null' TimeSpan.FromSeconds(45))' useBatching));                    Assert.Equal("key"' exception.ParamName);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,ExpireSet_SetsExpirationTime_OnASet_WithGivenKey,The following statement contains a magic number: UseConnection(sql =>              {                  // Arrange                  sql.Execute(arrangeSql' new[]                  {                      new { key = "set-1"' value = "1" }'                      new { key = "set-2"' value = "1" }                  });                    // Act                  Commit(sql' x => x.ExpireSet("set-1"' TimeSpan.FromMinutes(60))' useBatching);                    // Assert                  var records = sql.Query($"select * from [{Constants.DefaultSchema}].[Set]").ToDictionary(x => (string)x.Key' x => (DateTime?)x.ExpireAt);                  Assert.True(DateTime.UtcNow.AddMinutes(59) < records["set-1"]);                  Assert.True(records["set-1"] < DateTime.UtcNow.AddMinutes(61));                  Assert.Null(records["set-2"]);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,ExpireSet_SetsExpirationTime_OnASet_WithGivenKey,The following statement contains a magic number: UseConnection(sql =>              {                  // Arrange                  sql.Execute(arrangeSql' new[]                  {                      new { key = "set-1"' value = "1" }'                      new { key = "set-2"' value = "1" }                  });                    // Act                  Commit(sql' x => x.ExpireSet("set-1"' TimeSpan.FromMinutes(60))' useBatching);                    // Assert                  var records = sql.Query($"select * from [{Constants.DefaultSchema}].[Set]").ToDictionary(x => (string)x.Key' x => (DateTime?)x.ExpireAt);                  Assert.True(DateTime.UtcNow.AddMinutes(59) < records["set-1"]);                  Assert.True(records["set-1"] < DateTime.UtcNow.AddMinutes(61));                  Assert.Null(records["set-2"]);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,ExpireSet_SetsExpirationTime_OnASet_WithGivenKey,The following statement contains a magic number: UseConnection(sql =>              {                  // Arrange                  sql.Execute(arrangeSql' new[]                  {                      new { key = "set-1"' value = "1" }'                      new { key = "set-2"' value = "1" }                  });                    // Act                  Commit(sql' x => x.ExpireSet("set-1"' TimeSpan.FromMinutes(60))' useBatching);                    // Assert                  var records = sql.Query($"select * from [{Constants.DefaultSchema}].[Set]").ToDictionary(x => (string)x.Key' x => (DateTime?)x.ExpireAt);                  Assert.True(DateTime.UtcNow.AddMinutes(59) < records["set-1"]);                  Assert.True(records["set-1"] < DateTime.UtcNow.AddMinutes(61));                  Assert.Null(records["set-2"]);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,ExpireList_ThrowsAnException_WhenKeyIsNull,The following statement contains a magic number: UseConnection(sql =>              {                  var exception = Assert.Throws<ArgumentNullException>(                      () => Commit(sql' x => x.ExpireList(null' TimeSpan.FromSeconds(45))' useBatching));                    Assert.Equal("key"' exception.ParamName);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,ExpireList_SetsExpirationTime_OnAList_WithGivenKey,The following statement contains a magic number: UseConnection(sql =>              {                  // Arrange                  sql.Execute(arrangeSql' new[]                  {                      new { key = "list-1"' value = "1" }'                      new { key = "list-2"' value = "1" }                  });                    // Act                  Commit(sql' x => x.ExpireList("list-1"' TimeSpan.FromMinutes(60))' useBatching);                    // Assert                  var records = sql.Query($"select * from [{Constants.DefaultSchema}].[List]").ToDictionary(x => (string)x.Key' x => (DateTime?)x.ExpireAt);                  Assert.True(DateTime.UtcNow.AddMinutes(59) < records["list-1"]);                  Assert.True(records["list-1"] < DateTime.UtcNow.AddMinutes(61));                  Assert.Null(records["list-2"]);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,ExpireList_SetsExpirationTime_OnAList_WithGivenKey,The following statement contains a magic number: UseConnection(sql =>              {                  // Arrange                  sql.Execute(arrangeSql' new[]                  {                      new { key = "list-1"' value = "1" }'                      new { key = "list-2"' value = "1" }                  });                    // Act                  Commit(sql' x => x.ExpireList("list-1"' TimeSpan.FromMinutes(60))' useBatching);                    // Assert                  var records = sql.Query($"select * from [{Constants.DefaultSchema}].[List]").ToDictionary(x => (string)x.Key' x => (DateTime?)x.ExpireAt);                  Assert.True(DateTime.UtcNow.AddMinutes(59) < records["list-1"]);                  Assert.True(records["list-1"] < DateTime.UtcNow.AddMinutes(61));                  Assert.Null(records["list-2"]);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,ExpireList_SetsExpirationTime_OnAList_WithGivenKey,The following statement contains a magic number: UseConnection(sql =>              {                  // Arrange                  sql.Execute(arrangeSql' new[]                  {                      new { key = "list-1"' value = "1" }'                      new { key = "list-2"' value = "1" }                  });                    // Act                  Commit(sql' x => x.ExpireList("list-1"' TimeSpan.FromMinutes(60))' useBatching);                    // Assert                  var records = sql.Query($"select * from [{Constants.DefaultSchema}].[List]").ToDictionary(x => (string)x.Key' x => (DateTime?)x.ExpireAt);                  Assert.True(DateTime.UtcNow.AddMinutes(59) < records["list-1"]);                  Assert.True(records["list-1"] < DateTime.UtcNow.AddMinutes(61));                  Assert.Null(records["list-2"]);              });
Magic Number,Hangfire.SqlServer.Tests,SqlServerWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\HangfireIO_Hangfire\tests\Hangfire.SqlServer.Tests\SqlServerWriteOnlyTransactionFacts.cs,ExpireJob_SetsJobExpirationData_WhenJobIdIsLongValue,The following statement contains a magic number: UseConnection(sql =>              {                  sql.Query(                      arrangeSql'                      new { jobId = int.MaxValue + 1L });                    Commit(sql' x => x.ExpireJob((int.MaxValue + 1L).ToString()' TimeSpan.FromDays(1))' useBatching);                    var job = GetTestJob(sql' (int.MaxValue + 1L).ToString());                  Assert.True(DateTime.UtcNow.AddMinutes(-1) < job.ExpireAt && job.ExpireAt <= DateTime.UtcNow.AddDays(2));              });
