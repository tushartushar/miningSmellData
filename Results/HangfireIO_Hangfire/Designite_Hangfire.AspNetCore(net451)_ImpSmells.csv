Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Hangfire.Dashboard,AspNetCoreDashboardContextExtensions,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.AspNetCore\Dashboard\AspNetCoreDashboardContextExtensions.cs,GetHttpContext,The length of the statement  "                throw new ArgumentException($"Context argument should be of type `{nameof(AspNetCoreDashboardContext)}`!"' nameof(context)); " is 124.
Long Statement,Hangfire,HangfireApplicationBuilderExtensions,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.AspNetCore\HangfireApplicationBuilderExtensions.cs,UseHangfireServer,The length of the statement  "            var server = HangfireServiceCollectionExtensions.GetInternalServices(services' out var factory' out var stateChanger' out var performer) " is 136.
Long Statement,Hangfire,HangfireServiceCollectionExtensions,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.AspNetCore\HangfireServiceCollectionExtensions.cs,ThrowIfNotConfigured,The length of the statement  "                    "Unable to find the required services. Please add all the required services by calling 'IServiceCollection.AddHangfire' inside the call to 'ConfigureServices(...)' in the application startup code."); " is 199.
Missing Default,Hangfire.AspNetCore,AspNetCoreLog,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.AspNetCore\AspNetCore\AspNetCoreLog.cs,ToTargetLogLevel,The following switch statement is missing a default case: switch (logLevel)              {                  case Logging.LogLevel.Trace:                      return LogLevel.Trace;                  case Logging.LogLevel.Debug:                      return LogLevel.Debug;                  case Logging.LogLevel.Info:                      return LogLevel.Information;                  case Logging.LogLevel.Warn:                      return LogLevel.Warning;                  case Logging.LogLevel.Error:                      return LogLevel.Error;                  case Logging.LogLevel.Fatal:                      return LogLevel.Critical;              }
