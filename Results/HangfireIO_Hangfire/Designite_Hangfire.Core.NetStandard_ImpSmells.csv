Implementation smell,Namespace,Class,File,Method,Description
Long Method,NCrontab,CrontabSchedule,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\App_Packages\NCrontab\CrontabSchedule.cs,GetNextOccurrence,The method has 123 lines of code.
Long Method,Hangfire.Dashboard,DashboardRoutes,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\DashboardRoutes.cs,DashboardRoutes,The method has 107 lines of code.
Long Method,Hangfire.Dashboard,JobMethodCallRenderer,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\JobMethodCallRenderer.cs,Render,The method has 122 lines of code.
Long Method,Hangfire.Dashboard.Pages,AwaitingJobsPage,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\Pages\AwaitingJobsPage.generated.cs,Execute,The method has 457 lines of code.
Long Method,Hangfire.Dashboard.Pages,DeletedJobsPage,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\Pages\DeletedJobsPage.generated.cs,Execute,The method has 314 lines of code.
Long Method,Hangfire.Dashboard.Pages,EnqueuedJobsPage,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\Pages\EnqueuedJobsPage.cs,Execute,The method has 371 lines of code.
Long Method,Hangfire.Dashboard.Pages,FailedJobsPage,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\Pages\FailedJobsPage.generated.cs,Execute,The method has 450 lines of code.
Long Method,Hangfire.Dashboard.Pages,FetchedJobsPage,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\Pages\FetchedJobsPage.cs,Execute,The method has 355 lines of code.
Long Method,Hangfire.Dashboard.Pages,HomePage,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\Pages\HomePage.cs,Execute,The method has 219 lines of code.
Long Method,Hangfire.Dashboard.Pages,JobDetailsPage,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\Pages\JobDetailsPage.cs,Execute,The method has 670 lines of code.
Long Method,Hangfire.Dashboard.Pages,LayoutPage,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\Pages\LayoutPage.cs,Execute,The method has 194 lines of code.
Long Method,Hangfire.Dashboard.Pages,ProcessingJobsPage,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\Pages\ProcessingJobsPage.generated.cs,Execute,The method has 393 lines of code.
Long Method,Hangfire.Dashboard.Pages,QueuesPage,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\Pages\QueuesPage.generated.cs,Execute,The method has 423 lines of code.
Long Method,Hangfire.Dashboard.Pages,RecurringJobsPage,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\Pages\RecurringJobsPage.generated.cs,Execute,The method has 629 lines of code.
Long Method,Hangfire.Dashboard.Pages,RetriesPage,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\Pages\RetriesPage.generated.cs,Execute,The method has 397 lines of code.
Long Method,Hangfire.Dashboard.Pages,ScheduledJobsPage,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\Pages\ScheduledJobsPage.generated.cs,Execute,The method has 327 lines of code.
Long Method,Hangfire.Dashboard.Pages,ServersPage,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\Pages\ServersPage.generated.cs,Execute,The method has 180 lines of code.
Long Method,Hangfire.Dashboard.Pages,SucceededJobs,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\Pages\SucceededJobs1.generated.cs,Execute,The method has 348 lines of code.
Long Method,Hangfire.Dashboard.Pages,Paginator,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\Pages\_Paginator.cs,Execute,The method has 166 lines of code.
Complex Method,NCrontab,CrontabField,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\App_Packages\NCrontab\CrontabField.cs,Accumulate,Cyclomatic complexity of the method is 8
Complex Method,NCrontab,CrontabFieldImpl,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\App_Packages\NCrontab\CrontabFieldImpl.cs,InternalParse,Cyclomatic complexity of the method is 8
Complex Method,NCrontab,CrontabSchedule,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\App_Packages\NCrontab\CrontabSchedule.cs,GetNextOccurrence,Cyclomatic complexity of the method is 9
Complex Method,Hangfire,ContinuationsSupportAttribute,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\ContinuationsSupportAttribute.cs,ExecuteContinuationsIfExist,Cyclomatic complexity of the method is 8
Complex Method,Hangfire.Common,Job,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Common\Job.cs,Validate,Cyclomatic complexity of the method is 11
Complex Method,Hangfire.Common,FilterComparer,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Common\JobFilterProviderCollection.cs,Compare,Cyclomatic complexity of the method is 8
Complex Method,Hangfire.Common,TypeExtensions,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Common\TypeExtensions.cs,GetNonOpenMatchingMethod,Cyclomatic complexity of the method is 10
Complex Method,Hangfire.Common,TypeExtensions,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Common\TypeExtensions.cs,TypesMatchRecursive,Cyclomatic complexity of the method is 9
Complex Method,Hangfire.Dashboard,HtmlHelper,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\HtmlHelper.cs,ToHumanDuration,Cyclomatic complexity of the method is 10
Complex Method,Hangfire.Dashboard,JobMethodCallRenderer,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\JobMethodCallRenderer.cs,Render,Cyclomatic complexity of the method is 12
Complex Method,Hangfire.Dashboard,ArgumentRenderer,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\JobMethodCallRenderer.cs,GetRenderer,Cyclomatic complexity of the method is 8
Complex Method,Hangfire.Storage,StorageConnectionExtensions,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Storage\StorageConnectionExtensions.cs,GetRecurringJobDtos,Cyclomatic complexity of the method is 10
Long Parameter List,NCrontab,CrontabField,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\App_Packages\NCrontab\CrontabField.cs,Accumulate,The method has 5 parameters. Parameters: start' end' interval' success' errorSelector
Long Parameter List,NCrontab,CrontabSchedule,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\App_Packages\NCrontab\CrontabSchedule.cs,CrontabSchedule,The method has 6 parameters. Parameters: seconds' minutes' hours' days' months' daysOfWeek
Long Parameter List,Hangfire,StackTraceParser,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\App_Packages\StackTraceParser\StackTraceParser.cs,Parse,The method has 7 parameters. Parameters: text' tokenSelector' methodSelector' parameterSelector' parametersSelector' sourceLocationSelector' selector
Long Parameter List,Hangfire,BackgroundJobClientExtensions,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\BackgroundJobClientExtensions.cs,ContinueWith,The method has 5 parameters. Parameters: client' parentId' methodCall' nextState' options
Long Parameter List,Hangfire,BackgroundJobClientExtensions,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\BackgroundJobClientExtensions.cs,ContinueWith,The method has 5 parameters. Parameters: client' parentId' methodCall' nextState' options
Long Parameter List,Hangfire,BackgroundJobClientExtensions,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\BackgroundJobClientExtensions.cs,ContinueWith,The method has 5 parameters. Parameters: client' parentId' methodCall' nextState' options
Long Parameter List,Hangfire,BackgroundJobClientExtensions,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\BackgroundJobClientExtensions.cs,ContinueWith,The method has 5 parameters. Parameters: client' parentId' methodCall' nextState' options
Long Parameter List,Hangfire,RecurringJob,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\RecurringJob.cs,AddOrUpdate,The method has 5 parameters. Parameters: recurringJobId' methodCall' cronExpression' timeZone' queue
Long Parameter List,Hangfire,RecurringJob,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\RecurringJob.cs,AddOrUpdate,The method has 5 parameters. Parameters: recurringJobId' methodCall' cronExpression' timeZone' queue
Long Parameter List,Hangfire,RecurringJob,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\RecurringJob.cs,AddOrUpdate,The method has 5 parameters. Parameters: recurringJobId' methodCall' cronExpression' timeZone' queue
Long Parameter List,Hangfire,RecurringJob,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\RecurringJob.cs,AddOrUpdate,The method has 5 parameters. Parameters: recurringJobId' methodCall' cronExpression' timeZone' queue
Long Parameter List,Hangfire,RecurringJob,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\RecurringJob.cs,AddOrUpdate,The method has 5 parameters. Parameters: recurringJobId' methodCall' cronExpression' timeZone' queue
Long Parameter List,Hangfire,RecurringJob,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\RecurringJob.cs,AddOrUpdate,The method has 5 parameters. Parameters: recurringJobId' methodCall' cronExpression' timeZone' queue
Long Parameter List,Hangfire,RecurringJob,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\RecurringJob.cs,AddOrUpdate,The method has 5 parameters. Parameters: recurringJobId' methodCall' cronExpression' timeZone' queue
Long Parameter List,Hangfire,RecurringJob,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\RecurringJob.cs,AddOrUpdate,The method has 5 parameters. Parameters: recurringJobId' methodCall' cronExpression' timeZone' queue
Long Parameter List,Hangfire,RecurringJobManagerExtensions,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\RecurringJobManagerExtensions.cs,AddOrUpdate,The method has 5 parameters. Parameters: manager' recurringJobId' job' cronExpression' timeZone
Long Parameter List,Hangfire,RecurringJobManagerExtensions,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\RecurringJobManagerExtensions.cs,AddOrUpdate,The method has 6 parameters. Parameters: manager' recurringJobId' job' cronExpression' timeZone' queue
Long Parameter List,Hangfire.Common,Job,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Common\Job.cs,Validate,The method has 6 parameters. Parameters: type' typeParameterName' method' methodParameterName' argumentCount' argumentParameterName
Long Parameter List,Hangfire.Server,ServerJobCancellationToken,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Server\ServerJobCancellationToken.cs,ServerJobCancellationToken,The method has 5 parameters. Parameters: connection' jobId' serverId' workerId' shutdownToken
Long Parameter List,Hangfire.States,ApplyStateContext,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\States\ApplyStateContext.cs,ApplyStateContext,The method has 6 parameters. Parameters: storage' connection' transaction' backgroundJob' newState' oldStateName
Long Parameter List,Hangfire.States,StateChangeContext,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\States\StateChangeContext.cs,StateChangeContext,The method has 5 parameters. Parameters: storage' connection' backgroundJobId' newState' expectedStates
Long Parameter List,Hangfire.States,StateChangeContext,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\States\StateChangeContext.cs,StateChangeContext,The method has 6 parameters. Parameters: storage' connection' backgroundJobId' newState' expectedStates' cancellationToken
Long Identifier,Hangfire,StackTraceFormatter,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\App_Packages\StackTraceFormatter\StackTraceFormatter.cs,,The length of the parameter DefaultStackTraceHtmlFragments is 30.
Long Statement,Hangfire.Logging,SerilogLogProvider,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\App_Packages\LibLog.1.4\LibLog.cs,GetForContextMethodCall,The length of the statement  "            MethodInfo method = logManagerType.GetRuntimeMethod("ForContext"' new[] { typeof(string)' typeof(object)' typeof(bool) }); " is 122.
Long Statement,Hangfire.Logging.LogProviders,SerilogLogProvider,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\App_Packages\LibLog.1.4\LibLog.cs,GetForContextMethodCall,The length of the statement  "            MethodInfo method = logManagerType.GetRuntimeMethod("ForContext"' new[] { typeof(string)' typeof(object)' typeof(bool) }); " is 122.
Long Statement,Hangfire,AutomaticRetryAttribute,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\AutomaticRetryAttribute.cs,ScheduleAgainLater,The length of the statement  "                    $"Failed to process the job '{context.BackgroundJob.Id}': an exception occurred. Retry attempt {retryAttempt} of {Attempts} will be performed in {delay}."' " is 155.
Long Statement,Hangfire,AutomaticRetryAttribute,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\AutomaticRetryAttribute.cs,TransitionToDeleted,The length of the statement  "                    $"Failed to process the job '{context.BackgroundJob.Id}': an exception occured. Job was automatically deleted because the retry attempt count exceeded {Attempts}."' " is 164.
Long Statement,Hangfire,ContinuationsSupportAttribute,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\ContinuationsSupportAttribute.cs,GetContinuaionState,The length of the statement  "                        $"Can not start continuation '{continuationJobId}' for background job '{context.BackgroundJob.Id}': continuation does not exist."); " is 131.
Long Statement,Hangfire,ContinuationsSupportAttribute,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\ContinuationsSupportAttribute.cs,GetContinuaionState,The length of the statement  "                        $"Continuation '{continuationJobId}' has been ignored: it was deemed to be aborted' because its state is still non-initialized."); " is 130.
Long Statement,Hangfire,ContinuationsSupportAttribute,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\ContinuationsSupportAttribute.cs,GetContinuaionState,The length of the statement  "                        $"Can not start continuation '{continuationJobId}' for background job '{context.BackgroundJob.Id}': timeout expired while trying to fetch continuation state."); " is 160.
Long Statement,Hangfire,LatencyTimeoutAttribute,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\LatencyTimeoutAttribute.cs,OnStateElection,The length of the statement  "                    () => $"Background job '{context.BackgroundJob.Id}' has exceeded latency timeout of {_timeoutInSeconds} second(s) and will be deleted"); " is 136.
Long Statement,Hangfire,RecurringJobManager,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\RecurringJobManager.cs,ValidateCronExpression,The length of the statement  "                throw new ArgumentException("CRON expression is invalid. Please see the inner exception for details."' nameof(cronExpression)' ex); " is 131.
Long Statement,Hangfire.Common,Job,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Common\Job.cs,Validate,The length of the statement  "                        "Output parameters are not supported: there is no guarantee that specified method will be invoked inside the same process."); " is 125.
Long Statement,Hangfire.Common,Job,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Common\Job.cs,Validate,The length of the statement  "                        "Parameters' passed by reference' are not supported: there is no guarantee that specified method will be invoked inside the same process."); " is 140.
Long Statement,Hangfire.Common,Job,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Common\Job.cs,Validate,The length of the statement  "                        "Anonymous functions' delegates and lambda expressions aren't supported in job method parameters: it's very hard to serialize them and all their scope in general."); " is 165.
Long Statement,Hangfire.Common,ReflectedAttributeCache,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Common\ReflectedAttributeCache.cs,GetAttributes,The length of the statement  "            return lookup.GetOrAdd(memberInfo' mi => new ReadOnlyCollection<TAttribute>((TAttribute[])memberInfo.GetCustomAttributes(typeof(TAttribute)' inherit: true))); " is 158.
Long Statement,Hangfire.Common,TypeExtensions,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Common\TypeExtensions.cs,TypesMatchRecursive,The length of the statement  "                    if (!TypesMatchRecursive(parameterGenericArgument.GetTypeInfo()' actualGenericArgument.GetTypeInfo()' genericArguments)) " is 120.
Long Statement,Hangfire.Common,TypeExtensions,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Common\TypeExtensions.cs,ReplaceGenericParametersInGenericTypeName,The length of the statement  "                var currentArguments = string.Join("'"' genericArguments.Take(currentGenericArgumentNumbers).Select(ToGenericTypeString)); " is 122.
Long Statement,Hangfire.Common.ExpressionUtil,Compiler<TIn;TOut>,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Common\ExpressionUtil\CachedExpressionCompiler.cs,CompileFromFingerprint,The length of the statement  "                ExpressionFingerprintChain fingerprint = FingerprintingExpressionVisitor.GetFingerprintChain(expr' out capturedConstants); " is 122.
Long Statement,Hangfire.Common.ExpressionUtil,HoistingExpressionVisitor<TIn;TOut>,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Common\ExpressionUtil\HoistingExpressionVisitor.cs,Hoist,The length of the statement  "            var rewrittenLambdaExpr = Expression.Lambda<Hoisted<TIn' TOut>>(rewrittenBodyExpr' expr.Parameters[0]' _hoistedConstantsParamExpr); " is 131.
Long Statement,Hangfire.Common.ExpressionUtil,HoistingExpressionVisitor<TIn;TOut>,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Common\ExpressionUtil\HoistingExpressionVisitor.cs,VisitConstant,The length of the statement  "            return Expression.Convert(Expression.Property(_hoistedConstantsParamExpr' "Item"' Expression.Constant(_numConstantsProcessed++))' node.Type); " is 141.
Long Statement,Hangfire.Dashboard,HtmlHelper,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\HtmlHelper.cs,StateLabel,The length of the statement  "            return Raw($"<span class=\"label label-default\" style=\"background-color: {JobHistoryRenderer.GetForegroundStateColor(stateName)};\">{stateName}</span>"); " is 155.
Long Statement,Hangfire.Dashboard,JobHistoryRenderer,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\JobHistoryRenderer.cs,FailedRenderer,The length of the statement  "                $"<h4 class=\"exception-type\">{stateData["ExceptionType"]}</h4><p class=\"text-muted\">{stateData["ExceptionMessage"]}</p>{"<pre class=\"stack-trace\">" + stackTrace + "</pre>"}"); " is 181.
Long Statement,Hangfire.Dashboard,JobHistoryRenderer,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\JobHistoryRenderer.cs,ScheduledRenderer,The length of the statement  "                $"<dl class=\"dl-horizontal\"><dt>Enqueue at:</dt><dd data-moment=\"{JobHelper.ToTimestamp(enqueueAt)}\">{enqueueAt}</dd></dl>"); " is 129.
Long Statement,Hangfire.Dashboard.Pages,AwaitingJobsPage,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\Pages\AwaitingJobsPage.generated.cs,Execute,The length of the statement  "                                             if (stateData != null && stateData.Data.ContainsKey("Options") && !String.IsNullOrWhiteSpace(stateData.Data["Options"])) " is 120.
Long Statement,Hangfire.Dashboard.Pages,JobDetailsPage,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\Pages\JobDetailsPage.cs,Execute,The length of the statement  "                   Write(Html.Raw(String.Format(Strings.JobDetailsPage_JobAbortedNotActive_Warning_Html' currentState.Data["ServerId"]' Url.To("/servers")))); " is 139.
Long Statement,Hangfire.Dashboard.Pages,JobDetailsPage,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\Pages\JobDetailsPage.cs,Execute,The length of the statement  "               Write(Html.Raw(String.Format(Strings.JobDetailsPage_JobFinished_Warning_Html' JobHelper.ToTimestamp(job.ExpireAt.Value)' job.ExpireAt))); " is 137.
Long Statement,Hangfire.Dashboard.Pages,RecurringJobsPage,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\Pages\RecurringJobsPage.generated.cs,Execute,The length of the statement  "                                                cronDescription = string.IsNullOrEmpty(job.Cron) ? null : CronExpressionDescriptor.ExpressionDescriptor.GetDescription(job.Cron); " is 129.
Long Statement,Hangfire.Server,AutomaticRetryProcess,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Server\AutomaticRetryProcess.cs,Execute,The length of the statement  "                        () => $"Error occurred during execution of '{_innerProcess}' process. Execution will be retried (attempt #{i + 1}) in {nextTry} seconds."' " is 138.
Long Statement,Hangfire.Server,DelayedJobScheduler,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Server\DelayedJobScheduler.cs,UseConnectionDistributedLock,The length of the statement  "                    $@"An exception was thrown during acquiring distributed lock on the {resource} resource within {DefaultLockTimeout.TotalSeconds} seconds. The scheduled jobs have not been handled this time. " is 189.
Long Statement,Hangfire.Server,RecurringJobScheduler,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Server\RecurringJobScheduler.cs,TryScheduleJob,The length of the statement  "                changedFields.Add("NextExecution"' nowInstant.NextInstant.HasValue ? JobHelper.SerializeDateTime(nowInstant.NextInstant.Value) : null); " is 135.
Long Statement,Hangfire.Server,RecurringJobScheduler,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Server\RecurringJobScheduler.cs,UseConnectionDistributedLock,The length of the statement  "                    () => $@"An exception was thrown during acquiring distributed lock the {resource} resource within {LockTimeout.TotalSeconds} seconds. The recurring jobs have not been handled this time."' " is 187.
Long Statement,Hangfire.Server,ServerProcessExtensions,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Server\ServerProcessExtensions.cs,Execute,The length of the statement  "                throw new ArgumentOutOfRangeException(nameof(process)' "Long-running process must be of type IServerComponent or IBackgroundProcess."); " is 135.
Long Statement,Hangfire.Server,ServerProcessExtensions,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Server\ServerProcessExtensions.cs,CreateTask,The length of the statement  "                throw new ArgumentOutOfRangeException(nameof(process)' "Long-running process must be of type IServerComponent or IBackgroundProcess."); " is 135.
Long Statement,Hangfire.Server,Worker,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Server\Worker.cs,Requeue,The length of the statement  "                Logger.WarnException($"Failed to immediately re-queue the background job '{fetchedJob.JobId}'. Next invocation may be delayed' if invisibility timeout is used"' ex); " is 165.
Long Statement,Hangfire.Server,Worker,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Server\Worker.cs,PerformJob,The length of the statement  "                var jobToken = new ServerJobCancellationToken(connection' jobId' context.ServerId' _workerId' context.CancellationToken); " is 121.
Long Statement,Hangfire.States,AwaitingState,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\States\AwaitingState.cs,SerializeData,The length of the statement  "                { "NextState"' JsonConvert.SerializeObject(NextState' Formatting.None' new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.Objects }) }' " is 149.
Long Statement,Hangfire.States,BackgroundJobStateChanger,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\States\BackgroundJobStateChanger.cs,ChangeState,The length of the statement  "                if (context.ExpectedStates != null && !context.ExpectedStates.Contains(jobData.State' StringComparer.OrdinalIgnoreCase)) " is 120.
Long Statement,Hangfire.States,BackgroundJobStateChanger,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\States\BackgroundJobStateChanger.cs,ChangeState,The length of the statement  "                Reason = $"Failed to change state to a '{toState.Name}' one due to an exception after {MaxStateChangeAttempts} retry attempts" " is 126.
Long Statement,Hangfire.States,StateHandlerCollection,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\States\StateHandlerCollection.cs,AddHandler,The length of the statement  "            if (handler.StateName == null) throw new ArgumentException("The StateName property of the given state handler must be non null."' nameof(handler)); " is 147.
Long Statement,Hangfire.Storage,InvocationData,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Storage\InvocationData.cs,Deserialize,The length of the statement  "                        $"The type `{type.FullName}` does not contain a method with signature `{Method}({String.Join("' "' parameterTypes.Select(x => x.Name))})`"); " is 140.
Complex Conditional,Hangfire.Common,JobFilterCollection,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Common\JobFilterCollection.cs,ValidateFilterInstance,The conditional expression  "instance != null &&                  !(instance is IClientFilter                   || instance is IServerFilter                   || instance is IClientExceptionFilter                   || instance is IServerExceptionFilter                  || instance is IApplyStateFilter                  || instance is IElectStateFilter)"  is complex.
Virtual Method Call from Constructor,Hangfire,BackgroundJobServer,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\BackgroundJobServer.cs,BackgroundJobServer,The constructor "BackgroundJobServer" calls a virtual method "WriteOptionsToLog".
Virtual Method Call from Constructor,Hangfire.Server,BackgroundProcessingServer,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Server\BackgroundProcessingServer.cs,BackgroundProcessingServer,The constructor "BackgroundProcessingServer" calls a virtual method "GetComponents".
Empty Catch Block,Hangfire.Server,ServerProcessExtensions,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Server\ServerProcessExtensions.cs,TrySetThreadName,The method has an empty catch block.
Magic Number,Hangfire.Logging,ColouredConsoleLogProvider,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\App_Packages\LibLog.1.4\LibLog.cs,DefaultMessageFormatter,The following statement contains a magic number: stringBuilder.Append(("[" + level.ToString().ToUpper() + "]").PadRight(8));
Magic Number,Hangfire.Logging.LogProviders,ColouredConsoleLogProvider,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\App_Packages\LibLog.1.4\LibLog.cs,DefaultMessageFormatter,The following statement contains a magic number: stringBuilder.Append(("[" + level.ToString().ToUpper() + "]").PadRight(8));
Magic Number,NCrontab,CrontabFieldImpl,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\App_Packages\NCrontab\CrontabFieldImpl.cs,FormatValue,The following statement contains a magic number: if (noNames || _names == null)              {                  if (value >= 0 && value < 100)                  {                      FastFormatNumericValue(value' writer);                  }                  else                  {                      writer.Write(value.ToString(CultureInfo.InvariantCulture));                  }              }              else              {                  var index = value - MinValue;                  writer.Write(_names[index]);              }
Magic Number,NCrontab,CrontabFieldImpl,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\App_Packages\NCrontab\CrontabFieldImpl.cs,FastFormatNumericValue,The following statement contains a magic number: Debug.Assert(value >= 0 && value < 100);
Magic Number,NCrontab,CrontabFieldImpl,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\App_Packages\NCrontab\CrontabFieldImpl.cs,FastFormatNumericValue,The following statement contains a magic number: if (value >= 10)              {                  writer.Write((char)('0' + (value / 10)));                  writer.Write((char)('0' + (value % 10)));              }              else              {                  writer.Write((char)('0' + value));              }
Magic Number,NCrontab,CrontabFieldImpl,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\App_Packages\NCrontab\CrontabFieldImpl.cs,FastFormatNumericValue,The following statement contains a magic number: if (value >= 10)              {                  writer.Write((char)('0' + (value / 10)));                  writer.Write((char)('0' + (value % 10)));              }              else              {                  writer.Write((char)('0' + value));              }
Magic Number,NCrontab,CrontabFieldImpl,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\App_Packages\NCrontab\CrontabFieldImpl.cs,FastFormatNumericValue,The following statement contains a magic number: if (value >= 10)              {                  writer.Write((char)('0' + (value / 10)));                  writer.Write((char)('0' + (value % 10)));              }              else              {                  writer.Write((char)('0' + value));              }
Magic Number,NCrontab,CrontabSchedule,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\App_Packages\NCrontab\CrontabSchedule.cs,TryParse,The following statement contains a magic number: var expectedTokenCount = includingSeconds ? 6 : 5;
Magic Number,NCrontab,CrontabSchedule,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\App_Packages\NCrontab\CrontabSchedule.cs,TryParse,The following statement contains a magic number: var expectedTokenCount = includingSeconds ? 6 : 5;
Magic Number,NCrontab,CrontabSchedule,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\App_Packages\NCrontab\CrontabSchedule.cs,TryParse,The following statement contains a magic number: var fields = new CrontabField[6];
Magic Number,NCrontab,CrontabSchedule,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\App_Packages\NCrontab\CrontabSchedule.cs,TryParse,The following statement contains a magic number: return valueSelector(new CrontabSchedule(fields[0]' fields[1]' fields[2]' fields[3]' fields[4]' fields[5]));
Magic Number,NCrontab,CrontabSchedule,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\App_Packages\NCrontab\CrontabSchedule.cs,TryParse,The following statement contains a magic number: return valueSelector(new CrontabSchedule(fields[0]' fields[1]' fields[2]' fields[3]' fields[4]' fields[5]));
Magic Number,NCrontab,CrontabSchedule,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\App_Packages\NCrontab\CrontabSchedule.cs,TryParse,The following statement contains a magic number: return valueSelector(new CrontabSchedule(fields[0]' fields[1]' fields[2]' fields[3]' fields[4]' fields[5]));
Magic Number,NCrontab,CrontabSchedule,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\App_Packages\NCrontab\CrontabSchedule.cs,TryParse,The following statement contains a magic number: return valueSelector(new CrontabSchedule(fields[0]' fields[1]' fields[2]' fields[3]' fields[4]' fields[5]));
Magic Number,NCrontab,CrontabSchedule,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\App_Packages\NCrontab\CrontabSchedule.cs,GetNextOccurrence,The following statement contains a magic number: if (day > 28 && dateChanged && day > Calendar.GetDaysInMonth(year' month))              {                  if (year >= endYear && month >= endMonth && day >= endDay)                      return endTime;                    day = nil;                  goto RetryDayMonth;              }
Magic Number,NCrontab,CrontabSchedule,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\App_Packages\NCrontab\CrontabSchedule.cs,GetNextOccurrence,The following statement contains a magic number: return GetNextOccurrence(new DateTime(year' month' day' 23' 59' 59' 0' baseTime.Kind)' endTime);
Magic Number,NCrontab,CrontabSchedule,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\App_Packages\NCrontab\CrontabSchedule.cs,GetNextOccurrence,The following statement contains a magic number: return GetNextOccurrence(new DateTime(year' month' day' 23' 59' 59' 0' baseTime.Kind)' endTime);
Magic Number,NCrontab,CrontabSchedule,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\App_Packages\NCrontab\CrontabSchedule.cs,GetNextOccurrence,The following statement contains a magic number: return GetNextOccurrence(new DateTime(year' month' day' 23' 59' 59' 0' baseTime.Kind)' endTime);
Magic Number,Hangfire,AutomaticRetryAttribute,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\AutomaticRetryAttribute.cs,AutomaticRetryAttribute,The following statement contains a magic number: Order = 20;
Magic Number,Hangfire,AutomaticRetryAttribute,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\AutomaticRetryAttribute.cs,ScheduleAgainLater,The following statement contains a magic number: const int maxMessageLength = 50;
Magic Number,Hangfire,AutomaticRetryAttribute,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\AutomaticRetryAttribute.cs,SecondsToDelay,The following statement contains a magic number: return (int)Math.Round(                  Math.Pow(retryCount - 1' 4) + 15 + random.Next(30) * retryCount);
Magic Number,Hangfire,AutomaticRetryAttribute,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\AutomaticRetryAttribute.cs,SecondsToDelay,The following statement contains a magic number: return (int)Math.Round(                  Math.Pow(retryCount - 1' 4) + 15 + random.Next(30) * retryCount);
Magic Number,Hangfire,AutomaticRetryAttribute,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\AutomaticRetryAttribute.cs,SecondsToDelay,The following statement contains a magic number: return (int)Math.Round(                  Math.Pow(retryCount - 1' 4) + 15 + random.Next(30) * retryCount);
Magic Number,Hangfire,BackgroundJobServerOptions,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\BackgroundJobServerOptions.cs,BackgroundJobServerOptions,The following statement contains a magic number: WorkerCount = Math.Min(Environment.ProcessorCount * 5' MaxDefaultWorkerCount);
Magic Number,Hangfire,ContinuationsSupportAttribute,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\ContinuationsSupportAttribute.cs,ContinuationsSupportAttribute,The following statement contains a magic number: Order = 1000;
Magic Number,Hangfire,DashboardOptions,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\DashboardOptions.cs,DashboardOptions,The following statement contains a magic number: StatsPollingInterval = 2000;
Magic Number,Hangfire,StatisticsHistoryAttribute,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\StatisticsHistoryAttribute.cs,StatisticsHistoryAttribute,The following statement contains a magic number: Order = 30;
Magic Number,Hangfire.Client,CoreBackgroundJobFactory,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Client\CoreBackgroundJobFactory.cs,Create,The following statement contains a magic number: var jobId = context.Connection.CreateExpiredJob(                  context.Job'                  parameters'                  createdAt'                  TimeSpan.FromDays(30));
Magic Number,Hangfire.Common.ExpressionUtil,HashCodeCombiner,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Common\ExpressionUtil\HashCodeCombiner.cs,AddInt32,The following statement contains a magic number: _combinedHash64 = ((_combinedHash64 << 5) + _combinedHash64) ^ i;
Magic Number,Hangfire.Dashboard,BatchCommandDispatcher,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\BatchCommandDispatcher.cs,Dispatch,The following statement contains a magic number: if (jobIds.Count == 0)              {                  context.Response.StatusCode = 422;                  return;              }
Magic Number,Hangfire.Dashboard,CommandDispatcher,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\CommandDispatcher.cs,Dispatch,The following statement contains a magic number: if (_command(context))              {                  response.StatusCode = (int)HttpStatusCode.NoContent;              }              else              {                  response.StatusCode = 422;              }
Magic Number,Hangfire.Dashboard,HtmlHelper,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\HtmlHelper.cs,JobId,The following statement contains a magic number: return new NonEscapedString(Guid.TryParse(jobId' out guid)                  ? (shorten ? jobId.Substring(0' 8) + "…" : jobId)                  : $"#{jobId}");
Magic Number,Hangfire.Dashboard,HtmlHelper,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\HtmlHelper.cs,ToHumanDuration,The following statement contains a magic number: if (duration.Value.TotalHours < 1)              {                  if (duration.Value.Seconds > 0)                  {                      builder.Append(duration.Value.Seconds);                      if (duration.Value.Milliseconds > 0)                      {                          builder.Append($".{duration.Value.Milliseconds.ToString().PadLeft(3' '0')}");                      }                        builder.Append("s ");                  }                  else                  {                      if (duration.Value.Milliseconds > 0)                      {                          builder.Append($"{duration.Value.Milliseconds}ms ");                      }                  }              }
Magic Number,Hangfire.Dashboard,JobHistoryRenderer,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\JobHistoryRenderer.cs,ProcessingRenderer,The following statement contains a magic number: if (stateData.ContainsKey("WorkerId"))              {                  builder.Append("<dt>Worker:</dt>");                  builder.Append($"<dd>{stateData["WorkerId"].Substring(0' 8)}</dd>");              }              else if (stateData.ContainsKey("WorkerNumber"))              {                  builder.Append("<dt>Worker:</dt>");                  builder.Append($"<dd>#{stateData["WorkerNumber"]}</dd>");              }
Magic Number,Hangfire.Dashboard,JobMethodCallRenderer,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\JobMethodCallRenderer.cs,Render,The following statement contains a magic number: const int splitStringMinLength = 100;
Magic Number,Hangfire.Dashboard,Pager,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\Pager.cs,GenerateItems,The following statement contains a magic number: _startPageIndex = CurrentPage - PageItemsCount / 2;
Magic Number,Hangfire.Dashboard,Pager,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\Pager.cs,AddMoreBefore,The following statement contains a magic number: if (_startPageIndex > 2)              {                  var index = _startPageIndex - 1;                  if (index < 1) index = 1;                  var item = new Item(index' false' ItemType.MorePage);                  results.Add(item);              }
Magic Number,Hangfire.Dashboard.Pages,PerPageSelector,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\Pages\_PerPageSelector.cs,Execute,The following statement contains a magic number: foreach (var count in new[] { 10' 20' 50' 100' 500 })          {                              #line default              #line hidden  WriteLiteral("            <a class=\"btn btn-sm btn-default ");                                #line 8 "..\..\Dashboard\Pages\_PerPageSelector.cshtml"                                           Write(count == _pager.RecordsPerPage ? "active" : null);                              #line default              #line hidden  WriteLiteral("\" \r\n                   href=\"");                                #line 9 "..\..\Dashboard\Pages\_PerPageSelector.cshtml"                      Write(_pager.RecordsPerPageUrl(count));                              #line default              #line hidden  WriteLiteral("\">");                                #line 9 "..\..\Dashboard\Pages\_PerPageSelector.cshtml"                                                        Write(count);                              #line default              #line hidden  WriteLiteral("</a>    \r\n");                                #line 10 "..\..\Dashboard\Pages\_PerPageSelector.cshtml"          }
Magic Number,Hangfire.Dashboard.Pages,PerPageSelector,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\Pages\_PerPageSelector.cs,Execute,The following statement contains a magic number: foreach (var count in new[] { 10' 20' 50' 100' 500 })          {                              #line default              #line hidden  WriteLiteral("            <a class=\"btn btn-sm btn-default ");                                #line 8 "..\..\Dashboard\Pages\_PerPageSelector.cshtml"                                           Write(count == _pager.RecordsPerPage ? "active" : null);                              #line default              #line hidden  WriteLiteral("\" \r\n                   href=\"");                                #line 9 "..\..\Dashboard\Pages\_PerPageSelector.cshtml"                      Write(_pager.RecordsPerPageUrl(count));                              #line default              #line hidden  WriteLiteral("\">");                                #line 9 "..\..\Dashboard\Pages\_PerPageSelector.cshtml"                                                        Write(count);                              #line default              #line hidden  WriteLiteral("</a>    \r\n");                                #line 10 "..\..\Dashboard\Pages\_PerPageSelector.cshtml"          }
Magic Number,Hangfire.Dashboard.Pages,PerPageSelector,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\Pages\_PerPageSelector.cs,Execute,The following statement contains a magic number: foreach (var count in new[] { 10' 20' 50' 100' 500 })          {                              #line default              #line hidden  WriteLiteral("            <a class=\"btn btn-sm btn-default ");                                #line 8 "..\..\Dashboard\Pages\_PerPageSelector.cshtml"                                           Write(count == _pager.RecordsPerPage ? "active" : null);                              #line default              #line hidden  WriteLiteral("\" \r\n                   href=\"");                                #line 9 "..\..\Dashboard\Pages\_PerPageSelector.cshtml"                      Write(_pager.RecordsPerPageUrl(count));                              #line default              #line hidden  WriteLiteral("\">");                                #line 9 "..\..\Dashboard\Pages\_PerPageSelector.cshtml"                                                        Write(count);                              #line default              #line hidden  WriteLiteral("</a>    \r\n");                                #line 10 "..\..\Dashboard\Pages\_PerPageSelector.cshtml"          }
Magic Number,Hangfire.Dashboard.Pages,PerPageSelector,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\Pages\_PerPageSelector.cs,Execute,The following statement contains a magic number: foreach (var count in new[] { 10' 20' 50' 100' 500 })          {                              #line default              #line hidden  WriteLiteral("            <a class=\"btn btn-sm btn-default ");                                #line 8 "..\..\Dashboard\Pages\_PerPageSelector.cshtml"                                           Write(count == _pager.RecordsPerPage ? "active" : null);                              #line default              #line hidden  WriteLiteral("\" \r\n                   href=\"");                                #line 9 "..\..\Dashboard\Pages\_PerPageSelector.cshtml"                      Write(_pager.RecordsPerPageUrl(count));                              #line default              #line hidden  WriteLiteral("\">");                                #line 9 "..\..\Dashboard\Pages\_PerPageSelector.cshtml"                                                        Write(count);                              #line default              #line hidden  WriteLiteral("</a>    \r\n");                                #line 10 "..\..\Dashboard\Pages\_PerPageSelector.cshtml"          }
Magic Number,Hangfire.Dashboard.Pages,PerPageSelector,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\Pages\_PerPageSelector.cs,Execute,The following statement contains a magic number: foreach (var count in new[] { 10' 20' 50' 100' 500 })          {                              #line default              #line hidden  WriteLiteral("            <a class=\"btn btn-sm btn-default ");                                #line 8 "..\..\Dashboard\Pages\_PerPageSelector.cshtml"                                           Write(count == _pager.RecordsPerPage ? "active" : null);                              #line default              #line hidden  WriteLiteral("\" \r\n                   href=\"");                                #line 9 "..\..\Dashboard\Pages\_PerPageSelector.cshtml"                      Write(_pager.RecordsPerPageUrl(count));                              #line default              #line hidden  WriteLiteral("\">");                                #line 9 "..\..\Dashboard\Pages\_PerPageSelector.cshtml"                                                        Write(count);                              #line default              #line hidden  WriteLiteral("</a>    \r\n");                                #line 10 "..\..\Dashboard\Pages\_PerPageSelector.cshtml"          }
Magic Number,Hangfire.Server,AutomaticRetryProcess,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Server\AutomaticRetryProcess.cs,GetLogLevel,The following statement contains a magic number: switch (i)              {                  case 0:                      return LogLevel.Debug;                  case 1:                      return LogLevel.Info;                  case 2:                      return LogLevel.Warn;              }
Magic Number,Hangfire.Server,AutomaticRetryProcess,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Server\AutomaticRetryProcess.cs,GetBackOffMultiplier,The following statement contains a magic number: var nextTry = rand.Next(                  (int)Math.Pow(retryAttemptNumber' 2)' (int)Math.Pow(retryAttemptNumber + 1' 2) + 1);
Magic Number,Hangfire.Server,AutomaticRetryProcess,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Server\AutomaticRetryProcess.cs,GetBackOffMultiplier,The following statement contains a magic number: var nextTry = rand.Next(                  (int)Math.Pow(retryAttemptNumber' 2)' (int)Math.Pow(retryAttemptNumber + 1' 2) + 1);
Magic Number,Hangfire.Server,Worker,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Server\Worker.cs,ToString,The following statement contains a magic number: return $"{GetType().Name} #{_workerId.Substring(0' 8)}";
Magic Number,Hangfire.States,BackgroundJobStateChanger,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\States\BackgroundJobStateChanger.cs,GetJobData,The following statement contains a magic number: while (true)              {                  var jobData = context.Connection.GetJobData(context.BackgroundJobId);                  if (!String.IsNullOrEmpty(jobData?.State))                  {                      return jobData;                  }                    if (context.CancellationToken.IsCancellationRequested ||                      context.CancellationToken == CancellationToken.None)                  {                      return null;                  }                    Thread.Sleep(firstAttempt ? 0 : 100);                  firstAttempt = false;              }
Missing Default,Hangfire.Dashboard,ArgumentRenderer,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\JobMethodCallRenderer.cs,IsNumericType,The following switch statement is missing a default case: switch (type.GetTypeCode())                  {                      case TypeCode.Byte:                      case TypeCode.Decimal:                      case TypeCode.Double:                      case TypeCode.Int16:                      case TypeCode.Int32:                      case TypeCode.Int64:                      case TypeCode.SByte:                      case TypeCode.Single:                      case TypeCode.UInt16:                      case TypeCode.UInt32:                      case TypeCode.UInt64:                          return true;                        case TypeCode.Object:                          if (IsNullableType(type))                          {                              return IsNumericType(Nullable.GetUnderlyingType(type));                          }                          return false;                  }
Missing Default,Hangfire.Dashboard.Pages,Paginator,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Dashboard\Pages\_Paginator.cs,Execute,The following switch statement is missing a default case: switch (page.Type)                  {                      case Pager.ItemType.Page:                              #line default              #line hidden  WriteLiteral("                        <a href=\"");                                #line 15 "..\..\Dashboard\Pages\_Paginator.cshtml"                              Write(_pager.PageUrl(page.PageIndex));                              #line default              #line hidden  WriteLiteral("\" class=\"btn btn-default ");                                #line 15 "..\..\Dashboard\Pages\_Paginator.cshtml"                                                                                       Write(_pager.CurrentPage == page.PageIndex ? "active" : null);                              #line default              #line hidden  WriteLiteral("\">\r\n                            ");                                #line 16 "..\..\Dashboard\Pages\_Paginator.cshtml"                         Write(page.PageIndex);                              #line default              #line hidden  WriteLiteral("  \r\n                        </a>\r\n");                                #line 18 "..\..\Dashboard\Pages\_Paginator.cshtml"                          break;                      case Pager.ItemType.NextPage:                              #line default              #line hidden  WriteLiteral("                        <a href=\"");                                #line 20 "..\..\Dashboard\Pages\_Paginator.cshtml"                              Write(_pager.PageUrl(page.PageIndex));                              #line default              #line hidden  WriteLiteral("\" class=\"btn btn-default ");                                #line 20 "..\..\Dashboard\Pages\_Paginator.cshtml"                                                                                       Write(page.Disabled ? "disabled" : null);                              #line default              #line hidden  WriteLiteral("\">\r\n                            ");                                #line 21 "..\..\Dashboard\Pages\_Paginator.cshtml"                         Write(Strings.Paginator_Next);                              #line default              #line hidden  WriteLiteral("\r\n                        </a>\r\n");                                #line 23 "..\..\Dashboard\Pages\_Paginator.cshtml"                          break;                      case Pager.ItemType.PrevPage:                              #line default              #line hidden  WriteLiteral("                        <a href=\"");                                #line 25 "..\..\Dashboard\Pages\_Paginator.cshtml"                              Write(_pager.PageUrl(page.PageIndex));                              #line default              #line hidden  WriteLiteral("\" class=\"btn btn-default ");                                #line 25 "..\..\Dashboard\Pages\_Paginator.cshtml"                                                                                       Write(page.Disabled ? "disabled" : null);                              #line default              #line hidden  WriteLiteral("\">\r\n                            ");                                #line 26 "..\..\Dashboard\Pages\_Paginator.cshtml"                         Write(Strings.Paginator_Prev);                              #line default              #line hidden  WriteLiteral("\r\n                        </a>\r\n");                                #line 28 "..\..\Dashboard\Pages\_Paginator.cshtml"                          break;                      case Pager.ItemType.MorePage:                              #line default              #line hidden  WriteLiteral("                        <a href=\"#\" class=\"btn btn-default disabled\">\r\n          " +  "                  …\r\n                        </a>\r\n");                                #line 33 "..\..\Dashboard\Pages\_Paginator.cshtml"                          break;                  }
Missing Default,Hangfire.Server,AutomaticRetryProcess,C:\repos\HangfireIO_Hangfire\src\Hangfire.Core\Server\AutomaticRetryProcess.cs,GetLogLevel,The following switch statement is missing a default case: switch (i)              {                  case 0:                      return LogLevel.Debug;                  case 1:                      return LogLevel.Info;                  case 2:                      return LogLevel.Warn;              }
