Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Hangfire.SqlServer,SqlServerMonitoringApi,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerMonitoringApi.cs,GetJobs,The method has 5 parameters. Parameters: connection' from' count' stateName' selector
Long Parameter List,Hangfire.SqlServer,SqlServerTimeoutJob,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerTimeoutJob.cs,SqlServerTimeoutJob,The method has 5 parameters. Parameters: storage' id' jobId' queue' fetchedAt
Long Parameter List,Hangfire.SqlServer,SqlServerTransactionJob,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerTransactionJob.cs,SqlServerTransactionJob,The method has 5 parameters. Parameters: storage' connection' transaction' jobId' queue
Long Statement,Hangfire.SqlServer,CountersAggregator,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\CountersAggregator.cs,GetAggregationQuery,The length of the statement  "	[Target].[ExpireAt] = (SELECT MAX([ExpireAt]) FROM (VALUES ([Source].ExpireAt)' ([Target].[ExpireAt])) AS MaxExpireAt([ExpireAt])) " is 130.
Long Statement,Hangfire.SqlServer,CountersAggregator,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\CountersAggregator.cs,GetAggregationQuery,The length of the statement  "WHEN NOT MATCHED THEN INSERT ([Key]' [Value]' [ExpireAt]) VALUES ([Source].[Key]' [Source].[Value]' [Source].[ExpireAt]); " is 121.
Long Statement,Hangfire.SqlServer,ExpirationManager,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\ExpirationManager.cs,UseConnectionDistributedLock,The length of the statement  "                    () => $@"An exception was thrown during acquiring distributed lock on the {DistributedLockKey} resource within {DefaultLockTimeout.TotalSeconds} seconds. Outdated records were not removed. " is 188.
Long Statement,Hangfire.SqlServer,SqlServerConnection,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,FetchNextJob,The length of the statement  "                    $"Multiple provider instances registered for queues: {String.Join("' "' queues)}. You should choose only one type of persistent queues per server instance."); " is 158.
Long Statement,Hangfire.SqlServer,SqlServerConnection,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,CreateExpiredJob,The length of the statement  "insert into [{_storage.SchemaName}].Job (InvocationData' Arguments' CreatedAt' ExpireAt) values (@invocationData' @arguments' @createdAt' @expireAt); " is 149.
Long Statement,Hangfire.SqlServer,SqlServerConnection,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,CreateExpiredJob,The length of the statement  "insert into [{_storage.SchemaName}].Job (InvocationData' Arguments' CreatedAt' ExpireAt) values (@invocationData' @arguments' @createdAt' @expireAt); " is 149.
Long Statement,Hangfire.SqlServer,SqlServerConnection,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,CreateExpiredJob,The length of the statement  "insert into [{_storage.SchemaName}].JobParameter (JobId' Name' Value) values (@jobId' @name1' @value1)' (@jobId' @name2' @value2); " is 130.
Long Statement,Hangfire.SqlServer,SqlServerConnection,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,CreateExpiredJob,The length of the statement  "                using (var commandBatch = new SqlCommandBatch(connection' transaction' preferBatching: _storage.CommandBatchMaxTimeout.HasValue)) " is 129.
Long Statement,Hangfire.SqlServer,SqlServerConnection,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,GetJobData,The length of the statement  "$@"select InvocationData' StateName' Arguments' CreatedAt from [{_storage.SchemaName}].Job with (readcommittedlock' forceseek) where Id = @id"; " is 143.
Long Statement,Hangfire.SqlServer,SqlServerConnection,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,GetStateData,The length of the statement  "                var sqlState = connection.Query<SqlState>(sql' new { jobId = long.Parse(jobId) }' commandTimeout: _storage.CommandTimeout).SingleOrDefault(); " is 141.
Long Statement,Hangfire.SqlServer,SqlServerConnection,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,GetJobParameter,The length of the statement  "                $@"select top (1) Value from [{_storage.SchemaName}].JobParameter with (readcommittedlock' forceseek) where JobId = @id and Name = @name"' " is 138.
Long Statement,Hangfire.SqlServer,SqlServerConnection,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,GetFirstByLowestScoreFromSet,The length of the statement  "            if (toScore < fromScore) throw new ArgumentException("The `toScore` value must be higher or equal to the `fromScore` value."' nameof(toScore)); " is 143.
Long Statement,Hangfire.SqlServer,SqlServerConnection,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,GetFirstByLowestScoreFromSet,The length of the statement  "                    $@"select top (@count) Value from [{_storage.SchemaName}].[Set] with (readcommittedlock' forceseek) where [Key] = @key and Score between @from and @to order by Score"' " is 167.
Long Statement,Hangfire.SqlServer,SqlServerConnection,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,SetRangeInHash,The length of the statement  "                using (var commandBatch = new SqlCommandBatch(connection' transaction' preferBatching: _storage.CommandBatchMaxTimeout.HasValue)) " is 129.
Long Statement,Hangfire.SqlServer,SqlServerConnection,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,SetRangeInHash,The length of the statement  "                            "SET XACT_ABORT ON;exec sp_getapplock @Resource=@resource' @LockMode=N'Exclusive'' @LockOwner=N'Transaction'' @LockTimeout=-1;"' " is 128.
Long Statement,Hangfire.SqlServer,SqlServerConnection,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,GetRangeFromSet,The length of the statement  "                .Query<string>(query' new { key = key' startingFrom = startingFrom + 1' endingAt = endingAt + 1 }' commandTimeout: _storage.CommandTimeout) " is 139.
Long Statement,Hangfire.SqlServer,SqlServerConnection,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,GetSetTtl,The length of the statement  "            string query = $@"select min([ExpireAt]) from [{_storage.SchemaName}].[Set] with (readcommittedlock' forceseek) where [Key] = @key"; " is 132.
Long Statement,Hangfire.SqlServer,SqlServerConnection,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,GetCounter,The length of the statement  "$@"select sum(s.[Value]) from (select sum([Value]) as [Value] from [{_storage.SchemaName}].Counter with (readcommittedlock' forceseek) " is 134.
Long Statement,Hangfire.SqlServer,SqlServerConnection,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,GetHashCount,The length of the statement  "            string query = $@"select count(*) from [{_storage.SchemaName}].Hash with (readcommittedlock' forceseek) where [Key] = @key"; " is 124.
Long Statement,Hangfire.SqlServer,SqlServerConnection,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,GetHashTtl,The length of the statement  "            string query = $@"select min([ExpireAt]) from [{_storage.SchemaName}].Hash with (readcommittedlock' forceseek) where [Key] = @key"; " is 131.
Long Statement,Hangfire.SqlServer,SqlServerConnection,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,GetRangeFromList,The length of the statement  "                .Query<string>(query' new { key = key' startingFrom = startingFrom + 1' endingAt = endingAt + 1 }' commandTimeout: _storage.CommandTimeout) " is 139.
Long Statement,Hangfire.SqlServer,SqlServerConnection,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,GetAllItemsFromList,The length of the statement  "            return _storage.UseConnection(_dedicatedConnection' connection => connection.Query<string>(query' new { key = key }' commandTimeout: _storage.CommandTimeout).ToList()); " is 168.
Long Statement,Hangfire.SqlServer,SqlServerDistributedLock,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerDistributedLock.cs,Acquire,The length of the statement  "                        $"Could not place a lock on the resource '{resource}': {(LockErrorMessages.ContainsKey(lockResult) ? LockErrorMessages[lockResult] : $"Server returned the '{lockResult}' error.")}."); " is 183.
Long Statement,Hangfire.SqlServer,SqlServerJobQueue,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerJobQueue.cs,DequeueUsingSlidingInvisibilityTimeout,The length of the statement  "                                    return new SqlServerTimeoutJob(_storage' fetchedJob.Id' fetchedJob.JobId.ToString(CultureInfo.InvariantCulture)' fetchedJob.Queue' fetchedJob.FetchedAt.Value); " is 159.
Long Statement,Hangfire.SqlServer,SqlServerJobQueue,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerJobQueue.cs,DequeueUsingSlidingInvisibilityTimeout,The length of the statement  "                        throw new InvalidOperationException($"A call to sp_getapplock returned unexpected result '{lockResult.Value}' while fetching a job. Please report this problem to Hangfire developers and don't use sub-second values for the QueuePollInterval option."); " is 250.
Long Statement,Hangfire.SqlServer,SqlServerJobQueue,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerJobQueue.cs,GetBlockingFetchSql,The length of the statement  "EXEC @result = sp_getapplock @Resource = @lockResource' @LockMode = 'Exclusive'' @LockTimeout = @pollingQuantumMs' @LockOwner = 'Session'; " is 138.
Long Statement,Hangfire.SqlServer,SqlServerJobQueue,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerJobQueue.cs,GetBlockingFetchSql,The length of the statement  "SELECT 0 AS [Id]' CAST(0 AS BIGINT) AS [JobId]' CAST(NULL AS NVARCHAR) as [Queue]' CAST(NULL AS DATETIME) as [FetchedAt];"; " is 123.
Long Statement,Hangfire.SqlServer,SqlServerMonitoringApi,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerMonitoringApi.cs,GetNumberOfJobsByStateName,The length of the statement  "                ? $@"select count(j.Id) from (select top (@limit) Id from [{_storage.SchemaName}].Job with (nolock' forceseek) where StateName = @state) as j" " is 142.
Long Statement,Hangfire.SqlServer,SqlServerStorage,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerStorage.cs,WriteOptionsToLog,The length of the statement  "            logger.Info($"Using the following options for SQL Server job storage: Queue poll interval: {_options.QueuePollInterval}."); " is 123.
Long Statement,Hangfire.SqlServer,SqlServerStorage,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerStorage.cs,Initialize,The length of the statement  "                        log.WarnException("An exception occurred while trying to perform the migration." + (i < RetryAttempts - 1 ? " Retrying..." : "")' ex); " is 134.
Long Statement,Hangfire.SqlServer,SqlServerStorage,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerStorage.cs,Initialize,The length of the statement  "                    log.WarnException("Was unable to perform the Hangfire schema migration due to an exception. Ignore this message unless you've just installed or upgraded Hangfire."' lastException); " is 180.
Long Statement,Hangfire.SqlServer,SqlServerTimeoutJob,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerTimeoutJob.cs,RemoveFromQueue,The length of the statement  "                        $"delete JQ from [{_storage.SchemaName}].JobQueue JQ with ({GetTableHints()}) where Queue = @queue and Id = @id and FetchedAt = @fetchedAt"' " is 140.
Long Statement,Hangfire.SqlServer,SqlServerTimeoutJob,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerTimeoutJob.cs,Requeue,The length of the statement  "                        $"update JQ set FetchedAt = null from [{_storage.SchemaName}].JobQueue JQ with ({GetTableHints()}) where Queue = @queue and Id = @id and FetchedAt = @fetchedAt"' " is 161.
Long Statement,Hangfire.SqlServer,SqlServerTimeoutJob,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerTimeoutJob.cs,ExecuteKeepAliveQuery,The length of the statement  "                            $"update JQ set FetchedAt = getutcdate() output INSERTED.FetchedAt from [{_storage.SchemaName}].JobQueue JQ with ({GetTableHints()}) where Queue = @queue and Id = @id and FetchedAt = @fetchedAt"' " is 195.
Long Statement,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,Commit,The length of the statement  "                using (var commandBatch = new SqlCommandBatch(connection' transaction' preferBatching: _storage.CommandBatchMaxTimeout.HasValue)) " is 129.
Long Statement,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,SetJobState,The length of the statement  "                new SqlCommandBatchParameter("@reason"' DbType.String' 100) { Value = (object)state.Reason?.Substring(0' Math.Min(99' state.Reason.Length)) ?? DBNull.Value }' " is 158.
Long Statement,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,SetJobState,The length of the statement  "                new SqlCommandBatchParameter("@data"' DbType.String' -1) { Value = (object)SerializationHelper.Serialize(state.SerializeData()) ?? DBNull.Value }); " is 147.
Long Statement,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,AddJobState,The length of the statement  "                new SqlCommandBatchParameter("@reason"' DbType.String' 100) { Value = (object)state.Reason?.Substring(0' Math.Min(99' state.Reason.Length)) ?? DBNull.Value }' " is 158.
Long Statement,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,AddJobState,The length of the statement  "                new SqlCommandBatchParameter("@data"' DbType.String' -1) { Value = (object)SerializationHelper.Serialize(state.SerializeData()) ?? DBNull.Value }); " is 147.
Complex Conditional,Hangfire.SqlServer,SqlServerConnection,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,ReleaseLock,The conditional expression  "_lockedResources[resource].Remove(lockId) &&                              _lockedResources[resource].Count == 0 &&                              _lockedResources.Remove(resource) &&                              _dedicatedConnection.State == ConnectionState.Open"  is complex.
Complex Conditional,Hangfire.SqlServer,SqlServerJobQueue,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerJobQueue.cs,DequeueUsingSlidingInvisibilityTimeout,The conditional expression  "fetchedJob != null && !(fetchedJob.Id == 0 && fetchedJob.JobId == 0 && fetchedJob.Queue == null)"  is complex.
Empty Catch Block,Hangfire.SqlServer,SqlServerDistributedLock,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerDistributedLock.cs,ExecuteKeepAliveQuery,The method has an empty catch block.
Empty Catch Block,Hangfire.SqlServer,SqlServerTransactionJob,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerTransactionJob.cs,ExecuteKeepAliveQuery,The method has an empty catch block.
Magic Number,Hangfire.SqlServer,SqlServerConnection,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,CreateExpiredJob,The following statement contains a magic number: queryParameters.Add("@name"' parametersArray[0].Key' DbType.String' size: 40);
Magic Number,Hangfire.SqlServer,SqlServerConnection,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,CreateExpiredJob,The following statement contains a magic number: parametersArray.Length <= 2
Magic Number,Hangfire.SqlServer,SqlServerConnection,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,CreateExpiredJob,The following statement contains a magic number: return _storage.UseTransaction(_dedicatedConnection' (connection' transaction) =>              {                  var jobId = connection.ExecuteScalar<long>(                      queryString'                      queryParameters'                      transaction'                      commandTimeout: _storage.CommandTimeout).ToString();                    var insertParameterSql =  $@"insert into [{_storage.SchemaName}].JobParameter (JobId' Name' Value) values (@jobId' @name' @value)";                    using (var commandBatch = new SqlCommandBatch(connection' transaction' preferBatching: _storage.CommandBatchMaxTimeout.HasValue))                  {                      commandBatch.CommandTimeout = _storage.CommandTimeout;                      commandBatch.CommandBatchMaxTimeout = _storage.CommandBatchMaxTimeout;                        foreach (var parameter in parametersArray)                      {                          commandBatch.Append(insertParameterSql'                              new SqlCommandBatchParameter("@jobId"' DbType.Int64) { Value = long.Parse(jobId) }'                              new SqlCommandBatchParameter("@name"'DbType.String' 40) { Value = parameter.Key }'                              new SqlCommandBatchParameter("@value"' DbType.String' -1) { Value = (object)parameter.Value ?? DBNull.Value });                      }                        commandBatch.ExecuteNonQuery();                  }                    return jobId;              }' null);
Magic Number,Hangfire.SqlServer,SqlServerConnection,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,SetRangeInHash,The following statement contains a magic number: _storage.UseTransaction(_dedicatedConnection' (connection' transaction) =>              {                  using (var commandBatch = new SqlCommandBatch(connection' transaction' preferBatching: _storage.CommandBatchMaxTimeout.HasValue))                  {                      if (!_storage.Options.DisableGlobalLocks)                      {                          commandBatch.Append(                              "SET XACT_ABORT ON;exec sp_getapplock @Resource=@resource' @LockMode=N'Exclusive'' @LockOwner=N'Transaction'' @LockTimeout=-1;"'                              new SqlCommandBatchParameter("@resource"' DbType.String' 255) { Value = lockResourceKey });                      }                        foreach (var keyValuePair in keyValuePairs)                      {                          commandBatch.Append(sql'                              new SqlCommandBatchParameter("@key"' DbType.String' 100) { Value = key }'                              new SqlCommandBatchParameter("@field"' DbType.String' 100) { Value = keyValuePair.Key }'                              new SqlCommandBatchParameter("@value"' DbType.String' -1) { Value = (object) keyValuePair.Value ?? DBNull.Value });                      }                        if (!_storage.Options.DisableGlobalLocks)                      {                          commandBatch.Append(                              "exec sp_releaseapplock @Resource=@resource' @LockOwner=N'Transaction';"'                              new SqlCommandBatchParameter("@resource"' DbType.String' 255) { Value = lockResourceKey });                      }                        commandBatch.CommandTimeout = _storage.CommandTimeout;                      commandBatch.CommandBatchMaxTimeout = _storage.CommandBatchMaxTimeout;                        commandBatch.ExecuteNonQuery();                  }              });
Magic Number,Hangfire.SqlServer,SqlServerConnection,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,SetRangeInHash,The following statement contains a magic number: _storage.UseTransaction(_dedicatedConnection' (connection' transaction) =>              {                  using (var commandBatch = new SqlCommandBatch(connection' transaction' preferBatching: _storage.CommandBatchMaxTimeout.HasValue))                  {                      if (!_storage.Options.DisableGlobalLocks)                      {                          commandBatch.Append(                              "SET XACT_ABORT ON;exec sp_getapplock @Resource=@resource' @LockMode=N'Exclusive'' @LockOwner=N'Transaction'' @LockTimeout=-1;"'                              new SqlCommandBatchParameter("@resource"' DbType.String' 255) { Value = lockResourceKey });                      }                        foreach (var keyValuePair in keyValuePairs)                      {                          commandBatch.Append(sql'                              new SqlCommandBatchParameter("@key"' DbType.String' 100) { Value = key }'                              new SqlCommandBatchParameter("@field"' DbType.String' 100) { Value = keyValuePair.Key }'                              new SqlCommandBatchParameter("@value"' DbType.String' -1) { Value = (object) keyValuePair.Value ?? DBNull.Value });                      }                        if (!_storage.Options.DisableGlobalLocks)                      {                          commandBatch.Append(                              "exec sp_releaseapplock @Resource=@resource' @LockOwner=N'Transaction';"'                              new SqlCommandBatchParameter("@resource"' DbType.String' 255) { Value = lockResourceKey });                      }                        commandBatch.CommandTimeout = _storage.CommandTimeout;                      commandBatch.CommandBatchMaxTimeout = _storage.CommandBatchMaxTimeout;                        commandBatch.ExecuteNonQuery();                  }              });
Magic Number,Hangfire.SqlServer,SqlServerConnection,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,SetRangeInHash,The following statement contains a magic number: _storage.UseTransaction(_dedicatedConnection' (connection' transaction) =>              {                  using (var commandBatch = new SqlCommandBatch(connection' transaction' preferBatching: _storage.CommandBatchMaxTimeout.HasValue))                  {                      if (!_storage.Options.DisableGlobalLocks)                      {                          commandBatch.Append(                              "SET XACT_ABORT ON;exec sp_getapplock @Resource=@resource' @LockMode=N'Exclusive'' @LockOwner=N'Transaction'' @LockTimeout=-1;"'                              new SqlCommandBatchParameter("@resource"' DbType.String' 255) { Value = lockResourceKey });                      }                        foreach (var keyValuePair in keyValuePairs)                      {                          commandBatch.Append(sql'                              new SqlCommandBatchParameter("@key"' DbType.String' 100) { Value = key }'                              new SqlCommandBatchParameter("@field"' DbType.String' 100) { Value = keyValuePair.Key }'                              new SqlCommandBatchParameter("@value"' DbType.String' -1) { Value = (object) keyValuePair.Value ?? DBNull.Value });                      }                        if (!_storage.Options.DisableGlobalLocks)                      {                          commandBatch.Append(                              "exec sp_releaseapplock @Resource=@resource' @LockOwner=N'Transaction';"'                              new SqlCommandBatchParameter("@resource"' DbType.String' 255) { Value = lockResourceKey });                      }                        commandBatch.CommandTimeout = _storage.CommandTimeout;                      commandBatch.CommandBatchMaxTimeout = _storage.CommandBatchMaxTimeout;                        commandBatch.ExecuteNonQuery();                  }              });
Magic Number,Hangfire.SqlServer,SqlServerConnection,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,SetRangeInHash,The following statement contains a magic number: _storage.UseTransaction(_dedicatedConnection' (connection' transaction) =>              {                  using (var commandBatch = new SqlCommandBatch(connection' transaction' preferBatching: _storage.CommandBatchMaxTimeout.HasValue))                  {                      if (!_storage.Options.DisableGlobalLocks)                      {                          commandBatch.Append(                              "SET XACT_ABORT ON;exec sp_getapplock @Resource=@resource' @LockMode=N'Exclusive'' @LockOwner=N'Transaction'' @LockTimeout=-1;"'                              new SqlCommandBatchParameter("@resource"' DbType.String' 255) { Value = lockResourceKey });                      }                        foreach (var keyValuePair in keyValuePairs)                      {                          commandBatch.Append(sql'                              new SqlCommandBatchParameter("@key"' DbType.String' 100) { Value = key }'                              new SqlCommandBatchParameter("@field"' DbType.String' 100) { Value = keyValuePair.Key }'                              new SqlCommandBatchParameter("@value"' DbType.String' -1) { Value = (object) keyValuePair.Value ?? DBNull.Value });                      }                        if (!_storage.Options.DisableGlobalLocks)                      {                          commandBatch.Append(                              "exec sp_releaseapplock @Resource=@resource' @LockOwner=N'Transaction';"'                              new SqlCommandBatchParameter("@resource"' DbType.String' 255) { Value = lockResourceKey });                      }                        commandBatch.CommandTimeout = _storage.CommandTimeout;                      commandBatch.CommandBatchMaxTimeout = _storage.CommandBatchMaxTimeout;                        commandBatch.ExecuteNonQuery();                  }              });
Magic Number,Hangfire.SqlServer,SqlServerDistributedLock,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerDistributedLock.cs,Acquire,The following statement contains a magic number: connection.Execute(                      @"sp_getapplock"'                      parameters'                      commandTimeout: (int) (lockTimeout / 1000) + 5'                      commandType: CommandType.StoredProcedure);
Magic Number,Hangfire.SqlServer,SqlServerDistributedLock,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerDistributedLock.cs,Acquire,The following statement contains a magic number: connection.Execute(                      @"sp_getapplock"'                      parameters'                      commandTimeout: (int) (lockTimeout / 1000) + 5'                      commandType: CommandType.StoredProcedure);
Magic Number,Hangfire.SqlServer,SqlServerDistributedLock,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerDistributedLock.cs,Acquire,The following statement contains a magic number: lockResult == -999
Magic Number,Hangfire.SqlServer,SqlServerMonitoringApi,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerMonitoringApi.cs,Queues,The following statement contains a magic number: var enqueuedJobIds = tuple.Monitoring.GetEnqueuedJobIds(tuple.Queue' 0' 5);
Magic Number,Hangfire.SqlServer,SqlServerMonitoringApi,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerMonitoringApi.cs,GetHourlyTimelineStats,The following statement contains a magic number: i < 24
Magic Number,Hangfire.SqlServer,SqlServerMonitoringApi,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerMonitoringApi.cs,GetTimelineStats,The following statement contains a magic number: i < 7
Magic Number,Hangfire.SqlServer,SqlServerStorage,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerStorage.cs,Initialize,The following statement contains a magic number: const int RetryAttempts = 3;
Magic Number,Hangfire.SqlServer,SqlServerStorageOptions,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerStorageOptions.cs,SqlServerStorageOptions,The following statement contains a magic number: QueuePollInterval = TimeSpan.FromSeconds(15);
Magic Number,Hangfire.SqlServer,SqlServerStorageOptions,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerStorageOptions.cs,SqlServerStorageOptions,The following statement contains a magic number: InvisibilityTimeout = TimeSpan.FromMinutes(30);
Magic Number,Hangfire.SqlServer,SqlServerStorageOptions,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerStorageOptions.cs,SqlServerStorageOptions,The following statement contains a magic number: JobExpirationCheckInterval = TimeSpan.FromMinutes(30);
Magic Number,Hangfire.SqlServer,SqlServerStorageOptions,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerStorageOptions.cs,SqlServerStorageOptions,The following statement contains a magic number: CountersAggregateInterval = TimeSpan.FromMinutes(5);
Magic Number,Hangfire.SqlServer,SqlServerStorageOptions,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerStorageOptions.cs,SqlServerStorageOptions,The following statement contains a magic number: DashboardJobListLimit = 10000;
Magic Number,Hangfire.SqlServer,SqlServerTimeoutJob,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerTimeoutJob.cs,SqlServerTimeoutJob,The following statement contains a magic number: var keepAliveInterval =                      TimeSpan.FromSeconds(storage.SlidingInvisibilityTimeout.Value.TotalSeconds / 5);
Magic Number,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,Commit,The following statement contains a magic number: _storage.UseTransaction(_dedicatedConnectionFunc()' (connection' transaction) =>              {                  using (var commandBatch = new SqlCommandBatch(connection' transaction' preferBatching: _storage.CommandBatchMaxTimeout.HasValue))                  {                      commandBatch.Append("set xact_abort on;set nocount on;");                        foreach (var lockedResource in _lockedResources)                      {                          commandBatch.Append(                              "exec sp_getapplock @Resource=@resource' @LockMode=N'Exclusive'"'                              new SqlCommandBatchParameter("@resource"' DbType.String' 255) { Value = lockedResource });                      }                        AppendBatch(_jobCommands' commandBatch);                      AppendBatch(_counterCommands' commandBatch);                      AppendBatch(_hashCommands' commandBatch);                      AppendBatch(_listCommands' commandBatch);                      AppendBatch(_setCommands' commandBatch);                      AppendBatch(_queueCommands' commandBatch);                        commandBatch.CommandTimeout = _storage.CommandTimeout;                      commandBatch.CommandBatchMaxTimeout = _storage.CommandBatchMaxTimeout;                        commandBatch.ExecuteNonQuery();                        foreach (var queueCommand in _queueCommandQueue)                      {                          queueCommand(connection' transaction);                      }                  }              });
Magic Number,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,SetJobState,The following statement contains a magic number: AddCommand(                  _jobCommands'                  long.Parse(jobId)'                  addAndSetStateSql'                  new SqlCommandBatchParameter("@jobId"' DbType.Int64) { Value = long.Parse(jobId) }'                  new SqlCommandBatchParameter("@name"' DbType.String' 20) { Value = state.Name }'                  new SqlCommandBatchParameter("@reason"' DbType.String' 100) { Value = (object)state.Reason?.Substring(0' Math.Min(99' state.Reason.Length)) ?? DBNull.Value }'                  new SqlCommandBatchParameter("@createdAt"' DbType.DateTime) { Value = DateTime.UtcNow }'                  new SqlCommandBatchParameter("@data"' DbType.String' -1) { Value = (object)SerializationHelper.Serialize(state.SerializeData()) ?? DBNull.Value });
Magic Number,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,SetJobState,The following statement contains a magic number: AddCommand(                  _jobCommands'                  long.Parse(jobId)'                  addAndSetStateSql'                  new SqlCommandBatchParameter("@jobId"' DbType.Int64) { Value = long.Parse(jobId) }'                  new SqlCommandBatchParameter("@name"' DbType.String' 20) { Value = state.Name }'                  new SqlCommandBatchParameter("@reason"' DbType.String' 100) { Value = (object)state.Reason?.Substring(0' Math.Min(99' state.Reason.Length)) ?? DBNull.Value }'                  new SqlCommandBatchParameter("@createdAt"' DbType.DateTime) { Value = DateTime.UtcNow }'                  new SqlCommandBatchParameter("@data"' DbType.String' -1) { Value = (object)SerializationHelper.Serialize(state.SerializeData()) ?? DBNull.Value });
Magic Number,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,SetJobState,The following statement contains a magic number: AddCommand(                  _jobCommands'                  long.Parse(jobId)'                  addAndSetStateSql'                  new SqlCommandBatchParameter("@jobId"' DbType.Int64) { Value = long.Parse(jobId) }'                  new SqlCommandBatchParameter("@name"' DbType.String' 20) { Value = state.Name }'                  new SqlCommandBatchParameter("@reason"' DbType.String' 100) { Value = (object)state.Reason?.Substring(0' Math.Min(99' state.Reason.Length)) ?? DBNull.Value }'                  new SqlCommandBatchParameter("@createdAt"' DbType.DateTime) { Value = DateTime.UtcNow }'                  new SqlCommandBatchParameter("@data"' DbType.String' -1) { Value = (object)SerializationHelper.Serialize(state.SerializeData()) ?? DBNull.Value });
Magic Number,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,AddJobState,The following statement contains a magic number: AddCommand(                  _jobCommands'                  long.Parse(jobId)'                  addStateSql'                  new SqlCommandBatchParameter("@jobId"' DbType.Int64) { Value = long.Parse(jobId) }'                  new SqlCommandBatchParameter("@name"' DbType.String' 20) { Value = state.Name }'                  new SqlCommandBatchParameter("@reason"' DbType.String' 100) { Value = (object)state.Reason?.Substring(0' Math.Min(99' state.Reason.Length)) ?? DBNull.Value }'                  new SqlCommandBatchParameter("@createdAt"' DbType.DateTime) { Value = DateTime.UtcNow }'                  new SqlCommandBatchParameter("@data"' DbType.String' -1) { Value = (object)SerializationHelper.Serialize(state.SerializeData()) ?? DBNull.Value });
Magic Number,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,AddJobState,The following statement contains a magic number: AddCommand(                  _jobCommands'                  long.Parse(jobId)'                  addStateSql'                  new SqlCommandBatchParameter("@jobId"' DbType.Int64) { Value = long.Parse(jobId) }'                  new SqlCommandBatchParameter("@name"' DbType.String' 20) { Value = state.Name }'                  new SqlCommandBatchParameter("@reason"' DbType.String' 100) { Value = (object)state.Reason?.Substring(0' Math.Min(99' state.Reason.Length)) ?? DBNull.Value }'                  new SqlCommandBatchParameter("@createdAt"' DbType.DateTime) { Value = DateTime.UtcNow }'                  new SqlCommandBatchParameter("@data"' DbType.String' -1) { Value = (object)SerializationHelper.Serialize(state.SerializeData()) ?? DBNull.Value });
Magic Number,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,AddJobState,The following statement contains a magic number: AddCommand(                  _jobCommands'                  long.Parse(jobId)'                  addStateSql'                  new SqlCommandBatchParameter("@jobId"' DbType.Int64) { Value = long.Parse(jobId) }'                  new SqlCommandBatchParameter("@name"' DbType.String' 20) { Value = state.Name }'                  new SqlCommandBatchParameter("@reason"' DbType.String' 100) { Value = (object)state.Reason?.Substring(0' Math.Min(99' state.Reason.Length)) ?? DBNull.Value }'                  new SqlCommandBatchParameter("@createdAt"' DbType.DateTime) { Value = DateTime.UtcNow }'                  new SqlCommandBatchParameter("@data"' DbType.String' -1) { Value = (object)SerializationHelper.Serialize(state.SerializeData()) ?? DBNull.Value });
Magic Number,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,AddToQueue,The following statement contains a magic number: AddCommand(                      _queueCommands'                      queue'                      $@"insert into [{_storage.SchemaName}].JobQueue (JobId' Queue) values (@jobId' @queue)"'                      new SqlCommandBatchParameter("@jobId"' DbType.Int64) { Value = long.Parse(jobId) }'                      new SqlCommandBatchParameter("@queue"' DbType.String' 50) { Value = queue });
Magic Number,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,IncrementCounter,The following statement contains a magic number: AddCommand(                  _counterCommands'                  key'                  $@"insert into [{_storage.SchemaName}].Counter ([Key]' [Value]) values (@key' @value)"'                  new SqlCommandBatchParameter("@key"' DbType.String' 100) { Value = key }'                  new SqlCommandBatchParameter("@value"' DbType.Int32) { Value = +1 });
Magic Number,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,IncrementCounter,The following statement contains a magic number: AddCommand(                  _counterCommands'                  key'                  $@"insert into [{_storage.SchemaName}].Counter ([Key]' [Value]' [ExpireAt]) values (@key' @value' @expireAt)"'                  new SqlCommandBatchParameter("@key"' DbType.String' 100) { Value = key }'                  new SqlCommandBatchParameter("@value"' DbType.Int32) { Value = +1 }'                  new SqlCommandBatchParameter("@expireAt"' DbType.DateTime) { Value = DateTime.UtcNow.Add(expireIn) });
Magic Number,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,DecrementCounter,The following statement contains a magic number: AddCommand(                  _counterCommands'                  key'                  $@"insert into [{_storage.SchemaName}].Counter ([Key]' [Value]) values (@key' @value)"'                  new SqlCommandBatchParameter("@key"' DbType.String' 100) { Value = key }'                  new SqlCommandBatchParameter("@value"' DbType.Int32) { Value = -1 });
Magic Number,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,DecrementCounter,The following statement contains a magic number: AddCommand(                  _counterCommands'                  key'                  $@"insert into [{_storage.SchemaName}].Counter ([Key]' [Value]' [ExpireAt]) values (@key' @value' @expireAt)"'                  new SqlCommandBatchParameter("@key"' DbType.String' 100) { Value = key }'                  new SqlCommandBatchParameter("@value"' DbType.Int32) { Value = -1 }'                  new SqlCommandBatchParameter("@expireAt"' DbType.DateTime) { Value = DateTime.UtcNow.Add(expireIn) });
Magic Number,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,AddToSet,The following statement contains a magic number: AddCommand(                  _setCommands'                  key'                  addSql'                  new SqlCommandBatchParameter("@key"' DbType.String' 100) { Value = key }'                  new SqlCommandBatchParameter("@value"' DbType.String' 256) { Value = value }'                  new SqlCommandBatchParameter("@score"' DbType.Double' 53) { Value = score });
Magic Number,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,AddToSet,The following statement contains a magic number: AddCommand(                  _setCommands'                  key'                  addSql'                  new SqlCommandBatchParameter("@key"' DbType.String' 100) { Value = key }'                  new SqlCommandBatchParameter("@value"' DbType.String' 256) { Value = value }'                  new SqlCommandBatchParameter("@score"' DbType.Double' 53) { Value = score });
Magic Number,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,AddToSet,The following statement contains a magic number: AddCommand(                  _setCommands'                  key'                  addSql'                  new SqlCommandBatchParameter("@key"' DbType.String' 100) { Value = key }'                  new SqlCommandBatchParameter("@value"' DbType.String' 256) { Value = value }'                  new SqlCommandBatchParameter("@score"' DbType.Double' 53) { Value = score });
Magic Number,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,RemoveFromSet,The following statement contains a magic number: AddCommand(                  _setCommands'                  key'                  query'                  new SqlCommandBatchParameter("@key"' DbType.String' 100) { Value = key }'                  new SqlCommandBatchParameter("@value"' DbType.String' 256) { Value = value });
Magic Number,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,RemoveFromSet,The following statement contains a magic number: AddCommand(                  _setCommands'                  key'                  query'                  new SqlCommandBatchParameter("@key"' DbType.String' 100) { Value = key }'                  new SqlCommandBatchParameter("@value"' DbType.String' 256) { Value = value });
Magic Number,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,InsertToList,The following statement contains a magic number: AddCommand(                  _listCommands'                  key'                  $@"  select [Key] from [{_storage.SchemaName}].List with (xlock)  where [Key] = @key;  insert into [{_storage.SchemaName}].List ([Key]' Value) values (@key' @value);"'                  new SqlCommandBatchParameter("@key"' DbType.String' 100) { Value = key }'                  new SqlCommandBatchParameter("@value"' DbType.String' -1) { Value = value });
Magic Number,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,RemoveFromList,The following statement contains a magic number: AddCommand(                  _listCommands'                  key'                  $@"delete from [{_storage.SchemaName}].List where [Key] = @key and Value = @value"'                  new SqlCommandBatchParameter("@key"' DbType.String' 100) { Value = key }'                  new SqlCommandBatchParameter("@value"' DbType.String' -1) { Value = value });
Magic Number,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,TrimList,The following statement contains a magic number: AddCommand(                  _listCommands'                  key'                   trimSql'                  new SqlCommandBatchParameter("@key"' DbType.String' 100) { Value = key }'                  new SqlCommandBatchParameter("@start"' DbType.Int32) { Value = keepStartingFrom + 1 }'                  new SqlCommandBatchParameter("@end"' DbType.Int32) { Value = keepEndingAt + 1 });
Magic Number,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,SetRangeInHash,The following statement contains a magic number: AddCommand(                      _hashCommands'                      key'                      sql'                      new SqlCommandBatchParameter("@key"' DbType.String' 100) { Value = key }'                      new SqlCommandBatchParameter("@field"' DbType.String' 100) { Value = pair.Key }'                      new SqlCommandBatchParameter("@value"' DbType.String' -1) { Value = (object)pair.Value ?? DBNull.Value });
Magic Number,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,SetRangeInHash,The following statement contains a magic number: AddCommand(                      _hashCommands'                      key'                      sql'                      new SqlCommandBatchParameter("@key"' DbType.String' 100) { Value = key }'                      new SqlCommandBatchParameter("@field"' DbType.String' 100) { Value = pair.Key }'                      new SqlCommandBatchParameter("@value"' DbType.String' -1) { Value = (object)pair.Value ?? DBNull.Value });
Magic Number,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,RemoveHash,The following statement contains a magic number: AddCommand(_hashCommands' key' query' new SqlCommandBatchParameter("@key"' DbType.String' 100) { Value = key });
Magic Number,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,AddRangeToSet,The following statement contains a magic number: AddCommand(_setCommands' key' query'                       new SqlCommandBatchParameter("@key"' DbType.String' 100) { Value = key }'                       new SqlCommandBatchParameter("@value"' DbType.String' 256) { Value = item });
Magic Number,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,AddRangeToSet,The following statement contains a magic number: AddCommand(_setCommands' key' query'                       new SqlCommandBatchParameter("@key"' DbType.String' 100) { Value = key }'                       new SqlCommandBatchParameter("@value"' DbType.String' 256) { Value = item });
Magic Number,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,RemoveSet,The following statement contains a magic number: AddCommand(_setCommands' key' query' new SqlCommandBatchParameter("@key"' DbType.String' 100) { Value = key });
Magic Number,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,ExpireHash,The following statement contains a magic number: AddCommand(_hashCommands' key' query'                  new SqlCommandBatchParameter("@key"' DbType.String' 100) { Value = key }'                  new SqlCommandBatchParameter("@expireAt"' DbType.DateTime) { Value = DateTime.UtcNow.Add(expireIn) });
Magic Number,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,ExpireSet,The following statement contains a magic number: AddCommand(_setCommands' key' query'                  new SqlCommandBatchParameter("@key"' DbType.String' 100) { Value = key }'                  new SqlCommandBatchParameter("@expireAt"' DbType.DateTime) { Value = DateTime.UtcNow.Add(expireIn) });
Magic Number,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,ExpireList,The following statement contains a magic number: AddCommand(_listCommands' key' query'                  new SqlCommandBatchParameter("@key"' DbType.String' 100) { Value = key }'                  new SqlCommandBatchParameter("@expireAt"' DbType.DateTime) { Value = DateTime.UtcNow.Add(expireIn) });
Magic Number,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,PersistHash,The following statement contains a magic number: AddCommand(_hashCommands' key' query' new SqlCommandBatchParameter("@key"' DbType.String' 100) { Value = key });
Magic Number,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,PersistSet,The following statement contains a magic number: AddCommand(_setCommands' key' query' new SqlCommandBatchParameter("@key"' DbType.String' 100) { Value = key });
Magic Number,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,D:\research\architectureSmells\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,PersistList,The following statement contains a magic number: AddCommand(_listCommands' key' query' new SqlCommandBatchParameter("@key"' DbType.String' 100) { Value = key });
