Implementation smell,Namespace,Class,File,Method,Description
Long Method,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The method has 139 lines of code.
Complex Method,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,Cyclomatic complexity of the method is 30
Long Parameter List,ConsoleSample,Services,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Services.cs,FullArgs,The method has 13 parameters.
Long Statement,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The length of the statement  "	GlobalConfiguration.Configuration.UseColouredConsoleLogProvider ().UseSqlServerStorage (@"Server=.\sqlexpress;Database=Hangfire.Sample;Trusted_Connection=True;").UseMsmqQueues (@".\Private$\hangfire{0}"' "default"' "critical"); " is 227.
Long Statement,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The length of the statement  "	RecurringJob.AddOrUpdate ("Hawaiian"' () => Console.WriteLine ("Hawaiian")' "15 08 * * *"' TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time")); " is 155.
Long Statement,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The length of the statement  "					BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject { " is 177.
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: using (new BackgroundJobServer (options)) {  	var count = 1;  	while (true) {  		var command = Console.ReadLine ();  		if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  			break;  		}  		if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (4));  				for (var i = 0; i < workCount; i++) {  					var number = i;  					BackgroundJob.Enqueue<Services> (x => x.Random (number));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (6));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (7));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Error ());  			}  		}  		if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (5));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  			}  		}  		if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  					"Hello"'  					"world!"  				}' new Services.CustomObject {  					Id = 123  				}' DayOfWeek.Friday));  			}  		}  		if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (9));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  					Id = 123  				}' new[] {  					"1"'  					"2"'  					"3"  				}' new[] {  					4'  					5'  					6  				}' new long[0]' null' new List<string> {  					"7"'  					"8"'  					"9"  				}));  			}  		}  		if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  			var seconds = int.Parse (command.Substring (2));  			var number = count++;  			BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  		}  		if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  			var iterations = int.Parse (command.Substring (11));  			BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  		}  		if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				BackgroundJob.Delete (jobId);  			}  		}  		if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (5));  				Parallel.For (0' workCount' i => {  					if (i % 2 == 0) {  						BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  					} else {  						BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  					}  				});  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  			BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  		}  		if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  			WriteString ("Hello' Hangfire continuations!");  		}  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: using (new BackgroundJobServer (options)) {  	var count = 1;  	while (true) {  		var command = Console.ReadLine ();  		if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  			break;  		}  		if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (4));  				for (var i = 0; i < workCount; i++) {  					var number = i;  					BackgroundJob.Enqueue<Services> (x => x.Random (number));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (6));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (7));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Error ());  			}  		}  		if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (5));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  			}  		}  		if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  					"Hello"'  					"world!"  				}' new Services.CustomObject {  					Id = 123  				}' DayOfWeek.Friday));  			}  		}  		if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (9));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  					Id = 123  				}' new[] {  					"1"'  					"2"'  					"3"  				}' new[] {  					4'  					5'  					6  				}' new long[0]' null' new List<string> {  					"7"'  					"8"'  					"9"  				}));  			}  		}  		if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  			var seconds = int.Parse (command.Substring (2));  			var number = count++;  			BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  		}  		if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  			var iterations = int.Parse (command.Substring (11));  			BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  		}  		if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				BackgroundJob.Delete (jobId);  			}  		}  		if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (5));  				Parallel.For (0' workCount' i => {  					if (i % 2 == 0) {  						BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  					} else {  						BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  					}  				});  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  			BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  		}  		if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  			WriteString ("Hello' Hangfire continuations!");  		}  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: using (new BackgroundJobServer (options)) {  	var count = 1;  	while (true) {  		var command = Console.ReadLine ();  		if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  			break;  		}  		if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (4));  				for (var i = 0; i < workCount; i++) {  					var number = i;  					BackgroundJob.Enqueue<Services> (x => x.Random (number));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (6));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (7));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Error ());  			}  		}  		if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (5));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  			}  		}  		if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  					"Hello"'  					"world!"  				}' new Services.CustomObject {  					Id = 123  				}' DayOfWeek.Friday));  			}  		}  		if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (9));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  					Id = 123  				}' new[] {  					"1"'  					"2"'  					"3"  				}' new[] {  					4'  					5'  					6  				}' new long[0]' null' new List<string> {  					"7"'  					"8"'  					"9"  				}));  			}  		}  		if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  			var seconds = int.Parse (command.Substring (2));  			var number = count++;  			BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  		}  		if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  			var iterations = int.Parse (command.Substring (11));  			BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  		}  		if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				BackgroundJob.Delete (jobId);  			}  		}  		if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (5));  				Parallel.For (0' workCount' i => {  					if (i % 2 == 0) {  						BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  					} else {  						BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  					}  				});  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  			BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  		}  		if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  			WriteString ("Hello' Hangfire continuations!");  		}  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: using (new BackgroundJobServer (options)) {  	var count = 1;  	while (true) {  		var command = Console.ReadLine ();  		if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  			break;  		}  		if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (4));  				for (var i = 0; i < workCount; i++) {  					var number = i;  					BackgroundJob.Enqueue<Services> (x => x.Random (number));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (6));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (7));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Error ());  			}  		}  		if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (5));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  			}  		}  		if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  					"Hello"'  					"world!"  				}' new Services.CustomObject {  					Id = 123  				}' DayOfWeek.Friday));  			}  		}  		if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (9));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  					Id = 123  				}' new[] {  					"1"'  					"2"'  					"3"  				}' new[] {  					4'  					5'  					6  				}' new long[0]' null' new List<string> {  					"7"'  					"8"'  					"9"  				}));  			}  		}  		if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  			var seconds = int.Parse (command.Substring (2));  			var number = count++;  			BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  		}  		if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  			var iterations = int.Parse (command.Substring (11));  			BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  		}  		if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				BackgroundJob.Delete (jobId);  			}  		}  		if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (5));  				Parallel.For (0' workCount' i => {  					if (i % 2 == 0) {  						BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  					} else {  						BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  					}  				});  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  			BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  		}  		if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  			WriteString ("Hello' Hangfire continuations!");  		}  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: using (new BackgroundJobServer (options)) {  	var count = 1;  	while (true) {  		var command = Console.ReadLine ();  		if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  			break;  		}  		if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (4));  				for (var i = 0; i < workCount; i++) {  					var number = i;  					BackgroundJob.Enqueue<Services> (x => x.Random (number));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (6));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (7));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Error ());  			}  		}  		if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (5));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  			}  		}  		if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  					"Hello"'  					"world!"  				}' new Services.CustomObject {  					Id = 123  				}' DayOfWeek.Friday));  			}  		}  		if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (9));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  					Id = 123  				}' new[] {  					"1"'  					"2"'  					"3"  				}' new[] {  					4'  					5'  					6  				}' new long[0]' null' new List<string> {  					"7"'  					"8"'  					"9"  				}));  			}  		}  		if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  			var seconds = int.Parse (command.Substring (2));  			var number = count++;  			BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  		}  		if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  			var iterations = int.Parse (command.Substring (11));  			BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  		}  		if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				BackgroundJob.Delete (jobId);  			}  		}  		if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (5));  				Parallel.For (0' workCount' i => {  					if (i % 2 == 0) {  						BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  					} else {  						BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  					}  				});  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  			BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  		}  		if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  			WriteString ("Hello' Hangfire continuations!");  		}  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: using (new BackgroundJobServer (options)) {  	var count = 1;  	while (true) {  		var command = Console.ReadLine ();  		if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  			break;  		}  		if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (4));  				for (var i = 0; i < workCount; i++) {  					var number = i;  					BackgroundJob.Enqueue<Services> (x => x.Random (number));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (6));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (7));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Error ());  			}  		}  		if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (5));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  			}  		}  		if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  					"Hello"'  					"world!"  				}' new Services.CustomObject {  					Id = 123  				}' DayOfWeek.Friday));  			}  		}  		if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (9));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  					Id = 123  				}' new[] {  					"1"'  					"2"'  					"3"  				}' new[] {  					4'  					5'  					6  				}' new long[0]' null' new List<string> {  					"7"'  					"8"'  					"9"  				}));  			}  		}  		if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  			var seconds = int.Parse (command.Substring (2));  			var number = count++;  			BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  		}  		if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  			var iterations = int.Parse (command.Substring (11));  			BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  		}  		if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				BackgroundJob.Delete (jobId);  			}  		}  		if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (5));  				Parallel.For (0' workCount' i => {  					if (i % 2 == 0) {  						BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  					} else {  						BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  					}  				});  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  			BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  		}  		if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  			WriteString ("Hello' Hangfire continuations!");  		}  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: using (new BackgroundJobServer (options)) {  	var count = 1;  	while (true) {  		var command = Console.ReadLine ();  		if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  			break;  		}  		if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (4));  				for (var i = 0; i < workCount; i++) {  					var number = i;  					BackgroundJob.Enqueue<Services> (x => x.Random (number));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (6));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (7));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Error ());  			}  		}  		if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (5));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  			}  		}  		if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  					"Hello"'  					"world!"  				}' new Services.CustomObject {  					Id = 123  				}' DayOfWeek.Friday));  			}  		}  		if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (9));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  					Id = 123  				}' new[] {  					"1"'  					"2"'  					"3"  				}' new[] {  					4'  					5'  					6  				}' new long[0]' null' new List<string> {  					"7"'  					"8"'  					"9"  				}));  			}  		}  		if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  			var seconds = int.Parse (command.Substring (2));  			var number = count++;  			BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  		}  		if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  			var iterations = int.Parse (command.Substring (11));  			BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  		}  		if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				BackgroundJob.Delete (jobId);  			}  		}  		if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (5));  				Parallel.For (0' workCount' i => {  					if (i % 2 == 0) {  						BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  					} else {  						BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  					}  				});  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  			BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  		}  		if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  			WriteString ("Hello' Hangfire continuations!");  		}  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: using (new BackgroundJobServer (options)) {  	var count = 1;  	while (true) {  		var command = Console.ReadLine ();  		if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  			break;  		}  		if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (4));  				for (var i = 0; i < workCount; i++) {  					var number = i;  					BackgroundJob.Enqueue<Services> (x => x.Random (number));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (6));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (7));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Error ());  			}  		}  		if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (5));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  			}  		}  		if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  					"Hello"'  					"world!"  				}' new Services.CustomObject {  					Id = 123  				}' DayOfWeek.Friday));  			}  		}  		if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (9));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  					Id = 123  				}' new[] {  					"1"'  					"2"'  					"3"  				}' new[] {  					4'  					5'  					6  				}' new long[0]' null' new List<string> {  					"7"'  					"8"'  					"9"  				}));  			}  		}  		if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  			var seconds = int.Parse (command.Substring (2));  			var number = count++;  			BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  		}  		if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  			var iterations = int.Parse (command.Substring (11));  			BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  		}  		if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				BackgroundJob.Delete (jobId);  			}  		}  		if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (5));  				Parallel.For (0' workCount' i => {  					if (i % 2 == 0) {  						BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  					} else {  						BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  					}  				});  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  			BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  		}  		if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  			WriteString ("Hello' Hangfire continuations!");  		}  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: using (new BackgroundJobServer (options)) {  	var count = 1;  	while (true) {  		var command = Console.ReadLine ();  		if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  			break;  		}  		if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (4));  				for (var i = 0; i < workCount; i++) {  					var number = i;  					BackgroundJob.Enqueue<Services> (x => x.Random (number));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (6));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (7));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Error ());  			}  		}  		if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (5));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  			}  		}  		if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  					"Hello"'  					"world!"  				}' new Services.CustomObject {  					Id = 123  				}' DayOfWeek.Friday));  			}  		}  		if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (9));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  					Id = 123  				}' new[] {  					"1"'  					"2"'  					"3"  				}' new[] {  					4'  					5'  					6  				}' new long[0]' null' new List<string> {  					"7"'  					"8"'  					"9"  				}));  			}  		}  		if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  			var seconds = int.Parse (command.Substring (2));  			var number = count++;  			BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  		}  		if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  			var iterations = int.Parse (command.Substring (11));  			BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  		}  		if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				BackgroundJob.Delete (jobId);  			}  		}  		if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (5));  				Parallel.For (0' workCount' i => {  					if (i % 2 == 0) {  						BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  					} else {  						BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  					}  				});  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  			BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  		}  		if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  			WriteString ("Hello' Hangfire continuations!");  		}  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: using (new BackgroundJobServer (options)) {  	var count = 1;  	while (true) {  		var command = Console.ReadLine ();  		if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  			break;  		}  		if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (4));  				for (var i = 0; i < workCount; i++) {  					var number = i;  					BackgroundJob.Enqueue<Services> (x => x.Random (number));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (6));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (7));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Error ());  			}  		}  		if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (5));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  			}  		}  		if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  					"Hello"'  					"world!"  				}' new Services.CustomObject {  					Id = 123  				}' DayOfWeek.Friday));  			}  		}  		if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (9));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  					Id = 123  				}' new[] {  					"1"'  					"2"'  					"3"  				}' new[] {  					4'  					5'  					6  				}' new long[0]' null' new List<string> {  					"7"'  					"8"'  					"9"  				}));  			}  		}  		if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  			var seconds = int.Parse (command.Substring (2));  			var number = count++;  			BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  		}  		if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  			var iterations = int.Parse (command.Substring (11));  			BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  		}  		if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				BackgroundJob.Delete (jobId);  			}  		}  		if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (5));  				Parallel.For (0' workCount' i => {  					if (i % 2 == 0) {  						BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  					} else {  						BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  					}  				});  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  			BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  		}  		if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  			WriteString ("Hello' Hangfire continuations!");  		}  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: using (new BackgroundJobServer (options)) {  	var count = 1;  	while (true) {  		var command = Console.ReadLine ();  		if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  			break;  		}  		if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (4));  				for (var i = 0; i < workCount; i++) {  					var number = i;  					BackgroundJob.Enqueue<Services> (x => x.Random (number));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (6));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (7));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Error ());  			}  		}  		if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (5));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  			}  		}  		if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  					"Hello"'  					"world!"  				}' new Services.CustomObject {  					Id = 123  				}' DayOfWeek.Friday));  			}  		}  		if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (9));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  					Id = 123  				}' new[] {  					"1"'  					"2"'  					"3"  				}' new[] {  					4'  					5'  					6  				}' new long[0]' null' new List<string> {  					"7"'  					"8"'  					"9"  				}));  			}  		}  		if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  			var seconds = int.Parse (command.Substring (2));  			var number = count++;  			BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  		}  		if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  			var iterations = int.Parse (command.Substring (11));  			BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  		}  		if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				BackgroundJob.Delete (jobId);  			}  		}  		if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (5));  				Parallel.For (0' workCount' i => {  					if (i % 2 == 0) {  						BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  					} else {  						BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  					}  				});  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  			BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  		}  		if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  			WriteString ("Hello' Hangfire continuations!");  		}  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: using (new BackgroundJobServer (options)) {  	var count = 1;  	while (true) {  		var command = Console.ReadLine ();  		if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  			break;  		}  		if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (4));  				for (var i = 0; i < workCount; i++) {  					var number = i;  					BackgroundJob.Enqueue<Services> (x => x.Random (number));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (6));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (7));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Error ());  			}  		}  		if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (5));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  			}  		}  		if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  					"Hello"'  					"world!"  				}' new Services.CustomObject {  					Id = 123  				}' DayOfWeek.Friday));  			}  		}  		if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (9));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  					Id = 123  				}' new[] {  					"1"'  					"2"'  					"3"  				}' new[] {  					4'  					5'  					6  				}' new long[0]' null' new List<string> {  					"7"'  					"8"'  					"9"  				}));  			}  		}  		if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  			var seconds = int.Parse (command.Substring (2));  			var number = count++;  			BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  		}  		if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  			var iterations = int.Parse (command.Substring (11));  			BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  		}  		if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				BackgroundJob.Delete (jobId);  			}  		}  		if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (5));  				Parallel.For (0' workCount' i => {  					if (i % 2 == 0) {  						BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  					} else {  						BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  					}  				});  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  			BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  		}  		if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  			WriteString ("Hello' Hangfire continuations!");  		}  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: using (new BackgroundJobServer (options)) {  	var count = 1;  	while (true) {  		var command = Console.ReadLine ();  		if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  			break;  		}  		if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (4));  				for (var i = 0; i < workCount; i++) {  					var number = i;  					BackgroundJob.Enqueue<Services> (x => x.Random (number));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (6));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (7));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Error ());  			}  		}  		if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (5));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  			}  		}  		if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  					"Hello"'  					"world!"  				}' new Services.CustomObject {  					Id = 123  				}' DayOfWeek.Friday));  			}  		}  		if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (9));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  					Id = 123  				}' new[] {  					"1"'  					"2"'  					"3"  				}' new[] {  					4'  					5'  					6  				}' new long[0]' null' new List<string> {  					"7"'  					"8"'  					"9"  				}));  			}  		}  		if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  			var seconds = int.Parse (command.Substring (2));  			var number = count++;  			BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  		}  		if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  			var iterations = int.Parse (command.Substring (11));  			BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  		}  		if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				BackgroundJob.Delete (jobId);  			}  		}  		if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (5));  				Parallel.For (0' workCount' i => {  					if (i % 2 == 0) {  						BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  					} else {  						BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  					}  				});  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  			BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  		}  		if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  			WriteString ("Hello' Hangfire continuations!");  		}  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: using (new BackgroundJobServer (options)) {  	var count = 1;  	while (true) {  		var command = Console.ReadLine ();  		if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  			break;  		}  		if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (4));  				for (var i = 0; i < workCount; i++) {  					var number = i;  					BackgroundJob.Enqueue<Services> (x => x.Random (number));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (6));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (7));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Error ());  			}  		}  		if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (5));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  			}  		}  		if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  					"Hello"'  					"world!"  				}' new Services.CustomObject {  					Id = 123  				}' DayOfWeek.Friday));  			}  		}  		if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (9));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  					Id = 123  				}' new[] {  					"1"'  					"2"'  					"3"  				}' new[] {  					4'  					5'  					6  				}' new long[0]' null' new List<string> {  					"7"'  					"8"'  					"9"  				}));  			}  		}  		if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  			var seconds = int.Parse (command.Substring (2));  			var number = count++;  			BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  		}  		if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  			var iterations = int.Parse (command.Substring (11));  			BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  		}  		if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				BackgroundJob.Delete (jobId);  			}  		}  		if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (5));  				Parallel.For (0' workCount' i => {  					if (i % 2 == 0) {  						BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  					} else {  						BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  					}  				});  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  			BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  		}  		if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  			WriteString ("Hello' Hangfire continuations!");  		}  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: using (new BackgroundJobServer (options)) {  	var count = 1;  	while (true) {  		var command = Console.ReadLine ();  		if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  			break;  		}  		if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (4));  				for (var i = 0; i < workCount; i++) {  					var number = i;  					BackgroundJob.Enqueue<Services> (x => x.Random (number));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (6));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (7));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Error ());  			}  		}  		if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (5));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  			}  		}  		if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  					"Hello"'  					"world!"  				}' new Services.CustomObject {  					Id = 123  				}' DayOfWeek.Friday));  			}  		}  		if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (9));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  					Id = 123  				}' new[] {  					"1"'  					"2"'  					"3"  				}' new[] {  					4'  					5'  					6  				}' new long[0]' null' new List<string> {  					"7"'  					"8"'  					"9"  				}));  			}  		}  		if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  			var seconds = int.Parse (command.Substring (2));  			var number = count++;  			BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  		}  		if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  			var iterations = int.Parse (command.Substring (11));  			BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  		}  		if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				BackgroundJob.Delete (jobId);  			}  		}  		if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (5));  				Parallel.For (0' workCount' i => {  					if (i % 2 == 0) {  						BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  					} else {  						BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  					}  				});  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  			BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  		}  		if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  			WriteString ("Hello' Hangfire continuations!");  		}  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: using (new BackgroundJobServer (options)) {  	var count = 1;  	while (true) {  		var command = Console.ReadLine ();  		if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  			break;  		}  		if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (4));  				for (var i = 0; i < workCount; i++) {  					var number = i;  					BackgroundJob.Enqueue<Services> (x => x.Random (number));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (6));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (7));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Error ());  			}  		}  		if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (5));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  			}  		}  		if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  					"Hello"'  					"world!"  				}' new Services.CustomObject {  					Id = 123  				}' DayOfWeek.Friday));  			}  		}  		if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (9));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  					Id = 123  				}' new[] {  					"1"'  					"2"'  					"3"  				}' new[] {  					4'  					5'  					6  				}' new long[0]' null' new List<string> {  					"7"'  					"8"'  					"9"  				}));  			}  		}  		if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  			var seconds = int.Parse (command.Substring (2));  			var number = count++;  			BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  		}  		if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  			var iterations = int.Parse (command.Substring (11));  			BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  		}  		if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				BackgroundJob.Delete (jobId);  			}  		}  		if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (5));  				Parallel.For (0' workCount' i => {  					if (i % 2 == 0) {  						BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  					} else {  						BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  					}  				});  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  			BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  		}  		if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  			WriteString ("Hello' Hangfire continuations!");  		}  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: using (new BackgroundJobServer (options)) {  	var count = 1;  	while (true) {  		var command = Console.ReadLine ();  		if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  			break;  		}  		if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (4));  				for (var i = 0; i < workCount; i++) {  					var number = i;  					BackgroundJob.Enqueue<Services> (x => x.Random (number));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (6));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (7));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Error ());  			}  		}  		if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (5));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  			}  		}  		if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  					"Hello"'  					"world!"  				}' new Services.CustomObject {  					Id = 123  				}' DayOfWeek.Friday));  			}  		}  		if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (9));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  					Id = 123  				}' new[] {  					"1"'  					"2"'  					"3"  				}' new[] {  					4'  					5'  					6  				}' new long[0]' null' new List<string> {  					"7"'  					"8"'  					"9"  				}));  			}  		}  		if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  			var seconds = int.Parse (command.Substring (2));  			var number = count++;  			BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  		}  		if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  			var iterations = int.Parse (command.Substring (11));  			BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  		}  		if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				BackgroundJob.Delete (jobId);  			}  		}  		if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (5));  				Parallel.For (0' workCount' i => {  					if (i % 2 == 0) {  						BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  					} else {  						BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  					}  				});  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  			BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  		}  		if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  			WriteString ("Hello' Hangfire continuations!");  		}  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: using (new BackgroundJobServer (options)) {  	var count = 1;  	while (true) {  		var command = Console.ReadLine ();  		if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  			break;  		}  		if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (4));  				for (var i = 0; i < workCount; i++) {  					var number = i;  					BackgroundJob.Enqueue<Services> (x => x.Random (number));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (6));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (7));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Error ());  			}  		}  		if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (5));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  			}  		}  		if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  					"Hello"'  					"world!"  				}' new Services.CustomObject {  					Id = 123  				}' DayOfWeek.Friday));  			}  		}  		if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (9));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  					Id = 123  				}' new[] {  					"1"'  					"2"'  					"3"  				}' new[] {  					4'  					5'  					6  				}' new long[0]' null' new List<string> {  					"7"'  					"8"'  					"9"  				}));  			}  		}  		if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  			var seconds = int.Parse (command.Substring (2));  			var number = count++;  			BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  		}  		if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  			var iterations = int.Parse (command.Substring (11));  			BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  		}  		if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				BackgroundJob.Delete (jobId);  			}  		}  		if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (5));  				Parallel.For (0' workCount' i => {  					if (i % 2 == 0) {  						BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  					} else {  						BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  					}  				});  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  			BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  		}  		if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  			WriteString ("Hello' Hangfire continuations!");  		}  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: using (new BackgroundJobServer (options)) {  	var count = 1;  	while (true) {  		var command = Console.ReadLine ();  		if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  			break;  		}  		if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (4));  				for (var i = 0; i < workCount; i++) {  					var number = i;  					BackgroundJob.Enqueue<Services> (x => x.Random (number));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (6));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (7));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Error ());  			}  		}  		if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (5));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  			}  		}  		if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  					"Hello"'  					"world!"  				}' new Services.CustomObject {  					Id = 123  				}' DayOfWeek.Friday));  			}  		}  		if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (9));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  					Id = 123  				}' new[] {  					"1"'  					"2"'  					"3"  				}' new[] {  					4'  					5'  					6  				}' new long[0]' null' new List<string> {  					"7"'  					"8"'  					"9"  				}));  			}  		}  		if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  			var seconds = int.Parse (command.Substring (2));  			var number = count++;  			BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  		}  		if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  			var iterations = int.Parse (command.Substring (11));  			BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  		}  		if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				BackgroundJob.Delete (jobId);  			}  		}  		if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (5));  				Parallel.For (0' workCount' i => {  					if (i % 2 == 0) {  						BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  					} else {  						BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  					}  				});  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  			BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  		}  		if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  			WriteString ("Hello' Hangfire continuations!");  		}  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: using (new BackgroundJobServer (options)) {  	var count = 1;  	while (true) {  		var command = Console.ReadLine ();  		if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  			break;  		}  		if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (4));  				for (var i = 0; i < workCount; i++) {  					var number = i;  					BackgroundJob.Enqueue<Services> (x => x.Random (number));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (6));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (7));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Error ());  			}  		}  		if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (5));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  			}  		}  		if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  					"Hello"'  					"world!"  				}' new Services.CustomObject {  					Id = 123  				}' DayOfWeek.Friday));  			}  		}  		if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (9));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  					Id = 123  				}' new[] {  					"1"'  					"2"'  					"3"  				}' new[] {  					4'  					5'  					6  				}' new long[0]' null' new List<string> {  					"7"'  					"8"'  					"9"  				}));  			}  		}  		if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  			var seconds = int.Parse (command.Substring (2));  			var number = count++;  			BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  		}  		if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  			var iterations = int.Parse (command.Substring (11));  			BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  		}  		if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				BackgroundJob.Delete (jobId);  			}  		}  		if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (5));  				Parallel.For (0' workCount' i => {  					if (i % 2 == 0) {  						BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  					} else {  						BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  					}  				});  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  			BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  		}  		if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  			WriteString ("Hello' Hangfire continuations!");  		}  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: using (new BackgroundJobServer (options)) {  	var count = 1;  	while (true) {  		var command = Console.ReadLine ();  		if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  			break;  		}  		if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (4));  				for (var i = 0; i < workCount; i++) {  					var number = i;  					BackgroundJob.Enqueue<Services> (x => x.Random (number));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (6));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (7));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Error ());  			}  		}  		if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (5));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  			}  		}  		if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  					"Hello"'  					"world!"  				}' new Services.CustomObject {  					Id = 123  				}' DayOfWeek.Friday));  			}  		}  		if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (9));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  					Id = 123  				}' new[] {  					"1"'  					"2"'  					"3"  				}' new[] {  					4'  					5'  					6  				}' new long[0]' null' new List<string> {  					"7"'  					"8"'  					"9"  				}));  			}  		}  		if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  			var seconds = int.Parse (command.Substring (2));  			var number = count++;  			BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  		}  		if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  			var iterations = int.Parse (command.Substring (11));  			BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  		}  		if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				BackgroundJob.Delete (jobId);  			}  		}  		if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (5));  				Parallel.For (0' workCount' i => {  					if (i % 2 == 0) {  						BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  					} else {  						BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  					}  				});  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  			BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  		}  		if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  			WriteString ("Hello' Hangfire continuations!");  		}  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: using (new BackgroundJobServer (options)) {  	var count = 1;  	while (true) {  		var command = Console.ReadLine ();  		if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  			break;  		}  		if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (4));  				for (var i = 0; i < workCount; i++) {  					var number = i;  					BackgroundJob.Enqueue<Services> (x => x.Random (number));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (6));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (7));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Error ());  			}  		}  		if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (5));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  			}  		}  		if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  					"Hello"'  					"world!"  				}' new Services.CustomObject {  					Id = 123  				}' DayOfWeek.Friday));  			}  		}  		if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (9));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  					Id = 123  				}' new[] {  					"1"'  					"2"'  					"3"  				}' new[] {  					4'  					5'  					6  				}' new long[0]' null' new List<string> {  					"7"'  					"8"'  					"9"  				}));  			}  		}  		if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  			var seconds = int.Parse (command.Substring (2));  			var number = count++;  			BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  		}  		if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  			var iterations = int.Parse (command.Substring (11));  			BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  		}  		if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				BackgroundJob.Delete (jobId);  			}  		}  		if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (5));  				Parallel.For (0' workCount' i => {  					if (i % 2 == 0) {  						BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  					} else {  						BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  					}  				});  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  			BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  		}  		if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  			WriteString ("Hello' Hangfire continuations!");  		}  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: using (new BackgroundJobServer (options)) {  	var count = 1;  	while (true) {  		var command = Console.ReadLine ();  		if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  			break;  		}  		if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (4));  				for (var i = 0; i < workCount; i++) {  					var number = i;  					BackgroundJob.Enqueue<Services> (x => x.Random (number));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (6));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (7));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Error ());  			}  		}  		if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (5));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  			}  		}  		if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  					"Hello"'  					"world!"  				}' new Services.CustomObject {  					Id = 123  				}' DayOfWeek.Friday));  			}  		}  		if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (9));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  					Id = 123  				}' new[] {  					"1"'  					"2"'  					"3"  				}' new[] {  					4'  					5'  					6  				}' new long[0]' null' new List<string> {  					"7"'  					"8"'  					"9"  				}));  			}  		}  		if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  			var seconds = int.Parse (command.Substring (2));  			var number = count++;  			BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  		}  		if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  			var iterations = int.Parse (command.Substring (11));  			BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  		}  		if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				BackgroundJob.Delete (jobId);  			}  		}  		if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (5));  				Parallel.For (0' workCount' i => {  					if (i % 2 == 0) {  						BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  					} else {  						BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  					}  				});  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  			BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  		}  		if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  			WriteString ("Hello' Hangfire continuations!");  		}  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: using (new BackgroundJobServer (options)) {  	var count = 1;  	while (true) {  		var command = Console.ReadLine ();  		if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  			break;  		}  		if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (4));  				for (var i = 0; i < workCount; i++) {  					var number = i;  					BackgroundJob.Enqueue<Services> (x => x.Random (number));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (6));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (7));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Error ());  			}  		}  		if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (5));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  			}  		}  		if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  					"Hello"'  					"world!"  				}' new Services.CustomObject {  					Id = 123  				}' DayOfWeek.Friday));  			}  		}  		if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (9));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  					Id = 123  				}' new[] {  					"1"'  					"2"'  					"3"  				}' new[] {  					4'  					5'  					6  				}' new long[0]' null' new List<string> {  					"7"'  					"8"'  					"9"  				}));  			}  		}  		if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  			var seconds = int.Parse (command.Substring (2));  			var number = count++;  			BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  		}  		if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  			var iterations = int.Parse (command.Substring (11));  			BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  		}  		if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				BackgroundJob.Delete (jobId);  			}  		}  		if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (5));  				Parallel.For (0' workCount' i => {  					if (i % 2 == 0) {  						BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  					} else {  						BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  					}  				});  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  			BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  		}  		if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  			WriteString ("Hello' Hangfire continuations!");  		}  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: using (new BackgroundJobServer (options)) {  	var count = 1;  	while (true) {  		var command = Console.ReadLine ();  		if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  			break;  		}  		if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (4));  				for (var i = 0; i < workCount; i++) {  					var number = i;  					BackgroundJob.Enqueue<Services> (x => x.Random (number));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (6));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (7));  				for (var i = 0; i < workCount; i++) {  					BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  				}  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Error ());  			}  		}  		if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (5));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  			}  		}  		if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  					"Hello"'  					"world!"  				}' new Services.CustomObject {  					Id = 123  				}' DayOfWeek.Friday));  			}  		}  		if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (9));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  					Id = 123  				}' new[] {  					"1"'  					"2"'  					"3"  				}' new[] {  					4'  					5'  					6  				}' new long[0]' null' new List<string> {  					"7"'  					"8"'  					"9"  				}));  			}  		}  		if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  			var seconds = int.Parse (command.Substring (2));  			var number = count++;  			BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  		}  		if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  			var iterations = int.Parse (command.Substring (11));  			BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  		}  		if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				BackgroundJob.Delete (jobId);  			}  		}  		if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  			try {  				var workCount = int.Parse (command.Substring (5));  				Parallel.For (0' workCount' i => {  					if (i % 2 == 0) {  						BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  					} else {  						BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  					}  				});  				Console.WriteLine ("Jobs enqueued.");  			} catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  			BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  		}  		if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  			WriteString ("Hello' Hangfire continuations!");  		}  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: while (true) {  	var command = Console.ReadLine ();  	if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  		break;  	}  	if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (4));  			for (var i = 0; i < workCount; i++) {  				var number = i;  				BackgroundJob.Enqueue<Services> (x => x.Random (number));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (6));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Error ());  		}  	}  	if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (5));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  		}  	}  	if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  				"Hello"'  				"world!"  			}' new Services.CustomObject {  				Id = 123  			}' DayOfWeek.Friday));  		}  	}  	if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (9));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  				Id = 123  			}' new[] {  				"1"'  				"2"'  				"3"  			}' new[] {  				4'  				5'  				6  			}' new long[0]' null' new List<string> {  				"7"'  				"8"'  				"9"  			}));  		}  	}  	if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  		var seconds = int.Parse (command.Substring (2));  		var number = count++;  		BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  	}  	if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  		var iterations = int.Parse (command.Substring (11));  		BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  	}  	if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  			BackgroundJob.Delete (jobId);  		}  	}  	if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (5));  			Parallel.For (0' workCount' i => {  				if (i % 2 == 0) {  					BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  				} else {  					BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				}  			});  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  		BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  	}  	if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  		WriteString ("Hello' Hangfire continuations!");  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: while (true) {  	var command = Console.ReadLine ();  	if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  		break;  	}  	if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (4));  			for (var i = 0; i < workCount; i++) {  				var number = i;  				BackgroundJob.Enqueue<Services> (x => x.Random (number));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (6));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Error ());  		}  	}  	if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (5));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  		}  	}  	if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  				"Hello"'  				"world!"  			}' new Services.CustomObject {  				Id = 123  			}' DayOfWeek.Friday));  		}  	}  	if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (9));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  				Id = 123  			}' new[] {  				"1"'  				"2"'  				"3"  			}' new[] {  				4'  				5'  				6  			}' new long[0]' null' new List<string> {  				"7"'  				"8"'  				"9"  			}));  		}  	}  	if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  		var seconds = int.Parse (command.Substring (2));  		var number = count++;  		BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  	}  	if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  		var iterations = int.Parse (command.Substring (11));  		BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  	}  	if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  			BackgroundJob.Delete (jobId);  		}  	}  	if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (5));  			Parallel.For (0' workCount' i => {  				if (i % 2 == 0) {  					BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  				} else {  					BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				}  			});  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  		BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  	}  	if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  		WriteString ("Hello' Hangfire continuations!");  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: while (true) {  	var command = Console.ReadLine ();  	if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  		break;  	}  	if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (4));  			for (var i = 0; i < workCount; i++) {  				var number = i;  				BackgroundJob.Enqueue<Services> (x => x.Random (number));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (6));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Error ());  		}  	}  	if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (5));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  		}  	}  	if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  				"Hello"'  				"world!"  			}' new Services.CustomObject {  				Id = 123  			}' DayOfWeek.Friday));  		}  	}  	if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (9));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  				Id = 123  			}' new[] {  				"1"'  				"2"'  				"3"  			}' new[] {  				4'  				5'  				6  			}' new long[0]' null' new List<string> {  				"7"'  				"8"'  				"9"  			}));  		}  	}  	if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  		var seconds = int.Parse (command.Substring (2));  		var number = count++;  		BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  	}  	if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  		var iterations = int.Parse (command.Substring (11));  		BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  	}  	if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  			BackgroundJob.Delete (jobId);  		}  	}  	if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (5));  			Parallel.For (0' workCount' i => {  				if (i % 2 == 0) {  					BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  				} else {  					BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				}  			});  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  		BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  	}  	if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  		WriteString ("Hello' Hangfire continuations!");  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: while (true) {  	var command = Console.ReadLine ();  	if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  		break;  	}  	if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (4));  			for (var i = 0; i < workCount; i++) {  				var number = i;  				BackgroundJob.Enqueue<Services> (x => x.Random (number));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (6));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Error ());  		}  	}  	if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (5));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  		}  	}  	if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  				"Hello"'  				"world!"  			}' new Services.CustomObject {  				Id = 123  			}' DayOfWeek.Friday));  		}  	}  	if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (9));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  				Id = 123  			}' new[] {  				"1"'  				"2"'  				"3"  			}' new[] {  				4'  				5'  				6  			}' new long[0]' null' new List<string> {  				"7"'  				"8"'  				"9"  			}));  		}  	}  	if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  		var seconds = int.Parse (command.Substring (2));  		var number = count++;  		BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  	}  	if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  		var iterations = int.Parse (command.Substring (11));  		BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  	}  	if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  			BackgroundJob.Delete (jobId);  		}  	}  	if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (5));  			Parallel.For (0' workCount' i => {  				if (i % 2 == 0) {  					BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  				} else {  					BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				}  			});  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  		BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  	}  	if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  		WriteString ("Hello' Hangfire continuations!");  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: while (true) {  	var command = Console.ReadLine ();  	if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  		break;  	}  	if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (4));  			for (var i = 0; i < workCount; i++) {  				var number = i;  				BackgroundJob.Enqueue<Services> (x => x.Random (number));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (6));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Error ());  		}  	}  	if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (5));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  		}  	}  	if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  				"Hello"'  				"world!"  			}' new Services.CustomObject {  				Id = 123  			}' DayOfWeek.Friday));  		}  	}  	if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (9));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  				Id = 123  			}' new[] {  				"1"'  				"2"'  				"3"  			}' new[] {  				4'  				5'  				6  			}' new long[0]' null' new List<string> {  				"7"'  				"8"'  				"9"  			}));  		}  	}  	if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  		var seconds = int.Parse (command.Substring (2));  		var number = count++;  		BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  	}  	if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  		var iterations = int.Parse (command.Substring (11));  		BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  	}  	if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  			BackgroundJob.Delete (jobId);  		}  	}  	if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (5));  			Parallel.For (0' workCount' i => {  				if (i % 2 == 0) {  					BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  				} else {  					BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				}  			});  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  		BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  	}  	if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  		WriteString ("Hello' Hangfire continuations!");  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: while (true) {  	var command = Console.ReadLine ();  	if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  		break;  	}  	if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (4));  			for (var i = 0; i < workCount; i++) {  				var number = i;  				BackgroundJob.Enqueue<Services> (x => x.Random (number));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (6));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Error ());  		}  	}  	if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (5));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  		}  	}  	if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  				"Hello"'  				"world!"  			}' new Services.CustomObject {  				Id = 123  			}' DayOfWeek.Friday));  		}  	}  	if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (9));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  				Id = 123  			}' new[] {  				"1"'  				"2"'  				"3"  			}' new[] {  				4'  				5'  				6  			}' new long[0]' null' new List<string> {  				"7"'  				"8"'  				"9"  			}));  		}  	}  	if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  		var seconds = int.Parse (command.Substring (2));  		var number = count++;  		BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  	}  	if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  		var iterations = int.Parse (command.Substring (11));  		BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  	}  	if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  			BackgroundJob.Delete (jobId);  		}  	}  	if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (5));  			Parallel.For (0' workCount' i => {  				if (i % 2 == 0) {  					BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  				} else {  					BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				}  			});  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  		BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  	}  	if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  		WriteString ("Hello' Hangfire continuations!");  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: while (true) {  	var command = Console.ReadLine ();  	if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  		break;  	}  	if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (4));  			for (var i = 0; i < workCount; i++) {  				var number = i;  				BackgroundJob.Enqueue<Services> (x => x.Random (number));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (6));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Error ());  		}  	}  	if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (5));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  		}  	}  	if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  				"Hello"'  				"world!"  			}' new Services.CustomObject {  				Id = 123  			}' DayOfWeek.Friday));  		}  	}  	if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (9));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  				Id = 123  			}' new[] {  				"1"'  				"2"'  				"3"  			}' new[] {  				4'  				5'  				6  			}' new long[0]' null' new List<string> {  				"7"'  				"8"'  				"9"  			}));  		}  	}  	if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  		var seconds = int.Parse (command.Substring (2));  		var number = count++;  		BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  	}  	if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  		var iterations = int.Parse (command.Substring (11));  		BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  	}  	if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  			BackgroundJob.Delete (jobId);  		}  	}  	if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (5));  			Parallel.For (0' workCount' i => {  				if (i % 2 == 0) {  					BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  				} else {  					BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				}  			});  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  		BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  	}  	if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  		WriteString ("Hello' Hangfire continuations!");  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: while (true) {  	var command = Console.ReadLine ();  	if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  		break;  	}  	if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (4));  			for (var i = 0; i < workCount; i++) {  				var number = i;  				BackgroundJob.Enqueue<Services> (x => x.Random (number));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (6));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Error ());  		}  	}  	if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (5));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  		}  	}  	if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  				"Hello"'  				"world!"  			}' new Services.CustomObject {  				Id = 123  			}' DayOfWeek.Friday));  		}  	}  	if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (9));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  				Id = 123  			}' new[] {  				"1"'  				"2"'  				"3"  			}' new[] {  				4'  				5'  				6  			}' new long[0]' null' new List<string> {  				"7"'  				"8"'  				"9"  			}));  		}  	}  	if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  		var seconds = int.Parse (command.Substring (2));  		var number = count++;  		BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  	}  	if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  		var iterations = int.Parse (command.Substring (11));  		BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  	}  	if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  			BackgroundJob.Delete (jobId);  		}  	}  	if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (5));  			Parallel.For (0' workCount' i => {  				if (i % 2 == 0) {  					BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  				} else {  					BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				}  			});  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  		BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  	}  	if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  		WriteString ("Hello' Hangfire continuations!");  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: while (true) {  	var command = Console.ReadLine ();  	if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  		break;  	}  	if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (4));  			for (var i = 0; i < workCount; i++) {  				var number = i;  				BackgroundJob.Enqueue<Services> (x => x.Random (number));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (6));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Error ());  		}  	}  	if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (5));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  		}  	}  	if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  				"Hello"'  				"world!"  			}' new Services.CustomObject {  				Id = 123  			}' DayOfWeek.Friday));  		}  	}  	if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (9));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  				Id = 123  			}' new[] {  				"1"'  				"2"'  				"3"  			}' new[] {  				4'  				5'  				6  			}' new long[0]' null' new List<string> {  				"7"'  				"8"'  				"9"  			}));  		}  	}  	if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  		var seconds = int.Parse (command.Substring (2));  		var number = count++;  		BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  	}  	if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  		var iterations = int.Parse (command.Substring (11));  		BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  	}  	if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  			BackgroundJob.Delete (jobId);  		}  	}  	if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (5));  			Parallel.For (0' workCount' i => {  				if (i % 2 == 0) {  					BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  				} else {  					BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				}  			});  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  		BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  	}  	if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  		WriteString ("Hello' Hangfire continuations!");  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: while (true) {  	var command = Console.ReadLine ();  	if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  		break;  	}  	if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (4));  			for (var i = 0; i < workCount; i++) {  				var number = i;  				BackgroundJob.Enqueue<Services> (x => x.Random (number));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (6));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Error ());  		}  	}  	if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (5));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  		}  	}  	if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  				"Hello"'  				"world!"  			}' new Services.CustomObject {  				Id = 123  			}' DayOfWeek.Friday));  		}  	}  	if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (9));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  				Id = 123  			}' new[] {  				"1"'  				"2"'  				"3"  			}' new[] {  				4'  				5'  				6  			}' new long[0]' null' new List<string> {  				"7"'  				"8"'  				"9"  			}));  		}  	}  	if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  		var seconds = int.Parse (command.Substring (2));  		var number = count++;  		BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  	}  	if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  		var iterations = int.Parse (command.Substring (11));  		BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  	}  	if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  			BackgroundJob.Delete (jobId);  		}  	}  	if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (5));  			Parallel.For (0' workCount' i => {  				if (i % 2 == 0) {  					BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  				} else {  					BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				}  			});  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  		BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  	}  	if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  		WriteString ("Hello' Hangfire continuations!");  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: while (true) {  	var command = Console.ReadLine ();  	if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  		break;  	}  	if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (4));  			for (var i = 0; i < workCount; i++) {  				var number = i;  				BackgroundJob.Enqueue<Services> (x => x.Random (number));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (6));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Error ());  		}  	}  	if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (5));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  		}  	}  	if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  				"Hello"'  				"world!"  			}' new Services.CustomObject {  				Id = 123  			}' DayOfWeek.Friday));  		}  	}  	if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (9));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  				Id = 123  			}' new[] {  				"1"'  				"2"'  				"3"  			}' new[] {  				4'  				5'  				6  			}' new long[0]' null' new List<string> {  				"7"'  				"8"'  				"9"  			}));  		}  	}  	if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  		var seconds = int.Parse (command.Substring (2));  		var number = count++;  		BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  	}  	if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  		var iterations = int.Parse (command.Substring (11));  		BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  	}  	if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  			BackgroundJob.Delete (jobId);  		}  	}  	if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (5));  			Parallel.For (0' workCount' i => {  				if (i % 2 == 0) {  					BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  				} else {  					BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				}  			});  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  		BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  	}  	if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  		WriteString ("Hello' Hangfire continuations!");  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: while (true) {  	var command = Console.ReadLine ();  	if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  		break;  	}  	if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (4));  			for (var i = 0; i < workCount; i++) {  				var number = i;  				BackgroundJob.Enqueue<Services> (x => x.Random (number));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (6));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Error ());  		}  	}  	if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (5));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  		}  	}  	if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  				"Hello"'  				"world!"  			}' new Services.CustomObject {  				Id = 123  			}' DayOfWeek.Friday));  		}  	}  	if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (9));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  				Id = 123  			}' new[] {  				"1"'  				"2"'  				"3"  			}' new[] {  				4'  				5'  				6  			}' new long[0]' null' new List<string> {  				"7"'  				"8"'  				"9"  			}));  		}  	}  	if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  		var seconds = int.Parse (command.Substring (2));  		var number = count++;  		BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  	}  	if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  		var iterations = int.Parse (command.Substring (11));  		BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  	}  	if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  			BackgroundJob.Delete (jobId);  		}  	}  	if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (5));  			Parallel.For (0' workCount' i => {  				if (i % 2 == 0) {  					BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  				} else {  					BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				}  			});  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  		BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  	}  	if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  		WriteString ("Hello' Hangfire continuations!");  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: while (true) {  	var command = Console.ReadLine ();  	if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  		break;  	}  	if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (4));  			for (var i = 0; i < workCount; i++) {  				var number = i;  				BackgroundJob.Enqueue<Services> (x => x.Random (number));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (6));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Error ());  		}  	}  	if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (5));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  		}  	}  	if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  				"Hello"'  				"world!"  			}' new Services.CustomObject {  				Id = 123  			}' DayOfWeek.Friday));  		}  	}  	if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (9));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  				Id = 123  			}' new[] {  				"1"'  				"2"'  				"3"  			}' new[] {  				4'  				5'  				6  			}' new long[0]' null' new List<string> {  				"7"'  				"8"'  				"9"  			}));  		}  	}  	if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  		var seconds = int.Parse (command.Substring (2));  		var number = count++;  		BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  	}  	if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  		var iterations = int.Parse (command.Substring (11));  		BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  	}  	if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  			BackgroundJob.Delete (jobId);  		}  	}  	if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (5));  			Parallel.For (0' workCount' i => {  				if (i % 2 == 0) {  					BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  				} else {  					BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				}  			});  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  		BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  	}  	if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  		WriteString ("Hello' Hangfire continuations!");  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: while (true) {  	var command = Console.ReadLine ();  	if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  		break;  	}  	if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (4));  			for (var i = 0; i < workCount; i++) {  				var number = i;  				BackgroundJob.Enqueue<Services> (x => x.Random (number));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (6));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Error ());  		}  	}  	if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (5));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  		}  	}  	if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  				"Hello"'  				"world!"  			}' new Services.CustomObject {  				Id = 123  			}' DayOfWeek.Friday));  		}  	}  	if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (9));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  				Id = 123  			}' new[] {  				"1"'  				"2"'  				"3"  			}' new[] {  				4'  				5'  				6  			}' new long[0]' null' new List<string> {  				"7"'  				"8"'  				"9"  			}));  		}  	}  	if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  		var seconds = int.Parse (command.Substring (2));  		var number = count++;  		BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  	}  	if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  		var iterations = int.Parse (command.Substring (11));  		BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  	}  	if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  			BackgroundJob.Delete (jobId);  		}  	}  	if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (5));  			Parallel.For (0' workCount' i => {  				if (i % 2 == 0) {  					BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  				} else {  					BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				}  			});  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  		BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  	}  	if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  		WriteString ("Hello' Hangfire continuations!");  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: while (true) {  	var command = Console.ReadLine ();  	if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  		break;  	}  	if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (4));  			for (var i = 0; i < workCount; i++) {  				var number = i;  				BackgroundJob.Enqueue<Services> (x => x.Random (number));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (6));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Error ());  		}  	}  	if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (5));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  		}  	}  	if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  				"Hello"'  				"world!"  			}' new Services.CustomObject {  				Id = 123  			}' DayOfWeek.Friday));  		}  	}  	if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (9));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  				Id = 123  			}' new[] {  				"1"'  				"2"'  				"3"  			}' new[] {  				4'  				5'  				6  			}' new long[0]' null' new List<string> {  				"7"'  				"8"'  				"9"  			}));  		}  	}  	if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  		var seconds = int.Parse (command.Substring (2));  		var number = count++;  		BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  	}  	if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  		var iterations = int.Parse (command.Substring (11));  		BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  	}  	if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  			BackgroundJob.Delete (jobId);  		}  	}  	if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (5));  			Parallel.For (0' workCount' i => {  				if (i % 2 == 0) {  					BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  				} else {  					BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				}  			});  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  		BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  	}  	if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  		WriteString ("Hello' Hangfire continuations!");  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: while (true) {  	var command = Console.ReadLine ();  	if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  		break;  	}  	if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (4));  			for (var i = 0; i < workCount; i++) {  				var number = i;  				BackgroundJob.Enqueue<Services> (x => x.Random (number));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (6));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Error ());  		}  	}  	if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (5));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  		}  	}  	if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  				"Hello"'  				"world!"  			}' new Services.CustomObject {  				Id = 123  			}' DayOfWeek.Friday));  		}  	}  	if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (9));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  				Id = 123  			}' new[] {  				"1"'  				"2"'  				"3"  			}' new[] {  				4'  				5'  				6  			}' new long[0]' null' new List<string> {  				"7"'  				"8"'  				"9"  			}));  		}  	}  	if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  		var seconds = int.Parse (command.Substring (2));  		var number = count++;  		BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  	}  	if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  		var iterations = int.Parse (command.Substring (11));  		BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  	}  	if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  			BackgroundJob.Delete (jobId);  		}  	}  	if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (5));  			Parallel.For (0' workCount' i => {  				if (i % 2 == 0) {  					BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  				} else {  					BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				}  			});  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  		BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  	}  	if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  		WriteString ("Hello' Hangfire continuations!");  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: while (true) {  	var command = Console.ReadLine ();  	if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  		break;  	}  	if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (4));  			for (var i = 0; i < workCount; i++) {  				var number = i;  				BackgroundJob.Enqueue<Services> (x => x.Random (number));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (6));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Error ());  		}  	}  	if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (5));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  		}  	}  	if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  				"Hello"'  				"world!"  			}' new Services.CustomObject {  				Id = 123  			}' DayOfWeek.Friday));  		}  	}  	if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (9));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  				Id = 123  			}' new[] {  				"1"'  				"2"'  				"3"  			}' new[] {  				4'  				5'  				6  			}' new long[0]' null' new List<string> {  				"7"'  				"8"'  				"9"  			}));  		}  	}  	if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  		var seconds = int.Parse (command.Substring (2));  		var number = count++;  		BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  	}  	if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  		var iterations = int.Parse (command.Substring (11));  		BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  	}  	if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  			BackgroundJob.Delete (jobId);  		}  	}  	if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (5));  			Parallel.For (0' workCount' i => {  				if (i % 2 == 0) {  					BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  				} else {  					BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				}  			});  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  		BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  	}  	if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  		WriteString ("Hello' Hangfire continuations!");  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: while (true) {  	var command = Console.ReadLine ();  	if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  		break;  	}  	if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (4));  			for (var i = 0; i < workCount; i++) {  				var number = i;  				BackgroundJob.Enqueue<Services> (x => x.Random (number));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (6));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Error ());  		}  	}  	if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (5));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  		}  	}  	if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  				"Hello"'  				"world!"  			}' new Services.CustomObject {  				Id = 123  			}' DayOfWeek.Friday));  		}  	}  	if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (9));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  				Id = 123  			}' new[] {  				"1"'  				"2"'  				"3"  			}' new[] {  				4'  				5'  				6  			}' new long[0]' null' new List<string> {  				"7"'  				"8"'  				"9"  			}));  		}  	}  	if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  		var seconds = int.Parse (command.Substring (2));  		var number = count++;  		BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  	}  	if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  		var iterations = int.Parse (command.Substring (11));  		BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  	}  	if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  			BackgroundJob.Delete (jobId);  		}  	}  	if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (5));  			Parallel.For (0' workCount' i => {  				if (i % 2 == 0) {  					BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  				} else {  					BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				}  			});  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  		BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  	}  	if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  		WriteString ("Hello' Hangfire continuations!");  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: while (true) {  	var command = Console.ReadLine ();  	if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  		break;  	}  	if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (4));  			for (var i = 0; i < workCount; i++) {  				var number = i;  				BackgroundJob.Enqueue<Services> (x => x.Random (number));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (6));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Error ());  		}  	}  	if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (5));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  		}  	}  	if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  				"Hello"'  				"world!"  			}' new Services.CustomObject {  				Id = 123  			}' DayOfWeek.Friday));  		}  	}  	if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (9));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  				Id = 123  			}' new[] {  				"1"'  				"2"'  				"3"  			}' new[] {  				4'  				5'  				6  			}' new long[0]' null' new List<string> {  				"7"'  				"8"'  				"9"  			}));  		}  	}  	if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  		var seconds = int.Parse (command.Substring (2));  		var number = count++;  		BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  	}  	if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  		var iterations = int.Parse (command.Substring (11));  		BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  	}  	if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  			BackgroundJob.Delete (jobId);  		}  	}  	if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (5));  			Parallel.For (0' workCount' i => {  				if (i % 2 == 0) {  					BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  				} else {  					BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				}  			});  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  		BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  	}  	if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  		WriteString ("Hello' Hangfire continuations!");  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: while (true) {  	var command = Console.ReadLine ();  	if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  		break;  	}  	if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (4));  			for (var i = 0; i < workCount; i++) {  				var number = i;  				BackgroundJob.Enqueue<Services> (x => x.Random (number));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (6));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Error ());  		}  	}  	if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (5));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  		}  	}  	if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  				"Hello"'  				"world!"  			}' new Services.CustomObject {  				Id = 123  			}' DayOfWeek.Friday));  		}  	}  	if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (9));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  				Id = 123  			}' new[] {  				"1"'  				"2"'  				"3"  			}' new[] {  				4'  				5'  				6  			}' new long[0]' null' new List<string> {  				"7"'  				"8"'  				"9"  			}));  		}  	}  	if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  		var seconds = int.Parse (command.Substring (2));  		var number = count++;  		BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  	}  	if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  		var iterations = int.Parse (command.Substring (11));  		BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  	}  	if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  			BackgroundJob.Delete (jobId);  		}  	}  	if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (5));  			Parallel.For (0' workCount' i => {  				if (i % 2 == 0) {  					BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  				} else {  					BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				}  			});  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  		BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  	}  	if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  		WriteString ("Hello' Hangfire continuations!");  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: while (true) {  	var command = Console.ReadLine ();  	if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  		break;  	}  	if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (4));  			for (var i = 0; i < workCount; i++) {  				var number = i;  				BackgroundJob.Enqueue<Services> (x => x.Random (number));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (6));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Error ());  		}  	}  	if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (5));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  		}  	}  	if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  				"Hello"'  				"world!"  			}' new Services.CustomObject {  				Id = 123  			}' DayOfWeek.Friday));  		}  	}  	if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (9));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  				Id = 123  			}' new[] {  				"1"'  				"2"'  				"3"  			}' new[] {  				4'  				5'  				6  			}' new long[0]' null' new List<string> {  				"7"'  				"8"'  				"9"  			}));  		}  	}  	if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  		var seconds = int.Parse (command.Substring (2));  		var number = count++;  		BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  	}  	if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  		var iterations = int.Parse (command.Substring (11));  		BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  	}  	if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  			BackgroundJob.Delete (jobId);  		}  	}  	if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (5));  			Parallel.For (0' workCount' i => {  				if (i % 2 == 0) {  					BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  				} else {  					BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				}  			});  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  		BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  	}  	if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  		WriteString ("Hello' Hangfire continuations!");  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: while (true) {  	var command = Console.ReadLine ();  	if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  		break;  	}  	if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (4));  			for (var i = 0; i < workCount; i++) {  				var number = i;  				BackgroundJob.Enqueue<Services> (x => x.Random (number));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (6));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Error ());  		}  	}  	if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (5));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  		}  	}  	if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  				"Hello"'  				"world!"  			}' new Services.CustomObject {  				Id = 123  			}' DayOfWeek.Friday));  		}  	}  	if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (9));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  				Id = 123  			}' new[] {  				"1"'  				"2"'  				"3"  			}' new[] {  				4'  				5'  				6  			}' new long[0]' null' new List<string> {  				"7"'  				"8"'  				"9"  			}));  		}  	}  	if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  		var seconds = int.Parse (command.Substring (2));  		var number = count++;  		BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  	}  	if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  		var iterations = int.Parse (command.Substring (11));  		BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  	}  	if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  			BackgroundJob.Delete (jobId);  		}  	}  	if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (5));  			Parallel.For (0' workCount' i => {  				if (i % 2 == 0) {  					BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  				} else {  					BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				}  			});  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  		BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  	}  	if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  		WriteString ("Hello' Hangfire continuations!");  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: while (true) {  	var command = Console.ReadLine ();  	if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  		break;  	}  	if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (4));  			for (var i = 0; i < workCount; i++) {  				var number = i;  				BackgroundJob.Enqueue<Services> (x => x.Random (number));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (6));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Error ());  		}  	}  	if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (5));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  		}  	}  	if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  				"Hello"'  				"world!"  			}' new Services.CustomObject {  				Id = 123  			}' DayOfWeek.Friday));  		}  	}  	if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (9));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  				Id = 123  			}' new[] {  				"1"'  				"2"'  				"3"  			}' new[] {  				4'  				5'  				6  			}' new long[0]' null' new List<string> {  				"7"'  				"8"'  				"9"  			}));  		}  	}  	if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  		var seconds = int.Parse (command.Substring (2));  		var number = count++;  		BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  	}  	if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  		var iterations = int.Parse (command.Substring (11));  		BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  	}  	if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  			BackgroundJob.Delete (jobId);  		}  	}  	if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (5));  			Parallel.For (0' workCount' i => {  				if (i % 2 == 0) {  					BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  				} else {  					BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				}  			});  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  		BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  	}  	if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  		WriteString ("Hello' Hangfire continuations!");  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: while (true) {  	var command = Console.ReadLine ();  	if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  		break;  	}  	if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (4));  			for (var i = 0; i < workCount; i++) {  				var number = i;  				BackgroundJob.Enqueue<Services> (x => x.Random (number));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (6));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Error ());  		}  	}  	if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (5));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  		}  	}  	if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  				"Hello"'  				"world!"  			}' new Services.CustomObject {  				Id = 123  			}' DayOfWeek.Friday));  		}  	}  	if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (9));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  				Id = 123  			}' new[] {  				"1"'  				"2"'  				"3"  			}' new[] {  				4'  				5'  				6  			}' new long[0]' null' new List<string> {  				"7"'  				"8"'  				"9"  			}));  		}  	}  	if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  		var seconds = int.Parse (command.Substring (2));  		var number = count++;  		BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  	}  	if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  		var iterations = int.Parse (command.Substring (11));  		BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  	}  	if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  			BackgroundJob.Delete (jobId);  		}  	}  	if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (5));  			Parallel.For (0' workCount' i => {  				if (i % 2 == 0) {  					BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  				} else {  					BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				}  			});  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  		BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  	}  	if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  		WriteString ("Hello' Hangfire continuations!");  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: while (true) {  	var command = Console.ReadLine ();  	if (command == null || command.Equals ("stop"' StringComparison.OrdinalIgnoreCase)) {  		break;  	}  	if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (4));  			for (var i = 0; i < workCount; i++) {  				var number = i;  				BackgroundJob.Enqueue<Services> (x => x.Random (number));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (6));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (7));  			for (var i = 0; i < workCount; i++) {  				BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  			}  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (6));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Error ());  		}  	}  	if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (5));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  		}  	}  	if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  				"Hello"'  				"world!"  			}' new Services.CustomObject {  				Id = 123  			}' DayOfWeek.Friday));  		}  	}  	if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (9));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  				Id = 123  			}' new[] {  				"1"'  				"2"'  				"3"  			}' new[] {  				4'  				5'  				6  			}' new long[0]' null' new List<string> {  				"7"'  				"8"'  				"9"  			}));  		}  	}  	if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  		var seconds = int.Parse (command.Substring (2));  		var number = count++;  		BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  	}  	if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  		var iterations = int.Parse (command.Substring (11));  		BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  	}  	if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  			BackgroundJob.Delete (jobId);  		}  	}  	if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  		try {  			var workCount = int.Parse (command.Substring (5));  			Parallel.For (0' workCount' i => {  				if (i % 2 == 0) {  					BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  				} else {  					BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  				}  			});  			Console.WriteLine ("Jobs enqueued.");  		} catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	if (command.StartsWith ("generic"' StringComparison.OrdinalIgnoreCase)) {  		BackgroundJob.Enqueue<GenericServices<string>> (x => x.Method ("hello"' 1));  	}  	if (command.StartsWith ("continuations"' StringComparison.OrdinalIgnoreCase)) {  		WriteString ("Hello' Hangfire continuations!");  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: if (command.StartsWith ("add"' StringComparison.OrdinalIgnoreCase)) {  	try {  		var workCount = int.Parse (command.Substring (4));  		for (var i = 0; i < workCount; i++) {  			var number = i;  			BackgroundJob.Enqueue<Services> (x => x.Random (number));  		}  		Console.WriteLine ("Jobs enqueued.");  	} catch (Exception ex) {  		Console.WriteLine (ex.Message);  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: try {  	var workCount = int.Parse (command.Substring (4));  	for (var i = 0; i < workCount; i++) {  		var number = i;  		BackgroundJob.Enqueue<Services> (x => x.Random (number));  	}  	Console.WriteLine ("Jobs enqueued.");  } catch (Exception ex) {  	Console.WriteLine (ex.Message);  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: if (command.StartsWith ("async"' StringComparison.OrdinalIgnoreCase)) {  	try {  		var workCount = int.Parse (command.Substring (6));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  		}  		Console.WriteLine ("Jobs enqueued.");  	} catch (Exception ex) {  		Console.WriteLine (ex.Message);  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: try {  	var workCount = int.Parse (command.Substring (6));  	for (var i = 0; i < workCount; i++) {  		BackgroundJob.Enqueue<Services> (x => x.Async (CancellationToken.None));  	}  	Console.WriteLine ("Jobs enqueued.");  } catch (Exception ex) {  	Console.WriteLine (ex.Message);  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: if (command.StartsWith ("static"' StringComparison.OrdinalIgnoreCase)) {  	try {  		var workCount = int.Parse (command.Substring (7));  		for (var i = 0; i < workCount; i++) {  			BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  		}  		Console.WriteLine ("Jobs enqueued.");  	} catch (Exception ex) {  		Console.WriteLine (ex.Message);  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: try {  	var workCount = int.Parse (command.Substring (7));  	for (var i = 0; i < workCount; i++) {  		BackgroundJob.Enqueue (() => Console.WriteLine ("Hello' {0}!"' "world"));  	}  	Console.WriteLine ("Jobs enqueued.");  } catch (Exception ex) {  	Console.WriteLine (ex.Message);  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: if (command.StartsWith ("error"' StringComparison.OrdinalIgnoreCase)) {  	var workCount = int.Parse (command.Substring (6));  	for (var i = 0; i < workCount; i++) {  		BackgroundJob.Enqueue<Services> (x => x.Error ());  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  	var workCount = int.Parse (command.Substring (5));  	for (var i = 0; i < workCount; i++) {  		BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: if (command.StartsWith ("args"' StringComparison.OrdinalIgnoreCase)) {  	var workCount = int.Parse (command.Substring (5));  	for (var i = 0; i < workCount; i++) {  		BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < workCount; i++) {  	BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: BackgroundJob.Enqueue<Services> (x => x.Args (Guid.NewGuid ().ToString ()' 14442' DateTime.UtcNow));  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  	var workCount = int.Parse (command.Substring (7));  	for (var i = 0; i < workCount; i++) {  		BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  			"Hello"'  			"world!"  		}' new Services.CustomObject {  			Id = 123  		}' DayOfWeek.Friday));  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: if (command.StartsWith ("custom"' StringComparison.OrdinalIgnoreCase)) {  	var workCount = int.Parse (command.Substring (7));  	for (var i = 0; i < workCount; i++) {  		BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  			"Hello"'  			"world!"  		}' new Services.CustomObject {  			Id = 123  		}' DayOfWeek.Friday));  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < workCount; i++) {  	BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  		"Hello"'  		"world!"  	}' new Services.CustomObject {  		Id = 123  	}' DayOfWeek.Friday));  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: BackgroundJob.Enqueue<Services> (x => x.Custom (new Random ().Next ()' new[] {  	"Hello"'  	"world!"  }' new Services.CustomObject {  	Id = 123  }' DayOfWeek.Friday));  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  	var workCount = int.Parse (command.Substring (9));  	for (var i = 0; i < workCount; i++) {  		BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  			Id = 123  		}' new[] {  			"1"'  			"2"'  			"3"  		}' new[] {  			4'  			5'  			6  		}' new long[0]' null' new List<string> {  			"7"'  			"8"'  			"9"  		}));  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  	var workCount = int.Parse (command.Substring (9));  	for (var i = 0; i < workCount; i++) {  		BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  			Id = 123  		}' new[] {  			"1"'  			"2"'  			"3"  		}' new[] {  			4'  			5'  			6  		}' new long[0]' null' new List<string> {  			"7"'  			"8"'  			"9"  		}));  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  	var workCount = int.Parse (command.Substring (9));  	for (var i = 0; i < workCount; i++) {  		BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  			Id = 123  		}' new[] {  			"1"'  			"2"'  			"3"  		}' new[] {  			4'  			5'  			6  		}' new long[0]' null' new List<string> {  			"7"'  			"8"'  			"9"  		}));  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  	var workCount = int.Parse (command.Substring (9));  	for (var i = 0; i < workCount; i++) {  		BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  			Id = 123  		}' new[] {  			"1"'  			"2"'  			"3"  		}' new[] {  			4'  			5'  			6  		}' new long[0]' null' new List<string> {  			"7"'  			"8"'  			"9"  		}));  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  	var workCount = int.Parse (command.Substring (9));  	for (var i = 0; i < workCount; i++) {  		BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  			Id = 123  		}' new[] {  			"1"'  			"2"'  			"3"  		}' new[] {  			4'  			5'  			6  		}' new long[0]' null' new List<string> {  			"7"'  			"8"'  			"9"  		}));  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  	var workCount = int.Parse (command.Substring (9));  	for (var i = 0; i < workCount; i++) {  		BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  			Id = 123  		}' new[] {  			"1"'  			"2"'  			"3"  		}' new[] {  			4'  			5'  			6  		}' new long[0]' null' new List<string> {  			"7"'  			"8"'  			"9"  		}));  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  	var workCount = int.Parse (command.Substring (9));  	for (var i = 0; i < workCount; i++) {  		BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  			Id = 123  		}' new[] {  			"1"'  			"2"'  			"3"  		}' new[] {  			4'  			5'  			6  		}' new long[0]' null' new List<string> {  			"7"'  			"8"'  			"9"  		}));  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  	var workCount = int.Parse (command.Substring (9));  	for (var i = 0; i < workCount; i++) {  		BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  			Id = 123  		}' new[] {  			"1"'  			"2"'  			"3"  		}' new[] {  			4'  			5'  			6  		}' new long[0]' null' new List<string> {  			"7"'  			"8"'  			"9"  		}));  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  	var workCount = int.Parse (command.Substring (9));  	for (var i = 0; i < workCount; i++) {  		BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  			Id = 123  		}' new[] {  			"1"'  			"2"'  			"3"  		}' new[] {  			4'  			5'  			6  		}' new long[0]' null' new List<string> {  			"7"'  			"8"'  			"9"  		}));  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  	var workCount = int.Parse (command.Substring (9));  	for (var i = 0; i < workCount; i++) {  		BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  			Id = 123  		}' new[] {  			"1"'  			"2"'  			"3"  		}' new[] {  			4'  			5'  			6  		}' new long[0]' null' new List<string> {  			"7"'  			"8"'  			"9"  		}));  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  	var workCount = int.Parse (command.Substring (9));  	for (var i = 0; i < workCount; i++) {  		BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  			Id = 123  		}' new[] {  			"1"'  			"2"'  			"3"  		}' new[] {  			4'  			5'  			6  		}' new long[0]' null' new List<string> {  			"7"'  			"8"'  			"9"  		}));  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: if (command.StartsWith ("fullargs"' StringComparison.OrdinalIgnoreCase)) {  	var workCount = int.Parse (command.Substring (9));  	for (var i = 0; i < workCount; i++) {  		BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  			Id = 123  		}' new[] {  			"1"'  			"2"'  			"3"  		}' new[] {  			4'  			5'  			6  		}' new long[0]' null' new List<string> {  			"7"'  			"8"'  			"9"  		}));  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < workCount; i++) {  	BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  		Id = 123  	}' new[] {  		"1"'  		"2"'  		"3"  	}' new[] {  		4'  		5'  		6  	}' new long[0]' null' new List<string> {  		"7"'  		"8"'  		"9"  	}));  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < workCount; i++) {  	BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  		Id = 123  	}' new[] {  		"1"'  		"2"'  		"3"  	}' new[] {  		4'  		5'  		6  	}' new long[0]' null' new List<string> {  		"7"'  		"8"'  		"9"  	}));  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < workCount; i++) {  	BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  		Id = 123  	}' new[] {  		"1"'  		"2"'  		"3"  	}' new[] {  		4'  		5'  		6  	}' new long[0]' null' new List<string> {  		"7"'  		"8"'  		"9"  	}));  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < workCount; i++) {  	BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  		Id = 123  	}' new[] {  		"1"'  		"2"'  		"3"  	}' new[] {  		4'  		5'  		6  	}' new long[0]' null' new List<string> {  		"7"'  		"8"'  		"9"  	}));  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < workCount; i++) {  	BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  		Id = 123  	}' new[] {  		"1"'  		"2"'  		"3"  	}' new[] {  		4'  		5'  		6  	}' new long[0]' null' new List<string> {  		"7"'  		"8"'  		"9"  	}));  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < workCount; i++) {  	BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  		Id = 123  	}' new[] {  		"1"'  		"2"'  		"3"  	}' new[] {  		4'  		5'  		6  	}' new long[0]' null' new List<string> {  		"7"'  		"8"'  		"9"  	}));  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < workCount; i++) {  	BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  		Id = 123  	}' new[] {  		"1"'  		"2"'  		"3"  	}' new[] {  		4'  		5'  		6  	}' new long[0]' null' new List<string> {  		"7"'  		"8"'  		"9"  	}));  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < workCount; i++) {  	BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  		Id = 123  	}' new[] {  		"1"'  		"2"'  		"3"  	}' new[] {  		4'  		5'  		6  	}' new long[0]' null' new List<string> {  		"7"'  		"8"'  		"9"  	}));  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < workCount; i++) {  	BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  		Id = 123  	}' new[] {  		"1"'  		"2"'  		"3"  	}' new[] {  		4'  		5'  		6  	}' new long[0]' null' new List<string> {  		"7"'  		"8"'  		"9"  	}));  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < workCount; i++) {  	BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  		Id = 123  	}' new[] {  		"1"'  		"2"'  		"3"  	}' new[] {  		4'  		5'  		6  	}' new long[0]' null' new List<string> {  		"7"'  		"8"'  		"9"  	}));  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < workCount; i++) {  	BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  		Id = 123  	}' new[] {  		"1"'  		"2"'  		"3"  	}' new[] {  		4'  		5'  		6  	}' new long[0]' null' new List<string> {  		"7"'  		"8"'  		"9"  	}));  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  	Id = 123  }' new[] {  	"1"'  	"2"'  	"3"  }' new[] {  	4'  	5'  	6  }' new long[0]' null' new List<string> {  	"7"'  	"8"'  	"9"  }));  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  	Id = 123  }' new[] {  	"1"'  	"2"'  	"3"  }' new[] {  	4'  	5'  	6  }' new long[0]' null' new List<string> {  	"7"'  	"8"'  	"9"  }));  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  	Id = 123  }' new[] {  	"1"'  	"2"'  	"3"  }' new[] {  	4'  	5'  	6  }' new long[0]' null' new List<string> {  	"7"'  	"8"'  	"9"  }));  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  	Id = 123  }' new[] {  	"1"'  	"2"'  	"3"  }' new[] {  	4'  	5'  	6  }' new long[0]' null' new List<string> {  	"7"'  	"8"'  	"9"  }));  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  	Id = 123  }' new[] {  	"1"'  	"2"'  	"3"  }' new[] {  	4'  	5'  	6  }' new long[0]' null' new List<string> {  	"7"'  	"8"'  	"9"  }));  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  	Id = 123  }' new[] {  	"1"'  	"2"'  	"3"  }' new[] {  	4'  	5'  	6  }' new long[0]' null' new List<string> {  	"7"'  	"8"'  	"9"  }));  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  	Id = 123  }' new[] {  	"1"'  	"2"'  	"3"  }' new[] {  	4'  	5'  	6  }' new long[0]' null' new List<string> {  	"7"'  	"8"'  	"9"  }));  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  	Id = 123  }' new[] {  	"1"'  	"2"'  	"3"  }' new[] {  	4'  	5'  	6  }' new long[0]' null' new List<string> {  	"7"'  	"8"'  	"9"  }));  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  	Id = 123  }' new[] {  	"1"'  	"2"'  	"3"  }' new[] {  	4'  	5'  	6  }' new long[0]' null' new List<string> {  	"7"'  	"8"'  	"9"  }));  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  	Id = 123  }' new[] {  	"1"'  	"2"'  	"3"  }' new[] {  	4'  	5'  	6  }' new long[0]' null' new List<string> {  	"7"'  	"8"'  	"9"  }));  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: BackgroundJob.Enqueue<Services> (x => x.FullArgs (false' 123' 'c'' DayOfWeek.Monday' "hello"' new TimeSpan (12' 13' 14)' new DateTime (2012' 11' 10)' new Services.CustomObject {  	Id = 123  }' new[] {  	"1"'  	"2"'  	"3"  }' new[] {  	4'  	5'  	6  }' new long[0]' null' new List<string> {  	"7"'  	"8"'  	"9"  }));  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: if (command.StartsWith ("in"' StringComparison.OrdinalIgnoreCase)) {  	var seconds = int.Parse (command.Substring (2));  	var number = count++;  	BackgroundJob.Schedule<Services> (x => x.Random (number)' TimeSpan.FromSeconds (seconds));  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: if (command.StartsWith ("cancelable"' StringComparison.OrdinalIgnoreCase)) {  	var iterations = int.Parse (command.Substring (11));  	BackgroundJob.Enqueue<Services> (x => x.Cancelable (iterations' JobCancellationToken.Null));  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: if (command.StartsWith ("delete"' StringComparison.OrdinalIgnoreCase)) {  	var workCount = int.Parse (command.Substring (7));  	for (var i = 0; i < workCount; i++) {  		var jobId = BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  		BackgroundJob.Delete (jobId);  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  	try {  		var workCount = int.Parse (command.Substring (5));  		Parallel.For (0' workCount' i => {  			if (i % 2 == 0) {  				BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  			} else {  				BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  			}  		});  		Console.WriteLine ("Jobs enqueued.");  	} catch (Exception ex) {  		Console.WriteLine (ex.Message);  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: if (command.StartsWith ("fast"' StringComparison.OrdinalIgnoreCase)) {  	try {  		var workCount = int.Parse (command.Substring (5));  		Parallel.For (0' workCount' i => {  			if (i % 2 == 0) {  				BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  			} else {  				BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  			}  		});  		Console.WriteLine ("Jobs enqueued.");  	} catch (Exception ex) {  		Console.WriteLine (ex.Message);  	}  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: try {  	var workCount = int.Parse (command.Substring (5));  	Parallel.For (0' workCount' i => {  		if (i % 2 == 0) {  			BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  		} else {  			BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  		}  	});  	Console.WriteLine ("Jobs enqueued.");  } catch (Exception ex) {  	Console.WriteLine (ex.Message);  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: try {  	var workCount = int.Parse (command.Substring (5));  	Parallel.For (0' workCount' i => {  		if (i % 2 == 0) {  			BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  		} else {  			BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  		}  	});  	Console.WriteLine ("Jobs enqueued.");  } catch (Exception ex) {  	Console.WriteLine (ex.Message);  }  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: Parallel.For (0' workCount' i => {  	if (i % 2 == 0) {  		BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  	} else {  		BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  	}  });  
Magic Number,ConsoleSample,Program,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Program.cs,Main,The following statement contains a magic number: if (i % 2 == 0) {  	BackgroundJob.Enqueue<Services> (x => x.EmptyCritical ());  } else {  	BackgroundJob.Enqueue<Services> (x => x.EmptyDefault ());  }  
Magic Number,ConsoleSample,Services,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Services.cs,Random,The following statement contains a magic number: lock (Rand) {  	time = Rand.Next (10);  }  
Magic Number,ConsoleSample,Services,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Services.cs,Random,The following statement contains a magic number: time = Rand.Next (10);  
Magic Number,ConsoleSample,Services,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Services.cs,Random,The following statement contains a magic number: if (time < 5) {  	throw new Exception ();  }  
Magic Number,ConsoleSample,Services,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Services.cs,Random,The following statement contains a magic number: Thread.Sleep (TimeSpan.FromSeconds (5 + time));  
Magic Number,ConsoleSample,Services,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Services.cs,Cancelable,The following statement contains a magic number: try {  	for (var i = 1; i <= iterationCount; i++) {  		Thread.Sleep (1000);  		Console.WriteLine ("Performing step {0} of {1}..."' i' iterationCount);  		token.ThrowIfCancellationRequested ();  	}  } catch (OperationCanceledException) {  	Console.WriteLine ("Cancellation requested' exiting...");  	throw;  }  
Magic Number,ConsoleSample,Services,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Services.cs,Cancelable,The following statement contains a magic number: for (var i = 1; i <= iterationCount; i++) {  	Thread.Sleep (1000);  	Console.WriteLine ("Performing step {0} of {1}..."' i' iterationCount);  	token.ThrowIfCancellationRequested ();  }  
Magic Number,ConsoleSample,Services,F:\newReposMay17\HangfireIO_Hangfire\samples\ConsoleSample\Services.cs,Cancelable,The following statement contains a magic number: Thread.Sleep (1000);  
