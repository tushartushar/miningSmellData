Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Hangfire.SqlServer,SqlServerFetchedJob,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerFetchedJob.cs,SqlServerFetchedJob,The method has 5 parameters.
Long Statement,Hangfire.SqlServer,CountersAggregator,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\CountersAggregator.cs,GetAggregationQuery,The length of the statement  "	[Target].[ExpireAt] = (SELECT MAX([ExpireAt]) FROM (VALUES ([Source].ExpireAt)' ([Target].[ExpireAt])) AS MaxExpireAt([ExpireAt]))" is 130.
Long Statement,Hangfire.SqlServer,CountersAggregator,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\CountersAggregator.cs,GetAggregationQuery,The length of the statement  "WHEN NOT MATCHED THEN INSERT ([Key]' [Value]' [ExpireAt]) VALUES ([Source].[Key]' [Source].[Value]' [Source].[ExpireAt]);" is 121.
Long Statement,Hangfire.SqlServer,ExpirationManager,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\ExpirationManager.cs,Execute,The length of the statement  "					affected = ExecuteNonQuery (connection' GetQuery (_storage.SchemaName' table)' cancellationToken' new SqlParameter ("@count"' NumberOfRecordsInSinglePass)' new SqlParameter ("@now"' DateTime.UtcNow)); " is 200.
Long Statement,Hangfire.SqlServer,SqlServerJobQueue,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerJobQueue.cs,Dequeue,The length of the statement  "				return new SqlServerFetchedJob (_storage' connection' transaction' fetchedJob.JobId.ToString (CultureInfo.InvariantCulture)' fetchedJob.Queue); " is 143.
Long Statement,Hangfire.SqlServer,SqlServerMonitoringApi,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerMonitoringApi.cs,ProcessingJobs,The length of the statement  "	return UseConnection (connection => GetJobs (connection' from' count' ProcessingState.StateName' (sqlJob' job' stateData) => new ProcessingJobDto { " is 147.
Long Statement,Hangfire.SqlServer,SqlServerMonitoringApi,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerMonitoringApi.cs,ScheduledJobs,The length of the statement  "	return UseConnection (connection => GetJobs (connection' from' count' ScheduledState.StateName' (sqlJob' job' stateData) => new ScheduledJobDto { " is 145.
Long Statement,Hangfire.SqlServer,SqlServerMonitoringApi,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerMonitoringApi.cs,Servers,The length of the statement  "		var servers = connection.Query<Entities.Server> (@"select * from [{_storage.SchemaName}].Server with (nolock)"' commandTimeout: _storage.CommandTimeout).ToList (); " is 163.
Long Statement,Hangfire.SqlServer,SqlServerMonitoringApi,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerMonitoringApi.cs,FailedJobs,The length of the statement  "	return UseConnection (connection => GetJobs (connection' from' count' FailedState.StateName' (sqlJob' job' stateData) => new FailedJobDto { " is 139.
Long Statement,Hangfire.SqlServer,SqlServerMonitoringApi,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerMonitoringApi.cs,SucceededJobs,The length of the statement  "	return UseConnection (connection => GetJobs (connection' from' count' SucceededState.StateName' (sqlJob' job' stateData) => new SucceededJobDto { " is 145.
Long Statement,Hangfire.SqlServer,SqlServerMonitoringApi,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerMonitoringApi.cs,SucceededJobs,The length of the statement  "		TotalDuration = stateData.ContainsKey ("PerformanceDuration") && stateData.ContainsKey ("Latency") ? (long?)long.Parse (stateData ["PerformanceDuration"]) + (long?)long.Parse (stateData ["Latency"]) : null' " is 206.
Long Statement,Hangfire.SqlServer,SqlServerMonitoringApi,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerMonitoringApi.cs,DeletedJobs,The length of the statement  "	return UseConnection (connection => GetJobs (connection' from' count' DeletedState.StateName' (sqlJob' job' stateData) => new DeletedJobDto { " is 141.
Long Statement,Hangfire.SqlServer,SqlServerMonitoringApi,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerMonitoringApi.cs,Queues,The length of the statement  "	var tuples = _storage.QueueProviders.Select (x => x.GetJobQueueMonitoringApi ()).SelectMany (x => x.GetQueues ()' (monitoring' queue) => new { " is 142.
Long Statement,Hangfire.SqlServer,SqlServerMonitoringApi,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerMonitoringApi.cs,Queues,The length of the statement  "		var firstJobs = UseConnection (connection => EnqueuedJobs (connection' enqueuedJobIds.Select (x => (long)x).ToArray ())); " is 121.
Long Statement,Hangfire.SqlServer,SqlServerMonitoringApi,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerMonitoringApi.cs,JobDetails,The length of the statement  "				Data = new Dictionary<string' string> (JobHelper.FromJson<Dictionary<string' string>> (x.Data)' StringComparer.OrdinalIgnoreCase)' " is 130.
Long Statement,Hangfire.SqlServer,SqlServerObjectsInstaller,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerObjectsInstaller.cs,Install,The length of the statement  "		throw new PlatformNotSupportedException ("The SQL Server edition of the target server is unsupported' e.g. SQL Azure."); " is 120.
Long Statement,Hangfire.SqlServer,SqlServerObjectsInstaller,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerObjectsInstaller.cs,Install,The length of the statement  "	var script = GetStringResource (typeof(SqlServerObjectsInstaller).GetTypeInfo ().Assembly' "Hangfire.SqlServer.Install.sql"); " is 125.
Long Statement,Hangfire.SqlServer,SqlServerObjectsInstaller,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerObjectsInstaller.cs,Install,The length of the statement  "	script = script.Replace ("SET @TARGET_SCHEMA_VERSION = 5;"' "SET @TARGET_SCHEMA_VERSION = " + RequiredSchemaVersion + ";"); " is 123.
Long Statement,Hangfire.SqlServer,SqlServerJobQueueMonitoringApi,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerJobQueueMonitoringApi.cs,GetQueues,The length of the statement  "				return connection.Query (sqlQuery' transaction: transaction' commandTimeout: _storage.CommandTimeout).Select (x => (string)x.Queue).ToList (); " is 142.
Long Statement,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,Commit,The length of the statement  "			connection.Execute ("set nocount on;" + "exec sp_getapplock @Resource=@resource' @LockMode=N'Exclusive'"' _lockedResources.Select (x => new { " is 141.
Long Statement,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,ExpireJob,The length of the statement  "	QueueCommand ((connection' transaction) => connection.Execute (@"update [{_storage.SchemaName}].Job set ExpireAt = @expireAt where Id = @id"' new { " is 147.
Long Statement,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,PersistJob,The length of the statement  "	QueueCommand ((connection' transaction) => connection.Execute (@"update [{_storage.SchemaName}].Job set ExpireAt = NULL where Id = @id"' new { " is 142.
Long Statement,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,IncrementCounter,The length of the statement  "	QueueCommand ((connection' transaction) => connection.Execute (@"insert into [{_storage.SchemaName}].Counter ([Key]' [Value]) values (@key' @value)"' new { " is 155.
Long Statement,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,IncrementCounter,The length of the statement  "	QueueCommand ((connection' transaction) => connection.Execute (@"insert into [{_storage.SchemaName}].Counter ([Key]' [Value]' [ExpireAt]) values (@key' @value' @expireAt)"' new { " is 178.
Long Statement,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,DecrementCounter,The length of the statement  "	QueueCommand ((connection' transaction) => connection.Execute (@"insert into [{_storage.SchemaName}].Counter ([Key]' [Value]) values (@key' @value)"' new { " is 155.
Long Statement,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,DecrementCounter,The length of the statement  "	QueueCommand ((connection' transaction) => connection.Execute (@"insert into [{_storage.SchemaName}].Counter ([Key]' [Value]' [ExpireAt]) values (@key' @value' @expireAt)"' new { " is 178.
Long Statement,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,InsertToList,The length of the statement  "	QueueCommand ((connection' transaction) => connection.Execute (@"insert into [{_storage.SchemaName}].List ([Key]' Value) values (@key' @value);"' new { " is 151.
Long Statement,Hangfire.SqlServer,SqlServerWriteOnlyTransaction,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerWriteOnlyTransaction.cs,RemoveFromList,The length of the statement  "	QueueCommand ((connection' transaction) => connection.Execute (@"delete from [{_storage.SchemaName}].List where [Key] = @key and Value = @value"' new { " is 151.
Empty Catch Block,Hangfire.SqlServer,SqlServerFetchedJob,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerFetchedJob.cs,ExecuteKeepAliveQuery,The method has an empty catch block.
Magic Number,Hangfire.SqlServer,SqlServerMonitoringApi,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerMonitoringApi.cs,Queues,The following statement contains a magic number: foreach (var tuple in tuples) {  	var enqueuedJobIds = tuple.Monitoring.GetEnqueuedJobIds (tuple.Queue' 0' 5);  	var counters = tuple.Monitoring.GetEnqueuedAndFetchedCount (tuple.Queue);  	// TODO: Remove the Select method call to support `bigint`.  	var firstJobs = UseConnection (connection => EnqueuedJobs (connection' enqueuedJobIds.Select (x => (long)x).ToArray ()));  	result.Add (new QueueWithTopEnqueuedJobsDto {  		Name = tuple.Queue'  		Length = counters.EnqueuedCount ?? 0'  		Fetched = counters.FetchedCount'  		FirstJobs = firstJobs  	});  }  
Magic Number,Hangfire.SqlServer,SqlServerObjectsInstaller,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerObjectsInstaller.cs,Install,The following statement contains a magic number: for (var i = 0; i < RetryAttempts; i++) {  	try {  		connection.Execute (script' commandTimeout: 0);  		break;  	} catch (DbException ex) {  		if (ex.ErrorCode == 1205) {  			Log.WarnException ("Deadlock occurred during automatic migration execution. Retrying..."' ex);  		} else {  			throw;  		}  	}  }  
Magic Number,Hangfire.SqlServer,SqlServerObjectsInstaller,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerObjectsInstaller.cs,Install,The following statement contains a magic number: try {  	connection.Execute (script' commandTimeout: 0);  	break;  } catch (DbException ex) {  	if (ex.ErrorCode == 1205) {  		Log.WarnException ("Deadlock occurred during automatic migration execution. Retrying..."' ex);  	} else {  		throw;  	}  }  
Magic Number,Hangfire.SqlServer,SqlServerObjectsInstaller,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerObjectsInstaller.cs,Install,The following statement contains a magic number: if (ex.ErrorCode == 1205) {  	Log.WarnException ("Deadlock occurred during automatic migration execution. Retrying..."' ex);  } else {  	throw;  }  
Magic Number,Hangfire.SqlServer,SqlServerStorageOptions,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerStorageOptions.cs,SqlServerStorageOptions,The following statement contains a magic number: QueuePollInterval = TimeSpan.FromSeconds (15);  
Magic Number,Hangfire.SqlServer,SqlServerStorageOptions,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerStorageOptions.cs,SqlServerStorageOptions,The following statement contains a magic number: InvisibilityTimeout = TimeSpan.FromMinutes (30);  
Magic Number,Hangfire.SqlServer,SqlServerStorageOptions,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerStorageOptions.cs,SqlServerStorageOptions,The following statement contains a magic number: JobExpirationCheckInterval = TimeSpan.FromMinutes (30);  
Magic Number,Hangfire.SqlServer,SqlServerStorageOptions,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerStorageOptions.cs,SqlServerStorageOptions,The following statement contains a magic number: CountersAggregateInterval = TimeSpan.FromMinutes (5);  
Magic Number,Hangfire.SqlServer,SqlServerStorageOptions,F:\newReposMay17\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerStorageOptions.cs,SqlServerStorageOptions,The following statement contains a magic number: DashboardJobListLimit = 10000;  
