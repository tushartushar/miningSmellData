Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Hangfire.SqlServer,SqlServerTransactionJob,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerTransactionJob.cs,SqlServerTransactionJob,The method has 5 parameters. Parameters: storage' connection' transaction' jobId' queue
Long Parameter List,Hangfire.SqlServer,SqlServerMonitoringApi,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerMonitoringApi.cs,GetJobs,The method has 5 parameters. Parameters: connection' from' count' stateName' selector
Long Statement,Hangfire.SqlServer,CountersAggregator,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\CountersAggregator.cs,GetAggregationQuery,The length of the statement  "	[Target].[ExpireAt] = (SELECT MAX([ExpireAt]) FROM (VALUES ([Source].ExpireAt)' ([Target].[ExpireAt])) AS MaxExpireAt([ExpireAt])) " is 130.
Long Statement,Hangfire.SqlServer,CountersAggregator,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\CountersAggregator.cs,GetAggregationQuery,The length of the statement  "WHEN NOT MATCHED THEN INSERT ([Key]' [Value]' [ExpireAt]) VALUES ([Source].[Key]' [Source].[Value]' [Source].[ExpireAt]); " is 121.
Long Statement,Hangfire.SqlServer,ExpirationManager,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\ExpirationManager.cs,UseConnectionDistributedLock,The length of the statement  "                    () => $@"An exception was thrown during acquiring distributed lock on the {DistributedLockKey} resource within {DefaultLockTimeout.TotalSeconds} seconds. Outdated records were not removed. " is 188.
Long Statement,Hangfire.SqlServer,SqlServerDistributedLock,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerDistributedLock.cs,Acquire,The length of the statement  "                        $"Could not place a lock on the resource '{resource}': {(LockErrorMessages.ContainsKey(lockResult) ? LockErrorMessages[lockResult] : $"Server returned the '{lockResult}' error.")}."); " is 183.
Long Statement,Hangfire.SqlServer,SqlServerMonitoringApi,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerMonitoringApi.cs,GetNumberOfJobsByStateName,The length of the statement  "                ? $@"select count(j.Id) from (select top (@limit) Id from [{_storage.SchemaName}].Job with (nolock) where StateName = @state) as j" " is 131.
Long Statement,Hangfire.SqlServer,SqlServerObjectsInstaller,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerObjectsInstaller.cs,Install,The length of the statement  "            script = script.Replace("SET @TARGET_SCHEMA_VERSION = 5;"' "SET @TARGET_SCHEMA_VERSION = " + RequiredSchemaVersion + ";"); " is 122.
Long Statement,Hangfire.SqlServer,SqlServerConnection,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,FetchNextJob,The length of the statement  "                    $"Multiple provider instances registered for queues: {String.Join("' "' queues)}. You should choose only one type of persistent queues per server instance."); " is 158.
Long Statement,Hangfire.SqlServer,SqlServerConnection,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,GetJobData,The length of the statement  "$@"select InvocationData' StateName' Arguments' CreatedAt from [{_storage.SchemaName}].Job with (readcommittedlock) where Id = @id"; " is 132.
Long Statement,Hangfire.SqlServer,SqlServerConnection,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,GetStateData,The length of the statement  "                var sqlState = connection.Query<SqlState>(sql' new { jobId = long.Parse(jobId) }' commandTimeout: _storage.CommandTimeout).SingleOrDefault(); " is 141.
Long Statement,Hangfire.SqlServer,SqlServerConnection,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,GetJobParameter,The length of the statement  "                $@"select top (1) Value from [{_storage.SchemaName}].JobParameter with (readcommittedlock) where JobId = @id and Name = @name"' " is 127.
Long Statement,Hangfire.SqlServer,SqlServerConnection,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,GetFirstByLowestScoreFromSet,The length of the statement  "            if (toScore < fromScore) throw new ArgumentException("The `toScore` value must be higher or equal to the `fromScore` value."); " is 126.
Long Statement,Hangfire.SqlServer,SqlServerConnection,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,GetFirstByLowestScoreFromSet,The length of the statement  "                $@"select top 1 Value from [{_storage.SchemaName}].[Set] with (readcommittedlock) where [Key] = @key and Score between @from and @to order by Score"' " is 149.
Long Statement,Hangfire.SqlServer,SqlServerConnection,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,GetRangeFromSet,The length of the statement  "                .Query<string>(query' new { key = key' startingFrom = startingFrom + 1' endingAt = endingAt + 1 }' commandTimeout: _storage.CommandTimeout) " is 139.
Long Statement,Hangfire.SqlServer,SqlServerConnection,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,GetSetTtl,The length of the statement  "            string query = $@"select min([ExpireAt]) from [{_storage.SchemaName}].[Set] with (readcommittedlock) where [Key] = @key"; " is 121.
Long Statement,Hangfire.SqlServer,SqlServerConnection,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,GetCounter,The length of the statement  "$@"select sum(s.[Value]) from (select sum([Value]) as [Value] from [{_storage.SchemaName}].Counter with (readcommittedlock) " is 123.
Long Statement,Hangfire.SqlServer,SqlServerConnection,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,GetHashTtl,The length of the statement  "            string query = $@"select min([ExpireAt]) from [{_storage.SchemaName}].Hash with (readcommittedlock) where [Key] = @key"; " is 120.
Long Statement,Hangfire.SqlServer,SqlServerConnection,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,GetRangeFromList,The length of the statement  "                .Query<string>(query' new { key = key' startingFrom = startingFrom + 1' endingAt = endingAt + 1 }' commandTimeout: _storage.CommandTimeout) " is 139.
Long Statement,Hangfire.SqlServer,SqlServerConnection,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,GetAllItemsFromList,The length of the statement  "            return _storage.UseConnection(_dedicatedConnection' connection => connection.Query<string>(query' new { key = key }' commandTimeout: _storage.CommandTimeout).ToList()); " is 168.
Complex Conditional,Hangfire.SqlServer,SqlServerConnection,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerConnection.cs,ReleaseLock,The conditional expression  "_lockedResources[resource].Remove(lockId) &&                              _lockedResources[resource].Count == 0 &&                              _lockedResources.Remove(resource) &&                              _dedicatedConnection.State == ConnectionState.Open"  is complex.
Empty Catch Block,Hangfire.SqlServer,SqlServerTransactionJob,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerTransactionJob.cs,ExecuteKeepAliveQuery,The method has an empty catch block.
Empty Catch Block,Hangfire.SqlServer,SqlServerDistributedLock,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerDistributedLock.cs,ExecuteKeepAliveQuery,The method has an empty catch block.
Magic Number,Hangfire.SqlServer,SqlServerTimeoutJob,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerTimeoutJob.cs,SqlServerTimeoutJob,The following statement contains a magic number: if (storage.SlidingInvisibilityTimeout.HasValue)              {                  var keepAliveInterval =                      TimeSpan.FromSeconds(storage.SlidingInvisibilityTimeout.Value.TotalSeconds / 5);                  _timer = new Timer(ExecuteKeepAliveQuery' null' keepAliveInterval' keepAliveInterval);              }
Magic Number,Hangfire.SqlServer,SqlServerDistributedLock,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerDistributedLock.cs,Acquire,The following statement contains a magic number: do              {                  var parameters = new DynamicParameters();                  parameters.Add("@Resource"' resource);                  parameters.Add("@DbPrincipal"' "public");                  parameters.Add("@LockMode"' LockMode);                  parameters.Add("@LockOwner"' LockOwner);                  parameters.Add("@LockTimeout"' lockTimeout);                  parameters.Add("@Result"' dbType: DbType.Int32' direction: ParameterDirection.ReturnValue);                    connection.Execute(                      @"sp_getapplock"'                      parameters'                      commandTimeout: (int) (lockTimeout / 1000) + 5'                      commandType: CommandType.StoredProcedure);                    var lockResult = parameters.Get<int>("@Result");                    if (lockResult >= 0)                  {                      // The lock has been successfully obtained on the specified resource.                      return;                  }                    if (lockResult == -999 /* Indicates a parameter validation or other call error. */)                  {                      throw new SqlServerDistributedLockException(                          $"Could not place a lock on the resource '{resource}': {(LockErrorMessages.ContainsKey(lockResult) ? LockErrorMessages[lockResult] : $"Server returned the '{lockResult}' error.")}.");                  }              } while (started.Elapsed < timeout);
Magic Number,Hangfire.SqlServer,SqlServerDistributedLock,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerDistributedLock.cs,Acquire,The following statement contains a magic number: do              {                  var parameters = new DynamicParameters();                  parameters.Add("@Resource"' resource);                  parameters.Add("@DbPrincipal"' "public");                  parameters.Add("@LockMode"' LockMode);                  parameters.Add("@LockOwner"' LockOwner);                  parameters.Add("@LockTimeout"' lockTimeout);                  parameters.Add("@Result"' dbType: DbType.Int32' direction: ParameterDirection.ReturnValue);                    connection.Execute(                      @"sp_getapplock"'                      parameters'                      commandTimeout: (int) (lockTimeout / 1000) + 5'                      commandType: CommandType.StoredProcedure);                    var lockResult = parameters.Get<int>("@Result");                    if (lockResult >= 0)                  {                      // The lock has been successfully obtained on the specified resource.                      return;                  }                    if (lockResult == -999 /* Indicates a parameter validation or other call error. */)                  {                      throw new SqlServerDistributedLockException(                          $"Could not place a lock on the resource '{resource}': {(LockErrorMessages.ContainsKey(lockResult) ? LockErrorMessages[lockResult] : $"Server returned the '{lockResult}' error.")}.");                  }              } while (started.Elapsed < timeout);
Magic Number,Hangfire.SqlServer,SqlServerDistributedLock,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerDistributedLock.cs,Acquire,The following statement contains a magic number: do              {                  var parameters = new DynamicParameters();                  parameters.Add("@Resource"' resource);                  parameters.Add("@DbPrincipal"' "public");                  parameters.Add("@LockMode"' LockMode);                  parameters.Add("@LockOwner"' LockOwner);                  parameters.Add("@LockTimeout"' lockTimeout);                  parameters.Add("@Result"' dbType: DbType.Int32' direction: ParameterDirection.ReturnValue);                    connection.Execute(                      @"sp_getapplock"'                      parameters'                      commandTimeout: (int) (lockTimeout / 1000) + 5'                      commandType: CommandType.StoredProcedure);                    var lockResult = parameters.Get<int>("@Result");                    if (lockResult >= 0)                  {                      // The lock has been successfully obtained on the specified resource.                      return;                  }                    if (lockResult == -999 /* Indicates a parameter validation or other call error. */)                  {                      throw new SqlServerDistributedLockException(                          $"Could not place a lock on the resource '{resource}': {(LockErrorMessages.ContainsKey(lockResult) ? LockErrorMessages[lockResult] : $"Server returned the '{lockResult}' error.")}.");                  }              } while (started.Elapsed < timeout);
Magic Number,Hangfire.SqlServer,SqlServerMonitoringApi,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerMonitoringApi.cs,Queues,The following statement contains a magic number: foreach (var tuple in tuples)              {                  var enqueuedJobIds = tuple.Monitoring.GetEnqueuedJobIds(tuple.Queue' 0' 5);                  var counters = tuple.Monitoring.GetEnqueuedAndFetchedCount(tuple.Queue);                    // TODO: Remove the Select method call to support `bigint`.                  var firstJobs = UseConnection(connection =>                       EnqueuedJobs(connection' enqueuedJobIds.Select(x => (long)x).ToArray()));                    result.Add(new QueueWithTopEnqueuedJobsDto                  {                      Name = tuple.Queue'                      Length = counters.EnqueuedCount ?? 0'                      Fetched = counters.FetchedCount'                      FirstJobs = firstJobs                  });              }
Magic Number,Hangfire.SqlServer,SqlServerMonitoringApi,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerMonitoringApi.cs,GetHourlyTimelineStats,The following statement contains a magic number: for (var i = 0; i < 24; i++)              {                  dates.Add(endDate);                  endDate = endDate.AddHours(-1);              }
Magic Number,Hangfire.SqlServer,SqlServerMonitoringApi,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerMonitoringApi.cs,GetTimelineStats,The following statement contains a magic number: for (var i = 0; i < 7; i++)              {                  dates.Add(endDate);                  endDate = endDate.AddDays(-1);              }
Magic Number,Hangfire.SqlServer,SqlServerObjectsInstaller,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerObjectsInstaller.cs,Install,The following statement contains a magic number: for (var i = 0; i < RetryAttempts; i++)              {                  try                  {                      connection.Execute(script' commandTimeout: 0);                      break;                  }                  catch (DbException ex)                  {                      if (ex.ErrorCode == 1205)                      {                          Log.WarnException("Deadlock occurred during automatic migration execution. Retrying..."' ex);                      }                      else                      {                          throw;                      }                  }              }
Magic Number,Hangfire.SqlServer,SqlServerStorageOptions,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerStorageOptions.cs,SqlServerStorageOptions,The following statement contains a magic number: QueuePollInterval = TimeSpan.FromSeconds(15);
Magic Number,Hangfire.SqlServer,SqlServerStorageOptions,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerStorageOptions.cs,SqlServerStorageOptions,The following statement contains a magic number: InvisibilityTimeout = TimeSpan.FromMinutes(30);
Magic Number,Hangfire.SqlServer,SqlServerStorageOptions,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerStorageOptions.cs,SqlServerStorageOptions,The following statement contains a magic number: JobExpirationCheckInterval = TimeSpan.FromMinutes(30);
Magic Number,Hangfire.SqlServer,SqlServerStorageOptions,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerStorageOptions.cs,SqlServerStorageOptions,The following statement contains a magic number: CountersAggregateInterval = TimeSpan.FromMinutes(5);
Magic Number,Hangfire.SqlServer,SqlServerStorageOptions,C:\repos\HangfireIO_Hangfire\src\Hangfire.SqlServer\SqlServerStorageOptions.cs,SqlServerStorageOptions,The following statement contains a magic number: DashboardJobListLimit = 10000;
