Implementation smell,Namespace,Class,File,Method,Description
Long Method,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,DrawMap,The method has 150 lines of code.
Long Method,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The method has 102 lines of code.
Long Method,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnMouseMove,The method has 227 lines of code.
Complex Method,GMap.NET.WindowsForms,GMapOverlay,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapOverlay.cs,Polygons_CollectionChanged,Cyclomatic complexity of the method is 9
Complex Method,GMap.NET.WindowsForms,GMapOverlay,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapOverlay.cs,Routes_CollectionChanged,Cyclomatic complexity of the method is 9
Complex Method,GMap.NET.WindowsForms,GMapOverlay,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapOverlay.cs,Markers_CollectionChanged,Cyclomatic complexity of the method is 9
Complex Method,GMap.NET.WindowsForms,GMapOverlay,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapOverlay.cs,ForceUpdate,Cyclomatic complexity of the method is 8
Complex Method,GMap.NET.WindowsForms,GMapOverlay,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapOverlay.cs,OnRender,Cyclomatic complexity of the method is 14
Complex Method,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,GetRectOfAllMarkers,Cyclomatic complexity of the method is 11
Complex Method,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,GetRectOfAllRoutes,Cyclomatic complexity of the method is 12
Complex Method,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,DrawMap,Cyclomatic complexity of the method is 13
Complex Method,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,Cyclomatic complexity of the method is 16
Complex Method,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnSizeChanged,Cyclomatic complexity of the method is 8
Complex Method,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnMouseClick,Cyclomatic complexity of the method is 18
Complex Method,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnMouseWheel,Cyclomatic complexity of the method is 8
Complex Method,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,worker_DoWork,Cyclomatic complexity of the method is 9
Long Parameter List,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The method has 7 parameters. Parameters: g' pen' h' v' width' height' radius
Long Parameter List,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,Start,The method has 5 parameters. Parameters: area' zoom' provider' sleep' retry
Long Parameter List,GMap.NET.ObjectModel,NotifyCollectionChangedEventArgs,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.ObjectModel\ObservableCollection.cs,InitializeMoveOrReplace,The method has 5 parameters. Parameters: action' newItems' oldItems' startingIndex' oldStartingIndex
Long Statement,GMap.NET.WindowsForms,GMapToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapToolTip.cs,OnRender,The length of the statement  "         System.Drawing.Rectangle rect = new System.Drawing.Rectangle(Marker.ToolTipPosition.X' Marker.ToolTipPosition.Y - st.Height' st.Width + TextPadding.Width' st.Height + TextPadding.Height); " is 187.
Long Statement,GMap.NET.WindowsForms,GMapOverlay,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapOverlay.cs,OnRender,The length of the statement  "                  //if(m.IsVisible && (m.DisableRegionCheck || Control.Core.currentRegion.Contains(m.LocalPosition.X' m.LocalPosition.Y))) " is 120.
Long Statement,GMap.NET.WindowsForms,GMapOverlay,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapOverlay.cs,OnRender,The length of the statement  "                     if(!string.IsNullOrEmpty(m.ToolTipText) && (m.ToolTipMode == MarkerTooltipMode.Always || (m.ToolTipMode == MarkerTooltipMode.OnMouseOver && m.IsMouseOver))) " is 156.
Long Statement,GMap.NET.WindowsForms,GMapImageProxy,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapImage.cs,ApplyColorMatrix,The length of the statement  "                  g.DrawImage(original' new Rectangle(0' 0' original.Width' original.Height)' 0' 0' original.Width' original.Height' GraphicsUnit.Pixel' attributes); " is 147.
Long Statement,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,DrawMap,The length of the statement  "                                                    g.DrawImage(img.Img' new Rectangle((int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height)' 0' 0' Core.tileRect.Width' Core.tileRect.Height' GraphicsUnit.Pixel' TileFlipXYAttributes); " is 224.
Long Statement,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,DrawMap,The length of the statement  "                                                System.Drawing.RectangleF srcRect = new System.Drawing.RectangleF((float)(img.Xoff * (img.Img.Width / img.Ix))' (float)(img.Yoff * (img.Img.Height / img.Ix))' (img.Img.Width / img.Ix)' (img.Img.Height / img.Ix)); " is 212.
Long Statement,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,DrawMap,The length of the statement  "                                                System.Drawing.Rectangle dst = new System.Drawing.Rectangle((int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height); " is 157.
Long Statement,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,DrawMap,The length of the statement  "                                                g.DrawImage(img.Img' dst' srcRect.X' srcRect.Y' srcRect.Width' srcRect.Height' GraphicsUnit.Pixel' TileFlipXYAttributes); " is 121.
Long Statement,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,DrawMap,The length of the statement  "                                    parentTile = Core.Matrix.GetTileWithNoLock(Core.Zoom - zoomOffset++' new GPoint((int)(tilePoint.PosXY.X / Ix)' (int)(tilePoint.PosXY.Y / Ix))); " is 143.
Long Statement,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,DrawMap,The length of the statement  "                                                System.Drawing.RectangleF srcRect = new System.Drawing.RectangleF((float)(Xoff * (img.Img.Width / Ix))' (float)(Yoff * (img.Img.Height / Ix))' (img.Img.Width / Ix)' (img.Img.Height / Ix)); " is 188.
Long Statement,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,DrawMap,The length of the statement  "                                                System.Drawing.Rectangle dst = new System.Drawing.Rectangle((int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height); " is 157.
Long Statement,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,DrawMap,The length of the statement  "                                                g.DrawImage(img.Img' dst' srcRect.X' srcRect.Y' srcRect.Width' srcRect.Height' GraphicsUnit.Pixel' TileFlipXYAttributes); " is 121.
Long Statement,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,DrawMap,The length of the statement  "                                        g.FillRectangle(EmptytileBrush' new RectangleF(Core.tileRect.X' Core.tileRect.Y' Core.tileRect.Width' Core.tileRect.Height)); " is 125.
Long Statement,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,DrawMap,The length of the statement  "                                        g.DrawString("Exception: " + ex.Message' MissingDataFont' Brushes.Red' new RectangleF(Core.tileRect.X + 11' Core.tileRect.Y + 11' Core.tileRect.Width - 11' Core.tileRect.Height - 11)); " is 184.
Long Statement,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,DrawMap,The length of the statement  "                                        g.DrawString(EmptyTileText' MissingDataFont' Brushes.Blue' new RectangleF(Core.tileRect.X' Core.tileRect.Y' Core.tileRect.Width' Core.tileRect.Height)' CenterFormat); " is 166.
Long Statement,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,DrawMap,The length of the statement  "                              g.FillRectangle(EmptytileBrush' new System.Drawing.Rectangle((int) Core.tileRect.X' (int) Core.tileRect.Y' (int) Core.tileRect.Width' (int) Core.tileRect.Height)); " is 163.
Long Statement,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,DrawMap,The length of the statement  "                              g.DrawString("Exception: " + ex.Message' MissingDataFont' TileGridMissingTextBrush' new RectangleF(Core.tileRect.X + 11' Core.tileRect.Y + 11' Core.tileRect.Width - 11' Core.tileRect.Height - 11)); " is 197.
Long Statement,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,DrawMap,The length of the statement  "                              g.DrawString(EmptyTileText' MissingDataFont' TileGridMissingTextBrush' new RectangleF(Core.tileRect.X' Core.tileRect.Y + Core.tileRect.Width / 2 + (ShowTileGridLines ? 11 : -22)' Core.tileRect.Width' Core.tileRect.Height)' BottomFormat); " is 237.
Long Statement,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,DrawMap,The length of the statement  "                                        g.DrawRectangle(EmptyTileBorders' (int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height); " is 131.
Long Statement,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,DrawMap,The length of the statement  "                                g.DrawRectangle(EmptyTileBorders' (int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height); " is 131.
Long Statement,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,DrawMap,The length of the statement  "                                    g.DrawString((tilePoint.PosXY == Core.centerTileXYLocation ? "CENTER: " : "TILE: ") + tilePoint' MissingDataFont' Brushes.Red' new RectangleF(Core.tileRect.X' Core.tileRect.Y' Core.tileRect.Width' Core.tileRect.Height)' CenterFormat); " is 234.
Long Statement,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,DrawMap,The length of the statement  "                                    g.DrawString((tilePoint.PosXY == Core.centerTileXYLocation ? "" : "TILE: ") + tilePoint' MissingDataFont' TileGridLinesTextBrush' new RectangleF(Core.tileRect.X' Core.tileRect.Y' Core.tileRect.Width' Core.tileRect.Height)' CenterFormat); " is 237.
Long Statement,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnMouseMove,The length of the statement  "                if (isSelected && !selectionStart.IsEmpty && (Form.ModifierKeys == Keys.Alt || Form.ModifierKeys == Keys.Shift || DisableAltForSelection)) " is 138.
Long Statement,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The length of the statement  "         System.Drawing.Rectangle rect = new System.Drawing.Rectangle(Marker.ToolTipPosition.X' Marker.ToolTipPosition.Y - st.Height' st.Width + TextPadding.Width' st.Height + TextPadding.Height); " is 187.
Long Statement,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The length of the statement  "            objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 0' 90); // Corner " is 127.
Long Statement,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,OnRender,The length of the statement  "         System.Drawing.Rectangle rect = new System.Drawing.Rectangle(Marker.ToolTipPosition.X' Marker.ToolTipPosition.Y - st.Height' st.Width + TextPadding.Width * 2' st.Height + TextPadding.Height); " is 191.
Long Statement,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,OnRender,The length of the statement  "         g.DrawLine(Stroke' Marker.ToolTipPosition.X' Marker.ToolTipPosition.Y' rect.X + Radius / 2' rect.Y + rect.Height - Radius / 2); " is 127.
Long Statement,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,worker_ProgressChanged,The length of the statement  "         this.label1.Text = "Fetching tile at zoom (" + zoom + "): " + ((int)e.UserState).ToString() + " of " + all + "' complete: " + e.ProgressPercentage.ToString() + "%"; " is 164.
Long Statement,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,InitializeComponent,The length of the statement  "         this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 50F)); " is 122.
Long Statement,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,InitializeComponent,The length of the statement  "         this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute' 125F)); " is 124.
Long Statement,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,InitializeComponent,The length of the statement  "         this.label2.Font = new System.Drawing.Font("Microsoft Sans Serif"' 7.8F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 152.
Complex Conditional,GMap.NET.WindowsForms,GMapPolygon,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapPolygon.cs,IsInside,The conditional expression  "p1.Lat < p.Lat && p2.Lat >= p.Lat || p2.Lat < p.Lat && p1.Lat >= p.Lat"  is complex.
Complex Conditional,GMap.NET.WindowsForms,GMapOverlay,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapOverlay.cs,OnRender,The conditional expression  "!string.IsNullOrEmpty(m.ToolTipText) && (m.ToolTipMode == MarkerTooltipMode.Always || (m.ToolTipMode == MarkerTooltipMode.OnMouseOver && m.IsMouseOver))"  is complex.
Complex Conditional,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,GetRectOfAllMarkers,The conditional expression  "left != double.MaxValue && right != double.MinValue && top != double.MinValue && bottom != double.MaxValue"  is complex.
Complex Conditional,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,GetRectOfAllRoutes,The conditional expression  "left != double.MaxValue && right != double.MinValue && top != double.MinValue && bottom != double.MaxValue"  is complex.
Complex Conditional,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnMouseMove,The conditional expression  "isSelected && !selectionStart.IsEmpty && (Form.ModifierKeys == Keys.Alt || Form.ModifierKeys == Keys.Shift || DisableAltForSelection)"  is complex.
Complex Conditional,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnMouseWheel,The conditional expression  "MouseWheelZoomEnabled && mouseIn && (!IsMouseOverMarker || IgnoreMarkerOnMouseWheel) && !Core.IsDragging"  is complex.
Magic Number,GMap.NET.WindowsForms,GMapPolygon,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapPolygon.cs,UpdateGraphicsPath,The following statement contains a magic number: {                Point[] pnts = new Point[LocalPoints.Count];                for (int i = 0; i < LocalPoints.Count; i++)                {                    Point p2 = new Point((int)LocalPoints[i].X' (int)LocalPoints[i].Y);                    pnts[pnts.Length - 1 - i] = p2;                }                  if (pnts.Length > 2)                {                    graphicsPath.AddPolygon(pnts);                }                else if (pnts.Length == 2)                {                    graphicsPath.AddLines(pnts);                }            }
Magic Number,GMap.NET.WindowsForms,GMapPolygon,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapPolygon.cs,UpdateGraphicsPath,The following statement contains a magic number: {                Point[] pnts = new Point[LocalPoints.Count];                for (int i = 0; i < LocalPoints.Count; i++)                {                    Point p2 = new Point((int)LocalPoints[i].X' (int)LocalPoints[i].Y);                    pnts[pnts.Length - 1 - i] = p2;                }                  if (pnts.Length > 2)                {                    graphicsPath.AddPolygon(pnts);                }                else if (pnts.Length == 2)                {                    graphicsPath.AddLines(pnts);                }            }
Magic Number,GMap.NET.WindowsForms,GMapPolygon,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapPolygon.cs,GMapPolygon,The following statement contains a magic number: DefaultStroke.Width = 5;
Magic Number,GMap.NET.WindowsForms,GMapPolygon,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapPolygon.cs,IsInside,The following statement contains a magic number: if(count < 3)           {              return false;           }
Magic Number,GMap.NET.WindowsForms,GMapToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapToolTip.cs,GMapToolTip,The following statement contains a magic number: DefaultStroke.Width = 2;
Magic Number,GMap.NET.WindowsForms,GMapToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapToolTip.cs,GMapToolTip,The following statement contains a magic number: this.Offset = new Point(14' -44);
Magic Number,GMap.NET.WindowsForms,GMapToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapToolTip.cs,GMapToolTip,The following statement contains a magic number: this.Offset = new Point(14' -44);
Magic Number,GMap.NET.WindowsForms,GMapToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapToolTip.cs,OnRender,The following statement contains a magic number: g.DrawLine(Stroke' Marker.ToolTipPosition.X' Marker.ToolTipPosition.Y' rect.X' rect.Y + rect.Height / 2);
Magic Number,GMap.NET.WindowsForms,GMapToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapToolTip.cs,GMapToolTip,The following statement contains a magic number: this.TextPadding = Extensions.GetStruct<Size>(info' "TextPadding"' new Size(10' 10));
Magic Number,GMap.NET.WindowsForms,GMapToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapToolTip.cs,GMapToolTip,The following statement contains a magic number: this.TextPadding = Extensions.GetStruct<Size>(info' "TextPadding"' new Size(10' 10));
Magic Number,GMap.NET.WindowsForms,GMapRoute,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapRoute.cs,GMapRoute,The following statement contains a magic number: DefaultStroke.Width = 5;
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,SetZoomToFitRect,The following statement contains a magic number: if (lazyEvents)              {                  lazySetZoomToFitRect = rect;              }              else              {                  int maxZoom = Core.GetMaxZoomToFitRect(rect);                  if (maxZoom > 0)                  {                      PointLatLng center = new PointLatLng(rect.Lat - (rect.HeightLat / 2)' rect.Lng + (rect.WidthLng / 2));                      Position = center;                        if (maxZoom > MaxZoom)                      {                          maxZoom = MaxZoom;                      }                        if ((int)Zoom != maxZoom)                      {                          Zoom = maxZoom;                      }                        return true;                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,SetZoomToFitRect,The following statement contains a magic number: if (lazyEvents)              {                  lazySetZoomToFitRect = rect;              }              else              {                  int maxZoom = Core.GetMaxZoomToFitRect(rect);                  if (maxZoom > 0)                  {                      PointLatLng center = new PointLatLng(rect.Lat - (rect.HeightLat / 2)' rect.Lng + (rect.WidthLng / 2));                      Position = center;                        if (maxZoom > MaxZoom)                      {                          maxZoom = MaxZoom;                      }                        if ((int)Zoom != maxZoom)                      {                          Zoom = maxZoom;                      }                        return true;                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,DrawGraphics,The following statement contains a magic number: if (MapRenderTransform.HasValue)              {                  #region -- scale --                  if (!MobileMode)                  {                      var center = new GPoint(Width / 2' Height / 2);                      var delta = center;                      delta.OffsetNegative(Core.renderOffset);                      var pos = center;                      pos.OffsetNegative(delta);                        g.ScaleTransform(MapRenderTransform.Value' MapRenderTransform.Value' MatrixOrder.Append);                      g.TranslateTransform(pos.X' pos.Y' MatrixOrder.Append);                        DrawMap(g);                      g.ResetTransform();                        g.TranslateTransform(pos.X' pos.Y' MatrixOrder.Append);                  }                  else                  {                      DrawMap(g);                      g.ResetTransform();                  }                  OnPaintOverlays(g);                  #endregion              }              else  #endif              {  #if !PocketPC                  if (IsRotated)                  {                      #region -- rotation --                        g.TextRenderingHint = TextRenderingHint.AntiAlias;                      g.SmoothingMode = SmoothingMode.AntiAlias;                        g.TranslateTransform((float)(Core.Width / 2.0)' (float)(Core.Height / 2.0));                      g.RotateTransform(-Bearing);                      g.TranslateTransform((float)(-Core.Width / 2.0)' (float)(-Core.Height / 2.0));                        g.TranslateTransform(Core.renderOffset.X' Core.renderOffset.Y);                        DrawMap(g);                        g.ResetTransform();                      g.TranslateTransform(Core.renderOffset.X' Core.renderOffset.Y);                        OnPaintOverlays(g);                        #endregion                  }                  else  #endif                  {  #if !PocketPC                      if (!MobileMode)                      {                          g.TranslateTransform(Core.renderOffset.X' Core.renderOffset.Y);                      }  #endif                      DrawMap(g);                      OnPaintOverlays(g);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,DrawGraphics,The following statement contains a magic number: if (MapRenderTransform.HasValue)              {                  #region -- scale --                  if (!MobileMode)                  {                      var center = new GPoint(Width / 2' Height / 2);                      var delta = center;                      delta.OffsetNegative(Core.renderOffset);                      var pos = center;                      pos.OffsetNegative(delta);                        g.ScaleTransform(MapRenderTransform.Value' MapRenderTransform.Value' MatrixOrder.Append);                      g.TranslateTransform(pos.X' pos.Y' MatrixOrder.Append);                        DrawMap(g);                      g.ResetTransform();                        g.TranslateTransform(pos.X' pos.Y' MatrixOrder.Append);                  }                  else                  {                      DrawMap(g);                      g.ResetTransform();                  }                  OnPaintOverlays(g);                  #endregion              }              else  #endif              {  #if !PocketPC                  if (IsRotated)                  {                      #region -- rotation --                        g.TextRenderingHint = TextRenderingHint.AntiAlias;                      g.SmoothingMode = SmoothingMode.AntiAlias;                        g.TranslateTransform((float)(Core.Width / 2.0)' (float)(Core.Height / 2.0));                      g.RotateTransform(-Bearing);                      g.TranslateTransform((float)(-Core.Width / 2.0)' (float)(-Core.Height / 2.0));                        g.TranslateTransform(Core.renderOffset.X' Core.renderOffset.Y);                        DrawMap(g);                        g.ResetTransform();                      g.TranslateTransform(Core.renderOffset.X' Core.renderOffset.Y);                        OnPaintOverlays(g);                        #endregion                  }                  else  #endif                  {  #if !PocketPC                      if (!MobileMode)                      {                          g.TranslateTransform(Core.renderOffset.X' Core.renderOffset.Y);                      }  #endif                      DrawMap(g);                      OnPaintOverlays(g);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,DrawGraphics,The following statement contains a magic number: if (MapRenderTransform.HasValue)              {                  #region -- scale --                  if (!MobileMode)                  {                      var center = new GPoint(Width / 2' Height / 2);                      var delta = center;                      delta.OffsetNegative(Core.renderOffset);                      var pos = center;                      pos.OffsetNegative(delta);                        g.ScaleTransform(MapRenderTransform.Value' MapRenderTransform.Value' MatrixOrder.Append);                      g.TranslateTransform(pos.X' pos.Y' MatrixOrder.Append);                        DrawMap(g);                      g.ResetTransform();                        g.TranslateTransform(pos.X' pos.Y' MatrixOrder.Append);                  }                  else                  {                      DrawMap(g);                      g.ResetTransform();                  }                  OnPaintOverlays(g);                  #endregion              }              else  #endif              {  #if !PocketPC                  if (IsRotated)                  {                      #region -- rotation --                        g.TextRenderingHint = TextRenderingHint.AntiAlias;                      g.SmoothingMode = SmoothingMode.AntiAlias;                        g.TranslateTransform((float)(Core.Width / 2.0)' (float)(Core.Height / 2.0));                      g.RotateTransform(-Bearing);                      g.TranslateTransform((float)(-Core.Width / 2.0)' (float)(-Core.Height / 2.0));                        g.TranslateTransform(Core.renderOffset.X' Core.renderOffset.Y);                        DrawMap(g);                        g.ResetTransform();                      g.TranslateTransform(Core.renderOffset.X' Core.renderOffset.Y);                        OnPaintOverlays(g);                        #endregion                  }                  else  #endif                  {  #if !PocketPC                      if (!MobileMode)                      {                          g.TranslateTransform(Core.renderOffset.X' Core.renderOffset.Y);                      }  #endif                      DrawMap(g);                      OnPaintOverlays(g);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,DrawGraphics,The following statement contains a magic number: if (MapRenderTransform.HasValue)              {                  #region -- scale --                  if (!MobileMode)                  {                      var center = new GPoint(Width / 2' Height / 2);                      var delta = center;                      delta.OffsetNegative(Core.renderOffset);                      var pos = center;                      pos.OffsetNegative(delta);                        g.ScaleTransform(MapRenderTransform.Value' MapRenderTransform.Value' MatrixOrder.Append);                      g.TranslateTransform(pos.X' pos.Y' MatrixOrder.Append);                        DrawMap(g);                      g.ResetTransform();                        g.TranslateTransform(pos.X' pos.Y' MatrixOrder.Append);                  }                  else                  {                      DrawMap(g);                      g.ResetTransform();                  }                  OnPaintOverlays(g);                  #endregion              }              else  #endif              {  #if !PocketPC                  if (IsRotated)                  {                      #region -- rotation --                        g.TextRenderingHint = TextRenderingHint.AntiAlias;                      g.SmoothingMode = SmoothingMode.AntiAlias;                        g.TranslateTransform((float)(Core.Width / 2.0)' (float)(Core.Height / 2.0));                      g.RotateTransform(-Bearing);                      g.TranslateTransform((float)(-Core.Width / 2.0)' (float)(-Core.Height / 2.0));                        g.TranslateTransform(Core.renderOffset.X' Core.renderOffset.Y);                        DrawMap(g);                        g.ResetTransform();                      g.TranslateTransform(Core.renderOffset.X' Core.renderOffset.Y);                        OnPaintOverlays(g);                        #endregion                  }                  else  #endif                  {  #if !PocketPC                      if (!MobileMode)                      {                          g.TranslateTransform(Core.renderOffset.X' Core.renderOffset.Y);                      }  #endif                      DrawMap(g);                      OnPaintOverlays(g);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,DrawGraphics,The following statement contains a magic number: if (MapRenderTransform.HasValue)              {                  #region -- scale --                  if (!MobileMode)                  {                      var center = new GPoint(Width / 2' Height / 2);                      var delta = center;                      delta.OffsetNegative(Core.renderOffset);                      var pos = center;                      pos.OffsetNegative(delta);                        g.ScaleTransform(MapRenderTransform.Value' MapRenderTransform.Value' MatrixOrder.Append);                      g.TranslateTransform(pos.X' pos.Y' MatrixOrder.Append);                        DrawMap(g);                      g.ResetTransform();                        g.TranslateTransform(pos.X' pos.Y' MatrixOrder.Append);                  }                  else                  {                      DrawMap(g);                      g.ResetTransform();                  }                  OnPaintOverlays(g);                  #endregion              }              else  #endif              {  #if !PocketPC                  if (IsRotated)                  {                      #region -- rotation --                        g.TextRenderingHint = TextRenderingHint.AntiAlias;                      g.SmoothingMode = SmoothingMode.AntiAlias;                        g.TranslateTransform((float)(Core.Width / 2.0)' (float)(Core.Height / 2.0));                      g.RotateTransform(-Bearing);                      g.TranslateTransform((float)(-Core.Width / 2.0)' (float)(-Core.Height / 2.0));                        g.TranslateTransform(Core.renderOffset.X' Core.renderOffset.Y);                        DrawMap(g);                        g.ResetTransform();                      g.TranslateTransform(Core.renderOffset.X' Core.renderOffset.Y);                        OnPaintOverlays(g);                        #endregion                  }                  else  #endif                  {  #if !PocketPC                      if (!MobileMode)                      {                          g.TranslateTransform(Core.renderOffset.X' Core.renderOffset.Y);                      }  #endif                      DrawMap(g);                      OnPaintOverlays(g);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,DrawGraphics,The following statement contains a magic number: if (MapRenderTransform.HasValue)              {                  #region -- scale --                  if (!MobileMode)                  {                      var center = new GPoint(Width / 2' Height / 2);                      var delta = center;                      delta.OffsetNegative(Core.renderOffset);                      var pos = center;                      pos.OffsetNegative(delta);                        g.ScaleTransform(MapRenderTransform.Value' MapRenderTransform.Value' MatrixOrder.Append);                      g.TranslateTransform(pos.X' pos.Y' MatrixOrder.Append);                        DrawMap(g);                      g.ResetTransform();                        g.TranslateTransform(pos.X' pos.Y' MatrixOrder.Append);                  }                  else                  {                      DrawMap(g);                      g.ResetTransform();                  }                  OnPaintOverlays(g);                  #endregion              }              else  #endif              {  #if !PocketPC                  if (IsRotated)                  {                      #region -- rotation --                        g.TextRenderingHint = TextRenderingHint.AntiAlias;                      g.SmoothingMode = SmoothingMode.AntiAlias;                        g.TranslateTransform((float)(Core.Width / 2.0)' (float)(Core.Height / 2.0));                      g.RotateTransform(-Bearing);                      g.TranslateTransform((float)(-Core.Width / 2.0)' (float)(-Core.Height / 2.0));                        g.TranslateTransform(Core.renderOffset.X' Core.renderOffset.Y);                        DrawMap(g);                        g.ResetTransform();                      g.TranslateTransform(Core.renderOffset.X' Core.renderOffset.Y);                        OnPaintOverlays(g);                        #endregion                  }                  else  #endif                  {  #if !PocketPC                      if (!MobileMode)                      {                          g.TranslateTransform(Core.renderOffset.X' Core.renderOffset.Y);                      }  #endif                      DrawMap(g);                      OnPaintOverlays(g);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,DrawMap,The following statement contains a magic number: try              {                  foreach (var tilePoint in Core.tileDrawingList)                  {                      {                          Core.tileRect.Location = tilePoint.PosPixel;                          if (ForceDoubleBuffer)                          {  #if !PocketPC                              if (MobileMode)                              {                                  Core.tileRect.Offset(Core.renderOffset);                              }  #else                              Core.tileRect.Offset(Core.renderOffset);  #endif                          }                          Core.tileRect.OffsetNegative(Core.compensationOffset);                            //if(Core.currentRegion.IntersectsWith(Core.tileRect) || IsRotated)                          {                              bool found = false;                                Tile t = Core.Matrix.GetTileWithNoLock(Core.Zoom' tilePoint.PosXY);                              if (t.NotEmpty)                              {                                  // render tile                                  {                                      foreach (GMapImage img in t.Overlays)                                      {                                          if (img != null && img.Img != null)                                          {                                              if (!found)                                                  found = true;                                                if (!img.IsParent)                                              {  #if !PocketPC                                                  if (!MapRenderTransform.HasValue && !IsRotated)                                                  {                                                      g.DrawImage(img.Img' Core.tileRect.X' Core.tileRect.Y' Core.tileRect.Width' Core.tileRect.Height);                                                  }                                                  else                                                  {                                                      g.DrawImage(img.Img' new Rectangle((int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height)' 0' 0' Core.tileRect.Width' Core.tileRect.Height' GraphicsUnit.Pixel' TileFlipXYAttributes);                                                  }  #else                                                  g.DrawImage(img.Img' (int) Core.tileRect.X' (int) Core.tileRect.Y);  #endif                                              }  #if !PocketPC                                              else                                              {                                                  // TODO: move calculations to loader thread                                                  System.Drawing.RectangleF srcRect = new System.Drawing.RectangleF((float)(img.Xoff * (img.Img.Width / img.Ix))' (float)(img.Yoff * (img.Img.Height / img.Ix))' (img.Img.Width / img.Ix)' (img.Img.Height / img.Ix));                                                  System.Drawing.Rectangle dst = new System.Drawing.Rectangle((int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height);                                                    g.DrawImage(img.Img' dst' srcRect.X' srcRect.Y' srcRect.Width' srcRect.Height' GraphicsUnit.Pixel' TileFlipXYAttributes);                                              }  #endif                                          }                                      }                                  }                              }  #if !PocketPC                              else if (FillEmptyTiles && MapProvider.Projection is MercatorProjection)                              {                                  #region -- fill empty lines --                                  int zoomOffset = 1;                                  Tile parentTile = Tile.Empty;                                  long Ix = 0;                                    while (!parentTile.NotEmpty && zoomOffset < Core.Zoom && zoomOffset <= LevelsKeepInMemmory)                                  {                                      Ix = (long)Math.Pow(2' zoomOffset);                                      parentTile = Core.Matrix.GetTileWithNoLock(Core.Zoom - zoomOffset++' new GPoint((int)(tilePoint.PosXY.X / Ix)' (int)(tilePoint.PosXY.Y / Ix)));                                  }                                    if (parentTile.NotEmpty)                                  {                                      long Xoff = Math.Abs(tilePoint.PosXY.X - (parentTile.Pos.X * Ix));                                      long Yoff = Math.Abs(tilePoint.PosXY.Y - (parentTile.Pos.Y * Ix));                                        // render tile                                       {                                          foreach (GMapImage img in parentTile.Overlays)                                          {                                              if (img != null && img.Img != null && !img.IsParent)                                              {                                                  if (!found)                                                      found = true;                                                    System.Drawing.RectangleF srcRect = new System.Drawing.RectangleF((float)(Xoff * (img.Img.Width / Ix))' (float)(Yoff * (img.Img.Height / Ix))' (img.Img.Width / Ix)' (img.Img.Height / Ix));                                                  System.Drawing.Rectangle dst = new System.Drawing.Rectangle((int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height);                                                    g.DrawImage(img.Img' dst' srcRect.X' srcRect.Y' srcRect.Width' srcRect.Height' GraphicsUnit.Pixel' TileFlipXYAttributes);                                                  g.FillRectangle(SelectedAreaFill' dst);                                              }                                          }                                      }                                  }                                  #endregion                              }  #endif                              // add text if tile is missing                              if (!found)                              {                                  lock (Core.FailedLoads)                                  {                                      var lt = new LoadTask(tilePoint.PosXY' Core.Zoom);                                      if (Core.FailedLoads.ContainsKey(lt))                                      {                                          var ex = Core.FailedLoads[lt];  #if !PocketPC                                          g.FillRectangle(EmptytileBrush' new RectangleF(Core.tileRect.X' Core.tileRect.Y' Core.tileRect.Width' Core.tileRect.Height));                                            g.DrawString("Exception: " + ex.Message' MissingDataFont' Brushes.Red' new RectangleF(Core.tileRect.X + 11' Core.tileRect.Y + 11' Core.tileRect.Width - 11' Core.tileRect.Height - 11));                                            g.DrawString(EmptyTileText' MissingDataFont' Brushes.Blue' new RectangleF(Core.tileRect.X' Core.tileRect.Y' Core.tileRect.Width' Core.tileRect.Height)' CenterFormat);    #else                                g.FillRectangle(EmptytileBrush' new System.Drawing.Rectangle((int) Core.tileRect.X' (int) Core.tileRect.Y' (int) Core.tileRect.Width' (int) Core.tileRect.Height));                                  g.DrawString("Exception: " + ex.Message' MissingDataFont' TileGridMissingTextBrush' new RectangleF(Core.tileRect.X + 11' Core.tileRect.Y + 11' Core.tileRect.Width - 11' Core.tileRect.Height - 11));                                  g.DrawString(EmptyTileText' MissingDataFont' TileGridMissingTextBrush' new RectangleF(Core.tileRect.X' Core.tileRect.Y + Core.tileRect.Width / 2 + (ShowTileGridLines ? 11 : -22)' Core.tileRect.Width' Core.tileRect.Height)' BottomFormat);  #endif                                            g.DrawRectangle(EmptyTileBorders' (int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height);                                      }                                  }                              }                                if (ShowTileGridLines)                              {                                  g.DrawRectangle(EmptyTileBorders' (int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height);                                  {  #if !PocketPC                                      g.DrawString((tilePoint.PosXY == Core.centerTileXYLocation ? "CENTER: " : "TILE: ") + tilePoint' MissingDataFont' Brushes.Red' new RectangleF(Core.tileRect.X' Core.tileRect.Y' Core.tileRect.Width' Core.tileRect.Height)' CenterFormat);  #else                                      g.DrawString((tilePoint.PosXY == Core.centerTileXYLocation ? "" : "TILE: ") + tilePoint' MissingDataFont' TileGridLinesTextBrush' new RectangleF(Core.tileRect.X' Core.tileRect.Y' Core.tileRect.Width' Core.tileRect.Height)' CenterFormat);  #endif                                  }                              }                          }                      }                  }              }              finally              {                  Core.Matrix.LeaveReadLock();                  Core.tileDrawingListLock.ReleaseReaderLock();              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,DrawMap,The following statement contains a magic number: try              {                  foreach (var tilePoint in Core.tileDrawingList)                  {                      {                          Core.tileRect.Location = tilePoint.PosPixel;                          if (ForceDoubleBuffer)                          {  #if !PocketPC                              if (MobileMode)                              {                                  Core.tileRect.Offset(Core.renderOffset);                              }  #else                              Core.tileRect.Offset(Core.renderOffset);  #endif                          }                          Core.tileRect.OffsetNegative(Core.compensationOffset);                            //if(Core.currentRegion.IntersectsWith(Core.tileRect) || IsRotated)                          {                              bool found = false;                                Tile t = Core.Matrix.GetTileWithNoLock(Core.Zoom' tilePoint.PosXY);                              if (t.NotEmpty)                              {                                  // render tile                                  {                                      foreach (GMapImage img in t.Overlays)                                      {                                          if (img != null && img.Img != null)                                          {                                              if (!found)                                                  found = true;                                                if (!img.IsParent)                                              {  #if !PocketPC                                                  if (!MapRenderTransform.HasValue && !IsRotated)                                                  {                                                      g.DrawImage(img.Img' Core.tileRect.X' Core.tileRect.Y' Core.tileRect.Width' Core.tileRect.Height);                                                  }                                                  else                                                  {                                                      g.DrawImage(img.Img' new Rectangle((int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height)' 0' 0' Core.tileRect.Width' Core.tileRect.Height' GraphicsUnit.Pixel' TileFlipXYAttributes);                                                  }  #else                                                  g.DrawImage(img.Img' (int) Core.tileRect.X' (int) Core.tileRect.Y);  #endif                                              }  #if !PocketPC                                              else                                              {                                                  // TODO: move calculations to loader thread                                                  System.Drawing.RectangleF srcRect = new System.Drawing.RectangleF((float)(img.Xoff * (img.Img.Width / img.Ix))' (float)(img.Yoff * (img.Img.Height / img.Ix))' (img.Img.Width / img.Ix)' (img.Img.Height / img.Ix));                                                  System.Drawing.Rectangle dst = new System.Drawing.Rectangle((int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height);                                                    g.DrawImage(img.Img' dst' srcRect.X' srcRect.Y' srcRect.Width' srcRect.Height' GraphicsUnit.Pixel' TileFlipXYAttributes);                                              }  #endif                                          }                                      }                                  }                              }  #if !PocketPC                              else if (FillEmptyTiles && MapProvider.Projection is MercatorProjection)                              {                                  #region -- fill empty lines --                                  int zoomOffset = 1;                                  Tile parentTile = Tile.Empty;                                  long Ix = 0;                                    while (!parentTile.NotEmpty && zoomOffset < Core.Zoom && zoomOffset <= LevelsKeepInMemmory)                                  {                                      Ix = (long)Math.Pow(2' zoomOffset);                                      parentTile = Core.Matrix.GetTileWithNoLock(Core.Zoom - zoomOffset++' new GPoint((int)(tilePoint.PosXY.X / Ix)' (int)(tilePoint.PosXY.Y / Ix)));                                  }                                    if (parentTile.NotEmpty)                                  {                                      long Xoff = Math.Abs(tilePoint.PosXY.X - (parentTile.Pos.X * Ix));                                      long Yoff = Math.Abs(tilePoint.PosXY.Y - (parentTile.Pos.Y * Ix));                                        // render tile                                       {                                          foreach (GMapImage img in parentTile.Overlays)                                          {                                              if (img != null && img.Img != null && !img.IsParent)                                              {                                                  if (!found)                                                      found = true;                                                    System.Drawing.RectangleF srcRect = new System.Drawing.RectangleF((float)(Xoff * (img.Img.Width / Ix))' (float)(Yoff * (img.Img.Height / Ix))' (img.Img.Width / Ix)' (img.Img.Height / Ix));                                                  System.Drawing.Rectangle dst = new System.Drawing.Rectangle((int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height);                                                    g.DrawImage(img.Img' dst' srcRect.X' srcRect.Y' srcRect.Width' srcRect.Height' GraphicsUnit.Pixel' TileFlipXYAttributes);                                                  g.FillRectangle(SelectedAreaFill' dst);                                              }                                          }                                      }                                  }                                  #endregion                              }  #endif                              // add text if tile is missing                              if (!found)                              {                                  lock (Core.FailedLoads)                                  {                                      var lt = new LoadTask(tilePoint.PosXY' Core.Zoom);                                      if (Core.FailedLoads.ContainsKey(lt))                                      {                                          var ex = Core.FailedLoads[lt];  #if !PocketPC                                          g.FillRectangle(EmptytileBrush' new RectangleF(Core.tileRect.X' Core.tileRect.Y' Core.tileRect.Width' Core.tileRect.Height));                                            g.DrawString("Exception: " + ex.Message' MissingDataFont' Brushes.Red' new RectangleF(Core.tileRect.X + 11' Core.tileRect.Y + 11' Core.tileRect.Width - 11' Core.tileRect.Height - 11));                                            g.DrawString(EmptyTileText' MissingDataFont' Brushes.Blue' new RectangleF(Core.tileRect.X' Core.tileRect.Y' Core.tileRect.Width' Core.tileRect.Height)' CenterFormat);    #else                                g.FillRectangle(EmptytileBrush' new System.Drawing.Rectangle((int) Core.tileRect.X' (int) Core.tileRect.Y' (int) Core.tileRect.Width' (int) Core.tileRect.Height));                                  g.DrawString("Exception: " + ex.Message' MissingDataFont' TileGridMissingTextBrush' new RectangleF(Core.tileRect.X + 11' Core.tileRect.Y + 11' Core.tileRect.Width - 11' Core.tileRect.Height - 11));                                  g.DrawString(EmptyTileText' MissingDataFont' TileGridMissingTextBrush' new RectangleF(Core.tileRect.X' Core.tileRect.Y + Core.tileRect.Width / 2 + (ShowTileGridLines ? 11 : -22)' Core.tileRect.Width' Core.tileRect.Height)' BottomFormat);  #endif                                            g.DrawRectangle(EmptyTileBorders' (int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height);                                      }                                  }                              }                                if (ShowTileGridLines)                              {                                  g.DrawRectangle(EmptyTileBorders' (int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height);                                  {  #if !PocketPC                                      g.DrawString((tilePoint.PosXY == Core.centerTileXYLocation ? "CENTER: " : "TILE: ") + tilePoint' MissingDataFont' Brushes.Red' new RectangleF(Core.tileRect.X' Core.tileRect.Y' Core.tileRect.Width' Core.tileRect.Height)' CenterFormat);  #else                                      g.DrawString((tilePoint.PosXY == Core.centerTileXYLocation ? "" : "TILE: ") + tilePoint' MissingDataFont' TileGridLinesTextBrush' new RectangleF(Core.tileRect.X' Core.tileRect.Y' Core.tileRect.Width' Core.tileRect.Height)' CenterFormat);  #endif                                  }                              }                          }                      }                  }              }              finally              {                  Core.Matrix.LeaveReadLock();                  Core.tileDrawingListLock.ReleaseReaderLock();              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,DrawMap,The following statement contains a magic number: try              {                  foreach (var tilePoint in Core.tileDrawingList)                  {                      {                          Core.tileRect.Location = tilePoint.PosPixel;                          if (ForceDoubleBuffer)                          {  #if !PocketPC                              if (MobileMode)                              {                                  Core.tileRect.Offset(Core.renderOffset);                              }  #else                              Core.tileRect.Offset(Core.renderOffset);  #endif                          }                          Core.tileRect.OffsetNegative(Core.compensationOffset);                            //if(Core.currentRegion.IntersectsWith(Core.tileRect) || IsRotated)                          {                              bool found = false;                                Tile t = Core.Matrix.GetTileWithNoLock(Core.Zoom' tilePoint.PosXY);                              if (t.NotEmpty)                              {                                  // render tile                                  {                                      foreach (GMapImage img in t.Overlays)                                      {                                          if (img != null && img.Img != null)                                          {                                              if (!found)                                                  found = true;                                                if (!img.IsParent)                                              {  #if !PocketPC                                                  if (!MapRenderTransform.HasValue && !IsRotated)                                                  {                                                      g.DrawImage(img.Img' Core.tileRect.X' Core.tileRect.Y' Core.tileRect.Width' Core.tileRect.Height);                                                  }                                                  else                                                  {                                                      g.DrawImage(img.Img' new Rectangle((int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height)' 0' 0' Core.tileRect.Width' Core.tileRect.Height' GraphicsUnit.Pixel' TileFlipXYAttributes);                                                  }  #else                                                  g.DrawImage(img.Img' (int) Core.tileRect.X' (int) Core.tileRect.Y);  #endif                                              }  #if !PocketPC                                              else                                              {                                                  // TODO: move calculations to loader thread                                                  System.Drawing.RectangleF srcRect = new System.Drawing.RectangleF((float)(img.Xoff * (img.Img.Width / img.Ix))' (float)(img.Yoff * (img.Img.Height / img.Ix))' (img.Img.Width / img.Ix)' (img.Img.Height / img.Ix));                                                  System.Drawing.Rectangle dst = new System.Drawing.Rectangle((int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height);                                                    g.DrawImage(img.Img' dst' srcRect.X' srcRect.Y' srcRect.Width' srcRect.Height' GraphicsUnit.Pixel' TileFlipXYAttributes);                                              }  #endif                                          }                                      }                                  }                              }  #if !PocketPC                              else if (FillEmptyTiles && MapProvider.Projection is MercatorProjection)                              {                                  #region -- fill empty lines --                                  int zoomOffset = 1;                                  Tile parentTile = Tile.Empty;                                  long Ix = 0;                                    while (!parentTile.NotEmpty && zoomOffset < Core.Zoom && zoomOffset <= LevelsKeepInMemmory)                                  {                                      Ix = (long)Math.Pow(2' zoomOffset);                                      parentTile = Core.Matrix.GetTileWithNoLock(Core.Zoom - zoomOffset++' new GPoint((int)(tilePoint.PosXY.X / Ix)' (int)(tilePoint.PosXY.Y / Ix)));                                  }                                    if (parentTile.NotEmpty)                                  {                                      long Xoff = Math.Abs(tilePoint.PosXY.X - (parentTile.Pos.X * Ix));                                      long Yoff = Math.Abs(tilePoint.PosXY.Y - (parentTile.Pos.Y * Ix));                                        // render tile                                       {                                          foreach (GMapImage img in parentTile.Overlays)                                          {                                              if (img != null && img.Img != null && !img.IsParent)                                              {                                                  if (!found)                                                      found = true;                                                    System.Drawing.RectangleF srcRect = new System.Drawing.RectangleF((float)(Xoff * (img.Img.Width / Ix))' (float)(Yoff * (img.Img.Height / Ix))' (img.Img.Width / Ix)' (img.Img.Height / Ix));                                                  System.Drawing.Rectangle dst = new System.Drawing.Rectangle((int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height);                                                    g.DrawImage(img.Img' dst' srcRect.X' srcRect.Y' srcRect.Width' srcRect.Height' GraphicsUnit.Pixel' TileFlipXYAttributes);                                                  g.FillRectangle(SelectedAreaFill' dst);                                              }                                          }                                      }                                  }                                  #endregion                              }  #endif                              // add text if tile is missing                              if (!found)                              {                                  lock (Core.FailedLoads)                                  {                                      var lt = new LoadTask(tilePoint.PosXY' Core.Zoom);                                      if (Core.FailedLoads.ContainsKey(lt))                                      {                                          var ex = Core.FailedLoads[lt];  #if !PocketPC                                          g.FillRectangle(EmptytileBrush' new RectangleF(Core.tileRect.X' Core.tileRect.Y' Core.tileRect.Width' Core.tileRect.Height));                                            g.DrawString("Exception: " + ex.Message' MissingDataFont' Brushes.Red' new RectangleF(Core.tileRect.X + 11' Core.tileRect.Y + 11' Core.tileRect.Width - 11' Core.tileRect.Height - 11));                                            g.DrawString(EmptyTileText' MissingDataFont' Brushes.Blue' new RectangleF(Core.tileRect.X' Core.tileRect.Y' Core.tileRect.Width' Core.tileRect.Height)' CenterFormat);    #else                                g.FillRectangle(EmptytileBrush' new System.Drawing.Rectangle((int) Core.tileRect.X' (int) Core.tileRect.Y' (int) Core.tileRect.Width' (int) Core.tileRect.Height));                                  g.DrawString("Exception: " + ex.Message' MissingDataFont' TileGridMissingTextBrush' new RectangleF(Core.tileRect.X + 11' Core.tileRect.Y + 11' Core.tileRect.Width - 11' Core.tileRect.Height - 11));                                  g.DrawString(EmptyTileText' MissingDataFont' TileGridMissingTextBrush' new RectangleF(Core.tileRect.X' Core.tileRect.Y + Core.tileRect.Width / 2 + (ShowTileGridLines ? 11 : -22)' Core.tileRect.Width' Core.tileRect.Height)' BottomFormat);  #endif                                            g.DrawRectangle(EmptyTileBorders' (int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height);                                      }                                  }                              }                                if (ShowTileGridLines)                              {                                  g.DrawRectangle(EmptyTileBorders' (int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height);                                  {  #if !PocketPC                                      g.DrawString((tilePoint.PosXY == Core.centerTileXYLocation ? "CENTER: " : "TILE: ") + tilePoint' MissingDataFont' Brushes.Red' new RectangleF(Core.tileRect.X' Core.tileRect.Y' Core.tileRect.Width' Core.tileRect.Height)' CenterFormat);  #else                                      g.DrawString((tilePoint.PosXY == Core.centerTileXYLocation ? "" : "TILE: ") + tilePoint' MissingDataFont' TileGridLinesTextBrush' new RectangleF(Core.tileRect.X' Core.tileRect.Y' Core.tileRect.Width' Core.tileRect.Height)' CenterFormat);  #endif                                  }                              }                          }                      }                  }              }              finally              {                  Core.Matrix.LeaveReadLock();                  Core.tileDrawingListLock.ReleaseReaderLock();              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,DrawMap,The following statement contains a magic number: try              {                  foreach (var tilePoint in Core.tileDrawingList)                  {                      {                          Core.tileRect.Location = tilePoint.PosPixel;                          if (ForceDoubleBuffer)                          {  #if !PocketPC                              if (MobileMode)                              {                                  Core.tileRect.Offset(Core.renderOffset);                              }  #else                              Core.tileRect.Offset(Core.renderOffset);  #endif                          }                          Core.tileRect.OffsetNegative(Core.compensationOffset);                            //if(Core.currentRegion.IntersectsWith(Core.tileRect) || IsRotated)                          {                              bool found = false;                                Tile t = Core.Matrix.GetTileWithNoLock(Core.Zoom' tilePoint.PosXY);                              if (t.NotEmpty)                              {                                  // render tile                                  {                                      foreach (GMapImage img in t.Overlays)                                      {                                          if (img != null && img.Img != null)                                          {                                              if (!found)                                                  found = true;                                                if (!img.IsParent)                                              {  #if !PocketPC                                                  if (!MapRenderTransform.HasValue && !IsRotated)                                                  {                                                      g.DrawImage(img.Img' Core.tileRect.X' Core.tileRect.Y' Core.tileRect.Width' Core.tileRect.Height);                                                  }                                                  else                                                  {                                                      g.DrawImage(img.Img' new Rectangle((int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height)' 0' 0' Core.tileRect.Width' Core.tileRect.Height' GraphicsUnit.Pixel' TileFlipXYAttributes);                                                  }  #else                                                  g.DrawImage(img.Img' (int) Core.tileRect.X' (int) Core.tileRect.Y);  #endif                                              }  #if !PocketPC                                              else                                              {                                                  // TODO: move calculations to loader thread                                                  System.Drawing.RectangleF srcRect = new System.Drawing.RectangleF((float)(img.Xoff * (img.Img.Width / img.Ix))' (float)(img.Yoff * (img.Img.Height / img.Ix))' (img.Img.Width / img.Ix)' (img.Img.Height / img.Ix));                                                  System.Drawing.Rectangle dst = new System.Drawing.Rectangle((int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height);                                                    g.DrawImage(img.Img' dst' srcRect.X' srcRect.Y' srcRect.Width' srcRect.Height' GraphicsUnit.Pixel' TileFlipXYAttributes);                                              }  #endif                                          }                                      }                                  }                              }  #if !PocketPC                              else if (FillEmptyTiles && MapProvider.Projection is MercatorProjection)                              {                                  #region -- fill empty lines --                                  int zoomOffset = 1;                                  Tile parentTile = Tile.Empty;                                  long Ix = 0;                                    while (!parentTile.NotEmpty && zoomOffset < Core.Zoom && zoomOffset <= LevelsKeepInMemmory)                                  {                                      Ix = (long)Math.Pow(2' zoomOffset);                                      parentTile = Core.Matrix.GetTileWithNoLock(Core.Zoom - zoomOffset++' new GPoint((int)(tilePoint.PosXY.X / Ix)' (int)(tilePoint.PosXY.Y / Ix)));                                  }                                    if (parentTile.NotEmpty)                                  {                                      long Xoff = Math.Abs(tilePoint.PosXY.X - (parentTile.Pos.X * Ix));                                      long Yoff = Math.Abs(tilePoint.PosXY.Y - (parentTile.Pos.Y * Ix));                                        // render tile                                       {                                          foreach (GMapImage img in parentTile.Overlays)                                          {                                              if (img != null && img.Img != null && !img.IsParent)                                              {                                                  if (!found)                                                      found = true;                                                    System.Drawing.RectangleF srcRect = new System.Drawing.RectangleF((float)(Xoff * (img.Img.Width / Ix))' (float)(Yoff * (img.Img.Height / Ix))' (img.Img.Width / Ix)' (img.Img.Height / Ix));                                                  System.Drawing.Rectangle dst = new System.Drawing.Rectangle((int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height);                                                    g.DrawImage(img.Img' dst' srcRect.X' srcRect.Y' srcRect.Width' srcRect.Height' GraphicsUnit.Pixel' TileFlipXYAttributes);                                                  g.FillRectangle(SelectedAreaFill' dst);                                              }                                          }                                      }                                  }                                  #endregion                              }  #endif                              // add text if tile is missing                              if (!found)                              {                                  lock (Core.FailedLoads)                                  {                                      var lt = new LoadTask(tilePoint.PosXY' Core.Zoom);                                      if (Core.FailedLoads.ContainsKey(lt))                                      {                                          var ex = Core.FailedLoads[lt];  #if !PocketPC                                          g.FillRectangle(EmptytileBrush' new RectangleF(Core.tileRect.X' Core.tileRect.Y' Core.tileRect.Width' Core.tileRect.Height));                                            g.DrawString("Exception: " + ex.Message' MissingDataFont' Brushes.Red' new RectangleF(Core.tileRect.X + 11' Core.tileRect.Y + 11' Core.tileRect.Width - 11' Core.tileRect.Height - 11));                                            g.DrawString(EmptyTileText' MissingDataFont' Brushes.Blue' new RectangleF(Core.tileRect.X' Core.tileRect.Y' Core.tileRect.Width' Core.tileRect.Height)' CenterFormat);    #else                                g.FillRectangle(EmptytileBrush' new System.Drawing.Rectangle((int) Core.tileRect.X' (int) Core.tileRect.Y' (int) Core.tileRect.Width' (int) Core.tileRect.Height));                                  g.DrawString("Exception: " + ex.Message' MissingDataFont' TileGridMissingTextBrush' new RectangleF(Core.tileRect.X + 11' Core.tileRect.Y + 11' Core.tileRect.Width - 11' Core.tileRect.Height - 11));                                  g.DrawString(EmptyTileText' MissingDataFont' TileGridMissingTextBrush' new RectangleF(Core.tileRect.X' Core.tileRect.Y + Core.tileRect.Width / 2 + (ShowTileGridLines ? 11 : -22)' Core.tileRect.Width' Core.tileRect.Height)' BottomFormat);  #endif                                            g.DrawRectangle(EmptyTileBorders' (int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height);                                      }                                  }                              }                                if (ShowTileGridLines)                              {                                  g.DrawRectangle(EmptyTileBorders' (int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height);                                  {  #if !PocketPC                                      g.DrawString((tilePoint.PosXY == Core.centerTileXYLocation ? "CENTER: " : "TILE: ") + tilePoint' MissingDataFont' Brushes.Red' new RectangleF(Core.tileRect.X' Core.tileRect.Y' Core.tileRect.Width' Core.tileRect.Height)' CenterFormat);  #else                                      g.DrawString((tilePoint.PosXY == Core.centerTileXYLocation ? "" : "TILE: ") + tilePoint' MissingDataFont' TileGridLinesTextBrush' new RectangleF(Core.tileRect.X' Core.tileRect.Y' Core.tileRect.Width' Core.tileRect.Height)' CenterFormat);  #endif                                  }                              }                          }                      }                  }              }              finally              {                  Core.Matrix.LeaveReadLock();                  Core.tileDrawingListLock.ReleaseReaderLock();              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,DrawMap,The following statement contains a magic number: try              {                  foreach (var tilePoint in Core.tileDrawingList)                  {                      {                          Core.tileRect.Location = tilePoint.PosPixel;                          if (ForceDoubleBuffer)                          {  #if !PocketPC                              if (MobileMode)                              {                                  Core.tileRect.Offset(Core.renderOffset);                              }  #else                              Core.tileRect.Offset(Core.renderOffset);  #endif                          }                          Core.tileRect.OffsetNegative(Core.compensationOffset);                            //if(Core.currentRegion.IntersectsWith(Core.tileRect) || IsRotated)                          {                              bool found = false;                                Tile t = Core.Matrix.GetTileWithNoLock(Core.Zoom' tilePoint.PosXY);                              if (t.NotEmpty)                              {                                  // render tile                                  {                                      foreach (GMapImage img in t.Overlays)                                      {                                          if (img != null && img.Img != null)                                          {                                              if (!found)                                                  found = true;                                                if (!img.IsParent)                                              {  #if !PocketPC                                                  if (!MapRenderTransform.HasValue && !IsRotated)                                                  {                                                      g.DrawImage(img.Img' Core.tileRect.X' Core.tileRect.Y' Core.tileRect.Width' Core.tileRect.Height);                                                  }                                                  else                                                  {                                                      g.DrawImage(img.Img' new Rectangle((int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height)' 0' 0' Core.tileRect.Width' Core.tileRect.Height' GraphicsUnit.Pixel' TileFlipXYAttributes);                                                  }  #else                                                  g.DrawImage(img.Img' (int) Core.tileRect.X' (int) Core.tileRect.Y);  #endif                                              }  #if !PocketPC                                              else                                              {                                                  // TODO: move calculations to loader thread                                                  System.Drawing.RectangleF srcRect = new System.Drawing.RectangleF((float)(img.Xoff * (img.Img.Width / img.Ix))' (float)(img.Yoff * (img.Img.Height / img.Ix))' (img.Img.Width / img.Ix)' (img.Img.Height / img.Ix));                                                  System.Drawing.Rectangle dst = new System.Drawing.Rectangle((int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height);                                                    g.DrawImage(img.Img' dst' srcRect.X' srcRect.Y' srcRect.Width' srcRect.Height' GraphicsUnit.Pixel' TileFlipXYAttributes);                                              }  #endif                                          }                                      }                                  }                              }  #if !PocketPC                              else if (FillEmptyTiles && MapProvider.Projection is MercatorProjection)                              {                                  #region -- fill empty lines --                                  int zoomOffset = 1;                                  Tile parentTile = Tile.Empty;                                  long Ix = 0;                                    while (!parentTile.NotEmpty && zoomOffset < Core.Zoom && zoomOffset <= LevelsKeepInMemmory)                                  {                                      Ix = (long)Math.Pow(2' zoomOffset);                                      parentTile = Core.Matrix.GetTileWithNoLock(Core.Zoom - zoomOffset++' new GPoint((int)(tilePoint.PosXY.X / Ix)' (int)(tilePoint.PosXY.Y / Ix)));                                  }                                    if (parentTile.NotEmpty)                                  {                                      long Xoff = Math.Abs(tilePoint.PosXY.X - (parentTile.Pos.X * Ix));                                      long Yoff = Math.Abs(tilePoint.PosXY.Y - (parentTile.Pos.Y * Ix));                                        // render tile                                       {                                          foreach (GMapImage img in parentTile.Overlays)                                          {                                              if (img != null && img.Img != null && !img.IsParent)                                              {                                                  if (!found)                                                      found = true;                                                    System.Drawing.RectangleF srcRect = new System.Drawing.RectangleF((float)(Xoff * (img.Img.Width / Ix))' (float)(Yoff * (img.Img.Height / Ix))' (img.Img.Width / Ix)' (img.Img.Height / Ix));                                                  System.Drawing.Rectangle dst = new System.Drawing.Rectangle((int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height);                                                    g.DrawImage(img.Img' dst' srcRect.X' srcRect.Y' srcRect.Width' srcRect.Height' GraphicsUnit.Pixel' TileFlipXYAttributes);                                                  g.FillRectangle(SelectedAreaFill' dst);                                              }                                          }                                      }                                  }                                  #endregion                              }  #endif                              // add text if tile is missing                              if (!found)                              {                                  lock (Core.FailedLoads)                                  {                                      var lt = new LoadTask(tilePoint.PosXY' Core.Zoom);                                      if (Core.FailedLoads.ContainsKey(lt))                                      {                                          var ex = Core.FailedLoads[lt];  #if !PocketPC                                          g.FillRectangle(EmptytileBrush' new RectangleF(Core.tileRect.X' Core.tileRect.Y' Core.tileRect.Width' Core.tileRect.Height));                                            g.DrawString("Exception: " + ex.Message' MissingDataFont' Brushes.Red' new RectangleF(Core.tileRect.X + 11' Core.tileRect.Y + 11' Core.tileRect.Width - 11' Core.tileRect.Height - 11));                                            g.DrawString(EmptyTileText' MissingDataFont' Brushes.Blue' new RectangleF(Core.tileRect.X' Core.tileRect.Y' Core.tileRect.Width' Core.tileRect.Height)' CenterFormat);    #else                                g.FillRectangle(EmptytileBrush' new System.Drawing.Rectangle((int) Core.tileRect.X' (int) Core.tileRect.Y' (int) Core.tileRect.Width' (int) Core.tileRect.Height));                                  g.DrawString("Exception: " + ex.Message' MissingDataFont' TileGridMissingTextBrush' new RectangleF(Core.tileRect.X + 11' Core.tileRect.Y + 11' Core.tileRect.Width - 11' Core.tileRect.Height - 11));                                  g.DrawString(EmptyTileText' MissingDataFont' TileGridMissingTextBrush' new RectangleF(Core.tileRect.X' Core.tileRect.Y + Core.tileRect.Width / 2 + (ShowTileGridLines ? 11 : -22)' Core.tileRect.Width' Core.tileRect.Height)' BottomFormat);  #endif                                            g.DrawRectangle(EmptyTileBorders' (int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height);                                      }                                  }                              }                                if (ShowTileGridLines)                              {                                  g.DrawRectangle(EmptyTileBorders' (int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height);                                  {  #if !PocketPC                                      g.DrawString((tilePoint.PosXY == Core.centerTileXYLocation ? "CENTER: " : "TILE: ") + tilePoint' MissingDataFont' Brushes.Red' new RectangleF(Core.tileRect.X' Core.tileRect.Y' Core.tileRect.Width' Core.tileRect.Height)' CenterFormat);  #else                                      g.DrawString((tilePoint.PosXY == Core.centerTileXYLocation ? "" : "TILE: ") + tilePoint' MissingDataFont' TileGridLinesTextBrush' new RectangleF(Core.tileRect.X' Core.tileRect.Y' Core.tileRect.Width' Core.tileRect.Height)' CenterFormat);  #endif                                  }                              }                          }                      }                  }              }              finally              {                  Core.Matrix.LeaveReadLock();                  Core.tileDrawingListLock.ReleaseReaderLock();              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (!IsRotated)  #endif              {                  g.DrawLine(ScalePen' -20' 0' 20' 0);                  g.DrawLine(ScalePen' 0' -20' 0' 20);  #if PocketPC                g.DrawString("debug build"' CopyrightFont' CopyrightBrush' 2' CopyrightFont.Size);  #else                  g.DrawString("debug build"' CopyrightFont' Brushes.Blue' 2' CopyrightFont.Height);  #endif              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (!IsRotated)  #endif              {                  g.DrawLine(ScalePen' -20' 0' 20' 0);                  g.DrawLine(ScalePen' 0' -20' 0' 20);  #if PocketPC                g.DrawString("debug build"' CopyrightFont' CopyrightBrush' 2' CopyrightFont.Size);  #else                  g.DrawString("debug build"' CopyrightFont' Brushes.Blue' 2' CopyrightFont.Height);  #endif              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (!IsRotated)  #endif              {                  g.DrawLine(ScalePen' -20' 0' 20' 0);                  g.DrawLine(ScalePen' 0' -20' 0' 20);  #if PocketPC                g.DrawString("debug build"' CopyrightFont' CopyrightBrush' 2' CopyrightFont.Size);  #else                  g.DrawString("debug build"' CopyrightFont' Brushes.Blue' 2' CopyrightFont.Height);  #endif              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (!IsRotated)  #endif              {                  g.DrawLine(ScalePen' -20' 0' 20' 0);                  g.DrawLine(ScalePen' 0' -20' 0' 20);  #if PocketPC                g.DrawString("debug build"' CopyrightFont' CopyrightBrush' 2' CopyrightFont.Size);  #else                  g.DrawString("debug build"' CopyrightFont' Brushes.Blue' 2' CopyrightFont.Height);  #endif              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (!IsRotated)  #endif              {                  g.DrawLine(ScalePen' -20' 0' 20' 0);                  g.DrawLine(ScalePen' 0' -20' 0' 20);  #if PocketPC                g.DrawString("debug build"' CopyrightFont' CopyrightBrush' 2' CopyrightFont.Size);  #else                  g.DrawString("debug build"' CopyrightFont' Brushes.Blue' 2' CopyrightFont.Height);  #endif              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (ShowCenter)              {                  g.DrawLine(CenterPen' Width / 2 - 5' Height / 2' Width / 2 + 5' Height / 2);                  g.DrawLine(CenterPen' Width / 2' Height / 2 - 5' Width / 2' Height / 2 + 5);              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (ShowCenter)              {                  g.DrawLine(CenterPen' Width / 2 - 5' Height / 2' Width / 2 + 5' Height / 2);                  g.DrawLine(CenterPen' Width / 2' Height / 2 - 5' Width / 2' Height / 2 + 5);              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (ShowCenter)              {                  g.DrawLine(CenterPen' Width / 2 - 5' Height / 2' Width / 2 + 5' Height / 2);                  g.DrawLine(CenterPen' Width / 2' Height / 2 - 5' Width / 2' Height / 2 + 5);              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (ShowCenter)              {                  g.DrawLine(CenterPen' Width / 2 - 5' Height / 2' Width / 2 + 5' Height / 2);                  g.DrawLine(CenterPen' Width / 2' Height / 2 - 5' Width / 2' Height / 2 + 5);              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (ShowCenter)              {                  g.DrawLine(CenterPen' Width / 2 - 5' Height / 2' Width / 2 + 5' Height / 2);                  g.DrawLine(CenterPen' Width / 2' Height / 2 - 5' Width / 2' Height / 2 + 5);              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (ShowCenter)              {                  g.DrawLine(CenterPen' Width / 2 - 5' Height / 2' Width / 2 + 5' Height / 2);                  g.DrawLine(CenterPen' Width / 2' Height / 2 - 5' Width / 2' Height / 2 + 5);              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (ShowCenter)              {                  g.DrawLine(CenterPen' Width / 2 - 5' Height / 2' Width / 2 + 5' Height / 2);                  g.DrawLine(CenterPen' Width / 2' Height / 2 - 5' Width / 2' Height / 2 + 5);              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (ShowCenter)              {                  g.DrawLine(CenterPen' Width / 2 - 5' Height / 2' Width / 2 + 5' Height / 2);                  g.DrawLine(CenterPen' Width / 2' Height / 2 - 5' Width / 2' Height / 2 + 5);              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (ShowCenter)              {                  g.DrawLine(CenterPen' Width / 2 - 5' Height / 2' Width / 2 + 5' Height / 2);                  g.DrawLine(CenterPen' Width / 2' Height / 2 - 5' Width / 2' Height / 2 + 5);              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (ShowCenter)              {                  g.DrawLine(CenterPen' Width / 2 - 5' Height / 2' Width / 2 + 5' Height / 2);                  g.DrawLine(CenterPen' Width / 2' Height / 2 - 5' Width / 2' Height / 2 + 5);              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (ShowCenter)              {                  g.DrawLine(CenterPen' Width / 2 - 5' Height / 2' Width / 2 + 5' Height / 2);                  g.DrawLine(CenterPen' Width / 2' Height / 2 - 5' Width / 2' Height / 2 + 5);              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (ShowCenter)              {                  g.DrawLine(CenterPen' Width / 2 - 5' Height / 2' Width / 2 + 5' Height / 2);                  g.DrawLine(CenterPen' Width / 2' Height / 2 - 5' Width / 2' Height / 2 + 5);              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (!string.IsNullOrEmpty(Core.provider.Copyright))              {  #if !PocketPC                  g.DrawString(Core.provider.Copyright' CopyrightFont' Brushes.Navy' 3' Height - CopyrightFont.Height - 5);  #else              g.DrawString(Core.provider.Copyright' CopyrightFont' CopyrightBrush' 3' Height - CopyrightFont.Size - 15);  #endif              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (!string.IsNullOrEmpty(Core.provider.Copyright))              {  #if !PocketPC                  g.DrawString(Core.provider.Copyright' CopyrightFont' Brushes.Navy' 3' Height - CopyrightFont.Height - 5);  #else              g.DrawString(Core.provider.Copyright' CopyrightFont' CopyrightBrush' 3' Height - CopyrightFont.Size - 15);  #endif              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnPaintOverlays,The following statement contains a magic number: if (MapScaleInfoEnabled)              {                  if (Width > Core.pxRes5000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes5000km' 10);                      g.DrawString("5000Km"' ScaleFont' Brushes.Blue' Core.pxRes5000km + 10' 11);                  }                  if (Width > Core.pxRes1000km)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000km' 10);                      g.DrawString("1000Km"' ScaleFont' Brushes.Blue' Core.pxRes1000km + 10' 11);                  }                  if (Width > Core.pxRes100km && Zoom > 2)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100km' 10);                      g.DrawString("100Km"' ScaleFont' Brushes.Blue' Core.pxRes100km + 10' 11);                  }                  if (Width > Core.pxRes10km && Zoom > 5)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes10km' 10);                      g.DrawString("10Km"' ScaleFont' Brushes.Blue' Core.pxRes10km + 10' 11);                  }                  if (Width > Core.pxRes1000m && Zoom >= 10)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes1000m' 10);                      g.DrawString("1000m"' ScaleFont' Brushes.Blue' Core.pxRes1000m + 10' 11);                  }                  if (Width > Core.pxRes100m && Zoom > 11)                  {                      g.DrawRectangle(ScalePen' 10' 10' Core.pxRes100m' 10);                      g.DrawString("100m"' ScaleFont' Brushes.Blue' Core.pxRes100m + 9' 11);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,UpdateRotationMatrix,The following statement contains a magic number: PointF center = new PointF(Core.Width / 2' Core.Height / 2);
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,UpdateRotationMatrix,The following statement contains a magic number: PointF center = new PointF(Core.Width / 2' Core.Height / 2);
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnMouseMove,The following statement contains a magic number: if (!Core.IsDragging && !Core.mouseDown.IsEmpty)              {  #if PocketPC              GPoint p = new GPoint(e.X' e.Y);  #else                  GPoint p = ApplyRotationInversion(e.X' e.Y);  #endif                  if (Math.Abs(p.X - Core.mouseDown.X) * 2 >= DragSize.Width || Math.Abs(p.Y - Core.mouseDown.Y) * 2 >= DragSize.Height)                  {                      Core.BeginDrag(Core.mouseDown);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnMouseMove,The following statement contains a magic number: if (!Core.IsDragging && !Core.mouseDown.IsEmpty)              {  #if PocketPC              GPoint p = new GPoint(e.X' e.Y);  #else                  GPoint p = ApplyRotationInversion(e.X' e.Y);  #endif                  if (Math.Abs(p.X - Core.mouseDown.X) * 2 >= DragSize.Width || Math.Abs(p.Y - Core.mouseDown.Y) * 2 >= DragSize.Height)                  {                      Core.BeginDrag(Core.mouseDown);                  }              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnMouseWheel,The following statement contains a magic number: if (MouseWheelZoomEnabled && mouseIn && (!IsMouseOverMarker || IgnoreMarkerOnMouseWheel) && !Core.IsDragging)              {                  if (Core.mouseLastZoom.X != e.X && Core.mouseLastZoom.Y != e.Y)                  {                      if (MouseWheelZoomType == MouseWheelZoomType.MousePositionAndCenter)                      {                          Core.position = FromLocalToLatLng(e.X' e.Y);                      }                      else if (MouseWheelZoomType == MouseWheelZoomType.ViewCenter)                      {                          Core.position = FromLocalToLatLng((int)Width / 2' (int)Height / 2);                      }                      else if (MouseWheelZoomType == MouseWheelZoomType.MousePositionWithoutCenter)                      {                          Core.position = FromLocalToLatLng(e.X' e.Y);                      }                        Core.mouseLastZoom.X = e.X;                      Core.mouseLastZoom.Y = e.Y;                  }                    // set mouse position to map center                  if (MouseWheelZoomType != MouseWheelZoomType.MousePositionWithoutCenter)                  {                      if (!GMaps.Instance.IsRunningOnMono)                      {                          System.Drawing.Point p = PointToScreen(new System.Drawing.Point(Width / 2' Height / 2));                          Stuff.SetCursorPos((int)p.X' (int)p.Y);                      }                  }                    Core.MouseWheelZooming = true;                    if (e.Delta > 0)                  {                      if (!InvertedMouseWheelZooming)                      {                          Zoom = ((int)Zoom) + 1;                      }                      else                      {                          Zoom = ((int)(Zoom + 0.99)) - 1;                      }                  }                  else if (e.Delta < 0)                  {                      if (!InvertedMouseWheelZooming)                      {                          Zoom = ((int)(Zoom + 0.99)) - 1;                      }                      else                      {                          Zoom = ((int)Zoom) + 1;                      }                  }                    Core.MouseWheelZooming = false;               }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnMouseWheel,The following statement contains a magic number: if (MouseWheelZoomEnabled && mouseIn && (!IsMouseOverMarker || IgnoreMarkerOnMouseWheel) && !Core.IsDragging)              {                  if (Core.mouseLastZoom.X != e.X && Core.mouseLastZoom.Y != e.Y)                  {                      if (MouseWheelZoomType == MouseWheelZoomType.MousePositionAndCenter)                      {                          Core.position = FromLocalToLatLng(e.X' e.Y);                      }                      else if (MouseWheelZoomType == MouseWheelZoomType.ViewCenter)                      {                          Core.position = FromLocalToLatLng((int)Width / 2' (int)Height / 2);                      }                      else if (MouseWheelZoomType == MouseWheelZoomType.MousePositionWithoutCenter)                      {                          Core.position = FromLocalToLatLng(e.X' e.Y);                      }                        Core.mouseLastZoom.X = e.X;                      Core.mouseLastZoom.Y = e.Y;                  }                    // set mouse position to map center                  if (MouseWheelZoomType != MouseWheelZoomType.MousePositionWithoutCenter)                  {                      if (!GMaps.Instance.IsRunningOnMono)                      {                          System.Drawing.Point p = PointToScreen(new System.Drawing.Point(Width / 2' Height / 2));                          Stuff.SetCursorPos((int)p.X' (int)p.Y);                      }                  }                    Core.MouseWheelZooming = true;                    if (e.Delta > 0)                  {                      if (!InvertedMouseWheelZooming)                      {                          Zoom = ((int)Zoom) + 1;                      }                      else                      {                          Zoom = ((int)(Zoom + 0.99)) - 1;                      }                  }                  else if (e.Delta < 0)                  {                      if (!InvertedMouseWheelZooming)                      {                          Zoom = ((int)(Zoom + 0.99)) - 1;                      }                      else                      {                          Zoom = ((int)Zoom) + 1;                      }                  }                    Core.MouseWheelZooming = false;               }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnMouseWheel,The following statement contains a magic number: if (MouseWheelZoomEnabled && mouseIn && (!IsMouseOverMarker || IgnoreMarkerOnMouseWheel) && !Core.IsDragging)              {                  if (Core.mouseLastZoom.X != e.X && Core.mouseLastZoom.Y != e.Y)                  {                      if (MouseWheelZoomType == MouseWheelZoomType.MousePositionAndCenter)                      {                          Core.position = FromLocalToLatLng(e.X' e.Y);                      }                      else if (MouseWheelZoomType == MouseWheelZoomType.ViewCenter)                      {                          Core.position = FromLocalToLatLng((int)Width / 2' (int)Height / 2);                      }                      else if (MouseWheelZoomType == MouseWheelZoomType.MousePositionWithoutCenter)                      {                          Core.position = FromLocalToLatLng(e.X' e.Y);                      }                        Core.mouseLastZoom.X = e.X;                      Core.mouseLastZoom.Y = e.Y;                  }                    // set mouse position to map center                  if (MouseWheelZoomType != MouseWheelZoomType.MousePositionWithoutCenter)                  {                      if (!GMaps.Instance.IsRunningOnMono)                      {                          System.Drawing.Point p = PointToScreen(new System.Drawing.Point(Width / 2' Height / 2));                          Stuff.SetCursorPos((int)p.X' (int)p.Y);                      }                  }                    Core.MouseWheelZooming = true;                    if (e.Delta > 0)                  {                      if (!InvertedMouseWheelZooming)                      {                          Zoom = ((int)Zoom) + 1;                      }                      else                      {                          Zoom = ((int)(Zoom + 0.99)) - 1;                      }                  }                  else if (e.Delta < 0)                  {                      if (!InvertedMouseWheelZooming)                      {                          Zoom = ((int)(Zoom + 0.99)) - 1;                      }                      else                      {                          Zoom = ((int)Zoom) + 1;                      }                  }                    Core.MouseWheelZooming = false;               }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnMouseWheel,The following statement contains a magic number: if (MouseWheelZoomEnabled && mouseIn && (!IsMouseOverMarker || IgnoreMarkerOnMouseWheel) && !Core.IsDragging)              {                  if (Core.mouseLastZoom.X != e.X && Core.mouseLastZoom.Y != e.Y)                  {                      if (MouseWheelZoomType == MouseWheelZoomType.MousePositionAndCenter)                      {                          Core.position = FromLocalToLatLng(e.X' e.Y);                      }                      else if (MouseWheelZoomType == MouseWheelZoomType.ViewCenter)                      {                          Core.position = FromLocalToLatLng((int)Width / 2' (int)Height / 2);                      }                      else if (MouseWheelZoomType == MouseWheelZoomType.MousePositionWithoutCenter)                      {                          Core.position = FromLocalToLatLng(e.X' e.Y);                      }                        Core.mouseLastZoom.X = e.X;                      Core.mouseLastZoom.Y = e.Y;                  }                    // set mouse position to map center                  if (MouseWheelZoomType != MouseWheelZoomType.MousePositionWithoutCenter)                  {                      if (!GMaps.Instance.IsRunningOnMono)                      {                          System.Drawing.Point p = PointToScreen(new System.Drawing.Point(Width / 2' Height / 2));                          Stuff.SetCursorPos((int)p.X' (int)p.Y);                      }                  }                    Core.MouseWheelZooming = true;                    if (e.Delta > 0)                  {                      if (!InvertedMouseWheelZooming)                      {                          Zoom = ((int)Zoom) + 1;                      }                      else                      {                          Zoom = ((int)(Zoom + 0.99)) - 1;                      }                  }                  else if (e.Delta < 0)                  {                      if (!InvertedMouseWheelZooming)                      {                          Zoom = ((int)(Zoom + 0.99)) - 1;                      }                      else                      {                          Zoom = ((int)Zoom) + 1;                      }                  }                    Core.MouseWheelZooming = false;               }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnMouseWheel,The following statement contains a magic number: if (MouseWheelZoomEnabled && mouseIn && (!IsMouseOverMarker || IgnoreMarkerOnMouseWheel) && !Core.IsDragging)              {                  if (Core.mouseLastZoom.X != e.X && Core.mouseLastZoom.Y != e.Y)                  {                      if (MouseWheelZoomType == MouseWheelZoomType.MousePositionAndCenter)                      {                          Core.position = FromLocalToLatLng(e.X' e.Y);                      }                      else if (MouseWheelZoomType == MouseWheelZoomType.ViewCenter)                      {                          Core.position = FromLocalToLatLng((int)Width / 2' (int)Height / 2);                      }                      else if (MouseWheelZoomType == MouseWheelZoomType.MousePositionWithoutCenter)                      {                          Core.position = FromLocalToLatLng(e.X' e.Y);                      }                        Core.mouseLastZoom.X = e.X;                      Core.mouseLastZoom.Y = e.Y;                  }                    // set mouse position to map center                  if (MouseWheelZoomType != MouseWheelZoomType.MousePositionWithoutCenter)                  {                      if (!GMaps.Instance.IsRunningOnMono)                      {                          System.Drawing.Point p = PointToScreen(new System.Drawing.Point(Width / 2' Height / 2));                          Stuff.SetCursorPos((int)p.X' (int)p.Y);                      }                  }                    Core.MouseWheelZooming = true;                    if (e.Delta > 0)                  {                      if (!InvertedMouseWheelZooming)                      {                          Zoom = ((int)Zoom) + 1;                      }                      else                      {                          Zoom = ((int)(Zoom + 0.99)) - 1;                      }                  }                  else if (e.Delta < 0)                  {                      if (!InvertedMouseWheelZooming)                      {                          Zoom = ((int)(Zoom + 0.99)) - 1;                      }                      else                      {                          Zoom = ((int)Zoom) + 1;                      }                  }                    Core.MouseWheelZooming = false;               }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,OnMouseWheel,The following statement contains a magic number: if (MouseWheelZoomEnabled && mouseIn && (!IsMouseOverMarker || IgnoreMarkerOnMouseWheel) && !Core.IsDragging)              {                  if (Core.mouseLastZoom.X != e.X && Core.mouseLastZoom.Y != e.Y)                  {                      if (MouseWheelZoomType == MouseWheelZoomType.MousePositionAndCenter)                      {                          Core.position = FromLocalToLatLng(e.X' e.Y);                      }                      else if (MouseWheelZoomType == MouseWheelZoomType.ViewCenter)                      {                          Core.position = FromLocalToLatLng((int)Width / 2' (int)Height / 2);                      }                      else if (MouseWheelZoomType == MouseWheelZoomType.MousePositionWithoutCenter)                      {                          Core.position = FromLocalToLatLng(e.X' e.Y);                      }                        Core.mouseLastZoom.X = e.X;                      Core.mouseLastZoom.Y = e.Y;                  }                    // set mouse position to map center                  if (MouseWheelZoomType != MouseWheelZoomType.MousePositionWithoutCenter)                  {                      if (!GMaps.Instance.IsRunningOnMono)                      {                          System.Drawing.Point p = PointToScreen(new System.Drawing.Point(Width / 2' Height / 2));                          Stuff.SetCursorPos((int)p.X' (int)p.Y);                      }                  }                    Core.MouseWheelZooming = true;                    if (e.Delta > 0)                  {                      if (!InvertedMouseWheelZooming)                      {                          Zoom = ((int)Zoom) + 1;                      }                      else                      {                          Zoom = ((int)(Zoom + 0.99)) - 1;                      }                  }                  else if (e.Delta < 0)                  {                      if (!InvertedMouseWheelZooming)                      {                          Zoom = ((int)(Zoom + 0.99)) - 1;                      }                      else                      {                          Zoom = ((int)Zoom) + 1;                      }                  }                    Core.MouseWheelZooming = false;               }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,FromLocalToLatLng,The following statement contains a magic number: if (IsRotated)              {                  System.Drawing.Point[] tt = new System.Drawing.Point[] { new System.Drawing.Point(x' y) };                  rotationMatrixInvert.TransformPoints(tt);                  var f = tt[0];                    if (VirtualSizeEnabled)                  {                      f.X += (Width - Core.vWidth) / 2;                      f.Y += (Height - Core.vHeight) / 2;                  }                    x = f.X;                  y = f.Y;              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,FromLocalToLatLng,The following statement contains a magic number: if (IsRotated)              {                  System.Drawing.Point[] tt = new System.Drawing.Point[] { new System.Drawing.Point(x' y) };                  rotationMatrixInvert.TransformPoints(tt);                  var f = tt[0];                    if (VirtualSizeEnabled)                  {                      f.X += (Width - Core.vWidth) / 2;                      f.Y += (Height - Core.vHeight) / 2;                  }                    x = f.X;                  y = f.Y;              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,FromLatLngToLocal,The following statement contains a magic number: if (IsRotated)              {                  System.Drawing.Point[] tt = new System.Drawing.Point[] { new System.Drawing.Point((int)ret.X' (int)ret.Y) };                  rotationMatrix.TransformPoints(tt);                  var f = tt[0];                    if (VirtualSizeEnabled)                  {                      f.X += (Width - Core.vWidth) / 2;                      f.Y += (Height - Core.vHeight) / 2;                  }                    ret.X = f.X;                  ret.Y = f.Y;              }
Magic Number,GMap.NET.WindowsForms,GMapControl,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\GMapControl.cs,FromLatLngToLocal,The following statement contains a magic number: if (IsRotated)              {                  System.Drawing.Point[] tt = new System.Drawing.Point[] { new System.Drawing.Point((int)ret.X' (int)ret.Y) };                  rotationMatrix.TransformPoints(tt);                  var f = tt[0];                    if (VirtualSizeEnabled)                  {                      f.X += (Width - Core.vWidth) / 2;                      f.Y += (Height - Core.vHeight) / 2;                  }                    ret.X = f.X;                  ret.Y = f.Y;              }
Magic Number,GMap.NET.WindowsForms.Markers,GMarkerGoogle,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\Markers\GMarkerGoogle.cs,LoadBitmap,The following statement contains a magic number: switch(Type)           {              case GMarkerGoogleType.arrow:              {                 Offset = new Point(-11' -Size.Height);                   if(arrowshadow == null)                 {                    arrowshadow = Resources.arrowshadow;                 }                 BitmapShadow = arrowshadow;              }              break;                case GMarkerGoogleType.blue:              case GMarkerGoogleType.blue_dot:              case GMarkerGoogleType.green:              case GMarkerGoogleType.green_dot:              case GMarkerGoogleType.yellow:              case GMarkerGoogleType.yellow_dot:              case GMarkerGoogleType.lightblue:              case GMarkerGoogleType.lightblue_dot:              case GMarkerGoogleType.orange:              case GMarkerGoogleType.orange_dot:              case GMarkerGoogleType.pink:              case GMarkerGoogleType.pink_dot:              case GMarkerGoogleType.purple:              case GMarkerGoogleType.purple_dot:              case GMarkerGoogleType.red:              case GMarkerGoogleType.red_dot:              {                 Offset = new Point(-Size.Width / 2 + 1' -Size.Height + 1);                   if(msmarker_shadow == null)                 {                    msmarker_shadow = Resources.msmarker_shadow;                 }                 BitmapShadow = msmarker_shadow;              }              break;                case GMarkerGoogleType.black_small:              case GMarkerGoogleType.blue_small:              case GMarkerGoogleType.brown_small:              case GMarkerGoogleType.gray_small:              case GMarkerGoogleType.green_small:              case GMarkerGoogleType.yellow_small:              case GMarkerGoogleType.orange_small:              case GMarkerGoogleType.purple_small:              case GMarkerGoogleType.red_small:              case GMarkerGoogleType.white_small:              {                 Offset = new Point(-Size.Width / 2' -Size.Height + 1);                   if(shadow_small == null)                 {                    shadow_small = Resources.shadow_small;                 }                 BitmapShadow = shadow_small;              }              break;                case GMarkerGoogleType.green_big_go:              case GMarkerGoogleType.yellow_big_pause:              case GMarkerGoogleType.red_big_stop:              {                 Offset = new Point(-Size.Width / 2' -Size.Height + 1);                 if(msmarker_shadow == null)                 {                    msmarker_shadow = Resources.msmarker_shadow;                 }                 BitmapShadow = msmarker_shadow;              }              break;                case GMarkerGoogleType.blue_pushpin:              case GMarkerGoogleType.green_pushpin:              case GMarkerGoogleType.yellow_pushpin:              case GMarkerGoogleType.lightblue_pushpin:              case GMarkerGoogleType.pink_pushpin:              case GMarkerGoogleType.purple_pushpin:              case GMarkerGoogleType.red_pushpin:              {                 Offset = new Point(-9' -Size.Height + 1);                   if(pushpin_shadow == null)                 {                    pushpin_shadow = Resources.pushpin_shadow;                 }                 BitmapShadow = pushpin_shadow;              }              break;           }
Magic Number,GMap.NET.WindowsForms.Markers,GMarkerGoogle,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\Markers\GMarkerGoogle.cs,LoadBitmap,The following statement contains a magic number: switch(Type)           {              case GMarkerGoogleType.arrow:              {                 Offset = new Point(-11' -Size.Height);                   if(arrowshadow == null)                 {                    arrowshadow = Resources.arrowshadow;                 }                 BitmapShadow = arrowshadow;              }              break;                case GMarkerGoogleType.blue:              case GMarkerGoogleType.blue_dot:              case GMarkerGoogleType.green:              case GMarkerGoogleType.green_dot:              case GMarkerGoogleType.yellow:              case GMarkerGoogleType.yellow_dot:              case GMarkerGoogleType.lightblue:              case GMarkerGoogleType.lightblue_dot:              case GMarkerGoogleType.orange:              case GMarkerGoogleType.orange_dot:              case GMarkerGoogleType.pink:              case GMarkerGoogleType.pink_dot:              case GMarkerGoogleType.purple:              case GMarkerGoogleType.purple_dot:              case GMarkerGoogleType.red:              case GMarkerGoogleType.red_dot:              {                 Offset = new Point(-Size.Width / 2 + 1' -Size.Height + 1);                   if(msmarker_shadow == null)                 {                    msmarker_shadow = Resources.msmarker_shadow;                 }                 BitmapShadow = msmarker_shadow;              }              break;                case GMarkerGoogleType.black_small:              case GMarkerGoogleType.blue_small:              case GMarkerGoogleType.brown_small:              case GMarkerGoogleType.gray_small:              case GMarkerGoogleType.green_small:              case GMarkerGoogleType.yellow_small:              case GMarkerGoogleType.orange_small:              case GMarkerGoogleType.purple_small:              case GMarkerGoogleType.red_small:              case GMarkerGoogleType.white_small:              {                 Offset = new Point(-Size.Width / 2' -Size.Height + 1);                   if(shadow_small == null)                 {                    shadow_small = Resources.shadow_small;                 }                 BitmapShadow = shadow_small;              }              break;                case GMarkerGoogleType.green_big_go:              case GMarkerGoogleType.yellow_big_pause:              case GMarkerGoogleType.red_big_stop:              {                 Offset = new Point(-Size.Width / 2' -Size.Height + 1);                 if(msmarker_shadow == null)                 {                    msmarker_shadow = Resources.msmarker_shadow;                 }                 BitmapShadow = msmarker_shadow;              }              break;                case GMarkerGoogleType.blue_pushpin:              case GMarkerGoogleType.green_pushpin:              case GMarkerGoogleType.yellow_pushpin:              case GMarkerGoogleType.lightblue_pushpin:              case GMarkerGoogleType.pink_pushpin:              case GMarkerGoogleType.purple_pushpin:              case GMarkerGoogleType.red_pushpin:              {                 Offset = new Point(-9' -Size.Height + 1);                   if(pushpin_shadow == null)                 {                    pushpin_shadow = Resources.pushpin_shadow;                 }                 BitmapShadow = pushpin_shadow;              }              break;           }
Magic Number,GMap.NET.WindowsForms.Markers,GMarkerGoogle,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\Markers\GMarkerGoogle.cs,LoadBitmap,The following statement contains a magic number: switch(Type)           {              case GMarkerGoogleType.arrow:              {                 Offset = new Point(-11' -Size.Height);                   if(arrowshadow == null)                 {                    arrowshadow = Resources.arrowshadow;                 }                 BitmapShadow = arrowshadow;              }              break;                case GMarkerGoogleType.blue:              case GMarkerGoogleType.blue_dot:              case GMarkerGoogleType.green:              case GMarkerGoogleType.green_dot:              case GMarkerGoogleType.yellow:              case GMarkerGoogleType.yellow_dot:              case GMarkerGoogleType.lightblue:              case GMarkerGoogleType.lightblue_dot:              case GMarkerGoogleType.orange:              case GMarkerGoogleType.orange_dot:              case GMarkerGoogleType.pink:              case GMarkerGoogleType.pink_dot:              case GMarkerGoogleType.purple:              case GMarkerGoogleType.purple_dot:              case GMarkerGoogleType.red:              case GMarkerGoogleType.red_dot:              {                 Offset = new Point(-Size.Width / 2 + 1' -Size.Height + 1);                   if(msmarker_shadow == null)                 {                    msmarker_shadow = Resources.msmarker_shadow;                 }                 BitmapShadow = msmarker_shadow;              }              break;                case GMarkerGoogleType.black_small:              case GMarkerGoogleType.blue_small:              case GMarkerGoogleType.brown_small:              case GMarkerGoogleType.gray_small:              case GMarkerGoogleType.green_small:              case GMarkerGoogleType.yellow_small:              case GMarkerGoogleType.orange_small:              case GMarkerGoogleType.purple_small:              case GMarkerGoogleType.red_small:              case GMarkerGoogleType.white_small:              {                 Offset = new Point(-Size.Width / 2' -Size.Height + 1);                   if(shadow_small == null)                 {                    shadow_small = Resources.shadow_small;                 }                 BitmapShadow = shadow_small;              }              break;                case GMarkerGoogleType.green_big_go:              case GMarkerGoogleType.yellow_big_pause:              case GMarkerGoogleType.red_big_stop:              {                 Offset = new Point(-Size.Width / 2' -Size.Height + 1);                 if(msmarker_shadow == null)                 {                    msmarker_shadow = Resources.msmarker_shadow;                 }                 BitmapShadow = msmarker_shadow;              }              break;                case GMarkerGoogleType.blue_pushpin:              case GMarkerGoogleType.green_pushpin:              case GMarkerGoogleType.yellow_pushpin:              case GMarkerGoogleType.lightblue_pushpin:              case GMarkerGoogleType.pink_pushpin:              case GMarkerGoogleType.purple_pushpin:              case GMarkerGoogleType.red_pushpin:              {                 Offset = new Point(-9' -Size.Height + 1);                   if(pushpin_shadow == null)                 {                    pushpin_shadow = Resources.pushpin_shadow;                 }                 BitmapShadow = pushpin_shadow;              }              break;           }
Magic Number,GMap.NET.WindowsForms.Markers,GMarkerGoogle,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\Markers\GMarkerGoogle.cs,LoadBitmap,The following statement contains a magic number: switch(Type)           {              case GMarkerGoogleType.arrow:              {                 Offset = new Point(-11' -Size.Height);                   if(arrowshadow == null)                 {                    arrowshadow = Resources.arrowshadow;                 }                 BitmapShadow = arrowshadow;              }              break;                case GMarkerGoogleType.blue:              case GMarkerGoogleType.blue_dot:              case GMarkerGoogleType.green:              case GMarkerGoogleType.green_dot:              case GMarkerGoogleType.yellow:              case GMarkerGoogleType.yellow_dot:              case GMarkerGoogleType.lightblue:              case GMarkerGoogleType.lightblue_dot:              case GMarkerGoogleType.orange:              case GMarkerGoogleType.orange_dot:              case GMarkerGoogleType.pink:              case GMarkerGoogleType.pink_dot:              case GMarkerGoogleType.purple:              case GMarkerGoogleType.purple_dot:              case GMarkerGoogleType.red:              case GMarkerGoogleType.red_dot:              {                 Offset = new Point(-Size.Width / 2 + 1' -Size.Height + 1);                   if(msmarker_shadow == null)                 {                    msmarker_shadow = Resources.msmarker_shadow;                 }                 BitmapShadow = msmarker_shadow;              }              break;                case GMarkerGoogleType.black_small:              case GMarkerGoogleType.blue_small:              case GMarkerGoogleType.brown_small:              case GMarkerGoogleType.gray_small:              case GMarkerGoogleType.green_small:              case GMarkerGoogleType.yellow_small:              case GMarkerGoogleType.orange_small:              case GMarkerGoogleType.purple_small:              case GMarkerGoogleType.red_small:              case GMarkerGoogleType.white_small:              {                 Offset = new Point(-Size.Width / 2' -Size.Height + 1);                   if(shadow_small == null)                 {                    shadow_small = Resources.shadow_small;                 }                 BitmapShadow = shadow_small;              }              break;                case GMarkerGoogleType.green_big_go:              case GMarkerGoogleType.yellow_big_pause:              case GMarkerGoogleType.red_big_stop:              {                 Offset = new Point(-Size.Width / 2' -Size.Height + 1);                 if(msmarker_shadow == null)                 {                    msmarker_shadow = Resources.msmarker_shadow;                 }                 BitmapShadow = msmarker_shadow;              }              break;                case GMarkerGoogleType.blue_pushpin:              case GMarkerGoogleType.green_pushpin:              case GMarkerGoogleType.yellow_pushpin:              case GMarkerGoogleType.lightblue_pushpin:              case GMarkerGoogleType.pink_pushpin:              case GMarkerGoogleType.purple_pushpin:              case GMarkerGoogleType.red_pushpin:              {                 Offset = new Point(-9' -Size.Height + 1);                   if(pushpin_shadow == null)                 {                    pushpin_shadow = Resources.pushpin_shadow;                 }                 BitmapShadow = pushpin_shadow;              }              break;           }
Magic Number,GMap.NET.WindowsForms.Markers,GMarkerGoogle,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\Markers\GMarkerGoogle.cs,LoadBitmap,The following statement contains a magic number: switch(Type)           {              case GMarkerGoogleType.arrow:              {                 Offset = new Point(-11' -Size.Height);                   if(arrowshadow == null)                 {                    arrowshadow = Resources.arrowshadow;                 }                 BitmapShadow = arrowshadow;              }              break;                case GMarkerGoogleType.blue:              case GMarkerGoogleType.blue_dot:              case GMarkerGoogleType.green:              case GMarkerGoogleType.green_dot:              case GMarkerGoogleType.yellow:              case GMarkerGoogleType.yellow_dot:              case GMarkerGoogleType.lightblue:              case GMarkerGoogleType.lightblue_dot:              case GMarkerGoogleType.orange:              case GMarkerGoogleType.orange_dot:              case GMarkerGoogleType.pink:              case GMarkerGoogleType.pink_dot:              case GMarkerGoogleType.purple:              case GMarkerGoogleType.purple_dot:              case GMarkerGoogleType.red:              case GMarkerGoogleType.red_dot:              {                 Offset = new Point(-Size.Width / 2 + 1' -Size.Height + 1);                   if(msmarker_shadow == null)                 {                    msmarker_shadow = Resources.msmarker_shadow;                 }                 BitmapShadow = msmarker_shadow;              }              break;                case GMarkerGoogleType.black_small:              case GMarkerGoogleType.blue_small:              case GMarkerGoogleType.brown_small:              case GMarkerGoogleType.gray_small:              case GMarkerGoogleType.green_small:              case GMarkerGoogleType.yellow_small:              case GMarkerGoogleType.orange_small:              case GMarkerGoogleType.purple_small:              case GMarkerGoogleType.red_small:              case GMarkerGoogleType.white_small:              {                 Offset = new Point(-Size.Width / 2' -Size.Height + 1);                   if(shadow_small == null)                 {                    shadow_small = Resources.shadow_small;                 }                 BitmapShadow = shadow_small;              }              break;                case GMarkerGoogleType.green_big_go:              case GMarkerGoogleType.yellow_big_pause:              case GMarkerGoogleType.red_big_stop:              {                 Offset = new Point(-Size.Width / 2' -Size.Height + 1);                 if(msmarker_shadow == null)                 {                    msmarker_shadow = Resources.msmarker_shadow;                 }                 BitmapShadow = msmarker_shadow;              }              break;                case GMarkerGoogleType.blue_pushpin:              case GMarkerGoogleType.green_pushpin:              case GMarkerGoogleType.yellow_pushpin:              case GMarkerGoogleType.lightblue_pushpin:              case GMarkerGoogleType.pink_pushpin:              case GMarkerGoogleType.purple_pushpin:              case GMarkerGoogleType.red_pushpin:              {                 Offset = new Point(-9' -Size.Height + 1);                   if(pushpin_shadow == null)                 {                    pushpin_shadow = Resources.pushpin_shadow;                 }                 BitmapShadow = pushpin_shadow;              }              break;           }
Magic Number,GMap.NET.WindowsForms.Markers,GMarkerGoogle,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\Markers\GMarkerGoogle.cs,GMarkerGoogle,The following statement contains a magic number: Offset = new Point(-Size.Width / 2' -Size.Height);
Magic Number,GMap.NET.WindowsForms.Markers,GMarkerCross,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\Markers\GMarkerCross.cs,OnRender,The following statement contains a magic number: p1.Offset(0' -10);
Magic Number,GMap.NET.WindowsForms.Markers,GMarkerCross,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\Markers\GMarkerCross.cs,OnRender,The following statement contains a magic number: p2.Offset(0' 10);
Magic Number,GMap.NET.WindowsForms.Markers,GMarkerCross,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\Markers\GMarkerCross.cs,OnRender,The following statement contains a magic number: p3.Offset(-10' 0);
Magic Number,GMap.NET.WindowsForms.Markers,GMarkerCross,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\Markers\GMarkerCross.cs,OnRender,The following statement contains a magic number: p4.Offset(10' 0);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,GMapBaloonToolTip,The following statement contains a magic number: DefaultStroke.Width = 3;
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: using(GraphicsPath objGP = new GraphicsPath())           {              objGP.AddLine(rect.X + 2 * Radius' rect.Y + rect.Height' rect.X + Radius' rect.Y + rect.Height + Radius);              objGP.AddLine(rect.X + Radius' rect.Y + rect.Height + Radius' rect.X + Radius' rect.Y + rect.Height);                objGP.AddArc(rect.X' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 90' 90);              objGP.AddLine(rect.X' rect.Y + rect.Height - (Radius * 2)' rect.X' rect.Y + Radius);              objGP.AddArc(rect.X' rect.Y' Radius * 2' Radius * 2' 180' 90);              objGP.AddLine(rect.X + Radius' rect.Y' rect.X + rect.Width - (Radius * 2)' rect.Y);              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y' Radius * 2' Radius * 2' 270' 90);              objGP.AddLine(rect.X + rect.Width' rect.Y + Radius' rect.X + rect.Width' rect.Y + rect.Height - (Radius * 2));              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 0' 90); // Corner                objGP.CloseFigure();                g.FillPath(Fill' objGP);              g.DrawPath(Stroke' objGP);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: using(GraphicsPath objGP = new GraphicsPath())           {              objGP.AddLine(rect.X + 2 * Radius' rect.Y + rect.Height' rect.X + Radius' rect.Y + rect.Height + Radius);              objGP.AddLine(rect.X + Radius' rect.Y + rect.Height + Radius' rect.X + Radius' rect.Y + rect.Height);                objGP.AddArc(rect.X' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 90' 90);              objGP.AddLine(rect.X' rect.Y + rect.Height - (Radius * 2)' rect.X' rect.Y + Radius);              objGP.AddArc(rect.X' rect.Y' Radius * 2' Radius * 2' 180' 90);              objGP.AddLine(rect.X + Radius' rect.Y' rect.X + rect.Width - (Radius * 2)' rect.Y);              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y' Radius * 2' Radius * 2' 270' 90);              objGP.AddLine(rect.X + rect.Width' rect.Y + Radius' rect.X + rect.Width' rect.Y + rect.Height - (Radius * 2));              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 0' 90); // Corner                objGP.CloseFigure();                g.FillPath(Fill' objGP);              g.DrawPath(Stroke' objGP);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: using(GraphicsPath objGP = new GraphicsPath())           {              objGP.AddLine(rect.X + 2 * Radius' rect.Y + rect.Height' rect.X + Radius' rect.Y + rect.Height + Radius);              objGP.AddLine(rect.X + Radius' rect.Y + rect.Height + Radius' rect.X + Radius' rect.Y + rect.Height);                objGP.AddArc(rect.X' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 90' 90);              objGP.AddLine(rect.X' rect.Y + rect.Height - (Radius * 2)' rect.X' rect.Y + Radius);              objGP.AddArc(rect.X' rect.Y' Radius * 2' Radius * 2' 180' 90);              objGP.AddLine(rect.X + Radius' rect.Y' rect.X + rect.Width - (Radius * 2)' rect.Y);              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y' Radius * 2' Radius * 2' 270' 90);              objGP.AddLine(rect.X + rect.Width' rect.Y + Radius' rect.X + rect.Width' rect.Y + rect.Height - (Radius * 2));              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 0' 90); // Corner                objGP.CloseFigure();                g.FillPath(Fill' objGP);              g.DrawPath(Stroke' objGP);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: using(GraphicsPath objGP = new GraphicsPath())           {              objGP.AddLine(rect.X + 2 * Radius' rect.Y + rect.Height' rect.X + Radius' rect.Y + rect.Height + Radius);              objGP.AddLine(rect.X + Radius' rect.Y + rect.Height + Radius' rect.X + Radius' rect.Y + rect.Height);                objGP.AddArc(rect.X' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 90' 90);              objGP.AddLine(rect.X' rect.Y + rect.Height - (Radius * 2)' rect.X' rect.Y + Radius);              objGP.AddArc(rect.X' rect.Y' Radius * 2' Radius * 2' 180' 90);              objGP.AddLine(rect.X + Radius' rect.Y' rect.X + rect.Width - (Radius * 2)' rect.Y);              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y' Radius * 2' Radius * 2' 270' 90);              objGP.AddLine(rect.X + rect.Width' rect.Y + Radius' rect.X + rect.Width' rect.Y + rect.Height - (Radius * 2));              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 0' 90); // Corner                objGP.CloseFigure();                g.FillPath(Fill' objGP);              g.DrawPath(Stroke' objGP);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: using(GraphicsPath objGP = new GraphicsPath())           {              objGP.AddLine(rect.X + 2 * Radius' rect.Y + rect.Height' rect.X + Radius' rect.Y + rect.Height + Radius);              objGP.AddLine(rect.X + Radius' rect.Y + rect.Height + Radius' rect.X + Radius' rect.Y + rect.Height);                objGP.AddArc(rect.X' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 90' 90);              objGP.AddLine(rect.X' rect.Y + rect.Height - (Radius * 2)' rect.X' rect.Y + Radius);              objGP.AddArc(rect.X' rect.Y' Radius * 2' Radius * 2' 180' 90);              objGP.AddLine(rect.X + Radius' rect.Y' rect.X + rect.Width - (Radius * 2)' rect.Y);              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y' Radius * 2' Radius * 2' 270' 90);              objGP.AddLine(rect.X + rect.Width' rect.Y + Radius' rect.X + rect.Width' rect.Y + rect.Height - (Radius * 2));              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 0' 90); // Corner                objGP.CloseFigure();                g.FillPath(Fill' objGP);              g.DrawPath(Stroke' objGP);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: using(GraphicsPath objGP = new GraphicsPath())           {              objGP.AddLine(rect.X + 2 * Radius' rect.Y + rect.Height' rect.X + Radius' rect.Y + rect.Height + Radius);              objGP.AddLine(rect.X + Radius' rect.Y + rect.Height + Radius' rect.X + Radius' rect.Y + rect.Height);                objGP.AddArc(rect.X' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 90' 90);              objGP.AddLine(rect.X' rect.Y + rect.Height - (Radius * 2)' rect.X' rect.Y + Radius);              objGP.AddArc(rect.X' rect.Y' Radius * 2' Radius * 2' 180' 90);              objGP.AddLine(rect.X + Radius' rect.Y' rect.X + rect.Width - (Radius * 2)' rect.Y);              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y' Radius * 2' Radius * 2' 270' 90);              objGP.AddLine(rect.X + rect.Width' rect.Y + Radius' rect.X + rect.Width' rect.Y + rect.Height - (Radius * 2));              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 0' 90); // Corner                objGP.CloseFigure();                g.FillPath(Fill' objGP);              g.DrawPath(Stroke' objGP);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: using(GraphicsPath objGP = new GraphicsPath())           {              objGP.AddLine(rect.X + 2 * Radius' rect.Y + rect.Height' rect.X + Radius' rect.Y + rect.Height + Radius);              objGP.AddLine(rect.X + Radius' rect.Y + rect.Height + Radius' rect.X + Radius' rect.Y + rect.Height);                objGP.AddArc(rect.X' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 90' 90);              objGP.AddLine(rect.X' rect.Y + rect.Height - (Radius * 2)' rect.X' rect.Y + Radius);              objGP.AddArc(rect.X' rect.Y' Radius * 2' Radius * 2' 180' 90);              objGP.AddLine(rect.X + Radius' rect.Y' rect.X + rect.Width - (Radius * 2)' rect.Y);              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y' Radius * 2' Radius * 2' 270' 90);              objGP.AddLine(rect.X + rect.Width' rect.Y + Radius' rect.X + rect.Width' rect.Y + rect.Height - (Radius * 2));              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 0' 90); // Corner                objGP.CloseFigure();                g.FillPath(Fill' objGP);              g.DrawPath(Stroke' objGP);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: using(GraphicsPath objGP = new GraphicsPath())           {              objGP.AddLine(rect.X + 2 * Radius' rect.Y + rect.Height' rect.X + Radius' rect.Y + rect.Height + Radius);              objGP.AddLine(rect.X + Radius' rect.Y + rect.Height + Radius' rect.X + Radius' rect.Y + rect.Height);                objGP.AddArc(rect.X' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 90' 90);              objGP.AddLine(rect.X' rect.Y + rect.Height - (Radius * 2)' rect.X' rect.Y + Radius);              objGP.AddArc(rect.X' rect.Y' Radius * 2' Radius * 2' 180' 90);              objGP.AddLine(rect.X + Radius' rect.Y' rect.X + rect.Width - (Radius * 2)' rect.Y);              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y' Radius * 2' Radius * 2' 270' 90);              objGP.AddLine(rect.X + rect.Width' rect.Y + Radius' rect.X + rect.Width' rect.Y + rect.Height - (Radius * 2));              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 0' 90); // Corner                objGP.CloseFigure();                g.FillPath(Fill' objGP);              g.DrawPath(Stroke' objGP);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: using(GraphicsPath objGP = new GraphicsPath())           {              objGP.AddLine(rect.X + 2 * Radius' rect.Y + rect.Height' rect.X + Radius' rect.Y + rect.Height + Radius);              objGP.AddLine(rect.X + Radius' rect.Y + rect.Height + Radius' rect.X + Radius' rect.Y + rect.Height);                objGP.AddArc(rect.X' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 90' 90);              objGP.AddLine(rect.X' rect.Y + rect.Height - (Radius * 2)' rect.X' rect.Y + Radius);              objGP.AddArc(rect.X' rect.Y' Radius * 2' Radius * 2' 180' 90);              objGP.AddLine(rect.X + Radius' rect.Y' rect.X + rect.Width - (Radius * 2)' rect.Y);              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y' Radius * 2' Radius * 2' 270' 90);              objGP.AddLine(rect.X + rect.Width' rect.Y + Radius' rect.X + rect.Width' rect.Y + rect.Height - (Radius * 2));              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 0' 90); // Corner                objGP.CloseFigure();                g.FillPath(Fill' objGP);              g.DrawPath(Stroke' objGP);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: using(GraphicsPath objGP = new GraphicsPath())           {              objGP.AddLine(rect.X + 2 * Radius' rect.Y + rect.Height' rect.X + Radius' rect.Y + rect.Height + Radius);              objGP.AddLine(rect.X + Radius' rect.Y + rect.Height + Radius' rect.X + Radius' rect.Y + rect.Height);                objGP.AddArc(rect.X' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 90' 90);              objGP.AddLine(rect.X' rect.Y + rect.Height - (Radius * 2)' rect.X' rect.Y + Radius);              objGP.AddArc(rect.X' rect.Y' Radius * 2' Radius * 2' 180' 90);              objGP.AddLine(rect.X + Radius' rect.Y' rect.X + rect.Width - (Radius * 2)' rect.Y);              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y' Radius * 2' Radius * 2' 270' 90);              objGP.AddLine(rect.X + rect.Width' rect.Y + Radius' rect.X + rect.Width' rect.Y + rect.Height - (Radius * 2));              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 0' 90); // Corner                objGP.CloseFigure();                g.FillPath(Fill' objGP);              g.DrawPath(Stroke' objGP);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: using(GraphicsPath objGP = new GraphicsPath())           {              objGP.AddLine(rect.X + 2 * Radius' rect.Y + rect.Height' rect.X + Radius' rect.Y + rect.Height + Radius);              objGP.AddLine(rect.X + Radius' rect.Y + rect.Height + Radius' rect.X + Radius' rect.Y + rect.Height);                objGP.AddArc(rect.X' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 90' 90);              objGP.AddLine(rect.X' rect.Y + rect.Height - (Radius * 2)' rect.X' rect.Y + Radius);              objGP.AddArc(rect.X' rect.Y' Radius * 2' Radius * 2' 180' 90);              objGP.AddLine(rect.X + Radius' rect.Y' rect.X + rect.Width - (Radius * 2)' rect.Y);              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y' Radius * 2' Radius * 2' 270' 90);              objGP.AddLine(rect.X + rect.Width' rect.Y + Radius' rect.X + rect.Width' rect.Y + rect.Height - (Radius * 2));              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 0' 90); // Corner                objGP.CloseFigure();                g.FillPath(Fill' objGP);              g.DrawPath(Stroke' objGP);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: using(GraphicsPath objGP = new GraphicsPath())           {              objGP.AddLine(rect.X + 2 * Radius' rect.Y + rect.Height' rect.X + Radius' rect.Y + rect.Height + Radius);              objGP.AddLine(rect.X + Radius' rect.Y + rect.Height + Radius' rect.X + Radius' rect.Y + rect.Height);                objGP.AddArc(rect.X' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 90' 90);              objGP.AddLine(rect.X' rect.Y + rect.Height - (Radius * 2)' rect.X' rect.Y + Radius);              objGP.AddArc(rect.X' rect.Y' Radius * 2' Radius * 2' 180' 90);              objGP.AddLine(rect.X + Radius' rect.Y' rect.X + rect.Width - (Radius * 2)' rect.Y);              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y' Radius * 2' Radius * 2' 270' 90);              objGP.AddLine(rect.X + rect.Width' rect.Y + Radius' rect.X + rect.Width' rect.Y + rect.Height - (Radius * 2));              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 0' 90); // Corner                objGP.CloseFigure();                g.FillPath(Fill' objGP);              g.DrawPath(Stroke' objGP);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: using(GraphicsPath objGP = new GraphicsPath())           {              objGP.AddLine(rect.X + 2 * Radius' rect.Y + rect.Height' rect.X + Radius' rect.Y + rect.Height + Radius);              objGP.AddLine(rect.X + Radius' rect.Y + rect.Height + Radius' rect.X + Radius' rect.Y + rect.Height);                objGP.AddArc(rect.X' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 90' 90);              objGP.AddLine(rect.X' rect.Y + rect.Height - (Radius * 2)' rect.X' rect.Y + Radius);              objGP.AddArc(rect.X' rect.Y' Radius * 2' Radius * 2' 180' 90);              objGP.AddLine(rect.X + Radius' rect.Y' rect.X + rect.Width - (Radius * 2)' rect.Y);              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y' Radius * 2' Radius * 2' 270' 90);              objGP.AddLine(rect.X + rect.Width' rect.Y + Radius' rect.X + rect.Width' rect.Y + rect.Height - (Radius * 2));              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 0' 90); // Corner                objGP.CloseFigure();                g.FillPath(Fill' objGP);              g.DrawPath(Stroke' objGP);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: using(GraphicsPath objGP = new GraphicsPath())           {              objGP.AddLine(rect.X + 2 * Radius' rect.Y + rect.Height' rect.X + Radius' rect.Y + rect.Height + Radius);              objGP.AddLine(rect.X + Radius' rect.Y + rect.Height + Radius' rect.X + Radius' rect.Y + rect.Height);                objGP.AddArc(rect.X' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 90' 90);              objGP.AddLine(rect.X' rect.Y + rect.Height - (Radius * 2)' rect.X' rect.Y + Radius);              objGP.AddArc(rect.X' rect.Y' Radius * 2' Radius * 2' 180' 90);              objGP.AddLine(rect.X + Radius' rect.Y' rect.X + rect.Width - (Radius * 2)' rect.Y);              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y' Radius * 2' Radius * 2' 270' 90);              objGP.AddLine(rect.X + rect.Width' rect.Y + Radius' rect.X + rect.Width' rect.Y + rect.Height - (Radius * 2));              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 0' 90); // Corner                objGP.CloseFigure();                g.FillPath(Fill' objGP);              g.DrawPath(Stroke' objGP);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: using(GraphicsPath objGP = new GraphicsPath())           {              objGP.AddLine(rect.X + 2 * Radius' rect.Y + rect.Height' rect.X + Radius' rect.Y + rect.Height + Radius);              objGP.AddLine(rect.X + Radius' rect.Y + rect.Height + Radius' rect.X + Radius' rect.Y + rect.Height);                objGP.AddArc(rect.X' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 90' 90);              objGP.AddLine(rect.X' rect.Y + rect.Height - (Radius * 2)' rect.X' rect.Y + Radius);              objGP.AddArc(rect.X' rect.Y' Radius * 2' Radius * 2' 180' 90);              objGP.AddLine(rect.X + Radius' rect.Y' rect.X + rect.Width - (Radius * 2)' rect.Y);              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y' Radius * 2' Radius * 2' 270' 90);              objGP.AddLine(rect.X + rect.Width' rect.Y + Radius' rect.X + rect.Width' rect.Y + rect.Height - (Radius * 2));              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 0' 90); // Corner                objGP.CloseFigure();                g.FillPath(Fill' objGP);              g.DrawPath(Stroke' objGP);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: using(GraphicsPath objGP = new GraphicsPath())           {              objGP.AddLine(rect.X + 2 * Radius' rect.Y + rect.Height' rect.X + Radius' rect.Y + rect.Height + Radius);              objGP.AddLine(rect.X + Radius' rect.Y + rect.Height + Radius' rect.X + Radius' rect.Y + rect.Height);                objGP.AddArc(rect.X' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 90' 90);              objGP.AddLine(rect.X' rect.Y + rect.Height - (Radius * 2)' rect.X' rect.Y + Radius);              objGP.AddArc(rect.X' rect.Y' Radius * 2' Radius * 2' 180' 90);              objGP.AddLine(rect.X + Radius' rect.Y' rect.X + rect.Width - (Radius * 2)' rect.Y);              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y' Radius * 2' Radius * 2' 270' 90);              objGP.AddLine(rect.X + rect.Width' rect.Y + Radius' rect.X + rect.Width' rect.Y + rect.Height - (Radius * 2));              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 0' 90); // Corner                objGP.CloseFigure();                g.FillPath(Fill' objGP);              g.DrawPath(Stroke' objGP);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: using(GraphicsPath objGP = new GraphicsPath())           {              objGP.AddLine(rect.X + 2 * Radius' rect.Y + rect.Height' rect.X + Radius' rect.Y + rect.Height + Radius);              objGP.AddLine(rect.X + Radius' rect.Y + rect.Height + Radius' rect.X + Radius' rect.Y + rect.Height);                objGP.AddArc(rect.X' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 90' 90);              objGP.AddLine(rect.X' rect.Y + rect.Height - (Radius * 2)' rect.X' rect.Y + Radius);              objGP.AddArc(rect.X' rect.Y' Radius * 2' Radius * 2' 180' 90);              objGP.AddLine(rect.X + Radius' rect.Y' rect.X + rect.Width - (Radius * 2)' rect.Y);              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y' Radius * 2' Radius * 2' 270' 90);              objGP.AddLine(rect.X + rect.Width' rect.Y + Radius' rect.X + rect.Width' rect.Y + rect.Height - (Radius * 2));              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 0' 90); // Corner                objGP.CloseFigure();                g.FillPath(Fill' objGP);              g.DrawPath(Stroke' objGP);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: using(GraphicsPath objGP = new GraphicsPath())           {              objGP.AddLine(rect.X + 2 * Radius' rect.Y + rect.Height' rect.X + Radius' rect.Y + rect.Height + Radius);              objGP.AddLine(rect.X + Radius' rect.Y + rect.Height + Radius' rect.X + Radius' rect.Y + rect.Height);                objGP.AddArc(rect.X' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 90' 90);              objGP.AddLine(rect.X' rect.Y + rect.Height - (Radius * 2)' rect.X' rect.Y + Radius);              objGP.AddArc(rect.X' rect.Y' Radius * 2' Radius * 2' 180' 90);              objGP.AddLine(rect.X + Radius' rect.Y' rect.X + rect.Width - (Radius * 2)' rect.Y);              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y' Radius * 2' Radius * 2' 270' 90);              objGP.AddLine(rect.X + rect.Width' rect.Y + Radius' rect.X + rect.Width' rect.Y + rect.Height - (Radius * 2));              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 0' 90); // Corner                objGP.CloseFigure();                g.FillPath(Fill' objGP);              g.DrawPath(Stroke' objGP);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: using(GraphicsPath objGP = new GraphicsPath())           {              objGP.AddLine(rect.X + 2 * Radius' rect.Y + rect.Height' rect.X + Radius' rect.Y + rect.Height + Radius);              objGP.AddLine(rect.X + Radius' rect.Y + rect.Height + Radius' rect.X + Radius' rect.Y + rect.Height);                objGP.AddArc(rect.X' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 90' 90);              objGP.AddLine(rect.X' rect.Y + rect.Height - (Radius * 2)' rect.X' rect.Y + Radius);              objGP.AddArc(rect.X' rect.Y' Radius * 2' Radius * 2' 180' 90);              objGP.AddLine(rect.X + Radius' rect.Y' rect.X + rect.Width - (Radius * 2)' rect.Y);              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y' Radius * 2' Radius * 2' 270' 90);              objGP.AddLine(rect.X + rect.Width' rect.Y + Radius' rect.X + rect.Width' rect.Y + rect.Height - (Radius * 2));              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 0' 90); // Corner                objGP.CloseFigure();                g.FillPath(Fill' objGP);              g.DrawPath(Stroke' objGP);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: using(GraphicsPath objGP = new GraphicsPath())           {              objGP.AddLine(rect.X + 2 * Radius' rect.Y + rect.Height' rect.X + Radius' rect.Y + rect.Height + Radius);              objGP.AddLine(rect.X + Radius' rect.Y + rect.Height + Radius' rect.X + Radius' rect.Y + rect.Height);                objGP.AddArc(rect.X' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 90' 90);              objGP.AddLine(rect.X' rect.Y + rect.Height - (Radius * 2)' rect.X' rect.Y + Radius);              objGP.AddArc(rect.X' rect.Y' Radius * 2' Radius * 2' 180' 90);              objGP.AddLine(rect.X + Radius' rect.Y' rect.X + rect.Width - (Radius * 2)' rect.Y);              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y' Radius * 2' Radius * 2' 270' 90);              objGP.AddLine(rect.X + rect.Width' rect.Y + Radius' rect.X + rect.Width' rect.Y + rect.Height - (Radius * 2));              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 0' 90); // Corner                objGP.CloseFigure();                g.FillPath(Fill' objGP);              g.DrawPath(Stroke' objGP);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: using(GraphicsPath objGP = new GraphicsPath())           {              objGP.AddLine(rect.X + 2 * Radius' rect.Y + rect.Height' rect.X + Radius' rect.Y + rect.Height + Radius);              objGP.AddLine(rect.X + Radius' rect.Y + rect.Height + Radius' rect.X + Radius' rect.Y + rect.Height);                objGP.AddArc(rect.X' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 90' 90);              objGP.AddLine(rect.X' rect.Y + rect.Height - (Radius * 2)' rect.X' rect.Y + Radius);              objGP.AddArc(rect.X' rect.Y' Radius * 2' Radius * 2' 180' 90);              objGP.AddLine(rect.X + Radius' rect.Y' rect.X + rect.Width - (Radius * 2)' rect.Y);              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y' Radius * 2' Radius * 2' 270' 90);              objGP.AddLine(rect.X + rect.Width' rect.Y + Radius' rect.X + rect.Width' rect.Y + rect.Height - (Radius * 2));              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 0' 90); // Corner                objGP.CloseFigure();                g.FillPath(Fill' objGP);              g.DrawPath(Stroke' objGP);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: using(GraphicsPath objGP = new GraphicsPath())           {              objGP.AddLine(rect.X + 2 * Radius' rect.Y + rect.Height' rect.X + Radius' rect.Y + rect.Height + Radius);              objGP.AddLine(rect.X + Radius' rect.Y + rect.Height + Radius' rect.X + Radius' rect.Y + rect.Height);                objGP.AddArc(rect.X' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 90' 90);              objGP.AddLine(rect.X' rect.Y + rect.Height - (Radius * 2)' rect.X' rect.Y + Radius);              objGP.AddArc(rect.X' rect.Y' Radius * 2' Radius * 2' 180' 90);              objGP.AddLine(rect.X + Radius' rect.Y' rect.X + rect.Width - (Radius * 2)' rect.Y);              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y' Radius * 2' Radius * 2' 270' 90);              objGP.AddLine(rect.X + rect.Width' rect.Y + Radius' rect.X + rect.Width' rect.Y + rect.Height - (Radius * 2));              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 0' 90); // Corner                objGP.CloseFigure();                g.FillPath(Fill' objGP);              g.DrawPath(Stroke' objGP);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapBaloonToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapBaloonToolTip.cs,OnRender,The following statement contains a magic number: using(GraphicsPath objGP = new GraphicsPath())           {              objGP.AddLine(rect.X + 2 * Radius' rect.Y + rect.Height' rect.X + Radius' rect.Y + rect.Height + Radius);              objGP.AddLine(rect.X + Radius' rect.Y + rect.Height + Radius' rect.X + Radius' rect.Y + rect.Height);                objGP.AddArc(rect.X' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 90' 90);              objGP.AddLine(rect.X' rect.Y + rect.Height - (Radius * 2)' rect.X' rect.Y + Radius);              objGP.AddArc(rect.X' rect.Y' Radius * 2' Radius * 2' 180' 90);              objGP.AddLine(rect.X + Radius' rect.Y' rect.X + rect.Width - (Radius * 2)' rect.Y);              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y' Radius * 2' Radius * 2' 270' 90);              objGP.AddLine(rect.X + rect.Width' rect.Y + Radius' rect.X + rect.Width' rect.Y + rect.Height - (Radius * 2));              objGP.AddArc(rect.X + rect.Width - (Radius * 2)' rect.Y + rect.Height - (Radius * 2)' Radius * 2' Radius * 2' 0' 90); // Corner                objGP.CloseFigure();                g.FillPath(Fill' objGP);              g.DrawPath(Stroke' objGP);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: using(GraphicsPath gp = new GraphicsPath())           {              gp.AddLine(h + radius' v' h + width - (radius * 2)' v);              gp.AddArc(h + width - (radius * 2)' v' radius * 2' radius * 2' 270' 90);              gp.AddLine(h + width' v + radius' h + width' v + height - (radius * 2));              gp.AddArc(h + width - (radius * 2)' v + height - (radius * 2)' radius * 2' radius * 2' 0' 90); // Corner              gp.AddLine(h + width - (radius * 2)' v + height' h + radius' v + height);              gp.AddArc(h' v + height - (radius * 2)' radius * 2' radius * 2' 90' 90);              gp.AddLine(h' v + height - (radius * 2)' h' v + radius);              gp.AddArc(h' v' radius * 2' radius * 2' 180' 90);                gp.CloseFigure();                g.FillPath(Fill' gp);              g.DrawPath(pen' gp);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: using(GraphicsPath gp = new GraphicsPath())           {              gp.AddLine(h + radius' v' h + width - (radius * 2)' v);              gp.AddArc(h + width - (radius * 2)' v' radius * 2' radius * 2' 270' 90);              gp.AddLine(h + width' v + radius' h + width' v + height - (radius * 2));              gp.AddArc(h + width - (radius * 2)' v + height - (radius * 2)' radius * 2' radius * 2' 0' 90); // Corner              gp.AddLine(h + width - (radius * 2)' v + height' h + radius' v + height);              gp.AddArc(h' v + height - (radius * 2)' radius * 2' radius * 2' 90' 90);              gp.AddLine(h' v + height - (radius * 2)' h' v + radius);              gp.AddArc(h' v' radius * 2' radius * 2' 180' 90);                gp.CloseFigure();                g.FillPath(Fill' gp);              g.DrawPath(pen' gp);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: using(GraphicsPath gp = new GraphicsPath())           {              gp.AddLine(h + radius' v' h + width - (radius * 2)' v);              gp.AddArc(h + width - (radius * 2)' v' radius * 2' radius * 2' 270' 90);              gp.AddLine(h + width' v + radius' h + width' v + height - (radius * 2));              gp.AddArc(h + width - (radius * 2)' v + height - (radius * 2)' radius * 2' radius * 2' 0' 90); // Corner              gp.AddLine(h + width - (radius * 2)' v + height' h + radius' v + height);              gp.AddArc(h' v + height - (radius * 2)' radius * 2' radius * 2' 90' 90);              gp.AddLine(h' v + height - (radius * 2)' h' v + radius);              gp.AddArc(h' v' radius * 2' radius * 2' 180' 90);                gp.CloseFigure();                g.FillPath(Fill' gp);              g.DrawPath(pen' gp);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: using(GraphicsPath gp = new GraphicsPath())           {              gp.AddLine(h + radius' v' h + width - (radius * 2)' v);              gp.AddArc(h + width - (radius * 2)' v' radius * 2' radius * 2' 270' 90);              gp.AddLine(h + width' v + radius' h + width' v + height - (radius * 2));              gp.AddArc(h + width - (radius * 2)' v + height - (radius * 2)' radius * 2' radius * 2' 0' 90); // Corner              gp.AddLine(h + width - (radius * 2)' v + height' h + radius' v + height);              gp.AddArc(h' v + height - (radius * 2)' radius * 2' radius * 2' 90' 90);              gp.AddLine(h' v + height - (radius * 2)' h' v + radius);              gp.AddArc(h' v' radius * 2' radius * 2' 180' 90);                gp.CloseFigure();                g.FillPath(Fill' gp);              g.DrawPath(pen' gp);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: using(GraphicsPath gp = new GraphicsPath())           {              gp.AddLine(h + radius' v' h + width - (radius * 2)' v);              gp.AddArc(h + width - (radius * 2)' v' radius * 2' radius * 2' 270' 90);              gp.AddLine(h + width' v + radius' h + width' v + height - (radius * 2));              gp.AddArc(h + width - (radius * 2)' v + height - (radius * 2)' radius * 2' radius * 2' 0' 90); // Corner              gp.AddLine(h + width - (radius * 2)' v + height' h + radius' v + height);              gp.AddArc(h' v + height - (radius * 2)' radius * 2' radius * 2' 90' 90);              gp.AddLine(h' v + height - (radius * 2)' h' v + radius);              gp.AddArc(h' v' radius * 2' radius * 2' 180' 90);                gp.CloseFigure();                g.FillPath(Fill' gp);              g.DrawPath(pen' gp);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: using(GraphicsPath gp = new GraphicsPath())           {              gp.AddLine(h + radius' v' h + width - (radius * 2)' v);              gp.AddArc(h + width - (radius * 2)' v' radius * 2' radius * 2' 270' 90);              gp.AddLine(h + width' v + radius' h + width' v + height - (radius * 2));              gp.AddArc(h + width - (radius * 2)' v + height - (radius * 2)' radius * 2' radius * 2' 0' 90); // Corner              gp.AddLine(h + width - (radius * 2)' v + height' h + radius' v + height);              gp.AddArc(h' v + height - (radius * 2)' radius * 2' radius * 2' 90' 90);              gp.AddLine(h' v + height - (radius * 2)' h' v + radius);              gp.AddArc(h' v' radius * 2' radius * 2' 180' 90);                gp.CloseFigure();                g.FillPath(Fill' gp);              g.DrawPath(pen' gp);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: using(GraphicsPath gp = new GraphicsPath())           {              gp.AddLine(h + radius' v' h + width - (radius * 2)' v);              gp.AddArc(h + width - (radius * 2)' v' radius * 2' radius * 2' 270' 90);              gp.AddLine(h + width' v + radius' h + width' v + height - (radius * 2));              gp.AddArc(h + width - (radius * 2)' v + height - (radius * 2)' radius * 2' radius * 2' 0' 90); // Corner              gp.AddLine(h + width - (radius * 2)' v + height' h + radius' v + height);              gp.AddArc(h' v + height - (radius * 2)' radius * 2' radius * 2' 90' 90);              gp.AddLine(h' v + height - (radius * 2)' h' v + radius);              gp.AddArc(h' v' radius * 2' radius * 2' 180' 90);                gp.CloseFigure();                g.FillPath(Fill' gp);              g.DrawPath(pen' gp);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: using(GraphicsPath gp = new GraphicsPath())           {              gp.AddLine(h + radius' v' h + width - (radius * 2)' v);              gp.AddArc(h + width - (radius * 2)' v' radius * 2' radius * 2' 270' 90);              gp.AddLine(h + width' v + radius' h + width' v + height - (radius * 2));              gp.AddArc(h + width - (radius * 2)' v + height - (radius * 2)' radius * 2' radius * 2' 0' 90); // Corner              gp.AddLine(h + width - (radius * 2)' v + height' h + radius' v + height);              gp.AddArc(h' v + height - (radius * 2)' radius * 2' radius * 2' 90' 90);              gp.AddLine(h' v + height - (radius * 2)' h' v + radius);              gp.AddArc(h' v' radius * 2' radius * 2' 180' 90);                gp.CloseFigure();                g.FillPath(Fill' gp);              g.DrawPath(pen' gp);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: using(GraphicsPath gp = new GraphicsPath())           {              gp.AddLine(h + radius' v' h + width - (radius * 2)' v);              gp.AddArc(h + width - (radius * 2)' v' radius * 2' radius * 2' 270' 90);              gp.AddLine(h + width' v + radius' h + width' v + height - (radius * 2));              gp.AddArc(h + width - (radius * 2)' v + height - (radius * 2)' radius * 2' radius * 2' 0' 90); // Corner              gp.AddLine(h + width - (radius * 2)' v + height' h + radius' v + height);              gp.AddArc(h' v + height - (radius * 2)' radius * 2' radius * 2' 90' 90);              gp.AddLine(h' v + height - (radius * 2)' h' v + radius);              gp.AddArc(h' v' radius * 2' radius * 2' 180' 90);                gp.CloseFigure();                g.FillPath(Fill' gp);              g.DrawPath(pen' gp);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: using(GraphicsPath gp = new GraphicsPath())           {              gp.AddLine(h + radius' v' h + width - (radius * 2)' v);              gp.AddArc(h + width - (radius * 2)' v' radius * 2' radius * 2' 270' 90);              gp.AddLine(h + width' v + radius' h + width' v + height - (radius * 2));              gp.AddArc(h + width - (radius * 2)' v + height - (radius * 2)' radius * 2' radius * 2' 0' 90); // Corner              gp.AddLine(h + width - (radius * 2)' v + height' h + radius' v + height);              gp.AddArc(h' v + height - (radius * 2)' radius * 2' radius * 2' 90' 90);              gp.AddLine(h' v + height - (radius * 2)' h' v + radius);              gp.AddArc(h' v' radius * 2' radius * 2' 180' 90);                gp.CloseFigure();                g.FillPath(Fill' gp);              g.DrawPath(pen' gp);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: using(GraphicsPath gp = new GraphicsPath())           {              gp.AddLine(h + radius' v' h + width - (radius * 2)' v);              gp.AddArc(h + width - (radius * 2)' v' radius * 2' radius * 2' 270' 90);              gp.AddLine(h + width' v + radius' h + width' v + height - (radius * 2));              gp.AddArc(h + width - (radius * 2)' v + height - (radius * 2)' radius * 2' radius * 2' 0' 90); // Corner              gp.AddLine(h + width - (radius * 2)' v + height' h + radius' v + height);              gp.AddArc(h' v + height - (radius * 2)' radius * 2' radius * 2' 90' 90);              gp.AddLine(h' v + height - (radius * 2)' h' v + radius);              gp.AddArc(h' v' radius * 2' radius * 2' 180' 90);                gp.CloseFigure();                g.FillPath(Fill' gp);              g.DrawPath(pen' gp);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: using(GraphicsPath gp = new GraphicsPath())           {              gp.AddLine(h + radius' v' h + width - (radius * 2)' v);              gp.AddArc(h + width - (radius * 2)' v' radius * 2' radius * 2' 270' 90);              gp.AddLine(h + width' v + radius' h + width' v + height - (radius * 2));              gp.AddArc(h + width - (radius * 2)' v + height - (radius * 2)' radius * 2' radius * 2' 0' 90); // Corner              gp.AddLine(h + width - (radius * 2)' v + height' h + radius' v + height);              gp.AddArc(h' v + height - (radius * 2)' radius * 2' radius * 2' 90' 90);              gp.AddLine(h' v + height - (radius * 2)' h' v + radius);              gp.AddArc(h' v' radius * 2' radius * 2' 180' 90);                gp.CloseFigure();                g.FillPath(Fill' gp);              g.DrawPath(pen' gp);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: using(GraphicsPath gp = new GraphicsPath())           {              gp.AddLine(h + radius' v' h + width - (radius * 2)' v);              gp.AddArc(h + width - (radius * 2)' v' radius * 2' radius * 2' 270' 90);              gp.AddLine(h + width' v + radius' h + width' v + height - (radius * 2));              gp.AddArc(h + width - (radius * 2)' v + height - (radius * 2)' radius * 2' radius * 2' 0' 90); // Corner              gp.AddLine(h + width - (radius * 2)' v + height' h + radius' v + height);              gp.AddArc(h' v + height - (radius * 2)' radius * 2' radius * 2' 90' 90);              gp.AddLine(h' v + height - (radius * 2)' h' v + radius);              gp.AddArc(h' v' radius * 2' radius * 2' 180' 90);                gp.CloseFigure();                g.FillPath(Fill' gp);              g.DrawPath(pen' gp);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: using(GraphicsPath gp = new GraphicsPath())           {              gp.AddLine(h + radius' v' h + width - (radius * 2)' v);              gp.AddArc(h + width - (radius * 2)' v' radius * 2' radius * 2' 270' 90);              gp.AddLine(h + width' v + radius' h + width' v + height - (radius * 2));              gp.AddArc(h + width - (radius * 2)' v + height - (radius * 2)' radius * 2' radius * 2' 0' 90); // Corner              gp.AddLine(h + width - (radius * 2)' v + height' h + radius' v + height);              gp.AddArc(h' v + height - (radius * 2)' radius * 2' radius * 2' 90' 90);              gp.AddLine(h' v + height - (radius * 2)' h' v + radius);              gp.AddArc(h' v' radius * 2' radius * 2' 180' 90);                gp.CloseFigure();                g.FillPath(Fill' gp);              g.DrawPath(pen' gp);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: using(GraphicsPath gp = new GraphicsPath())           {              gp.AddLine(h + radius' v' h + width - (radius * 2)' v);              gp.AddArc(h + width - (radius * 2)' v' radius * 2' radius * 2' 270' 90);              gp.AddLine(h + width' v + radius' h + width' v + height - (radius * 2));              gp.AddArc(h + width - (radius * 2)' v + height - (radius * 2)' radius * 2' radius * 2' 0' 90); // Corner              gp.AddLine(h + width - (radius * 2)' v + height' h + radius' v + height);              gp.AddArc(h' v + height - (radius * 2)' radius * 2' radius * 2' 90' 90);              gp.AddLine(h' v + height - (radius * 2)' h' v + radius);              gp.AddArc(h' v' radius * 2' radius * 2' 180' 90);                gp.CloseFigure();                g.FillPath(Fill' gp);              g.DrawPath(pen' gp);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: using(GraphicsPath gp = new GraphicsPath())           {              gp.AddLine(h + radius' v' h + width - (radius * 2)' v);              gp.AddArc(h + width - (radius * 2)' v' radius * 2' radius * 2' 270' 90);              gp.AddLine(h + width' v + radius' h + width' v + height - (radius * 2));              gp.AddArc(h + width - (radius * 2)' v + height - (radius * 2)' radius * 2' radius * 2' 0' 90); // Corner              gp.AddLine(h + width - (radius * 2)' v + height' h + radius' v + height);              gp.AddArc(h' v + height - (radius * 2)' radius * 2' radius * 2' 90' 90);              gp.AddLine(h' v + height - (radius * 2)' h' v + radius);              gp.AddArc(h' v' radius * 2' radius * 2' 180' 90);                gp.CloseFigure();                g.FillPath(Fill' gp);              g.DrawPath(pen' gp);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: using(GraphicsPath gp = new GraphicsPath())           {              gp.AddLine(h + radius' v' h + width - (radius * 2)' v);              gp.AddArc(h + width - (radius * 2)' v' radius * 2' radius * 2' 270' 90);              gp.AddLine(h + width' v + radius' h + width' v + height - (radius * 2));              gp.AddArc(h + width - (radius * 2)' v + height - (radius * 2)' radius * 2' radius * 2' 0' 90); // Corner              gp.AddLine(h + width - (radius * 2)' v + height' h + radius' v + height);              gp.AddArc(h' v + height - (radius * 2)' radius * 2' radius * 2' 90' 90);              gp.AddLine(h' v + height - (radius * 2)' h' v + radius);              gp.AddArc(h' v' radius * 2' radius * 2' 180' 90);                gp.CloseFigure();                g.FillPath(Fill' gp);              g.DrawPath(pen' gp);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: using(GraphicsPath gp = new GraphicsPath())           {              gp.AddLine(h + radius' v' h + width - (radius * 2)' v);              gp.AddArc(h + width - (radius * 2)' v' radius * 2' radius * 2' 270' 90);              gp.AddLine(h + width' v + radius' h + width' v + height - (radius * 2));              gp.AddArc(h + width - (radius * 2)' v + height - (radius * 2)' radius * 2' radius * 2' 0' 90); // Corner              gp.AddLine(h + width - (radius * 2)' v + height' h + radius' v + height);              gp.AddArc(h' v + height - (radius * 2)' radius * 2' radius * 2' 90' 90);              gp.AddLine(h' v + height - (radius * 2)' h' v + radius);              gp.AddArc(h' v' radius * 2' radius * 2' 180' 90);                gp.CloseFigure();                g.FillPath(Fill' gp);              g.DrawPath(pen' gp);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: using(GraphicsPath gp = new GraphicsPath())           {              gp.AddLine(h + radius' v' h + width - (radius * 2)' v);              gp.AddArc(h + width - (radius * 2)' v' radius * 2' radius * 2' 270' 90);              gp.AddLine(h + width' v + radius' h + width' v + height - (radius * 2));              gp.AddArc(h + width - (radius * 2)' v + height - (radius * 2)' radius * 2' radius * 2' 0' 90); // Corner              gp.AddLine(h + width - (radius * 2)' v + height' h + radius' v + height);              gp.AddArc(h' v + height - (radius * 2)' radius * 2' radius * 2' 90' 90);              gp.AddLine(h' v + height - (radius * 2)' h' v + radius);              gp.AddArc(h' v' radius * 2' radius * 2' 180' 90);                gp.CloseFigure();                g.FillPath(Fill' gp);              g.DrawPath(pen' gp);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: using(GraphicsPath gp = new GraphicsPath())           {              gp.AddLine(h + radius' v' h + width - (radius * 2)' v);              gp.AddArc(h + width - (radius * 2)' v' radius * 2' radius * 2' 270' 90);              gp.AddLine(h + width' v + radius' h + width' v + height - (radius * 2));              gp.AddArc(h + width - (radius * 2)' v + height - (radius * 2)' radius * 2' radius * 2' 0' 90); // Corner              gp.AddLine(h + width - (radius * 2)' v + height' h + radius' v + height);              gp.AddArc(h' v + height - (radius * 2)' radius * 2' radius * 2' 90' 90);              gp.AddLine(h' v + height - (radius * 2)' h' v + radius);              gp.AddArc(h' v' radius * 2' radius * 2' 180' 90);                gp.CloseFigure();                g.FillPath(Fill' gp);              g.DrawPath(pen' gp);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: using(GraphicsPath gp = new GraphicsPath())           {              gp.AddLine(h + radius' v' h + width - (radius * 2)' v);              gp.AddArc(h + width - (radius * 2)' v' radius * 2' radius * 2' 270' 90);              gp.AddLine(h + width' v + radius' h + width' v + height - (radius * 2));              gp.AddArc(h + width - (radius * 2)' v + height - (radius * 2)' radius * 2' radius * 2' 0' 90); // Corner              gp.AddLine(h + width - (radius * 2)' v + height' h + radius' v + height);              gp.AddArc(h' v + height - (radius * 2)' radius * 2' radius * 2' 90' 90);              gp.AddLine(h' v + height - (radius * 2)' h' v + radius);              gp.AddArc(h' v' radius * 2' radius * 2' 180' 90);                gp.CloseFigure();                g.FillPath(Fill' gp);              g.DrawPath(pen' gp);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: using(GraphicsPath gp = new GraphicsPath())           {              gp.AddLine(h + radius' v' h + width - (radius * 2)' v);              gp.AddArc(h + width - (radius * 2)' v' radius * 2' radius * 2' 270' 90);              gp.AddLine(h + width' v + radius' h + width' v + height - (radius * 2));              gp.AddArc(h + width - (radius * 2)' v + height - (radius * 2)' radius * 2' radius * 2' 0' 90); // Corner              gp.AddLine(h + width - (radius * 2)' v + height' h + radius' v + height);              gp.AddArc(h' v + height - (radius * 2)' radius * 2' radius * 2' 90' 90);              gp.AddLine(h' v + height - (radius * 2)' h' v + radius);              gp.AddArc(h' v' radius * 2' radius * 2' 180' 90);                gp.CloseFigure();                g.FillPath(Fill' gp);              g.DrawPath(pen' gp);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,DrawRoundRectangle,The following statement contains a magic number: using(GraphicsPath gp = new GraphicsPath())           {              gp.AddLine(h + radius' v' h + width - (radius * 2)' v);              gp.AddArc(h + width - (radius * 2)' v' radius * 2' radius * 2' 270' 90);              gp.AddLine(h + width' v + radius' h + width' v + height - (radius * 2));              gp.AddArc(h + width - (radius * 2)' v + height - (radius * 2)' radius * 2' radius * 2' 0' 90); // Corner              gp.AddLine(h + width - (radius * 2)' v + height' h + radius' v + height);              gp.AddArc(h' v + height - (radius * 2)' radius * 2' radius * 2' 90' 90);              gp.AddLine(h' v + height - (radius * 2)' h' v + radius);              gp.AddArc(h' v' radius * 2' radius * 2' 180' 90);                gp.CloseFigure();                g.FillPath(Fill' gp);              g.DrawPath(pen' gp);           }
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,OnRender,The following statement contains a magic number: System.Drawing.Rectangle rect = new System.Drawing.Rectangle(Marker.ToolTipPosition.X' Marker.ToolTipPosition.Y - st.Height' st.Width + TextPadding.Width * 2' st.Height + TextPadding.Height);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,OnRender,The following statement contains a magic number: g.DrawLine(Stroke' Marker.ToolTipPosition.X' Marker.ToolTipPosition.Y' rect.X + Radius / 2' rect.Y + rect.Height - Radius / 2);
Magic Number,GMap.NET.WindowsForms.ToolTips,GMapRoundedToolTip,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\ToolTips\GMapRoundedToolTip.cs,OnRender,The following statement contains a magic number: g.DrawLine(Stroke' Marker.ToolTipPosition.X' Marker.ToolTipPosition.Y' rect.X + Radius / 2' rect.Y + rect.Height - Radius / 2);
Magic Number,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,worker_DoWork,The following statement contains a magic number: for(int i = 0; i < all; i++)           {              if(worker.CancellationPending)                 break;                GPoint p = list[i];              {                 if(CacheTiles(zoom' p))                 {                     if (Overlay != null)                     {                         lock (this)                         {                             CachedTiles.Enqueue(p);                         }                     }                    countOk++;                    retryCount = 0;                 }                 else                 {                    if(++retryCount <= retry) // retry only one                    {                       i--;                       System.Threading.Thread.Sleep(1111);                       continue;                    }                    else                    {                       retryCount = 0;                    }                 }              }                worker.ReportProgress((int)((i + 1) * 100 / all)' i + 1);                if (sleep > 0)              {                  System.Threading.Thread.Sleep(sleep);              }           }
Magic Number,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,worker_DoWork,The following statement contains a magic number: for(int i = 0; i < all; i++)           {              if(worker.CancellationPending)                 break;                GPoint p = list[i];              {                 if(CacheTiles(zoom' p))                 {                     if (Overlay != null)                     {                         lock (this)                         {                             CachedTiles.Enqueue(p);                         }                     }                    countOk++;                    retryCount = 0;                 }                 else                 {                    if(++retryCount <= retry) // retry only one                    {                       i--;                       System.Threading.Thread.Sleep(1111);                       continue;                    }                    else                    {                       retryCount = 0;                    }                 }              }                worker.ReportProgress((int)((i + 1) * 100 / all)' i + 1);                if (sleep > 0)              {                  System.Threading.Thread.Sleep(sleep);              }           }
Magic Number,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(4' 0);
Magic Number,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,InitializeComponent,The following statement contains a magic number: this.label1.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,InitializeComponent,The following statement contains a magic number: this.label1.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(406' 17);
Magic Number,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(406' 17);
Magic Number,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.ColumnCount = 2;
Magic Number,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Location = new System.Drawing.Point(5' 5);
Magic Number,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Location = new System.Drawing.Point(5' 5);
Magic Number,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Margin = new System.Windows.Forms.Padding(4);
Magic Number,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.RowCount = 2;
Magic Number,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(539' 62);
Magic Number,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(539' 62);
Magic Number,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.TabIndex = 2;
Magic Number,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,InitializeComponent,The following statement contains a magic number: this.progressBarDownload.Location = new System.Drawing.Point(4' 21);
Magic Number,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,InitializeComponent,The following statement contains a magic number: this.progressBarDownload.Location = new System.Drawing.Point(4' 21);
Magic Number,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,InitializeComponent,The following statement contains a magic number: this.progressBarDownload.Margin = new System.Windows.Forms.Padding(4);
Magic Number,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,InitializeComponent,The following statement contains a magic number: this.progressBarDownload.Size = new System.Drawing.Size(406' 37);
Magic Number,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,InitializeComponent,The following statement contains a magic number: this.progressBarDownload.Size = new System.Drawing.Size(406' 37);
Magic Number,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,InitializeComponent,The following statement contains a magic number: this.progressBarDownload.TabIndex = 3;
Magic Number,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(418' 17);
Magic Number,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(418' 17);
Magic Number,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,InitializeComponent,The following statement contains a magic number: this.label2.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,InitializeComponent,The following statement contains a magic number: this.label2.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(117' 45);
Magic Number,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(117' 45);
Magic Number,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 2;
Magic Number,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(549' 72);
Magic Number,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(549' 72);
Magic Number,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,InitializeComponent,The following statement contains a magic number: this.Margin = new System.Windows.Forms.Padding(4);
Magic Number,GMap.NET,TilePrefetcher,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\TilePrefetcher.cs,InitializeComponent,The following statement contains a magic number: this.Padding = new System.Windows.Forms.Padding(5);
Missing Default,GMap.NET.WindowsForms.Markers,GMarkerGoogle,C:\repos\radioman_greatmaps\GMap.NET.WindowsForms\GMap.NET.WindowsForms\Markers\GMarkerGoogle.cs,LoadBitmap,The following switch statement is missing a default case: switch(Type)           {              case GMarkerGoogleType.arrow:              {                 Offset = new Point(-11' -Size.Height);                   if(arrowshadow == null)                 {                    arrowshadow = Resources.arrowshadow;                 }                 BitmapShadow = arrowshadow;              }              break;                case GMarkerGoogleType.blue:              case GMarkerGoogleType.blue_dot:              case GMarkerGoogleType.green:              case GMarkerGoogleType.green_dot:              case GMarkerGoogleType.yellow:              case GMarkerGoogleType.yellow_dot:              case GMarkerGoogleType.lightblue:              case GMarkerGoogleType.lightblue_dot:              case GMarkerGoogleType.orange:              case GMarkerGoogleType.orange_dot:              case GMarkerGoogleType.pink:              case GMarkerGoogleType.pink_dot:              case GMarkerGoogleType.purple:              case GMarkerGoogleType.purple_dot:              case GMarkerGoogleType.red:              case GMarkerGoogleType.red_dot:              {                 Offset = new Point(-Size.Width / 2 + 1' -Size.Height + 1);                   if(msmarker_shadow == null)                 {                    msmarker_shadow = Resources.msmarker_shadow;                 }                 BitmapShadow = msmarker_shadow;              }              break;                case GMarkerGoogleType.black_small:              case GMarkerGoogleType.blue_small:              case GMarkerGoogleType.brown_small:              case GMarkerGoogleType.gray_small:              case GMarkerGoogleType.green_small:              case GMarkerGoogleType.yellow_small:              case GMarkerGoogleType.orange_small:              case GMarkerGoogleType.purple_small:              case GMarkerGoogleType.red_small:              case GMarkerGoogleType.white_small:              {                 Offset = new Point(-Size.Width / 2' -Size.Height + 1);                   if(shadow_small == null)                 {                    shadow_small = Resources.shadow_small;                 }                 BitmapShadow = shadow_small;              }              break;                case GMarkerGoogleType.green_big_go:              case GMarkerGoogleType.yellow_big_pause:              case GMarkerGoogleType.red_big_stop:              {                 Offset = new Point(-Size.Width / 2' -Size.Height + 1);                 if(msmarker_shadow == null)                 {                    msmarker_shadow = Resources.msmarker_shadow;                 }                 BitmapShadow = msmarker_shadow;              }              break;                case GMarkerGoogleType.blue_pushpin:              case GMarkerGoogleType.green_pushpin:              case GMarkerGoogleType.yellow_pushpin:              case GMarkerGoogleType.lightblue_pushpin:              case GMarkerGoogleType.pink_pushpin:              case GMarkerGoogleType.purple_pushpin:              case GMarkerGoogleType.red_pushpin:              {                 Offset = new Point(-9' -Size.Height + 1);                   if(pushpin_shadow == null)                 {                    pushpin_shadow = Resources.pushpin_shadow;                 }                 BitmapShadow = pushpin_shadow;              }              break;           }
