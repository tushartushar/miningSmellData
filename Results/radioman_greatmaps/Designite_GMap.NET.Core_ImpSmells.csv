Implementation smell,Namespace,Class,File,Method,Description
Long Method,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,ProcessLoadTask,The method has 142 lines of code.
Long Method,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,UpdateBounds,The method has 126 lines of code.
Long Method,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,Dispose,The method has 105 lines of code.
Long Method,GMap.NET.MapProviders,BingMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingMapProvider.cs,OnInitialized,The method has 102 lines of code.
Long Method,GMap.NET.MapProviders,CloudMadeMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\CloudMadeMapProvider.cs,GetRoutePoints,The method has 101 lines of code.
Long Method,GMap.NET.MapProviders,CloudMadeMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\CloudMadeMapProvider.cs,GetDirectionsUrl,The method has 164 lines of code.
Long Method,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,OnInitialized,The method has 101 lines of code.
Long Method,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetRoutePoints,The method has 178 lines of code.
Long Method,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetLatLngFromGeocoderUrl,The method has 205 lines of code.
Long Method,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetPlacemarkFromReverseGeocoderUrl,The method has 578 lines of code.
Long Method,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetDirectionsUrl,The method has 505 lines of code.
Long Method,GMap.NET.MapProviders,YahooMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Yahoo\YahooMapProvider.cs,GetPlacemarksFromReverseGeocoderUrl,The method has 101 lines of code.
Long Method,GMap.NET,GMaps,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\GMaps.cs,CacheEngineLoop,The method has 115 lines of code.
Long Method,GMap.NET,GMaps,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\GMaps.cs,GetImageFrom,The method has 101 lines of code.
Complex Method,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,UpdateBounds,Cyclomatic complexity of the method is 10
Complex Method,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,Dispose,Cyclomatic complexity of the method is 9
Complex Method,GMap.NET.MapProviders,BingMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingMapProvider.cs,OnInitialized,Cyclomatic complexity of the method is 17
Complex Method,GMap.NET.MapProviders,BingMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingMapProvider.cs,GetTileUrl,Cyclomatic complexity of the method is 9
Complex Method,GMap.NET.MapProviders,BingMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingMapProvider.cs,GetRoutePoints,Cyclomatic complexity of the method is 9
Complex Method,GMap.NET.MapProviders,CloudMadeMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\CloudMadeMapProvider.cs,GetDirectionsUrl,Cyclomatic complexity of the method is 18
Complex Method,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,OnInitialized,Cyclomatic complexity of the method is 15
Complex Method,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetRoutePoints,Cyclomatic complexity of the method is 27
Complex Method,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetLatLngFromGeocoderUrl,Cyclomatic complexity of the method is 8
Complex Method,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetPlacemarkFromReverseGeocoderUrl,Cyclomatic complexity of the method is 8
Complex Method,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetDirectionsUrl,Cyclomatic complexity of the method is 44
Complex Method,GMap.NET.MapProviders,YahooMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Yahoo\YahooMapProvider.cs,GetLatLngFromGeocoderUrl,Cyclomatic complexity of the method is 12
Complex Method,GMap.NET.MapProviders,YahooMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Yahoo\YahooMapProvider.cs,GetPlacemarksFromReverseGeocoderUrl,Cyclomatic complexity of the method is 19
Complex Method,GMap.NET.MapProviders,OpenStreetMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\OpenStreetMap\OpenStreetMapProvider.cs,GetRoutePoints,Cyclomatic complexity of the method is 9
Complex Method,GMap.NET.MapProviders,OpenStreetMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\OpenStreetMap\OpenStreetMapProvider.cs,GetLatLngFromGeocoderUrl,Cyclomatic complexity of the method is 12
Complex Method,GMap.NET.MapProviders,OpenStreetMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\OpenStreetMap\OpenStreetMapProvider.cs,GetPlacemarkFromReverseGeocoderUrl,Cyclomatic complexity of the method is 15
Complex Method,GMap.NET,GMaps,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\GMaps.cs,GMaps,Cyclomatic complexity of the method is 9
Complex Method,GMap.NET,GMaps,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\GMaps.cs,CacheEngineLoop,Cyclomatic complexity of the method is 17
Complex Method,GMap.NET,GMaps,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\GMaps.cs,ExportGPX,Cyclomatic complexity of the method is 10
Complex Method,GMap.NET,GMaps,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\GMaps.cs,GetImageFrom,Cyclomatic complexity of the method is 20
Long Parameter List,Org.Mentalis.Network.ProxySocket,ProxySocket,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\ProxySocket.cs,ProxySocket,The method has 5 parameters. Parameters: addressFamily' socketType' protocolType' proxyUsername' proxyPassword
Long Parameter List,GMap.NET.MapProviders,BingMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingMapProvider.cs,GetRoute,The method has 5 parameters. Parameters: start' end' avoidHighways' walkingMode' Zoom
Long Parameter List,GMap.NET.MapProviders,BingMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingMapProvider.cs,GetRoute,The method has 5 parameters. Parameters: start' end' avoidHighways' walkingMode' Zoom
Long Parameter List,GMap.NET.MapProviders,BingMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingMapProvider.cs,MakeRouteUrl,The method has 5 parameters. Parameters: start' end' language' avoidHighways' walkingMode
Long Parameter List,GMap.NET.MapProviders,BingMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingMapProvider.cs,MakeRouteUrl,The method has 5 parameters. Parameters: start' end' language' avoidHighways' walkingMode
Long Parameter List,GMap.NET.MapProviders,BingMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingMapProvider.cs,GetRoutePoints,The method has 5 parameters. Parameters: url' zoom' tooltipHtml' numLevel' zoomFactor
Long Parameter List,GMap.NET.MapProviders,CloudMadeMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\CloudMadeMapProvider.cs,GetRoute,The method has 5 parameters. Parameters: start' end' avoidHighways' walkingMode' Zoom
Long Parameter List,GMap.NET.MapProviders,CloudMadeMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\CloudMadeMapProvider.cs,GetRoute,The method has 5 parameters. Parameters: start' end' avoidHighways' walkingMode' Zoom
Long Parameter List,GMap.NET.MapProviders,CloudMadeMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\CloudMadeMapProvider.cs,MakeRoutingUrl,The method has 5 parameters. Parameters: start' end' travelType' language' units
Long Parameter List,GMap.NET.MapProviders,CloudMadeMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\CloudMadeMapProvider.cs,GetDirections,The method has 8 parameters. Parameters: direction' start' end' avoidHighways' avoidTolls' walkingMode' sensor' metric
Long Parameter List,GMap.NET.MapProviders,CloudMadeMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\CloudMadeMapProvider.cs,GetDirections,The method has 8 parameters. Parameters: direction' start' end' avoidHighways' avoidTolls' walkingMode' sensor' metric
Long Parameter List,GMap.NET.MapProviders,CloudMadeMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\CloudMadeMapProvider.cs,GetDirections,The method has 8 parameters. Parameters: status' start' end' avoidHighways' avoidTolls' walkingMode' sensor' metric
Long Parameter List,GMap.NET.MapProviders,CloudMadeMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\CloudMadeMapProvider.cs,GetDirections,The method has 8 parameters. Parameters: status' start' end' avoidHighways' avoidTolls' walkingMode' sensor' metric
Long Parameter List,GMap.NET.MapProviders,CloudMadeMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\CloudMadeMapProvider.cs,GetDirections,The method has 9 parameters. Parameters: direction' start' wayPoints' end' avoidHighways' avoidTolls' walkingMode' sensor' metric
Long Parameter List,GMap.NET.MapProviders,CloudMadeMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\CloudMadeMapProvider.cs,GetDirections,The method has 9 parameters. Parameters: direction' start' wayPoints' end' avoidHighways' avoidTolls' walkingMode' sensor' metric
Long Parameter List,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetRoute,The method has 5 parameters. Parameters: start' end' avoidHighways' walkingMode' Zoom
Long Parameter List,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetRoute,The method has 5 parameters. Parameters: start' end' avoidHighways' walkingMode' Zoom
Long Parameter List,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,MakeRouteUrl,The method has 5 parameters. Parameters: start' end' language' avoidHighways' walkingMode
Long Parameter List,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,MakeRouteUrl,The method has 5 parameters. Parameters: start' end' language' avoidHighways' walkingMode
Long Parameter List,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetRoutePoints,The method has 5 parameters. Parameters: url' zoom' tooltipHtml' numLevel' zoomFactor
Long Parameter List,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetDirections,The method has 8 parameters. Parameters: direction' start' end' avoidHighways' avoidTolls' walkingMode' sensor' metric
Long Parameter List,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetDirections,The method has 8 parameters. Parameters: direction' start' end' avoidHighways' avoidTolls' walkingMode' sensor' metric
Long Parameter List,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetDirections,The method has 8 parameters. Parameters: status' start' end' avoidHighways' avoidTolls' walkingMode' sensor' metric
Long Parameter List,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetDirections,The method has 8 parameters. Parameters: status' start' end' avoidHighways' avoidTolls' walkingMode' sensor' metric
Long Parameter List,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetDirections,The method has 9 parameters. Parameters: direction' start' wayPoints' end' avoidHighways' avoidTolls' walkingMode' sensor' metric
Long Parameter List,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetDirections,The method has 9 parameters. Parameters: direction' start' wayPoints' end' avoidHighways' avoidTolls' walkingMode' sensor' metric
Long Parameter List,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,MakeDirectionsUrl,The method has 8 parameters. Parameters: start' end' language' avoidHighways' avoidTolls' walkingMode' sensor' metric
Long Parameter List,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,MakeDirectionsUrl,The method has 8 parameters. Parameters: start' end' language' avoidHighways' walkingMode' avoidTolls' sensor' metric
Long Parameter List,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,MakeDirectionsUrl,The method has 9 parameters. Parameters: start' wayPoints' end' language' avoidHighways' avoidTolls' walkingMode' sensor' metric
Long Parameter List,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,MakeDirectionsUrl,The method has 9 parameters. Parameters: start' wayPoints' end' language' avoidHighways' avoidTolls' walkingMode' sensor' metric
Long Parameter List,GMap.NET.MapProviders,OpenStreetMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\OpenStreetMap\OpenStreetMapProvider.cs,GetRoute,The method has 5 parameters. Parameters: start' end' avoidHighways' walkingMode' Zoom
Long Parameter List,GMap.NET.MapProviders,OpenStreetMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\OpenStreetMap\OpenStreetMapProvider.cs,GetRoute,The method has 5 parameters. Parameters: start' end' avoidHighways' walkingMode' Zoom
Long Parameter List,GMap.NET,DirectionsProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\DirectionsProvider.cs,GetDirections,The method has 8 parameters. Parameters: direction' start' end' avoidHighways' avoidTolls' walkingMode' sensor' metric
Long Parameter List,GMap.NET,DirectionsProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\DirectionsProvider.cs,GetDirections,The method has 8 parameters. Parameters: direction' start' end' avoidHighways' avoidTolls' walkingMode' sensor' metric
Long Parameter List,GMap.NET,DirectionsProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\DirectionsProvider.cs,GetDirections,The method has 8 parameters. Parameters: status' start' end' avoidHighways' avoidTolls' walkingMode' sensor' metric
Long Parameter List,GMap.NET,DirectionsProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\DirectionsProvider.cs,GetDirections,The method has 8 parameters. Parameters: status' start' end' avoidHighways' avoidTolls' walkingMode' sensor' metric
Long Parameter List,GMap.NET,DirectionsProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\DirectionsProvider.cs,GetDirections,The method has 9 parameters. Parameters: direction' start' wayPoints' end' avoidHighways' avoidTolls' walkingMode' sensor' metric
Long Parameter List,GMap.NET,DirectionsProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\DirectionsProvider.cs,GetDirections,The method has 9 parameters. Parameters: direction' start' wayPoints' end' avoidHighways' avoidTolls' walkingMode' sensor' metric
Long Parameter List,GMap.NET,RoutingProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\RoutingProvider.cs,GetRoute,The method has 5 parameters. Parameters: start' end' avoidHighways' walkingMode' Zoom
Long Parameter List,GMap.NET,RoutingProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\RoutingProvider.cs,GetRoute,The method has 5 parameters. Parameters: start' end' avoidHighways' walkingMode' Zoom
Long Parameter List,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,mlfn,The method has 5 parameters. Parameters: e0' e1' e2' e3' phi
Long Parameter List,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,FromGeodeticToCartesian,The method has 6 parameters. Parameters: Lat' Lng' Height' X' Y' Z
Long Parameter List,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,FromCartesianTGeodetic,The method has 5 parameters. Parameters: X' Y' Z' Lat' Lng
Long Parameter List,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,AddStream,The method has 5 parameters. Parameters: _method' _filenameInZip' _source' _modTime' _comment
Long Identifier,GMap.NET.MapProviders,GMapProviders,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\GMapProvider.cs,,The length of the parameter ArcGIS_ShadedRelief_World_2D_Map is 32.
Long Identifier,GMap.NET.MapProviders,GMapProviders,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\GMapProvider.cs,,The length of the parameter ArcGIS_World_Shaded_Relief_Map is 30.
Long Identifier,GMap.NET.MapProviders,GMapProviders,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\GMapProvider.cs,,The length of the parameter ArcGIS_DarbAE_Q2_2011_NAVTQ_Eng_V5_Map is 38.
Long Statement,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,CurrentDomain_AssemblyResolve,The length of the statement  "            string dll = dllDir + "SQLite_v103_NET" + Environment.Version.Major + "_" + (IntPtr.Size == 8 ? "x64" : "x86") + Path.DirectorySeparatorChar + "System.Data.SQLite.DLL"; " is 168.
Long Statement,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,CurrentDomain_AssemblyResolve,The length of the statement  "                  using(MemoryStream gzipDll = new MemoryStream((IntPtr.Size == 8 ? Properties.Resources.System_Data_SQLite_x64_NET2_dll : Properties.Resources.System_Data_SQLite_x86_NET2_dll))) " is 176.
Long Statement,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,CurrentDomain_AssemblyResolve,The length of the statement  "                  using(MemoryStream gzipDll = new MemoryStream((IntPtr.Size == 8 ? Properties.Resources.System_Data_SQLite_x64_NET4_dll : Properties.Resources.System_Data_SQLite_x86_NET4_dll))) " is 176.
Long Statement,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,Ping,The length of the statement  "              Trace.WriteLine("SQLiteVersion: " + SQLiteConnection.SQLiteVersion + " | " + SQLiteConnection.SQLiteSourceId + " | " + SQLiteConnection.DefineConstants); " is 153.
Long Statement,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,PreAllocateDB,The length of the statement  "                           cmd.CommandText = string.Format("create table large (a); insert into large values (zeroblob({0})); drop table large;"' addSizeInMBytes * 1024 * 1024); " is 150.
Long Statement,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,ExportMapDataToDB,The length of the statement  "                                          using(SQLiteCommand cmd2 = new SQLiteCommand(string.Format("SELECT id FROM Tiles WHERE X={0} AND Y={1} AND Zoom={2} AND Type={3};"' rd.GetInt32(1)' rd.GetInt32(2)' rd.GetInt32(3)' rd.GetInt32(4))' cn2)) " is 202.
Long Statement,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,ExportMapDataToDB,The length of the statement  "                                    using(SQLiteCommand cmd = new SQLiteCommand(string.Format("INSERT INTO Tiles(X' Y' Zoom' Type' CacheTime) SELECT X' Y' Zoom' Type' CacheTime FROM Source.Tiles WHERE id={0}; INSERT INTO TilesData(id' Tile) Values((SELECT last_insert_rowid())' (SELECT Tile FROM Source.TilesData WHERE id={0}));"' id)' cn2)) " is 305.
Long Statement,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,RebuildFinnalSelect,The length of the statement  "            finnalSqlSelect += string.Format("\nUNION SELECT Tile FROM db{0}.TilesData WHERE id = (SELECT id FROM db{0}.Tiles WHERE X={{0}} AND Y={{1}} AND Zoom={{2}} AND Type={{3}})"' i); " is 176.
Long Statement,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,DeleteOlderThan,The length of the statement  "                     com.CommandText = string.Format("DELETE FROM Tiles WHERE CacheTime is not NULL and CacheTime < datetime('{0}')"' date.ToString("s")); " is 133.
Long Statement,GMap.NET.CacheProviders,MsSQLPureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\MsSQLPureImageCache.cs,Initialize,The length of the statement  "                  this.cmdFetch = new SqlCommand("SELECT [Tile] FROM [GMapNETcache] WITH (NOLOCK) WHERE [X]=@x AND [Y]=@y AND [Zoom]=@zoom AND [Type]=@type"' cnGet); " is 147.
Long Statement,GMap.NET.CacheProviders,MsSQLPureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\MsSQLPureImageCache.cs,Initialize,The length of the statement  "                  this.cmdInsert = new SqlCommand("INSERT INTO [GMapNETcache] ( [X]' [Y]' [Zoom]' [Type]' [Tile] ) VALUES ( @x' @y' @zoom' @type' @tile )"' cnSet); " is 145.
Long Statement,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,OnMapSizeChanged,The length of the statement  "                int diag = (int)Math.Round(Math.Sqrt(Width * Width + Height * Height) / Provider.Projection.TileSize.Width' MidpointRounding.AwayFromZero); " is 139.
Long Statement,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,ProcessLoadTask,The length of the statement  "                            if (task.Zoom >= task.Core.provider.MinZoom && (!task.Core.provider.MaxZoom.HasValue || task.Zoom <= task.Core.provider.MaxZoom)) " is 129.
Long Statement,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,ProcessLoadTask,The length of the statement  "                                        img = GMaps.Instance.GetImageFrom(tl' new GPoint(task.Pos.X' task.Core.maxOfTiles.Height - task.Pos.Y)' task.Zoom' out ex); " is 123.
Long Statement,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,ProcessLoadTask,The length of the statement  "                            if (img == null && task.Core.okZoom > 0 && task.Core.fillEmptyTiles && task.Core.Provider.Projection is MercatorProjection) " is 123.
Long Statement,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,ProcessLoadTask,The length of the statement  "                                    //var geometry = new RectangleGeometry(new Rect(Core.tileRect.X + 0.6' Core.tileRect.Y + 0.6' Core.tileRect.Width + 0.6' Core.tileRect.Height + 0.6)); " is 150.
Long Statement,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,ProcessLoadTask,The length of the statement  "                                    //var parentImgRect = new Rect(Core.tileRect.X - Core.tileRect.Width * Xoff + 0.6' Core.tileRect.Y - Core.tileRect.Height * Yoff + 0.6' Core.tileRect.Width * Ix + 0.6' Core.tileRect.Height * Ix + 0.6); " is 201.
Long Statement,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,ProcessLoadTask,The length of the statement  "                                    //System.Drawing.Rectangle dst = new System.Drawing.Rectangle((int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height); " is 159.
Long Statement,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,ProcessLoadTask,The length of the statement  "                                    //System.Drawing.RectangleF srcRect = new System.Drawing.RectangleF((float)(Xoff * (img.Img.Width / Ix))' (float)(Yoff * (img.Img.Height / Ix))' (img.Img.Width / Ix)' (img.Img.Height / Ix)); " is 190.
Long Statement,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,OnLoadComplete,The length of the statement  "            Debug.WriteLine(ctid + " - OnTileLoadComplete: " + lastTileLoadTimeMs + "ms' MemoryCacheSize: " + GMaps.Instance.MemoryCache.Size + "MB"); " is 138.
Long Statement,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,UpdateBounds,The length of the statement  "                for (long i = (int)Math.Floor(-sizeOfMapArea.Width * scaleX)' countI = (int)Math.Ceiling(sizeOfMapArea.Width * scaleX); i <= countI; i++) " is 137.
Long Statement,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,UpdateBounds,The length of the statement  "                    for (long j = (int)Math.Floor(-sizeOfMapArea.Height * scaleY)' countJ = (int)Math.Ceiling(sizeOfMapArea.Height * scaleY); j <= countJ; j++) " is 139.
Long Statement,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,UpdateBounds,The length of the statement  "                                DistanceSqr = (centerTileXYLocation.X - p.X) * (centerTileXYLocation.X - p.X) + (centerTileXYLocation.Y - p.Y) * (centerTileXYLocation.Y - p.Y) " is 143.
Long Statement,Org.Mentalis.Network.ProxySocket.Authentication,AuthUserPass,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\AuthUserPass.cs,BeginAuthenticate,The length of the statement  "			Server.BeginSend(GetAuthenticationBytes()' 0' 3 + Username.Length + Password.Length' SocketFlags.None' new AsyncCallback(this.OnSent)' Server); " is 143.
Long Statement,Org.Mentalis.Network.ProxySocket.Authentication,AuthUserPass,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\AuthUserPass.cs,OnReceive,The length of the statement  "					Server.BeginReceive(Buffer' Received' Buffer.Length - Received' SocketFlags.None' new AsyncCallback(this.OnReceive)' Server); " is 125.
Long Statement,Org.Mentalis.Network.ProxySocket,ProxySocket,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\ProxySocket.cs,BeginConnect,The length of the statement  "                    AsyncResult = (new Socks4Handler(this' ProxyUser)).BeginNegotiate((IPEndPoint)remoteEP' new HandShakeComplete(this.OnHandShakeComplete)' ProxyEndPoint); " is 152.
Long Statement,Org.Mentalis.Network.ProxySocket,ProxySocket,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\ProxySocket.cs,BeginConnect,The length of the statement  "                    AsyncResult = (new Socks5Handler(this' ProxyUser' ProxyPass)).BeginNegotiate((IPEndPoint)remoteEP' new HandShakeComplete(this.OnHandShakeComplete)' ProxyEndPoint); " is 163.
Long Statement,Org.Mentalis.Network.ProxySocket,ProxySocket,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\ProxySocket.cs,BeginConnect,The length of the statement  "                    AsyncResult = (new Socks4Handler(this' ProxyUser)).BeginNegotiate(host' port' new HandShakeComplete(this.OnHandShakeComplete)' ProxyEndPoint); " is 142.
Long Statement,Org.Mentalis.Network.ProxySocket,ProxySocket,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\ProxySocket.cs,BeginConnect,The length of the statement  "                    AsyncResult = (new Socks5Handler(this' ProxyUser' ProxyPass)).BeginNegotiate(host' port' new HandShakeComplete(this.OnHandShakeComplete)' ProxyEndPoint); " is 153.
Long Statement,Org.Mentalis.Network.ProxySocket,Socks4Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks4Handler.cs,OnReceive,The length of the statement  "					Server.BeginReceive(Buffer' Received' Buffer.Length - Received' SocketFlags.None' new AsyncCallback(this.OnReceive)' Server); " is 125.
Long Statement,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,OnAuthReceive,The length of the statement  "					Server.BeginReceive(Buffer' Received' Buffer.Length - Received' SocketFlags.None' new AsyncCallback(this.OnAuthReceive)' Server); " is 129.
Long Statement,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,OnReceive,The length of the statement  "					Server.BeginReceive(Buffer' Received' Buffer.Length - Received' SocketFlags.None' new AsyncCallback(this.OnReceive)' Server); " is 125.
Long Statement,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,OnReadLast,The length of the statement  "					Server.BeginReceive(Buffer' Received' Buffer.Length - Received' SocketFlags.None' new AsyncCallback(this.OnReadLast)' Server); " is 126.
Long Statement,GMap.NET.MapProviders,BingMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingMapProvider.cs,OnInitialized,The length of the statement  "                  key = Stuff.GString("Jq7FrGTyaYqcrvv9ugBKv4OVSKnmzpigqZtdvtcDdgZexmOZ2RugOexFSmVzTAhOWiHrdhFoNCoySnNF3MyyIOo5u2Y9rj88"); " is 120.
Long Statement,GMap.NET.MapProviders,BingMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingMapProvider.cs,OnInitialized,The length of the statement  "                  string keyResponse = GMaps.Instance.UseUrlCache ? Cache.Instance.GetContent("BingLoggingServiceV1" + key' CacheType.UrlCache' TimeSpan.FromHours(8)) : string.Empty; " is 164.
Long Statement,GMap.NET.MapProviders,BingMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingMapProvider.cs,OnInitialized,The length of the statement  "                     // http://dev.virtualearth.net/webservices/v1/LoggingService/LoggingService.svc/Log?entry=0&auth={0}&fmt=1&type=3&group=MapControl&name=WPF&version=1.0.0.0&session=00000000-0000-0000-0000-000000000000&mkt=en-US " is 210.
Long Statement,GMap.NET.MapProviders,BingMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingMapProvider.cs,OnInitialized,The length of the statement  "                     keyResponse = GetContentUsingHttp(string.Format("http://dev.virtualearth.net/webservices/v1/LoggingService/LoggingService.svc/Log?entry=0&fmt=1&type=3&group=MapControl&name=AJAX&mkt=en-us&auth={0}&jsonp=microsoftMapsNetworkCallback"' key)); " is 240.
Long Statement,GMap.NET.MapProviders,BingMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingMapProvider.cs,OnInitialized,The length of the statement  "                  string html = GMaps.Instance.UseUrlCache ? Cache.Instance.GetContent(url' CacheType.UrlCache' TimeSpan.FromDays(7)) : string.Empty; " is 131.
Long Statement,GMap.NET.MapProviders,BingMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingMapProvider.cs,GetTileUrl,The length of the statement  "               string r = GMaps.Instance.UseUrlCache ? Cache.Instance.GetContent("GetTileUrl" + imageryType' CacheType.UrlCache' TimeSpan.FromDays(7)) : string.Empty; " is 151.
Long Statement,GMap.NET.MapProviders,BingMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingMapProvider.cs,GetRoute,The length of the statement  "         List<PointLatLng> points = GetRoutePoints(MakeRouteUrl(start' end' LanguageStr' avoidHighways' walkingMode)' Zoom' out tooltip' out numLevels' out zoomFactor); " is 159.
Long Statement,GMap.NET.MapProviders,BingMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingMapProvider.cs,GetRoute,The length of the statement  "         List<PointLatLng> points = GetRoutePoints(MakeRouteUrl(start' end' LanguageStr' avoidHighways' walkingMode)' Zoom' out tooltip' out numLevels' out zoomFactor); " is 159.
Long Statement,GMap.NET.MapProviders,BingMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingMapProvider.cs,MakeRouteUrl,The length of the statement  "         return string.Format(CultureInfo.InvariantCulture' RouteUrlFormatPointLatLng' mode' start.Lat' start.Lng' end.Lat' end.Lng' addition' SessionId); " is 145.
Long Statement,GMap.NET.MapProviders,BingMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingMapProvider.cs,GetRoutePoints,The length of the statement  "                  throw new Exception("Unauthorized' Access was denied. You may have entered your credentials incorrectly' or you might not have access to the requested resource or operation."); " is 176.
Long Statement,GMap.NET.MapProviders,BingMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingMapProvider.cs,GetRoutePoints,The length of the statement  "                  throw new Exception("Internal Server Error' Your request could not be completed because there was a problem with the service."); " is 128.
Long Statement,GMap.NET.MapProviders,BingMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingMapProvider.cs,GetLatLngFromGeocoderUrl,The length of the statement  "                     break; // Unauthorized' Access was denied. You may have entered your credentials incorrectly' or you might not have access to the requested resource or operation. " is 162.
Long Statement,GMap.NET.MapProviders,BingMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingMapProvider.cs,OnInitialized,The length of the statement  "            //UrlFormat[Road]: http://ecn.{subdomain}.tiles.virtualearth.net/tiles/r{quadkey}.jpeg?g=3179&mkt={culture}&shading=hill " is 120.
Long Statement,GMap.NET.MapProviders,BingMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingMapProvider.cs,OnInitialized,The length of the statement  "               UrlDynamicFormat = UrlDynamicFormat.Replace("{subdomain}"' "t{0}").Replace("{quadkey}"' "{1}").Replace("{culture}"' "{2}"); " is 123.
Long Statement,GMap.NET.MapProviders,BingMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingMapProvider.cs,MakeTileImageUrl,The length of the statement  "         return string.Format(UrlFormat' GetServerNum(pos' 4)' key' Version' language' ForceSessionIdOnTileAccess ? "&key=" + SessionId : string.Empty); " is 143.
Long Statement,GMap.NET.MapProviders,BingSatelliteMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingSatelliteMapProvider.cs,MakeTileImageUrl,The length of the statement  "         return string.Format(UrlFormat' GetServerNum(pos' 4)' key' Version' language' ForceSessionIdOnTileAccess ? "&key=" + SessionId : string.Empty); " is 143.
Long Statement,GMap.NET.MapProviders,BingHybridMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingHybridMapProvider.cs,OnInitialized,The length of the statement  "               UrlDynamicFormat = UrlDynamicFormat.Replace("{subdomain}"' "t{0}").Replace("{quadkey}"' "{1}").Replace("{culture}"' "{2}"); " is 123.
Long Statement,GMap.NET.MapProviders,BingHybridMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingHybridMapProvider.cs,MakeTileImageUrl,The length of the statement  "         return string.Format(UrlFormat' GetServerNum(pos' 4)' key' Version' language' ForceSessionIdOnTileAccess ? "&key=" + SessionId : string.Empty); " is 143.
Long Statement,GMap.NET.MapProviders,CloudMadeMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\CloudMadeMapProvider.cs,GetRoute,The length of the statement  "         List<PointLatLng> points = GetRoutePoints(MakeRoutingUrl(start' end' walkingMode ? TravelTypeFoot : TravelTypeMotorCar' LanguageStr' "km")); " is 140.
Long Statement,GMap.NET.MapProviders,CloudMadeMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\CloudMadeMapProvider.cs,MakeRoutingUrl,The length of the statement  "         // http://routes.cloudmade.com/YOUR-API-KEY-GOES-HERE/api/0.3/start_point'[[transit_point1'...'transit_pointN]]'end_point/route_type[/route_type_modifier].output_format[?lang=(en|de)][&units=(km|miles)] " is 202.
Long Statement,GMap.NET.MapProviders,CloudMadeMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\CloudMadeMapProvider.cs,MakeRoutingUrl,The length of the statement  "         return string.Format(CultureInfo.InvariantCulture' UrlFormat' Key' Version' start.Lat' start.Lng' end.Lat' end.Lng' travelType' language' units); " is 145.
Long Statement,GMap.NET.MapProviders,CloudMadeMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\CloudMadeMapProvider.cs,GetDirections,The length of the statement  "         return GetDirectionsUrl(MakeRoutingUrl(start' end' walkingMode ? TravelTypeFoot : TravelTypeMotorCar' LanguageStr' metric ? "km" : "miles")' out direction); " is 156.
Long Statement,GMap.NET.MapProviders,CloudMadeMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\CloudMadeMapProvider.cs,MakeTileImageUrl,The length of the statement  "         return string.Format(UrlFormat' ServerLetters[GetServerNum(pos' 3)]' Key' StyleID' (DoubleResolution ? DoubleResolutionString : string.Empty)' zoom' pos.X' pos.Y); " is 163.
Long Statement,GMap.NET.MapProviders,SwedenMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\SwedenMapProvider.cs,MakeTileImageUrl,The length of the statement  "            // https://kso.etjanster.lantmateriet.se/karta/topowebb/v1/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=topowebb&STYLE=default&TILEMATRIXSET=3006&TILEMATRIX=2&TILEROW=6&TILECOL=7&FORMAT=image%2Fpng " is 206.
Long Statement,GMap.NET.MapProviders,TurkeyMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\TurkeyMapProvider.cs,MakeTileImageUrl,The length of the statement  "         // http://{domain}/{layerName}/{zoomLevel}/{first3LetterOfTileX}/{second3LetterOfTileX}/{third3LetterOfTileX}/{first3LetterOfTileY}/{second3LetterOfTileY}/{third3LetterOfTileXY}.png " is 181.
Long Statement,GMap.NET.MapProviders,MapBenderWMSProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\MapBenderWMSProvider.cs,MakeTileImageUrl,The length of the statement  "         var ret = string.Format(CultureInfo.InvariantCulture' UrlFormat' p1.Lng' p1.Lat' p2.Lng' p2.Lat' Projection.TileSize.Width' Projection.TileSize.Height); " is 152.
Long Statement,GMap.NET.MapProviders,NearMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\NearMap\NearMapProvider.cs,MakeTileImageUrl,The length of the statement  "         //http://maps.au.nearmap.com/api/0/authentication/checkticket?nmf=json&return200=true&callback=jQuery110206126813754172529_1431499242400&_=1431499242401 " is 152.
Long Statement,GMap.NET.MapProviders,NearMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\NearMap\NearMapProvider.cs,MakeTileImageUrl,The length of the statement  "         //jQuery110206126813754172529_1431499242400({"IncidentId":null'"AccountContext":{"AccountId":"account2574457"'"Username":"demo"}'"Result":{"Ticket":{"Ticket":"1637726D061CB8B8A28BC98064443C96FB07008C16531B2F5100F98B9EBFE69C4083C88C920D3BF4C0768A27ADE9ECADF324A380DBF80C3C0982DC83374FE8EBF0F70868735351FC7"'"Expires":"\/Date(1432103400000)\/"'"CookieName":"nearmap_web3_app"}'"Status":"Ok"'"Username":"demo"'"AccountId":"account2574457"}}) " is 438.
Long Statement,GMap.NET.MapProviders,GoogleKoreaHybridMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\Korea\GoogleKoreaHybridMapProvider.cs,MakeTileImageUrl,The length of the statement  "         return string.Format(UrlFormat' UrlFormatServer' GetServerNum(pos' 4)' UrlFormatRequest' Version' language' pos.X' sec1' pos.Y' zoom' sec2' ServerKorea); " is 153.
Long Statement,GMap.NET.MapProviders,GoogleKoreaSatelliteMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\Korea\GoogleKoreaSatelliteMapProvider.cs,MakeTileImageUrl,The length of the statement  "         return string.Format(UrlFormat' UrlFormatServer' GetServerNum(pos' 4)' UrlFormatRequest' Version' language' pos.X' sec1' pos.Y' zoom' sec2' ServerKoreaKr); " is 155.
Long Statement,GMap.NET.MapProviders,GoogleKoreaMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\Korea\GoogleKoreaMapProvider.cs,MakeTileImageUrl,The length of the statement  "         return string.Format(UrlFormat' UrlFormatServer' GetServerNum(pos' 4)' UrlFormatRequest' Version' language' pos.X' sec1' pos.Y' zoom' sec2' ServerKorea); " is 153.
Long Statement,GMap.NET.MapProviders,GoogleChinaTerrainMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\China\GoogleChinaTerrainMapProvider.cs,MakeTileImageUrl,The length of the statement  "         return string.Format(UrlFormat' UrlFormatServer' GetServerNum(pos' 4)' UrlFormatRequest' Version' ChinaLanguage' pos.X' sec1' pos.Y' zoom' sec2' ServerChina); " is 158.
Long Statement,GMap.NET.MapProviders,GoogleChinaHybridMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\China\GoogleChinaHybridMapProvider.cs,MakeTileImageUrl,The length of the statement  "         return string.Format(UrlFormat' UrlFormatServer' GetServerNum(pos' 4)' UrlFormatRequest' Version' ChinaLanguage' pos.X' sec1' pos.Y' zoom' sec2' ServerChina); " is 158.
Long Statement,GMap.NET.MapProviders,GoogleChinaSatelliteMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\China\GoogleChinaSatelliteMapProvider.cs,MakeTileImageUrl,The length of the statement  "         return string.Format(UrlFormat' UrlFormatServer' GetServerNum(pos' 4)' UrlFormatRequest' Version' pos.X' sec1' pos.Y' zoom' sec2' ServerChina); " is 143.
Long Statement,GMap.NET.MapProviders,GoogleChinaMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\China\GoogleChinaMapProvider.cs,MakeTileImageUrl,The length of the statement  "         return string.Format(UrlFormat' UrlFormatServer' GetServerNum(pos' 4)' UrlFormatRequest' Version' ChinaLanguage' pos.X' sec1' pos.Y' zoom' sec2' ServerChina); " is 158.
Long Statement,GMap.NET.MapProviders,GoogleTerrainMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleTerrainMapProvider.cs,MakeTileImageUrl,The length of the statement  "         return string.Format(UrlFormat' UrlFormatServer' GetServerNum(pos' 4)' UrlFormatRequest' Version' language' pos.X' sec1' pos.Y' zoom' sec2' Server); " is 148.
Long Statement,GMap.NET.MapProviders,GoogleHybridMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleHybridMapProvider.cs,MakeTileImageUrl,The length of the statement  "         return string.Format(UrlFormat' UrlFormatServer' GetServerNum(pos' 4)' UrlFormatRequest' Version' language' pos.X' sec1' pos.Y' zoom' sec2' Server); " is 148.
Long Statement,GMap.NET.MapProviders,GoogleSatelliteMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleSatelliteMapProvider.cs,MakeTileImageUrl,The length of the statement  "         return string.Format(UrlFormat' UrlFormatServer' GetServerNum(pos' 4)' UrlFormatRequest' Version' language' pos.X' sec1' pos.Y' zoom' sec2' Server); " is 148.
Long Statement,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,OnInitialized,The length of the statement  "                string url = string.Format("https://maps.{0}/maps/api/js?client=google-maps-lite&amp;libraries=search&amp;language=en&amp;region="' ServerAPIs); " is 144.
Long Statement,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,OnInitialized,The length of the statement  "                    string html = GMaps.Instance.UseUrlCache ? Cache.Instance.GetContent(url' CacheType.UrlCache' TimeSpan.FromHours(8)) : string.Empty; " is 132.
Long Statement,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,OnInitialized,The length of the statement  "                                Debug.WriteLine("GMapProviders.GoogleMap.Version: " + ver + "' " + (ver == old ? "OK" : "old: " + old + "' consider updating source")); " is 135.
Long Statement,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,OnInitialized,The length of the statement  "                                Debug.WriteLine("GMapProviders.GoogleHybridMap.Version: " + verh + "' " + (verh == oldh ? "OK" : "old: " + oldh + "' consider updating source")); " is 145.
Long Statement,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,OnInitialized,The length of the statement  "                                Debug.WriteLine("GMapProviders.GoogleSatelliteMap.Version: " + ver + "' " + (ver == old ? "OK" : "old: " + old + "' consider updating source")); " is 144.
Long Statement,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,OnInitialized,The length of the statement  "                                Debug.WriteLine("GMapProviders.GoogleTerrainMap.Version: " + ver + "' " + (ver == old ? "OK" : "old: " + old + "' consider updating source")); " is 142.
Long Statement,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetRoute,The length of the statement  "            List<PointLatLng> points = GetRoutePoints(MakeRouteUrl(start' end' LanguageStr' avoidHighways' walkingMode)' Zoom' out tooltip' out numLevels' out zoomFactor); " is 159.
Long Statement,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetRoute,The length of the statement  "            List<PointLatLng> points = GetRoutePoints(MakeRouteUrl(start' end' LanguageStr' avoidHighways' walkingMode)' Zoom' out tooltip' out numLevels' out zoomFactor); " is 159.
Long Statement,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,MakeRouteUrl,The length of the statement  "            return string.Format(CultureInfo.InvariantCulture' RouteUrlFormatPointLatLng' language' opt' start.Lat' start.Lng' end.Lat' end.Lng' Server); " is 141.
Long Statement,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetRoutePoints,The length of the statement  "                    //   points:"cy~rIcvp`ClJ~v@jHpu@N|BB~A?tA_@`J@nAJrB|AhEf@h@~@^pANh@Mr@a@`@_@x@cBPk@ZiBHeDQ{C]wAc@mAqCeEoA_C{@_Cy@iDoEaW}AsJcJ}t@iWowB{C_Vyw@gvGyTyjBu@gHwDoZ{W_zBsX}~BiA_MmAyOcAwOs@yNy@eTk@mVUmTE}PJ_W`@cVd@cQ`@}KjA_V`AeOn@oItAkOdAaKfBaOhDiVbD}RpBuKtEkTtP}q@fr@ypCfCmK|CmNvEqVvCuQ`BgLnAmJ`CgTpA_N~@sLlBwYh@yLp@cSj@e]zFkzKHaVViSf@wZjFwqBt@{Wr@qS`AaUjAgStBkYrEwe@xIuw@`Gmj@rFok@~BkYtCy_@|KccBvBgZjC}[tD__@pDaYjB_MpBuLhGi[fC}KfFcSnEkObFgOrFkOzEoLt[ys@tJeUlIsSbKqXtFiPfKi]rG_W|CiNhDkPfDuQlDoShEuXrEy[nOgiAxF{`@|DoVzFk[fDwPlXupA~CoPfDuQxGcd@l@yEdH{r@xDam@`AiWz@mYtAq~@p@uqAfAqx@|@kZxA}^lBq\\|Be\\lAaO~Dm`@|Gsj@tS_~AhCyUrCeZrByWv@uLlUiyDpA}NdHkn@pGmb@LkAtAoIjDqR`I{`@`BcH|I_b@zJcd@lKig@\\_CbBaIlJ}g@lIoj@pAuJtFoh@~Eqs@hDmv@h@qOfF{jBn@gSxCio@dAuQn@gIVoBjAiOlCqWbCiT`PekAzKiu@~EgYfIya@fA{ExGwWnDkMdHiU|G}R`HgQhRsa@hW}g@jVsg@|a@cbAbJkUxKoYxLa_@`IiZzHu[`DoOXsBhBuJbCwNdBaL`EkYvAwM`CeVtEwj@nDqj@BkAnB{YpGgeAn@eJ`CmYvEid@tBkQpGkd@rE}UxB}JdJo_@nDcNfSan@nS}j@lCeIvDsMbC{J|CyNbAwFfCgPz@uGvBiSdD}`@rFon@nKaqAxDmc@xBuT|Fqc@nC_PrEcUtC_MpFcT`GqQxJmXfXwq@jQgh@hBeGhG_U|BaK|G}[nRikAzIam@tDsYfE}^v@_MbAwKn@oIr@yLrBub@jAoa@b@sRdDmjBx@aZdA}XnAqVpAgTlAqPn@oGvFye@dCeRzGwb@xT_}A`BcPrAoOvCad@jAmXv@eV`BieA~@a[fBg_@`CiZ~A_OhHqk@hHcn@tEwe@rDub@nBoW~@sN|BeZnAgMvDm\\hFs^hSigArFaY`Gc\\`C}OhD}YfByQdAaNbAkOtOu~Cn@wKz@uLfCeY|CkW~B}OhCmO|AcI~A_IvDoPpEyPdImWrDuKnL_YjI{Ptl@qfAle@u|@xI}PbImQvFwMbGgOxFkOpdAosCdD_KxGsU|E}RxFcXhCwNjDwTvBiPfBqOrAyMfBcTxAaVhAwVrCy_Al@iPt@_OtA}Q`AuJ`AgIzAkK`EoUtBsJhCaKxCaKdDaKhQeg@jGiRfGaSrFyR`HsWvL}f@xp@grC`Sq|@pEsVdAoGjF{XlkAgwHxHgj@|Jex@fg@qlEjQs{AdHwh@zDkVhEkVzI_e@v}AgzHpK_l@tE}YtEy[rC}TpFme@jg@cpEbF{d@~BoXfBqUbAyOx@yN|Ao]bAo[tIazC`@iLb@aJ~AkWbBgRdBgPjA{IdCePlAmHfBmJdCiL~CuM|DoNxhDezKdDkLvBoInFqVbCuMxBqNnAeJ~CwXdBoSb^crElFsl@`Dy[zDu^xBiRzc@aaE|Fsd@vCkShDmTpG}^lD}QzDoR|zAcdHvIob@dKoj@jDmSlKiq@xVacBhEqXnBqL|Ga^zJke@`y@ktD~Mop@tP}_AdOg`AtCiQxCyOlDkPfDoN`GiTfGkRjEwLvEsL|HkQtEkJdE{HrwAkaCrT{a@rpDiuHtE_KvLuV|{AwaDzAqCb@mAf{Ac`D~FqL~y@_fBlNmZbGaNtF}Mpn@s~AlYss@dFgK|DoGhBoCrDuE~AcBtGaGnByAnDwBnCwAfDwAnFaBjGkA~[{E`iEkn@pQaDvIwBnIiCl\\qLn}J{pDhMcGrFcDhGeEvoDehC|AsArCwChBaC`C_EzC_HbBcFd@uB`@qAn@gDdB}Kz@}Hn@iPjByx@jDcvAj@}RDsEn@yTv@a]VcPtEamFBcHT_LNkEdAiShDsi@`GudAbFgx@`@iKdP}yFhBgs@p@yRjCo_AJwCXeEb@uEz@_H|@yEnBqHrCiIpAmE`o@qhBxC_IjIuVdIcXh{AgmG`i@_{BfCuLrhAssGfFeXxbBklInCsN|_AoiGpGs_@pl@w}Czy@_kEvG{]h}@ieFbQehAdHye@lPagA|Eu\\tAmI|CwWjn@mwGj@eH|]azFl@kPjAqd@jJe|DlD}vAxAeh@@eBvVk}JzIkqDfE_aBfA{YbBk[zp@e}LhAaObCeUlAuIzAeJrb@q`CjCcOnAaIpBwOtBkTjDsg@~AiPvBwOlAcH|AkIlCkLlYudApDoN`BgHhBaJvAeIvAqJbAuHrBqQbAsLx@oL`MwrCXkFr@uJh@{FhBsOvXwoB|EqVdBmHxC}KtCcJtDgKjDoIxE}JdHcMdCuDdIoKlmB}|BjJuMfFgIlE{HlEyIdEeJ~FaOvCgInCuI`EmN`J}]rEsP`EuMzCoIxGwPpi@cnAhGgPzCiJvFmRrEwQbDyOtCoPbDwTxDq\\rAsK`BgLhB{KxBoLfCgLjDqKdBqEfEkJtSy^`EcJnDuJjAwDrCeK\\}AjCaNr@qEjAaJtNaqAdCqQ`BsItS}bAbQs{@|Kor@xBmKz}@}uDze@{zAjk@}fBjTsq@r@uCd@aDFyCIwCWcCY}Aq_@w|A{AwF_DyHgHwOgu@m_BSb@nFhL"' " is 2853.
Long Statement,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetRoutePoints,The length of the statement  "                    //   levelsis 674.
Long Statement,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,MakeGeocoderUrl,The length of the statement  "            return string.Format(CultureInfo.InvariantCulture' GeocoderUrlFormat' ServerAPIs' Uri.EscapeDataString(keywords).Replace(' '' '+')' language); " is 142.
Long Statement,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetPlacemarkFromReverseGeocoderUrl,The length of the statement  "                string reverse = GMaps.Instance.UsePlacemarkCache ? Cache.Instance.GetContent(url' CacheType.PlacemarkCache) : string.Empty; " is 124.
Long Statement,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetDirections,The length of the statement  "            return GetDirectionsUrl(MakeDirectionsUrl(start' end' LanguageStr' avoidHighways' avoidTolls' walkingMode' sensor' metric)' out direction); " is 139.
Long Statement,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetDirections,The length of the statement  "            return GetDirectionsUrl(MakeDirectionsUrl(start' end' LanguageStr' avoidHighways' avoidTolls' walkingMode' sensor' metric)' out direction); " is 139.
Long Statement,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetDirections,The length of the statement  "            return GetDirectionsUrl(MakeDirectionsUrl(start' wayPoints' end' LanguageStr' avoidHighways' avoidTolls' walkingMode' sensor' metric)' out direction); " is 150.
Long Statement,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetDirections,The length of the statement  "            return GetDirectionsUrl(MakeDirectionsUrl(start' wayPoints' end' LanguageStr' avoidHighways' avoidTolls' walkingMode' sensor' metric)' out direction); " is 150.
Long Statement,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,MakeDirectionsUrl,The length of the statement  "            return string.Format(CultureInfo.InvariantCulture' DirectionUrlFormatPoint' start.Lat' start.Lng' end.Lat' end.Lng' sensor.ToString().ToLower()' language' av' mt' wk' ServerAPIs); " is 179.
Long Statement,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,MakeDirectionsUrl,The length of the statement  "            return string.Format(DirectionUrlFormatStr' start.Replace(' '' '+')' end.Replace(' '' '+')' sensor.ToString().ToLower()' language' av' mt' wk' ServerAPIs); " is 155.
Long Statement,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,MakeDirectionsUrl,The length of the statement  "            return string.Format(CultureInfo.InvariantCulture' DirectionUrlFormatWaypoint' start.Lat' start.Lng' wpLatLng' sensor.ToString().ToLower()' language' av' mt' wk' ServerAPIs' end.Lat' end.Lng); " is 192.
Long Statement,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,MakeDirectionsUrl,The length of the statement  "            return string.Format(CultureInfo.InvariantCulture' DirectionUrlFormatWaypointStr' start.Replace(' '' '+')' wpLatLng' sensor.ToString().ToLower()' language' av' mt' wk' ServerAPIs' end.Replace(' '' '+')); " is 203.
Long Statement,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetDirectionsUrl,The length of the statement  "                string kml = GMaps.Instance.UseDirectionsCache ? Cache.Instance.GetContent(url' CacheType.DirectionsCache) : string.Empty; " is 122.
Long Statement,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetDirectionsUrl,The length of the statement  "                    //    <html_instructions>Head &lt;b&gt;north&lt;/b&gt; on &lt;b&gt;Vilniaus gatvė&lt;/b&gt; toward &lt;b&gt;Tilto gatvė&lt;/b&gt;</html_instructions> " is 149.
Long Statement,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetDirectionsUrl,The length of the statement  "                    //     <points>anylIi_eyC`AwD~@oBLKr@K`U|FdF|@`J^~E[j@Lh@\hB~Bn@tBZhBLrC?zIJ~DzA~OVrELlG^lDdAtDh@hAfApA`EzCvAp@jUpIpAl@bBpAdBpBxA|BdLpV`BxClAbBhBlBbChBpBhAdAXjBHlE_@t@?|@Lt@X</points> " is 183.
Long Statement,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetDirectionsUrl,The length of the statement  "                    //    <html_instructions>Turn &lt;b&gt;left&lt;/b&gt; to merge onto &lt;b&gt;Geležinio Vilko gatvė&lt;/b&gt;</html_instructions> " is 128.
Long Statement,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetDirectionsUrl,The length of the statement  "                    //     <points>anrlIakmxCiq@|qCuBbLcK~n@wUrkAcPnw@gCnPoQt}AoB`MuAdHmAdFoCtJqClImBxE{DrIkQ|ZcEvIkDzIcDhKyBxJ{EdXuCtS_G`g@mF|\eF`WyDhOiE~NiErMaGpOoj@ppAoE|K_EzKeDtKkEnOsLnd@mDzLgI~U{FrNsEvJoEtI_FpI{J`O_EjFooBf_C{GdJ_FjIsH`OoFhMwH`UcDtL{CzMeDlQmAzHuU~bBiArIwApNaBfWaLfiCoBpYsDf\qChR_FlVqEpQ_ZbfA}CfN{A~HwCtRiAfKmBlVwBx[gBfRcBxMaLdp@sXrzAaE~UqCzRyC`[_q@z|LgC|e@m@vNqp@b}WuLraFo@jPaS~bDmJryAeo@v|G}CnWsm@~`EoKvo@kv@lkEkqBrlKwBvLkNj|@cu@`~EgCnNuiBpcJakAx|GyB`KqdC~fKoIfYicAxtCiDrLu@hDyBjQm@xKoGdxBmQhoGuUn|Dc@nJ[`OW|VaEn|Ee@`X</points> " is 529.
Long Statement,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetDirectionsUrl,The length of the statement  "                    //    <html_instructions>At the roundabout' take the &lt;b&gt;3rd&lt;/b&gt; exit and stay on &lt;b&gt;Jonavos gatvė&lt;/b&gt;</html_instructions> " is 145.
Long Statement,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetDirectionsUrl,The length of the statement  "                    //    <html_instructions>Turn &lt;b&gt;right&lt;/b&gt; onto &lt;b&gt;A. Mapu gatvė&lt;/b&gt;&lt;div style=&quot;font-size:0.9em&quot;&gt;Destination will be on the right&lt;/div&gt;</html_instructions> " is 201.
Long Statement,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetDirectionsUrl,The length of the statement  "                    //   <points>soxlIiohyCYL}Fb@mApUF`@GvAYpD{@dGcCjIoIvOwBpFy@xC]jBSxCC~E^~Er@lCtAdC`AwD~@oB`AW`U|FdF|@`J^~E[tAj@hB~BjA~ELrCJzOzA~Od@`N^lDdAtDt@xAjAnApDlCbXbKpAl@bBpAdBpBxA|BdLpV`BxCvDpEbChBpBhAdAXjBHbG_@|@LtHbClFr@jK`F~VjNxBbB`@h@rwAt|Cba@l`BjAxGNxEMvDaAzF}bBjiFcFbQ_y@|gD{CxMeBnJcK~n@wh@dkCkAlIoQt}AeEfV}EzQqClImBxE{DrIkQ|ZcEvIkDzIcDhKyBxJ{EdXuCtS_G`g@mF|\eF`WyDhOiE~NiErMaGpOoj@ppAoE|K_EzKeDtKmXzbAgI~U{FrNsEvJoLfT{J`O_EjFooBf_C{GdJkLtSwI`SyClI}CrJcDtL{CzMeDlQcXzlBiArIwApNaBfWaLfiCoBpYsDf\qChR_FlVqEpQ_ZbfAyFfXwCtRiAfKeFfs@gBfRcBxMaLdp@sXrzAaE~UqCzRyC`[_q@z|LuDtu@qp@b}WuLraFo@jPo^r}Faq@pfHaBtMsm@~`EoKvo@kv@lkEcuBjzKkNj|@cu@`~EgCnNuiBpcJakAx|GyB`KqdC~fKoIfYidAbwCoD|MeAbHcA|Im@xK}YnhKyV~gEs@~f@aEn|Ee@`XQ^MnD[lBoF`N}@zJCjBfKxCJLdj@bQv`@pIpHnAdl@hLdB`@nDvAtEjDdCvCbOvSzLhZbQd^`JpMPt@QtBFnAz@hDl@^j@?f@e@pAe@x@k@xBPfCEf@Uj@wBbEx@pCH</points> " is 842.
Long Statement,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,DecodePointsInto,The length of the statement  "            // https://github.com/googlemaps/google-maps-services-java/blob/master/src/main/java/com/google/maps/internal/PolylineEncoding.java " is 131.
Long Statement,GMap.NET.MapProviders,GoogleMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,MakeTileImageUrl,The length of the statement  "            return string.Format(UrlFormat' UrlFormatServer' GetServerNum(pos' 4)' UrlFormatRequest' Version' language' pos.X' sec1' pos.Y' zoom' sec2' Server); " is 148.
Long Statement,GMap.NET.MapProviders,YahooHybridMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Yahoo\YahooHybridMapProvider.cs,MakeTileImageUrl,The length of the statement  "         return string.Format(UrlFormat' ((GetServerNum(pos' 2)) + 1)' Version' language' pos.X' (((1 << zoom) >> 1) - 1 - pos.Y)' (zoom + 1)); " is 134.
Long Statement,GMap.NET.MapProviders,YahooSatelliteMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Yahoo\YahooSatelliteMapProvider.cs,MakeTileImageUrl,The length of the statement  "         return string.Format(UrlFormat' ((GetServerNum(pos' 2)) + 1)' Version' language' pos.X' (((1 << zoom) >> 1) - 1 - pos.Y)' (zoom + 1)); " is 134.
Long Statement,GMap.NET.MapProviders,YahooMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Yahoo\YahooMapProvider.cs,GetPoints,The length of the statement  "          //<ResultSet version="1.0"><Error>0</Error><ErrorMessage>No error</ErrorMessage><Locale>LT-lt</Locale><Quality>40</Quality><Found>1</Found><Result><quality>40</quality><latitude>54.689850</latitude><longitude>25.269260</longitude><offsetlat>54.689850</offsetlat><offsetlon>25.269260</offsetlon><radius>46100</radius></Result></ResultSet> " is 337.
Long Statement,GMap.NET.MapProviders,YahooMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Yahoo\YahooMapProvider.cs,GetPoints,The length of the statement  "          // http://where.yahooapis.com/geocode?country=LT&state=Vilniaus+Apskritis&county=Vilniaus+Miesto+Savivaldybe&city=Vilnius&neighborhood=Naujamiestis&postal=01108&street=J.+Tumo-Vaizganto+Gatve&house=2&appid=1234&flags=CG&gflags=QL&locale=LT-lt " is 242.
Long Statement,GMap.NET.MapProviders,YahooMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Yahoo\YahooMapProvider.cs,GetPoints,The length of the statement  "          //<ResultSet version="1.0"><Error>0</Error><ErrorMessage>No error</ErrorMessage><Locale>LT-lt</Locale><Quality>19</Quality><Found>1</Found><Result><quality>87</quality><latitude>54.690181</latitude><longitude>25.269483</longitude><offsetlat>54.690227</offsetlat><offsetlon>25.269278</offsetlon><radius>500</radius></Result></ResultSet> " is 335.
Long Statement,GMap.NET.MapProviders,YahooMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Yahoo\YahooMapProvider.cs,GetPlacemarks,The length of the statement  "          //<ResultSet version="1.0"><Error>0</Error><ErrorMessage>No error</ErrorMessage><Locale>LT-lt</Locale><Quality>99</Quality><Found>1</Found><Result><quality>99</quality><latitude>54.689850</latitude><longitude>25.269260</longitude><offsetlat>54.689850</offsetlat><offsetlon>25.269260</offsetlon><radius>500</radius><name>54.689850'25.269260</name><line1>2 J. Tumo-Vaizganto Gatve</line1><line2>01108 Naujamiestis</line2><line3/><line4>Lietuvos Respublika</line4><house>2</house><street>J. Tumo-Vaizganto Gatve</street><xstreet/><unittype/><unit/><postal>01108</postal><level4>Naujamiestis</level4><level3>Vilnius</level3><level2>Vilniaus Miesto Savivaldybe</level2><level1>Vilniaus Apskritis</level1><level0>Lietuvos Respublika</level0><level0code>LT</level0code><level1code/><level2code/><hash/><woeid>12758362</woeid><woetype>11</woetype><uzip>01108</uzip></Result></ResultSet> " is 878.
Long Statement,GMap.NET.MapProviders,YahooMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Yahoo\YahooMapProvider.cs,MakeGeocoderUrl,The length of the statement  "         return string.Format(CultureInfo.InvariantCulture' GeocoderUrlFormat' keywords.Replace(' '' '+')' AppId' !string.IsNullOrEmpty(LanguageStr) ? "&locale=" + LanguageStr : ""); " is 173.
Long Statement,GMap.NET.MapProviders,YahooMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Yahoo\YahooMapProvider.cs,MakeReverseGeocoderUrl,The length of the statement  "         return string.Format(CultureInfo.InvariantCulture' ReverseGeocoderUrlFormat' pt.Lat' pt.Lng' AppId' !string.IsNullOrEmpty(LanguageStr) ? "&locale=" + LanguageStr : ""); " is 168.
Long Statement,GMap.NET.MapProviders,YahooMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Yahoo\YahooMapProvider.cs,GetPlacemarksFromReverseGeocoderUrl,The length of the statement  "              string geo = GMaps.Instance.UsePlacemarkCache ? Cache.Instance.GetContent(url' CacheType.PlacemarkCache) : string.Empty; " is 120.
Long Statement,GMap.NET.MapProviders,YahooMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Yahoo\YahooMapProvider.cs,MakeTileImageUrl,The length of the statement  "         // http://2.base.maps.api.here.com/maptile/2.1/maptile/newest/normal.day/11/1169/652/256/png8?lg=EN&token=TrLJuXVK62IQk0vuXFzaig%3D%3D&app_id=eAdkWGYRoc4RfxVo0Z4B " is 162.
Long Statement,GMap.NET.MapProviders,YahooMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Yahoo\YahooMapProvider.cs,MakeTileImageUrl,The length of the statement  "         // https://4.aerial.maps.api.here.com/maptile/2.1/maptile/newest/hybrid.day/11/1167/652/256/jpg?lg=ENG&token=TrLJuXVK62IQk0vuXFzaig%3D%3D&requestid=yahoo.prod&app_id=eAdkWGYRoc4RfxVo0Z4B " is 186.
Long Statement,GMap.NET.MapProviders,YahooMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Yahoo\YahooMapProvider.cs,MakeTileImageUrl,The length of the statement  "         // https://4.aerial.maps.api.here.com/maptile/2.1/maptile/newest/satellite.day/13/4671/2604/256/jpg?lg=ENG&token=TrLJuXVK62IQk0vuXFzaig%3D%3D&requestid=yahoo.prod&app_id=eAdkWGYRoc4RfxVo0Z4B " is 190.
Long Statement,GMap.NET.MapProviders,OpenStreetMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\OpenStreetMap\OpenStreetMapProvider.cs,GetRoute,The length of the statement  "         List<PointLatLng> points = GetRoutePoints(MakeRoutingUrl(start' end' walkingMode ? TravelTypeFoot : TravelTypeMotorCar)); " is 121.
Long Statement,GMap.NET.MapProviders,OpenStreetMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\OpenStreetMap\OpenStreetMapProvider.cs,MakeRoutingUrl,The length of the statement  "         return string.Format(CultureInfo.InvariantCulture' RoutingUrlFormat' start.Lat' start.Lng' end.Lat' end.Lng' travelType); " is 121.
Long Statement,GMap.NET.MapProviders,OpenStreetMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\OpenStreetMap\OpenStreetMapProvider.cs,GetRoutePoints,The length of the statement  "               var coordNode = xmldoc.SelectSingleNode("/sm:kml/sm:Document/sm:Folder/sm:Placemark/sm:LineString/sm:coordinates"' xmlnsManager); " is 129.
Long Statement,GMap.NET.MapProviders,OpenStreetMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\OpenStreetMap\OpenStreetMapProvider.cs,GetPoints,The length of the statement  "         //<searchresults timestamp="Wed' 01 Feb 12 09:46:00 -0500" attribution="Data Copyright OpenStreetMap Contributors' Some Rights Reserved. CC-BY-SA 2.0." querystring="lithuania'vilnius" polygon="false" exclude_place_ids="29446018'53849547'8831058'29614806" more_url="http://open.mapquestapi.com/nominatim/v1/search?format=xml&exclude_place_ids=29446018'53849547'8831058'29614806&accept-language=en&q=lithuania%2Cvilnius"> " is 419.
Long Statement,GMap.NET.MapProviders,OpenStreetMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\OpenStreetMap\OpenStreetMapProvider.cs,GetPoints,The length of the statement  "         //<place place_id="29446018" osm_type="way" osm_id="24598347" place_rank="30" boundingbox="54.6868133544922'54.6879043579102'25.2885360717773'25.2898139953613" lat="54.6873633486028" lon="25.289199818878" display_name="National Museum of Lithuania' 1' Arsenalo g.' Senamiesčio seniūnija' YAHOO-HIRES-20080313' Vilnius County' Šalčininkų rajonas' Vilniaus apskritis' 01513' Lithuania" class="tourism" type="museum" icon="http://open.mapquestapi.com/nominatim/v1/images/mapicons/tourist_museum.p.20.png"/> " is 503.
Long Statement,GMap.NET.MapProviders,OpenStreetMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\OpenStreetMap\OpenStreetMapProvider.cs,GetPoints,The length of the statement  "         //<place place_id="53849547" osm_type="way" osm_id="55469274" place_rank="30" boundingbox="54.6896553039551'54.690486907959'25.2675743103027'25.2692089080811" lat="54.6900227236882" lon="25.2683589759401" display_name="Ministry of Foreign Affairs of the Republic of Lithuania' 2' J. Tumo Vaižganto g.' Naujamiesčio seniūnija' Vilnius' Vilnius County' Vilniaus m. savivaldybė' Vilniaus apskritis' LT-01104' Lithuania" class="amenity" type="public_building"/> " is 457.
Long Statement,GMap.NET.MapProviders,OpenStreetMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\OpenStreetMap\OpenStreetMapProvider.cs,GetPoints,The length of the statement  "         //<place place_id="8831058" osm_type="node" osm_id="836234960" place_rank="30" boundingbox="54.6670935059'54.6870973206'25.2638857269'25.2838876343" lat="54.677095" lon="25.2738876" display_name="Railway Museum of Lithuania' 15' Mindaugo g.' Senamiesčio seniūnija' Vilnius' Vilnius County' Vilniaus m. savivaldybė' Vilniaus apskritis' 03215' Lithuania" class="tourism" type="museum" icon="http://open.mapquestapi.com/nominatim/v1/images/mapicons/tourist_museum.p.20.png"/> " is 472.
Long Statement,GMap.NET.MapProviders,OpenStreetMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\OpenStreetMap\OpenStreetMapProvider.cs,GetPoints,The length of the statement  "         //<place place_id="29614806" osm_type="way" osm_id="24845629" place_rank="30" boundingbox="54.6904983520508'54.6920852661133'25.2606296539307'25.2628803253174" lat="54.6913385159005" lon="25.2617684209873" display_name="Seimas (Parliament) of the Republic of Lithuania' 53' Gedimino pr.' Naujamiesčio seniūnija' Vilnius' Vilnius County' Vilniaus m. savivaldybė' Vilniaus apskritis' LT-01111' Lithuania" class="amenity" type="public_building"/> " is 443.
Long Statement,GMap.NET.MapProviders,OpenStreetMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\OpenStreetMap\OpenStreetMapProvider.cs,GetPoints,The length of the statement  "         // http://nominatim.openstreetmap.org/search?street=&city=vilnius&county=&state=&country=lithuania&postalcode=&format=xml " is 121.
Long Statement,GMap.NET.MapProviders,OpenStreetMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\OpenStreetMap\OpenStreetMapProvider.cs,GetPoints,The length of the statement  "         //<searchresults timestamp="Thu' 29 Nov 12 08:38:23 +0000" attribution="Data © OpenStreetMap contributors' ODbL 1.0. http://www.openstreetmap.org/copyright" querystring="vilnius' lithuania" polygon="false" exclude_place_ids="98093941" more_url="http://nominatim.openstreetmap.org/search?format=xml&exclude_place_ids=98093941&accept-language=de-de'de;q=0.8'en-us;q=0.5'en;q=0.3&q=vilnius%2C+lithuania"> " is 401.
Long Statement,GMap.NET.MapProviders,OpenStreetMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\OpenStreetMap\OpenStreetMapProvider.cs,GetPoints,The length of the statement  "         //<place place_id="98093941" osm_type="relation" osm_id="1529146" place_rank="16" boundingbox="54.5693359375'54.8323097229004'25.0250644683838'25.4815216064453" lat="54.6843135" lon="25.2853984" display_name="Vilnius' Vilniaus m. savivaldybė' Distrikt Vilnius' Litauen" class="boundary" type="administrative" icon="http://nominatim.openstreetmap.org/images/mapicons/poi_boundary_administrative.p.20.png"/> " is 405.
Long Statement,GMap.NET.MapProviders,OpenStreetMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\OpenStreetMap\OpenStreetMapProvider.cs,GetPlacemark,The length of the statement  "         //http://nominatim.openstreetmap.org/reverse?format=xml&lat=52.5487429714954&lon=-1.81602098644987&zoom=18&addressdetails=1 " is 123.
Long Statement,GMap.NET.MapProviders,OpenStreetMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\OpenStreetMap\OpenStreetMapProvider.cs,GetPlacemark,The length of the statement  "         <reversegeocode timestamp="Wed' 01 Feb 12 09:51:11 -0500" attribution="Data Copyright OpenStreetMap Contributors' Some Rights Reserved. CC-BY-SA 2.0." querystring="format=xml&lat=52.5487429714954&lon=-1.81602098644987&zoom=18&addressdetails=1"> " is 244.
Long Statement,GMap.NET.MapProviders,OpenStreetMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\OpenStreetMap\OpenStreetMapProvider.cs,GetPlacemarkFromReverseGeocoderUrl,The length of the statement  "            string geo = GMaps.Instance.UsePlacemarkCache ? Cache.Instance.GetContent(url' CacheType.PlacemarkCache) : string.Empty; " is 120.
Long Statement,GMap.NET.MapProviders,GMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\GMapProvider.cs,CheckTileImageHttpResponse,The length of the statement  "            //Debug.WriteLine(response.StatusCode + "/" + response.StatusDescription + "/" + response.ContentType + " -> " + response.ResponseUri); " is 135.
Long Statement,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The length of the statement  "         var eterm2 = (Math.Pow(w' 4) / 120.0) * Math.Pow(coslat' 4) * (4 * Math.Pow(psi' 3) * (1.0 - 6 * t * t) + psi * psi * (1.0 + 8 * t * t) - psi * 2 * t * t + Math.Pow(t' 4)); " is 172.
Long Statement,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The length of the statement  "         var eterm3 = (Math.Pow(w' 6) / 5040.0) * Math.Pow(coslat' 6) * (61.0 - 479 * t * t + 179 * Math.Pow(t' 4) - Math.Pow(t' 6)); " is 124.
Long Statement,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The length of the statement  "         var nterm3 = (Math.Pow(w' 6) / 720.0) * nu * sinlat * Math.Pow(coslat' 5) * (8 * Math.Pow(psi' 4) * (11.0 - 24 * t * t) - 28 * Math.Pow(psi' 3) * (1.0 - 6 * t * t) + psi * psi * (1.0 - 32 * t * t) - psi * 2 * t * t + Math.Pow(t' 4)); " is 233.
Long Statement,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The length of the statement  "         var nterm4 = (Math.Pow(w' 8) / 40320.0) * nu * sinlat * Math.Pow(coslat' 7) * (1385.0 - 3111 * t * t + 543 * Math.Pow(t' 4) - Math.Pow(t' 6)); " is 142.
Long Statement,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The length of the statement  "         var footlat = sigma + ((3 * n / 2.0) - (27 * Math.Pow(n' 3) / 32.0)) * Math.Sin(2 * sigma) + ((21 * n * n / 16.0) - (55 * Math.Pow(n' 4) / 32.0)) * Math.Sin(4 * sigma) + (151 * Math.Pow(n' 3) / 96.0) * Math.Sin(6 * sigma) + (1097 * Math.Pow(n' 4) / 512.0) * Math.Sin(8 * sigma); " is 278.
Long Statement,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The length of the statement  "         var laterm3 = (t / (k * rho)) * (east * Math.Pow(x' 5) / 720.0) * (8 * Math.Pow(psi' 4) * (11 - 24 * t * t) - 12 * Math.Pow(psi' 3) * (21.0 - 71 * t * t) + 15 * psi * psi * (15.0 - 98 * t * t + 15 * Math.Pow(t' 4)) + 180 * psi * (5 * t * t - 3 * Math.Pow(t' 4)) + 360 * Math.Pow(t' 4)); " is 286.
Long Statement,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The length of the statement  "         var laterm4 = (t / (k * rho)) * (east * Math.Pow(x' 7) / 40320.0) * (1385.0 + 3633 * t * t + 4095 * Math.Pow(t' 4) + 1575 * Math.Pow(t' 6)); " is 140.
Long Statement,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The length of the statement  "         var loterm3 = (Math.Pow(x' 5) / 120.0) * seclat * (-4 * Math.Pow(psi' 3) * (1 - 6 * t * t) + psi * psi * (9 - 68 * t * t) + 72 * psi * t * t + 24 * Math.Pow(t' 4)); " is 164.
Long Statement,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,GetDistance,The length of the statement  "         double a = Math.Pow(Math.Sin(dLatitude / 2)' 2) + Math.Cos(dLat1InRad) * Math.Cos(dLat2InRad) * Math.Pow(Math.Sin(dLongitude / 2)' 2); " is 134.
Long Statement,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,GetBearing,The length of the statement  "         var x = Math.Cos(latitude1) * Math.Sin(latitude2) - Math.Sin(latitude1) * Math.Cos(latitude2) * Math.Cos(longitudeDifference); " is 126.
Long Statement,GMap.NET,GRect,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\GRect.cs,GetHashCode,The length of the statement  "         return (int)(((this.X ^ ((this.Y << 13) | (this.Y >> 0x13))) ^ ((this.Width << 0x1a) | (this.Width >> 6))) ^ ((this.Height << 7) | (this.Height >> 0x19))); " is 155.
Long Statement,GMap.NET,GMaps,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\GMaps.cs,ExportToGMDB,The length of the statement  "            db.AppendFormat(CultureInfo.InvariantCulture' "{0}{1}Data.gmdb"' GMapProvider.LanguageStr' Path.DirectorySeparatorChar); " is 120.
Long Statement,GMap.NET,GMaps,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\GMaps.cs,ImportFromGMDB,The length of the statement  "            db.AppendFormat(CultureInfo.InvariantCulture' "{0}{1}Data.gmdb"' GMapProvider.LanguageStr' Path.DirectorySeparatorChar); " is 120.
Long Statement,GMap.NET,GMaps,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\GMaps.cs,OptimizeMapDb,The length of the statement  "               db.AppendFormat(CultureInfo.InvariantCulture' "{0}{1}Data.gmdb"' GMapProvider.LanguageStr' Path.DirectorySeparatorChar); " is 120.
Long Statement,GMap.NET,GMaps,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\GMaps.cs,EnqueueCacheTask,The length of the statement  "               else if(CacheEngine == null || CacheEngine.ThreadState == System.Threading.ThreadState.Stopped || CacheEngine.ThreadState == System.Threading.ThreadState.Unstarted) " is 164.
Long Statement,GMap.NET,GMaps,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\GMaps.cs,CacheEngineLoop,The length of the statement  "                     Debug.WriteLine("CacheEngine[" + left + "]: storing tile " + task.Value + "' " + task.Value.Img.Length / 1024 + "kB..."); " is 121.
Long Statement,GMap.NET,RectLatLng,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\RectLatLng.cs,Equals,The length of the statement  "         return ((((ef.Lng == this.Lng) && (ef.Lat == this.Lat)) && (ef.WidthLng == this.WidthLng)) && (ef.HeightLat == this.HeightLat)); " is 128.
Long Statement,GMap.NET,RectLatLng,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\RectLatLng.cs,Contains,The length of the statement  "         return ((((this.Lng <= lng) && (lng < (this.Lng + this.WidthLng))) && (this.Lat >= lat)) && (lat > (this.Lat - this.HeightLat))); " is 129.
Long Statement,GMap.NET,RectLatLng,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\RectLatLng.cs,Contains,The length of the statement  "         return ((((this.Lng <= rect.Lng) && ((rect.Lng + rect.WidthLng) <= (this.Lng + this.WidthLng))) && (this.Lat >= rect.Lat)) && ((rect.Lat - rect.HeightLat) >= (this.Lat - this.HeightLat))); " is 188.
Long Statement,GMap.NET,RectLatLng,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\RectLatLng.cs,GetHashCode,The length of the statement  "         return (((this.Lng.GetHashCode() ^ this.Lat.GetHashCode()) ^ this.WidthLng.GetHashCode()) ^ this.HeightLat.GetHashCode()); " is 122.
Long Statement,GMap.NET,RectLatLng,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\RectLatLng.cs,ToString,The length of the statement  "         return ("{Lat=" + this.Lat.ToString(CultureInfo.CurrentCulture) + "'Lng=" + this.Lng.ToString(CultureInfo.CurrentCulture) + "'WidthLng=" + this.WidthLng.ToString(CultureInfo.CurrentCulture) + "'HeightLat=" + this.HeightLat.ToString(CultureInfo.CurrentCulture) + "}"); " is 267.
Long Statement,GMap.NET,GSize,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\GSize.cs,ToString,The length of the statement  "         return "{Width=" + width.ToString(CultureInfo.CurrentCulture) + "' Height=" + height.ToString(CultureInfo.CurrentCulture) + "}"; " is 128.
Long Statement,GMap.NET,SizeLatLng,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\SizeLatLng.cs,ToString,The length of the statement  "         return ("{WidthLng=" + this.widthLng.ToString(CultureInfo.CurrentCulture) + "' HeightLng=" + this.heightLat.ToString(CultureInfo.CurrentCulture) + "}"); " is 152.
Long Statement,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,Open,The length of the statement  "            Stream stream = (Stream)new FileStream(_filename' FileMode.Open' _access == FileAccess.Read ? FileAccess.Read : FileAccess.ReadWrite); " is 134.
Long Statement,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteLocalHeader,The length of the statement  "            this.ZipFileStream.Write(BitConverter.GetBytes((ushort)(_zfe.EncodeUTF8 ? 0x0800 : 0))' 0' 2); // filename and comment encoding  " is 127.
Long Statement,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteLocalHeader,The length of the statement  "            this.ZipFileStream.Write(new byte[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' 0' 12); // unused CRC' un/compressed size' updated later " is 132.
Long Statement,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteCentralDirRecord,The length of the statement  "            this.ZipFileStream.Write(BitConverter.GetBytes((ushort)(_zfe.EncodeUTF8 ? 0x0800 : 0))' 0' 2); // filename and comment encoding  " is 127.
Long Statement,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,Store,The length of the statement  "            if (_zfe.Method == Compression.Deflate && !this.ForceDeflating && _source.CanSeek && _zfe.CompressedSize > _zfe.FileSize) " is 121.
Complex Conditional,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,invalidatorWatch,The conditional expression  "Refresh != null && (!skiped && Refresh.WaitOne() || (Refresh.WaitOne(spanMs' false) || true))"  is complex.
Complex Conditional,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,ProcessLoadTask,The conditional expression  "img == null && task.Core.okZoom > 0 && task.Core.fillEmptyTiles && task.Core.Provider.Projection is MercatorProjection"  is complex.
Complex Conditional,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,UpdateBounds,The conditional expression  "p.X >= minOfTiles.Width && p.Y >= minOfTiles.Height && p.X <= maxOfTiles.Width && p.Y <= maxOfTiles.Height"  is complex.
Complex Conditional,GMap.NET,GMaps,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\GMaps.cs,CacheEngineLoop,The conditional expression  "abortCacheLoop || noMapInstances || !WaitForCache.WaitOne(33333' false) || noMapInstances"  is complex.
Complex Conditional,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,Store,The conditional expression  "_zfe.Method == Compression.Deflate && !this.ForceDeflating && _source.CanSeek && _zfe.CompressedSize > _zfe.FileSize"  is complex.
Empty Catch Block,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,ReadFileInfo,The method has an empty catch block.
Magic Number,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,CurrentDomain_AssemblyResolve,The following statement contains a magic number: if(args.Name.StartsWith("System.Data.SQLite"' StringComparison.OrdinalIgnoreCase))           {              string appDataDir = CacheLocator.GetApplicationDataFolderPath();              if(string.IsNullOrEmpty(appDataDir))              {                 return null;              }                    string dllDir = appDataDir + "DllCache" + Path.DirectorySeparatorChar;              string dll = dllDir + "SQLite_v103_NET" + Environment.Version.Major + "_" + (IntPtr.Size == 8 ? "x64" : "x86") + Path.DirectorySeparatorChar + "System.Data.SQLite.DLL";              if(!File.Exists(dll))              {                 string dir = Path.GetDirectoryName(dll);                 if(!Directory.Exists(dir))                 {                    Directory.CreateDirectory(dir);                 }                   Debug.WriteLine("Saving to DllCache: " + dll);                   if(Environment.Version.Major == 2)                 {                    using(MemoryStream gzipDll = new MemoryStream((IntPtr.Size == 8 ? Properties.Resources.System_Data_SQLite_x64_NET2_dll : Properties.Resources.System_Data_SQLite_x86_NET2_dll)))                    {                       using(var gs = new System.IO.Compression.GZipStream(gzipDll' System.IO.Compression.CompressionMode.Decompress))                       {                          using(MemoryStream exctDll = new MemoryStream())                          {                             byte[] tmp = new byte[1024 * 256];                             int r = 0;                             while((r = gs.Read(tmp' 0' tmp.Length)) > 0)                             {                                exctDll.Write(tmp' 0' r);                             }                             File.WriteAllBytes(dll' exctDll.ToArray());                          }                       }                    }                 }                 else if(Environment.Version.Major == 4)                 {                    using(MemoryStream gzipDll = new MemoryStream((IntPtr.Size == 8 ? Properties.Resources.System_Data_SQLite_x64_NET4_dll : Properties.Resources.System_Data_SQLite_x86_NET4_dll)))                    {                       using(var gs = new System.IO.Compression.GZipStream(gzipDll' System.IO.Compression.CompressionMode.Decompress))                       {                          using(MemoryStream exctDll = new MemoryStream())                          {                             byte[] tmp = new byte[1024 * 256];                             int r = 0;                             while((r = gs.Read(tmp' 0' tmp.Length)) > 0)                             {                                exctDll.Write(tmp' 0' r);                             }                             File.WriteAllBytes(dll' exctDll.ToArray());                          }                       }                    }                 }              }                Debug.WriteLine("Assembly.LoadFile: " + dll);                return System.Reflection.Assembly.LoadFile(dll);           }
Magic Number,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,CurrentDomain_AssemblyResolve,The following statement contains a magic number: if(args.Name.StartsWith("System.Data.SQLite"' StringComparison.OrdinalIgnoreCase))           {              string appDataDir = CacheLocator.GetApplicationDataFolderPath();              if(string.IsNullOrEmpty(appDataDir))              {                 return null;              }                    string dllDir = appDataDir + "DllCache" + Path.DirectorySeparatorChar;              string dll = dllDir + "SQLite_v103_NET" + Environment.Version.Major + "_" + (IntPtr.Size == 8 ? "x64" : "x86") + Path.DirectorySeparatorChar + "System.Data.SQLite.DLL";              if(!File.Exists(dll))              {                 string dir = Path.GetDirectoryName(dll);                 if(!Directory.Exists(dir))                 {                    Directory.CreateDirectory(dir);                 }                   Debug.WriteLine("Saving to DllCache: " + dll);                   if(Environment.Version.Major == 2)                 {                    using(MemoryStream gzipDll = new MemoryStream((IntPtr.Size == 8 ? Properties.Resources.System_Data_SQLite_x64_NET2_dll : Properties.Resources.System_Data_SQLite_x86_NET2_dll)))                    {                       using(var gs = new System.IO.Compression.GZipStream(gzipDll' System.IO.Compression.CompressionMode.Decompress))                       {                          using(MemoryStream exctDll = new MemoryStream())                          {                             byte[] tmp = new byte[1024 * 256];                             int r = 0;                             while((r = gs.Read(tmp' 0' tmp.Length)) > 0)                             {                                exctDll.Write(tmp' 0' r);                             }                             File.WriteAllBytes(dll' exctDll.ToArray());                          }                       }                    }                 }                 else if(Environment.Version.Major == 4)                 {                    using(MemoryStream gzipDll = new MemoryStream((IntPtr.Size == 8 ? Properties.Resources.System_Data_SQLite_x64_NET4_dll : Properties.Resources.System_Data_SQLite_x86_NET4_dll)))                    {                       using(var gs = new System.IO.Compression.GZipStream(gzipDll' System.IO.Compression.CompressionMode.Decompress))                       {                          using(MemoryStream exctDll = new MemoryStream())                          {                             byte[] tmp = new byte[1024 * 256];                             int r = 0;                             while((r = gs.Read(tmp' 0' tmp.Length)) > 0)                             {                                exctDll.Write(tmp' 0' r);                             }                             File.WriteAllBytes(dll' exctDll.ToArray());                          }                       }                    }                 }              }                Debug.WriteLine("Assembly.LoadFile: " + dll);                return System.Reflection.Assembly.LoadFile(dll);           }
Magic Number,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,CurrentDomain_AssemblyResolve,The following statement contains a magic number: if(args.Name.StartsWith("System.Data.SQLite"' StringComparison.OrdinalIgnoreCase))           {              string appDataDir = CacheLocator.GetApplicationDataFolderPath();              if(string.IsNullOrEmpty(appDataDir))              {                 return null;              }                    string dllDir = appDataDir + "DllCache" + Path.DirectorySeparatorChar;              string dll = dllDir + "SQLite_v103_NET" + Environment.Version.Major + "_" + (IntPtr.Size == 8 ? "x64" : "x86") + Path.DirectorySeparatorChar + "System.Data.SQLite.DLL";              if(!File.Exists(dll))              {                 string dir = Path.GetDirectoryName(dll);                 if(!Directory.Exists(dir))                 {                    Directory.CreateDirectory(dir);                 }                   Debug.WriteLine("Saving to DllCache: " + dll);                   if(Environment.Version.Major == 2)                 {                    using(MemoryStream gzipDll = new MemoryStream((IntPtr.Size == 8 ? Properties.Resources.System_Data_SQLite_x64_NET2_dll : Properties.Resources.System_Data_SQLite_x86_NET2_dll)))                    {                       using(var gs = new System.IO.Compression.GZipStream(gzipDll' System.IO.Compression.CompressionMode.Decompress))                       {                          using(MemoryStream exctDll = new MemoryStream())                          {                             byte[] tmp = new byte[1024 * 256];                             int r = 0;                             while((r = gs.Read(tmp' 0' tmp.Length)) > 0)                             {                                exctDll.Write(tmp' 0' r);                             }                             File.WriteAllBytes(dll' exctDll.ToArray());                          }                       }                    }                 }                 else if(Environment.Version.Major == 4)                 {                    using(MemoryStream gzipDll = new MemoryStream((IntPtr.Size == 8 ? Properties.Resources.System_Data_SQLite_x64_NET4_dll : Properties.Resources.System_Data_SQLite_x86_NET4_dll)))                    {                       using(var gs = new System.IO.Compression.GZipStream(gzipDll' System.IO.Compression.CompressionMode.Decompress))                       {                          using(MemoryStream exctDll = new MemoryStream())                          {                             byte[] tmp = new byte[1024 * 256];                             int r = 0;                             while((r = gs.Read(tmp' 0' tmp.Length)) > 0)                             {                                exctDll.Write(tmp' 0' r);                             }                             File.WriteAllBytes(dll' exctDll.ToArray());                          }                       }                    }                 }              }                Debug.WriteLine("Assembly.LoadFile: " + dll);                return System.Reflection.Assembly.LoadFile(dll);           }
Magic Number,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,CurrentDomain_AssemblyResolve,The following statement contains a magic number: if(args.Name.StartsWith("System.Data.SQLite"' StringComparison.OrdinalIgnoreCase))           {              string appDataDir = CacheLocator.GetApplicationDataFolderPath();              if(string.IsNullOrEmpty(appDataDir))              {                 return null;              }                    string dllDir = appDataDir + "DllCache" + Path.DirectorySeparatorChar;              string dll = dllDir + "SQLite_v103_NET" + Environment.Version.Major + "_" + (IntPtr.Size == 8 ? "x64" : "x86") + Path.DirectorySeparatorChar + "System.Data.SQLite.DLL";              if(!File.Exists(dll))              {                 string dir = Path.GetDirectoryName(dll);                 if(!Directory.Exists(dir))                 {                    Directory.CreateDirectory(dir);                 }                   Debug.WriteLine("Saving to DllCache: " + dll);                   if(Environment.Version.Major == 2)                 {                    using(MemoryStream gzipDll = new MemoryStream((IntPtr.Size == 8 ? Properties.Resources.System_Data_SQLite_x64_NET2_dll : Properties.Resources.System_Data_SQLite_x86_NET2_dll)))                    {                       using(var gs = new System.IO.Compression.GZipStream(gzipDll' System.IO.Compression.CompressionMode.Decompress))                       {                          using(MemoryStream exctDll = new MemoryStream())                          {                             byte[] tmp = new byte[1024 * 256];                             int r = 0;                             while((r = gs.Read(tmp' 0' tmp.Length)) > 0)                             {                                exctDll.Write(tmp' 0' r);                             }                             File.WriteAllBytes(dll' exctDll.ToArray());                          }                       }                    }                 }                 else if(Environment.Version.Major == 4)                 {                    using(MemoryStream gzipDll = new MemoryStream((IntPtr.Size == 8 ? Properties.Resources.System_Data_SQLite_x64_NET4_dll : Properties.Resources.System_Data_SQLite_x86_NET4_dll)))                    {                       using(var gs = new System.IO.Compression.GZipStream(gzipDll' System.IO.Compression.CompressionMode.Decompress))                       {                          using(MemoryStream exctDll = new MemoryStream())                          {                             byte[] tmp = new byte[1024 * 256];                             int r = 0;                             while((r = gs.Read(tmp' 0' tmp.Length)) > 0)                             {                                exctDll.Write(tmp' 0' r);                             }                             File.WriteAllBytes(dll' exctDll.ToArray());                          }                       }                    }                 }              }                Debug.WriteLine("Assembly.LoadFile: " + dll);                return System.Reflection.Assembly.LoadFile(dll);           }
Magic Number,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,CurrentDomain_AssemblyResolve,The following statement contains a magic number: if(args.Name.StartsWith("System.Data.SQLite"' StringComparison.OrdinalIgnoreCase))           {              string appDataDir = CacheLocator.GetApplicationDataFolderPath();              if(string.IsNullOrEmpty(appDataDir))              {                 return null;              }                    string dllDir = appDataDir + "DllCache" + Path.DirectorySeparatorChar;              string dll = dllDir + "SQLite_v103_NET" + Environment.Version.Major + "_" + (IntPtr.Size == 8 ? "x64" : "x86") + Path.DirectorySeparatorChar + "System.Data.SQLite.DLL";              if(!File.Exists(dll))              {                 string dir = Path.GetDirectoryName(dll);                 if(!Directory.Exists(dir))                 {                    Directory.CreateDirectory(dir);                 }                   Debug.WriteLine("Saving to DllCache: " + dll);                   if(Environment.Version.Major == 2)                 {                    using(MemoryStream gzipDll = new MemoryStream((IntPtr.Size == 8 ? Properties.Resources.System_Data_SQLite_x64_NET2_dll : Properties.Resources.System_Data_SQLite_x86_NET2_dll)))                    {                       using(var gs = new System.IO.Compression.GZipStream(gzipDll' System.IO.Compression.CompressionMode.Decompress))                       {                          using(MemoryStream exctDll = new MemoryStream())                          {                             byte[] tmp = new byte[1024 * 256];                             int r = 0;                             while((r = gs.Read(tmp' 0' tmp.Length)) > 0)                             {                                exctDll.Write(tmp' 0' r);                             }                             File.WriteAllBytes(dll' exctDll.ToArray());                          }                       }                    }                 }                 else if(Environment.Version.Major == 4)                 {                    using(MemoryStream gzipDll = new MemoryStream((IntPtr.Size == 8 ? Properties.Resources.System_Data_SQLite_x64_NET4_dll : Properties.Resources.System_Data_SQLite_x86_NET4_dll)))                    {                       using(var gs = new System.IO.Compression.GZipStream(gzipDll' System.IO.Compression.CompressionMode.Decompress))                       {                          using(MemoryStream exctDll = new MemoryStream())                          {                             byte[] tmp = new byte[1024 * 256];                             int r = 0;                             while((r = gs.Read(tmp' 0' tmp.Length)) > 0)                             {                                exctDll.Write(tmp' 0' r);                             }                             File.WriteAllBytes(dll' exctDll.ToArray());                          }                       }                    }                 }              }                Debug.WriteLine("Assembly.LoadFile: " + dll);                return System.Reflection.Assembly.LoadFile(dll);           }
Magic Number,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,CurrentDomain_AssemblyResolve,The following statement contains a magic number: if(args.Name.StartsWith("System.Data.SQLite"' StringComparison.OrdinalIgnoreCase))           {              string appDataDir = CacheLocator.GetApplicationDataFolderPath();              if(string.IsNullOrEmpty(appDataDir))              {                 return null;              }                    string dllDir = appDataDir + "DllCache" + Path.DirectorySeparatorChar;              string dll = dllDir + "SQLite_v103_NET" + Environment.Version.Major + "_" + (IntPtr.Size == 8 ? "x64" : "x86") + Path.DirectorySeparatorChar + "System.Data.SQLite.DLL";              if(!File.Exists(dll))              {                 string dir = Path.GetDirectoryName(dll);                 if(!Directory.Exists(dir))                 {                    Directory.CreateDirectory(dir);                 }                   Debug.WriteLine("Saving to DllCache: " + dll);                   if(Environment.Version.Major == 2)                 {                    using(MemoryStream gzipDll = new MemoryStream((IntPtr.Size == 8 ? Properties.Resources.System_Data_SQLite_x64_NET2_dll : Properties.Resources.System_Data_SQLite_x86_NET2_dll)))                    {                       using(var gs = new System.IO.Compression.GZipStream(gzipDll' System.IO.Compression.CompressionMode.Decompress))                       {                          using(MemoryStream exctDll = new MemoryStream())                          {                             byte[] tmp = new byte[1024 * 256];                             int r = 0;                             while((r = gs.Read(tmp' 0' tmp.Length)) > 0)                             {                                exctDll.Write(tmp' 0' r);                             }                             File.WriteAllBytes(dll' exctDll.ToArray());                          }                       }                    }                 }                 else if(Environment.Version.Major == 4)                 {                    using(MemoryStream gzipDll = new MemoryStream((IntPtr.Size == 8 ? Properties.Resources.System_Data_SQLite_x64_NET4_dll : Properties.Resources.System_Data_SQLite_x86_NET4_dll)))                    {                       using(var gs = new System.IO.Compression.GZipStream(gzipDll' System.IO.Compression.CompressionMode.Decompress))                       {                          using(MemoryStream exctDll = new MemoryStream())                          {                             byte[] tmp = new byte[1024 * 256];                             int r = 0;                             while((r = gs.Read(tmp' 0' tmp.Length)) > 0)                             {                                exctDll.Write(tmp' 0' r);                             }                             File.WriteAllBytes(dll' exctDll.ToArray());                          }                       }                    }                 }              }                Debug.WriteLine("Assembly.LoadFile: " + dll);                return System.Reflection.Assembly.LoadFile(dll);           }
Magic Number,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,CurrentDomain_AssemblyResolve,The following statement contains a magic number: if(args.Name.StartsWith("System.Data.SQLite"' StringComparison.OrdinalIgnoreCase))           {              string appDataDir = CacheLocator.GetApplicationDataFolderPath();              if(string.IsNullOrEmpty(appDataDir))              {                 return null;              }                    string dllDir = appDataDir + "DllCache" + Path.DirectorySeparatorChar;              string dll = dllDir + "SQLite_v103_NET" + Environment.Version.Major + "_" + (IntPtr.Size == 8 ? "x64" : "x86") + Path.DirectorySeparatorChar + "System.Data.SQLite.DLL";              if(!File.Exists(dll))              {                 string dir = Path.GetDirectoryName(dll);                 if(!Directory.Exists(dir))                 {                    Directory.CreateDirectory(dir);                 }                   Debug.WriteLine("Saving to DllCache: " + dll);                   if(Environment.Version.Major == 2)                 {                    using(MemoryStream gzipDll = new MemoryStream((IntPtr.Size == 8 ? Properties.Resources.System_Data_SQLite_x64_NET2_dll : Properties.Resources.System_Data_SQLite_x86_NET2_dll)))                    {                       using(var gs = new System.IO.Compression.GZipStream(gzipDll' System.IO.Compression.CompressionMode.Decompress))                       {                          using(MemoryStream exctDll = new MemoryStream())                          {                             byte[] tmp = new byte[1024 * 256];                             int r = 0;                             while((r = gs.Read(tmp' 0' tmp.Length)) > 0)                             {                                exctDll.Write(tmp' 0' r);                             }                             File.WriteAllBytes(dll' exctDll.ToArray());                          }                       }                    }                 }                 else if(Environment.Version.Major == 4)                 {                    using(MemoryStream gzipDll = new MemoryStream((IntPtr.Size == 8 ? Properties.Resources.System_Data_SQLite_x64_NET4_dll : Properties.Resources.System_Data_SQLite_x86_NET4_dll)))                    {                       using(var gs = new System.IO.Compression.GZipStream(gzipDll' System.IO.Compression.CompressionMode.Decompress))                       {                          using(MemoryStream exctDll = new MemoryStream())                          {                             byte[] tmp = new byte[1024 * 256];                             int r = 0;                             while((r = gs.Read(tmp' 0' tmp.Length)) > 0)                             {                                exctDll.Write(tmp' 0' r);                             }                             File.WriteAllBytes(dll' exctDll.ToArray());                          }                       }                    }                 }              }                Debug.WriteLine("Assembly.LoadFile: " + dll);                return System.Reflection.Assembly.LoadFile(dll);           }
Magic Number,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,CurrentDomain_AssemblyResolve,The following statement contains a magic number: if(args.Name.StartsWith("System.Data.SQLite"' StringComparison.OrdinalIgnoreCase))           {              string appDataDir = CacheLocator.GetApplicationDataFolderPath();              if(string.IsNullOrEmpty(appDataDir))              {                 return null;              }                    string dllDir = appDataDir + "DllCache" + Path.DirectorySeparatorChar;              string dll = dllDir + "SQLite_v103_NET" + Environment.Version.Major + "_" + (IntPtr.Size == 8 ? "x64" : "x86") + Path.DirectorySeparatorChar + "System.Data.SQLite.DLL";              if(!File.Exists(dll))              {                 string dir = Path.GetDirectoryName(dll);                 if(!Directory.Exists(dir))                 {                    Directory.CreateDirectory(dir);                 }                   Debug.WriteLine("Saving to DllCache: " + dll);                   if(Environment.Version.Major == 2)                 {                    using(MemoryStream gzipDll = new MemoryStream((IntPtr.Size == 8 ? Properties.Resources.System_Data_SQLite_x64_NET2_dll : Properties.Resources.System_Data_SQLite_x86_NET2_dll)))                    {                       using(var gs = new System.IO.Compression.GZipStream(gzipDll' System.IO.Compression.CompressionMode.Decompress))                       {                          using(MemoryStream exctDll = new MemoryStream())                          {                             byte[] tmp = new byte[1024 * 256];                             int r = 0;                             while((r = gs.Read(tmp' 0' tmp.Length)) > 0)                             {                                exctDll.Write(tmp' 0' r);                             }                             File.WriteAllBytes(dll' exctDll.ToArray());                          }                       }                    }                 }                 else if(Environment.Version.Major == 4)                 {                    using(MemoryStream gzipDll = new MemoryStream((IntPtr.Size == 8 ? Properties.Resources.System_Data_SQLite_x64_NET4_dll : Properties.Resources.System_Data_SQLite_x86_NET4_dll)))                    {                       using(var gs = new System.IO.Compression.GZipStream(gzipDll' System.IO.Compression.CompressionMode.Decompress))                       {                          using(MemoryStream exctDll = new MemoryStream())                          {                             byte[] tmp = new byte[1024 * 256];                             int r = 0;                             while((r = gs.Read(tmp' 0' tmp.Length)) > 0)                             {                                exctDll.Write(tmp' 0' r);                             }                             File.WriteAllBytes(dll' exctDll.ToArray());                          }                       }                    }                 }              }                Debug.WriteLine("Assembly.LoadFile: " + dll);                return System.Reflection.Assembly.LoadFile(dll);           }
Magic Number,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,CurrentDomain_AssemblyResolve,The following statement contains a magic number: if(args.Name.StartsWith("System.Data.SQLite"' StringComparison.OrdinalIgnoreCase))           {              string appDataDir = CacheLocator.GetApplicationDataFolderPath();              if(string.IsNullOrEmpty(appDataDir))              {                 return null;              }                    string dllDir = appDataDir + "DllCache" + Path.DirectorySeparatorChar;              string dll = dllDir + "SQLite_v103_NET" + Environment.Version.Major + "_" + (IntPtr.Size == 8 ? "x64" : "x86") + Path.DirectorySeparatorChar + "System.Data.SQLite.DLL";              if(!File.Exists(dll))              {                 string dir = Path.GetDirectoryName(dll);                 if(!Directory.Exists(dir))                 {                    Directory.CreateDirectory(dir);                 }                   Debug.WriteLine("Saving to DllCache: " + dll);                   if(Environment.Version.Major == 2)                 {                    using(MemoryStream gzipDll = new MemoryStream((IntPtr.Size == 8 ? Properties.Resources.System_Data_SQLite_x64_NET2_dll : Properties.Resources.System_Data_SQLite_x86_NET2_dll)))                    {                       using(var gs = new System.IO.Compression.GZipStream(gzipDll' System.IO.Compression.CompressionMode.Decompress))                       {                          using(MemoryStream exctDll = new MemoryStream())                          {                             byte[] tmp = new byte[1024 * 256];                             int r = 0;                             while((r = gs.Read(tmp' 0' tmp.Length)) > 0)                             {                                exctDll.Write(tmp' 0' r);                             }                             File.WriteAllBytes(dll' exctDll.ToArray());                          }                       }                    }                 }                 else if(Environment.Version.Major == 4)                 {                    using(MemoryStream gzipDll = new MemoryStream((IntPtr.Size == 8 ? Properties.Resources.System_Data_SQLite_x64_NET4_dll : Properties.Resources.System_Data_SQLite_x86_NET4_dll)))                    {                       using(var gs = new System.IO.Compression.GZipStream(gzipDll' System.IO.Compression.CompressionMode.Decompress))                       {                          using(MemoryStream exctDll = new MemoryStream())                          {                             byte[] tmp = new byte[1024 * 256];                             int r = 0;                             while((r = gs.Read(tmp' 0' tmp.Length)) > 0)                             {                                exctDll.Write(tmp' 0' r);                             }                             File.WriteAllBytes(dll' exctDll.ToArray());                          }                       }                    }                 }              }                Debug.WriteLine("Assembly.LoadFile: " + dll);                return System.Reflection.Assembly.LoadFile(dll);           }
Magic Number,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,CheckPreAllocation,The following statement contains a magic number: {              byte[] pageSizeBytes = new byte[2];              byte[] freePagesBytes = new byte[4];                lock(this)              {                 using(var dbf = File.Open(db' FileMode.Open' FileAccess.Read' FileShare.ReadWrite))                 {                    dbf.Seek(16' SeekOrigin.Begin);    #if (!PocketPC && !MONO)                    dbf.Lock(16' 2);                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Unlock(16' 2);                      dbf.Seek(36' SeekOrigin.Begin);                      dbf.Lock(36' 4);                    dbf.Read(freePagesBytes' 0' 4);                    dbf.Unlock(36' 4);  #else                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Seek(36' SeekOrigin.Begin);                    dbf.Read(freePagesBytes' 0' 4);  #endif                      dbf.Close();                 }              }                if(BitConverter.IsLittleEndian)              {                 Array.Reverse(pageSizeBytes);                 Array.Reverse(freePagesBytes);              }              UInt16 pageSize = BitConverter.ToUInt16(pageSizeBytes' 0);              UInt32 freePages = BitConverter.ToUInt32(freePagesBytes' 0);                var freeMB = (pageSize * freePages) / (1024.0 * 1024.0);    #if !PocketPC              int addSizeMB = 32;              int waitUntilMB = 4;  #else              int addSizeMB = 4; // reduce due to test in emulator              int waitUntilMB = 2;  #endif                Debug.WriteLine("FreePageSpace in cache: " + freeMB + "MB | " + freePages + " pages");                if(freeMB <= waitUntilMB)              {                 PreAllocateDB(db' addSizeMB);              }           }
Magic Number,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,CheckPreAllocation,The following statement contains a magic number: {              byte[] pageSizeBytes = new byte[2];              byte[] freePagesBytes = new byte[4];                lock(this)              {                 using(var dbf = File.Open(db' FileMode.Open' FileAccess.Read' FileShare.ReadWrite))                 {                    dbf.Seek(16' SeekOrigin.Begin);    #if (!PocketPC && !MONO)                    dbf.Lock(16' 2);                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Unlock(16' 2);                      dbf.Seek(36' SeekOrigin.Begin);                      dbf.Lock(36' 4);                    dbf.Read(freePagesBytes' 0' 4);                    dbf.Unlock(36' 4);  #else                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Seek(36' SeekOrigin.Begin);                    dbf.Read(freePagesBytes' 0' 4);  #endif                      dbf.Close();                 }              }                if(BitConverter.IsLittleEndian)              {                 Array.Reverse(pageSizeBytes);                 Array.Reverse(freePagesBytes);              }              UInt16 pageSize = BitConverter.ToUInt16(pageSizeBytes' 0);              UInt32 freePages = BitConverter.ToUInt32(freePagesBytes' 0);                var freeMB = (pageSize * freePages) / (1024.0 * 1024.0);    #if !PocketPC              int addSizeMB = 32;              int waitUntilMB = 4;  #else              int addSizeMB = 4; // reduce due to test in emulator              int waitUntilMB = 2;  #endif                Debug.WriteLine("FreePageSpace in cache: " + freeMB + "MB | " + freePages + " pages");                if(freeMB <= waitUntilMB)              {                 PreAllocateDB(db' addSizeMB);              }           }
Magic Number,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,CheckPreAllocation,The following statement contains a magic number: {              byte[] pageSizeBytes = new byte[2];              byte[] freePagesBytes = new byte[4];                lock(this)              {                 using(var dbf = File.Open(db' FileMode.Open' FileAccess.Read' FileShare.ReadWrite))                 {                    dbf.Seek(16' SeekOrigin.Begin);    #if (!PocketPC && !MONO)                    dbf.Lock(16' 2);                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Unlock(16' 2);                      dbf.Seek(36' SeekOrigin.Begin);                      dbf.Lock(36' 4);                    dbf.Read(freePagesBytes' 0' 4);                    dbf.Unlock(36' 4);  #else                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Seek(36' SeekOrigin.Begin);                    dbf.Read(freePagesBytes' 0' 4);  #endif                      dbf.Close();                 }              }                if(BitConverter.IsLittleEndian)              {                 Array.Reverse(pageSizeBytes);                 Array.Reverse(freePagesBytes);              }              UInt16 pageSize = BitConverter.ToUInt16(pageSizeBytes' 0);              UInt32 freePages = BitConverter.ToUInt32(freePagesBytes' 0);                var freeMB = (pageSize * freePages) / (1024.0 * 1024.0);    #if !PocketPC              int addSizeMB = 32;              int waitUntilMB = 4;  #else              int addSizeMB = 4; // reduce due to test in emulator              int waitUntilMB = 2;  #endif                Debug.WriteLine("FreePageSpace in cache: " + freeMB + "MB | " + freePages + " pages");                if(freeMB <= waitUntilMB)              {                 PreAllocateDB(db' addSizeMB);              }           }
Magic Number,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,CheckPreAllocation,The following statement contains a magic number: {              byte[] pageSizeBytes = new byte[2];              byte[] freePagesBytes = new byte[4];                lock(this)              {                 using(var dbf = File.Open(db' FileMode.Open' FileAccess.Read' FileShare.ReadWrite))                 {                    dbf.Seek(16' SeekOrigin.Begin);    #if (!PocketPC && !MONO)                    dbf.Lock(16' 2);                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Unlock(16' 2);                      dbf.Seek(36' SeekOrigin.Begin);                      dbf.Lock(36' 4);                    dbf.Read(freePagesBytes' 0' 4);                    dbf.Unlock(36' 4);  #else                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Seek(36' SeekOrigin.Begin);                    dbf.Read(freePagesBytes' 0' 4);  #endif                      dbf.Close();                 }              }                if(BitConverter.IsLittleEndian)              {                 Array.Reverse(pageSizeBytes);                 Array.Reverse(freePagesBytes);              }              UInt16 pageSize = BitConverter.ToUInt16(pageSizeBytes' 0);              UInt32 freePages = BitConverter.ToUInt32(freePagesBytes' 0);                var freeMB = (pageSize * freePages) / (1024.0 * 1024.0);    #if !PocketPC              int addSizeMB = 32;              int waitUntilMB = 4;  #else              int addSizeMB = 4; // reduce due to test in emulator              int waitUntilMB = 2;  #endif                Debug.WriteLine("FreePageSpace in cache: " + freeMB + "MB | " + freePages + " pages");                if(freeMB <= waitUntilMB)              {                 PreAllocateDB(db' addSizeMB);              }           }
Magic Number,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,CheckPreAllocation,The following statement contains a magic number: {              byte[] pageSizeBytes = new byte[2];              byte[] freePagesBytes = new byte[4];                lock(this)              {                 using(var dbf = File.Open(db' FileMode.Open' FileAccess.Read' FileShare.ReadWrite))                 {                    dbf.Seek(16' SeekOrigin.Begin);    #if (!PocketPC && !MONO)                    dbf.Lock(16' 2);                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Unlock(16' 2);                      dbf.Seek(36' SeekOrigin.Begin);                      dbf.Lock(36' 4);                    dbf.Read(freePagesBytes' 0' 4);                    dbf.Unlock(36' 4);  #else                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Seek(36' SeekOrigin.Begin);                    dbf.Read(freePagesBytes' 0' 4);  #endif                      dbf.Close();                 }              }                if(BitConverter.IsLittleEndian)              {                 Array.Reverse(pageSizeBytes);                 Array.Reverse(freePagesBytes);              }              UInt16 pageSize = BitConverter.ToUInt16(pageSizeBytes' 0);              UInt32 freePages = BitConverter.ToUInt32(freePagesBytes' 0);                var freeMB = (pageSize * freePages) / (1024.0 * 1024.0);    #if !PocketPC              int addSizeMB = 32;              int waitUntilMB = 4;  #else              int addSizeMB = 4; // reduce due to test in emulator              int waitUntilMB = 2;  #endif                Debug.WriteLine("FreePageSpace in cache: " + freeMB + "MB | " + freePages + " pages");                if(freeMB <= waitUntilMB)              {                 PreAllocateDB(db' addSizeMB);              }           }
Magic Number,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,CheckPreAllocation,The following statement contains a magic number: {              byte[] pageSizeBytes = new byte[2];              byte[] freePagesBytes = new byte[4];                lock(this)              {                 using(var dbf = File.Open(db' FileMode.Open' FileAccess.Read' FileShare.ReadWrite))                 {                    dbf.Seek(16' SeekOrigin.Begin);    #if (!PocketPC && !MONO)                    dbf.Lock(16' 2);                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Unlock(16' 2);                      dbf.Seek(36' SeekOrigin.Begin);                      dbf.Lock(36' 4);                    dbf.Read(freePagesBytes' 0' 4);                    dbf.Unlock(36' 4);  #else                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Seek(36' SeekOrigin.Begin);                    dbf.Read(freePagesBytes' 0' 4);  #endif                      dbf.Close();                 }              }                if(BitConverter.IsLittleEndian)              {                 Array.Reverse(pageSizeBytes);                 Array.Reverse(freePagesBytes);              }              UInt16 pageSize = BitConverter.ToUInt16(pageSizeBytes' 0);              UInt32 freePages = BitConverter.ToUInt32(freePagesBytes' 0);                var freeMB = (pageSize * freePages) / (1024.0 * 1024.0);    #if !PocketPC              int addSizeMB = 32;              int waitUntilMB = 4;  #else              int addSizeMB = 4; // reduce due to test in emulator              int waitUntilMB = 2;  #endif                Debug.WriteLine("FreePageSpace in cache: " + freeMB + "MB | " + freePages + " pages");                if(freeMB <= waitUntilMB)              {                 PreAllocateDB(db' addSizeMB);              }           }
Magic Number,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,CheckPreAllocation,The following statement contains a magic number: {              byte[] pageSizeBytes = new byte[2];              byte[] freePagesBytes = new byte[4];                lock(this)              {                 using(var dbf = File.Open(db' FileMode.Open' FileAccess.Read' FileShare.ReadWrite))                 {                    dbf.Seek(16' SeekOrigin.Begin);    #if (!PocketPC && !MONO)                    dbf.Lock(16' 2);                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Unlock(16' 2);                      dbf.Seek(36' SeekOrigin.Begin);                      dbf.Lock(36' 4);                    dbf.Read(freePagesBytes' 0' 4);                    dbf.Unlock(36' 4);  #else                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Seek(36' SeekOrigin.Begin);                    dbf.Read(freePagesBytes' 0' 4);  #endif                      dbf.Close();                 }              }                if(BitConverter.IsLittleEndian)              {                 Array.Reverse(pageSizeBytes);                 Array.Reverse(freePagesBytes);              }              UInt16 pageSize = BitConverter.ToUInt16(pageSizeBytes' 0);              UInt32 freePages = BitConverter.ToUInt32(freePagesBytes' 0);                var freeMB = (pageSize * freePages) / (1024.0 * 1024.0);    #if !PocketPC              int addSizeMB = 32;              int waitUntilMB = 4;  #else              int addSizeMB = 4; // reduce due to test in emulator              int waitUntilMB = 2;  #endif                Debug.WriteLine("FreePageSpace in cache: " + freeMB + "MB | " + freePages + " pages");                if(freeMB <= waitUntilMB)              {                 PreAllocateDB(db' addSizeMB);              }           }
Magic Number,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,CheckPreAllocation,The following statement contains a magic number: {              byte[] pageSizeBytes = new byte[2];              byte[] freePagesBytes = new byte[4];                lock(this)              {                 using(var dbf = File.Open(db' FileMode.Open' FileAccess.Read' FileShare.ReadWrite))                 {                    dbf.Seek(16' SeekOrigin.Begin);    #if (!PocketPC && !MONO)                    dbf.Lock(16' 2);                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Unlock(16' 2);                      dbf.Seek(36' SeekOrigin.Begin);                      dbf.Lock(36' 4);                    dbf.Read(freePagesBytes' 0' 4);                    dbf.Unlock(36' 4);  #else                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Seek(36' SeekOrigin.Begin);                    dbf.Read(freePagesBytes' 0' 4);  #endif                      dbf.Close();                 }              }                if(BitConverter.IsLittleEndian)              {                 Array.Reverse(pageSizeBytes);                 Array.Reverse(freePagesBytes);              }              UInt16 pageSize = BitConverter.ToUInt16(pageSizeBytes' 0);              UInt32 freePages = BitConverter.ToUInt32(freePagesBytes' 0);                var freeMB = (pageSize * freePages) / (1024.0 * 1024.0);    #if !PocketPC              int addSizeMB = 32;              int waitUntilMB = 4;  #else              int addSizeMB = 4; // reduce due to test in emulator              int waitUntilMB = 2;  #endif                Debug.WriteLine("FreePageSpace in cache: " + freeMB + "MB | " + freePages + " pages");                if(freeMB <= waitUntilMB)              {                 PreAllocateDB(db' addSizeMB);              }           }
Magic Number,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,CheckPreAllocation,The following statement contains a magic number: {              byte[] pageSizeBytes = new byte[2];              byte[] freePagesBytes = new byte[4];                lock(this)              {                 using(var dbf = File.Open(db' FileMode.Open' FileAccess.Read' FileShare.ReadWrite))                 {                    dbf.Seek(16' SeekOrigin.Begin);    #if (!PocketPC && !MONO)                    dbf.Lock(16' 2);                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Unlock(16' 2);                      dbf.Seek(36' SeekOrigin.Begin);                      dbf.Lock(36' 4);                    dbf.Read(freePagesBytes' 0' 4);                    dbf.Unlock(36' 4);  #else                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Seek(36' SeekOrigin.Begin);                    dbf.Read(freePagesBytes' 0' 4);  #endif                      dbf.Close();                 }              }                if(BitConverter.IsLittleEndian)              {                 Array.Reverse(pageSizeBytes);                 Array.Reverse(freePagesBytes);              }              UInt16 pageSize = BitConverter.ToUInt16(pageSizeBytes' 0);              UInt32 freePages = BitConverter.ToUInt32(freePagesBytes' 0);                var freeMB = (pageSize * freePages) / (1024.0 * 1024.0);    #if !PocketPC              int addSizeMB = 32;              int waitUntilMB = 4;  #else              int addSizeMB = 4; // reduce due to test in emulator              int waitUntilMB = 2;  #endif                Debug.WriteLine("FreePageSpace in cache: " + freeMB + "MB | " + freePages + " pages");                if(freeMB <= waitUntilMB)              {                 PreAllocateDB(db' addSizeMB);              }           }
Magic Number,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,CheckPreAllocation,The following statement contains a magic number: {              byte[] pageSizeBytes = new byte[2];              byte[] freePagesBytes = new byte[4];                lock(this)              {                 using(var dbf = File.Open(db' FileMode.Open' FileAccess.Read' FileShare.ReadWrite))                 {                    dbf.Seek(16' SeekOrigin.Begin);    #if (!PocketPC && !MONO)                    dbf.Lock(16' 2);                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Unlock(16' 2);                      dbf.Seek(36' SeekOrigin.Begin);                      dbf.Lock(36' 4);                    dbf.Read(freePagesBytes' 0' 4);                    dbf.Unlock(36' 4);  #else                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Seek(36' SeekOrigin.Begin);                    dbf.Read(freePagesBytes' 0' 4);  #endif                      dbf.Close();                 }              }                if(BitConverter.IsLittleEndian)              {                 Array.Reverse(pageSizeBytes);                 Array.Reverse(freePagesBytes);              }              UInt16 pageSize = BitConverter.ToUInt16(pageSizeBytes' 0);              UInt32 freePages = BitConverter.ToUInt32(freePagesBytes' 0);                var freeMB = (pageSize * freePages) / (1024.0 * 1024.0);    #if !PocketPC              int addSizeMB = 32;              int waitUntilMB = 4;  #else              int addSizeMB = 4; // reduce due to test in emulator              int waitUntilMB = 2;  #endif                Debug.WriteLine("FreePageSpace in cache: " + freeMB + "MB | " + freePages + " pages");                if(freeMB <= waitUntilMB)              {                 PreAllocateDB(db' addSizeMB);              }           }
Magic Number,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,CheckPreAllocation,The following statement contains a magic number: {              byte[] pageSizeBytes = new byte[2];              byte[] freePagesBytes = new byte[4];                lock(this)              {                 using(var dbf = File.Open(db' FileMode.Open' FileAccess.Read' FileShare.ReadWrite))                 {                    dbf.Seek(16' SeekOrigin.Begin);    #if (!PocketPC && !MONO)                    dbf.Lock(16' 2);                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Unlock(16' 2);                      dbf.Seek(36' SeekOrigin.Begin);                      dbf.Lock(36' 4);                    dbf.Read(freePagesBytes' 0' 4);                    dbf.Unlock(36' 4);  #else                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Seek(36' SeekOrigin.Begin);                    dbf.Read(freePagesBytes' 0' 4);  #endif                      dbf.Close();                 }              }                if(BitConverter.IsLittleEndian)              {                 Array.Reverse(pageSizeBytes);                 Array.Reverse(freePagesBytes);              }              UInt16 pageSize = BitConverter.ToUInt16(pageSizeBytes' 0);              UInt32 freePages = BitConverter.ToUInt32(freePagesBytes' 0);                var freeMB = (pageSize * freePages) / (1024.0 * 1024.0);    #if !PocketPC              int addSizeMB = 32;              int waitUntilMB = 4;  #else              int addSizeMB = 4; // reduce due to test in emulator              int waitUntilMB = 2;  #endif                Debug.WriteLine("FreePageSpace in cache: " + freeMB + "MB | " + freePages + " pages");                if(freeMB <= waitUntilMB)              {                 PreAllocateDB(db' addSizeMB);              }           }
Magic Number,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,CheckPreAllocation,The following statement contains a magic number: {              byte[] pageSizeBytes = new byte[2];              byte[] freePagesBytes = new byte[4];                lock(this)              {                 using(var dbf = File.Open(db' FileMode.Open' FileAccess.Read' FileShare.ReadWrite))                 {                    dbf.Seek(16' SeekOrigin.Begin);    #if (!PocketPC && !MONO)                    dbf.Lock(16' 2);                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Unlock(16' 2);                      dbf.Seek(36' SeekOrigin.Begin);                      dbf.Lock(36' 4);                    dbf.Read(freePagesBytes' 0' 4);                    dbf.Unlock(36' 4);  #else                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Seek(36' SeekOrigin.Begin);                    dbf.Read(freePagesBytes' 0' 4);  #endif                      dbf.Close();                 }              }                if(BitConverter.IsLittleEndian)              {                 Array.Reverse(pageSizeBytes);                 Array.Reverse(freePagesBytes);              }              UInt16 pageSize = BitConverter.ToUInt16(pageSizeBytes' 0);              UInt32 freePages = BitConverter.ToUInt32(freePagesBytes' 0);                var freeMB = (pageSize * freePages) / (1024.0 * 1024.0);    #if !PocketPC              int addSizeMB = 32;              int waitUntilMB = 4;  #else              int addSizeMB = 4; // reduce due to test in emulator              int waitUntilMB = 2;  #endif                Debug.WriteLine("FreePageSpace in cache: " + freeMB + "MB | " + freePages + " pages");                if(freeMB <= waitUntilMB)              {                 PreAllocateDB(db' addSizeMB);              }           }
Magic Number,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,CheckPreAllocation,The following statement contains a magic number: {              byte[] pageSizeBytes = new byte[2];              byte[] freePagesBytes = new byte[4];                lock(this)              {                 using(var dbf = File.Open(db' FileMode.Open' FileAccess.Read' FileShare.ReadWrite))                 {                    dbf.Seek(16' SeekOrigin.Begin);    #if (!PocketPC && !MONO)                    dbf.Lock(16' 2);                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Unlock(16' 2);                      dbf.Seek(36' SeekOrigin.Begin);                      dbf.Lock(36' 4);                    dbf.Read(freePagesBytes' 0' 4);                    dbf.Unlock(36' 4);  #else                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Seek(36' SeekOrigin.Begin);                    dbf.Read(freePagesBytes' 0' 4);  #endif                      dbf.Close();                 }              }                if(BitConverter.IsLittleEndian)              {                 Array.Reverse(pageSizeBytes);                 Array.Reverse(freePagesBytes);              }              UInt16 pageSize = BitConverter.ToUInt16(pageSizeBytes' 0);              UInt32 freePages = BitConverter.ToUInt32(freePagesBytes' 0);                var freeMB = (pageSize * freePages) / (1024.0 * 1024.0);    #if !PocketPC              int addSizeMB = 32;              int waitUntilMB = 4;  #else              int addSizeMB = 4; // reduce due to test in emulator              int waitUntilMB = 2;  #endif                Debug.WriteLine("FreePageSpace in cache: " + freeMB + "MB | " + freePages + " pages");                if(freeMB <= waitUntilMB)              {                 PreAllocateDB(db' addSizeMB);              }           }
Magic Number,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,CheckPreAllocation,The following statement contains a magic number: {              byte[] pageSizeBytes = new byte[2];              byte[] freePagesBytes = new byte[4];                lock(this)              {                 using(var dbf = File.Open(db' FileMode.Open' FileAccess.Read' FileShare.ReadWrite))                 {                    dbf.Seek(16' SeekOrigin.Begin);    #if (!PocketPC && !MONO)                    dbf.Lock(16' 2);                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Unlock(16' 2);                      dbf.Seek(36' SeekOrigin.Begin);                      dbf.Lock(36' 4);                    dbf.Read(freePagesBytes' 0' 4);                    dbf.Unlock(36' 4);  #else                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Seek(36' SeekOrigin.Begin);                    dbf.Read(freePagesBytes' 0' 4);  #endif                      dbf.Close();                 }              }                if(BitConverter.IsLittleEndian)              {                 Array.Reverse(pageSizeBytes);                 Array.Reverse(freePagesBytes);              }              UInt16 pageSize = BitConverter.ToUInt16(pageSizeBytes' 0);              UInt32 freePages = BitConverter.ToUInt32(freePagesBytes' 0);                var freeMB = (pageSize * freePages) / (1024.0 * 1024.0);    #if !PocketPC              int addSizeMB = 32;              int waitUntilMB = 4;  #else              int addSizeMB = 4; // reduce due to test in emulator              int waitUntilMB = 2;  #endif                Debug.WriteLine("FreePageSpace in cache: " + freeMB + "MB | " + freePages + " pages");                if(freeMB <= waitUntilMB)              {                 PreAllocateDB(db' addSizeMB);              }           }
Magic Number,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,CheckPreAllocation,The following statement contains a magic number: {              byte[] pageSizeBytes = new byte[2];              byte[] freePagesBytes = new byte[4];                lock(this)              {                 using(var dbf = File.Open(db' FileMode.Open' FileAccess.Read' FileShare.ReadWrite))                 {                    dbf.Seek(16' SeekOrigin.Begin);    #if (!PocketPC && !MONO)                    dbf.Lock(16' 2);                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Unlock(16' 2);                      dbf.Seek(36' SeekOrigin.Begin);                      dbf.Lock(36' 4);                    dbf.Read(freePagesBytes' 0' 4);                    dbf.Unlock(36' 4);  #else                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Seek(36' SeekOrigin.Begin);                    dbf.Read(freePagesBytes' 0' 4);  #endif                      dbf.Close();                 }              }                if(BitConverter.IsLittleEndian)              {                 Array.Reverse(pageSizeBytes);                 Array.Reverse(freePagesBytes);              }              UInt16 pageSize = BitConverter.ToUInt16(pageSizeBytes' 0);              UInt32 freePages = BitConverter.ToUInt32(freePagesBytes' 0);                var freeMB = (pageSize * freePages) / (1024.0 * 1024.0);    #if !PocketPC              int addSizeMB = 32;              int waitUntilMB = 4;  #else              int addSizeMB = 4; // reduce due to test in emulator              int waitUntilMB = 2;  #endif                Debug.WriteLine("FreePageSpace in cache: " + freeMB + "MB | " + freePages + " pages");                if(freeMB <= waitUntilMB)              {                 PreAllocateDB(db' addSizeMB);              }           }
Magic Number,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,CheckPreAllocation,The following statement contains a magic number: {              byte[] pageSizeBytes = new byte[2];              byte[] freePagesBytes = new byte[4];                lock(this)              {                 using(var dbf = File.Open(db' FileMode.Open' FileAccess.Read' FileShare.ReadWrite))                 {                    dbf.Seek(16' SeekOrigin.Begin);    #if (!PocketPC && !MONO)                    dbf.Lock(16' 2);                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Unlock(16' 2);                      dbf.Seek(36' SeekOrigin.Begin);                      dbf.Lock(36' 4);                    dbf.Read(freePagesBytes' 0' 4);                    dbf.Unlock(36' 4);  #else                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Seek(36' SeekOrigin.Begin);                    dbf.Read(freePagesBytes' 0' 4);  #endif                      dbf.Close();                 }              }                if(BitConverter.IsLittleEndian)              {                 Array.Reverse(pageSizeBytes);                 Array.Reverse(freePagesBytes);              }              UInt16 pageSize = BitConverter.ToUInt16(pageSizeBytes' 0);              UInt32 freePages = BitConverter.ToUInt32(freePagesBytes' 0);                var freeMB = (pageSize * freePages) / (1024.0 * 1024.0);    #if !PocketPC              int addSizeMB = 32;              int waitUntilMB = 4;  #else              int addSizeMB = 4; // reduce due to test in emulator              int waitUntilMB = 2;  #endif                Debug.WriteLine("FreePageSpace in cache: " + freeMB + "MB | " + freePages + " pages");                if(freeMB <= waitUntilMB)              {                 PreAllocateDB(db' addSizeMB);              }           }
Magic Number,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,CheckPreAllocation,The following statement contains a magic number: {              byte[] pageSizeBytes = new byte[2];              byte[] freePagesBytes = new byte[4];                lock(this)              {                 using(var dbf = File.Open(db' FileMode.Open' FileAccess.Read' FileShare.ReadWrite))                 {                    dbf.Seek(16' SeekOrigin.Begin);    #if (!PocketPC && !MONO)                    dbf.Lock(16' 2);                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Unlock(16' 2);                      dbf.Seek(36' SeekOrigin.Begin);                      dbf.Lock(36' 4);                    dbf.Read(freePagesBytes' 0' 4);                    dbf.Unlock(36' 4);  #else                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Seek(36' SeekOrigin.Begin);                    dbf.Read(freePagesBytes' 0' 4);  #endif                      dbf.Close();                 }              }                if(BitConverter.IsLittleEndian)              {                 Array.Reverse(pageSizeBytes);                 Array.Reverse(freePagesBytes);              }              UInt16 pageSize = BitConverter.ToUInt16(pageSizeBytes' 0);              UInt32 freePages = BitConverter.ToUInt32(freePagesBytes' 0);                var freeMB = (pageSize * freePages) / (1024.0 * 1024.0);    #if !PocketPC              int addSizeMB = 32;              int waitUntilMB = 4;  #else              int addSizeMB = 4; // reduce due to test in emulator              int waitUntilMB = 2;  #endif                Debug.WriteLine("FreePageSpace in cache: " + freeMB + "MB | " + freePages + " pages");                if(freeMB <= waitUntilMB)              {                 PreAllocateDB(db' addSizeMB);              }           }
Magic Number,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,CheckPreAllocation,The following statement contains a magic number: {              byte[] pageSizeBytes = new byte[2];              byte[] freePagesBytes = new byte[4];                lock(this)              {                 using(var dbf = File.Open(db' FileMode.Open' FileAccess.Read' FileShare.ReadWrite))                 {                    dbf.Seek(16' SeekOrigin.Begin);    #if (!PocketPC && !MONO)                    dbf.Lock(16' 2);                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Unlock(16' 2);                      dbf.Seek(36' SeekOrigin.Begin);                      dbf.Lock(36' 4);                    dbf.Read(freePagesBytes' 0' 4);                    dbf.Unlock(36' 4);  #else                    dbf.Read(pageSizeBytes' 0' 2);                    dbf.Seek(36' SeekOrigin.Begin);                    dbf.Read(freePagesBytes' 0' 4);  #endif                      dbf.Close();                 }              }                if(BitConverter.IsLittleEndian)              {                 Array.Reverse(pageSizeBytes);                 Array.Reverse(freePagesBytes);              }              UInt16 pageSize = BitConverter.ToUInt16(pageSizeBytes' 0);              UInt32 freePages = BitConverter.ToUInt32(freePagesBytes' 0);                var freeMB = (pageSize * freePages) / (1024.0 * 1024.0);    #if !PocketPC              int addSizeMB = 32;              int waitUntilMB = 4;  #else              int addSizeMB = 4; // reduce due to test in emulator              int waitUntilMB = 2;  #endif                Debug.WriteLine("FreePageSpace in cache: " + freeMB + "MB | " + freePages + " pages");                if(freeMB <= waitUntilMB)              {                 PreAllocateDB(db' addSizeMB);              }           }
Magic Number,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,PreAllocateDB,The following statement contains a magic number: try           {              Debug.WriteLine("PreAllocateDB: " + file + "' +" + addSizeInMBytes + "MB");                using(SQLiteConnection cn = new SQLiteConnection())              {  #if !MONO                 cn.ConnectionString = string.Format("Data Source=\"{0}\";FailIfMissing=False;Page Size=32768"' file);  #else                 cn.ConnectionString = string.Format("Version=3'URI=file://{0}'FailIfMissing=False'Page Size=32768"' file);  #endif                 cn.Open();                 {                    using(DbTransaction tr = cn.BeginTransaction())                    {                       try                       {                          using(DbCommand cmd = cn.CreateCommand())                          {                             cmd.Transaction = tr;                             cmd.CommandText = string.Format("create table large (a); insert into large values (zeroblob({0})); drop table large;"' addSizeInMBytes * 1024 * 1024);                             cmd.ExecuteNonQuery();                          }                          tr.Commit();                       }                       catch(Exception exx)                       {  #if MONO                          Console.WriteLine("PreAllocateDB: " + exx.ToString());  #endif                          Debug.WriteLine("PreAllocateDB: " + exx.ToString());                            tr.Rollback();                          ret = false;                       }                    }                    cn.Close();                 }              }           }           catch(Exception ex)           {  #if MONO              Console.WriteLine("PreAllocateDB: " + ex.ToString());  #endif              Debug.WriteLine("PreAllocateDB: " + ex.ToString());              ret = false;           }
Magic Number,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,PreAllocateDB,The following statement contains a magic number: try           {              Debug.WriteLine("PreAllocateDB: " + file + "' +" + addSizeInMBytes + "MB");                using(SQLiteConnection cn = new SQLiteConnection())              {  #if !MONO                 cn.ConnectionString = string.Format("Data Source=\"{0}\";FailIfMissing=False;Page Size=32768"' file);  #else                 cn.ConnectionString = string.Format("Version=3'URI=file://{0}'FailIfMissing=False'Page Size=32768"' file);  #endif                 cn.Open();                 {                    using(DbTransaction tr = cn.BeginTransaction())                    {                       try                       {                          using(DbCommand cmd = cn.CreateCommand())                          {                             cmd.Transaction = tr;                             cmd.CommandText = string.Format("create table large (a); insert into large values (zeroblob({0})); drop table large;"' addSizeInMBytes * 1024 * 1024);                             cmd.ExecuteNonQuery();                          }                          tr.Commit();                       }                       catch(Exception exx)                       {  #if MONO                          Console.WriteLine("PreAllocateDB: " + exx.ToString());  #endif                          Debug.WriteLine("PreAllocateDB: " + exx.ToString());                            tr.Rollback();                          ret = false;                       }                    }                    cn.Close();                 }              }           }           catch(Exception ex)           {  #if MONO              Console.WriteLine("PreAllocateDB: " + ex.ToString());  #endif              Debug.WriteLine("PreAllocateDB: " + ex.ToString());              ret = false;           }
Magic Number,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,ExportMapDataToDB,The following statement contains a magic number: try           {              if(!File.Exists(destFile))              {                 ret = CreateEmptyDB(destFile);              }                if(ret)              {                 using(SQLiteConnection cn1 = new SQLiteConnection())                 {  #if !MONO                    cn1.ConnectionString = string.Format("Data Source=\"{0}\";Page Size=32768"' sourceFile);  #else                    cn1.ConnectionString = string.Format("Version=3'URI=file://{0}'FailIfMissing=True'Page Size=32768"' sourceFile);  #endif                      cn1.Open();                    if(cn1.State == System.Data.ConnectionState.Open)                    {                       using(SQLiteConnection cn2 = new SQLiteConnection())                       {  #if !MONO                          cn2.ConnectionString = string.Format("Data Source=\"{0}\";Page Size=32768"' destFile);  #else                          cn2.ConnectionString = string.Format("Version=3'URI=file://{0}'FailIfMissing=True'Page Size=32768"' destFile);  #endif                          cn2.Open();                          if(cn2.State == System.Data.ConnectionState.Open)                          {                             using(SQLiteCommand cmd = new SQLiteCommand(string.Format("ATTACH DATABASE \"{0}\" AS Source"' sourceFile)' cn2))                             {                                cmd.ExecuteNonQuery();                             }                               using(SQLiteTransaction tr = cn2.BeginTransaction())                             {                                try                                {                                   List<long> add = new List<long>();                                   using(SQLiteCommand cmd = new SQLiteCommand("SELECT id' X' Y' Zoom' Type FROM Tiles;"' cn1))                                   {                                      using(SQLiteDataReader rd = cmd.ExecuteReader())                                      {                                         while(rd.Read())                                         {                                            long id = rd.GetInt64(0);                                            using(SQLiteCommand cmd2 = new SQLiteCommand(string.Format("SELECT id FROM Tiles WHERE X={0} AND Y={1} AND Zoom={2} AND Type={3};"' rd.GetInt32(1)' rd.GetInt32(2)' rd.GetInt32(3)' rd.GetInt32(4))' cn2))                                            {                                               using(SQLiteDataReader rd2 = cmd2.ExecuteReader())                                               {                                                  if(!rd2.Read())                                                  {                                                     add.Add(id);                                                  }                                               }                                            }                                         }                                      }                                   }                                     foreach(long id in add)                                   {                                      using(SQLiteCommand cmd = new SQLiteCommand(string.Format("INSERT INTO Tiles(X' Y' Zoom' Type' CacheTime) SELECT X' Y' Zoom' Type' CacheTime FROM Source.Tiles WHERE id={0}; INSERT INTO TilesData(id' Tile) Values((SELECT last_insert_rowid())' (SELECT Tile FROM Source.TilesData WHERE id={0}));"' id)' cn2))                                      {                                         cmd.Transaction = tr;                                         cmd.ExecuteNonQuery();                                      }                                   }                                   add.Clear();                                     tr.Commit();                                }                                catch(Exception exx)                                {                                   Debug.WriteLine("ExportMapDataToDB: " + exx.ToString());                                   tr.Rollback();                                   ret = false;                                }                             }                               using(SQLiteCommand cmd = new SQLiteCommand("DETACH DATABASE Source;"' cn2))                             {                                cmd.ExecuteNonQuery();                             }                          }                       }                    }                 }              }           }           catch(Exception ex)           {              Debug.WriteLine("ExportMapDataToDB: " + ex.ToString());              ret = false;           }
Magic Number,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,ExportMapDataToDB,The following statement contains a magic number: try           {              if(!File.Exists(destFile))              {                 ret = CreateEmptyDB(destFile);              }                if(ret)              {                 using(SQLiteConnection cn1 = new SQLiteConnection())                 {  #if !MONO                    cn1.ConnectionString = string.Format("Data Source=\"{0}\";Page Size=32768"' sourceFile);  #else                    cn1.ConnectionString = string.Format("Version=3'URI=file://{0}'FailIfMissing=True'Page Size=32768"' sourceFile);  #endif                      cn1.Open();                    if(cn1.State == System.Data.ConnectionState.Open)                    {                       using(SQLiteConnection cn2 = new SQLiteConnection())                       {  #if !MONO                          cn2.ConnectionString = string.Format("Data Source=\"{0}\";Page Size=32768"' destFile);  #else                          cn2.ConnectionString = string.Format("Version=3'URI=file://{0}'FailIfMissing=True'Page Size=32768"' destFile);  #endif                          cn2.Open();                          if(cn2.State == System.Data.ConnectionState.Open)                          {                             using(SQLiteCommand cmd = new SQLiteCommand(string.Format("ATTACH DATABASE \"{0}\" AS Source"' sourceFile)' cn2))                             {                                cmd.ExecuteNonQuery();                             }                               using(SQLiteTransaction tr = cn2.BeginTransaction())                             {                                try                                {                                   List<long> add = new List<long>();                                   using(SQLiteCommand cmd = new SQLiteCommand("SELECT id' X' Y' Zoom' Type FROM Tiles;"' cn1))                                   {                                      using(SQLiteDataReader rd = cmd.ExecuteReader())                                      {                                         while(rd.Read())                                         {                                            long id = rd.GetInt64(0);                                            using(SQLiteCommand cmd2 = new SQLiteCommand(string.Format("SELECT id FROM Tiles WHERE X={0} AND Y={1} AND Zoom={2} AND Type={3};"' rd.GetInt32(1)' rd.GetInt32(2)' rd.GetInt32(3)' rd.GetInt32(4))' cn2))                                            {                                               using(SQLiteDataReader rd2 = cmd2.ExecuteReader())                                               {                                                  if(!rd2.Read())                                                  {                                                     add.Add(id);                                                  }                                               }                                            }                                         }                                      }                                   }                                     foreach(long id in add)                                   {                                      using(SQLiteCommand cmd = new SQLiteCommand(string.Format("INSERT INTO Tiles(X' Y' Zoom' Type' CacheTime) SELECT X' Y' Zoom' Type' CacheTime FROM Source.Tiles WHERE id={0}; INSERT INTO TilesData(id' Tile) Values((SELECT last_insert_rowid())' (SELECT Tile FROM Source.TilesData WHERE id={0}));"' id)' cn2))                                      {                                         cmd.Transaction = tr;                                         cmd.ExecuteNonQuery();                                      }                                   }                                   add.Clear();                                     tr.Commit();                                }                                catch(Exception exx)                                {                                   Debug.WriteLine("ExportMapDataToDB: " + exx.ToString());                                   tr.Rollback();                                   ret = false;                                }                             }                               using(SQLiteCommand cmd = new SQLiteCommand("DETACH DATABASE Source;"' cn2))                             {                                cmd.ExecuteNonQuery();                             }                          }                       }                    }                 }              }           }           catch(Exception ex)           {              Debug.WriteLine("ExportMapDataToDB: " + ex.ToString());              ret = false;           }
Magic Number,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,ExportMapDataToDB,The following statement contains a magic number: try           {              if(!File.Exists(destFile))              {                 ret = CreateEmptyDB(destFile);              }                if(ret)              {                 using(SQLiteConnection cn1 = new SQLiteConnection())                 {  #if !MONO                    cn1.ConnectionString = string.Format("Data Source=\"{0}\";Page Size=32768"' sourceFile);  #else                    cn1.ConnectionString = string.Format("Version=3'URI=file://{0}'FailIfMissing=True'Page Size=32768"' sourceFile);  #endif                      cn1.Open();                    if(cn1.State == System.Data.ConnectionState.Open)                    {                       using(SQLiteConnection cn2 = new SQLiteConnection())                       {  #if !MONO                          cn2.ConnectionString = string.Format("Data Source=\"{0}\";Page Size=32768"' destFile);  #else                          cn2.ConnectionString = string.Format("Version=3'URI=file://{0}'FailIfMissing=True'Page Size=32768"' destFile);  #endif                          cn2.Open();                          if(cn2.State == System.Data.ConnectionState.Open)                          {                             using(SQLiteCommand cmd = new SQLiteCommand(string.Format("ATTACH DATABASE \"{0}\" AS Source"' sourceFile)' cn2))                             {                                cmd.ExecuteNonQuery();                             }                               using(SQLiteTransaction tr = cn2.BeginTransaction())                             {                                try                                {                                   List<long> add = new List<long>();                                   using(SQLiteCommand cmd = new SQLiteCommand("SELECT id' X' Y' Zoom' Type FROM Tiles;"' cn1))                                   {                                      using(SQLiteDataReader rd = cmd.ExecuteReader())                                      {                                         while(rd.Read())                                         {                                            long id = rd.GetInt64(0);                                            using(SQLiteCommand cmd2 = new SQLiteCommand(string.Format("SELECT id FROM Tiles WHERE X={0} AND Y={1} AND Zoom={2} AND Type={3};"' rd.GetInt32(1)' rd.GetInt32(2)' rd.GetInt32(3)' rd.GetInt32(4))' cn2))                                            {                                               using(SQLiteDataReader rd2 = cmd2.ExecuteReader())                                               {                                                  if(!rd2.Read())                                                  {                                                     add.Add(id);                                                  }                                               }                                            }                                         }                                      }                                   }                                     foreach(long id in add)                                   {                                      using(SQLiteCommand cmd = new SQLiteCommand(string.Format("INSERT INTO Tiles(X' Y' Zoom' Type' CacheTime) SELECT X' Y' Zoom' Type' CacheTime FROM Source.Tiles WHERE id={0}; INSERT INTO TilesData(id' Tile) Values((SELECT last_insert_rowid())' (SELECT Tile FROM Source.TilesData WHERE id={0}));"' id)' cn2))                                      {                                         cmd.Transaction = tr;                                         cmd.ExecuteNonQuery();                                      }                                   }                                   add.Clear();                                     tr.Commit();                                }                                catch(Exception exx)                                {                                   Debug.WriteLine("ExportMapDataToDB: " + exx.ToString());                                   tr.Rollback();                                   ret = false;                                }                             }                               using(SQLiteCommand cmd = new SQLiteCommand("DETACH DATABASE Source;"' cn2))                             {                                cmd.ExecuteNonQuery();                             }                          }                       }                    }                 }              }           }           catch(Exception ex)           {              Debug.WriteLine("ExportMapDataToDB: " + ex.ToString());              ret = false;           }
Magic Number,GMap.NET.CacheProviders,SQLitePureImageCache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.CacheProviders\SQLitePureImageCache.cs,PutImageToCache,The following statement contains a magic number: if(Created)           {              try              {                 using(SQLiteConnection cn = new SQLiteConnection())                 {                    cn.ConnectionString = ConnectionString;                    cn.Open();                    {                       using(DbTransaction tr = cn.BeginTransaction())                       {                          try                          {                             using(DbCommand cmd = cn.CreateCommand())                             {                                cmd.Transaction = tr;                                cmd.CommandText = singleSqlInsert;                                  cmd.Parameters.Add(new SQLiteParameter("@p1"' pos.X));                                cmd.Parameters.Add(new SQLiteParameter("@p2"' pos.Y));                                cmd.Parameters.Add(new SQLiteParameter("@p3"' zoom));                                cmd.Parameters.Add(new SQLiteParameter("@p4"' type));                                cmd.Parameters.Add(new SQLiteParameter("@p5"' DateTime.Now));                                  cmd.ExecuteNonQuery();                             }                               using(DbCommand cmd = cn.CreateCommand())                             {                                cmd.Transaction = tr;                                  cmd.CommandText = singleSqlInsertLast;                                cmd.Parameters.Add(new SQLiteParameter("@p1"' tile));                                  cmd.ExecuteNonQuery();                             }                             tr.Commit();                          }                          catch(Exception ex)                          {  #if MONO                             Console.WriteLine("PutImageToCache: " + ex.ToString());  #endif                             Debug.WriteLine("PutImageToCache: " + ex.ToString());                               tr.Rollback();                             ret = false;                          }                       }                    }                    cn.Close();                 }                   if(Interlocked.Increment(ref preAllocationPing) % 22 == 0)                 {                    CheckPreAllocation();                 }              }              catch(Exception ex)              {  #if MONO                 Console.WriteLine("PutImageToCache: " + ex.ToString());  #endif                 Debug.WriteLine("PutImageToCache: " + ex.ToString());                 ret = false;              }           }
Magic Number,GMap.NET.Internals,SocksHttpWebRequest,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\SocksHttpWebRequest.cs,InternalGetResponse,The following statement contains a magic number: using (var _socksConnection = new ProxySocket(AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp))              {                  var proxyUri = Proxy.GetProxy(RequestUri);                  var ipAddress = GetProxyIpAddress(proxyUri);                  _socksConnection.ProxyEndPoint = new IPEndPoint(ipAddress' proxyUri.Port);                  _socksConnection.ProxyType = ProxyTypes.Socks5;                    // open connection                  _socksConnection.Connect(RequestUri.Host' 80);                    // send an HTTP request                  _socksConnection.Send(Encoding.UTF8.GetBytes(RequestMessage));                    // read the HTTP reply                  var buffer = new byte[1024 * 4];                  int bytesReceived = 0;                  bool headerDone = false;                    while ((bytesReceived = _socksConnection.Receive(buffer)) > 0)                  {                      if (!headerDone)                      {                          var headPart = Encoding.UTF8.GetString(buffer' 0' bytesReceived > 1024 ? 1024 : bytesReceived);                          var indexOfFirstBlankLine = headPart.IndexOf("\r\n\r\n");                          if (indexOfFirstBlankLine > 0)                          {                              headPart = headPart.Substring(0' indexOfFirstBlankLine);                              header += headPart;                              headerDone = true;                                var headerPartLength = Encoding.UTF8.GetByteCount(headPart) + 4;                                // 0123456789                              //   ----                              if (headerPartLength < bytesReceived)                              {                                  data = new MemoryStream();                                  data.Write(buffer' headerPartLength' bytesReceived - headerPartLength);                              }                          }                          else                          {                              header += headPart;                          }                      }                      else                      {                          if (data == null)                          {                              data = new MemoryStream();                          }                          data.Write(buffer' 0' bytesReceived);                      }                  }                    if (data != null)                  {                      data.Position = 0;                  }              }
Magic Number,GMap.NET.Internals,SocksHttpWebRequest,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\SocksHttpWebRequest.cs,InternalGetResponse,The following statement contains a magic number: using (var _socksConnection = new ProxySocket(AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp))              {                  var proxyUri = Proxy.GetProxy(RequestUri);                  var ipAddress = GetProxyIpAddress(proxyUri);                  _socksConnection.ProxyEndPoint = new IPEndPoint(ipAddress' proxyUri.Port);                  _socksConnection.ProxyType = ProxyTypes.Socks5;                    // open connection                  _socksConnection.Connect(RequestUri.Host' 80);                    // send an HTTP request                  _socksConnection.Send(Encoding.UTF8.GetBytes(RequestMessage));                    // read the HTTP reply                  var buffer = new byte[1024 * 4];                  int bytesReceived = 0;                  bool headerDone = false;                    while ((bytesReceived = _socksConnection.Receive(buffer)) > 0)                  {                      if (!headerDone)                      {                          var headPart = Encoding.UTF8.GetString(buffer' 0' bytesReceived > 1024 ? 1024 : bytesReceived);                          var indexOfFirstBlankLine = headPart.IndexOf("\r\n\r\n");                          if (indexOfFirstBlankLine > 0)                          {                              headPart = headPart.Substring(0' indexOfFirstBlankLine);                              header += headPart;                              headerDone = true;                                var headerPartLength = Encoding.UTF8.GetByteCount(headPart) + 4;                                // 0123456789                              //   ----                              if (headerPartLength < bytesReceived)                              {                                  data = new MemoryStream();                                  data.Write(buffer' headerPartLength' bytesReceived - headerPartLength);                              }                          }                          else                          {                              header += headPart;                          }                      }                      else                      {                          if (data == null)                          {                              data = new MemoryStream();                          }                          data.Write(buffer' 0' bytesReceived);                      }                  }                    if (data != null)                  {                      data.Position = 0;                  }              }
Magic Number,GMap.NET.Internals,SocksHttpWebRequest,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\SocksHttpWebRequest.cs,InternalGetResponse,The following statement contains a magic number: using (var _socksConnection = new ProxySocket(AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp))              {                  var proxyUri = Proxy.GetProxy(RequestUri);                  var ipAddress = GetProxyIpAddress(proxyUri);                  _socksConnection.ProxyEndPoint = new IPEndPoint(ipAddress' proxyUri.Port);                  _socksConnection.ProxyType = ProxyTypes.Socks5;                    // open connection                  _socksConnection.Connect(RequestUri.Host' 80);                    // send an HTTP request                  _socksConnection.Send(Encoding.UTF8.GetBytes(RequestMessage));                    // read the HTTP reply                  var buffer = new byte[1024 * 4];                  int bytesReceived = 0;                  bool headerDone = false;                    while ((bytesReceived = _socksConnection.Receive(buffer)) > 0)                  {                      if (!headerDone)                      {                          var headPart = Encoding.UTF8.GetString(buffer' 0' bytesReceived > 1024 ? 1024 : bytesReceived);                          var indexOfFirstBlankLine = headPart.IndexOf("\r\n\r\n");                          if (indexOfFirstBlankLine > 0)                          {                              headPart = headPart.Substring(0' indexOfFirstBlankLine);                              header += headPart;                              headerDone = true;                                var headerPartLength = Encoding.UTF8.GetByteCount(headPart) + 4;                                // 0123456789                              //   ----                              if (headerPartLength < bytesReceived)                              {                                  data = new MemoryStream();                                  data.Write(buffer' headerPartLength' bytesReceived - headerPartLength);                              }                          }                          else                          {                              header += headPart;                          }                      }                      else                      {                          if (data == null)                          {                              data = new MemoryStream();                          }                          data.Write(buffer' 0' bytesReceived);                      }                  }                    if (data != null)                  {                      data.Position = 0;                  }              }
Magic Number,GMap.NET.Internals,SocksHttpWebRequest,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\SocksHttpWebRequest.cs,InternalGetResponse,The following statement contains a magic number: using (var _socksConnection = new ProxySocket(AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp))              {                  var proxyUri = Proxy.GetProxy(RequestUri);                  var ipAddress = GetProxyIpAddress(proxyUri);                  _socksConnection.ProxyEndPoint = new IPEndPoint(ipAddress' proxyUri.Port);                  _socksConnection.ProxyType = ProxyTypes.Socks5;                    // open connection                  _socksConnection.Connect(RequestUri.Host' 80);                    // send an HTTP request                  _socksConnection.Send(Encoding.UTF8.GetBytes(RequestMessage));                    // read the HTTP reply                  var buffer = new byte[1024 * 4];                  int bytesReceived = 0;                  bool headerDone = false;                    while ((bytesReceived = _socksConnection.Receive(buffer)) > 0)                  {                      if (!headerDone)                      {                          var headPart = Encoding.UTF8.GetString(buffer' 0' bytesReceived > 1024 ? 1024 : bytesReceived);                          var indexOfFirstBlankLine = headPart.IndexOf("\r\n\r\n");                          if (indexOfFirstBlankLine > 0)                          {                              headPart = headPart.Substring(0' indexOfFirstBlankLine);                              header += headPart;                              headerDone = true;                                var headerPartLength = Encoding.UTF8.GetByteCount(headPart) + 4;                                // 0123456789                              //   ----                              if (headerPartLength < bytesReceived)                              {                                  data = new MemoryStream();                                  data.Write(buffer' headerPartLength' bytesReceived - headerPartLength);                              }                          }                          else                          {                              header += headPart;                          }                      }                      else                      {                          if (data == null)                          {                              data = new MemoryStream();                          }                          data.Write(buffer' 0' bytesReceived);                      }                  }                    if (data != null)                  {                      data.Position = 0;                  }              }
Magic Number,GMap.NET.Internals,SocksHttpWebRequest,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\SocksHttpWebRequest.cs,InternalGetResponse,The following statement contains a magic number: using (var _socksConnection = new ProxySocket(AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp))              {                  var proxyUri = Proxy.GetProxy(RequestUri);                  var ipAddress = GetProxyIpAddress(proxyUri);                  _socksConnection.ProxyEndPoint = new IPEndPoint(ipAddress' proxyUri.Port);                  _socksConnection.ProxyType = ProxyTypes.Socks5;                    // open connection                  _socksConnection.Connect(RequestUri.Host' 80);                    // send an HTTP request                  _socksConnection.Send(Encoding.UTF8.GetBytes(RequestMessage));                    // read the HTTP reply                  var buffer = new byte[1024 * 4];                  int bytesReceived = 0;                  bool headerDone = false;                    while ((bytesReceived = _socksConnection.Receive(buffer)) > 0)                  {                      if (!headerDone)                      {                          var headPart = Encoding.UTF8.GetString(buffer' 0' bytesReceived > 1024 ? 1024 : bytesReceived);                          var indexOfFirstBlankLine = headPart.IndexOf("\r\n\r\n");                          if (indexOfFirstBlankLine > 0)                          {                              headPart = headPart.Substring(0' indexOfFirstBlankLine);                              header += headPart;                              headerDone = true;                                var headerPartLength = Encoding.UTF8.GetByteCount(headPart) + 4;                                // 0123456789                              //   ----                              if (headerPartLength < bytesReceived)                              {                                  data = new MemoryStream();                                  data.Write(buffer' headerPartLength' bytesReceived - headerPartLength);                              }                          }                          else                          {                              header += headPart;                          }                      }                      else                      {                          if (data == null)                          {                              data = new MemoryStream();                          }                          data.Write(buffer' 0' bytesReceived);                      }                  }                    if (data != null)                  {                      data.Position = 0;                  }              }
Magic Number,GMap.NET.Internals,SocksHttpWebRequest,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\SocksHttpWebRequest.cs,InternalGetResponse,The following statement contains a magic number: using (var _socksConnection = new ProxySocket(AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp))              {                  var proxyUri = Proxy.GetProxy(RequestUri);                  var ipAddress = GetProxyIpAddress(proxyUri);                  _socksConnection.ProxyEndPoint = new IPEndPoint(ipAddress' proxyUri.Port);                  _socksConnection.ProxyType = ProxyTypes.Socks5;                    // open connection                  _socksConnection.Connect(RequestUri.Host' 80);                    // send an HTTP request                  _socksConnection.Send(Encoding.UTF8.GetBytes(RequestMessage));                    // read the HTTP reply                  var buffer = new byte[1024 * 4];                  int bytesReceived = 0;                  bool headerDone = false;                    while ((bytesReceived = _socksConnection.Receive(buffer)) > 0)                  {                      if (!headerDone)                      {                          var headPart = Encoding.UTF8.GetString(buffer' 0' bytesReceived > 1024 ? 1024 : bytesReceived);                          var indexOfFirstBlankLine = headPart.IndexOf("\r\n\r\n");                          if (indexOfFirstBlankLine > 0)                          {                              headPart = headPart.Substring(0' indexOfFirstBlankLine);                              header += headPart;                              headerDone = true;                                var headerPartLength = Encoding.UTF8.GetByteCount(headPart) + 4;                                // 0123456789                              //   ----                              if (headerPartLength < bytesReceived)                              {                                  data = new MemoryStream();                                  data.Write(buffer' headerPartLength' bytesReceived - headerPartLength);                              }                          }                          else                          {                              header += headPart;                          }                      }                      else                      {                          if (data == null)                          {                              data = new MemoryStream();                          }                          data.Write(buffer' 0' bytesReceived);                      }                  }                    if (data != null)                  {                      data.Position = 0;                  }              }
Magic Number,GMap.NET.Internals,FastResourceLock,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\FastResourceLock.cs,SpinAcquireExclusive,The following statement contains a magic number: while(true)           {              value = _value;                if((value & (LockOwned | LockExclusiveWaking)) == 0)              {                 if(Interlocked.CompareExchange(                     ref _value'                     value + LockOwned'                     value                     ) == value)                    break;              }                if(NativeMethods.SpinEnabled)                 Thread.SpinWait(8);              else                 Thread.Sleep(0);           }
Magic Number,GMap.NET.Internals,FastResourceLock,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\FastResourceLock.cs,SpinAcquireShared,The following statement contains a magic number: while(true)           {              value = _value;                if((value & ExclusiveMask) == 0)              {                 if((value & LockOwned) == 0)                 {                    if(Interlocked.CompareExchange(                        ref _value'                        value + LockOwned + LockSharedOwnersIncrement'                        value                        ) == value)                       break;                 }                 else if(((value >> LockSharedOwnersShift) & LockSharedOwnersMask) != 0)                 {                    if(Interlocked.CompareExchange(                        ref _value'                        value + LockSharedOwnersIncrement'                        value                        ) == value)                       break;                 }              }                if(NativeMethods.SpinEnabled)                 Thread.SpinWait(8);              else                 Thread.Sleep(0);           }
Magic Number,GMap.NET.Internals,FastResourceLock,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\FastResourceLock.cs,SpinConvertSharedToExclusive,The following statement contains a magic number: while(true)           {              value = _value;                // Can't convert if there are other shared owners.              if(((value >> LockSharedOwnersShift) & LockSharedOwnersMask) == 1)              {                 if(Interlocked.CompareExchange(                     ref _value'                     value - LockSharedOwnersIncrement'                     value                     ) == value)                    break;              }                if(NativeMethods.SpinEnabled)                 Thread.SpinWait(8);              else                 Thread.Sleep(0);           }
Magic Number,GMap.NET.Internals,TileHttpHost,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\TileHttpHost.cs,Start,The following statement contains a magic number: Thread t = new Thread(() =>              {                  Debug.WriteLine("TileHttpHost: " + server.LocalEndpoint);                    while (listen)                  {                      try                      {                             if (!server.Pending())                          {                              Thread.Sleep(111);                          }                          else                          {                              ThreadPool.QueueUserWorkItem(new WaitCallback(ProcessRequest)' server.AcceptTcpClient());                          }                      }                      catch (Exception ex)                      {                          Debug.WriteLine("TileHttpHost: " + ex);                      }                  }                    Debug.WriteLine("TileHttpHost: stoped");              });
Magic Number,GMap.NET.Internals,TileHttpHost,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\TileHttpHost.cs,ProcessRequest,The following statement contains a magic number: try            {              using(TcpClient c = p as TcpClient)              {                  using(var s = c.GetStream())                  {                      using(StreamReader r = new StreamReader(s' Encoding.UTF8))                      {                                        var request = r.ReadLine();                                                      if(!string.IsNullOrEmpty(request) && request.StartsWith("GET"))                          {                              //Debug.WriteLine("TileHttpHost: " + request);                                // http://localhost:88/88888/5/15/11                              // GET /8888888888/5/15/11 HTTP/1.1                                var rq = request.Split(' ');                              if(rq.Length >= 2)                              {                                  var ids = rq[1].Split(new char[]{'/'}' StringSplitOptions.RemoveEmptyEntries);                                  if(ids.Length == 4)                                  {                                      int dbId = int.Parse(ids[0]);                                      int zoom = int.Parse(ids[1]);                                      int x = int.Parse(ids[2]);                                      int y = int.Parse(ids[3]);                                        var pr = GMapProviders.TryGetProvider(dbId);                                      if(pr != null)                                      {                                          Exception ex;                                          var img = GMaps.Instance.GetImageFrom(pr' new GPoint(x' y)' zoom' out ex);                                          if (img != null)                                          {                                              using (img)                                              {                                                  s.Write(responseHeaderBytes' 0' responseHeaderBytes.Length);                                                  img.Data.WriteTo(s);                                              }                                          }                                      }                                  }                               }                                   }                      }                  }                  c.Close();              }            }            catch (Exception ex)            {                Debug.WriteLine("TileHttpHost' ProcessRequest: " + ex);            }
Magic Number,GMap.NET.Internals,TileHttpHost,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\TileHttpHost.cs,ProcessRequest,The following statement contains a magic number: try            {              using(TcpClient c = p as TcpClient)              {                  using(var s = c.GetStream())                  {                      using(StreamReader r = new StreamReader(s' Encoding.UTF8))                      {                                        var request = r.ReadLine();                                                      if(!string.IsNullOrEmpty(request) && request.StartsWith("GET"))                          {                              //Debug.WriteLine("TileHttpHost: " + request);                                // http://localhost:88/88888/5/15/11                              // GET /8888888888/5/15/11 HTTP/1.1                                var rq = request.Split(' ');                              if(rq.Length >= 2)                              {                                  var ids = rq[1].Split(new char[]{'/'}' StringSplitOptions.RemoveEmptyEntries);                                  if(ids.Length == 4)                                  {                                      int dbId = int.Parse(ids[0]);                                      int zoom = int.Parse(ids[1]);                                      int x = int.Parse(ids[2]);                                      int y = int.Parse(ids[3]);                                        var pr = GMapProviders.TryGetProvider(dbId);                                      if(pr != null)                                      {                                          Exception ex;                                          var img = GMaps.Instance.GetImageFrom(pr' new GPoint(x' y)' zoom' out ex);                                          if (img != null)                                          {                                              using (img)                                              {                                                  s.Write(responseHeaderBytes' 0' responseHeaderBytes.Length);                                                  img.Data.WriteTo(s);                                              }                                          }                                      }                                  }                               }                                   }                      }                  }                  c.Close();              }            }            catch (Exception ex)            {                Debug.WriteLine("TileHttpHost' ProcessRequest: " + ex);            }
Magic Number,GMap.NET.Internals,TileHttpHost,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\TileHttpHost.cs,ProcessRequest,The following statement contains a magic number: try            {              using(TcpClient c = p as TcpClient)              {                  using(var s = c.GetStream())                  {                      using(StreamReader r = new StreamReader(s' Encoding.UTF8))                      {                                        var request = r.ReadLine();                                                      if(!string.IsNullOrEmpty(request) && request.StartsWith("GET"))                          {                              //Debug.WriteLine("TileHttpHost: " + request);                                // http://localhost:88/88888/5/15/11                              // GET /8888888888/5/15/11 HTTP/1.1                                var rq = request.Split(' ');                              if(rq.Length >= 2)                              {                                  var ids = rq[1].Split(new char[]{'/'}' StringSplitOptions.RemoveEmptyEntries);                                  if(ids.Length == 4)                                  {                                      int dbId = int.Parse(ids[0]);                                      int zoom = int.Parse(ids[1]);                                      int x = int.Parse(ids[2]);                                      int y = int.Parse(ids[3]);                                        var pr = GMapProviders.TryGetProvider(dbId);                                      if(pr != null)                                      {                                          Exception ex;                                          var img = GMaps.Instance.GetImageFrom(pr' new GPoint(x' y)' zoom' out ex);                                          if (img != null)                                          {                                              using (img)                                              {                                                  s.Write(responseHeaderBytes' 0' responseHeaderBytes.Length);                                                  img.Data.WriteTo(s);                                              }                                          }                                      }                                  }                               }                                   }                      }                  }                  c.Close();              }            }            catch (Exception ex)            {                Debug.WriteLine("TileHttpHost' ProcessRequest: " + ex);            }
Magic Number,GMap.NET.Internals,TileHttpHost,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\TileHttpHost.cs,ProcessRequest,The following statement contains a magic number: try            {              using(TcpClient c = p as TcpClient)              {                  using(var s = c.GetStream())                  {                      using(StreamReader r = new StreamReader(s' Encoding.UTF8))                      {                                        var request = r.ReadLine();                                                      if(!string.IsNullOrEmpty(request) && request.StartsWith("GET"))                          {                              //Debug.WriteLine("TileHttpHost: " + request);                                // http://localhost:88/88888/5/15/11                              // GET /8888888888/5/15/11 HTTP/1.1                                var rq = request.Split(' ');                              if(rq.Length >= 2)                              {                                  var ids = rq[1].Split(new char[]{'/'}' StringSplitOptions.RemoveEmptyEntries);                                  if(ids.Length == 4)                                  {                                      int dbId = int.Parse(ids[0]);                                      int zoom = int.Parse(ids[1]);                                      int x = int.Parse(ids[2]);                                      int y = int.Parse(ids[3]);                                        var pr = GMapProviders.TryGetProvider(dbId);                                      if(pr != null)                                      {                                          Exception ex;                                          var img = GMaps.Instance.GetImageFrom(pr' new GPoint(x' y)' zoom' out ex);                                          if (img != null)                                          {                                              using (img)                                              {                                                  s.Write(responseHeaderBytes' 0' responseHeaderBytes.Length);                                                  img.Data.WriteTo(s);                                              }                                          }                                      }                                  }                               }                                   }                      }                  }                  c.Close();              }            }            catch (Exception ex)            {                Debug.WriteLine("TileHttpHost' ProcessRequest: " + ex);            }
Magic Number,GMap.NET.Internals,Cache,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Cache.cs,GetContent,The following statement contains a magic number: return GetContent(url' type' TimeSpan.FromDays(88));
Magic Number,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,SetZoomToFitRect,The following statement contains a magic number: if (mmaxZoom > 0)              {                  PointLatLng center = new PointLatLng(rect.Lat - (rect.HeightLat / 2)' rect.Lng + (rect.WidthLng / 2));                  Position = center;                    if (mmaxZoom > maxZoom)                  {                      mmaxZoom = maxZoom;                  }                    if (Zoom != mmaxZoom)                  {                      Zoom = (int)mmaxZoom;                  }                    return true;              }
Magic Number,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,SetZoomToFitRect,The following statement contains a magic number: if (mmaxZoom > 0)              {                  PointLatLng center = new PointLatLng(rect.Lat - (rect.HeightLat / 2)' rect.Lng + (rect.WidthLng / 2));                  Position = center;                    if (mmaxZoom > maxZoom)                  {                      mmaxZoom = maxZoom;                  }                    if (Zoom != mmaxZoom)                  {                      Zoom = (int)mmaxZoom;                  }                    return true;              }
Magic Number,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,invalidatorWatch,The following statement contains a magic number: TimeSpan span = TimeSpan.FromMilliseconds(111);
Magic Number,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,UpdateCenterTileXYLocation,The following statement contains a magic number: PointLatLng center = FromLocalToLatLng(Width / 2' Height / 2);
Magic Number,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,UpdateCenterTileXYLocation,The following statement contains a magic number: PointLatLng center = FromLocalToLatLng(Width / 2' Height / 2);
Magic Number,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,OnMapSizeChanged,The following statement contains a magic number: if (IsRotated)              {  #if !PocketPC                  int diag = (int)Math.Round(Math.Sqrt(Width * Width + Height * Height) / Provider.Projection.TileSize.Width' MidpointRounding.AwayFromZero);  #else              int diag = (int) Math.Round(Math.Sqrt(Width * Width + Height * Height) / Provider.Projection.TileSize.Width);  #endif                  sizeOfMapArea.Width = 1 + (diag / 2);                  sizeOfMapArea.Height = 1 + (diag / 2);              }              else              {                  sizeOfMapArea.Width = 1 + (Width / Provider.Projection.TileSize.Width) / 2;                  sizeOfMapArea.Height = 1 + (Height / Provider.Projection.TileSize.Height) / 2;              }
Magic Number,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,OnMapSizeChanged,The following statement contains a magic number: if (IsRotated)              {  #if !PocketPC                  int diag = (int)Math.Round(Math.Sqrt(Width * Width + Height * Height) / Provider.Projection.TileSize.Width' MidpointRounding.AwayFromZero);  #else              int diag = (int) Math.Round(Math.Sqrt(Width * Width + Height * Height) / Provider.Projection.TileSize.Width);  #endif                  sizeOfMapArea.Width = 1 + (diag / 2);                  sizeOfMapArea.Height = 1 + (diag / 2);              }              else              {                  sizeOfMapArea.Width = 1 + (Width / Provider.Projection.TileSize.Width) / 2;                  sizeOfMapArea.Height = 1 + (Height / Provider.Projection.TileSize.Height) / 2;              }
Magic Number,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,OnMapSizeChanged,The following statement contains a magic number: if (IsRotated)              {  #if !PocketPC                  int diag = (int)Math.Round(Math.Sqrt(Width * Width + Height * Height) / Provider.Projection.TileSize.Width' MidpointRounding.AwayFromZero);  #else              int diag = (int) Math.Round(Math.Sqrt(Width * Width + Height * Height) / Provider.Projection.TileSize.Width);  #endif                  sizeOfMapArea.Width = 1 + (diag / 2);                  sizeOfMapArea.Height = 1 + (diag / 2);              }              else              {                  sizeOfMapArea.Width = 1 + (Width / Provider.Projection.TileSize.Width) / 2;                  sizeOfMapArea.Height = 1 + (Height / Provider.Projection.TileSize.Height) / 2;              }
Magic Number,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,OnMapSizeChanged,The following statement contains a magic number: if (IsRotated)              {  #if !PocketPC                  int diag = (int)Math.Round(Math.Sqrt(Width * Width + Height * Height) / Provider.Projection.TileSize.Width' MidpointRounding.AwayFromZero);  #else              int diag = (int) Math.Round(Math.Sqrt(Width * Width + Height * Height) / Provider.Projection.TileSize.Width);  #endif                  sizeOfMapArea.Width = 1 + (diag / 2);                  sizeOfMapArea.Height = 1 + (diag / 2);              }              else              {                  sizeOfMapArea.Width = 1 + (Width / Provider.Projection.TileSize.Width) / 2;                  sizeOfMapArea.Height = 1 + (Height / Provider.Projection.TileSize.Height) / 2;              }
Magic Number,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,GetMaxZoomToFitRect,The following statement contains a magic number: if (rect.HeightLat == 0 || rect.WidthLng == 0)              {                  zoom = maxZoom / 2;              }              else              {                  for (int i = (int)zoom; i <= maxZoom; i++)                  {                      GPoint p1 = Provider.Projection.FromLatLngToPixel(rect.LocationTopLeft' i);                      GPoint p2 = Provider.Projection.FromLatLngToPixel(rect.LocationRightBottom' i);                        if (((p2.X - p1.X) <= Width + 10) && (p2.Y - p1.Y) <= Height + 10)                      {                          zoom = i;                      }                      else                      {                          break;                      }                  }              }
Magic Number,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,GetMaxZoomToFitRect,The following statement contains a magic number: if (rect.HeightLat == 0 || rect.WidthLng == 0)              {                  zoom = maxZoom / 2;              }              else              {                  for (int i = (int)zoom; i <= maxZoom; i++)                  {                      GPoint p1 = Provider.Projection.FromLatLngToPixel(rect.LocationTopLeft' i);                      GPoint p2 = Provider.Projection.FromLatLngToPixel(rect.LocationRightBottom' i);                        if (((p2.X - p1.X) <= Width + 10) && (p2.Y - p1.Y) <= Height + 10)                      {                          zoom = i;                      }                      else                      {                          break;                      }                  }              }
Magic Number,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,GetMaxZoomToFitRect,The following statement contains a magic number: if (rect.HeightLat == 0 || rect.WidthLng == 0)              {                  zoom = maxZoom / 2;              }              else              {                  for (int i = (int)zoom; i <= maxZoom; i++)                  {                      GPoint p1 = Provider.Projection.FromLatLngToPixel(rect.LocationTopLeft' i);                      GPoint p2 = Provider.Projection.FromLatLngToPixel(rect.LocationRightBottom' i);                        if (((p2.X - p1.X) <= Width + 10) && (p2.Y - p1.Y) <= Height + 10)                      {                          zoom = i;                      }                      else                      {                          break;                      }                  }              }
Magic Number,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,GoToCurrentPosition,The following statement contains a magic number: var d = new GPoint(Width / 2' Height / 2);
Magic Number,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,GoToCurrentPosition,The following statement contains a magic number: var d = new GPoint(Width / 2' Height / 2);
Magic Number,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,GoToCurrentPositionOnZoom,The following statement contains a magic number: if (MouseWheelZooming)              {                  if (MouseWheelZoomType != MouseWheelZoomType.MousePositionWithoutCenter)                  {                      GPoint pt = new GPoint(-(positionPixel.X - Width / 2)' -(positionPixel.Y - Height / 2));                      pt.Offset(compensationOffset);                      renderOffset.X = pt.X - dragPoint.X;                      renderOffset.Y = pt.Y - dragPoint.Y;                  }                  else // without centering                  {                      renderOffset.X = -positionPixel.X - dragPoint.X;                      renderOffset.Y = -positionPixel.Y - dragPoint.Y;                      renderOffset.Offset(mouseLastZoom);                      renderOffset.Offset(compensationOffset);                  }              }              else // use current map center              {                  mouseLastZoom = GPoint.Empty;                    GPoint pt = new GPoint(-(positionPixel.X - Width / 2)' -(positionPixel.Y - Height / 2));                  pt.Offset(compensationOffset);                  renderOffset.X = pt.X - dragPoint.X;                  renderOffset.Y = pt.Y - dragPoint.Y;              }
Magic Number,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,GoToCurrentPositionOnZoom,The following statement contains a magic number: if (MouseWheelZooming)              {                  if (MouseWheelZoomType != MouseWheelZoomType.MousePositionWithoutCenter)                  {                      GPoint pt = new GPoint(-(positionPixel.X - Width / 2)' -(positionPixel.Y - Height / 2));                      pt.Offset(compensationOffset);                      renderOffset.X = pt.X - dragPoint.X;                      renderOffset.Y = pt.Y - dragPoint.Y;                  }                  else // without centering                  {                      renderOffset.X = -positionPixel.X - dragPoint.X;                      renderOffset.Y = -positionPixel.Y - dragPoint.Y;                      renderOffset.Offset(mouseLastZoom);                      renderOffset.Offset(compensationOffset);                  }              }              else // use current map center              {                  mouseLastZoom = GPoint.Empty;                    GPoint pt = new GPoint(-(positionPixel.X - Width / 2)' -(positionPixel.Y - Height / 2));                  pt.Offset(compensationOffset);                  renderOffset.X = pt.X - dragPoint.X;                  renderOffset.Y = pt.Y - dragPoint.Y;              }
Magic Number,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,GoToCurrentPositionOnZoom,The following statement contains a magic number: if (MouseWheelZooming)              {                  if (MouseWheelZoomType != MouseWheelZoomType.MousePositionWithoutCenter)                  {                      GPoint pt = new GPoint(-(positionPixel.X - Width / 2)' -(positionPixel.Y - Height / 2));                      pt.Offset(compensationOffset);                      renderOffset.X = pt.X - dragPoint.X;                      renderOffset.Y = pt.Y - dragPoint.Y;                  }                  else // without centering                  {                      renderOffset.X = -positionPixel.X - dragPoint.X;                      renderOffset.Y = -positionPixel.Y - dragPoint.Y;                      renderOffset.Offset(mouseLastZoom);                      renderOffset.Offset(compensationOffset);                  }              }              else // use current map center              {                  mouseLastZoom = GPoint.Empty;                    GPoint pt = new GPoint(-(positionPixel.X - Width / 2)' -(positionPixel.Y - Height / 2));                  pt.Offset(compensationOffset);                  renderOffset.X = pt.X - dragPoint.X;                  renderOffset.Y = pt.Y - dragPoint.Y;              }
Magic Number,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,GoToCurrentPositionOnZoom,The following statement contains a magic number: if (MouseWheelZooming)              {                  if (MouseWheelZoomType != MouseWheelZoomType.MousePositionWithoutCenter)                  {                      GPoint pt = new GPoint(-(positionPixel.X - Width / 2)' -(positionPixel.Y - Height / 2));                      pt.Offset(compensationOffset);                      renderOffset.X = pt.X - dragPoint.X;                      renderOffset.Y = pt.Y - dragPoint.Y;                  }                  else // without centering                  {                      renderOffset.X = -positionPixel.X - dragPoint.X;                      renderOffset.Y = -positionPixel.Y - dragPoint.Y;                      renderOffset.Offset(mouseLastZoom);                      renderOffset.Offset(compensationOffset);                  }              }              else // use current map center              {                  mouseLastZoom = GPoint.Empty;                    GPoint pt = new GPoint(-(positionPixel.X - Width / 2)' -(positionPixel.Y - Height / 2));                  pt.Offset(compensationOffset);                  renderOffset.X = pt.X - dragPoint.X;                  renderOffset.Y = pt.Y - dragPoint.Y;              }
Magic Number,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,DragOffset,The following statement contains a magic number: {                  LastLocationInBounds = Position;                    IsDragging = true;                  Position = FromLocalToLatLng((int)Width / 2' (int)Height / 2);                  IsDragging = false;              }
Magic Number,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,DragOffset,The following statement contains a magic number: {                  LastLocationInBounds = Position;                    IsDragging = true;                  Position = FromLocalToLatLng((int)Width / 2' (int)Height / 2);                  IsDragging = false;              }
Magic Number,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,Drag,The following statement contains a magic number: if (IsDragging)              {                  LastLocationInBounds = Position;                  Position = FromLocalToLatLng((int)Width / 2' (int)Height / 2);                    if (OnMapDrag != null)                  {                      OnMapDrag();                  }              }
Magic Number,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,Drag,The following statement contains a magic number: if (IsDragging)              {                  LastLocationInBounds = Position;                  Position = FromLocalToLatLng((int)Width / 2' (int)Height / 2);                    if (OnMapDrag != null)                  {                      OnMapDrag();                  }              }
Magic Number,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,ProcessLoadTask,The following statement contains a magic number: try              {                  #region -- execute --                    var m = task.Core.Matrix.GetTileWithReadLock(task.Zoom' task.Pos);                  if (!m.NotEmpty)                  {                      Debug.WriteLine(ctid + " - try load: " + task);                        Tile t = new Tile(task.Zoom' task.Pos);                        foreach (var tl in task.Core.provider.Overlays)                      {                          int retry = 0;                          do                          {                              PureImage img = null;                              Exception ex = null;                                if (task.Zoom >= task.Core.provider.MinZoom && (!task.Core.provider.MaxZoom.HasValue || task.Zoom <= task.Core.provider.MaxZoom))                              {                                  if (task.Core.skipOverZoom == 0 || task.Zoom <= task.Core.skipOverZoom)                                  {                                      // tile number inversion(BottomLeft -> TopLeft)                                      if (tl.InvertedAxisY)                                      {                                          img = GMaps.Instance.GetImageFrom(tl' new GPoint(task.Pos.X' task.Core.maxOfTiles.Height - task.Pos.Y)' task.Zoom' out ex);                                      }                                      else // ok                                      {                                          img = GMaps.Instance.GetImageFrom(tl' task.Pos' task.Zoom' out ex);                                      }                                  }                              }                                if (img != null && ex == null)                              {                                  if (task.Core.okZoom < task.Zoom)                                  {                                      task.Core.okZoom = task.Zoom;                                      task.Core.skipOverZoom = 0;                                      Debug.WriteLine("skipOverZoom disabled' okZoom: " + task.Core.okZoom);                                  }                              }                              else if (ex != null)                              {                                  if ((task.Core.skipOverZoom != task.Core.okZoom) && (task.Zoom > task.Core.okZoom))                                  {                                      if (ex.Message.Contains("(404) Not Found"))                                      {                                          task.Core.skipOverZoom = task.Core.okZoom;                                          Debug.WriteLine("skipOverZoom enabled: " + task.Core.skipOverZoom);                                      }                                  }                              }                                // check for parent tiles if not found                              if (img == null && task.Core.okZoom > 0 && task.Core.fillEmptyTiles && task.Core.Provider.Projection is MercatorProjection)                              {                                  int zoomOffset = task.Zoom > task.Core.okZoom ? task.Zoom - task.Core.okZoom : 1;                                  long Ix = 0;                                  GPoint parentTile = GPoint.Empty;                                    while (img == null && zoomOffset < task.Zoom)                                  {                                      Ix = (long)Math.Pow(2' zoomOffset);                                      parentTile = new GMap.NET.GPoint((task.Pos.X / Ix)' (task.Pos.Y / Ix));                                      img = GMaps.Instance.GetImageFrom(tl' parentTile' task.Zoom - zoomOffset++' out ex);                                  }                                    if (img != null)                                  {                                      // offsets in quadrant                                      long Xoff = Math.Abs(task.Pos.X - (parentTile.X * Ix));                                      long Yoff = Math.Abs(task.Pos.Y - (parentTile.Y * Ix));                                        img.IsParent = true;                                      img.Ix = Ix;                                      img.Xoff = Xoff;                                      img.Yoff = Yoff;                                        // wpf                                      //var geometry = new RectangleGeometry(new Rect(Core.tileRect.X + 0.6' Core.tileRect.Y + 0.6' Core.tileRect.Width + 0.6' Core.tileRect.Height + 0.6));                                      //var parentImgRect = new Rect(Core.tileRect.X - Core.tileRect.Width * Xoff + 0.6' Core.tileRect.Y - Core.tileRect.Height * Yoff + 0.6' Core.tileRect.Width * Ix + 0.6' Core.tileRect.Height * Ix + 0.6);                                        // gdi+                                      //System.Drawing.Rectangle dst = new System.Drawing.Rectangle((int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height);                                      //System.Drawing.RectangleF srcRect = new System.Drawing.RectangleF((float)(Xoff * (img.Img.Width / Ix))' (float)(Yoff * (img.Img.Height / Ix))' (img.Img.Width / Ix)' (img.Img.Height / Ix));                                  }                              }                                if (img != null)                              {                                  Debug.WriteLine(ctid + " - tile loaded: " + img.Data.Length / 1024 + "KB' " + task);                                  {                                      t.AddOverlay(img);                                  }                                  break;                              }                              else                              {                                  if (ex != null)                                  {                                      lock (task.Core.FailedLoads)                                      {                                          if (!task.Core.FailedLoads.ContainsKey(task))                                          {                                              task.Core.FailedLoads.Add(task' ex);                                                if (task.Core.OnEmptyTileError != null)                                              {                                                  if (!task.Core.RaiseEmptyTileError)                                                  {                                                      task.Core.RaiseEmptyTileError = true;                                                      task.Core.OnEmptyTileError(task.Zoom' task.Pos);                                                  }                                              }                                          }                                      }                                  }                                    if (task.Core.RetryLoadTile > 0)                                  {                                      Debug.WriteLine(ctid + " - ProcessLoadTask: " + task + " -> empty tile' retry " + retry);                                      {                                          Thread.Sleep(1111);                                      }                                  }                              }                          }                          while (++retry < task.Core.RetryLoadTile);                      }                        if (t.HasAnyOverlays && task.Core.IsStarted)                      {                          task.Core.Matrix.SetTile(t);                      }                      else                      {                          t.Dispose();                      }                  }                    #endregion              }              catch (Exception ex)              {                  Debug.WriteLine(ctid + " - ProcessLoadTask: " + ex.ToString());              }              finally              {                  if (task.Core.Refresh != null)                  {                      task.Core.Refresh.Set();                  }              }
Magic Number,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,ProcessLoadTask,The following statement contains a magic number: try              {                  #region -- execute --                    var m = task.Core.Matrix.GetTileWithReadLock(task.Zoom' task.Pos);                  if (!m.NotEmpty)                  {                      Debug.WriteLine(ctid + " - try load: " + task);                        Tile t = new Tile(task.Zoom' task.Pos);                        foreach (var tl in task.Core.provider.Overlays)                      {                          int retry = 0;                          do                          {                              PureImage img = null;                              Exception ex = null;                                if (task.Zoom >= task.Core.provider.MinZoom && (!task.Core.provider.MaxZoom.HasValue || task.Zoom <= task.Core.provider.MaxZoom))                              {                                  if (task.Core.skipOverZoom == 0 || task.Zoom <= task.Core.skipOverZoom)                                  {                                      // tile number inversion(BottomLeft -> TopLeft)                                      if (tl.InvertedAxisY)                                      {                                          img = GMaps.Instance.GetImageFrom(tl' new GPoint(task.Pos.X' task.Core.maxOfTiles.Height - task.Pos.Y)' task.Zoom' out ex);                                      }                                      else // ok                                      {                                          img = GMaps.Instance.GetImageFrom(tl' task.Pos' task.Zoom' out ex);                                      }                                  }                              }                                if (img != null && ex == null)                              {                                  if (task.Core.okZoom < task.Zoom)                                  {                                      task.Core.okZoom = task.Zoom;                                      task.Core.skipOverZoom = 0;                                      Debug.WriteLine("skipOverZoom disabled' okZoom: " + task.Core.okZoom);                                  }                              }                              else if (ex != null)                              {                                  if ((task.Core.skipOverZoom != task.Core.okZoom) && (task.Zoom > task.Core.okZoom))                                  {                                      if (ex.Message.Contains("(404) Not Found"))                                      {                                          task.Core.skipOverZoom = task.Core.okZoom;                                          Debug.WriteLine("skipOverZoom enabled: " + task.Core.skipOverZoom);                                      }                                  }                              }                                // check for parent tiles if not found                              if (img == null && task.Core.okZoom > 0 && task.Core.fillEmptyTiles && task.Core.Provider.Projection is MercatorProjection)                              {                                  int zoomOffset = task.Zoom > task.Core.okZoom ? task.Zoom - task.Core.okZoom : 1;                                  long Ix = 0;                                  GPoint parentTile = GPoint.Empty;                                    while (img == null && zoomOffset < task.Zoom)                                  {                                      Ix = (long)Math.Pow(2' zoomOffset);                                      parentTile = new GMap.NET.GPoint((task.Pos.X / Ix)' (task.Pos.Y / Ix));                                      img = GMaps.Instance.GetImageFrom(tl' parentTile' task.Zoom - zoomOffset++' out ex);                                  }                                    if (img != null)                                  {                                      // offsets in quadrant                                      long Xoff = Math.Abs(task.Pos.X - (parentTile.X * Ix));                                      long Yoff = Math.Abs(task.Pos.Y - (parentTile.Y * Ix));                                        img.IsParent = true;                                      img.Ix = Ix;                                      img.Xoff = Xoff;                                      img.Yoff = Yoff;                                        // wpf                                      //var geometry = new RectangleGeometry(new Rect(Core.tileRect.X + 0.6' Core.tileRect.Y + 0.6' Core.tileRect.Width + 0.6' Core.tileRect.Height + 0.6));                                      //var parentImgRect = new Rect(Core.tileRect.X - Core.tileRect.Width * Xoff + 0.6' Core.tileRect.Y - Core.tileRect.Height * Yoff + 0.6' Core.tileRect.Width * Ix + 0.6' Core.tileRect.Height * Ix + 0.6);                                        // gdi+                                      //System.Drawing.Rectangle dst = new System.Drawing.Rectangle((int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height);                                      //System.Drawing.RectangleF srcRect = new System.Drawing.RectangleF((float)(Xoff * (img.Img.Width / Ix))' (float)(Yoff * (img.Img.Height / Ix))' (img.Img.Width / Ix)' (img.Img.Height / Ix));                                  }                              }                                if (img != null)                              {                                  Debug.WriteLine(ctid + " - tile loaded: " + img.Data.Length / 1024 + "KB' " + task);                                  {                                      t.AddOverlay(img);                                  }                                  break;                              }                              else                              {                                  if (ex != null)                                  {                                      lock (task.Core.FailedLoads)                                      {                                          if (!task.Core.FailedLoads.ContainsKey(task))                                          {                                              task.Core.FailedLoads.Add(task' ex);                                                if (task.Core.OnEmptyTileError != null)                                              {                                                  if (!task.Core.RaiseEmptyTileError)                                                  {                                                      task.Core.RaiseEmptyTileError = true;                                                      task.Core.OnEmptyTileError(task.Zoom' task.Pos);                                                  }                                              }                                          }                                      }                                  }                                    if (task.Core.RetryLoadTile > 0)                                  {                                      Debug.WriteLine(ctid + " - ProcessLoadTask: " + task + " -> empty tile' retry " + retry);                                      {                                          Thread.Sleep(1111);                                      }                                  }                              }                          }                          while (++retry < task.Core.RetryLoadTile);                      }                        if (t.HasAnyOverlays && task.Core.IsStarted)                      {                          task.Core.Matrix.SetTile(t);                      }                      else                      {                          t.Dispose();                      }                  }                    #endregion              }              catch (Exception ex)              {                  Debug.WriteLine(ctid + " - ProcessLoadTask: " + ex.ToString());              }              finally              {                  if (task.Core.Refresh != null)                  {                      task.Core.Refresh.Set();                  }              }
Magic Number,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,ProcessLoadTask,The following statement contains a magic number: try              {                  #region -- execute --                    var m = task.Core.Matrix.GetTileWithReadLock(task.Zoom' task.Pos);                  if (!m.NotEmpty)                  {                      Debug.WriteLine(ctid + " - try load: " + task);                        Tile t = new Tile(task.Zoom' task.Pos);                        foreach (var tl in task.Core.provider.Overlays)                      {                          int retry = 0;                          do                          {                              PureImage img = null;                              Exception ex = null;                                if (task.Zoom >= task.Core.provider.MinZoom && (!task.Core.provider.MaxZoom.HasValue || task.Zoom <= task.Core.provider.MaxZoom))                              {                                  if (task.Core.skipOverZoom == 0 || task.Zoom <= task.Core.skipOverZoom)                                  {                                      // tile number inversion(BottomLeft -> TopLeft)                                      if (tl.InvertedAxisY)                                      {                                          img = GMaps.Instance.GetImageFrom(tl' new GPoint(task.Pos.X' task.Core.maxOfTiles.Height - task.Pos.Y)' task.Zoom' out ex);                                      }                                      else // ok                                      {                                          img = GMaps.Instance.GetImageFrom(tl' task.Pos' task.Zoom' out ex);                                      }                                  }                              }                                if (img != null && ex == null)                              {                                  if (task.Core.okZoom < task.Zoom)                                  {                                      task.Core.okZoom = task.Zoom;                                      task.Core.skipOverZoom = 0;                                      Debug.WriteLine("skipOverZoom disabled' okZoom: " + task.Core.okZoom);                                  }                              }                              else if (ex != null)                              {                                  if ((task.Core.skipOverZoom != task.Core.okZoom) && (task.Zoom > task.Core.okZoom))                                  {                                      if (ex.Message.Contains("(404) Not Found"))                                      {                                          task.Core.skipOverZoom = task.Core.okZoom;                                          Debug.WriteLine("skipOverZoom enabled: " + task.Core.skipOverZoom);                                      }                                  }                              }                                // check for parent tiles if not found                              if (img == null && task.Core.okZoom > 0 && task.Core.fillEmptyTiles && task.Core.Provider.Projection is MercatorProjection)                              {                                  int zoomOffset = task.Zoom > task.Core.okZoom ? task.Zoom - task.Core.okZoom : 1;                                  long Ix = 0;                                  GPoint parentTile = GPoint.Empty;                                    while (img == null && zoomOffset < task.Zoom)                                  {                                      Ix = (long)Math.Pow(2' zoomOffset);                                      parentTile = new GMap.NET.GPoint((task.Pos.X / Ix)' (task.Pos.Y / Ix));                                      img = GMaps.Instance.GetImageFrom(tl' parentTile' task.Zoom - zoomOffset++' out ex);                                  }                                    if (img != null)                                  {                                      // offsets in quadrant                                      long Xoff = Math.Abs(task.Pos.X - (parentTile.X * Ix));                                      long Yoff = Math.Abs(task.Pos.Y - (parentTile.Y * Ix));                                        img.IsParent = true;                                      img.Ix = Ix;                                      img.Xoff = Xoff;                                      img.Yoff = Yoff;                                        // wpf                                      //var geometry = new RectangleGeometry(new Rect(Core.tileRect.X + 0.6' Core.tileRect.Y + 0.6' Core.tileRect.Width + 0.6' Core.tileRect.Height + 0.6));                                      //var parentImgRect = new Rect(Core.tileRect.X - Core.tileRect.Width * Xoff + 0.6' Core.tileRect.Y - Core.tileRect.Height * Yoff + 0.6' Core.tileRect.Width * Ix + 0.6' Core.tileRect.Height * Ix + 0.6);                                        // gdi+                                      //System.Drawing.Rectangle dst = new System.Drawing.Rectangle((int)Core.tileRect.X' (int)Core.tileRect.Y' (int)Core.tileRect.Width' (int)Core.tileRect.Height);                                      //System.Drawing.RectangleF srcRect = new System.Drawing.RectangleF((float)(Xoff * (img.Img.Width / Ix))' (float)(Yoff * (img.Img.Height / Ix))' (img.Img.Width / Ix)' (img.Img.Height / Ix));                                  }                              }                                if (img != null)                              {                                  Debug.WriteLine(ctid + " - tile loaded: " + img.Data.Length / 1024 + "KB' " + task);                                  {                                      t.AddOverlay(img);                                  }                                  break;                              }                              else                              {                                  if (ex != null)                                  {                                      lock (task.Core.FailedLoads)                                      {                                          if (!task.Core.FailedLoads.ContainsKey(task))                                          {                                              task.Core.FailedLoads.Add(task' ex);                                                if (task.Core.OnEmptyTileError != null)                                              {                                                  if (!task.Core.RaiseEmptyTileError)                                                  {                                                      task.Core.RaiseEmptyTileError = true;                                                      task.Core.OnEmptyTileError(task.Zoom' task.Pos);                                                  }                                              }                                          }                                      }                                  }                                    if (task.Core.RetryLoadTile > 0)                                  {                                      Debug.WriteLine(ctid + " - ProcessLoadTask: " + task + " -> empty tile' retry " + retry);                                      {                                          Thread.Sleep(1111);                                      }                                  }                              }                          }                          while (++retry < task.Core.RetryLoadTile);                      }                        if (t.HasAnyOverlays && task.Core.IsStarted)                      {                          task.Core.Matrix.SetTile(t);                      }                      else                      {                          t.Dispose();                      }                  }                    #endregion              }              catch (Exception ex)              {                  Debug.WriteLine(ctid + " - ProcessLoadTask: " + ex.ToString());              }              finally              {                  if (task.Core.Refresh != null)                  {                      task.Core.Refresh.Set();                  }              }
Magic Number,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,UpdateGroundResolution,The following statement contains a magic number: pxRes100m = (int)(100.0 / rez);
Magic Number,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,UpdateGroundResolution,The following statement contains a magic number: pxRes1000m = (int)(1000.0 / rez);
Magic Number,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,UpdateGroundResolution,The following statement contains a magic number: pxRes10km = (int)(10000.0 / rez);
Magic Number,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,UpdateGroundResolution,The following statement contains a magic number: pxRes100km = (int)(100000.0 / rez);
Magic Number,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,UpdateGroundResolution,The following statement contains a magic number: pxRes1000km = (int)(1000000.0 / rez);
Magic Number,GMap.NET.Internals,Core,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Core.cs,UpdateGroundResolution,The following statement contains a magic number: pxRes5000km = (int)(5000000.0 / rez);
Magic Number,GMap.NET.Internals,Tile,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Tile.cs,AddOverlay,The following statement contains a magic number: if (overlays == null)              {                  overlays = new PureImage[4];              }
Magic Number,GMap.NET.Internals,TileMatrix,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\TileMatrix.cs,TileMatrix,The following statement contains a magic number: for(int i = 0; i < Levels.Capacity; i++)           {               Levels.Add(new Dictionary<GPoint' Tile>(55' new GPointComparer()));           }
Magic Number,GMap.NET.Internals,Stuff,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Stuff.cs,CopyStream,The following statement contains a magic number: const int readSize = 32 * 1024;
Magic Number,GMap.NET.Internals,Stuff,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Stuff.cs,CopyStream,The following statement contains a magic number: const int readSize = 32 * 1024;
Magic Number,GMap.NET.Internals,Stuff,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Stuff.cs,IsRunningOnVistaOrLater,The following statement contains a magic number: if(os.Platform == PlatformID.Win32NT)           {              Version vs = os.Version;                if(vs.Major >= 6 && vs.Minor >= 0)              {                 return true;              }           }
Magic Number,GMap.NET.Internals,Stuff,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Stuff.cs,IsRunningOnWin7orLater,The following statement contains a magic number: if(os.Platform == PlatformID.Win32NT)           {              Version vs = os.Version;                if(vs.Major >= 6 && vs.Minor > 0)              {                 return true;              }           }
Magic Number,GMap.NET.Internals,Stuff,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Stuff.cs,EncryptString,The following statement contains a magic number: using (var HashProvider = new SHA1CryptoServiceProvider())            {                byte[] TDESKey = HashProvider.ComputeHash(Encoding.UTF8.GetBytes(Passphrase));                Array.Resize(ref TDESKey' 16);                  using (TripleDESCryptoServiceProvider TDESAlgorithm = new TripleDESCryptoServiceProvider())                {                    TDESAlgorithm.Key = TDESKey;                    TDESAlgorithm.Mode = CipherMode.ECB;                    TDESAlgorithm.Padding = PaddingMode.PKCS7;                      byte[] DataToEncrypt = Encoding.UTF8.GetBytes(Message);                      // Step 5. Attempt to encrypt the string                    try                    {                        using (ICryptoTransform Encryptor = TDESAlgorithm.CreateEncryptor())                        {                            Results = Encryptor.TransformFinalBlock(DataToEncrypt' 0' DataToEncrypt.Length);                        }                    }                    finally                    {                        // Clear the TripleDes and Hashprovider services of any sensitive information                        TDESAlgorithm.Clear();                        HashProvider.Clear();                    }                }            }
Magic Number,GMap.NET.Internals,Stuff,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\Stuff.cs,DecryptString,The following statement contains a magic number: using (var HashProvider = new SHA1CryptoServiceProvider())            {                byte[] TDESKey = HashProvider.ComputeHash(Encoding.UTF8.GetBytes(Passphrase));                Array.Resize(ref TDESKey' 16);                  // Step 2. Create a new TripleDESCryptoServiceProvider object                using (TripleDESCryptoServiceProvider TDESAlgorithm = new TripleDESCryptoServiceProvider())                {                    // Step 3. Setup the decoder                    TDESAlgorithm.Key = TDESKey;                    TDESAlgorithm.Mode = CipherMode.ECB;                    TDESAlgorithm.Padding = PaddingMode.PKCS7;                      // Step 4. Convert the input string to a byte[]                    byte[] DataToDecrypt = Convert.FromBase64String(Message);                      // Step 5. Attempt to decrypt the string                    try                    {                        using (ICryptoTransform Decryptor = TDESAlgorithm.CreateDecryptor())                        {                            Results = Decryptor.TransformFinalBlock(DataToDecrypt' 0' DataToDecrypt.Length);                        }                    }                    finally                    {                        // Clear the TripleDes and Hashprovider services of any sensitive information                        TDESAlgorithm.Clear();                        HashProvider.Clear();                    }                }            }
Magic Number,Org.Mentalis.Network.ProxySocket.Authentication,AuthUserPass,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\AuthUserPass.cs,GetAuthenticationBytes,The following statement contains a magic number: byte[] buffer = new byte[3 + Username.Length + Password.Length];
Magic Number,Org.Mentalis.Network.ProxySocket.Authentication,AuthUserPass,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\AuthUserPass.cs,GetAuthenticationBytes,The following statement contains a magic number: Array.Copy(Encoding.ASCII.GetBytes(Username)' 0' buffer' 2' Username.Length);
Magic Number,Org.Mentalis.Network.ProxySocket.Authentication,AuthUserPass,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\AuthUserPass.cs,GetAuthenticationBytes,The following statement contains a magic number: buffer[Username.Length + 2] = (byte)Password.Length;
Magic Number,Org.Mentalis.Network.ProxySocket.Authentication,AuthUserPass,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\AuthUserPass.cs,GetAuthenticationBytes,The following statement contains a magic number: Array.Copy(Encoding.ASCII.GetBytes(Password)' 0' buffer' Username.Length + 3' Password.Length);
Magic Number,Org.Mentalis.Network.ProxySocket.Authentication,AuthUserPass,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\AuthUserPass.cs,Authenticate,The following statement contains a magic number: byte[] buffer = new byte[2];
Magic Number,Org.Mentalis.Network.ProxySocket.Authentication,AuthUserPass,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\AuthUserPass.cs,Authenticate,The following statement contains a magic number: while (received != 2) {  				received += Server.Receive(buffer' received' 2 - received' SocketFlags.None);  			}
Magic Number,Org.Mentalis.Network.ProxySocket.Authentication,AuthUserPass,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\AuthUserPass.cs,Authenticate,The following statement contains a magic number: while (received != 2) {  				received += Server.Receive(buffer' received' 2 - received' SocketFlags.None);  			}
Magic Number,Org.Mentalis.Network.ProxySocket.Authentication,AuthUserPass,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\AuthUserPass.cs,BeginAuthenticate,The following statement contains a magic number: Server.BeginSend(GetAuthenticationBytes()' 0' 3 + Username.Length + Password.Length' SocketFlags.None' new AsyncCallback(this.OnSent)' Server);
Magic Number,Org.Mentalis.Network.ProxySocket.Authentication,AuthUserPass,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\AuthUserPass.cs,OnSent,The following statement contains a magic number: try {  				Server.EndSend(ar);  				Buffer = new byte[2];  				Server.BeginReceive(Buffer' 0' 2' SocketFlags.None' new AsyncCallback(this.OnReceive)' Server);  			} catch (Exception e) {  				CallBack(e);  			}
Magic Number,Org.Mentalis.Network.ProxySocket.Authentication,AuthUserPass,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\AuthUserPass.cs,OnSent,The following statement contains a magic number: try {  				Server.EndSend(ar);  				Buffer = new byte[2];  				Server.BeginReceive(Buffer' 0' 2' SocketFlags.None' new AsyncCallback(this.OnReceive)' Server);  			} catch (Exception e) {  				CallBack(e);  			}
Magic Number,Org.Mentalis.Network.ProxySocket,ProxyException,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\ProxyException.cs,Socks5ToString,The following statement contains a magic number: switch(socks5Error) {  				case 0:  					return "Connection succeeded.";  				case 1:  					return "General SOCKS server failure.";  				case 2:  					return "Connection not allowed by ruleset.";  				case 3:  					return "Network unreachable.";  				case 4:  					return "Host unreachable.";  				case 5:  					return "Connection refused.";  				case 6:  					return "TTL expired.";  				case 7:  					return "Command not supported.";  				case 8:  					return "Address type not supported.";  				default:  					return "Unspecified SOCKS error.";  			}
Magic Number,Org.Mentalis.Network.ProxySocket,ProxyException,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\ProxyException.cs,Socks5ToString,The following statement contains a magic number: switch(socks5Error) {  				case 0:  					return "Connection succeeded.";  				case 1:  					return "General SOCKS server failure.";  				case 2:  					return "Connection not allowed by ruleset.";  				case 3:  					return "Network unreachable.";  				case 4:  					return "Host unreachable.";  				case 5:  					return "Connection refused.";  				case 6:  					return "TTL expired.";  				case 7:  					return "Command not supported.";  				case 8:  					return "Address type not supported.";  				default:  					return "Unspecified SOCKS error.";  			}
Magic Number,Org.Mentalis.Network.ProxySocket,ProxyException,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\ProxyException.cs,Socks5ToString,The following statement contains a magic number: switch(socks5Error) {  				case 0:  					return "Connection succeeded.";  				case 1:  					return "General SOCKS server failure.";  				case 2:  					return "Connection not allowed by ruleset.";  				case 3:  					return "Network unreachable.";  				case 4:  					return "Host unreachable.";  				case 5:  					return "Connection refused.";  				case 6:  					return "TTL expired.";  				case 7:  					return "Command not supported.";  				case 8:  					return "Address type not supported.";  				default:  					return "Unspecified SOCKS error.";  			}
Magic Number,Org.Mentalis.Network.ProxySocket,ProxyException,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\ProxyException.cs,Socks5ToString,The following statement contains a magic number: switch(socks5Error) {  				case 0:  					return "Connection succeeded.";  				case 1:  					return "General SOCKS server failure.";  				case 2:  					return "Connection not allowed by ruleset.";  				case 3:  					return "Network unreachable.";  				case 4:  					return "Host unreachable.";  				case 5:  					return "Connection refused.";  				case 6:  					return "TTL expired.";  				case 7:  					return "Command not supported.";  				case 8:  					return "Address type not supported.";  				default:  					return "Unspecified SOCKS error.";  			}
Magic Number,Org.Mentalis.Network.ProxySocket,ProxyException,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\ProxyException.cs,Socks5ToString,The following statement contains a magic number: switch(socks5Error) {  				case 0:  					return "Connection succeeded.";  				case 1:  					return "General SOCKS server failure.";  				case 2:  					return "Connection not allowed by ruleset.";  				case 3:  					return "Network unreachable.";  				case 4:  					return "Host unreachable.";  				case 5:  					return "Connection refused.";  				case 6:  					return "TTL expired.";  				case 7:  					return "Command not supported.";  				case 8:  					return "Address type not supported.";  				default:  					return "Unspecified SOCKS error.";  			}
Magic Number,Org.Mentalis.Network.ProxySocket,ProxyException,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\ProxyException.cs,Socks5ToString,The following statement contains a magic number: switch(socks5Error) {  				case 0:  					return "Connection succeeded.";  				case 1:  					return "General SOCKS server failure.";  				case 2:  					return "Connection not allowed by ruleset.";  				case 3:  					return "Network unreachable.";  				case 4:  					return "Host unreachable.";  				case 5:  					return "Connection refused.";  				case 6:  					return "TTL expired.";  				case 7:  					return "Command not supported.";  				case 8:  					return "Address type not supported.";  				default:  					return "Unspecified SOCKS error.";  			}
Magic Number,Org.Mentalis.Network.ProxySocket,ProxyException,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\ProxyException.cs,Socks5ToString,The following statement contains a magic number: switch(socks5Error) {  				case 0:  					return "Connection succeeded.";  				case 1:  					return "General SOCKS server failure.";  				case 2:  					return "Connection not allowed by ruleset.";  				case 3:  					return "Network unreachable.";  				case 4:  					return "Host unreachable.";  				case 5:  					return "Connection refused.";  				case 6:  					return "TTL expired.";  				case 7:  					return "Command not supported.";  				case 8:  					return "Address type not supported.";  				default:  					return "Unspecified SOCKS error.";  			}
Magic Number,Org.Mentalis.Network.ProxySocket,ProxySocket,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\ProxySocket.cs,Connect,The following statement contains a magic number: if (port <= 0 || port > 65535)                  throw new ArgumentException("Invalid port.");
Magic Number,Org.Mentalis.Network.ProxySocket,ProxySocket,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\ProxySocket.cs,BeginConnect,The following statement contains a magic number: if (port <= 0 || port > 65535)                  throw new ArgumentException();
Magic Number,Org.Mentalis.Network.ProxySocket,Socks4Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks4Handler.cs,GetHostPortBytes,The following statement contains a magic number: if (port <= 0 || port > 65535)  				throw new ArgumentException();
Magic Number,Org.Mentalis.Network.ProxySocket,Socks4Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks4Handler.cs,GetHostPortBytes,The following statement contains a magic number: byte [] connect = new byte[10 + Username.Length + host.Length];
Magic Number,Org.Mentalis.Network.ProxySocket,Socks4Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks4Handler.cs,GetHostPortBytes,The following statement contains a magic number: connect[0] = 4;
Magic Number,Org.Mentalis.Network.ProxySocket,Socks4Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks4Handler.cs,GetHostPortBytes,The following statement contains a magic number: Array.Copy(PortToBytes(port)' 0' connect' 2' 2);
Magic Number,Org.Mentalis.Network.ProxySocket,Socks4Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks4Handler.cs,GetHostPortBytes,The following statement contains a magic number: Array.Copy(PortToBytes(port)' 0' connect' 2' 2);
Magic Number,Org.Mentalis.Network.ProxySocket,Socks4Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks4Handler.cs,GetHostPortBytes,The following statement contains a magic number: connect[4] = connect[5] = connect[6] = 0;
Magic Number,Org.Mentalis.Network.ProxySocket,Socks4Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks4Handler.cs,GetHostPortBytes,The following statement contains a magic number: connect[4] = connect[5] = connect[6] = 0;
Magic Number,Org.Mentalis.Network.ProxySocket,Socks4Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks4Handler.cs,GetHostPortBytes,The following statement contains a magic number: connect[4] = connect[5] = connect[6] = 0;
Magic Number,Org.Mentalis.Network.ProxySocket,Socks4Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks4Handler.cs,GetHostPortBytes,The following statement contains a magic number: connect[7] = 1;
Magic Number,Org.Mentalis.Network.ProxySocket,Socks4Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks4Handler.cs,GetHostPortBytes,The following statement contains a magic number: Array.Copy(Encoding.ASCII.GetBytes(Username)' 0' connect' 8' Username.Length);
Magic Number,Org.Mentalis.Network.ProxySocket,Socks4Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks4Handler.cs,GetHostPortBytes,The following statement contains a magic number: connect[8 + Username.Length] = 0;
Magic Number,Org.Mentalis.Network.ProxySocket,Socks4Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks4Handler.cs,GetHostPortBytes,The following statement contains a magic number: Array.Copy(Encoding.ASCII.GetBytes(host)' 0' connect' 9 + Username.Length' host.Length);
Magic Number,Org.Mentalis.Network.ProxySocket,Socks4Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks4Handler.cs,GetHostPortBytes,The following statement contains a magic number: connect[9 + Username.Length + host.Length] = 0;
Magic Number,Org.Mentalis.Network.ProxySocket,Socks4Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks4Handler.cs,GetEndPointBytes,The following statement contains a magic number: byte [] connect = new byte[9 + Username.Length];
Magic Number,Org.Mentalis.Network.ProxySocket,Socks4Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks4Handler.cs,GetEndPointBytes,The following statement contains a magic number: connect[0] = 4;
Magic Number,Org.Mentalis.Network.ProxySocket,Socks4Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks4Handler.cs,GetEndPointBytes,The following statement contains a magic number: Array.Copy(PortToBytes(remoteEP.Port)' 0' connect' 2' 2);
Magic Number,Org.Mentalis.Network.ProxySocket,Socks4Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks4Handler.cs,GetEndPointBytes,The following statement contains a magic number: Array.Copy(PortToBytes(remoteEP.Port)' 0' connect' 2' 2);
Magic Number,Org.Mentalis.Network.ProxySocket,Socks4Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks4Handler.cs,GetEndPointBytes,The following statement contains a magic number: Array.Copy(remoteEP.Address.GetAddressBytes()' 0' connect' 4' 4);
Magic Number,Org.Mentalis.Network.ProxySocket,Socks4Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks4Handler.cs,GetEndPointBytes,The following statement contains a magic number: Array.Copy(remoteEP.Address.GetAddressBytes()' 0' connect' 4' 4);
Magic Number,Org.Mentalis.Network.ProxySocket,Socks4Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks4Handler.cs,GetEndPointBytes,The following statement contains a magic number: Array.Copy(Encoding.ASCII.GetBytes(Username)' 0' connect' 8' Username.Length);
Magic Number,Org.Mentalis.Network.ProxySocket,Socks4Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks4Handler.cs,GetEndPointBytes,The following statement contains a magic number: connect[8 + Username.Length] = 0;
Magic Number,Org.Mentalis.Network.ProxySocket,Socks4Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks4Handler.cs,Negotiate,The following statement contains a magic number: if (connect.Length < 2)  				throw new ArgumentException();
Magic Number,Org.Mentalis.Network.ProxySocket,Socks4Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks4Handler.cs,Negotiate,The following statement contains a magic number: byte [] buffer = ReadBytes(8);
Magic Number,Org.Mentalis.Network.ProxySocket,Socks4Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks4Handler.cs,Negotiate,The following statement contains a magic number: if (buffer[1] != 90) {  				Server.Close();  				throw new ProxyException("Negotiation failed.");	  			}
Magic Number,Org.Mentalis.Network.ProxySocket,Socks4Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks4Handler.cs,OnSent,The following statement contains a magic number: try {  				Buffer = new byte[8];  				Received = 0;  				Server.BeginReceive(Buffer' 0' Buffer.Length' SocketFlags.None' new AsyncCallback(this.OnReceive)' Server);  			} catch (Exception e) {  				ProtocolComplete(e);  			}
Magic Number,Org.Mentalis.Network.ProxySocket,Socks4Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks4Handler.cs,OnReceive,The following statement contains a magic number: try {  				int received = Server.EndReceive(ar);  				if (received <= 0) {  					ProtocolComplete(new SocketException());  					return;  				}  				Received += received;  				if (Received == 8) {  					if (Buffer[1] == 90)  						ProtocolComplete(null);  					else {  						Server.Close();  						ProtocolComplete(new ProxyException("Negotiation failed."));  					}  				} else {  					Server.BeginReceive(Buffer' Received' Buffer.Length - Received' SocketFlags.None' new AsyncCallback(this.OnReceive)' Server);  				}  			} catch (Exception e) {  				ProtocolComplete(e);  			}
Magic Number,Org.Mentalis.Network.ProxySocket,Socks4Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks4Handler.cs,OnReceive,The following statement contains a magic number: try {  				int received = Server.EndReceive(ar);  				if (received <= 0) {  					ProtocolComplete(new SocketException());  					return;  				}  				Received += received;  				if (Received == 8) {  					if (Buffer[1] == 90)  						ProtocolComplete(null);  					else {  						Server.Close();  						ProtocolComplete(new ProxyException("Negotiation failed."));  					}  				} else {  					Server.BeginReceive(Buffer' Received' Buffer.Length - Received' SocketFlags.None' new AsyncCallback(this.OnReceive)' Server);  				}  			} catch (Exception e) {  				ProtocolComplete(e);  			}
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,Authenticate,The following statement contains a magic number: Server.Send(new byte [] {5' 2' 0' 2});
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,Authenticate,The following statement contains a magic number: Server.Send(new byte [] {5' 2' 0' 2});
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,Authenticate,The following statement contains a magic number: Server.Send(new byte [] {5' 2' 0' 2});
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,Authenticate,The following statement contains a magic number: byte[] buffer = ReadBytes(2);
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,Authenticate,The following statement contains a magic number: if (buffer[1] == 255)  				throw new ProxyException("No authentication method accepted.");
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,Authenticate,The following statement contains a magic number: switch (buffer[1]) {  				case 0:  					authenticate = new AuthNone(Server);  					break;  				case 2:  					authenticate = new AuthUserPass(Server' Username' Password);  					break;  				default:  					throw new ProtocolViolationException();  			}
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,GetHostPortBytes,The following statement contains a magic number: if (port <= 0 || port > 65535 || host.Length > 255)  				throw new ArgumentException();
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,GetHostPortBytes,The following statement contains a magic number: if (port <= 0 || port > 65535 || host.Length > 255)  				throw new ArgumentException();
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,GetHostPortBytes,The following statement contains a magic number: byte [] connect = new byte[7 + host.Length];
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,GetHostPortBytes,The following statement contains a magic number: connect[0] = 5;
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,GetHostPortBytes,The following statement contains a magic number: connect[2] = 0;
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,GetHostPortBytes,The following statement contains a magic number: connect[3] = 3;
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,GetHostPortBytes,The following statement contains a magic number: connect[3] = 3;
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,GetHostPortBytes,The following statement contains a magic number: connect[4] = (byte)host.Length;
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,GetHostPortBytes,The following statement contains a magic number: Array.Copy(Encoding.ASCII.GetBytes(host)' 0' connect' 5' host.Length);
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,GetHostPortBytes,The following statement contains a magic number: Array.Copy(PortToBytes(port)' 0' connect' host.Length + 5' 2);
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,GetHostPortBytes,The following statement contains a magic number: Array.Copy(PortToBytes(port)' 0' connect' host.Length + 5' 2);
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,GetEndPointBytes,The following statement contains a magic number: byte [] connect = new byte[10];
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,GetEndPointBytes,The following statement contains a magic number: connect[0] = 5;
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,GetEndPointBytes,The following statement contains a magic number: connect[2] = 0;
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,GetEndPointBytes,The following statement contains a magic number: connect[3] = 1;
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,GetEndPointBytes,The following statement contains a magic number: Array.Copy(remoteEP.Address.GetAddressBytes()' 0' connect' 4' 4);
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,GetEndPointBytes,The following statement contains a magic number: Array.Copy(remoteEP.Address.GetAddressBytes()' 0' connect' 4' 4);
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,GetEndPointBytes,The following statement contains a magic number: Array.Copy(PortToBytes(remoteEP.Port)' 0' connect' 8' 2);
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,GetEndPointBytes,The following statement contains a magic number: Array.Copy(PortToBytes(remoteEP.Port)' 0' connect' 8' 2);
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,Negotiate,The following statement contains a magic number: byte[] buffer = ReadBytes(4);
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,Negotiate,The following statement contains a magic number: switch(buffer[3]) {  				case 1:  					buffer = ReadBytes(6); //IPv4 address with port  					break;  				case 3:  					buffer = ReadBytes(1);  					buffer = ReadBytes(buffer[0] + 2); //domain name with port  					break;  				case 4:  					buffer = ReadBytes(18); //IPv6 address with port  					break;  				default:  					Server.Close();  					throw new ProtocolViolationException();  			}
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,Negotiate,The following statement contains a magic number: switch(buffer[3]) {  				case 1:  					buffer = ReadBytes(6); //IPv4 address with port  					break;  				case 3:  					buffer = ReadBytes(1);  					buffer = ReadBytes(buffer[0] + 2); //domain name with port  					break;  				case 4:  					buffer = ReadBytes(18); //IPv6 address with port  					break;  				default:  					Server.Close();  					throw new ProtocolViolationException();  			}
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,Negotiate,The following statement contains a magic number: switch(buffer[3]) {  				case 1:  					buffer = ReadBytes(6); //IPv4 address with port  					break;  				case 3:  					buffer = ReadBytes(1);  					buffer = ReadBytes(buffer[0] + 2); //domain name with port  					break;  				case 4:  					buffer = ReadBytes(18); //IPv6 address with port  					break;  				default:  					Server.Close();  					throw new ProtocolViolationException();  			}
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,Negotiate,The following statement contains a magic number: switch(buffer[3]) {  				case 1:  					buffer = ReadBytes(6); //IPv4 address with port  					break;  				case 3:  					buffer = ReadBytes(1);  					buffer = ReadBytes(buffer[0] + 2); //domain name with port  					break;  				case 4:  					buffer = ReadBytes(18); //IPv6 address with port  					break;  				default:  					Server.Close();  					throw new ProtocolViolationException();  			}
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,Negotiate,The following statement contains a magic number: switch(buffer[3]) {  				case 1:  					buffer = ReadBytes(6); //IPv4 address with port  					break;  				case 3:  					buffer = ReadBytes(1);  					buffer = ReadBytes(buffer[0] + 2); //domain name with port  					break;  				case 4:  					buffer = ReadBytes(18); //IPv6 address with port  					break;  				default:  					Server.Close();  					throw new ProtocolViolationException();  			}
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,Negotiate,The following statement contains a magic number: switch(buffer[3]) {  				case 1:  					buffer = ReadBytes(6); //IPv4 address with port  					break;  				case 3:  					buffer = ReadBytes(1);  					buffer = ReadBytes(buffer[0] + 2); //domain name with port  					break;  				case 4:  					buffer = ReadBytes(18); //IPv6 address with port  					break;  				default:  					Server.Close();  					throw new ProtocolViolationException();  			}
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,OnConnect,The following statement contains a magic number: try {  				Server.BeginSend(new byte [] {5' 2' 0' 2}' 0' 4' SocketFlags.None' new AsyncCallback(this.OnAuthSent)' Server);  			} catch (Exception e) {  				ProtocolComplete(e);  			}
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,OnConnect,The following statement contains a magic number: try {  				Server.BeginSend(new byte [] {5' 2' 0' 2}' 0' 4' SocketFlags.None' new AsyncCallback(this.OnAuthSent)' Server);  			} catch (Exception e) {  				ProtocolComplete(e);  			}
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,OnConnect,The following statement contains a magic number: try {  				Server.BeginSend(new byte [] {5' 2' 0' 2}' 0' 4' SocketFlags.None' new AsyncCallback(this.OnAuthSent)' Server);  			} catch (Exception e) {  				ProtocolComplete(e);  			}
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,OnConnect,The following statement contains a magic number: try {  				Server.BeginSend(new byte [] {5' 2' 0' 2}' 0' 4' SocketFlags.None' new AsyncCallback(this.OnAuthSent)' Server);  			} catch (Exception e) {  				ProtocolComplete(e);  			}
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,OnAuthSent,The following statement contains a magic number: try {  				Buffer = new byte[1024];  				Received = 0;  				Server.BeginReceive(Buffer' 0' Buffer.Length' SocketFlags.None' new AsyncCallback(this.OnAuthReceive)' Server);  			} catch (Exception e) {  				ProtocolComplete(e);  			}
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,OnAuthReceive,The following statement contains a magic number: try {  				if (Received < 2) {  					Server.BeginReceive(Buffer' Received' Buffer.Length - Received' SocketFlags.None' new AsyncCallback(this.OnAuthReceive)' Server);  				} else {  					AuthMethod authenticate;  					switch(Buffer[1]) {  						case 0:  							authenticate = new AuthNone(Server);  							break;  						case 2:  							authenticate = new AuthUserPass(Server' Username' Password);  							break;  						default:  							ProtocolComplete(new SocketException());  							return;  					}  					authenticate.BeginAuthenticate(new HandShakeComplete(this.OnAuthenticated));  				}  			} catch (Exception e) {  				ProtocolComplete(e);  			}
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,OnAuthReceive,The following statement contains a magic number: try {  				if (Received < 2) {  					Server.BeginReceive(Buffer' Received' Buffer.Length - Received' SocketFlags.None' new AsyncCallback(this.OnAuthReceive)' Server);  				} else {  					AuthMethod authenticate;  					switch(Buffer[1]) {  						case 0:  							authenticate = new AuthNone(Server);  							break;  						case 2:  							authenticate = new AuthUserPass(Server' Username' Password);  							break;  						default:  							ProtocolComplete(new SocketException());  							return;  					}  					authenticate.BeginAuthenticate(new HandShakeComplete(this.OnAuthenticated));  				}  			} catch (Exception e) {  				ProtocolComplete(e);  			}
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,OnSent,The following statement contains a magic number: try {  				Buffer = new byte[5];  				Received = 0;  				Server.BeginReceive(Buffer' 0' Buffer.Length' SocketFlags.None' new AsyncCallback(this.OnReceive)' Server);  			} catch (Exception e) {  				ProtocolComplete(e);  			}
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,ProcessReply,The following statement contains a magic number: switch(buffer[3]) {  				case 1:  					Buffer = new byte[5]; //IPv4 address with port - 1 byte  					break;  				case 3:  					Buffer = new byte[buffer[4] + 2]; //domain name with port  					break;  				case 4:  					buffer = new byte[17]; //IPv6 address with port - 1 byte  					break;  				default:  					throw new ProtocolViolationException();  			}
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,ProcessReply,The following statement contains a magic number: switch(buffer[3]) {  				case 1:  					Buffer = new byte[5]; //IPv4 address with port - 1 byte  					break;  				case 3:  					Buffer = new byte[buffer[4] + 2]; //domain name with port  					break;  				case 4:  					buffer = new byte[17]; //IPv6 address with port - 1 byte  					break;  				default:  					throw new ProtocolViolationException();  			}
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,ProcessReply,The following statement contains a magic number: switch(buffer[3]) {  				case 1:  					Buffer = new byte[5]; //IPv4 address with port - 1 byte  					break;  				case 3:  					Buffer = new byte[buffer[4] + 2]; //domain name with port  					break;  				case 4:  					buffer = new byte[17]; //IPv6 address with port - 1 byte  					break;  				default:  					throw new ProtocolViolationException();  			}
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,ProcessReply,The following statement contains a magic number: switch(buffer[3]) {  				case 1:  					Buffer = new byte[5]; //IPv4 address with port - 1 byte  					break;  				case 3:  					Buffer = new byte[buffer[4] + 2]; //domain name with port  					break;  				case 4:  					buffer = new byte[17]; //IPv6 address with port - 1 byte  					break;  				default:  					throw new ProtocolViolationException();  			}
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,ProcessReply,The following statement contains a magic number: switch(buffer[3]) {  				case 1:  					Buffer = new byte[5]; //IPv4 address with port - 1 byte  					break;  				case 3:  					Buffer = new byte[buffer[4] + 2]; //domain name with port  					break;  				case 4:  					buffer = new byte[17]; //IPv6 address with port - 1 byte  					break;  				default:  					throw new ProtocolViolationException();  			}
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,ProcessReply,The following statement contains a magic number: switch(buffer[3]) {  				case 1:  					Buffer = new byte[5]; //IPv4 address with port - 1 byte  					break;  				case 3:  					Buffer = new byte[buffer[4] + 2]; //domain name with port  					break;  				case 4:  					buffer = new byte[17]; //IPv6 address with port - 1 byte  					break;  				default:  					throw new ProtocolViolationException();  			}
Magic Number,Org.Mentalis.Network.ProxySocket,Socks5Handler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\Socks5Handler.cs,ProcessReply,The following statement contains a magic number: switch(buffer[3]) {  				case 1:  					Buffer = new byte[5]; //IPv4 address with port - 1 byte  					break;  				case 3:  					Buffer = new byte[buffer[4] + 2]; //domain name with port  					break;  				case 4:  					buffer = new byte[17]; //IPv6 address with port - 1 byte  					break;  				default:  					throw new ProtocolViolationException();  			}
Magic Number,Org.Mentalis.Network.ProxySocket,SocksHandler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\SocksHandler.cs,PortToBytes,The following statement contains a magic number: byte [] ret = new byte[2];
Magic Number,Org.Mentalis.Network.ProxySocket,SocksHandler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\SocksHandler.cs,PortToBytes,The following statement contains a magic number: ret[0] = (byte)(port / 256);
Magic Number,Org.Mentalis.Network.ProxySocket,SocksHandler,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\SocksHandler.cs,PortToBytes,The following statement contains a magic number: ret[1] = (byte)(port % 256);
Magic Number,GMap.NET.MapProviders,ArcGIS_DarbAE_Q2_2011_NAVTQ_Eng_V5_MapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\ArcGIS\ArcGIS_DarbAE_Q2_2011_NAVTQ_Eng_V5_MapProvider.cs,ArcGIS_DarbAE_Q2_2011_NAVTQ_Eng_V5_MapProvider,The following statement contains a magic number: MaxZoom = 12;
Magic Number,GMap.NET.MapProviders,ArcGIS_DarbAE_Q2_2011_NAVTQ_Eng_V5_MapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\ArcGIS\ArcGIS_DarbAE_Q2_2011_NAVTQ_Eng_V5_MapProvider.cs,ArcGIS_DarbAE_Q2_2011_NAVTQ_Eng_V5_MapProvider,The following statement contains a magic number: Area = RectLatLng.FromLTRB(49.8846923723311' 28.0188609585523' 58.2247031977662' 21.154115956732);
Magic Number,GMap.NET.MapProviders,ArcGIS_DarbAE_Q2_2011_NAVTQ_Eng_V5_MapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\ArcGIS\ArcGIS_DarbAE_Q2_2011_NAVTQ_Eng_V5_MapProvider.cs,ArcGIS_DarbAE_Q2_2011_NAVTQ_Eng_V5_MapProvider,The following statement contains a magic number: Area = RectLatLng.FromLTRB(49.8846923723311' 28.0188609585523' 58.2247031977662' 21.154115956732);
Magic Number,GMap.NET.MapProviders,ArcGIS_DarbAE_Q2_2011_NAVTQ_Eng_V5_MapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\ArcGIS\ArcGIS_DarbAE_Q2_2011_NAVTQ_Eng_V5_MapProvider.cs,ArcGIS_DarbAE_Q2_2011_NAVTQ_Eng_V5_MapProvider,The following statement contains a magic number: Area = RectLatLng.FromLTRB(49.8846923723311' 28.0188609585523' 58.2247031977662' 21.154115956732);
Magic Number,GMap.NET.MapProviders,ArcGIS_DarbAE_Q2_2011_NAVTQ_Eng_V5_MapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\ArcGIS\ArcGIS_DarbAE_Q2_2011_NAVTQ_Eng_V5_MapProvider.cs,ArcGIS_DarbAE_Q2_2011_NAVTQ_Eng_V5_MapProvider,The following statement contains a magic number: Area = RectLatLng.FromLTRB(49.8846923723311' 28.0188609585523' 58.2247031977662' 21.154115956732);
Magic Number,GMap.NET.MapProviders,BingMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingMapProvider.cs,OnInitialized,The following statement contains a magic number: if(!init)           {              try              {                 var key = ClientKey;                   // to avoid registration stuff' default key                 if(TryGetDefaultKey && string.IsNullOrEmpty(ClientKey))                 {                    //old: Vx8dmDflxzT02jJUG8bEjMU07Xr9QWRpPTeRuAZTC1uZFQdDCvK/jUbHKdyHEWj4LvccTPoKofDHtzHsWu/0xuo5u2Y9rj88                    key = Stuff.GString("Jq7FrGTyaYqcrvv9ugBKv4OVSKnmzpigqZtdvtcDdgZexmOZ2RugOexFSmVzTAhOWiHrdhFoNCoySnNF3MyyIOo5u2Y9rj88");                 }                   #region -- try get sesion key --                 if(!string.IsNullOrEmpty(key))                 {                    string keyResponse = GMaps.Instance.UseUrlCache ? Cache.Instance.GetContent("BingLoggingServiceV1" + key' CacheType.UrlCache' TimeSpan.FromHours(8)) : string.Empty;                      if(string.IsNullOrEmpty(keyResponse))                    {                       // Bing Maps WPF Control                       // http://dev.virtualearth.net/webservices/v1/LoggingService/LoggingService.svc/Log?entry=0&auth={0}&fmt=1&type=3&group=MapControl&name=WPF&version=1.0.0.0&session=00000000-0000-0000-0000-000000000000&mkt=en-US                         keyResponse = GetContentUsingHttp(string.Format("http://dev.virtualearth.net/webservices/v1/LoggingService/LoggingService.svc/Log?entry=0&fmt=1&type=3&group=MapControl&name=AJAX&mkt=en-us&auth={0}&jsonp=microsoftMapsNetworkCallback"' key));                         if(!string.IsNullOrEmpty(keyResponse) && keyResponse.Contains("ValidCredentials"))                       {                          if(GMaps.Instance.UseUrlCache)                          {                             Cache.Instance.SaveContent("BingLoggingServiceV1" + key' CacheType.UrlCache' keyResponse);                          }                       }                    }                      if(!string.IsNullOrEmpty(keyResponse) && keyResponse.Contains("sessionId") && keyResponse.Contains("ValidCredentials"))                    {                       // microsoftMapsNetworkCallback({"sessionId" : "xxx"' "authenticationResultCode" : "ValidCredentials"})                         SessionId = keyResponse.Split(''')[0].Split(':')[1].Replace("\""' string.Empty).Replace(" "' string.Empty);                       Debug.WriteLine("GMapProviders.BingMap.SessionId: " + SessionId);                    }                    else                    {                       Debug.WriteLine("BingLoggingServiceV1: " + keyResponse);                    }                 }                 #endregion                   // supporting old road                 if(TryCorrectVersion && DisableDynamicTileUrlFormat)                 {                    #region -- get the version --                    string url = @"http://www.bing.com/maps";                    string html = GMaps.Instance.UseUrlCache ? Cache.Instance.GetContent(url' CacheType.UrlCache' TimeSpan.FromDays(7)) : string.Empty;                      if(string.IsNullOrEmpty(html))                    {                       html = GetContentUsingHttp(url);                       if(!string.IsNullOrEmpty(html))                       {                          if(GMaps.Instance.UseUrlCache)                          {                             Cache.Instance.SaveContent(url' CacheType.UrlCache' html);                          }                       }                    }                      if(!string.IsNullOrEmpty(html))                    {                       #region -- match versions --                         Regex reg = new Regex("tilegeneration:(\\d*)"' RegexOptions.IgnoreCase);                       Match mat = reg.Match(html);                       if(mat.Success)                       {                          GroupCollection gc = mat.Groups;                          int count = gc.Count;                          if(count == 2)                          {                             string ver = gc[1].Value;                             string old = GMapProviders.BingMap.Version;                             if(ver != old)                             {                                GMapProviders.BingMap.Version = ver;                                GMapProviders.BingSatelliteMap.Version = ver;                                GMapProviders.BingHybridMap.Version = ver;  #if DEBUG                                Debug.WriteLine("GMapProviders.BingMap.Version: " + ver + "' old: " + old + "' consider updating source");                                if(Debugger.IsAttached)                                {                                   Thread.Sleep(5555);                                }  #endif                             }                             else                             {                                Debug.WriteLine("GMapProviders.BingMap.Version: " + ver + "' OK");                             }                          }                       }                       #endregion                    }                    #endregion                 }                   init = true; // try it only once              }              catch(Exception ex)              {                 Debug.WriteLine("TryCorrectBingVersions failed: " + ex);              }           }
Magic Number,GMap.NET.MapProviders,BingMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingMapProvider.cs,OnInitialized,The following statement contains a magic number: if(!init)           {              try              {                 var key = ClientKey;                   // to avoid registration stuff' default key                 if(TryGetDefaultKey && string.IsNullOrEmpty(ClientKey))                 {                    //old: Vx8dmDflxzT02jJUG8bEjMU07Xr9QWRpPTeRuAZTC1uZFQdDCvK/jUbHKdyHEWj4LvccTPoKofDHtzHsWu/0xuo5u2Y9rj88                    key = Stuff.GString("Jq7FrGTyaYqcrvv9ugBKv4OVSKnmzpigqZtdvtcDdgZexmOZ2RugOexFSmVzTAhOWiHrdhFoNCoySnNF3MyyIOo5u2Y9rj88");                 }                   #region -- try get sesion key --                 if(!string.IsNullOrEmpty(key))                 {                    string keyResponse = GMaps.Instance.UseUrlCache ? Cache.Instance.GetContent("BingLoggingServiceV1" + key' CacheType.UrlCache' TimeSpan.FromHours(8)) : string.Empty;                      if(string.IsNullOrEmpty(keyResponse))                    {                       // Bing Maps WPF Control                       // http://dev.virtualearth.net/webservices/v1/LoggingService/LoggingService.svc/Log?entry=0&auth={0}&fmt=1&type=3&group=MapControl&name=WPF&version=1.0.0.0&session=00000000-0000-0000-0000-000000000000&mkt=en-US                         keyResponse = GetContentUsingHttp(string.Format("http://dev.virtualearth.net/webservices/v1/LoggingService/LoggingService.svc/Log?entry=0&fmt=1&type=3&group=MapControl&name=AJAX&mkt=en-us&auth={0}&jsonp=microsoftMapsNetworkCallback"' key));                         if(!string.IsNullOrEmpty(keyResponse) && keyResponse.Contains("ValidCredentials"))                       {                          if(GMaps.Instance.UseUrlCache)                          {                             Cache.Instance.SaveContent("BingLoggingServiceV1" + key' CacheType.UrlCache' keyResponse);                          }                       }                    }                      if(!string.IsNullOrEmpty(keyResponse) && keyResponse.Contains("sessionId") && keyResponse.Contains("ValidCredentials"))                    {                       // microsoftMapsNetworkCallback({"sessionId" : "xxx"' "authenticationResultCode" : "ValidCredentials"})                         SessionId = keyResponse.Split(''')[0].Split(':')[1].Replace("\""' string.Empty).Replace(" "' string.Empty);                       Debug.WriteLine("GMapProviders.BingMap.SessionId: " + SessionId);                    }                    else                    {                       Debug.WriteLine("BingLoggingServiceV1: " + keyResponse);                    }                 }                 #endregion                   // supporting old road                 if(TryCorrectVersion && DisableDynamicTileUrlFormat)                 {                    #region -- get the version --                    string url = @"http://www.bing.com/maps";                    string html = GMaps.Instance.UseUrlCache ? Cache.Instance.GetContent(url' CacheType.UrlCache' TimeSpan.FromDays(7)) : string.Empty;                      if(string.IsNullOrEmpty(html))                    {                       html = GetContentUsingHttp(url);                       if(!string.IsNullOrEmpty(html))                       {                          if(GMaps.Instance.UseUrlCache)                          {                             Cache.Instance.SaveContent(url' CacheType.UrlCache' html);                          }                       }                    }                      if(!string.IsNullOrEmpty(html))                    {                       #region -- match versions --                         Regex reg = new Regex("tilegeneration:(\\d*)"' RegexOptions.IgnoreCase);                       Match mat = reg.Match(html);                       if(mat.Success)                       {                          GroupCollection gc = mat.Groups;                          int count = gc.Count;                          if(count == 2)                          {                             string ver = gc[1].Value;                             string old = GMapProviders.BingMap.Version;                             if(ver != old)                             {                                GMapProviders.BingMap.Version = ver;                                GMapProviders.BingSatelliteMap.Version = ver;                                GMapProviders.BingHybridMap.Version = ver;  #if DEBUG                                Debug.WriteLine("GMapProviders.BingMap.Version: " + ver + "' old: " + old + "' consider updating source");                                if(Debugger.IsAttached)                                {                                   Thread.Sleep(5555);                                }  #endif                             }                             else                             {                                Debug.WriteLine("GMapProviders.BingMap.Version: " + ver + "' OK");                             }                          }                       }                       #endregion                    }                    #endregion                 }                   init = true; // try it only once              }              catch(Exception ex)              {                 Debug.WriteLine("TryCorrectBingVersions failed: " + ex);              }           }
Magic Number,GMap.NET.MapProviders,BingMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingMapProvider.cs,OnInitialized,The following statement contains a magic number: if(!init)           {              try              {                 var key = ClientKey;                   // to avoid registration stuff' default key                 if(TryGetDefaultKey && string.IsNullOrEmpty(ClientKey))                 {                    //old: Vx8dmDflxzT02jJUG8bEjMU07Xr9QWRpPTeRuAZTC1uZFQdDCvK/jUbHKdyHEWj4LvccTPoKofDHtzHsWu/0xuo5u2Y9rj88                    key = Stuff.GString("Jq7FrGTyaYqcrvv9ugBKv4OVSKnmzpigqZtdvtcDdgZexmOZ2RugOexFSmVzTAhOWiHrdhFoNCoySnNF3MyyIOo5u2Y9rj88");                 }                   #region -- try get sesion key --                 if(!string.IsNullOrEmpty(key))                 {                    string keyResponse = GMaps.Instance.UseUrlCache ? Cache.Instance.GetContent("BingLoggingServiceV1" + key' CacheType.UrlCache' TimeSpan.FromHours(8)) : string.Empty;                      if(string.IsNullOrEmpty(keyResponse))                    {                       // Bing Maps WPF Control                       // http://dev.virtualearth.net/webservices/v1/LoggingService/LoggingService.svc/Log?entry=0&auth={0}&fmt=1&type=3&group=MapControl&name=WPF&version=1.0.0.0&session=00000000-0000-0000-0000-000000000000&mkt=en-US                         keyResponse = GetContentUsingHttp(string.Format("http://dev.virtualearth.net/webservices/v1/LoggingService/LoggingService.svc/Log?entry=0&fmt=1&type=3&group=MapControl&name=AJAX&mkt=en-us&auth={0}&jsonp=microsoftMapsNetworkCallback"' key));                         if(!string.IsNullOrEmpty(keyResponse) && keyResponse.Contains("ValidCredentials"))                       {                          if(GMaps.Instance.UseUrlCache)                          {                             Cache.Instance.SaveContent("BingLoggingServiceV1" + key' CacheType.UrlCache' keyResponse);                          }                       }                    }                      if(!string.IsNullOrEmpty(keyResponse) && keyResponse.Contains("sessionId") && keyResponse.Contains("ValidCredentials"))                    {                       // microsoftMapsNetworkCallback({"sessionId" : "xxx"' "authenticationResultCode" : "ValidCredentials"})                         SessionId = keyResponse.Split(''')[0].Split(':')[1].Replace("\""' string.Empty).Replace(" "' string.Empty);                       Debug.WriteLine("GMapProviders.BingMap.SessionId: " + SessionId);                    }                    else                    {                       Debug.WriteLine("BingLoggingServiceV1: " + keyResponse);                    }                 }                 #endregion                   // supporting old road                 if(TryCorrectVersion && DisableDynamicTileUrlFormat)                 {                    #region -- get the version --                    string url = @"http://www.bing.com/maps";                    string html = GMaps.Instance.UseUrlCache ? Cache.Instance.GetContent(url' CacheType.UrlCache' TimeSpan.FromDays(7)) : string.Empty;                      if(string.IsNullOrEmpty(html))                    {                       html = GetContentUsingHttp(url);                       if(!string.IsNullOrEmpty(html))                       {                          if(GMaps.Instance.UseUrlCache)                          {                             Cache.Instance.SaveContent(url' CacheType.UrlCache' html);                          }                       }                    }                      if(!string.IsNullOrEmpty(html))                    {                       #region -- match versions --                         Regex reg = new Regex("tilegeneration:(\\d*)"' RegexOptions.IgnoreCase);                       Match mat = reg.Match(html);                       if(mat.Success)                       {                          GroupCollection gc = mat.Groups;                          int count = gc.Count;                          if(count == 2)                          {                             string ver = gc[1].Value;                             string old = GMapProviders.BingMap.Version;                             if(ver != old)                             {                                GMapProviders.BingMap.Version = ver;                                GMapProviders.BingSatelliteMap.Version = ver;                                GMapProviders.BingHybridMap.Version = ver;  #if DEBUG                                Debug.WriteLine("GMapProviders.BingMap.Version: " + ver + "' old: " + old + "' consider updating source");                                if(Debugger.IsAttached)                                {                                   Thread.Sleep(5555);                                }  #endif                             }                             else                             {                                Debug.WriteLine("GMapProviders.BingMap.Version: " + ver + "' OK");                             }                          }                       }                       #endregion                    }                    #endregion                 }                   init = true; // try it only once              }              catch(Exception ex)              {                 Debug.WriteLine("TryCorrectBingVersions failed: " + ex);              }           }
Magic Number,GMap.NET.MapProviders,BingMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingMapProvider.cs,OnInitialized,The following statement contains a magic number: if(!init)           {              try              {                 var key = ClientKey;                   // to avoid registration stuff' default key                 if(TryGetDefaultKey && string.IsNullOrEmpty(ClientKey))                 {                    //old: Vx8dmDflxzT02jJUG8bEjMU07Xr9QWRpPTeRuAZTC1uZFQdDCvK/jUbHKdyHEWj4LvccTPoKofDHtzHsWu/0xuo5u2Y9rj88                    key = Stuff.GString("Jq7FrGTyaYqcrvv9ugBKv4OVSKnmzpigqZtdvtcDdgZexmOZ2RugOexFSmVzTAhOWiHrdhFoNCoySnNF3MyyIOo5u2Y9rj88");                 }                   #region -- try get sesion key --                 if(!string.IsNullOrEmpty(key))                 {                    string keyResponse = GMaps.Instance.UseUrlCache ? Cache.Instance.GetContent("BingLoggingServiceV1" + key' CacheType.UrlCache' TimeSpan.FromHours(8)) : string.Empty;                      if(string.IsNullOrEmpty(keyResponse))                    {                       // Bing Maps WPF Control                       // http://dev.virtualearth.net/webservices/v1/LoggingService/LoggingService.svc/Log?entry=0&auth={0}&fmt=1&type=3&group=MapControl&name=WPF&version=1.0.0.0&session=00000000-0000-0000-0000-000000000000&mkt=en-US                         keyResponse = GetContentUsingHttp(string.Format("http://dev.virtualearth.net/webservices/v1/LoggingService/LoggingService.svc/Log?entry=0&fmt=1&type=3&group=MapControl&name=AJAX&mkt=en-us&auth={0}&jsonp=microsoftMapsNetworkCallback"' key));                         if(!string.IsNullOrEmpty(keyResponse) && keyResponse.Contains("ValidCredentials"))                       {                          if(GMaps.Instance.UseUrlCache)                          {                             Cache.Instance.SaveContent("BingLoggingServiceV1" + key' CacheType.UrlCache' keyResponse);                          }                       }                    }                      if(!string.IsNullOrEmpty(keyResponse) && keyResponse.Contains("sessionId") && keyResponse.Contains("ValidCredentials"))                    {                       // microsoftMapsNetworkCallback({"sessionId" : "xxx"' "authenticationResultCode" : "ValidCredentials"})                         SessionId = keyResponse.Split(''')[0].Split(':')[1].Replace("\""' string.Empty).Replace(" "' string.Empty);                       Debug.WriteLine("GMapProviders.BingMap.SessionId: " + SessionId);                    }                    else                    {                       Debug.WriteLine("BingLoggingServiceV1: " + keyResponse);                    }                 }                 #endregion                   // supporting old road                 if(TryCorrectVersion && DisableDynamicTileUrlFormat)                 {                    #region -- get the version --                    string url = @"http://www.bing.com/maps";                    string html = GMaps.Instance.UseUrlCache ? Cache.Instance.GetContent(url' CacheType.UrlCache' TimeSpan.FromDays(7)) : string.Empty;                      if(string.IsNullOrEmpty(html))                    {                       html = GetContentUsingHttp(url);                       if(!string.IsNullOrEmpty(html))                       {                          if(GMaps.Instance.UseUrlCache)                          {                             Cache.Instance.SaveContent(url' CacheType.UrlCache' html);                          }                       }                    }                      if(!string.IsNullOrEmpty(html))                    {                       #region -- match versions --                         Regex reg = new Regex("tilegeneration:(\\d*)"' RegexOptions.IgnoreCase);                       Match mat = reg.Match(html);                       if(mat.Success)                       {                          GroupCollection gc = mat.Groups;                          int count = gc.Count;                          if(count == 2)                          {                             string ver = gc[1].Value;                             string old = GMapProviders.BingMap.Version;                             if(ver != old)                             {                                GMapProviders.BingMap.Version = ver;                                GMapProviders.BingSatelliteMap.Version = ver;                                GMapProviders.BingHybridMap.Version = ver;  #if DEBUG                                Debug.WriteLine("GMapProviders.BingMap.Version: " + ver + "' old: " + old + "' consider updating source");                                if(Debugger.IsAttached)                                {                                   Thread.Sleep(5555);                                }  #endif                             }                             else                             {                                Debug.WriteLine("GMapProviders.BingMap.Version: " + ver + "' OK");                             }                          }                       }                       #endregion                    }                    #endregion                 }                   init = true; // try it only once              }              catch(Exception ex)              {                 Debug.WriteLine("TryCorrectBingVersions failed: " + ex);              }           }
Magic Number,GMap.NET.MapProviders,BingMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingMapProvider.cs,GetTileUrl,The following statement contains a magic number: if(!string.IsNullOrEmpty(SessionId))           {              try              {                 string url = "http://dev.virtualearth.net/REST/V1/Imagery/Metadata/" + imageryType + "?output=xml&key=" + SessionId;                   string r = GMaps.Instance.UseUrlCache ? Cache.Instance.GetContent("GetTileUrl" + imageryType' CacheType.UrlCache' TimeSpan.FromDays(7)) : string.Empty;                 bool cache = false;                   if(string.IsNullOrEmpty(r))                 {                    r = GetContentUsingHttp(url);                    cache = true;                 }                   if(!string.IsNullOrEmpty(r))                 {                    XmlDocument doc = new XmlDocument();                    doc.LoadXml(r);                      XmlNode xn = doc["Response"];                    string statuscode = xn["StatusCode"].InnerText;                    if(string.Compare(statuscode' "200"' true) == 0)                    {                       xn = xn["ResourceSets"]["ResourceSet"]["Resources"];                       XmlNodeList xnl = xn.ChildNodes;                       foreach(XmlNode xno in xnl)                       {                          XmlNode imageUrl = xno["ImageUrl"];                            if(imageUrl != null && !string.IsNullOrEmpty(imageUrl.InnerText))                          {                             if(cache && GMaps.Instance.UseUrlCache)                             {                                Cache.Instance.SaveContent("GetTileUrl" + imageryType' CacheType.UrlCache' r);                             }                               var baseTileUrl = imageUrl.InnerText;                               if(baseTileUrl.Contains("{key}") || baseTileUrl.Contains("{token}"))                             {                                baseTileUrl.Replace("{key}"' SessionId).Replace("{token}"' SessionId);                             }                             else if(ForceSessionIdOnTileAccess)                             {                                // haven't seen anyone doing that' yet? ;/                                                            baseTileUrl += "&key=" + SessionId;                             }                               Debug.WriteLine("GetTileUrl' UrlFormat[" + imageryType + "]: " + baseTileUrl);                               ret = baseTileUrl;                             break;                          }                       }                    }                 }              }              catch(Exception ex)              {                 Debug.WriteLine("GetTileUrl: Error getting Bing Maps tile URL - " + ex);              }           }
Magic Number,GMap.NET.MapProviders,BingMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingMapProvider.cs,GetRoutePoints,The following statement contains a magic number: try           {              string route = GMaps.Instance.UseRouteCache ? Cache.Instance.GetContent(url' CacheType.RouteCache) : string.Empty;                if(string.IsNullOrEmpty(route))              {                 route = GetContentUsingHttp(url);                   if(!string.IsNullOrEmpty(route))                 {                    if(GMaps.Instance.UseRouteCache)                    {                       Cache.Instance.SaveContent(url' CacheType.RouteCache' route);                    }                 }              }                // parse values              if(!string.IsNullOrEmpty(route))              {                 #region -- title --                 int tooltipEnd = 0;                 {                    int x = route.IndexOf("<RoutePath><Line>") + 17;                    if(x >= 17)                    {                       tooltipEnd = route.IndexOf("</Line></RoutePath>"' x + 1);                       if(tooltipEnd > 0)                       {                          int l = tooltipEnd - x;                          if(l > 0)                          {                             //tooltipHtml = route.Substring(x' l).Replace(@"\x26#160;"' " ");                             tooltipHtml = route.Substring(x' l);                          }                       }                    }                 }                 #endregion                   #region -- points --                 XmlDocument doc = new XmlDocument();                 doc.LoadXml(route);                 XmlNode xn = doc["Response"];                 string statuscode = xn["StatusCode"].InnerText;                 switch(statuscode)                 {                    case "200":                    {                       xn = xn["ResourceSets"]["ResourceSet"]["Resources"]["Route"]["RoutePath"]["Line"];                       XmlNodeList xnl = xn.ChildNodes;                       if(xnl.Count > 0)                       {                          points = new List<PointLatLng>();                          foreach(XmlNode xno in xnl)                          {                             XmlNode latitude = xno["Latitude"];                             XmlNode longitude = xno["Longitude"];                             points.Add(new PointLatLng(double.Parse(latitude.InnerText' CultureInfo.InvariantCulture)'                                                        double.Parse(longitude.InnerText' CultureInfo.InvariantCulture)));                          }                       }                       break;                    }                    // no status implementation on routes yet although when introduced these are the codes. Exception will be catched.                    case "400":                    throw new Exception("Bad Request' The request contained an error.");                    case "401":                    throw new Exception("Unauthorized' Access was denied. You may have entered your credentials incorrectly' or you might not have access to the requested resource or operation.");                    case "403":                    throw new Exception("Forbidden' The request is for something forbidden. Authorization will not help.");                    case "404":                    throw new Exception("Not Found' The requested resource was not found.");                    case "500":                    throw new Exception("Internal Server Error' Your request could not be completed because there was a problem with the service.");                    case "501":                    throw new Exception("Service Unavailable' There's a problem with the service right now. Please try again later.");                    default:                    points = null;                    break; // unknown' for possible future error codes                 }                 #endregion              }           }           catch(Exception ex)           {              points = null;              Debug.WriteLine("GetRoutePoints: " + ex);           }
Magic Number,GMap.NET.MapProviders,BingMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingMapProvider.cs,GetRoutePoints,The following statement contains a magic number: try           {              string route = GMaps.Instance.UseRouteCache ? Cache.Instance.GetContent(url' CacheType.RouteCache) : string.Empty;                if(string.IsNullOrEmpty(route))              {                 route = GetContentUsingHttp(url);                   if(!string.IsNullOrEmpty(route))                 {                    if(GMaps.Instance.UseRouteCache)                    {                       Cache.Instance.SaveContent(url' CacheType.RouteCache' route);                    }                 }              }                // parse values              if(!string.IsNullOrEmpty(route))              {                 #region -- title --                 int tooltipEnd = 0;                 {                    int x = route.IndexOf("<RoutePath><Line>") + 17;                    if(x >= 17)                    {                       tooltipEnd = route.IndexOf("</Line></RoutePath>"' x + 1);                       if(tooltipEnd > 0)                       {                          int l = tooltipEnd - x;                          if(l > 0)                          {                             //tooltipHtml = route.Substring(x' l).Replace(@"\x26#160;"' " ");                             tooltipHtml = route.Substring(x' l);                          }                       }                    }                 }                 #endregion                   #region -- points --                 XmlDocument doc = new XmlDocument();                 doc.LoadXml(route);                 XmlNode xn = doc["Response"];                 string statuscode = xn["StatusCode"].InnerText;                 switch(statuscode)                 {                    case "200":                    {                       xn = xn["ResourceSets"]["ResourceSet"]["Resources"]["Route"]["RoutePath"]["Line"];                       XmlNodeList xnl = xn.ChildNodes;                       if(xnl.Count > 0)                       {                          points = new List<PointLatLng>();                          foreach(XmlNode xno in xnl)                          {                             XmlNode latitude = xno["Latitude"];                             XmlNode longitude = xno["Longitude"];                             points.Add(new PointLatLng(double.Parse(latitude.InnerText' CultureInfo.InvariantCulture)'                                                        double.Parse(longitude.InnerText' CultureInfo.InvariantCulture)));                          }                       }                       break;                    }                    // no status implementation on routes yet although when introduced these are the codes. Exception will be catched.                    case "400":                    throw new Exception("Bad Request' The request contained an error.");                    case "401":                    throw new Exception("Unauthorized' Access was denied. You may have entered your credentials incorrectly' or you might not have access to the requested resource or operation.");                    case "403":                    throw new Exception("Forbidden' The request is for something forbidden. Authorization will not help.");                    case "404":                    throw new Exception("Not Found' The requested resource was not found.");                    case "500":                    throw new Exception("Internal Server Error' Your request could not be completed because there was a problem with the service.");                    case "501":                    throw new Exception("Service Unavailable' There's a problem with the service right now. Please try again later.");                    default:                    points = null;                    break; // unknown' for possible future error codes                 }                 #endregion              }           }           catch(Exception ex)           {              points = null;              Debug.WriteLine("GetRoutePoints: " + ex);           }
Magic Number,GMap.NET.MapProviders,BingMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: if(!DisableDynamicTileUrlFormat && !string.IsNullOrEmpty(UrlDynamicFormat))           {              return string.Format(UrlDynamicFormat' GetServerNum(pos' 4)' key' language);           }
Magic Number,GMap.NET.MapProviders,BingMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' GetServerNum(pos' 4)' key' Version' language' ForceSessionIdOnTileAccess ? "&key=" + SessionId : string.Empty);
Magic Number,GMap.NET.MapProviders,BingSatelliteMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingSatelliteMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: if(!DisableDynamicTileUrlFormat && !string.IsNullOrEmpty(UrlDynamicFormat))           {              return string.Format(UrlDynamicFormat' GetServerNum(pos' 4)' key);           }
Magic Number,GMap.NET.MapProviders,BingSatelliteMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingSatelliteMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' GetServerNum(pos' 4)' key' Version' language' ForceSessionIdOnTileAccess ? "&key=" + SessionId : string.Empty);
Magic Number,GMap.NET.MapProviders,BingHybridMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingHybridMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: if(!DisableDynamicTileUrlFormat && !string.IsNullOrEmpty(UrlDynamicFormat))           {              return string.Format(UrlDynamicFormat' GetServerNum(pos' 4)' key' language);           }
Magic Number,GMap.NET.MapProviders,BingHybridMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Bing\BingHybridMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' GetServerNum(pos' 4)' key' Version' language' ForceSessionIdOnTileAccess ? "&key=" + SessionId : string.Empty);
Magic Number,GMap.NET.MapProviders,CzechGeographicMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Czech\CzechGeographicMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' GetServerNum(pos' 3) + 1' zoom' pos.X' pos.Y);
Magic Number,GMap.NET.MapProviders,CzechHistoryMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Czech\CzechHistoryMapProvider.cs,CzechHistoryMapProvider,The following statement contains a magic number: MaxZoom = 15;
Magic Number,GMap.NET.MapProviders,CzechHistoryMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Czech\CzechHistoryMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' GetServerNum(pos' 3) + 1' zoom' pos.X' pos.Y);
Magic Number,GMap.NET.MapProviders,CzechHybridMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Czech\CzechHybridMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' GetServerNum(pos' 3) + 1' zoom' pos.X' pos.Y);
Magic Number,GMap.NET.MapProviders,CzechMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Czech\CzechMapProvider.cs,CzechMapProviderBase,The following statement contains a magic number: Area = new RectLatLng(51.2024819920053' 11.8401353319027' 7.22833716731277' 2.78312271922872);
Magic Number,GMap.NET.MapProviders,CzechMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Czech\CzechMapProvider.cs,CzechMapProviderBase,The following statement contains a magic number: Area = new RectLatLng(51.2024819920053' 11.8401353319027' 7.22833716731277' 2.78312271922872);
Magic Number,GMap.NET.MapProviders,CzechMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Czech\CzechMapProvider.cs,CzechMapProviderBase,The following statement contains a magic number: Area = new RectLatLng(51.2024819920053' 11.8401353319027' 7.22833716731277' 2.78312271922872);
Magic Number,GMap.NET.MapProviders,CzechMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Czech\CzechMapProvider.cs,CzechMapProviderBase,The following statement contains a magic number: Area = new RectLatLng(51.2024819920053' 11.8401353319027' 7.22833716731277' 2.78312271922872);
Magic Number,GMap.NET.MapProviders,CzechMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Czech\CzechMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' GetServerNum(pos' 3) + 1' zoom' pos.X' pos.Y);
Magic Number,GMap.NET.MapProviders,CzechSatelliteMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Czech\CzechSatelliteMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' GetServerNum(pos' 3) + 1' zoom' pos.X' pos.Y);
Magic Number,GMap.NET.MapProviders,CzechTuristMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Czech\CzechTuristMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' GetServerNum(pos' 3) + 1' zoom' pos.X' pos.Y);
Magic Number,GMap.NET.MapProviders,CzechTuristWinterMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Czech\CzechTuristWinterMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' GetServerNum(pos' 3) + 1' zoom' pos.X' pos.Y);
Magic Number,GMap.NET.MapProviders,CloudMadeMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\CloudMadeMapProvider.cs,CloudMadeMapProvider,The following statement contains a magic number: StyleID = 45363;
Magic Number,GMap.NET.MapProviders,CloudMadeMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\CloudMadeMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' ServerLetters[GetServerNum(pos' 3)]' Key' StyleID' (DoubleResolution ? DoubleResolutionString : string.Empty)' zoom' pos.X' pos.Y);
Magic Number,GMap.NET.MapProviders,SwedenMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\SwedenMapProvider.cs,SwedenMapProviderBase,The following statement contains a magic number: MaxZoom = 11;
Magic Number,GMap.NET.MapProviders,WikiMapiaMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\WikiMapiaMapProvider.cs,WikiMapiaMapProviderBase,The following statement contains a magic number: MaxZoom = 22;
Magic Number,GMap.NET.MapProviders,WikiMapiaMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\WikiMapiaMapProvider.cs,GetServerNum,The following statement contains a magic number: return (int)(pos.X % 4 + (pos.Y % 4) * 4);
Magic Number,GMap.NET.MapProviders,WikiMapiaMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\WikiMapiaMapProvider.cs,GetServerNum,The following statement contains a magic number: return (int)(pos.X % 4 + (pos.Y % 4) * 4);
Magic Number,GMap.NET.MapProviders,WikiMapiaMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\WikiMapiaMapProvider.cs,GetServerNum,The following statement contains a magic number: return (int)(pos.X % 4 + (pos.Y % 4) * 4);
Magic Number,GMap.NET.MapProviders,CzechHistoryMapProviderOld,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\CzechOld\CzechHistoryMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: long xx = pos.X << (28 - zoom);
Magic Number,GMap.NET.MapProviders,CzechHistoryMapProviderOld,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\CzechOld\CzechHistoryMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: long yy = ((((long)Math.Pow(2.0' (double)zoom)) - 1) - pos.Y) << (28 - zoom);
Magic Number,GMap.NET.MapProviders,CzechHistoryMapProviderOld,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\CzechOld\CzechHistoryMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: long yy = ((((long)Math.Pow(2.0' (double)zoom)) - 1) - pos.Y) << (28 - zoom);
Magic Number,GMap.NET.MapProviders,CzechHistoryMapProviderOld,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\CzechOld\CzechHistoryMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' GetServerNum(pos' 3) + 1' zoom' xx' yy);
Magic Number,GMap.NET.MapProviders,CzechHybridMapProviderOld,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\CzechOld\CzechHybridMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: long xx = pos.X << (28 - zoom);
Magic Number,GMap.NET.MapProviders,CzechHybridMapProviderOld,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\CzechOld\CzechHybridMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: long yy = ((((long)Math.Pow(2.0' (double)zoom)) - 1) - pos.Y) << (28 - zoom);
Magic Number,GMap.NET.MapProviders,CzechHybridMapProviderOld,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\CzechOld\CzechHybridMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: long yy = ((((long)Math.Pow(2.0' (double)zoom)) - 1) - pos.Y) << (28 - zoom);
Magic Number,GMap.NET.MapProviders,CzechHybridMapProviderOld,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\CzechOld\CzechHybridMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' GetServerNum(pos' 3) + 1' zoom' xx' yy);
Magic Number,GMap.NET.MapProviders,CzechSatelliteMapProviderOld,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\CzechOld\CzechSatelliteMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: long xx = pos.X << (28 - zoom);
Magic Number,GMap.NET.MapProviders,CzechSatelliteMapProviderOld,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\CzechOld\CzechSatelliteMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: long yy = ((((long)Math.Pow(2.0' (double)zoom)) - 1) - pos.Y) << (28 - zoom);
Magic Number,GMap.NET.MapProviders,CzechSatelliteMapProviderOld,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\CzechOld\CzechSatelliteMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: long yy = ((((long)Math.Pow(2.0' (double)zoom)) - 1) - pos.Y) << (28 - zoom);
Magic Number,GMap.NET.MapProviders,CzechSatelliteMapProviderOld,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\CzechOld\CzechSatelliteMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' GetServerNum(pos' 3) + 1' zoom' xx' yy);
Magic Number,GMap.NET.MapProviders,CzechTuristMapProviderOld,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\CzechOld\CzechTuristMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: long xx = pos.X << (28 - zoom);
Magic Number,GMap.NET.MapProviders,CzechTuristMapProviderOld,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\CzechOld\CzechTuristMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: long yy = ((((long)Math.Pow(2.0' (double)zoom)) - 1) - pos.Y) << (28 - zoom);
Magic Number,GMap.NET.MapProviders,CzechTuristMapProviderOld,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\CzechOld\CzechTuristMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: long yy = ((((long)Math.Pow(2.0' (double)zoom)) - 1) - pos.Y) << (28 - zoom);
Magic Number,GMap.NET.MapProviders,CzechTuristMapProviderOld,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\CzechOld\CzechTuristMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' GetServerNum(pos' 3) + 1' zoom' xx' yy);
Magic Number,GMap.NET.MapProviders,CzechMapProviderBaseOld,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\CzechOld\CzechMapProvider.cs,CzechMapProviderBaseOld,The following statement contains a magic number: Area = new RectLatLng(51.2024819920053' 11.8401353319027' 7.22833716731277' 2.78312271922872);
Magic Number,GMap.NET.MapProviders,CzechMapProviderBaseOld,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\CzechOld\CzechMapProvider.cs,CzechMapProviderBaseOld,The following statement contains a magic number: Area = new RectLatLng(51.2024819920053' 11.8401353319027' 7.22833716731277' 2.78312271922872);
Magic Number,GMap.NET.MapProviders,CzechMapProviderBaseOld,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\CzechOld\CzechMapProvider.cs,CzechMapProviderBaseOld,The following statement contains a magic number: Area = new RectLatLng(51.2024819920053' 11.8401353319027' 7.22833716731277' 2.78312271922872);
Magic Number,GMap.NET.MapProviders,CzechMapProviderBaseOld,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\CzechOld\CzechMapProvider.cs,CzechMapProviderBaseOld,The following statement contains a magic number: Area = new RectLatLng(51.2024819920053' 11.8401353319027' 7.22833716731277' 2.78312271922872);
Magic Number,GMap.NET.MapProviders,CzechMapProviderOld,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\CzechOld\CzechMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: long xx = pos.X << (28 - zoom);
Magic Number,GMap.NET.MapProviders,CzechMapProviderOld,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\CzechOld\CzechMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: long yy = ((((long)Math.Pow(2.0' (double)zoom)) - 1) - pos.Y) << (28 - zoom);
Magic Number,GMap.NET.MapProviders,CzechMapProviderOld,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\CzechOld\CzechMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: long yy = ((((long)Math.Pow(2.0' (double)zoom)) - 1) - pos.Y) << (28 - zoom);
Magic Number,GMap.NET.MapProviders,CzechMapProviderOld,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\CzechOld\CzechMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' GetServerNum(pos' 3) + 1' zoom' xx' yy);
Magic Number,GMap.NET.MapProviders,TurkeyMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\TurkeyMapProvider.cs,TurkeyMapProvider,The following statement contains a magic number: Area = new RectLatLng(42.5830078125' 25.48828125' 19.05029296875' 6.83349609375);
Magic Number,GMap.NET.MapProviders,TurkeyMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\TurkeyMapProvider.cs,TurkeyMapProvider,The following statement contains a magic number: Area = new RectLatLng(42.5830078125' 25.48828125' 19.05029296875' 6.83349609375);
Magic Number,GMap.NET.MapProviders,TurkeyMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\TurkeyMapProvider.cs,TurkeyMapProvider,The following statement contains a magic number: Area = new RectLatLng(42.5830078125' 25.48828125' 19.05029296875' 6.83349609375);
Magic Number,GMap.NET.MapProviders,TurkeyMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\TurkeyMapProvider.cs,TurkeyMapProvider,The following statement contains a magic number: Area = new RectLatLng(42.5830078125' 25.48828125' 19.05029296875' 6.83349609375);
Magic Number,GMap.NET.MapProviders,TurkeyMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\TurkeyMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: string x = pos.X.ToString(Zeros).Insert(3' Slash).Insert(7' Slash);
Magic Number,GMap.NET.MapProviders,TurkeyMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\TurkeyMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: string x = pos.X.ToString(Zeros).Insert(3' Slash).Insert(7' Slash);
Magic Number,GMap.NET.MapProviders,TurkeyMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\TurkeyMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: string y = pos.Y.ToString(Zeros).Insert(3' Slash).Insert(7' Slash);
Magic Number,GMap.NET.MapProviders,TurkeyMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\TurkeyMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: string y = pos.Y.ToString(Zeros).Insert(3' Slash).Insert(7' Slash);
Magic Number,GMap.NET.MapProviders,TurkeyMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\TurkeyMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' GetServerNum(pos' 3)' zoom' x' y);
Magic Number,GMap.NET.MapProviders,SpainMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\SpainMapProvider.cs,SpainMapProvider,The following statement contains a magic number: MinZoom = 5;
Magic Number,GMap.NET.MapProviders,SpainMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\SpainMapProvider.cs,SpainMapProvider,The following statement contains a magic number: Area = new RectLatLng(43.8741381814747' -9.700927734375' 14.34814453125' 7.8605775962932);
Magic Number,GMap.NET.MapProviders,SpainMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\SpainMapProvider.cs,SpainMapProvider,The following statement contains a magic number: Area = new RectLatLng(43.8741381814747' -9.700927734375' 14.34814453125' 7.8605775962932);
Magic Number,GMap.NET.MapProviders,SpainMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\SpainMapProvider.cs,SpainMapProvider,The following statement contains a magic number: Area = new RectLatLng(43.8741381814747' -9.700927734375' 14.34814453125' 7.8605775962932);
Magic Number,GMap.NET.MapProviders,SpainMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\SpainMapProvider.cs,SpainMapProvider,The following statement contains a magic number: Area = new RectLatLng(43.8741381814747' -9.700927734375' 14.34814453125' 7.8605775962932);
Magic Number,GMap.NET.MapProviders,SpainMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\SpainMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' levels[zoom]' zoom' pos.X' ((2 << zoom - 1) - pos.Y - 1));
Magic Number,GMap.NET.MapProviders,LatviaMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\LatviaMapProvider.cs,LatviaMapProviderBase,The following statement contains a magic number: MaxZoom = 11;
Magic Number,GMap.NET.MapProviders,LatviaMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\LatviaMapProvider.cs,LatviaMapProviderBase,The following statement contains a magic number: Area = new RectLatLng(58.0794870805093' 20.3286067123543' 7.90883164336887' 2.506129113082);
Magic Number,GMap.NET.MapProviders,LatviaMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\LatviaMapProvider.cs,LatviaMapProviderBase,The following statement contains a magic number: Area = new RectLatLng(58.0794870805093' 20.3286067123543' 7.90883164336887' 2.506129113082);
Magic Number,GMap.NET.MapProviders,LatviaMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\LatviaMapProvider.cs,LatviaMapProviderBase,The following statement contains a magic number: Area = new RectLatLng(58.0794870805093' 20.3286067123543' 7.90883164336887' 2.506129113082);
Magic Number,GMap.NET.MapProviders,LatviaMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Etc\LatviaMapProvider.cs,LatviaMapProviderBase,The following statement contains a magic number: Area = new RectLatLng(58.0794870805093' 20.3286067123543' 7.90883164336887' 2.506129113082);
Magic Number,GMap.NET.MapProviders,Lithuania3dMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Lithuania\Lithuania3dMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: if(zoom >= 10)           {              z -= 10;           }
Magic Number,GMap.NET.MapProviders,Lithuania3dMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Lithuania\Lithuania3dMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: if(zoom >= 10)           {              z -= 10;           }
Magic Number,GMap.NET.MapProviders,LithuaniaMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Lithuania\LithuaniaMapProvider.cs,LithuaniaMapProviderBase,The following statement contains a magic number: MaxZoom = 12;
Magic Number,GMap.NET.MapProviders,LithuaniaMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Lithuania\LithuaniaMapProvider.cs,LithuaniaMapProviderBase,The following statement contains a magic number: Area = new RectLatLng(56.431489960361' 20.8962105239809' 5.8924169643369' 2.58940626652217);
Magic Number,GMap.NET.MapProviders,LithuaniaMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Lithuania\LithuaniaMapProvider.cs,LithuaniaMapProviderBase,The following statement contains a magic number: Area = new RectLatLng(56.431489960361' 20.8962105239809' 5.8924169643369' 2.58940626652217);
Magic Number,GMap.NET.MapProviders,LithuaniaMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Lithuania\LithuaniaMapProvider.cs,LithuaniaMapProviderBase,The following statement contains a magic number: Area = new RectLatLng(56.431489960361' 20.8962105239809' 5.8924169643369' 2.58940626652217);
Magic Number,GMap.NET.MapProviders,LithuaniaMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Lithuania\LithuaniaMapProvider.cs,LithuaniaMapProviderBase,The following statement contains a magic number: Area = new RectLatLng(56.431489960361' 20.8962105239809' 5.8924169643369' 2.58940626652217);
Magic Number,GMap.NET.MapProviders,LithuaniaTOP50,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Lithuania\LithuaniaTOP50.cs,LithuaniaTOP50,The following statement contains a magic number: MaxZoom = 15;
Magic Number,GMap.NET.MapProviders,OpenStreetMapQuestSatteliteProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\OpenStreetMap\OpenStreetMapQuestSatteliteProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' GetServerNum(pos' 3) + 1' zoom' pos.X' pos.Y);
Magic Number,GMap.NET.MapProviders,OpenStreetMapQuestHybridProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\OpenStreetMap\OpenStreetMapQuestHybridProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' GetServerNum(pos' 3) + 1' zoom' pos.X' pos.Y);
Magic Number,GMap.NET.MapProviders,OpenStreetMapQuestProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\OpenStreetMap\OpenStreetMapQuestProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' GetServerNum(pos' 3) + 1' zoom' pos.X' pos.Y);
Magic Number,GMap.NET.MapProviders,OpenCycleTransportMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\OpenStreetMap\OpenCycleTransportMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: char letter = ServerLetters[GMapProvider.GetServerNum(pos' 3)];
Magic Number,GMap.NET.MapProviders,OpenCycleLandscapeMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\OpenStreetMap\OpenCycleLandscapeMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: char letter = ServerLetters[GMapProvider.GetServerNum(pos' 3)];
Magic Number,GMap.NET.MapProviders,YandexHybridMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Yandex\YandexHybridMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' UrlServer' GetServerNum(pos' 4) + 1' Version' pos.X' pos.Y' zoom' language' Server);
Magic Number,GMap.NET.MapProviders,YandexSatelliteMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Yandex\YandexSatelliteMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' UrlServer' GetServerNum(pos' 4) + 1' Version' pos.X' pos.Y' zoom' language' Server);
Magic Number,GMap.NET.MapProviders,YandexMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Yandex\YandexMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' UrlServer' GetServerNum(pos' 4) + 1' Version' pos.X' pos.Y' zoom' language' Server);
Magic Number,GMap.NET.MapProviders,OviHybridMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Ovi\OviHybridMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' UrlServerLetters[GetServerNum(pos' 4)]' zoom' pos.X' pos.Y);
Magic Number,GMap.NET.MapProviders,OviTerrainMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Ovi\OviTerrainMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' UrlServerLetters[GetServerNum(pos' 4)]' zoom' pos.X' pos.Y);
Magic Number,GMap.NET.MapProviders,OviSatelliteMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Ovi\OviSatelliteMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' UrlServerLetters[GetServerNum(pos' 4)]' zoom' pos.X' pos.Y);
Magic Number,GMap.NET.MapProviders,OviMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Ovi\OviMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' UrlServerLetters[GetServerNum(pos' 4)]' zoom' pos.X' pos.Y);
Magic Number,GMap.NET.MapProviders,NearHybridMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\NearMap\NearHybridMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' GetServerNum(pos' 3)' pos.X' pos.Y' zoom);
Magic Number,GMap.NET.MapProviders,NearSatelliteMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\NearMap\NearSatelliteMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' GetServerNum(pos' 4)' pos.X' pos.Y' zoom' GetSafeString(pos));
Magic Number,GMap.NET.MapProviders,NearMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\NearMap\NearMapProvider.cs,GetServerNum,The following statement contains a magic number: return (int)(pos.X & 2) % max;
Magic Number,GMap.NET.MapProviders,NearMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\NearMap\NearMapProvider.cs,GetSafeString,The following statement contains a magic number: var arg = pos.X.ToString() + pos.Y.ToString() + ((3 * pos.X) + pos.Y).ToString();
Magic Number,GMap.NET.MapProviders,NearMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\NearMap\NearMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' GetServerNum(pos' 3)' pos.X' pos.Y' zoom' GetSafeString(pos));
Magic Number,GMap.NET.MapProviders,GoogleKoreaHybridMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\Korea\GoogleKoreaHybridMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' UrlFormatServer' GetServerNum(pos' 4)' UrlFormatRequest' Version' language' pos.X' sec1' pos.Y' zoom' sec2' ServerKorea);
Magic Number,GMap.NET.MapProviders,GoogleKoreaSatelliteMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\Korea\GoogleKoreaSatelliteMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' UrlFormatServer' GetServerNum(pos' 4)' UrlFormatRequest' Version' language' pos.X' sec1' pos.Y' zoom' sec2' ServerKoreaKr);
Magic Number,GMap.NET.MapProviders,GoogleKoreaMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\Korea\GoogleKoreaMapProvider.cs,GoogleKoreaMapProvider,The following statement contains a magic number: Area = new RectLatLng(38.6597777307125' 125.738525390625' 4.02099609375' 4.42072406219614);
Magic Number,GMap.NET.MapProviders,GoogleKoreaMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\Korea\GoogleKoreaMapProvider.cs,GoogleKoreaMapProvider,The following statement contains a magic number: Area = new RectLatLng(38.6597777307125' 125.738525390625' 4.02099609375' 4.42072406219614);
Magic Number,GMap.NET.MapProviders,GoogleKoreaMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\Korea\GoogleKoreaMapProvider.cs,GoogleKoreaMapProvider,The following statement contains a magic number: Area = new RectLatLng(38.6597777307125' 125.738525390625' 4.02099609375' 4.42072406219614);
Magic Number,GMap.NET.MapProviders,GoogleKoreaMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\Korea\GoogleKoreaMapProvider.cs,GoogleKoreaMapProvider,The following statement contains a magic number: Area = new RectLatLng(38.6597777307125' 125.738525390625' 4.02099609375' 4.42072406219614);
Magic Number,GMap.NET.MapProviders,GoogleKoreaMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\Korea\GoogleKoreaMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' UrlFormatServer' GetServerNum(pos' 4)' UrlFormatRequest' Version' language' pos.X' sec1' pos.Y' zoom' sec2' ServerKorea);
Magic Number,GMap.NET.MapProviders,GoogleChinaTerrainMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\China\GoogleChinaTerrainMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' UrlFormatServer' GetServerNum(pos' 4)' UrlFormatRequest' Version' ChinaLanguage' pos.X' sec1' pos.Y' zoom' sec2' ServerChina);
Magic Number,GMap.NET.MapProviders,GoogleChinaHybridMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\China\GoogleChinaHybridMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' UrlFormatServer' GetServerNum(pos' 4)' UrlFormatRequest' Version' ChinaLanguage' pos.X' sec1' pos.Y' zoom' sec2' ServerChina);
Magic Number,GMap.NET.MapProviders,GoogleChinaSatelliteMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\China\GoogleChinaSatelliteMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' UrlFormatServer' GetServerNum(pos' 4)' UrlFormatRequest' Version' pos.X' sec1' pos.Y' zoom' sec2' ServerChina);
Magic Number,GMap.NET.MapProviders,GoogleChinaMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\China\GoogleChinaMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' UrlFormatServer' GetServerNum(pos' 4)' UrlFormatRequest' Version' ChinaLanguage' pos.X' sec1' pos.Y' zoom' sec2' ServerChina);
Magic Number,GMap.NET.MapProviders,GoogleTerrainMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleTerrainMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' UrlFormatServer' GetServerNum(pos' 4)' UrlFormatRequest' Version' language' pos.X' sec1' pos.Y' zoom' sec2' Server);
Magic Number,GMap.NET.MapProviders,GoogleHybridMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleHybridMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' UrlFormatServer' GetServerNum(pos' 4)' UrlFormatRequest' Version' language' pos.X' sec1' pos.Y' zoom' sec2' Server);
Magic Number,GMap.NET.MapProviders,GoogleSatelliteMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleSatelliteMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' UrlFormatServer' GetServerNum(pos' 4)' UrlFormatRequest' Version' language' pos.X' sec1' pos.Y' zoom' sec2' Server);
Magic Number,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,OnInitialized,The following statement contains a magic number: if (!init && TryCorrectVersion)              {                                 string url = string.Format("https://maps.{0}/maps/api/js?client=google-maps-lite&amp;libraries=search&amp;language=en&amp;region="' ServerAPIs);                  try                  {                      string html = GMaps.Instance.UseUrlCache ? Cache.Instance.GetContent(url' CacheType.UrlCache' TimeSpan.FromHours(8)) : string.Empty;                        if (string.IsNullOrEmpty(html))                      {                          html = GetContentUsingHttp(url);                          if (!string.IsNullOrEmpty(html))                          {                              if (GMaps.Instance.UseUrlCache)                              {                                  Cache.Instance.SaveContent(url' CacheType.UrlCache' html);                              }                          }                      }                        if (!string.IsNullOrEmpty(html))                      {                          #region -- match versions --                          Regex reg = new Regex(string.Format(@"https?://mts?\d.{0}/maps/vt\?lyrs=m@(\d*)"' Server)' RegexOptions.IgnoreCase);                          Match mat = reg.Match(html);                          if (mat.Success)                          {                              GroupCollection gc = mat.Groups;                              int count = gc.Count;                              if (count > 0)                              {                                  string ver = string.Format("m@{0}"' gc [1].Value);                                  string old = GMapProviders.GoogleMap.Version;                                    GMapProviders.GoogleMap.Version = ver;                                  GMapProviders.GoogleChinaMap.Version = ver;                                                                    string verh = string.Format("h@{0}"' gc [1].Value);                                  string oldh = GMapProviders.GoogleHybridMap.Version;                                    GMapProviders.GoogleHybridMap.Version = verh;                                  GMapProviders.GoogleChinaHybridMap.Version = verh;  #if DEBUG                                  Debug.WriteLine("GMapProviders.GoogleMap.Version: " + ver + "' " + (ver == old ? "OK" : "old: " + old + "' consider updating source"));                                  Debug.WriteLine("GMapProviders.GoogleHybridMap.Version: " + verh + "' " + (verh == oldh ? "OK" : "old: " + oldh + "' consider updating source"));                                    if (Debugger.IsAttached && ver != old)                                  {                                      Thread.Sleep(1111);                                  }  #endif                              }                          }                            reg = new Regex(string.Format(@"https?://khms?\d.{0}/kh\?v=(\d*)"' Server)' RegexOptions.IgnoreCase);                          mat = reg.Match(html);                          if (mat.Success)                          {                              GroupCollection gc = mat.Groups;                              int count = gc.Count;                              if (count > 0)                              {                                  string ver = gc [1].Value;                                  string old = GMapProviders.GoogleSatelliteMap.Version;                                    GMapProviders.GoogleSatelliteMap.Version = ver;                                  GMapProviders.GoogleKoreaSatelliteMap.Version = ver;                                  GMapProviders.GoogleChinaSatelliteMap.Version = "s@" + ver;  #if DEBUG                                  Debug.WriteLine("GMapProviders.GoogleSatelliteMap.Version: " + ver + "' " + (ver == old ? "OK" : "old: " + old + "' consider updating source"));                                  if (Debugger.IsAttached && ver != old)                                  {                                      Thread.Sleep(1111);                                  }  #endif                              }                          }                            reg = new Regex(string.Format(@"https?://mts?\d.{0}/maps/vt\?lyrs=t@(\d*)'r@(\d*)"' Server)' RegexOptions.IgnoreCase);                          mat = reg.Match(html);                          if (mat.Success)                          {                              GroupCollection gc = mat.Groups;                              int count = gc.Count;                              if (count > 1)                              {                                  string ver = string.Format("t@{0}'r@{1}"' gc [1].Value' gc [2].Value);                                  string old = GMapProviders.GoogleTerrainMap.Version;                                    GMapProviders.GoogleTerrainMap.Version = ver;                                  GMapProviders.GoogleChinaTerrainMap.Version = ver;  #if DEBUG                                  Debug.WriteLine("GMapProviders.GoogleTerrainMap.Version: " + ver + "' " + (ver == old ? "OK" : "old: " + old + "' consider updating source"));                                  if (Debugger.IsAttached && ver != old)                                  {                                      Thread.Sleep(1111);                                  }  #endif                              }                          }                          #endregion                      }                        init = true; // try it only once                  }                  catch (Exception ex)                  {                      Debug.WriteLine("TryCorrectGoogleVersions failed: " + ex.ToString());                  }              }
Magic Number,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,OnInitialized,The following statement contains a magic number: if (!init && TryCorrectVersion)              {                                 string url = string.Format("https://maps.{0}/maps/api/js?client=google-maps-lite&amp;libraries=search&amp;language=en&amp;region="' ServerAPIs);                  try                  {                      string html = GMaps.Instance.UseUrlCache ? Cache.Instance.GetContent(url' CacheType.UrlCache' TimeSpan.FromHours(8)) : string.Empty;                        if (string.IsNullOrEmpty(html))                      {                          html = GetContentUsingHttp(url);                          if (!string.IsNullOrEmpty(html))                          {                              if (GMaps.Instance.UseUrlCache)                              {                                  Cache.Instance.SaveContent(url' CacheType.UrlCache' html);                              }                          }                      }                        if (!string.IsNullOrEmpty(html))                      {                          #region -- match versions --                          Regex reg = new Regex(string.Format(@"https?://mts?\d.{0}/maps/vt\?lyrs=m@(\d*)"' Server)' RegexOptions.IgnoreCase);                          Match mat = reg.Match(html);                          if (mat.Success)                          {                              GroupCollection gc = mat.Groups;                              int count = gc.Count;                              if (count > 0)                              {                                  string ver = string.Format("m@{0}"' gc [1].Value);                                  string old = GMapProviders.GoogleMap.Version;                                    GMapProviders.GoogleMap.Version = ver;                                  GMapProviders.GoogleChinaMap.Version = ver;                                                                    string verh = string.Format("h@{0}"' gc [1].Value);                                  string oldh = GMapProviders.GoogleHybridMap.Version;                                    GMapProviders.GoogleHybridMap.Version = verh;                                  GMapProviders.GoogleChinaHybridMap.Version = verh;  #if DEBUG                                  Debug.WriteLine("GMapProviders.GoogleMap.Version: " + ver + "' " + (ver == old ? "OK" : "old: " + old + "' consider updating source"));                                  Debug.WriteLine("GMapProviders.GoogleHybridMap.Version: " + verh + "' " + (verh == oldh ? "OK" : "old: " + oldh + "' consider updating source"));                                    if (Debugger.IsAttached && ver != old)                                  {                                      Thread.Sleep(1111);                                  }  #endif                              }                          }                            reg = new Regex(string.Format(@"https?://khms?\d.{0}/kh\?v=(\d*)"' Server)' RegexOptions.IgnoreCase);                          mat = reg.Match(html);                          if (mat.Success)                          {                              GroupCollection gc = mat.Groups;                              int count = gc.Count;                              if (count > 0)                              {                                  string ver = gc [1].Value;                                  string old = GMapProviders.GoogleSatelliteMap.Version;                                    GMapProviders.GoogleSatelliteMap.Version = ver;                                  GMapProviders.GoogleKoreaSatelliteMap.Version = ver;                                  GMapProviders.GoogleChinaSatelliteMap.Version = "s@" + ver;  #if DEBUG                                  Debug.WriteLine("GMapProviders.GoogleSatelliteMap.Version: " + ver + "' " + (ver == old ? "OK" : "old: " + old + "' consider updating source"));                                  if (Debugger.IsAttached && ver != old)                                  {                                      Thread.Sleep(1111);                                  }  #endif                              }                          }                            reg = new Regex(string.Format(@"https?://mts?\d.{0}/maps/vt\?lyrs=t@(\d*)'r@(\d*)"' Server)' RegexOptions.IgnoreCase);                          mat = reg.Match(html);                          if (mat.Success)                          {                              GroupCollection gc = mat.Groups;                              int count = gc.Count;                              if (count > 1)                              {                                  string ver = string.Format("t@{0}'r@{1}"' gc [1].Value' gc [2].Value);                                  string old = GMapProviders.GoogleTerrainMap.Version;                                    GMapProviders.GoogleTerrainMap.Version = ver;                                  GMapProviders.GoogleChinaTerrainMap.Version = ver;  #if DEBUG                                  Debug.WriteLine("GMapProviders.GoogleTerrainMap.Version: " + ver + "' " + (ver == old ? "OK" : "old: " + old + "' consider updating source"));                                  if (Debugger.IsAttached && ver != old)                                  {                                      Thread.Sleep(1111);                                  }  #endif                              }                          }                          #endregion                      }                        init = true; // try it only once                  }                  catch (Exception ex)                  {                      Debug.WriteLine("TryCorrectGoogleVersions failed: " + ex.ToString());                  }              }
Magic Number,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,OnInitialized,The following statement contains a magic number: if (!init && TryCorrectVersion)              {                                 string url = string.Format("https://maps.{0}/maps/api/js?client=google-maps-lite&amp;libraries=search&amp;language=en&amp;region="' ServerAPIs);                  try                  {                      string html = GMaps.Instance.UseUrlCache ? Cache.Instance.GetContent(url' CacheType.UrlCache' TimeSpan.FromHours(8)) : string.Empty;                        if (string.IsNullOrEmpty(html))                      {                          html = GetContentUsingHttp(url);                          if (!string.IsNullOrEmpty(html))                          {                              if (GMaps.Instance.UseUrlCache)                              {                                  Cache.Instance.SaveContent(url' CacheType.UrlCache' html);                              }                          }                      }                        if (!string.IsNullOrEmpty(html))                      {                          #region -- match versions --                          Regex reg = new Regex(string.Format(@"https?://mts?\d.{0}/maps/vt\?lyrs=m@(\d*)"' Server)' RegexOptions.IgnoreCase);                          Match mat = reg.Match(html);                          if (mat.Success)                          {                              GroupCollection gc = mat.Groups;                              int count = gc.Count;                              if (count > 0)                              {                                  string ver = string.Format("m@{0}"' gc [1].Value);                                  string old = GMapProviders.GoogleMap.Version;                                    GMapProviders.GoogleMap.Version = ver;                                  GMapProviders.GoogleChinaMap.Version = ver;                                                                    string verh = string.Format("h@{0}"' gc [1].Value);                                  string oldh = GMapProviders.GoogleHybridMap.Version;                                    GMapProviders.GoogleHybridMap.Version = verh;                                  GMapProviders.GoogleChinaHybridMap.Version = verh;  #if DEBUG                                  Debug.WriteLine("GMapProviders.GoogleMap.Version: " + ver + "' " + (ver == old ? "OK" : "old: " + old + "' consider updating source"));                                  Debug.WriteLine("GMapProviders.GoogleHybridMap.Version: " + verh + "' " + (verh == oldh ? "OK" : "old: " + oldh + "' consider updating source"));                                    if (Debugger.IsAttached && ver != old)                                  {                                      Thread.Sleep(1111);                                  }  #endif                              }                          }                            reg = new Regex(string.Format(@"https?://khms?\d.{0}/kh\?v=(\d*)"' Server)' RegexOptions.IgnoreCase);                          mat = reg.Match(html);                          if (mat.Success)                          {                              GroupCollection gc = mat.Groups;                              int count = gc.Count;                              if (count > 0)                              {                                  string ver = gc [1].Value;                                  string old = GMapProviders.GoogleSatelliteMap.Version;                                    GMapProviders.GoogleSatelliteMap.Version = ver;                                  GMapProviders.GoogleKoreaSatelliteMap.Version = ver;                                  GMapProviders.GoogleChinaSatelliteMap.Version = "s@" + ver;  #if DEBUG                                  Debug.WriteLine("GMapProviders.GoogleSatelliteMap.Version: " + ver + "' " + (ver == old ? "OK" : "old: " + old + "' consider updating source"));                                  if (Debugger.IsAttached && ver != old)                                  {                                      Thread.Sleep(1111);                                  }  #endif                              }                          }                            reg = new Regex(string.Format(@"https?://mts?\d.{0}/maps/vt\?lyrs=t@(\d*)'r@(\d*)"' Server)' RegexOptions.IgnoreCase);                          mat = reg.Match(html);                          if (mat.Success)                          {                              GroupCollection gc = mat.Groups;                              int count = gc.Count;                              if (count > 1)                              {                                  string ver = string.Format("t@{0}'r@{1}"' gc [1].Value' gc [2].Value);                                  string old = GMapProviders.GoogleTerrainMap.Version;                                    GMapProviders.GoogleTerrainMap.Version = ver;                                  GMapProviders.GoogleChinaTerrainMap.Version = ver;  #if DEBUG                                  Debug.WriteLine("GMapProviders.GoogleTerrainMap.Version: " + ver + "' " + (ver == old ? "OK" : "old: " + old + "' consider updating source"));                                  if (Debugger.IsAttached && ver != old)                                  {                                      Thread.Sleep(1111);                                  }  #endif                              }                          }                          #endregion                      }                        init = true; // try it only once                  }                  catch (Exception ex)                  {                      Debug.WriteLine("TryCorrectGoogleVersions failed: " + ex.ToString());                  }              }
Magic Number,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,OnInitialized,The following statement contains a magic number: if (!init && TryCorrectVersion)              {                                 string url = string.Format("https://maps.{0}/maps/api/js?client=google-maps-lite&amp;libraries=search&amp;language=en&amp;region="' ServerAPIs);                  try                  {                      string html = GMaps.Instance.UseUrlCache ? Cache.Instance.GetContent(url' CacheType.UrlCache' TimeSpan.FromHours(8)) : string.Empty;                        if (string.IsNullOrEmpty(html))                      {                          html = GetContentUsingHttp(url);                          if (!string.IsNullOrEmpty(html))                          {                              if (GMaps.Instance.UseUrlCache)                              {                                  Cache.Instance.SaveContent(url' CacheType.UrlCache' html);                              }                          }                      }                        if (!string.IsNullOrEmpty(html))                      {                          #region -- match versions --                          Regex reg = new Regex(string.Format(@"https?://mts?\d.{0}/maps/vt\?lyrs=m@(\d*)"' Server)' RegexOptions.IgnoreCase);                          Match mat = reg.Match(html);                          if (mat.Success)                          {                              GroupCollection gc = mat.Groups;                              int count = gc.Count;                              if (count > 0)                              {                                  string ver = string.Format("m@{0}"' gc [1].Value);                                  string old = GMapProviders.GoogleMap.Version;                                    GMapProviders.GoogleMap.Version = ver;                                  GMapProviders.GoogleChinaMap.Version = ver;                                                                    string verh = string.Format("h@{0}"' gc [1].Value);                                  string oldh = GMapProviders.GoogleHybridMap.Version;                                    GMapProviders.GoogleHybridMap.Version = verh;                                  GMapProviders.GoogleChinaHybridMap.Version = verh;  #if DEBUG                                  Debug.WriteLine("GMapProviders.GoogleMap.Version: " + ver + "' " + (ver == old ? "OK" : "old: " + old + "' consider updating source"));                                  Debug.WriteLine("GMapProviders.GoogleHybridMap.Version: " + verh + "' " + (verh == oldh ? "OK" : "old: " + oldh + "' consider updating source"));                                    if (Debugger.IsAttached && ver != old)                                  {                                      Thread.Sleep(1111);                                  }  #endif                              }                          }                            reg = new Regex(string.Format(@"https?://khms?\d.{0}/kh\?v=(\d*)"' Server)' RegexOptions.IgnoreCase);                          mat = reg.Match(html);                          if (mat.Success)                          {                              GroupCollection gc = mat.Groups;                              int count = gc.Count;                              if (count > 0)                              {                                  string ver = gc [1].Value;                                  string old = GMapProviders.GoogleSatelliteMap.Version;                                    GMapProviders.GoogleSatelliteMap.Version = ver;                                  GMapProviders.GoogleKoreaSatelliteMap.Version = ver;                                  GMapProviders.GoogleChinaSatelliteMap.Version = "s@" + ver;  #if DEBUG                                  Debug.WriteLine("GMapProviders.GoogleSatelliteMap.Version: " + ver + "' " + (ver == old ? "OK" : "old: " + old + "' consider updating source"));                                  if (Debugger.IsAttached && ver != old)                                  {                                      Thread.Sleep(1111);                                  }  #endif                              }                          }                            reg = new Regex(string.Format(@"https?://mts?\d.{0}/maps/vt\?lyrs=t@(\d*)'r@(\d*)"' Server)' RegexOptions.IgnoreCase);                          mat = reg.Match(html);                          if (mat.Success)                          {                              GroupCollection gc = mat.Groups;                              int count = gc.Count;                              if (count > 1)                              {                                  string ver = string.Format("t@{0}'r@{1}"' gc [1].Value' gc [2].Value);                                  string old = GMapProviders.GoogleTerrainMap.Version;                                    GMapProviders.GoogleTerrainMap.Version = ver;                                  GMapProviders.GoogleChinaTerrainMap.Version = ver;  #if DEBUG                                  Debug.WriteLine("GMapProviders.GoogleTerrainMap.Version: " + ver + "' " + (ver == old ? "OK" : "old: " + old + "' consider updating source"));                                  if (Debugger.IsAttached && ver != old)                                  {                                      Thread.Sleep(1111);                                  }  #endif                              }                          }                          #endregion                      }                        init = true; // try it only once                  }                  catch (Exception ex)                  {                      Debug.WriteLine("TryCorrectGoogleVersions failed: " + ex.ToString());                  }              }
Magic Number,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,OnInitialized,The following statement contains a magic number: if (!init && TryCorrectVersion)              {                                 string url = string.Format("https://maps.{0}/maps/api/js?client=google-maps-lite&amp;libraries=search&amp;language=en&amp;region="' ServerAPIs);                  try                  {                      string html = GMaps.Instance.UseUrlCache ? Cache.Instance.GetContent(url' CacheType.UrlCache' TimeSpan.FromHours(8)) : string.Empty;                        if (string.IsNullOrEmpty(html))                      {                          html = GetContentUsingHttp(url);                          if (!string.IsNullOrEmpty(html))                          {                              if (GMaps.Instance.UseUrlCache)                              {                                  Cache.Instance.SaveContent(url' CacheType.UrlCache' html);                              }                          }                      }                        if (!string.IsNullOrEmpty(html))                      {                          #region -- match versions --                          Regex reg = new Regex(string.Format(@"https?://mts?\d.{0}/maps/vt\?lyrs=m@(\d*)"' Server)' RegexOptions.IgnoreCase);                          Match mat = reg.Match(html);                          if (mat.Success)                          {                              GroupCollection gc = mat.Groups;                              int count = gc.Count;                              if (count > 0)                              {                                  string ver = string.Format("m@{0}"' gc [1].Value);                                  string old = GMapProviders.GoogleMap.Version;                                    GMapProviders.GoogleMap.Version = ver;                                  GMapProviders.GoogleChinaMap.Version = ver;                                                                    string verh = string.Format("h@{0}"' gc [1].Value);                                  string oldh = GMapProviders.GoogleHybridMap.Version;                                    GMapProviders.GoogleHybridMap.Version = verh;                                  GMapProviders.GoogleChinaHybridMap.Version = verh;  #if DEBUG                                  Debug.WriteLine("GMapProviders.GoogleMap.Version: " + ver + "' " + (ver == old ? "OK" : "old: " + old + "' consider updating source"));                                  Debug.WriteLine("GMapProviders.GoogleHybridMap.Version: " + verh + "' " + (verh == oldh ? "OK" : "old: " + oldh + "' consider updating source"));                                    if (Debugger.IsAttached && ver != old)                                  {                                      Thread.Sleep(1111);                                  }  #endif                              }                          }                            reg = new Regex(string.Format(@"https?://khms?\d.{0}/kh\?v=(\d*)"' Server)' RegexOptions.IgnoreCase);                          mat = reg.Match(html);                          if (mat.Success)                          {                              GroupCollection gc = mat.Groups;                              int count = gc.Count;                              if (count > 0)                              {                                  string ver = gc [1].Value;                                  string old = GMapProviders.GoogleSatelliteMap.Version;                                    GMapProviders.GoogleSatelliteMap.Version = ver;                                  GMapProviders.GoogleKoreaSatelliteMap.Version = ver;                                  GMapProviders.GoogleChinaSatelliteMap.Version = "s@" + ver;  #if DEBUG                                  Debug.WriteLine("GMapProviders.GoogleSatelliteMap.Version: " + ver + "' " + (ver == old ? "OK" : "old: " + old + "' consider updating source"));                                  if (Debugger.IsAttached && ver != old)                                  {                                      Thread.Sleep(1111);                                  }  #endif                              }                          }                            reg = new Regex(string.Format(@"https?://mts?\d.{0}/maps/vt\?lyrs=t@(\d*)'r@(\d*)"' Server)' RegexOptions.IgnoreCase);                          mat = reg.Match(html);                          if (mat.Success)                          {                              GroupCollection gc = mat.Groups;                              int count = gc.Count;                              if (count > 1)                              {                                  string ver = string.Format("t@{0}'r@{1}"' gc [1].Value' gc [2].Value);                                  string old = GMapProviders.GoogleTerrainMap.Version;                                    GMapProviders.GoogleTerrainMap.Version = ver;                                  GMapProviders.GoogleChinaTerrainMap.Version = ver;  #if DEBUG                                  Debug.WriteLine("GMapProviders.GoogleTerrainMap.Version: " + ver + "' " + (ver == old ? "OK" : "old: " + old + "' consider updating source"));                                  if (Debugger.IsAttached && ver != old)                                  {                                      Thread.Sleep(1111);                                  }  #endif                              }                          }                          #endregion                      }                        init = true; // try it only once                  }                  catch (Exception ex)                  {                      Debug.WriteLine("TryCorrectGoogleVersions failed: " + ex.ToString());                  }              }
Magic Number,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetSecureWords,The following statement contains a magic number: int seclen = (int)((pos.X * 3) + pos.Y) % 8;
Magic Number,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetSecureWords,The following statement contains a magic number: int seclen = (int)((pos.X * 3) + pos.Y) % 8;
Magic Number,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetSecureWords,The following statement contains a magic number: if (pos.Y >= 10000 && pos.Y < 100000)              {                  sec1 = Sec1;              }
Magic Number,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetSecureWords,The following statement contains a magic number: if (pos.Y >= 10000 && pos.Y < 100000)              {                  sec1 = Sec1;              }
Magic Number,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetRoutePoints,The following statement contains a magic number: try              {                  string route = GMaps.Instance.UseRouteCache ? Cache.Instance.GetContent(url' CacheType.RouteCache) : string.Empty;                    if (string.IsNullOrEmpty(route))                  {                      route = GetContentUsingHttp(url);                        if (!string.IsNullOrEmpty(route))                      {                          if (GMaps.Instance.UseRouteCache)                          {                              Cache.Instance.SaveContent(url' CacheType.RouteCache' route);                          }                      }                  }                    // parse values                  if (!string.IsNullOrEmpty(route))                  {                      //{                      //tooltipHtml:" (300\x26#160;km / 2 valandos 59 min.)"'                      //polylines:                      //[{                      //   id:"route0"'                      //   points:"cy~rIcvp`ClJ~v@jHpu@N|BB~A?tA_@`J@nAJrB|AhEf@h@~@^pANh@Mr@a@`@_@x@cBPk@ZiBHeDQ{C]wAc@mAqCeEoA_C{@_Cy@iDoEaW}AsJcJ}t@iWowB{C_Vyw@gvGyTyjBu@gHwDoZ{W_zBsX}~BiA_MmAyOcAwOs@yNy@eTk@mVUmTE}PJ_W`@cVd@cQ`@}KjA_V`AeOn@oItAkOdAaKfBaOhDiVbD}RpBuKtEkTtP}q@fr@ypCfCmK|CmNvEqVvCuQ`BgLnAmJ`CgTpA_N~@sLlBwYh@yLp@cSj@e]zFkzKHaVViSf@wZjFwqBt@{Wr@qS`AaUjAgStBkYrEwe@xIuw@`Gmj@rFok@~BkYtCy_@|KccBvBgZjC}[tD__@pDaYjB_MpBuLhGi[fC}KfFcSnEkObFgOrFkOzEoLt[ys@tJeUlIsSbKqXtFiPfKi]rG_W|CiNhDkPfDuQlDoShEuXrEy[nOgiAxF{`@|DoVzFk[fDwPlXupA~CoPfDuQxGcd@l@yEdH{r@xDam@`AiWz@mYtAq~@p@uqAfAqx@|@kZxA}^lBq\\|Be\\lAaO~Dm`@|Gsj@tS_~AhCyUrCeZrByWv@uLlUiyDpA}NdHkn@pGmb@LkAtAoIjDqR`I{`@`BcH|I_b@zJcd@lKig@\\_CbBaIlJ}g@lIoj@pAuJtFoh@~Eqs@hDmv@h@qOfF{jBn@gSxCio@dAuQn@gIVoBjAiOlCqWbCiT`PekAzKiu@~EgYfIya@fA{ExGwWnDkMdHiU|G}R`HgQhRsa@hW}g@jVsg@|a@cbAbJkUxKoYxLa_@`IiZzHu[`DoOXsBhBuJbCwNdBaL`EkYvAwM`CeVtEwj@nDqj@BkAnB{YpGgeAn@eJ`CmYvEid@tBkQpGkd@rE}UxB}JdJo_@nDcNfSan@nS}j@lCeIvDsMbC{J|CyNbAwFfCgPz@uGvBiSdD}`@rFon@nKaqAxDmc@xBuT|Fqc@nC_PrEcUtC_MpFcT`GqQxJmXfXwq@jQgh@hBeGhG_U|BaK|G}[nRikAzIam@tDsYfE}^v@_MbAwKn@oIr@yLrBub@jAoa@b@sRdDmjBx@aZdA}XnAqVpAgTlAqPn@oGvFye@dCeRzGwb@xT_}A`BcPrAoOvCad@jAmXv@eV`BieA~@a[fBg_@`CiZ~A_OhHqk@hHcn@tEwe@rDub@nBoW~@sN|BeZnAgMvDm\\hFs^hSigArFaY`Gc\\`C}OhD}YfByQdAaNbAkOtOu~Cn@wKz@uLfCeY|CkW~B}OhCmO|AcI~A_IvDoPpEyPdImWrDuKnL_YjI{Ptl@qfAle@u|@xI}PbImQvFwMbGgOxFkOpdAosCdD_KxGsU|E}RxFcXhCwNjDwTvBiPfBqOrAyMfBcTxAaVhAwVrCy_Al@iPt@_OtA}Q`AuJ`AgIzAkK`EoUtBsJhCaKxCaKdDaKhQeg@jGiRfGaSrFyR`HsWvL}f@xp@grC`Sq|@pEsVdAoGjF{XlkAgwHxHgj@|Jex@fg@qlEjQs{AdHwh@zDkVhEkVzI_e@v}AgzHpK_l@tE}YtEy[rC}TpFme@jg@cpEbF{d@~BoXfBqUbAyOx@yN|Ao]bAo[tIazC`@iLb@aJ~AkWbBgRdBgPjA{IdCePlAmHfBmJdCiL~CuM|DoNxhDezKdDkLvBoInFqVbCuMxBqNnAeJ~CwXdBoSb^crElFsl@`Dy[zDu^xBiRzc@aaE|Fsd@vCkShDmTpG}^lD}QzDoR|zAcdHvIob@dKoj@jDmSlKiq@xVacBhEqXnBqL|Ga^zJke@`y@ktD~Mop@tP}_AdOg`AtCiQxCyOlDkPfDoN`GiTfGkRjEwLvEsL|HkQtEkJdE{HrwAkaCrT{a@rpDiuHtE_KvLuV|{AwaDzAqCb@mAf{Ac`D~FqL~y@_fBlNmZbGaNtF}Mpn@s~AlYss@dFgK|DoGhBoCrDuE~AcBtGaGnByAnDwBnCwAfDwAnFaBjGkA~[{E`iEkn@pQaDvIwBnIiCl\\qLn}J{pDhMcGrFcDhGeEvoDehC|AsArCwChBaC`C_EzC_HbBcFd@uB`@qAn@gDdB}Kz@}Hn@iPjByx@jDcvAj@}RDsEn@yTv@a]VcPtEamFBcHT_LNkEdAiShDsi@`GudAbFgx@`@iKdP}yFhBgs@p@yRjCo_AJwCXeEb@uEz@_H|@yEnBqHrCiIpAmE`o@qhBxC_IjIuVdIcXh{AgmG`i@_{BfCuLrhAssGfFeXxbBklInCsN|_AoiGpGs_@pl@w}Czy@_kEvG{]h}@ieFbQehAdHye@lPagA|Eu\\tAmI|CwWjn@mwGj@eH|]azFl@kPjAqd@jJe|DlD}vAxAeh@@eBvVk}JzIkqDfE_aBfA{YbBk[zp@e}LhAaObCeUlAuIzAeJrb@q`CjCcOnAaIpBwOtBkTjDsg@~AiPvBwOlAcH|AkIlCkLlYudApDoN`BgHhBaJvAeIvAqJbAuHrBqQbAsLx@oL`MwrCXkFr@uJh@{FhBsOvXwoB|EqVdBmHxC}KtCcJtDgKjDoIxE}JdHcMdCuDdIoKlmB}|BjJuMfFgIlE{HlEyIdEeJ~FaOvCgInCuI`EmN`J}]rEsP`EuMzCoIxGwPpi@cnAhGgPzCiJvFmRrEwQbDyOtCoPbDwTxDq\\rAsK`BgLhB{KxBoLfCgLjDqKdBqEfEkJtSy^`EcJnDuJjAwDrCeK\\}AjCaNr@qEjAaJtNaqAdCqQ`BsItS}bAbQs{@|Kor@xBmKz}@}uDze@{zAjk@}fBjTsq@r@uCd@aDFyCIwCWcCY}Aq_@w|A{AwF_DyHgHwOgu@m_BSb@nFhL"'                      //   levelsnumLevels:4'                      //   zoomFactor:16                      //}]                      //}                        #region -- title --                      int tooltipEnd = 0;                      {                          int x = route.IndexOf("tooltipHtml:") + 13;                          if (x >= 13)                          {                              tooltipEnd = route.IndexOf("\""' x + 1);                              if (tooltipEnd > 0)                              {                                  int l = tooltipEnd - x;                                  if (l > 0)                                  {                                      tooltipHtml = route.Substring(x' l).Replace(@"\x26#160;"' " ");                                  }                              }                          }                      }                      #endregion                        #region -- points --                      int pointsEnd = 0;                      {                          int x = route.IndexOf("points:"' tooltipEnd >= 0 ? tooltipEnd : 0) + 8;                          if (x >= 8)                          {                              pointsEnd = route.IndexOf("\""' x + 1);                              if (pointsEnd > 0)                              {                                  int l = pointsEnd - x;                                  if (l > 0)                                  {                                      /*                                      while(l % 5 != 0)                                      {                                         l--;                                      }                                      */                                        points = new List<PointLatLng>();                                      DecodePointsInto(points' route.Substring(x' l));                                  }                              }                          }                      }                      #endregion                        #region -- levels --                      string levels = string.Empty;                      int levelsEnd = 0;                      {                          int x = route.IndexOf("levels:"' pointsEnd >= 0 ? pointsEnd : 0) + 8;                          if (x >= 8)                          {                              levelsEnd = route.IndexOf("\""' x + 1);                              if (levelsEnd > 0)                              {                                  int l = levelsEnd - x;                                  if (l > 0)                                  {                                      levels = route.Substring(x' l);                                  }                              }                          }                      }                      #endregion                        #region -- numLevel --                      int numLevelsEnd = 0;                      {                          int x = route.IndexOf("numLevels:"' levelsEnd >= 0 ? levelsEnd : 0) + 10;                          if (x >= 10)                          {                              numLevelsEnd = route.IndexOf("'"' x);                              if (numLevelsEnd > 0)                              {                                  int l = numLevelsEnd - x;                                  if (l > 0)                                  {                                      numLevel = int.Parse(route.Substring(x' l));                                  }                              }                          }                      }                      #endregion                        #region -- zoomFactor --                      {                          int x = route.IndexOf("zoomFactor:"' numLevelsEnd >= 0 ? numLevelsEnd : 0) + 11;                          if (x >= 11)                          {                              int end = route.IndexOf("}"' x);                              if (end > 0)                              {                                  int l = end - x;                                  if (l > 0)                                  {                                      zoomFactor = int.Parse(route.Substring(x' l));                                  }                              }                          }                      }                      #endregion                        #region -- trim point overload --                      if (points != null && numLevel > 0 && !string.IsNullOrEmpty(levels))                      {                          if (points.Count - levels.Length > 0)                          {                              points.RemoveRange(levels.Length' points.Count - levels.Length);                          }                            //http://facstaff.unca.edu/mcmcclur/GoogleMaps/EncodePolyline/description.html                          //                          string allZlevels = "TSRPONMLKJIHGFEDCBA@?";                          if (numLevel > allZlevels.Length)                          {                              numLevel = allZlevels.Length;                          }                            // used letters in levels string                          string pLevels = allZlevels.Substring(allZlevels.Length - numLevel);                            // remove useless points at zoom                          {                              List<PointLatLng> removedPoints = new List<PointLatLng>();                                for (int i = 0; i < levels.Length; i++)                              {                                  int zi = pLevels.IndexOf(levels [i]);                                  if (zi > 0)                                  {                                      if (zi * numLevel > zoom)                                      {                                          removedPoints.Add(points [i]);                                      }                                  }                              }                                foreach (var v in removedPoints)                              {                                  points.Remove(v);                              }                              removedPoints.Clear();                              removedPoints = null;                          }                      }                      #endregion                  }              }              catch (Exception ex)              {                  points = null;                  Debug.WriteLine("GetRoutePoints: " + ex);              }
Magic Number,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetRoutePoints,The following statement contains a magic number: try              {                  string route = GMaps.Instance.UseRouteCache ? Cache.Instance.GetContent(url' CacheType.RouteCache) : string.Empty;                    if (string.IsNullOrEmpty(route))                  {                      route = GetContentUsingHttp(url);                        if (!string.IsNullOrEmpty(route))                      {                          if (GMaps.Instance.UseRouteCache)                          {                              Cache.Instance.SaveContent(url' CacheType.RouteCache' route);                          }                      }                  }                    // parse values                  if (!string.IsNullOrEmpty(route))                  {                      //{                      //tooltipHtml:" (300\x26#160;km / 2 valandos 59 min.)"'                      //polylines:                      //[{                      //   id:"route0"'                      //   points:"cy~rIcvp`ClJ~v@jHpu@N|BB~A?tA_@`J@nAJrB|AhEf@h@~@^pANh@Mr@a@`@_@x@cBPk@ZiBHeDQ{C]wAc@mAqCeEoA_C{@_Cy@iDoEaW}AsJcJ}t@iWowB{C_Vyw@gvGyTyjBu@gHwDoZ{W_zBsX}~BiA_MmAyOcAwOs@yNy@eTk@mVUmTE}PJ_W`@cVd@cQ`@}KjA_V`AeOn@oItAkOdAaKfBaOhDiVbD}RpBuKtEkTtP}q@fr@ypCfCmK|CmNvEqVvCuQ`BgLnAmJ`CgTpA_N~@sLlBwYh@yLp@cSj@e]zFkzKHaVViSf@wZjFwqBt@{Wr@qS`AaUjAgStBkYrEwe@xIuw@`Gmj@rFok@~BkYtCy_@|KccBvBgZjC}[tD__@pDaYjB_MpBuLhGi[fC}KfFcSnEkObFgOrFkOzEoLt[ys@tJeUlIsSbKqXtFiPfKi]rG_W|CiNhDkPfDuQlDoShEuXrEy[nOgiAxF{`@|DoVzFk[fDwPlXupA~CoPfDuQxGcd@l@yEdH{r@xDam@`AiWz@mYtAq~@p@uqAfAqx@|@kZxA}^lBq\\|Be\\lAaO~Dm`@|Gsj@tS_~AhCyUrCeZrByWv@uLlUiyDpA}NdHkn@pGmb@LkAtAoIjDqR`I{`@`BcH|I_b@zJcd@lKig@\\_CbBaIlJ}g@lIoj@pAuJtFoh@~Eqs@hDmv@h@qOfF{jBn@gSxCio@dAuQn@gIVoBjAiOlCqWbCiT`PekAzKiu@~EgYfIya@fA{ExGwWnDkMdHiU|G}R`HgQhRsa@hW}g@jVsg@|a@cbAbJkUxKoYxLa_@`IiZzHu[`DoOXsBhBuJbCwNdBaL`EkYvAwM`CeVtEwj@nDqj@BkAnB{YpGgeAn@eJ`CmYvEid@tBkQpGkd@rE}UxB}JdJo_@nDcNfSan@nS}j@lCeIvDsMbC{J|CyNbAwFfCgPz@uGvBiSdD}`@rFon@nKaqAxDmc@xBuT|Fqc@nC_PrEcUtC_MpFcT`GqQxJmXfXwq@jQgh@hBeGhG_U|BaK|G}[nRikAzIam@tDsYfE}^v@_MbAwKn@oIr@yLrBub@jAoa@b@sRdDmjBx@aZdA}XnAqVpAgTlAqPn@oGvFye@dCeRzGwb@xT_}A`BcPrAoOvCad@jAmXv@eV`BieA~@a[fBg_@`CiZ~A_OhHqk@hHcn@tEwe@rDub@nBoW~@sN|BeZnAgMvDm\\hFs^hSigArFaY`Gc\\`C}OhD}YfByQdAaNbAkOtOu~Cn@wKz@uLfCeY|CkW~B}OhCmO|AcI~A_IvDoPpEyPdImWrDuKnL_YjI{Ptl@qfAle@u|@xI}PbImQvFwMbGgOxFkOpdAosCdD_KxGsU|E}RxFcXhCwNjDwTvBiPfBqOrAyMfBcTxAaVhAwVrCy_Al@iPt@_OtA}Q`AuJ`AgIzAkK`EoUtBsJhCaKxCaKdDaKhQeg@jGiRfGaSrFyR`HsWvL}f@xp@grC`Sq|@pEsVdAoGjF{XlkAgwHxHgj@|Jex@fg@qlEjQs{AdHwh@zDkVhEkVzI_e@v}AgzHpK_l@tE}YtEy[rC}TpFme@jg@cpEbF{d@~BoXfBqUbAyOx@yN|Ao]bAo[tIazC`@iLb@aJ~AkWbBgRdBgPjA{IdCePlAmHfBmJdCiL~CuM|DoNxhDezKdDkLvBoInFqVbCuMxBqNnAeJ~CwXdBoSb^crElFsl@`Dy[zDu^xBiRzc@aaE|Fsd@vCkShDmTpG}^lD}QzDoR|zAcdHvIob@dKoj@jDmSlKiq@xVacBhEqXnBqL|Ga^zJke@`y@ktD~Mop@tP}_AdOg`AtCiQxCyOlDkPfDoN`GiTfGkRjEwLvEsL|HkQtEkJdE{HrwAkaCrT{a@rpDiuHtE_KvLuV|{AwaDzAqCb@mAf{Ac`D~FqL~y@_fBlNmZbGaNtF}Mpn@s~AlYss@dFgK|DoGhBoCrDuE~AcBtGaGnByAnDwBnCwAfDwAnFaBjGkA~[{E`iEkn@pQaDvIwBnIiCl\\qLn}J{pDhMcGrFcDhGeEvoDehC|AsArCwChBaC`C_EzC_HbBcFd@uB`@qAn@gDdB}Kz@}Hn@iPjByx@jDcvAj@}RDsEn@yTv@a]VcPtEamFBcHT_LNkEdAiShDsi@`GudAbFgx@`@iKdP}yFhBgs@p@yRjCo_AJwCXeEb@uEz@_H|@yEnBqHrCiIpAmE`o@qhBxC_IjIuVdIcXh{AgmG`i@_{BfCuLrhAssGfFeXxbBklInCsN|_AoiGpGs_@pl@w}Czy@_kEvG{]h}@ieFbQehAdHye@lPagA|Eu\\tAmI|CwWjn@mwGj@eH|]azFl@kPjAqd@jJe|DlD}vAxAeh@@eBvVk}JzIkqDfE_aBfA{YbBk[zp@e}LhAaObCeUlAuIzAeJrb@q`CjCcOnAaIpBwOtBkTjDsg@~AiPvBwOlAcH|AkIlCkLlYudApDoN`BgHhBaJvAeIvAqJbAuHrBqQbAsLx@oL`MwrCXkFr@uJh@{FhBsOvXwoB|EqVdBmHxC}KtCcJtDgKjDoIxE}JdHcMdCuDdIoKlmB}|BjJuMfFgIlE{HlEyIdEeJ~FaOvCgInCuI`EmN`J}]rEsP`EuMzCoIxGwPpi@cnAhGgPzCiJvFmRrEwQbDyOtCoPbDwTxDq\\rAsK`BgLhB{KxBoLfCgLjDqKdBqEfEkJtSy^`EcJnDuJjAwDrCeK\\}AjCaNr@qEjAaJtNaqAdCqQ`BsItS}bAbQs{@|Kor@xBmKz}@}uDze@{zAjk@}fBjTsq@r@uCd@aDFyCIwCWcCY}Aq_@w|A{AwF_DyHgHwOgu@m_BSb@nFhL"'                      //   levelsnumLevels:4'                      //   zoomFactor:16                      //}]                      //}                        #region -- title --                      int tooltipEnd = 0;                      {                          int x = route.IndexOf("tooltipHtml:") + 13;                          if (x >= 13)                          {                              tooltipEnd = route.IndexOf("\""' x + 1);                              if (tooltipEnd > 0)                              {                                  int l = tooltipEnd - x;                                  if (l > 0)                                  {                                      tooltipHtml = route.Substring(x' l).Replace(@"\x26#160;"' " ");                                  }                              }                          }                      }                      #endregion                        #region -- points --                      int pointsEnd = 0;                      {                          int x = route.IndexOf("points:"' tooltipEnd >= 0 ? tooltipEnd : 0) + 8;                          if (x >= 8)                          {                              pointsEnd = route.IndexOf("\""' x + 1);                              if (pointsEnd > 0)                              {                                  int l = pointsEnd - x;                                  if (l > 0)                                  {                                      /*                                      while(l % 5 != 0)                                      {                                         l--;                                      }                                      */                                        points = new List<PointLatLng>();                                      DecodePointsInto(points' route.Substring(x' l));                                  }                              }                          }                      }                      #endregion                        #region -- levels --                      string levels = string.Empty;                      int levelsEnd = 0;                      {                          int x = route.IndexOf("levels:"' pointsEnd >= 0 ? pointsEnd : 0) + 8;                          if (x >= 8)                          {                              levelsEnd = route.IndexOf("\""' x + 1);                              if (levelsEnd > 0)                              {                                  int l = levelsEnd - x;                                  if (l > 0)                                  {                                      levels = route.Substring(x' l);                                  }                              }                          }                      }                      #endregion                        #region -- numLevel --                      int numLevelsEnd = 0;                      {                          int x = route.IndexOf("numLevels:"' levelsEnd >= 0 ? levelsEnd : 0) + 10;                          if (x >= 10)                          {                              numLevelsEnd = route.IndexOf("'"' x);                              if (numLevelsEnd > 0)                              {                                  int l = numLevelsEnd - x;                                  if (l > 0)                                  {                                      numLevel = int.Parse(route.Substring(x' l));                                  }                              }                          }                      }                      #endregion                        #region -- zoomFactor --                      {                          int x = route.IndexOf("zoomFactor:"' numLevelsEnd >= 0 ? numLevelsEnd : 0) + 11;                          if (x >= 11)                          {                              int end = route.IndexOf("}"' x);                              if (end > 0)                              {                                  int l = end - x;                                  if (l > 0)                                  {                                      zoomFactor = int.Parse(route.Substring(x' l));                                  }                              }                          }                      }                      #endregion                        #region -- trim point overload --                      if (points != null && numLevel > 0 && !string.IsNullOrEmpty(levels))                      {                          if (points.Count - levels.Length > 0)                          {                              points.RemoveRange(levels.Length' points.Count - levels.Length);                          }                            //http://facstaff.unca.edu/mcmcclur/GoogleMaps/EncodePolyline/description.html                          //                          string allZlevels = "TSRPONMLKJIHGFEDCBA@?";                          if (numLevel > allZlevels.Length)                          {                              numLevel = allZlevels.Length;                          }                            // used letters in levels string                          string pLevels = allZlevels.Substring(allZlevels.Length - numLevel);                            // remove useless points at zoom                          {                              List<PointLatLng> removedPoints = new List<PointLatLng>();                                for (int i = 0; i < levels.Length; i++)                              {                                  int zi = pLevels.IndexOf(levels [i]);                                  if (zi > 0)                                  {                                      if (zi * numLevel > zoom)                                      {                                          removedPoints.Add(points [i]);                                      }                                  }                              }                                foreach (var v in removedPoints)                              {                                  points.Remove(v);                              }                              removedPoints.Clear();                              removedPoints = null;                          }                      }                      #endregion                  }              }              catch (Exception ex)              {                  points = null;                  Debug.WriteLine("GetRoutePoints: " + ex);              }
Magic Number,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetRoutePoints,The following statement contains a magic number: try              {                  string route = GMaps.Instance.UseRouteCache ? Cache.Instance.GetContent(url' CacheType.RouteCache) : string.Empty;                    if (string.IsNullOrEmpty(route))                  {                      route = GetContentUsingHttp(url);                        if (!string.IsNullOrEmpty(route))                      {                          if (GMaps.Instance.UseRouteCache)                          {                              Cache.Instance.SaveContent(url' CacheType.RouteCache' route);                          }                      }                  }                    // parse values                  if (!string.IsNullOrEmpty(route))                  {                      //{                      //tooltipHtml:" (300\x26#160;km / 2 valandos 59 min.)"'                      //polylines:                      //[{                      //   id:"route0"'                      //   points:"cy~rIcvp`ClJ~v@jHpu@N|BB~A?tA_@`J@nAJrB|AhEf@h@~@^pANh@Mr@a@`@_@x@cBPk@ZiBHeDQ{C]wAc@mAqCeEoA_C{@_Cy@iDoEaW}AsJcJ}t@iWowB{C_Vyw@gvGyTyjBu@gHwDoZ{W_zBsX}~BiA_MmAyOcAwOs@yNy@eTk@mVUmTE}PJ_W`@cVd@cQ`@}KjA_V`AeOn@oItAkOdAaKfBaOhDiVbD}RpBuKtEkTtP}q@fr@ypCfCmK|CmNvEqVvCuQ`BgLnAmJ`CgTpA_N~@sLlBwYh@yLp@cSj@e]zFkzKHaVViSf@wZjFwqBt@{Wr@qS`AaUjAgStBkYrEwe@xIuw@`Gmj@rFok@~BkYtCy_@|KccBvBgZjC}[tD__@pDaYjB_MpBuLhGi[fC}KfFcSnEkObFgOrFkOzEoLt[ys@tJeUlIsSbKqXtFiPfKi]rG_W|CiNhDkPfDuQlDoShEuXrEy[nOgiAxF{`@|DoVzFk[fDwPlXupA~CoPfDuQxGcd@l@yEdH{r@xDam@`AiWz@mYtAq~@p@uqAfAqx@|@kZxA}^lBq\\|Be\\lAaO~Dm`@|Gsj@tS_~AhCyUrCeZrByWv@uLlUiyDpA}NdHkn@pGmb@LkAtAoIjDqR`I{`@`BcH|I_b@zJcd@lKig@\\_CbBaIlJ}g@lIoj@pAuJtFoh@~Eqs@hDmv@h@qOfF{jBn@gSxCio@dAuQn@gIVoBjAiOlCqWbCiT`PekAzKiu@~EgYfIya@fA{ExGwWnDkMdHiU|G}R`HgQhRsa@hW}g@jVsg@|a@cbAbJkUxKoYxLa_@`IiZzHu[`DoOXsBhBuJbCwNdBaL`EkYvAwM`CeVtEwj@nDqj@BkAnB{YpGgeAn@eJ`CmYvEid@tBkQpGkd@rE}UxB}JdJo_@nDcNfSan@nS}j@lCeIvDsMbC{J|CyNbAwFfCgPz@uGvBiSdD}`@rFon@nKaqAxDmc@xBuT|Fqc@nC_PrEcUtC_MpFcT`GqQxJmXfXwq@jQgh@hBeGhG_U|BaK|G}[nRikAzIam@tDsYfE}^v@_MbAwKn@oIr@yLrBub@jAoa@b@sRdDmjBx@aZdA}XnAqVpAgTlAqPn@oGvFye@dCeRzGwb@xT_}A`BcPrAoOvCad@jAmXv@eV`BieA~@a[fBg_@`CiZ~A_OhHqk@hHcn@tEwe@rDub@nBoW~@sN|BeZnAgMvDm\\hFs^hSigArFaY`Gc\\`C}OhD}YfByQdAaNbAkOtOu~Cn@wKz@uLfCeY|CkW~B}OhCmO|AcI~A_IvDoPpEyPdImWrDuKnL_YjI{Ptl@qfAle@u|@xI}PbImQvFwMbGgOxFkOpdAosCdD_KxGsU|E}RxFcXhCwNjDwTvBiPfBqOrAyMfBcTxAaVhAwVrCy_Al@iPt@_OtA}Q`AuJ`AgIzAkK`EoUtBsJhCaKxCaKdDaKhQeg@jGiRfGaSrFyR`HsWvL}f@xp@grC`Sq|@pEsVdAoGjF{XlkAgwHxHgj@|Jex@fg@qlEjQs{AdHwh@zDkVhEkVzI_e@v}AgzHpK_l@tE}YtEy[rC}TpFme@jg@cpEbF{d@~BoXfBqUbAyOx@yN|Ao]bAo[tIazC`@iLb@aJ~AkWbBgRdBgPjA{IdCePlAmHfBmJdCiL~CuM|DoNxhDezKdDkLvBoInFqVbCuMxBqNnAeJ~CwXdBoSb^crElFsl@`Dy[zDu^xBiRzc@aaE|Fsd@vCkShDmTpG}^lD}QzDoR|zAcdHvIob@dKoj@jDmSlKiq@xVacBhEqXnBqL|Ga^zJke@`y@ktD~Mop@tP}_AdOg`AtCiQxCyOlDkPfDoN`GiTfGkRjEwLvEsL|HkQtEkJdE{HrwAkaCrT{a@rpDiuHtE_KvLuV|{AwaDzAqCb@mAf{Ac`D~FqL~y@_fBlNmZbGaNtF}Mpn@s~AlYss@dFgK|DoGhBoCrDuE~AcBtGaGnByAnDwBnCwAfDwAnFaBjGkA~[{E`iEkn@pQaDvIwBnIiCl\\qLn}J{pDhMcGrFcDhGeEvoDehC|AsArCwChBaC`C_EzC_HbBcFd@uB`@qAn@gDdB}Kz@}Hn@iPjByx@jDcvAj@}RDsEn@yTv@a]VcPtEamFBcHT_LNkEdAiShDsi@`GudAbFgx@`@iKdP}yFhBgs@p@yRjCo_AJwCXeEb@uEz@_H|@yEnBqHrCiIpAmE`o@qhBxC_IjIuVdIcXh{AgmG`i@_{BfCuLrhAssGfFeXxbBklInCsN|_AoiGpGs_@pl@w}Czy@_kEvG{]h}@ieFbQehAdHye@lPagA|Eu\\tAmI|CwWjn@mwGj@eH|]azFl@kPjAqd@jJe|DlD}vAxAeh@@eBvVk}JzIkqDfE_aBfA{YbBk[zp@e}LhAaObCeUlAuIzAeJrb@q`CjCcOnAaIpBwOtBkTjDsg@~AiPvBwOlAcH|AkIlCkLlYudApDoN`BgHhBaJvAeIvAqJbAuHrBqQbAsLx@oL`MwrCXkFr@uJh@{FhBsOvXwoB|EqVdBmHxC}KtCcJtDgKjDoIxE}JdHcMdCuDdIoKlmB}|BjJuMfFgIlE{HlEyIdEeJ~FaOvCgInCuI`EmN`J}]rEsP`EuMzCoIxGwPpi@cnAhGgPzCiJvFmRrEwQbDyOtCoPbDwTxDq\\rAsK`BgLhB{KxBoLfCgLjDqKdBqEfEkJtSy^`EcJnDuJjAwDrCeK\\}AjCaNr@qEjAaJtNaqAdCqQ`BsItS}bAbQs{@|Kor@xBmKz}@}uDze@{zAjk@}fBjTsq@r@uCd@aDFyCIwCWcCY}Aq_@w|A{AwF_DyHgHwOgu@m_BSb@nFhL"'                      //   levelsnumLevels:4'                      //   zoomFactor:16                      //}]                      //}                        #region -- title --                      int tooltipEnd = 0;                      {                          int x = route.IndexOf("tooltipHtml:") + 13;                          if (x >= 13)                          {                              tooltipEnd = route.IndexOf("\""' x + 1);                              if (tooltipEnd > 0)                              {                                  int l = tooltipEnd - x;                                  if (l > 0)                                  {                                      tooltipHtml = route.Substring(x' l).Replace(@"\x26#160;"' " ");                                  }                              }                          }                      }                      #endregion                        #region -- points --                      int pointsEnd = 0;                      {                          int x = route.IndexOf("points:"' tooltipEnd >= 0 ? tooltipEnd : 0) + 8;                          if (x >= 8)                          {                              pointsEnd = route.IndexOf("\""' x + 1);                              if (pointsEnd > 0)                              {                                  int l = pointsEnd - x;                                  if (l > 0)                                  {                                      /*                                      while(l % 5 != 0)                                      {                                         l--;                                      }                                      */                                        points = new List<PointLatLng>();                                      DecodePointsInto(points' route.Substring(x' l));                                  }                              }                          }                      }                      #endregion                        #region -- levels --                      string levels = string.Empty;                      int levelsEnd = 0;                      {                          int x = route.IndexOf("levels:"' pointsEnd >= 0 ? pointsEnd : 0) + 8;                          if (x >= 8)                          {                              levelsEnd = route.IndexOf("\""' x + 1);                              if (levelsEnd > 0)                              {                                  int l = levelsEnd - x;                                  if (l > 0)                                  {                                      levels = route.Substring(x' l);                                  }                              }                          }                      }                      #endregion                        #region -- numLevel --                      int numLevelsEnd = 0;                      {                          int x = route.IndexOf("numLevels:"' levelsEnd >= 0 ? levelsEnd : 0) + 10;                          if (x >= 10)                          {                              numLevelsEnd = route.IndexOf("'"' x);                              if (numLevelsEnd > 0)                              {                                  int l = numLevelsEnd - x;                                  if (l > 0)                                  {                                      numLevel = int.Parse(route.Substring(x' l));                                  }                              }                          }                      }                      #endregion                        #region -- zoomFactor --                      {                          int x = route.IndexOf("zoomFactor:"' numLevelsEnd >= 0 ? numLevelsEnd : 0) + 11;                          if (x >= 11)                          {                              int end = route.IndexOf("}"' x);                              if (end > 0)                              {                                  int l = end - x;                                  if (l > 0)                                  {                                      zoomFactor = int.Parse(route.Substring(x' l));                                  }                              }                          }                      }                      #endregion                        #region -- trim point overload --                      if (points != null && numLevel > 0 && !string.IsNullOrEmpty(levels))                      {                          if (points.Count - levels.Length > 0)                          {                              points.RemoveRange(levels.Length' points.Count - levels.Length);                          }                            //http://facstaff.unca.edu/mcmcclur/GoogleMaps/EncodePolyline/description.html                          //                          string allZlevels = "TSRPONMLKJIHGFEDCBA@?";                          if (numLevel > allZlevels.Length)                          {                              numLevel = allZlevels.Length;                          }                            // used letters in levels string                          string pLevels = allZlevels.Substring(allZlevels.Length - numLevel);                            // remove useless points at zoom                          {                              List<PointLatLng> removedPoints = new List<PointLatLng>();                                for (int i = 0; i < levels.Length; i++)                              {                                  int zi = pLevels.IndexOf(levels [i]);                                  if (zi > 0)                                  {                                      if (zi * numLevel > zoom)                                      {                                          removedPoints.Add(points [i]);                                      }                                  }                              }                                foreach (var v in removedPoints)                              {                                  points.Remove(v);                              }                              removedPoints.Clear();                              removedPoints = null;                          }                      }                      #endregion                  }              }              catch (Exception ex)              {                  points = null;                  Debug.WriteLine("GetRoutePoints: " + ex);              }
Magic Number,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetRoutePoints,The following statement contains a magic number: try              {                  string route = GMaps.Instance.UseRouteCache ? Cache.Instance.GetContent(url' CacheType.RouteCache) : string.Empty;                    if (string.IsNullOrEmpty(route))                  {                      route = GetContentUsingHttp(url);                        if (!string.IsNullOrEmpty(route))                      {                          if (GMaps.Instance.UseRouteCache)                          {                              Cache.Instance.SaveContent(url' CacheType.RouteCache' route);                          }                      }                  }                    // parse values                  if (!string.IsNullOrEmpty(route))                  {                      //{                      //tooltipHtml:" (300\x26#160;km / 2 valandos 59 min.)"'                      //polylines:                      //[{                      //   id:"route0"'                      //   points:"cy~rIcvp`ClJ~v@jHpu@N|BB~A?tA_@`J@nAJrB|AhEf@h@~@^pANh@Mr@a@`@_@x@cBPk@ZiBHeDQ{C]wAc@mAqCeEoA_C{@_Cy@iDoEaW}AsJcJ}t@iWowB{C_Vyw@gvGyTyjBu@gHwDoZ{W_zBsX}~BiA_MmAyOcAwOs@yNy@eTk@mVUmTE}PJ_W`@cVd@cQ`@}KjA_V`AeOn@oItAkOdAaKfBaOhDiVbD}RpBuKtEkTtP}q@fr@ypCfCmK|CmNvEqVvCuQ`BgLnAmJ`CgTpA_N~@sLlBwYh@yLp@cSj@e]zFkzKHaVViSf@wZjFwqBt@{Wr@qS`AaUjAgStBkYrEwe@xIuw@`Gmj@rFok@~BkYtCy_@|KccBvBgZjC}[tD__@pDaYjB_MpBuLhGi[fC}KfFcSnEkObFgOrFkOzEoLt[ys@tJeUlIsSbKqXtFiPfKi]rG_W|CiNhDkPfDuQlDoShEuXrEy[nOgiAxF{`@|DoVzFk[fDwPlXupA~CoPfDuQxGcd@l@yEdH{r@xDam@`AiWz@mYtAq~@p@uqAfAqx@|@kZxA}^lBq\\|Be\\lAaO~Dm`@|Gsj@tS_~AhCyUrCeZrByWv@uLlUiyDpA}NdHkn@pGmb@LkAtAoIjDqR`I{`@`BcH|I_b@zJcd@lKig@\\_CbBaIlJ}g@lIoj@pAuJtFoh@~Eqs@hDmv@h@qOfF{jBn@gSxCio@dAuQn@gIVoBjAiOlCqWbCiT`PekAzKiu@~EgYfIya@fA{ExGwWnDkMdHiU|G}R`HgQhRsa@hW}g@jVsg@|a@cbAbJkUxKoYxLa_@`IiZzHu[`DoOXsBhBuJbCwNdBaL`EkYvAwM`CeVtEwj@nDqj@BkAnB{YpGgeAn@eJ`CmYvEid@tBkQpGkd@rE}UxB}JdJo_@nDcNfSan@nS}j@lCeIvDsMbC{J|CyNbAwFfCgPz@uGvBiSdD}`@rFon@nKaqAxDmc@xBuT|Fqc@nC_PrEcUtC_MpFcT`GqQxJmXfXwq@jQgh@hBeGhG_U|BaK|G}[nRikAzIam@tDsYfE}^v@_MbAwKn@oIr@yLrBub@jAoa@b@sRdDmjBx@aZdA}XnAqVpAgTlAqPn@oGvFye@dCeRzGwb@xT_}A`BcPrAoOvCad@jAmXv@eV`BieA~@a[fBg_@`CiZ~A_OhHqk@hHcn@tEwe@rDub@nBoW~@sN|BeZnAgMvDm\\hFs^hSigArFaY`Gc\\`C}OhD}YfByQdAaNbAkOtOu~Cn@wKz@uLfCeY|CkW~B}OhCmO|AcI~A_IvDoPpEyPdImWrDuKnL_YjI{Ptl@qfAle@u|@xI}PbImQvFwMbGgOxFkOpdAosCdD_KxGsU|E}RxFcXhCwNjDwTvBiPfBqOrAyMfBcTxAaVhAwVrCy_Al@iPt@_OtA}Q`AuJ`AgIzAkK`EoUtBsJhCaKxCaKdDaKhQeg@jGiRfGaSrFyR`HsWvL}f@xp@grC`Sq|@pEsVdAoGjF{XlkAgwHxHgj@|Jex@fg@qlEjQs{AdHwh@zDkVhEkVzI_e@v}AgzHpK_l@tE}YtEy[rC}TpFme@jg@cpEbF{d@~BoXfBqUbAyOx@yN|Ao]bAo[tIazC`@iLb@aJ~AkWbBgRdBgPjA{IdCePlAmHfBmJdCiL~CuM|DoNxhDezKdDkLvBoInFqVbCuMxBqNnAeJ~CwXdBoSb^crElFsl@`Dy[zDu^xBiRzc@aaE|Fsd@vCkShDmTpG}^lD}QzDoR|zAcdHvIob@dKoj@jDmSlKiq@xVacBhEqXnBqL|Ga^zJke@`y@ktD~Mop@tP}_AdOg`AtCiQxCyOlDkPfDoN`GiTfGkRjEwLvEsL|HkQtEkJdE{HrwAkaCrT{a@rpDiuHtE_KvLuV|{AwaDzAqCb@mAf{Ac`D~FqL~y@_fBlNmZbGaNtF}Mpn@s~AlYss@dFgK|DoGhBoCrDuE~AcBtGaGnByAnDwBnCwAfDwAnFaBjGkA~[{E`iEkn@pQaDvIwBnIiCl\\qLn}J{pDhMcGrFcDhGeEvoDehC|AsArCwChBaC`C_EzC_HbBcFd@uB`@qAn@gDdB}Kz@}Hn@iPjByx@jDcvAj@}RDsEn@yTv@a]VcPtEamFBcHT_LNkEdAiShDsi@`GudAbFgx@`@iKdP}yFhBgs@p@yRjCo_AJwCXeEb@uEz@_H|@yEnBqHrCiIpAmE`o@qhBxC_IjIuVdIcXh{AgmG`i@_{BfCuLrhAssGfFeXxbBklInCsN|_AoiGpGs_@pl@w}Czy@_kEvG{]h}@ieFbQehAdHye@lPagA|Eu\\tAmI|CwWjn@mwGj@eH|]azFl@kPjAqd@jJe|DlD}vAxAeh@@eBvVk}JzIkqDfE_aBfA{YbBk[zp@e}LhAaObCeUlAuIzAeJrb@q`CjCcOnAaIpBwOtBkTjDsg@~AiPvBwOlAcH|AkIlCkLlYudApDoN`BgHhBaJvAeIvAqJbAuHrBqQbAsLx@oL`MwrCXkFr@uJh@{FhBsOvXwoB|EqVdBmHxC}KtCcJtDgKjDoIxE}JdHcMdCuDdIoKlmB}|BjJuMfFgIlE{HlEyIdEeJ~FaOvCgInCuI`EmN`J}]rEsP`EuMzCoIxGwPpi@cnAhGgPzCiJvFmRrEwQbDyOtCoPbDwTxDq\\rAsK`BgLhB{KxBoLfCgLjDqKdBqEfEkJtSy^`EcJnDuJjAwDrCeK\\}AjCaNr@qEjAaJtNaqAdCqQ`BsItS}bAbQs{@|Kor@xBmKz}@}uDze@{zAjk@}fBjTsq@r@uCd@aDFyCIwCWcCY}Aq_@w|A{AwF_DyHgHwOgu@m_BSb@nFhL"'                      //   levelsnumLevels:4'                      //   zoomFactor:16                      //}]                      //}                        #region -- title --                      int tooltipEnd = 0;                      {                          int x = route.IndexOf("tooltipHtml:") + 13;                          if (x >= 13)                          {                              tooltipEnd = route.IndexOf("\""' x + 1);                              if (tooltipEnd > 0)                              {                                  int l = tooltipEnd - x;                                  if (l > 0)                                  {                                      tooltipHtml = route.Substring(x' l).Replace(@"\x26#160;"' " ");                                  }                              }                          }                      }                      #endregion                        #region -- points --                      int pointsEnd = 0;                      {                          int x = route.IndexOf("points:"' tooltipEnd >= 0 ? tooltipEnd : 0) + 8;                          if (x >= 8)                          {                              pointsEnd = route.IndexOf("\""' x + 1);                              if (pointsEnd > 0)                              {                                  int l = pointsEnd - x;                                  if (l > 0)                                  {                                      /*                                      while(l % 5 != 0)                                      {                                         l--;                                      }                                      */                                        points = new List<PointLatLng>();                                      DecodePointsInto(points' route.Substring(x' l));                                  }                              }                          }                      }                      #endregion                        #region -- levels --                      string levels = string.Empty;                      int levelsEnd = 0;                      {                          int x = route.IndexOf("levels:"' pointsEnd >= 0 ? pointsEnd : 0) + 8;                          if (x >= 8)                          {                              levelsEnd = route.IndexOf("\""' x + 1);                              if (levelsEnd > 0)                              {                                  int l = levelsEnd - x;                                  if (l > 0)                                  {                                      levels = route.Substring(x' l);                                  }                              }                          }                      }                      #endregion                        #region -- numLevel --                      int numLevelsEnd = 0;                      {                          int x = route.IndexOf("numLevels:"' levelsEnd >= 0 ? levelsEnd : 0) + 10;                          if (x >= 10)                          {                              numLevelsEnd = route.IndexOf("'"' x);                              if (numLevelsEnd > 0)                              {                                  int l = numLevelsEnd - x;                                  if (l > 0)                                  {                                      numLevel = int.Parse(route.Substring(x' l));                                  }                              }                          }                      }                      #endregion                        #region -- zoomFactor --                      {                          int x = route.IndexOf("zoomFactor:"' numLevelsEnd >= 0 ? numLevelsEnd : 0) + 11;                          if (x >= 11)                          {                              int end = route.IndexOf("}"' x);                              if (end > 0)                              {                                  int l = end - x;                                  if (l > 0)                                  {                                      zoomFactor = int.Parse(route.Substring(x' l));                                  }                              }                          }                      }                      #endregion                        #region -- trim point overload --                      if (points != null && numLevel > 0 && !string.IsNullOrEmpty(levels))                      {                          if (points.Count - levels.Length > 0)                          {                              points.RemoveRange(levels.Length' points.Count - levels.Length);                          }                            //http://facstaff.unca.edu/mcmcclur/GoogleMaps/EncodePolyline/description.html                          //                          string allZlevels = "TSRPONMLKJIHGFEDCBA@?";                          if (numLevel > allZlevels.Length)                          {                              numLevel = allZlevels.Length;                          }                            // used letters in levels string                          string pLevels = allZlevels.Substring(allZlevels.Length - numLevel);                            // remove useless points at zoom                          {                              List<PointLatLng> removedPoints = new List<PointLatLng>();                                for (int i = 0; i < levels.Length; i++)                              {                                  int zi = pLevels.IndexOf(levels [i]);                                  if (zi > 0)                                  {                                      if (zi * numLevel > zoom)                                      {                                          removedPoints.Add(points [i]);                                      }                                  }                              }                                foreach (var v in removedPoints)                              {                                  points.Remove(v);                              }                              removedPoints.Clear();                              removedPoints = null;                          }                      }                      #endregion                  }              }              catch (Exception ex)              {                  points = null;                  Debug.WriteLine("GetRoutePoints: " + ex);              }
Magic Number,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetRoutePoints,The following statement contains a magic number: try              {                  string route = GMaps.Instance.UseRouteCache ? Cache.Instance.GetContent(url' CacheType.RouteCache) : string.Empty;                    if (string.IsNullOrEmpty(route))                  {                      route = GetContentUsingHttp(url);                        if (!string.IsNullOrEmpty(route))                      {                          if (GMaps.Instance.UseRouteCache)                          {                              Cache.Instance.SaveContent(url' CacheType.RouteCache' route);                          }                      }                  }                    // parse values                  if (!string.IsNullOrEmpty(route))                  {                      //{                      //tooltipHtml:" (300\x26#160;km / 2 valandos 59 min.)"'                      //polylines:                      //[{                      //   id:"route0"'                      //   points:"cy~rIcvp`ClJ~v@jHpu@N|BB~A?tA_@`J@nAJrB|AhEf@h@~@^pANh@Mr@a@`@_@x@cBPk@ZiBHeDQ{C]wAc@mAqCeEoA_C{@_Cy@iDoEaW}AsJcJ}t@iWowB{C_Vyw@gvGyTyjBu@gHwDoZ{W_zBsX}~BiA_MmAyOcAwOs@yNy@eTk@mVUmTE}PJ_W`@cVd@cQ`@}KjA_V`AeOn@oItAkOdAaKfBaOhDiVbD}RpBuKtEkTtP}q@fr@ypCfCmK|CmNvEqVvCuQ`BgLnAmJ`CgTpA_N~@sLlBwYh@yLp@cSj@e]zFkzKHaVViSf@wZjFwqBt@{Wr@qS`AaUjAgStBkYrEwe@xIuw@`Gmj@rFok@~BkYtCy_@|KccBvBgZjC}[tD__@pDaYjB_MpBuLhGi[fC}KfFcSnEkObFgOrFkOzEoLt[ys@tJeUlIsSbKqXtFiPfKi]rG_W|CiNhDkPfDuQlDoShEuXrEy[nOgiAxF{`@|DoVzFk[fDwPlXupA~CoPfDuQxGcd@l@yEdH{r@xDam@`AiWz@mYtAq~@p@uqAfAqx@|@kZxA}^lBq\\|Be\\lAaO~Dm`@|Gsj@tS_~AhCyUrCeZrByWv@uLlUiyDpA}NdHkn@pGmb@LkAtAoIjDqR`I{`@`BcH|I_b@zJcd@lKig@\\_CbBaIlJ}g@lIoj@pAuJtFoh@~Eqs@hDmv@h@qOfF{jBn@gSxCio@dAuQn@gIVoBjAiOlCqWbCiT`PekAzKiu@~EgYfIya@fA{ExGwWnDkMdHiU|G}R`HgQhRsa@hW}g@jVsg@|a@cbAbJkUxKoYxLa_@`IiZzHu[`DoOXsBhBuJbCwNdBaL`EkYvAwM`CeVtEwj@nDqj@BkAnB{YpGgeAn@eJ`CmYvEid@tBkQpGkd@rE}UxB}JdJo_@nDcNfSan@nS}j@lCeIvDsMbC{J|CyNbAwFfCgPz@uGvBiSdD}`@rFon@nKaqAxDmc@xBuT|Fqc@nC_PrEcUtC_MpFcT`GqQxJmXfXwq@jQgh@hBeGhG_U|BaK|G}[nRikAzIam@tDsYfE}^v@_MbAwKn@oIr@yLrBub@jAoa@b@sRdDmjBx@aZdA}XnAqVpAgTlAqPn@oGvFye@dCeRzGwb@xT_}A`BcPrAoOvCad@jAmXv@eV`BieA~@a[fBg_@`CiZ~A_OhHqk@hHcn@tEwe@rDub@nBoW~@sN|BeZnAgMvDm\\hFs^hSigArFaY`Gc\\`C}OhD}YfByQdAaNbAkOtOu~Cn@wKz@uLfCeY|CkW~B}OhCmO|AcI~A_IvDoPpEyPdImWrDuKnL_YjI{Ptl@qfAle@u|@xI}PbImQvFwMbGgOxFkOpdAosCdD_KxGsU|E}RxFcXhCwNjDwTvBiPfBqOrAyMfBcTxAaVhAwVrCy_Al@iPt@_OtA}Q`AuJ`AgIzAkK`EoUtBsJhCaKxCaKdDaKhQeg@jGiRfGaSrFyR`HsWvL}f@xp@grC`Sq|@pEsVdAoGjF{XlkAgwHxHgj@|Jex@fg@qlEjQs{AdHwh@zDkVhEkVzI_e@v}AgzHpK_l@tE}YtEy[rC}TpFme@jg@cpEbF{d@~BoXfBqUbAyOx@yN|Ao]bAo[tIazC`@iLb@aJ~AkWbBgRdBgPjA{IdCePlAmHfBmJdCiL~CuM|DoNxhDezKdDkLvBoInFqVbCuMxBqNnAeJ~CwXdBoSb^crElFsl@`Dy[zDu^xBiRzc@aaE|Fsd@vCkShDmTpG}^lD}QzDoR|zAcdHvIob@dKoj@jDmSlKiq@xVacBhEqXnBqL|Ga^zJke@`y@ktD~Mop@tP}_AdOg`AtCiQxCyOlDkPfDoN`GiTfGkRjEwLvEsL|HkQtEkJdE{HrwAkaCrT{a@rpDiuHtE_KvLuV|{AwaDzAqCb@mAf{Ac`D~FqL~y@_fBlNmZbGaNtF}Mpn@s~AlYss@dFgK|DoGhBoCrDuE~AcBtGaGnByAnDwBnCwAfDwAnFaBjGkA~[{E`iEkn@pQaDvIwBnIiCl\\qLn}J{pDhMcGrFcDhGeEvoDehC|AsArCwChBaC`C_EzC_HbBcFd@uB`@qAn@gDdB}Kz@}Hn@iPjByx@jDcvAj@}RDsEn@yTv@a]VcPtEamFBcHT_LNkEdAiShDsi@`GudAbFgx@`@iKdP}yFhBgs@p@yRjCo_AJwCXeEb@uEz@_H|@yEnBqHrCiIpAmE`o@qhBxC_IjIuVdIcXh{AgmG`i@_{BfCuLrhAssGfFeXxbBklInCsN|_AoiGpGs_@pl@w}Czy@_kEvG{]h}@ieFbQehAdHye@lPagA|Eu\\tAmI|CwWjn@mwGj@eH|]azFl@kPjAqd@jJe|DlD}vAxAeh@@eBvVk}JzIkqDfE_aBfA{YbBk[zp@e}LhAaObCeUlAuIzAeJrb@q`CjCcOnAaIpBwOtBkTjDsg@~AiPvBwOlAcH|AkIlCkLlYudApDoN`BgHhBaJvAeIvAqJbAuHrBqQbAsLx@oL`MwrCXkFr@uJh@{FhBsOvXwoB|EqVdBmHxC}KtCcJtDgKjDoIxE}JdHcMdCuDdIoKlmB}|BjJuMfFgIlE{HlEyIdEeJ~FaOvCgInCuI`EmN`J}]rEsP`EuMzCoIxGwPpi@cnAhGgPzCiJvFmRrEwQbDyOtCoPbDwTxDq\\rAsK`BgLhB{KxBoLfCgLjDqKdBqEfEkJtSy^`EcJnDuJjAwDrCeK\\}AjCaNr@qEjAaJtNaqAdCqQ`BsItS}bAbQs{@|Kor@xBmKz}@}uDze@{zAjk@}fBjTsq@r@uCd@aDFyCIwCWcCY}Aq_@w|A{AwF_DyHgHwOgu@m_BSb@nFhL"'                      //   levelsnumLevels:4'                      //   zoomFactor:16                      //}]                      //}                        #region -- title --                      int tooltipEnd = 0;                      {                          int x = route.IndexOf("tooltipHtml:") + 13;                          if (x >= 13)                          {                              tooltipEnd = route.IndexOf("\""' x + 1);                              if (tooltipEnd > 0)                              {                                  int l = tooltipEnd - x;                                  if (l > 0)                                  {                                      tooltipHtml = route.Substring(x' l).Replace(@"\x26#160;"' " ");                                  }                              }                          }                      }                      #endregion                        #region -- points --                      int pointsEnd = 0;                      {                          int x = route.IndexOf("points:"' tooltipEnd >= 0 ? tooltipEnd : 0) + 8;                          if (x >= 8)                          {                              pointsEnd = route.IndexOf("\""' x + 1);                              if (pointsEnd > 0)                              {                                  int l = pointsEnd - x;                                  if (l > 0)                                  {                                      /*                                      while(l % 5 != 0)                                      {                                         l--;                                      }                                      */                                        points = new List<PointLatLng>();                                      DecodePointsInto(points' route.Substring(x' l));                                  }                              }                          }                      }                      #endregion                        #region -- levels --                      string levels = string.Empty;                      int levelsEnd = 0;                      {                          int x = route.IndexOf("levels:"' pointsEnd >= 0 ? pointsEnd : 0) + 8;                          if (x >= 8)                          {                              levelsEnd = route.IndexOf("\""' x + 1);                              if (levelsEnd > 0)                              {                                  int l = levelsEnd - x;                                  if (l > 0)                                  {                                      levels = route.Substring(x' l);                                  }                              }                          }                      }                      #endregion                        #region -- numLevel --                      int numLevelsEnd = 0;                      {                          int x = route.IndexOf("numLevels:"' levelsEnd >= 0 ? levelsEnd : 0) + 10;                          if (x >= 10)                          {                              numLevelsEnd = route.IndexOf("'"' x);                              if (numLevelsEnd > 0)                              {                                  int l = numLevelsEnd - x;                                  if (l > 0)                                  {                                      numLevel = int.Parse(route.Substring(x' l));                                  }                              }                          }                      }                      #endregion                        #region -- zoomFactor --                      {                          int x = route.IndexOf("zoomFactor:"' numLevelsEnd >= 0 ? numLevelsEnd : 0) + 11;                          if (x >= 11)                          {                              int end = route.IndexOf("}"' x);                              if (end > 0)                              {                                  int l = end - x;                                  if (l > 0)                                  {                                      zoomFactor = int.Parse(route.Substring(x' l));                                  }                              }                          }                      }                      #endregion                        #region -- trim point overload --                      if (points != null && numLevel > 0 && !string.IsNullOrEmpty(levels))                      {                          if (points.Count - levels.Length > 0)                          {                              points.RemoveRange(levels.Length' points.Count - levels.Length);                          }                            //http://facstaff.unca.edu/mcmcclur/GoogleMaps/EncodePolyline/description.html                          //                          string allZlevels = "TSRPONMLKJIHGFEDCBA@?";                          if (numLevel > allZlevels.Length)                          {                              numLevel = allZlevels.Length;                          }                            // used letters in levels string                          string pLevels = allZlevels.Substring(allZlevels.Length - numLevel);                            // remove useless points at zoom                          {                              List<PointLatLng> removedPoints = new List<PointLatLng>();                                for (int i = 0; i < levels.Length; i++)                              {                                  int zi = pLevels.IndexOf(levels [i]);                                  if (zi > 0)                                  {                                      if (zi * numLevel > zoom)                                      {                                          removedPoints.Add(points [i]);                                      }                                  }                              }                                foreach (var v in removedPoints)                              {                                  points.Remove(v);                              }                              removedPoints.Clear();                              removedPoints = null;                          }                      }                      #endregion                  }              }              catch (Exception ex)              {                  points = null;                  Debug.WriteLine("GetRoutePoints: " + ex);              }
Magic Number,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetRoutePoints,The following statement contains a magic number: try              {                  string route = GMaps.Instance.UseRouteCache ? Cache.Instance.GetContent(url' CacheType.RouteCache) : string.Empty;                    if (string.IsNullOrEmpty(route))                  {                      route = GetContentUsingHttp(url);                        if (!string.IsNullOrEmpty(route))                      {                          if (GMaps.Instance.UseRouteCache)                          {                              Cache.Instance.SaveContent(url' CacheType.RouteCache' route);                          }                      }                  }                    // parse values                  if (!string.IsNullOrEmpty(route))                  {                      //{                      //tooltipHtml:" (300\x26#160;km / 2 valandos 59 min.)"'                      //polylines:                      //[{                      //   id:"route0"'                      //   points:"cy~rIcvp`ClJ~v@jHpu@N|BB~A?tA_@`J@nAJrB|AhEf@h@~@^pANh@Mr@a@`@_@x@cBPk@ZiBHeDQ{C]wAc@mAqCeEoA_C{@_Cy@iDoEaW}AsJcJ}t@iWowB{C_Vyw@gvGyTyjBu@gHwDoZ{W_zBsX}~BiA_MmAyOcAwOs@yNy@eTk@mVUmTE}PJ_W`@cVd@cQ`@}KjA_V`AeOn@oItAkOdAaKfBaOhDiVbD}RpBuKtEkTtP}q@fr@ypCfCmK|CmNvEqVvCuQ`BgLnAmJ`CgTpA_N~@sLlBwYh@yLp@cSj@e]zFkzKHaVViSf@wZjFwqBt@{Wr@qS`AaUjAgStBkYrEwe@xIuw@`Gmj@rFok@~BkYtCy_@|KccBvBgZjC}[tD__@pDaYjB_MpBuLhGi[fC}KfFcSnEkObFgOrFkOzEoLt[ys@tJeUlIsSbKqXtFiPfKi]rG_W|CiNhDkPfDuQlDoShEuXrEy[nOgiAxF{`@|DoVzFk[fDwPlXupA~CoPfDuQxGcd@l@yEdH{r@xDam@`AiWz@mYtAq~@p@uqAfAqx@|@kZxA}^lBq\\|Be\\lAaO~Dm`@|Gsj@tS_~AhCyUrCeZrByWv@uLlUiyDpA}NdHkn@pGmb@LkAtAoIjDqR`I{`@`BcH|I_b@zJcd@lKig@\\_CbBaIlJ}g@lIoj@pAuJtFoh@~Eqs@hDmv@h@qOfF{jBn@gSxCio@dAuQn@gIVoBjAiOlCqWbCiT`PekAzKiu@~EgYfIya@fA{ExGwWnDkMdHiU|G}R`HgQhRsa@hW}g@jVsg@|a@cbAbJkUxKoYxLa_@`IiZzHu[`DoOXsBhBuJbCwNdBaL`EkYvAwM`CeVtEwj@nDqj@BkAnB{YpGgeAn@eJ`CmYvEid@tBkQpGkd@rE}UxB}JdJo_@nDcNfSan@nS}j@lCeIvDsMbC{J|CyNbAwFfCgPz@uGvBiSdD}`@rFon@nKaqAxDmc@xBuT|Fqc@nC_PrEcUtC_MpFcT`GqQxJmXfXwq@jQgh@hBeGhG_U|BaK|G}[nRikAzIam@tDsYfE}^v@_MbAwKn@oIr@yLrBub@jAoa@b@sRdDmjBx@aZdA}XnAqVpAgTlAqPn@oGvFye@dCeRzGwb@xT_}A`BcPrAoOvCad@jAmXv@eV`BieA~@a[fBg_@`CiZ~A_OhHqk@hHcn@tEwe@rDub@nBoW~@sN|BeZnAgMvDm\\hFs^hSigArFaY`Gc\\`C}OhD}YfByQdAaNbAkOtOu~Cn@wKz@uLfCeY|CkW~B}OhCmO|AcI~A_IvDoPpEyPdImWrDuKnL_YjI{Ptl@qfAle@u|@xI}PbImQvFwMbGgOxFkOpdAosCdD_KxGsU|E}RxFcXhCwNjDwTvBiPfBqOrAyMfBcTxAaVhAwVrCy_Al@iPt@_OtA}Q`AuJ`AgIzAkK`EoUtBsJhCaKxCaKdDaKhQeg@jGiRfGaSrFyR`HsWvL}f@xp@grC`Sq|@pEsVdAoGjF{XlkAgwHxHgj@|Jex@fg@qlEjQs{AdHwh@zDkVhEkVzI_e@v}AgzHpK_l@tE}YtEy[rC}TpFme@jg@cpEbF{d@~BoXfBqUbAyOx@yN|Ao]bAo[tIazC`@iLb@aJ~AkWbBgRdBgPjA{IdCePlAmHfBmJdCiL~CuM|DoNxhDezKdDkLvBoInFqVbCuMxBqNnAeJ~CwXdBoSb^crElFsl@`Dy[zDu^xBiRzc@aaE|Fsd@vCkShDmTpG}^lD}QzDoR|zAcdHvIob@dKoj@jDmSlKiq@xVacBhEqXnBqL|Ga^zJke@`y@ktD~Mop@tP}_AdOg`AtCiQxCyOlDkPfDoN`GiTfGkRjEwLvEsL|HkQtEkJdE{HrwAkaCrT{a@rpDiuHtE_KvLuV|{AwaDzAqCb@mAf{Ac`D~FqL~y@_fBlNmZbGaNtF}Mpn@s~AlYss@dFgK|DoGhBoCrDuE~AcBtGaGnByAnDwBnCwAfDwAnFaBjGkA~[{E`iEkn@pQaDvIwBnIiCl\\qLn}J{pDhMcGrFcDhGeEvoDehC|AsArCwChBaC`C_EzC_HbBcFd@uB`@qAn@gDdB}Kz@}Hn@iPjByx@jDcvAj@}RDsEn@yTv@a]VcPtEamFBcHT_LNkEdAiShDsi@`GudAbFgx@`@iKdP}yFhBgs@p@yRjCo_AJwCXeEb@uEz@_H|@yEnBqHrCiIpAmE`o@qhBxC_IjIuVdIcXh{AgmG`i@_{BfCuLrhAssGfFeXxbBklInCsN|_AoiGpGs_@pl@w}Czy@_kEvG{]h}@ieFbQehAdHye@lPagA|Eu\\tAmI|CwWjn@mwGj@eH|]azFl@kPjAqd@jJe|DlD}vAxAeh@@eBvVk}JzIkqDfE_aBfA{YbBk[zp@e}LhAaObCeUlAuIzAeJrb@q`CjCcOnAaIpBwOtBkTjDsg@~AiPvBwOlAcH|AkIlCkLlYudApDoN`BgHhBaJvAeIvAqJbAuHrBqQbAsLx@oL`MwrCXkFr@uJh@{FhBsOvXwoB|EqVdBmHxC}KtCcJtDgKjDoIxE}JdHcMdCuDdIoKlmB}|BjJuMfFgIlE{HlEyIdEeJ~FaOvCgInCuI`EmN`J}]rEsP`EuMzCoIxGwPpi@cnAhGgPzCiJvFmRrEwQbDyOtCoPbDwTxDq\\rAsK`BgLhB{KxBoLfCgLjDqKdBqEfEkJtSy^`EcJnDuJjAwDrCeK\\}AjCaNr@qEjAaJtNaqAdCqQ`BsItS}bAbQs{@|Kor@xBmKz}@}uDze@{zAjk@}fBjTsq@r@uCd@aDFyCIwCWcCY}Aq_@w|A{AwF_DyHgHwOgu@m_BSb@nFhL"'                      //   levelsnumLevels:4'                      //   zoomFactor:16                      //}]                      //}                        #region -- title --                      int tooltipEnd = 0;                      {                          int x = route.IndexOf("tooltipHtml:") + 13;                          if (x >= 13)                          {                              tooltipEnd = route.IndexOf("\""' x + 1);                              if (tooltipEnd > 0)                              {                                  int l = tooltipEnd - x;                                  if (l > 0)                                  {                                      tooltipHtml = route.Substring(x' l).Replace(@"\x26#160;"' " ");                                  }                              }                          }                      }                      #endregion                        #region -- points --                      int pointsEnd = 0;                      {                          int x = route.IndexOf("points:"' tooltipEnd >= 0 ? tooltipEnd : 0) + 8;                          if (x >= 8)                          {                              pointsEnd = route.IndexOf("\""' x + 1);                              if (pointsEnd > 0)                              {                                  int l = pointsEnd - x;                                  if (l > 0)                                  {                                      /*                                      while(l % 5 != 0)                                      {                                         l--;                                      }                                      */                                        points = new List<PointLatLng>();                                      DecodePointsInto(points' route.Substring(x' l));                                  }                              }                          }                      }                      #endregion                        #region -- levels --                      string levels = string.Empty;                      int levelsEnd = 0;                      {                          int x = route.IndexOf("levels:"' pointsEnd >= 0 ? pointsEnd : 0) + 8;                          if (x >= 8)                          {                              levelsEnd = route.IndexOf("\""' x + 1);                              if (levelsEnd > 0)                              {                                  int l = levelsEnd - x;                                  if (l > 0)                                  {                                      levels = route.Substring(x' l);                                  }                              }                          }                      }                      #endregion                        #region -- numLevel --                      int numLevelsEnd = 0;                      {                          int x = route.IndexOf("numLevels:"' levelsEnd >= 0 ? levelsEnd : 0) + 10;                          if (x >= 10)                          {                              numLevelsEnd = route.IndexOf("'"' x);                              if (numLevelsEnd > 0)                              {                                  int l = numLevelsEnd - x;                                  if (l > 0)                                  {                                      numLevel = int.Parse(route.Substring(x' l));                                  }                              }                          }                      }                      #endregion                        #region -- zoomFactor --                      {                          int x = route.IndexOf("zoomFactor:"' numLevelsEnd >= 0 ? numLevelsEnd : 0) + 11;                          if (x >= 11)                          {                              int end = route.IndexOf("}"' x);                              if (end > 0)                              {                                  int l = end - x;                                  if (l > 0)                                  {                                      zoomFactor = int.Parse(route.Substring(x' l));                                  }                              }                          }                      }                      #endregion                        #region -- trim point overload --                      if (points != null && numLevel > 0 && !string.IsNullOrEmpty(levels))                      {                          if (points.Count - levels.Length > 0)                          {                              points.RemoveRange(levels.Length' points.Count - levels.Length);                          }                            //http://facstaff.unca.edu/mcmcclur/GoogleMaps/EncodePolyline/description.html                          //                          string allZlevels = "TSRPONMLKJIHGFEDCBA@?";                          if (numLevel > allZlevels.Length)                          {                              numLevel = allZlevels.Length;                          }                            // used letters in levels string                          string pLevels = allZlevels.Substring(allZlevels.Length - numLevel);                            // remove useless points at zoom                          {                              List<PointLatLng> removedPoints = new List<PointLatLng>();                                for (int i = 0; i < levels.Length; i++)                              {                                  int zi = pLevels.IndexOf(levels [i]);                                  if (zi > 0)                                  {                                      if (zi * numLevel > zoom)                                      {                                          removedPoints.Add(points [i]);                                      }                                  }                              }                                foreach (var v in removedPoints)                              {                                  points.Remove(v);                              }                              removedPoints.Clear();                              removedPoints = null;                          }                      }                      #endregion                  }              }              catch (Exception ex)              {                  points = null;                  Debug.WriteLine("GetRoutePoints: " + ex);              }
Magic Number,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetRoutePoints,The following statement contains a magic number: try              {                  string route = GMaps.Instance.UseRouteCache ? Cache.Instance.GetContent(url' CacheType.RouteCache) : string.Empty;                    if (string.IsNullOrEmpty(route))                  {                      route = GetContentUsingHttp(url);                        if (!string.IsNullOrEmpty(route))                      {                          if (GMaps.Instance.UseRouteCache)                          {                              Cache.Instance.SaveContent(url' CacheType.RouteCache' route);                          }                      }                  }                    // parse values                  if (!string.IsNullOrEmpty(route))                  {                      //{                      //tooltipHtml:" (300\x26#160;km / 2 valandos 59 min.)"'                      //polylines:                      //[{                      //   id:"route0"'                      //   points:"cy~rIcvp`ClJ~v@jHpu@N|BB~A?tA_@`J@nAJrB|AhEf@h@~@^pANh@Mr@a@`@_@x@cBPk@ZiBHeDQ{C]wAc@mAqCeEoA_C{@_Cy@iDoEaW}AsJcJ}t@iWowB{C_Vyw@gvGyTyjBu@gHwDoZ{W_zBsX}~BiA_MmAyOcAwOs@yNy@eTk@mVUmTE}PJ_W`@cVd@cQ`@}KjA_V`AeOn@oItAkOdAaKfBaOhDiVbD}RpBuKtEkTtP}q@fr@ypCfCmK|CmNvEqVvCuQ`BgLnAmJ`CgTpA_N~@sLlBwYh@yLp@cSj@e]zFkzKHaVViSf@wZjFwqBt@{Wr@qS`AaUjAgStBkYrEwe@xIuw@`Gmj@rFok@~BkYtCy_@|KccBvBgZjC}[tD__@pDaYjB_MpBuLhGi[fC}KfFcSnEkObFgOrFkOzEoLt[ys@tJeUlIsSbKqXtFiPfKi]rG_W|CiNhDkPfDuQlDoShEuXrEy[nOgiAxF{`@|DoVzFk[fDwPlXupA~CoPfDuQxGcd@l@yEdH{r@xDam@`AiWz@mYtAq~@p@uqAfAqx@|@kZxA}^lBq\\|Be\\lAaO~Dm`@|Gsj@tS_~AhCyUrCeZrByWv@uLlUiyDpA}NdHkn@pGmb@LkAtAoIjDqR`I{`@`BcH|I_b@zJcd@lKig@\\_CbBaIlJ}g@lIoj@pAuJtFoh@~Eqs@hDmv@h@qOfF{jBn@gSxCio@dAuQn@gIVoBjAiOlCqWbCiT`PekAzKiu@~EgYfIya@fA{ExGwWnDkMdHiU|G}R`HgQhRsa@hW}g@jVsg@|a@cbAbJkUxKoYxLa_@`IiZzHu[`DoOXsBhBuJbCwNdBaL`EkYvAwM`CeVtEwj@nDqj@BkAnB{YpGgeAn@eJ`CmYvEid@tBkQpGkd@rE}UxB}JdJo_@nDcNfSan@nS}j@lCeIvDsMbC{J|CyNbAwFfCgPz@uGvBiSdD}`@rFon@nKaqAxDmc@xBuT|Fqc@nC_PrEcUtC_MpFcT`GqQxJmXfXwq@jQgh@hBeGhG_U|BaK|G}[nRikAzIam@tDsYfE}^v@_MbAwKn@oIr@yLrBub@jAoa@b@sRdDmjBx@aZdA}XnAqVpAgTlAqPn@oGvFye@dCeRzGwb@xT_}A`BcPrAoOvCad@jAmXv@eV`BieA~@a[fBg_@`CiZ~A_OhHqk@hHcn@tEwe@rDub@nBoW~@sN|BeZnAgMvDm\\hFs^hSigArFaY`Gc\\`C}OhD}YfByQdAaNbAkOtOu~Cn@wKz@uLfCeY|CkW~B}OhCmO|AcI~A_IvDoPpEyPdImWrDuKnL_YjI{Ptl@qfAle@u|@xI}PbImQvFwMbGgOxFkOpdAosCdD_KxGsU|E}RxFcXhCwNjDwTvBiPfBqOrAyMfBcTxAaVhAwVrCy_Al@iPt@_OtA}Q`AuJ`AgIzAkK`EoUtBsJhCaKxCaKdDaKhQeg@jGiRfGaSrFyR`HsWvL}f@xp@grC`Sq|@pEsVdAoGjF{XlkAgwHxHgj@|Jex@fg@qlEjQs{AdHwh@zDkVhEkVzI_e@v}AgzHpK_l@tE}YtEy[rC}TpFme@jg@cpEbF{d@~BoXfBqUbAyOx@yN|Ao]bAo[tIazC`@iLb@aJ~AkWbBgRdBgPjA{IdCePlAmHfBmJdCiL~CuM|DoNxhDezKdDkLvBoInFqVbCuMxBqNnAeJ~CwXdBoSb^crElFsl@`Dy[zDu^xBiRzc@aaE|Fsd@vCkShDmTpG}^lD}QzDoR|zAcdHvIob@dKoj@jDmSlKiq@xVacBhEqXnBqL|Ga^zJke@`y@ktD~Mop@tP}_AdOg`AtCiQxCyOlDkPfDoN`GiTfGkRjEwLvEsL|HkQtEkJdE{HrwAkaCrT{a@rpDiuHtE_KvLuV|{AwaDzAqCb@mAf{Ac`D~FqL~y@_fBlNmZbGaNtF}Mpn@s~AlYss@dFgK|DoGhBoCrDuE~AcBtGaGnByAnDwBnCwAfDwAnFaBjGkA~[{E`iEkn@pQaDvIwBnIiCl\\qLn}J{pDhMcGrFcDhGeEvoDehC|AsArCwChBaC`C_EzC_HbBcFd@uB`@qAn@gDdB}Kz@}Hn@iPjByx@jDcvAj@}RDsEn@yTv@a]VcPtEamFBcHT_LNkEdAiShDsi@`GudAbFgx@`@iKdP}yFhBgs@p@yRjCo_AJwCXeEb@uEz@_H|@yEnBqHrCiIpAmE`o@qhBxC_IjIuVdIcXh{AgmG`i@_{BfCuLrhAssGfFeXxbBklInCsN|_AoiGpGs_@pl@w}Czy@_kEvG{]h}@ieFbQehAdHye@lPagA|Eu\\tAmI|CwWjn@mwGj@eH|]azFl@kPjAqd@jJe|DlD}vAxAeh@@eBvVk}JzIkqDfE_aBfA{YbBk[zp@e}LhAaObCeUlAuIzAeJrb@q`CjCcOnAaIpBwOtBkTjDsg@~AiPvBwOlAcH|AkIlCkLlYudApDoN`BgHhBaJvAeIvAqJbAuHrBqQbAsLx@oL`MwrCXkFr@uJh@{FhBsOvXwoB|EqVdBmHxC}KtCcJtDgKjDoIxE}JdHcMdCuDdIoKlmB}|BjJuMfFgIlE{HlEyIdEeJ~FaOvCgInCuI`EmN`J}]rEsP`EuMzCoIxGwPpi@cnAhGgPzCiJvFmRrEwQbDyOtCoPbDwTxDq\\rAsK`BgLhB{KxBoLfCgLjDqKdBqEfEkJtSy^`EcJnDuJjAwDrCeK\\}AjCaNr@qEjAaJtNaqAdCqQ`BsItS}bAbQs{@|Kor@xBmKz}@}uDze@{zAjk@}fBjTsq@r@uCd@aDFyCIwCWcCY}Aq_@w|A{AwF_DyHgHwOgu@m_BSb@nFhL"'                      //   levelsnumLevels:4'                      //   zoomFactor:16                      //}]                      //}                        #region -- title --                      int tooltipEnd = 0;                      {                          int x = route.IndexOf("tooltipHtml:") + 13;                          if (x >= 13)                          {                              tooltipEnd = route.IndexOf("\""' x + 1);                              if (tooltipEnd > 0)                              {                                  int l = tooltipEnd - x;                                  if (l > 0)                                  {                                      tooltipHtml = route.Substring(x' l).Replace(@"\x26#160;"' " ");                                  }                              }                          }                      }                      #endregion                        #region -- points --                      int pointsEnd = 0;                      {                          int x = route.IndexOf("points:"' tooltipEnd >= 0 ? tooltipEnd : 0) + 8;                          if (x >= 8)                          {                              pointsEnd = route.IndexOf("\""' x + 1);                              if (pointsEnd > 0)                              {                                  int l = pointsEnd - x;                                  if (l > 0)                                  {                                      /*                                      while(l % 5 != 0)                                      {                                         l--;                                      }                                      */                                        points = new List<PointLatLng>();                                      DecodePointsInto(points' route.Substring(x' l));                                  }                              }                          }                      }                      #endregion                        #region -- levels --                      string levels = string.Empty;                      int levelsEnd = 0;                      {                          int x = route.IndexOf("levels:"' pointsEnd >= 0 ? pointsEnd : 0) + 8;                          if (x >= 8)                          {                              levelsEnd = route.IndexOf("\""' x + 1);                              if (levelsEnd > 0)                              {                                  int l = levelsEnd - x;                                  if (l > 0)                                  {                                      levels = route.Substring(x' l);                                  }                              }                          }                      }                      #endregion                        #region -- numLevel --                      int numLevelsEnd = 0;                      {                          int x = route.IndexOf("numLevels:"' levelsEnd >= 0 ? levelsEnd : 0) + 10;                          if (x >= 10)                          {                              numLevelsEnd = route.IndexOf("'"' x);                              if (numLevelsEnd > 0)                              {                                  int l = numLevelsEnd - x;                                  if (l > 0)                                  {                                      numLevel = int.Parse(route.Substring(x' l));                                  }                              }                          }                      }                      #endregion                        #region -- zoomFactor --                      {                          int x = route.IndexOf("zoomFactor:"' numLevelsEnd >= 0 ? numLevelsEnd : 0) + 11;                          if (x >= 11)                          {                              int end = route.IndexOf("}"' x);                              if (end > 0)                              {                                  int l = end - x;                                  if (l > 0)                                  {                                      zoomFactor = int.Parse(route.Substring(x' l));                                  }                              }                          }                      }                      #endregion                        #region -- trim point overload --                      if (points != null && numLevel > 0 && !string.IsNullOrEmpty(levels))                      {                          if (points.Count - levels.Length > 0)                          {                              points.RemoveRange(levels.Length' points.Count - levels.Length);                          }                            //http://facstaff.unca.edu/mcmcclur/GoogleMaps/EncodePolyline/description.html                          //                          string allZlevels = "TSRPONMLKJIHGFEDCBA@?";                          if (numLevel > allZlevels.Length)                          {                              numLevel = allZlevels.Length;                          }                            // used letters in levels string                          string pLevels = allZlevels.Substring(allZlevels.Length - numLevel);                            // remove useless points at zoom                          {                              List<PointLatLng> removedPoints = new List<PointLatLng>();                                for (int i = 0; i < levels.Length; i++)                              {                                  int zi = pLevels.IndexOf(levels [i]);                                  if (zi > 0)                                  {                                      if (zi * numLevel > zoom)                                      {                                          removedPoints.Add(points [i]);                                      }                                  }                              }                                foreach (var v in removedPoints)                              {                                  points.Remove(v);                              }                              removedPoints.Clear();                              removedPoints = null;                          }                      }                      #endregion                  }              }              catch (Exception ex)              {                  points = null;                  Debug.WriteLine("GetRoutePoints: " + ex);              }
Magic Number,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetRoutePoints,The following statement contains a magic number: try              {                  string route = GMaps.Instance.UseRouteCache ? Cache.Instance.GetContent(url' CacheType.RouteCache) : string.Empty;                    if (string.IsNullOrEmpty(route))                  {                      route = GetContentUsingHttp(url);                        if (!string.IsNullOrEmpty(route))                      {                          if (GMaps.Instance.UseRouteCache)                          {                              Cache.Instance.SaveContent(url' CacheType.RouteCache' route);                          }                      }                  }                    // parse values                  if (!string.IsNullOrEmpty(route))                  {                      //{                      //tooltipHtml:" (300\x26#160;km / 2 valandos 59 min.)"'                      //polylines:                      //[{                      //   id:"route0"'                      //   points:"cy~rIcvp`ClJ~v@jHpu@N|BB~A?tA_@`J@nAJrB|AhEf@h@~@^pANh@Mr@a@`@_@x@cBPk@ZiBHeDQ{C]wAc@mAqCeEoA_C{@_Cy@iDoEaW}AsJcJ}t@iWowB{C_Vyw@gvGyTyjBu@gHwDoZ{W_zBsX}~BiA_MmAyOcAwOs@yNy@eTk@mVUmTE}PJ_W`@cVd@cQ`@}KjA_V`AeOn@oItAkOdAaKfBaOhDiVbD}RpBuKtEkTtP}q@fr@ypCfCmK|CmNvEqVvCuQ`BgLnAmJ`CgTpA_N~@sLlBwYh@yLp@cSj@e]zFkzKHaVViSf@wZjFwqBt@{Wr@qS`AaUjAgStBkYrEwe@xIuw@`Gmj@rFok@~BkYtCy_@|KccBvBgZjC}[tD__@pDaYjB_MpBuLhGi[fC}KfFcSnEkObFgOrFkOzEoLt[ys@tJeUlIsSbKqXtFiPfKi]rG_W|CiNhDkPfDuQlDoShEuXrEy[nOgiAxF{`@|DoVzFk[fDwPlXupA~CoPfDuQxGcd@l@yEdH{r@xDam@`AiWz@mYtAq~@p@uqAfAqx@|@kZxA}^lBq\\|Be\\lAaO~Dm`@|Gsj@tS_~AhCyUrCeZrByWv@uLlUiyDpA}NdHkn@pGmb@LkAtAoIjDqR`I{`@`BcH|I_b@zJcd@lKig@\\_CbBaIlJ}g@lIoj@pAuJtFoh@~Eqs@hDmv@h@qOfF{jBn@gSxCio@dAuQn@gIVoBjAiOlCqWbCiT`PekAzKiu@~EgYfIya@fA{ExGwWnDkMdHiU|G}R`HgQhRsa@hW}g@jVsg@|a@cbAbJkUxKoYxLa_@`IiZzHu[`DoOXsBhBuJbCwNdBaL`EkYvAwM`CeVtEwj@nDqj@BkAnB{YpGgeAn@eJ`CmYvEid@tBkQpGkd@rE}UxB}JdJo_@nDcNfSan@nS}j@lCeIvDsMbC{J|CyNbAwFfCgPz@uGvBiSdD}`@rFon@nKaqAxDmc@xBuT|Fqc@nC_PrEcUtC_MpFcT`GqQxJmXfXwq@jQgh@hBeGhG_U|BaK|G}[nRikAzIam@tDsYfE}^v@_MbAwKn@oIr@yLrBub@jAoa@b@sRdDmjBx@aZdA}XnAqVpAgTlAqPn@oGvFye@dCeRzGwb@xT_}A`BcPrAoOvCad@jAmXv@eV`BieA~@a[fBg_@`CiZ~A_OhHqk@hHcn@tEwe@rDub@nBoW~@sN|BeZnAgMvDm\\hFs^hSigArFaY`Gc\\`C}OhD}YfByQdAaNbAkOtOu~Cn@wKz@uLfCeY|CkW~B}OhCmO|AcI~A_IvDoPpEyPdImWrDuKnL_YjI{Ptl@qfAle@u|@xI}PbImQvFwMbGgOxFkOpdAosCdD_KxGsU|E}RxFcXhCwNjDwTvBiPfBqOrAyMfBcTxAaVhAwVrCy_Al@iPt@_OtA}Q`AuJ`AgIzAkK`EoUtBsJhCaKxCaKdDaKhQeg@jGiRfGaSrFyR`HsWvL}f@xp@grC`Sq|@pEsVdAoGjF{XlkAgwHxHgj@|Jex@fg@qlEjQs{AdHwh@zDkVhEkVzI_e@v}AgzHpK_l@tE}YtEy[rC}TpFme@jg@cpEbF{d@~BoXfBqUbAyOx@yN|Ao]bAo[tIazC`@iLb@aJ~AkWbBgRdBgPjA{IdCePlAmHfBmJdCiL~CuM|DoNxhDezKdDkLvBoInFqVbCuMxBqNnAeJ~CwXdBoSb^crElFsl@`Dy[zDu^xBiRzc@aaE|Fsd@vCkShDmTpG}^lD}QzDoR|zAcdHvIob@dKoj@jDmSlKiq@xVacBhEqXnBqL|Ga^zJke@`y@ktD~Mop@tP}_AdOg`AtCiQxCyOlDkPfDoN`GiTfGkRjEwLvEsL|HkQtEkJdE{HrwAkaCrT{a@rpDiuHtE_KvLuV|{AwaDzAqCb@mAf{Ac`D~FqL~y@_fBlNmZbGaNtF}Mpn@s~AlYss@dFgK|DoGhBoCrDuE~AcBtGaGnByAnDwBnCwAfDwAnFaBjGkA~[{E`iEkn@pQaDvIwBnIiCl\\qLn}J{pDhMcGrFcDhGeEvoDehC|AsArCwChBaC`C_EzC_HbBcFd@uB`@qAn@gDdB}Kz@}Hn@iPjByx@jDcvAj@}RDsEn@yTv@a]VcPtEamFBcHT_LNkEdAiShDsi@`GudAbFgx@`@iKdP}yFhBgs@p@yRjCo_AJwCXeEb@uEz@_H|@yEnBqHrCiIpAmE`o@qhBxC_IjIuVdIcXh{AgmG`i@_{BfCuLrhAssGfFeXxbBklInCsN|_AoiGpGs_@pl@w}Czy@_kEvG{]h}@ieFbQehAdHye@lPagA|Eu\\tAmI|CwWjn@mwGj@eH|]azFl@kPjAqd@jJe|DlD}vAxAeh@@eBvVk}JzIkqDfE_aBfA{YbBk[zp@e}LhAaObCeUlAuIzAeJrb@q`CjCcOnAaIpBwOtBkTjDsg@~AiPvBwOlAcH|AkIlCkLlYudApDoN`BgHhBaJvAeIvAqJbAuHrBqQbAsLx@oL`MwrCXkFr@uJh@{FhBsOvXwoB|EqVdBmHxC}KtCcJtDgKjDoIxE}JdHcMdCuDdIoKlmB}|BjJuMfFgIlE{HlEyIdEeJ~FaOvCgInCuI`EmN`J}]rEsP`EuMzCoIxGwPpi@cnAhGgPzCiJvFmRrEwQbDyOtCoPbDwTxDq\\rAsK`BgLhB{KxBoLfCgLjDqKdBqEfEkJtSy^`EcJnDuJjAwDrCeK\\}AjCaNr@qEjAaJtNaqAdCqQ`BsItS}bAbQs{@|Kor@xBmKz}@}uDze@{zAjk@}fBjTsq@r@uCd@aDFyCIwCWcCY}Aq_@w|A{AwF_DyHgHwOgu@m_BSb@nFhL"'                      //   levelsnumLevels:4'                      //   zoomFactor:16                      //}]                      //}                        #region -- title --                      int tooltipEnd = 0;                      {                          int x = route.IndexOf("tooltipHtml:") + 13;                          if (x >= 13)                          {                              tooltipEnd = route.IndexOf("\""' x + 1);                              if (tooltipEnd > 0)                              {                                  int l = tooltipEnd - x;                                  if (l > 0)                                  {                                      tooltipHtml = route.Substring(x' l).Replace(@"\x26#160;"' " ");                                  }                              }                          }                      }                      #endregion                        #region -- points --                      int pointsEnd = 0;                      {                          int x = route.IndexOf("points:"' tooltipEnd >= 0 ? tooltipEnd : 0) + 8;                          if (x >= 8)                          {                              pointsEnd = route.IndexOf("\""' x + 1);                              if (pointsEnd > 0)                              {                                  int l = pointsEnd - x;                                  if (l > 0)                                  {                                      /*                                      while(l % 5 != 0)                                      {                                         l--;                                      }                                      */                                        points = new List<PointLatLng>();                                      DecodePointsInto(points' route.Substring(x' l));                                  }                              }                          }                      }                      #endregion                        #region -- levels --                      string levels = string.Empty;                      int levelsEnd = 0;                      {                          int x = route.IndexOf("levels:"' pointsEnd >= 0 ? pointsEnd : 0) + 8;                          if (x >= 8)                          {                              levelsEnd = route.IndexOf("\""' x + 1);                              if (levelsEnd > 0)                              {                                  int l = levelsEnd - x;                                  if (l > 0)                                  {                                      levels = route.Substring(x' l);                                  }                              }                          }                      }                      #endregion                        #region -- numLevel --                      int numLevelsEnd = 0;                      {                          int x = route.IndexOf("numLevels:"' levelsEnd >= 0 ? levelsEnd : 0) + 10;                          if (x >= 10)                          {                              numLevelsEnd = route.IndexOf("'"' x);                              if (numLevelsEnd > 0)                              {                                  int l = numLevelsEnd - x;                                  if (l > 0)                                  {                                      numLevel = int.Parse(route.Substring(x' l));                                  }                              }                          }                      }                      #endregion                        #region -- zoomFactor --                      {                          int x = route.IndexOf("zoomFactor:"' numLevelsEnd >= 0 ? numLevelsEnd : 0) + 11;                          if (x >= 11)                          {                              int end = route.IndexOf("}"' x);                              if (end > 0)                              {                                  int l = end - x;                                  if (l > 0)                                  {                                      zoomFactor = int.Parse(route.Substring(x' l));                                  }                              }                          }                      }                      #endregion                        #region -- trim point overload --                      if (points != null && numLevel > 0 && !string.IsNullOrEmpty(levels))                      {                          if (points.Count - levels.Length > 0)                          {                              points.RemoveRange(levels.Length' points.Count - levels.Length);                          }                            //http://facstaff.unca.edu/mcmcclur/GoogleMaps/EncodePolyline/description.html                          //                          string allZlevels = "TSRPONMLKJIHGFEDCBA@?";                          if (numLevel > allZlevels.Length)                          {                              numLevel = allZlevels.Length;                          }                            // used letters in levels string                          string pLevels = allZlevels.Substring(allZlevels.Length - numLevel);                            // remove useless points at zoom                          {                              List<PointLatLng> removedPoints = new List<PointLatLng>();                                for (int i = 0; i < levels.Length; i++)                              {                                  int zi = pLevels.IndexOf(levels [i]);                                  if (zi > 0)                                  {                                      if (zi * numLevel > zoom)                                      {                                          removedPoints.Add(points [i]);                                      }                                  }                              }                                foreach (var v in removedPoints)                              {                                  points.Remove(v);                              }                              removedPoints.Clear();                              removedPoints = null;                          }                      }                      #endregion                  }              }              catch (Exception ex)              {                  points = null;                  Debug.WriteLine("GetRoutePoints: " + ex);              }
Magic Number,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetRoutePoints,The following statement contains a magic number: try              {                  string route = GMaps.Instance.UseRouteCache ? Cache.Instance.GetContent(url' CacheType.RouteCache) : string.Empty;                    if (string.IsNullOrEmpty(route))                  {                      route = GetContentUsingHttp(url);                        if (!string.IsNullOrEmpty(route))                      {                          if (GMaps.Instance.UseRouteCache)                          {                              Cache.Instance.SaveContent(url' CacheType.RouteCache' route);                          }                      }                  }                    // parse values                  if (!string.IsNullOrEmpty(route))                  {                      //{                      //tooltipHtml:" (300\x26#160;km / 2 valandos 59 min.)"'                      //polylines:                      //[{                      //   id:"route0"'                      //   points:"cy~rIcvp`ClJ~v@jHpu@N|BB~A?tA_@`J@nAJrB|AhEf@h@~@^pANh@Mr@a@`@_@x@cBPk@ZiBHeDQ{C]wAc@mAqCeEoA_C{@_Cy@iDoEaW}AsJcJ}t@iWowB{C_Vyw@gvGyTyjBu@gHwDoZ{W_zBsX}~BiA_MmAyOcAwOs@yNy@eTk@mVUmTE}PJ_W`@cVd@cQ`@}KjA_V`AeOn@oItAkOdAaKfBaOhDiVbD}RpBuKtEkTtP}q@fr@ypCfCmK|CmNvEqVvCuQ`BgLnAmJ`CgTpA_N~@sLlBwYh@yLp@cSj@e]zFkzKHaVViSf@wZjFwqBt@{Wr@qS`AaUjAgStBkYrEwe@xIuw@`Gmj@rFok@~BkYtCy_@|KccBvBgZjC}[tD__@pDaYjB_MpBuLhGi[fC}KfFcSnEkObFgOrFkOzEoLt[ys@tJeUlIsSbKqXtFiPfKi]rG_W|CiNhDkPfDuQlDoShEuXrEy[nOgiAxF{`@|DoVzFk[fDwPlXupA~CoPfDuQxGcd@l@yEdH{r@xDam@`AiWz@mYtAq~@p@uqAfAqx@|@kZxA}^lBq\\|Be\\lAaO~Dm`@|Gsj@tS_~AhCyUrCeZrByWv@uLlUiyDpA}NdHkn@pGmb@LkAtAoIjDqR`I{`@`BcH|I_b@zJcd@lKig@\\_CbBaIlJ}g@lIoj@pAuJtFoh@~Eqs@hDmv@h@qOfF{jBn@gSxCio@dAuQn@gIVoBjAiOlCqWbCiT`PekAzKiu@~EgYfIya@fA{ExGwWnDkMdHiU|G}R`HgQhRsa@hW}g@jVsg@|a@cbAbJkUxKoYxLa_@`IiZzHu[`DoOXsBhBuJbCwNdBaL`EkYvAwM`CeVtEwj@nDqj@BkAnB{YpGgeAn@eJ`CmYvEid@tBkQpGkd@rE}UxB}JdJo_@nDcNfSan@nS}j@lCeIvDsMbC{J|CyNbAwFfCgPz@uGvBiSdD}`@rFon@nKaqAxDmc@xBuT|Fqc@nC_PrEcUtC_MpFcT`GqQxJmXfXwq@jQgh@hBeGhG_U|BaK|G}[nRikAzIam@tDsYfE}^v@_MbAwKn@oIr@yLrBub@jAoa@b@sRdDmjBx@aZdA}XnAqVpAgTlAqPn@oGvFye@dCeRzGwb@xT_}A`BcPrAoOvCad@jAmXv@eV`BieA~@a[fBg_@`CiZ~A_OhHqk@hHcn@tEwe@rDub@nBoW~@sN|BeZnAgMvDm\\hFs^hSigArFaY`Gc\\`C}OhD}YfByQdAaNbAkOtOu~Cn@wKz@uLfCeY|CkW~B}OhCmO|AcI~A_IvDoPpEyPdImWrDuKnL_YjI{Ptl@qfAle@u|@xI}PbImQvFwMbGgOxFkOpdAosCdD_KxGsU|E}RxFcXhCwNjDwTvBiPfBqOrAyMfBcTxAaVhAwVrCy_Al@iPt@_OtA}Q`AuJ`AgIzAkK`EoUtBsJhCaKxCaKdDaKhQeg@jGiRfGaSrFyR`HsWvL}f@xp@grC`Sq|@pEsVdAoGjF{XlkAgwHxHgj@|Jex@fg@qlEjQs{AdHwh@zDkVhEkVzI_e@v}AgzHpK_l@tE}YtEy[rC}TpFme@jg@cpEbF{d@~BoXfBqUbAyOx@yN|Ao]bAo[tIazC`@iLb@aJ~AkWbBgRdBgPjA{IdCePlAmHfBmJdCiL~CuM|DoNxhDezKdDkLvBoInFqVbCuMxBqNnAeJ~CwXdBoSb^crElFsl@`Dy[zDu^xBiRzc@aaE|Fsd@vCkShDmTpG}^lD}QzDoR|zAcdHvIob@dKoj@jDmSlKiq@xVacBhEqXnBqL|Ga^zJke@`y@ktD~Mop@tP}_AdOg`AtCiQxCyOlDkPfDoN`GiTfGkRjEwLvEsL|HkQtEkJdE{HrwAkaCrT{a@rpDiuHtE_KvLuV|{AwaDzAqCb@mAf{Ac`D~FqL~y@_fBlNmZbGaNtF}Mpn@s~AlYss@dFgK|DoGhBoCrDuE~AcBtGaGnByAnDwBnCwAfDwAnFaBjGkA~[{E`iEkn@pQaDvIwBnIiCl\\qLn}J{pDhMcGrFcDhGeEvoDehC|AsArCwChBaC`C_EzC_HbBcFd@uB`@qAn@gDdB}Kz@}Hn@iPjByx@jDcvAj@}RDsEn@yTv@a]VcPtEamFBcHT_LNkEdAiShDsi@`GudAbFgx@`@iKdP}yFhBgs@p@yRjCo_AJwCXeEb@uEz@_H|@yEnBqHrCiIpAmE`o@qhBxC_IjIuVdIcXh{AgmG`i@_{BfCuLrhAssGfFeXxbBklInCsN|_AoiGpGs_@pl@w}Czy@_kEvG{]h}@ieFbQehAdHye@lPagA|Eu\\tAmI|CwWjn@mwGj@eH|]azFl@kPjAqd@jJe|DlD}vAxAeh@@eBvVk}JzIkqDfE_aBfA{YbBk[zp@e}LhAaObCeUlAuIzAeJrb@q`CjCcOnAaIpBwOtBkTjDsg@~AiPvBwOlAcH|AkIlCkLlYudApDoN`BgHhBaJvAeIvAqJbAuHrBqQbAsLx@oL`MwrCXkFr@uJh@{FhBsOvXwoB|EqVdBmHxC}KtCcJtDgKjDoIxE}JdHcMdCuDdIoKlmB}|BjJuMfFgIlE{HlEyIdEeJ~FaOvCgInCuI`EmN`J}]rEsP`EuMzCoIxGwPpi@cnAhGgPzCiJvFmRrEwQbDyOtCoPbDwTxDq\\rAsK`BgLhB{KxBoLfCgLjDqKdBqEfEkJtSy^`EcJnDuJjAwDrCeK\\}AjCaNr@qEjAaJtNaqAdCqQ`BsItS}bAbQs{@|Kor@xBmKz}@}uDze@{zAjk@}fBjTsq@r@uCd@aDFyCIwCWcCY}Aq_@w|A{AwF_DyHgHwOgu@m_BSb@nFhL"'                      //   levelsnumLevels:4'                      //   zoomFactor:16                      //}]                      //}                        #region -- title --                      int tooltipEnd = 0;                      {                          int x = route.IndexOf("tooltipHtml:") + 13;                          if (x >= 13)                          {                              tooltipEnd = route.IndexOf("\""' x + 1);                              if (tooltipEnd > 0)                              {                                  int l = tooltipEnd - x;                                  if (l > 0)                                  {                                      tooltipHtml = route.Substring(x' l).Replace(@"\x26#160;"' " ");                                  }                              }                          }                      }                      #endregion                        #region -- points --                      int pointsEnd = 0;                      {                          int x = route.IndexOf("points:"' tooltipEnd >= 0 ? tooltipEnd : 0) + 8;                          if (x >= 8)                          {                              pointsEnd = route.IndexOf("\""' x + 1);                              if (pointsEnd > 0)                              {                                  int l = pointsEnd - x;                                  if (l > 0)                                  {                                      /*                                      while(l % 5 != 0)                                      {                                         l--;                                      }                                      */                                        points = new List<PointLatLng>();                                      DecodePointsInto(points' route.Substring(x' l));                                  }                              }                          }                      }                      #endregion                        #region -- levels --                      string levels = string.Empty;                      int levelsEnd = 0;                      {                          int x = route.IndexOf("levels:"' pointsEnd >= 0 ? pointsEnd : 0) + 8;                          if (x >= 8)                          {                              levelsEnd = route.IndexOf("\""' x + 1);                              if (levelsEnd > 0)                              {                                  int l = levelsEnd - x;                                  if (l > 0)                                  {                                      levels = route.Substring(x' l);                                  }                              }                          }                      }                      #endregion                        #region -- numLevel --                      int numLevelsEnd = 0;                      {                          int x = route.IndexOf("numLevels:"' levelsEnd >= 0 ? levelsEnd : 0) + 10;                          if (x >= 10)                          {                              numLevelsEnd = route.IndexOf("'"' x);                              if (numLevelsEnd > 0)                              {                                  int l = numLevelsEnd - x;                                  if (l > 0)                                  {                                      numLevel = int.Parse(route.Substring(x' l));                                  }                              }                          }                      }                      #endregion                        #region -- zoomFactor --                      {                          int x = route.IndexOf("zoomFactor:"' numLevelsEnd >= 0 ? numLevelsEnd : 0) + 11;                          if (x >= 11)                          {                              int end = route.IndexOf("}"' x);                              if (end > 0)                              {                                  int l = end - x;                                  if (l > 0)                                  {                                      zoomFactor = int.Parse(route.Substring(x' l));                                  }                              }                          }                      }                      #endregion                        #region -- trim point overload --                      if (points != null && numLevel > 0 && !string.IsNullOrEmpty(levels))                      {                          if (points.Count - levels.Length > 0)                          {                              points.RemoveRange(levels.Length' points.Count - levels.Length);                          }                            //http://facstaff.unca.edu/mcmcclur/GoogleMaps/EncodePolyline/description.html                          //                          string allZlevels = "TSRPONMLKJIHGFEDCBA@?";                          if (numLevel > allZlevels.Length)                          {                              numLevel = allZlevels.Length;                          }                            // used letters in levels string                          string pLevels = allZlevels.Substring(allZlevels.Length - numLevel);                            // remove useless points at zoom                          {                              List<PointLatLng> removedPoints = new List<PointLatLng>();                                for (int i = 0; i < levels.Length; i++)                              {                                  int zi = pLevels.IndexOf(levels [i]);                                  if (zi > 0)                                  {                                      if (zi * numLevel > zoom)                                      {                                          removedPoints.Add(points [i]);                                      }                                  }                              }                                foreach (var v in removedPoints)                              {                                  points.Remove(v);                              }                              removedPoints.Clear();                              removedPoints = null;                          }                      }                      #endregion                  }              }              catch (Exception ex)              {                  points = null;                  Debug.WriteLine("GetRoutePoints: " + ex);              }
Magic Number,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetRoutePoints,The following statement contains a magic number: try              {                  string route = GMaps.Instance.UseRouteCache ? Cache.Instance.GetContent(url' CacheType.RouteCache) : string.Empty;                    if (string.IsNullOrEmpty(route))                  {                      route = GetContentUsingHttp(url);                        if (!string.IsNullOrEmpty(route))                      {                          if (GMaps.Instance.UseRouteCache)                          {                              Cache.Instance.SaveContent(url' CacheType.RouteCache' route);                          }                      }                  }                    // parse values                  if (!string.IsNullOrEmpty(route))                  {                      //{                      //tooltipHtml:" (300\x26#160;km / 2 valandos 59 min.)"'                      //polylines:                      //[{                      //   id:"route0"'                      //   points:"cy~rIcvp`ClJ~v@jHpu@N|BB~A?tA_@`J@nAJrB|AhEf@h@~@^pANh@Mr@a@`@_@x@cBPk@ZiBHeDQ{C]wAc@mAqCeEoA_C{@_Cy@iDoEaW}AsJcJ}t@iWowB{C_Vyw@gvGyTyjBu@gHwDoZ{W_zBsX}~BiA_MmAyOcAwOs@yNy@eTk@mVUmTE}PJ_W`@cVd@cQ`@}KjA_V`AeOn@oItAkOdAaKfBaOhDiVbD}RpBuKtEkTtP}q@fr@ypCfCmK|CmNvEqVvCuQ`BgLnAmJ`CgTpA_N~@sLlBwYh@yLp@cSj@e]zFkzKHaVViSf@wZjFwqBt@{Wr@qS`AaUjAgStBkYrEwe@xIuw@`Gmj@rFok@~BkYtCy_@|KccBvBgZjC}[tD__@pDaYjB_MpBuLhGi[fC}KfFcSnEkObFgOrFkOzEoLt[ys@tJeUlIsSbKqXtFiPfKi]rG_W|CiNhDkPfDuQlDoShEuXrEy[nOgiAxF{`@|DoVzFk[fDwPlXupA~CoPfDuQxGcd@l@yEdH{r@xDam@`AiWz@mYtAq~@p@uqAfAqx@|@kZxA}^lBq\\|Be\\lAaO~Dm`@|Gsj@tS_~AhCyUrCeZrByWv@uLlUiyDpA}NdHkn@pGmb@LkAtAoIjDqR`I{`@`BcH|I_b@zJcd@lKig@\\_CbBaIlJ}g@lIoj@pAuJtFoh@~Eqs@hDmv@h@qOfF{jBn@gSxCio@dAuQn@gIVoBjAiOlCqWbCiT`PekAzKiu@~EgYfIya@fA{ExGwWnDkMdHiU|G}R`HgQhRsa@hW}g@jVsg@|a@cbAbJkUxKoYxLa_@`IiZzHu[`DoOXsBhBuJbCwNdBaL`EkYvAwM`CeVtEwj@nDqj@BkAnB{YpGgeAn@eJ`CmYvEid@tBkQpGkd@rE}UxB}JdJo_@nDcNfSan@nS}j@lCeIvDsMbC{J|CyNbAwFfCgPz@uGvBiSdD}`@rFon@nKaqAxDmc@xBuT|Fqc@nC_PrEcUtC_MpFcT`GqQxJmXfXwq@jQgh@hBeGhG_U|BaK|G}[nRikAzIam@tDsYfE}^v@_MbAwKn@oIr@yLrBub@jAoa@b@sRdDmjBx@aZdA}XnAqVpAgTlAqPn@oGvFye@dCeRzGwb@xT_}A`BcPrAoOvCad@jAmXv@eV`BieA~@a[fBg_@`CiZ~A_OhHqk@hHcn@tEwe@rDub@nBoW~@sN|BeZnAgMvDm\\hFs^hSigArFaY`Gc\\`C}OhD}YfByQdAaNbAkOtOu~Cn@wKz@uLfCeY|CkW~B}OhCmO|AcI~A_IvDoPpEyPdImWrDuKnL_YjI{Ptl@qfAle@u|@xI}PbImQvFwMbGgOxFkOpdAosCdD_KxGsU|E}RxFcXhCwNjDwTvBiPfBqOrAyMfBcTxAaVhAwVrCy_Al@iPt@_OtA}Q`AuJ`AgIzAkK`EoUtBsJhCaKxCaKdDaKhQeg@jGiRfGaSrFyR`HsWvL}f@xp@grC`Sq|@pEsVdAoGjF{XlkAgwHxHgj@|Jex@fg@qlEjQs{AdHwh@zDkVhEkVzI_e@v}AgzHpK_l@tE}YtEy[rC}TpFme@jg@cpEbF{d@~BoXfBqUbAyOx@yN|Ao]bAo[tIazC`@iLb@aJ~AkWbBgRdBgPjA{IdCePlAmHfBmJdCiL~CuM|DoNxhDezKdDkLvBoInFqVbCuMxBqNnAeJ~CwXdBoSb^crElFsl@`Dy[zDu^xBiRzc@aaE|Fsd@vCkShDmTpG}^lD}QzDoR|zAcdHvIob@dKoj@jDmSlKiq@xVacBhEqXnBqL|Ga^zJke@`y@ktD~Mop@tP}_AdOg`AtCiQxCyOlDkPfDoN`GiTfGkRjEwLvEsL|HkQtEkJdE{HrwAkaCrT{a@rpDiuHtE_KvLuV|{AwaDzAqCb@mAf{Ac`D~FqL~y@_fBlNmZbGaNtF}Mpn@s~AlYss@dFgK|DoGhBoCrDuE~AcBtGaGnByAnDwBnCwAfDwAnFaBjGkA~[{E`iEkn@pQaDvIwBnIiCl\\qLn}J{pDhMcGrFcDhGeEvoDehC|AsArCwChBaC`C_EzC_HbBcFd@uB`@qAn@gDdB}Kz@}Hn@iPjByx@jDcvAj@}RDsEn@yTv@a]VcPtEamFBcHT_LNkEdAiShDsi@`GudAbFgx@`@iKdP}yFhBgs@p@yRjCo_AJwCXeEb@uEz@_H|@yEnBqHrCiIpAmE`o@qhBxC_IjIuVdIcXh{AgmG`i@_{BfCuLrhAssGfFeXxbBklInCsN|_AoiGpGs_@pl@w}Czy@_kEvG{]h}@ieFbQehAdHye@lPagA|Eu\\tAmI|CwWjn@mwGj@eH|]azFl@kPjAqd@jJe|DlD}vAxAeh@@eBvVk}JzIkqDfE_aBfA{YbBk[zp@e}LhAaObCeUlAuIzAeJrb@q`CjCcOnAaIpBwOtBkTjDsg@~AiPvBwOlAcH|AkIlCkLlYudApDoN`BgHhBaJvAeIvAqJbAuHrBqQbAsLx@oL`MwrCXkFr@uJh@{FhBsOvXwoB|EqVdBmHxC}KtCcJtDgKjDoIxE}JdHcMdCuDdIoKlmB}|BjJuMfFgIlE{HlEyIdEeJ~FaOvCgInCuI`EmN`J}]rEsP`EuMzCoIxGwPpi@cnAhGgPzCiJvFmRrEwQbDyOtCoPbDwTxDq\\rAsK`BgLhB{KxBoLfCgLjDqKdBqEfEkJtSy^`EcJnDuJjAwDrCeK\\}AjCaNr@qEjAaJtNaqAdCqQ`BsItS}bAbQs{@|Kor@xBmKz}@}uDze@{zAjk@}fBjTsq@r@uCd@aDFyCIwCWcCY}Aq_@w|A{AwF_DyHgHwOgu@m_BSb@nFhL"'                      //   levelsnumLevels:4'                      //   zoomFactor:16                      //}]                      //}                        #region -- title --                      int tooltipEnd = 0;                      {                          int x = route.IndexOf("tooltipHtml:") + 13;                          if (x >= 13)                          {                              tooltipEnd = route.IndexOf("\""' x + 1);                              if (tooltipEnd > 0)                              {                                  int l = tooltipEnd - x;                                  if (l > 0)                                  {                                      tooltipHtml = route.Substring(x' l).Replace(@"\x26#160;"' " ");                                  }                              }                          }                      }                      #endregion                        #region -- points --                      int pointsEnd = 0;                      {                          int x = route.IndexOf("points:"' tooltipEnd >= 0 ? tooltipEnd : 0) + 8;                          if (x >= 8)                          {                              pointsEnd = route.IndexOf("\""' x + 1);                              if (pointsEnd > 0)                              {                                  int l = pointsEnd - x;                                  if (l > 0)                                  {                                      /*                                      while(l % 5 != 0)                                      {                                         l--;                                      }                                      */                                        points = new List<PointLatLng>();                                      DecodePointsInto(points' route.Substring(x' l));                                  }                              }                          }                      }                      #endregion                        #region -- levels --                      string levels = string.Empty;                      int levelsEnd = 0;                      {                          int x = route.IndexOf("levels:"' pointsEnd >= 0 ? pointsEnd : 0) + 8;                          if (x >= 8)                          {                              levelsEnd = route.IndexOf("\""' x + 1);                              if (levelsEnd > 0)                              {                                  int l = levelsEnd - x;                                  if (l > 0)                                  {                                      levels = route.Substring(x' l);                                  }                              }                          }                      }                      #endregion                        #region -- numLevel --                      int numLevelsEnd = 0;                      {                          int x = route.IndexOf("numLevels:"' levelsEnd >= 0 ? levelsEnd : 0) + 10;                          if (x >= 10)                          {                              numLevelsEnd = route.IndexOf("'"' x);                              if (numLevelsEnd > 0)                              {                                  int l = numLevelsEnd - x;                                  if (l > 0)                                  {                                      numLevel = int.Parse(route.Substring(x' l));                                  }                              }                          }                      }                      #endregion                        #region -- zoomFactor --                      {                          int x = route.IndexOf("zoomFactor:"' numLevelsEnd >= 0 ? numLevelsEnd : 0) + 11;                          if (x >= 11)                          {                              int end = route.IndexOf("}"' x);                              if (end > 0)                              {                                  int l = end - x;                                  if (l > 0)                                  {                                      zoomFactor = int.Parse(route.Substring(x' l));                                  }                              }                          }                      }                      #endregion                        #region -- trim point overload --                      if (points != null && numLevel > 0 && !string.IsNullOrEmpty(levels))                      {                          if (points.Count - levels.Length > 0)                          {                              points.RemoveRange(levels.Length' points.Count - levels.Length);                          }                            //http://facstaff.unca.edu/mcmcclur/GoogleMaps/EncodePolyline/description.html                          //                          string allZlevels = "TSRPONMLKJIHGFEDCBA@?";                          if (numLevel > allZlevels.Length)                          {                              numLevel = allZlevels.Length;                          }                            // used letters in levels string                          string pLevels = allZlevels.Substring(allZlevels.Length - numLevel);                            // remove useless points at zoom                          {                              List<PointLatLng> removedPoints = new List<PointLatLng>();                                for (int i = 0; i < levels.Length; i++)                              {                                  int zi = pLevels.IndexOf(levels [i]);                                  if (zi > 0)                                  {                                      if (zi * numLevel > zoom)                                      {                                          removedPoints.Add(points [i]);                                      }                                  }                              }                                foreach (var v in removedPoints)                              {                                  points.Remove(v);                              }                              removedPoints.Clear();                              removedPoints = null;                          }                      }                      #endregion                  }              }              catch (Exception ex)              {                  points = null;                  Debug.WriteLine("GetRoutePoints: " + ex);              }
Magic Number,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,DecodePointsInto,The following statement contains a magic number: while (index < len)              {                  int result = 1;                  int shift = 0;                  int b;                  do                  {                      b = encodedPath[index++] - 63 - 1;                      result += b << shift;                      shift += 5;                  } while (b >= 0x1f && index < len);                  lat += (result & 1) != 0 ? ~(result >> 1) : (result >> 1);                    result = 1;                  shift = 0;                    if (index < len)                  {                      do                      {                          b = encodedPath[index++] - 63 - 1;                          result += b << shift;                          shift += 5;                      } while (b >= 0x1f && index < len);                      lng += (result & 1) != 0 ? ~(result >> 1) : (result >> 1);                  }                    path.Add(new PointLatLng(lat * 1e-5' lng * 1e-5));              }
Magic Number,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,DecodePointsInto,The following statement contains a magic number: while (index < len)              {                  int result = 1;                  int shift = 0;                  int b;                  do                  {                      b = encodedPath[index++] - 63 - 1;                      result += b << shift;                      shift += 5;                  } while (b >= 0x1f && index < len);                  lat += (result & 1) != 0 ? ~(result >> 1) : (result >> 1);                    result = 1;                  shift = 0;                    if (index < len)                  {                      do                      {                          b = encodedPath[index++] - 63 - 1;                          result += b << shift;                          shift += 5;                      } while (b >= 0x1f && index < len);                      lng += (result & 1) != 0 ? ~(result >> 1) : (result >> 1);                  }                    path.Add(new PointLatLng(lat * 1e-5' lng * 1e-5));              }
Magic Number,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,DecodePointsInto,The following statement contains a magic number: while (index < len)              {                  int result = 1;                  int shift = 0;                  int b;                  do                  {                      b = encodedPath[index++] - 63 - 1;                      result += b << shift;                      shift += 5;                  } while (b >= 0x1f && index < len);                  lat += (result & 1) != 0 ? ~(result >> 1) : (result >> 1);                    result = 1;                  shift = 0;                    if (index < len)                  {                      do                      {                          b = encodedPath[index++] - 63 - 1;                          result += b << shift;                          shift += 5;                      } while (b >= 0x1f && index < len);                      lng += (result & 1) != 0 ? ~(result >> 1) : (result >> 1);                  }                    path.Add(new PointLatLng(lat * 1e-5' lng * 1e-5));              }
Magic Number,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,DecodePointsInto,The following statement contains a magic number: while (index < len)              {                  int result = 1;                  int shift = 0;                  int b;                  do                  {                      b = encodedPath[index++] - 63 - 1;                      result += b << shift;                      shift += 5;                  } while (b >= 0x1f && index < len);                  lat += (result & 1) != 0 ? ~(result >> 1) : (result >> 1);                    result = 1;                  shift = 0;                    if (index < len)                  {                      do                      {                          b = encodedPath[index++] - 63 - 1;                          result += b << shift;                          shift += 5;                      } while (b >= 0x1f && index < len);                      lng += (result & 1) != 0 ? ~(result >> 1) : (result >> 1);                  }                    path.Add(new PointLatLng(lat * 1e-5' lng * 1e-5));              }
Magic Number,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,DecodePointsInto,The following statement contains a magic number: while (index < len)              {                  int result = 1;                  int shift = 0;                  int b;                  do                  {                      b = encodedPath[index++] - 63 - 1;                      result += b << shift;                      shift += 5;                  } while (b >= 0x1f && index < len);                  lat += (result & 1) != 0 ? ~(result >> 1) : (result >> 1);                    result = 1;                  shift = 0;                    if (index < len)                  {                      do                      {                          b = encodedPath[index++] - 63 - 1;                          result += b << shift;                          shift += 5;                      } while (b >= 0x1f && index < len);                      lng += (result & 1) != 0 ? ~(result >> 1) : (result >> 1);                  }                    path.Add(new PointLatLng(lat * 1e-5' lng * 1e-5));              }
Magic Number,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,DecodePointsInto,The following statement contains a magic number: while (index < len)              {                  int result = 1;                  int shift = 0;                  int b;                  do                  {                      b = encodedPath[index++] - 63 - 1;                      result += b << shift;                      shift += 5;                  } while (b >= 0x1f && index < len);                  lat += (result & 1) != 0 ? ~(result >> 1) : (result >> 1);                    result = 1;                  shift = 0;                    if (index < len)                  {                      do                      {                          b = encodedPath[index++] - 63 - 1;                          result += b << shift;                          shift += 5;                      } while (b >= 0x1f && index < len);                      lng += (result & 1) != 0 ? ~(result >> 1) : (result >> 1);                  }                    path.Add(new PointLatLng(lat * 1e-5' lng * 1e-5));              }
Magic Number,GMap.NET.MapProviders,GoogleMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' UrlFormatServer' GetServerNum(pos' 4)' UrlFormatRequest' Version' language' pos.X' sec1' pos.Y' zoom' sec2' Server);
Magic Number,GMap.NET.MapProviders,YahooHybridMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Yahoo\YahooHybridMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' ((GetServerNum(pos' 2)) + 1)' Version' language' pos.X' (((1 << zoom) >> 1) - 1 - pos.Y)' (zoom + 1));
Magic Number,GMap.NET.MapProviders,YahooSatelliteMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Yahoo\YahooSatelliteMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' ((GetServerNum(pos' 2)) + 1)' Version' language' pos.X' (((1 << zoom) >> 1) - 1 - pos.Y)' (zoom + 1));
Magic Number,GMap.NET.MapProviders,YahooMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Yahoo\YahooMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: return string.Format(UrlFormat' ((GetServerNum(pos' 2)) + 1)' Version' zoom' pos.X' pos.Y' language' rnd1' rnd2);
Magic Number,GMap.NET.MapProviders,OpenCycleMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\OpenStreetMap\OpenCycleMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: char letter = ServerLetters[GMapProvider.GetServerNum(pos' 3)];
Magic Number,GMap.NET.MapProviders,OpenStreetMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\OpenStreetMap\OpenStreetMapProvider.cs,GetRoutePoints,The following statement contains a magic number: try           {              string route = GMaps.Instance.UseRouteCache ? Cache.Instance.GetContent(url' CacheType.RouteCache) : string.Empty;              if(string.IsNullOrEmpty(route))              {                 route = GetContentUsingHttp(url);                 if(!string.IsNullOrEmpty(route))                 {                    if(GMaps.Instance.UseRouteCache)                    {                       Cache.Instance.SaveContent(url' CacheType.RouteCache' route);                    }                 }              }                if(!string.IsNullOrEmpty(route))              {                 XmlDocument xmldoc = new XmlDocument();                 xmldoc.LoadXml(route);                 System.Xml.XmlNamespaceManager xmlnsManager = new System.Xml.XmlNamespaceManager(xmldoc.NameTable);                 xmlnsManager.AddNamespace("sm"' "http://earth.google.com/kml/2.0");                   ///Folder/Placemark/LineString/coordinates                 var coordNode = xmldoc.SelectSingleNode("/sm:kml/sm:Document/sm:Folder/sm:Placemark/sm:LineString/sm:coordinates"' xmlnsManager);                   string[] coordinates = coordNode.InnerText.Split('\n');                   if(coordinates.Length > 0)                 {                    points = new List<PointLatLng>();                      foreach(string coordinate in coordinates)                    {                       if(coordinate != string.Empty)                       {                          string[] XY = coordinate.Split(''');                          if(XY.Length == 2)                          {                             double lat = double.Parse(XY[1]' CultureInfo.InvariantCulture);                             double lng = double.Parse(XY[0]' CultureInfo.InvariantCulture);                             points.Add(new PointLatLng(lat' lng));                          }                       }                    }                 }              }           }           catch(Exception ex)           {              Debug.WriteLine("GetRoutePoints: " + ex);           }
Magic Number,GMap.NET.MapProviders,OpenStreetMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\OpenStreetMap\OpenStreetMapProvider.cs,MakeTileImageUrl,The following statement contains a magic number: char letter = ServerLetters[GetServerNum(pos' 3)];
Magic Number,GMap.NET.MapProviders,GMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\GMapProvider.cs,GetTileImageUsingHttp,The following statement contains a magic number: if (request is HttpWebRequest)              {                  var r = request as HttpWebRequest;                  r.UserAgent = UserAgent;                  r.ReadWriteTimeout = TimeoutMs * 6;                  r.Accept = requestAccept;                  r.Referer = RefererUrl;                  r.Timeout = TimeoutMs;              }  #if !PocketPC              else if (request is SocksHttpWebRequest)              {                  var r = request as SocksHttpWebRequest;                    if (!string.IsNullOrEmpty(UserAgent))                  {                      r.Headers.Add("User-Agent"' UserAgent);                  }                    if (!string.IsNullOrEmpty(requestAccept))                  {                      r.Headers.Add("Accept"' requestAccept);                  }                    if (!string.IsNullOrEmpty(RefererUrl))                  {                      r.Headers.Add("Referer"' RefererUrl);                  }                            }
Magic Number,GMap.NET.MapProviders,GMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\GMapProvider.cs,GetContentUsingHttp,The following statement contains a magic number: if (request is HttpWebRequest)              {                  var r = request as HttpWebRequest;                  r.UserAgent = UserAgent;                  r.ReadWriteTimeout = TimeoutMs * 6;                  r.Accept = requestAccept;                  r.Referer = RefererUrl;                  r.Timeout = TimeoutMs;              }  #if !PocketPC              else if (request is SocksHttpWebRequest)              {                  var r = request as SocksHttpWebRequest;                    if (!string.IsNullOrEmpty(UserAgent))                  {                      r.Headers.Add("User-Agent"' UserAgent);                  }                    if (!string.IsNullOrEmpty(requestAccept))                  {                      r.Headers.Add("Accept"' requestAccept);                  }                    if (!string.IsNullOrEmpty(RefererUrl))                  {                      r.Headers.Add("Referer"' RefererUrl);                  }              }
Magic Number,GMap.NET.MapProviders,GMapProvider,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\GMapProvider.cs,GetServerNum,The following statement contains a magic number: return (int)(pos.X + 2 * pos.Y) % max;
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM10,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor2' 2)) / Math.Pow(semiMinor2' 2);
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM10,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor2' 2)) / Math.Pow(semiMinor2' 2);
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM10,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor2' 2)) / Math.Pow(semiMinor2' 2);
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM10,The following statement contains a magic number: double h = lonlat.Length < 3 ? 0 : lonlat[2].Equals(Double.NaN) ? 0 : lonlat[2];
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM10,The following statement contains a magic number: double h = lonlat.Length < 3 ? 0 : lonlat[2].Equals(Double.NaN) ? 0 : lonlat[2];
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM10,The following statement contains a magic number: double h = lonlat.Length < 3 ? 0 : lonlat[2].Equals(Double.NaN) ? 0 : lonlat[2];
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM10,The following statement contains a magic number: double v = semiMajor / Math.Sqrt(1 - es * Math.Pow(Math.Sin(lat)' 2));
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD10,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor' 2)) / Math.Pow(semiMinor' 2);
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD10,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor' 2)) / Math.Pow(semiMinor' 2);
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD10,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor' 2)) / Math.Pow(semiMinor' 2);
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD10,The following statement contains a magic number: double Z = pnt.Length < 3 ? 0 : pnt[2].Equals(Double.NaN) ? 0 : pnt[2];
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD10,The following statement contains a magic number: double Z = pnt.Length < 3 ? 0 : pnt[2].Equals(Double.NaN) ? 0 : pnt[2];
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD10,The following statement contains a magic number: double Z = pnt.Length < 3 ? 0 : pnt[2].Equals(Double.NaN) ? 0 : pnt[2];
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD10,The following statement contains a magic number: if (pnt[0] != 0.0)              {                  lon = Math.Atan2(pnt[1]' pnt[0]);              }              else              {                  if (pnt[1] > 0)                  {                      lon = Math.PI / 2;                  }                  else                     if (pnt[1] < 0)                  {                      lon = -Math.PI * 0.5;                  }                  else                  {                      AtPole = true;                      lon = 0.0;                      if (Z > 0.0) // north pole                      {                          lat = Math.PI * 0.5;                      }                      else                         if (Z < 0.0) // south pole                      {                          lat = -Math.PI * 0.5;                      }                      else // center of earth                      {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor' };                      }                  }              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD10,The following statement contains a magic number: if (pnt[0] != 0.0)              {                  lon = Math.Atan2(pnt[1]' pnt[0]);              }              else              {                  if (pnt[1] > 0)                  {                      lon = Math.PI / 2;                  }                  else                     if (pnt[1] < 0)                  {                      lon = -Math.PI * 0.5;                  }                  else                  {                      AtPole = true;                      lon = 0.0;                      if (Z > 0.0) // north pole                      {                          lat = Math.PI * 0.5;                      }                      else                         if (Z < 0.0) // south pole                      {                          lat = -Math.PI * 0.5;                      }                      else // center of earth                      {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor' };                      }                  }              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD10,The following statement contains a magic number: if (pnt[0] != 0.0)              {                  lon = Math.Atan2(pnt[1]' pnt[0]);              }              else              {                  if (pnt[1] > 0)                  {                      lon = Math.PI / 2;                  }                  else                     if (pnt[1] < 0)                  {                      lon = -Math.PI * 0.5;                  }                  else                  {                      AtPole = true;                      lon = 0.0;                      if (Z > 0.0) // north pole                      {                          lat = Math.PI * 0.5;                      }                      else                         if (Z < 0.0) // south pole                      {                          lat = -Math.PI * 0.5;                      }                      else // center of earth                      {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor' };                      }                  }              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD10,The following statement contains a magic number: if (pnt[0] != 0.0)              {                  lon = Math.Atan2(pnt[1]' pnt[0]);              }              else              {                  if (pnt[1] > 0)                  {                      lon = Math.PI / 2;                  }                  else                     if (pnt[1] < 0)                  {                      lon = -Math.PI * 0.5;                  }                  else                  {                      AtPole = true;                      lon = 0.0;                      if (Z > 0.0) // north pole                      {                          lat = Math.PI * 0.5;                      }                      else                         if (Z < 0.0) // south pole                      {                          lat = -Math.PI * 0.5;                      }                      else // center of earth                      {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor' };                      }                  }              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD10,The following statement contains a magic number: if (pnt[0] != 0.0)              {                  lon = Math.Atan2(pnt[1]' pnt[0]);              }              else              {                  if (pnt[1] > 0)                  {                      lon = Math.PI / 2;                  }                  else                     if (pnt[1] < 0)                  {                      lon = -Math.PI * 0.5;                  }                  else                  {                      AtPole = true;                      lon = 0.0;                      if (Z > 0.0) // north pole                      {                          lat = Math.PI * 0.5;                      }                      else                         if (Z < 0.0) // south pole                      {                          lat = -Math.PI * 0.5;                      }                      else // center of earth                      {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor' };                      }                  }              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD10,The following statement contains a magic number: double Sin3_B0 = Math.Pow(Sin_B0' 3);
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM00,The following statement contains a magic number: es = 1.0 - Math.Pow(semiMinor / semiMajor' 2);
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM00,The following statement contains a magic number: als = Math.Pow(al' 2);
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM00,The following statement contains a magic number: c = esp * Math.Pow(cos_phi' 2);
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM00,The following statement contains a magic number: t = Math.Pow(tq' 2);
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM00,The following statement contains a magic number: con = 1.0 - es * Math.Pow(sin_phi' 2);
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM00,The following statement contains a magic number: double x = scaleFactor * n * al * (1.0 + als / 6.0 * (1.0 - t + c + als / 20.0 *                  (5.0 - 18.0 * t + Math.Pow(t' 2) + 72.0 * c - 58.0 * esp))) + falseEasting;
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM00,The following statement contains a magic number: double x = scaleFactor * n * al * (1.0 + als / 6.0 * (1.0 - t + c + als / 20.0 *                  (5.0 - 18.0 * t + Math.Pow(t' 2) + 72.0 * c - 58.0 * esp))) + falseEasting;
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM00,The following statement contains a magic number: double x = scaleFactor * n * al * (1.0 + als / 6.0 * (1.0 - t + c + als / 20.0 *                  (5.0 - 18.0 * t + Math.Pow(t' 2) + 72.0 * c - 58.0 * esp))) + falseEasting;
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM00,The following statement contains a magic number: double x = scaleFactor * n * al * (1.0 + als / 6.0 * (1.0 - t + c + als / 20.0 *                  (5.0 - 18.0 * t + Math.Pow(t' 2) + 72.0 * c - 58.0 * esp))) + falseEasting;
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM00,The following statement contains a magic number: double x = scaleFactor * n * al * (1.0 + als / 6.0 * (1.0 - t + c + als / 20.0 *                  (5.0 - 18.0 * t + Math.Pow(t' 2) + 72.0 * c - 58.0 * esp))) + falseEasting;
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM00,The following statement contains a magic number: double x = scaleFactor * n * al * (1.0 + als / 6.0 * (1.0 - t + c + als / 20.0 *                  (5.0 - 18.0 * t + Math.Pow(t' 2) + 72.0 * c - 58.0 * esp))) + falseEasting;
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM00,The following statement contains a magic number: double x = scaleFactor * n * al * (1.0 + als / 6.0 * (1.0 - t + c + als / 20.0 *                  (5.0 - 18.0 * t + Math.Pow(t' 2) + 72.0 * c - 58.0 * esp))) + falseEasting;
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *                  (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t                  + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *                  (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t                  + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *                  (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t                  + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *                  (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t                  + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *                  (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t                  + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *                  (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t                  + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *                  (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t                  + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *                  (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t                  + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *                  (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t                  + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *                  (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t                  + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *                  (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t                  + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *                  (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t                  + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM00,The following statement contains a magic number: if (lonlat.Length < 3)                  return new double[] { x / metersPerUnit' y / metersPerUnit };              else                  return new double[] { x / metersPerUnit' y / metersPerUnit' lonlat[2] };
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM00,The following statement contains a magic number: if (lonlat.Length < 3)                  return new double[] { x / metersPerUnit' y / metersPerUnit };              else                  return new double[] { x / metersPerUnit' y / metersPerUnit' lonlat[2] };
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM01,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor' 2)) / Math.Pow(semiMinor' 2);
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM01,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor' 2)) / Math.Pow(semiMinor' 2);
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM01,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor' 2)) / Math.Pow(semiMinor' 2);
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM01,The following statement contains a magic number: double h = lonlat.Length < 3 ? 0 : lonlat[2].Equals(Double.NaN) ? 0 : lonlat[2];
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM01,The following statement contains a magic number: double h = lonlat.Length < 3 ? 0 : lonlat[2].Equals(Double.NaN) ? 0 : lonlat[2];
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM01,The following statement contains a magic number: double h = lonlat.Length < 3 ? 0 : lonlat[2].Equals(Double.NaN) ? 0 : lonlat[2];
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,DTM01,The following statement contains a magic number: double v = semiMajor / Math.Sqrt(1 - es * Math.Pow(Math.Sin(lat)' 2));
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD01,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor2' 2)) / Math.Pow(semiMinor2' 2);
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD01,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor2' 2)) / Math.Pow(semiMinor2' 2);
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD01,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor2' 2)) / Math.Pow(semiMinor2' 2);
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD01,The following statement contains a magic number: double Z = pnt.Length < 3 ? 0 : pnt[2].Equals(Double.NaN) ? 0 : pnt[2];
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD01,The following statement contains a magic number: double Z = pnt.Length < 3 ? 0 : pnt[2].Equals(Double.NaN) ? 0 : pnt[2];
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD01,The following statement contains a magic number: double Z = pnt.Length < 3 ? 0 : pnt[2].Equals(Double.NaN) ? 0 : pnt[2];
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD01,The following statement contains a magic number: if (pnt[0] != 0.0)              {                  lon = Math.Atan2(pnt[1]' pnt[0]);              }              else              {                  if (pnt[1] > 0)                  {                      lon = Math.PI / 2;                  }                  else                     if (pnt[1] < 0)                  {                      lon = -Math.PI * 0.5;                  }                  else                  {                      At_Pole = true;                      lon = 0.0;                      if (Z > 0.0) // north pole                      {                          lat = Math.PI * 0.5;                      }                      else                         if (Z < 0.0) // south pole                      {                          lat = -Math.PI * 0.5;                      }                      else // center of earth                      {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor2' };                      }                  }              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD01,The following statement contains a magic number: if (pnt[0] != 0.0)              {                  lon = Math.Atan2(pnt[1]' pnt[0]);              }              else              {                  if (pnt[1] > 0)                  {                      lon = Math.PI / 2;                  }                  else                     if (pnt[1] < 0)                  {                      lon = -Math.PI * 0.5;                  }                  else                  {                      At_Pole = true;                      lon = 0.0;                      if (Z > 0.0) // north pole                      {                          lat = Math.PI * 0.5;                      }                      else                         if (Z < 0.0) // south pole                      {                          lat = -Math.PI * 0.5;                      }                      else // center of earth                      {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor2' };                      }                  }              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD01,The following statement contains a magic number: if (pnt[0] != 0.0)              {                  lon = Math.Atan2(pnt[1]' pnt[0]);              }              else              {                  if (pnt[1] > 0)                  {                      lon = Math.PI / 2;                  }                  else                     if (pnt[1] < 0)                  {                      lon = -Math.PI * 0.5;                  }                  else                  {                      At_Pole = true;                      lon = 0.0;                      if (Z > 0.0) // north pole                      {                          lat = Math.PI * 0.5;                      }                      else                         if (Z < 0.0) // south pole                      {                          lat = -Math.PI * 0.5;                      }                      else // center of earth                      {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor2' };                      }                  }              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD01,The following statement contains a magic number: if (pnt[0] != 0.0)              {                  lon = Math.Atan2(pnt[1]' pnt[0]);              }              else              {                  if (pnt[1] > 0)                  {                      lon = Math.PI / 2;                  }                  else                     if (pnt[1] < 0)                  {                      lon = -Math.PI * 0.5;                  }                  else                  {                      At_Pole = true;                      lon = 0.0;                      if (Z > 0.0) // north pole                      {                          lat = Math.PI * 0.5;                      }                      else                         if (Z < 0.0) // south pole                      {                          lat = -Math.PI * 0.5;                      }                      else // center of earth                      {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor2' };                      }                  }              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD01,The following statement contains a magic number: if (pnt[0] != 0.0)              {                  lon = Math.Atan2(pnt[1]' pnt[0]);              }              else              {                  if (pnt[1] > 0)                  {                      lon = Math.PI / 2;                  }                  else                     if (pnt[1] < 0)                  {                      lon = -Math.PI * 0.5;                  }                  else                  {                      At_Pole = true;                      lon = 0.0;                      if (Z > 0.0) // north pole                      {                          lat = Math.PI * 0.5;                      }                      else                         if (Z < 0.0) // south pole                      {                          lat = -Math.PI * 0.5;                      }                      else // center of earth                      {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor2' };                      }                  }              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD01,The following statement contains a magic number: double Sin3_B0 = Math.Pow(Sin_B0' 3);
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: es = 1.0 - Math.Pow(semiMinor / semiMajor' 2);
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: long max_iter = 6;
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: for (i = 0; ; i++)              {                  delta_phi = ((con + e1 * Math.Sin(2.0 * phi) - e2 * Math.Sin(4.0 * phi) + e3 * Math.Sin(6.0 * phi)) / e0) - phi;                  phi += delta_phi;                    if (Math.Abs(delta_phi) <= EPSLoN)                      break;                    if (i >= max_iter)                      throw new ArgumentException("Latitude failed to converge");              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: for (i = 0; ; i++)              {                  delta_phi = ((con + e1 * Math.Sin(2.0 * phi) - e2 * Math.Sin(4.0 * phi) + e3 * Math.Sin(6.0 * phi)) / e0) - phi;                  phi += delta_phi;                    if (Math.Abs(delta_phi) <= EPSLoN)                      break;                    if (i >= max_iter)                      throw new ArgumentException("Latitude failed to converge");              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: for (i = 0; ; i++)              {                  delta_phi = ((con + e1 * Math.Sin(2.0 * phi) - e2 * Math.Sin(4.0 * phi) + e3 * Math.Sin(6.0 * phi)) / e0) - phi;                  phi += delta_phi;                    if (Math.Abs(delta_phi) <= EPSLoN)                      break;                    if (i >= max_iter)                      throw new ArgumentException("Latitude failed to converge");              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: if (Math.Abs(phi) < HALF_PI)              {                  SinCos(phi' out sin_phi' out cos_phi);                  tan_phi = Math.Tan(phi);                  c = esp * Math.Pow(cos_phi' 2);                  cs = Math.Pow(c' 2);                  t = Math.Pow(tan_phi' 2);                  ts = Math.Pow(t' 2);                  con = 1.0 - es * Math.Pow(sin_phi' 2);                  n = semiMajor / Math.Sqrt(con);                  r = n * (1.0 - es) / con;                  d = x / (n * scaleFactor);                  ds = Math.Pow(d' 2);                    double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                      10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                      298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                    double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                      c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                      24.0 * ts))) / cos_phi));                    if (p.Length < 3)                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };                  else                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };              }              else              {                  if (p.Length < 3)                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };                  else                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: if (Math.Abs(phi) < HALF_PI)              {                  SinCos(phi' out sin_phi' out cos_phi);                  tan_phi = Math.Tan(phi);                  c = esp * Math.Pow(cos_phi' 2);                  cs = Math.Pow(c' 2);                  t = Math.Pow(tan_phi' 2);                  ts = Math.Pow(t' 2);                  con = 1.0 - es * Math.Pow(sin_phi' 2);                  n = semiMajor / Math.Sqrt(con);                  r = n * (1.0 - es) / con;                  d = x / (n * scaleFactor);                  ds = Math.Pow(d' 2);                    double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                      10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                      298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                    double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                      c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                      24.0 * ts))) / cos_phi));                    if (p.Length < 3)                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };                  else                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };              }              else              {                  if (p.Length < 3)                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };                  else                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: if (Math.Abs(phi) < HALF_PI)              {                  SinCos(phi' out sin_phi' out cos_phi);                  tan_phi = Math.Tan(phi);                  c = esp * Math.Pow(cos_phi' 2);                  cs = Math.Pow(c' 2);                  t = Math.Pow(tan_phi' 2);                  ts = Math.Pow(t' 2);                  con = 1.0 - es * Math.Pow(sin_phi' 2);                  n = semiMajor / Math.Sqrt(con);                  r = n * (1.0 - es) / con;                  d = x / (n * scaleFactor);                  ds = Math.Pow(d' 2);                    double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                      10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                      298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                    double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                      c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                      24.0 * ts))) / cos_phi));                    if (p.Length < 3)                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };                  else                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };              }              else              {                  if (p.Length < 3)                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };                  else                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: if (Math.Abs(phi) < HALF_PI)              {                  SinCos(phi' out sin_phi' out cos_phi);                  tan_phi = Math.Tan(phi);                  c = esp * Math.Pow(cos_phi' 2);                  cs = Math.Pow(c' 2);                  t = Math.Pow(tan_phi' 2);                  ts = Math.Pow(t' 2);                  con = 1.0 - es * Math.Pow(sin_phi' 2);                  n = semiMajor / Math.Sqrt(con);                  r = n * (1.0 - es) / con;                  d = x / (n * scaleFactor);                  ds = Math.Pow(d' 2);                    double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                      10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                      298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                    double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                      c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                      24.0 * ts))) / cos_phi));                    if (p.Length < 3)                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };                  else                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };              }              else              {                  if (p.Length < 3)                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };                  else                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: if (Math.Abs(phi) < HALF_PI)              {                  SinCos(phi' out sin_phi' out cos_phi);                  tan_phi = Math.Tan(phi);                  c = esp * Math.Pow(cos_phi' 2);                  cs = Math.Pow(c' 2);                  t = Math.Pow(tan_phi' 2);                  ts = Math.Pow(t' 2);                  con = 1.0 - es * Math.Pow(sin_phi' 2);                  n = semiMajor / Math.Sqrt(con);                  r = n * (1.0 - es) / con;                  d = x / (n * scaleFactor);                  ds = Math.Pow(d' 2);                    double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                      10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                      298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                    double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                      c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                      24.0 * ts))) / cos_phi));                    if (p.Length < 3)                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };                  else                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };              }              else              {                  if (p.Length < 3)                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };                  else                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: if (Math.Abs(phi) < HALF_PI)              {                  SinCos(phi' out sin_phi' out cos_phi);                  tan_phi = Math.Tan(phi);                  c = esp * Math.Pow(cos_phi' 2);                  cs = Math.Pow(c' 2);                  t = Math.Pow(tan_phi' 2);                  ts = Math.Pow(t' 2);                  con = 1.0 - es * Math.Pow(sin_phi' 2);                  n = semiMajor / Math.Sqrt(con);                  r = n * (1.0 - es) / con;                  d = x / (n * scaleFactor);                  ds = Math.Pow(d' 2);                    double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                      10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                      298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                    double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                      c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                      24.0 * ts))) / cos_phi));                    if (p.Length < 3)                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };                  else                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };              }              else              {                  if (p.Length < 3)                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };                  else                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: if (Math.Abs(phi) < HALF_PI)              {                  SinCos(phi' out sin_phi' out cos_phi);                  tan_phi = Math.Tan(phi);                  c = esp * Math.Pow(cos_phi' 2);                  cs = Math.Pow(c' 2);                  t = Math.Pow(tan_phi' 2);                  ts = Math.Pow(t' 2);                  con = 1.0 - es * Math.Pow(sin_phi' 2);                  n = semiMajor / Math.Sqrt(con);                  r = n * (1.0 - es) / con;                  d = x / (n * scaleFactor);                  ds = Math.Pow(d' 2);                    double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                      10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                      298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                    double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                      c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                      24.0 * ts))) / cos_phi));                    if (p.Length < 3)                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };                  else                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };              }              else              {                  if (p.Length < 3)                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };                  else                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: if (Math.Abs(phi) < HALF_PI)              {                  SinCos(phi' out sin_phi' out cos_phi);                  tan_phi = Math.Tan(phi);                  c = esp * Math.Pow(cos_phi' 2);                  cs = Math.Pow(c' 2);                  t = Math.Pow(tan_phi' 2);                  ts = Math.Pow(t' 2);                  con = 1.0 - es * Math.Pow(sin_phi' 2);                  n = semiMajor / Math.Sqrt(con);                  r = n * (1.0 - es) / con;                  d = x / (n * scaleFactor);                  ds = Math.Pow(d' 2);                    double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                      10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                      298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                    double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                      c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                      24.0 * ts))) / cos_phi));                    if (p.Length < 3)                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };                  else                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };              }              else              {                  if (p.Length < 3)                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };                  else                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: if (Math.Abs(phi) < HALF_PI)              {                  SinCos(phi' out sin_phi' out cos_phi);                  tan_phi = Math.Tan(phi);                  c = esp * Math.Pow(cos_phi' 2);                  cs = Math.Pow(c' 2);                  t = Math.Pow(tan_phi' 2);                  ts = Math.Pow(t' 2);                  con = 1.0 - es * Math.Pow(sin_phi' 2);                  n = semiMajor / Math.Sqrt(con);                  r = n * (1.0 - es) / con;                  d = x / (n * scaleFactor);                  ds = Math.Pow(d' 2);                    double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                      10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                      298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                    double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                      c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                      24.0 * ts))) / cos_phi));                    if (p.Length < 3)                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };                  else                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };              }              else              {                  if (p.Length < 3)                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };                  else                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: if (Math.Abs(phi) < HALF_PI)              {                  SinCos(phi' out sin_phi' out cos_phi);                  tan_phi = Math.Tan(phi);                  c = esp * Math.Pow(cos_phi' 2);                  cs = Math.Pow(c' 2);                  t = Math.Pow(tan_phi' 2);                  ts = Math.Pow(t' 2);                  con = 1.0 - es * Math.Pow(sin_phi' 2);                  n = semiMajor / Math.Sqrt(con);                  r = n * (1.0 - es) / con;                  d = x / (n * scaleFactor);                  ds = Math.Pow(d' 2);                    double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                      10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                      298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                    double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                      c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                      24.0 * ts))) / cos_phi));                    if (p.Length < 3)                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };                  else                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };              }              else              {                  if (p.Length < 3)                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };                  else                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: if (Math.Abs(phi) < HALF_PI)              {                  SinCos(phi' out sin_phi' out cos_phi);                  tan_phi = Math.Tan(phi);                  c = esp * Math.Pow(cos_phi' 2);                  cs = Math.Pow(c' 2);                  t = Math.Pow(tan_phi' 2);                  ts = Math.Pow(t' 2);                  con = 1.0 - es * Math.Pow(sin_phi' 2);                  n = semiMajor / Math.Sqrt(con);                  r = n * (1.0 - es) / con;                  d = x / (n * scaleFactor);                  ds = Math.Pow(d' 2);                    double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                      10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                      298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                    double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                      c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                      24.0 * ts))) / cos_phi));                    if (p.Length < 3)                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };                  else                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };              }              else              {                  if (p.Length < 3)                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };                  else                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: if (Math.Abs(phi) < HALF_PI)              {                  SinCos(phi' out sin_phi' out cos_phi);                  tan_phi = Math.Tan(phi);                  c = esp * Math.Pow(cos_phi' 2);                  cs = Math.Pow(c' 2);                  t = Math.Pow(tan_phi' 2);                  ts = Math.Pow(t' 2);                  con = 1.0 - es * Math.Pow(sin_phi' 2);                  n = semiMajor / Math.Sqrt(con);                  r = n * (1.0 - es) / con;                  d = x / (n * scaleFactor);                  ds = Math.Pow(d' 2);                    double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                      10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                      298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                    double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                      c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                      24.0 * ts))) / cos_phi));                    if (p.Length < 3)                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };                  else                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };              }              else              {                  if (p.Length < 3)                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };                  else                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: if (Math.Abs(phi) < HALF_PI)              {                  SinCos(phi' out sin_phi' out cos_phi);                  tan_phi = Math.Tan(phi);                  c = esp * Math.Pow(cos_phi' 2);                  cs = Math.Pow(c' 2);                  t = Math.Pow(tan_phi' 2);                  ts = Math.Pow(t' 2);                  con = 1.0 - es * Math.Pow(sin_phi' 2);                  n = semiMajor / Math.Sqrt(con);                  r = n * (1.0 - es) / con;                  d = x / (n * scaleFactor);                  ds = Math.Pow(d' 2);                    double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                      10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                      298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                    double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                      c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                      24.0 * ts))) / cos_phi));                    if (p.Length < 3)                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };                  else                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };              }              else              {                  if (p.Length < 3)                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };                  else                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: if (Math.Abs(phi) < HALF_PI)              {                  SinCos(phi' out sin_phi' out cos_phi);                  tan_phi = Math.Tan(phi);                  c = esp * Math.Pow(cos_phi' 2);                  cs = Math.Pow(c' 2);                  t = Math.Pow(tan_phi' 2);                  ts = Math.Pow(t' 2);                  con = 1.0 - es * Math.Pow(sin_phi' 2);                  n = semiMajor / Math.Sqrt(con);                  r = n * (1.0 - es) / con;                  d = x / (n * scaleFactor);                  ds = Math.Pow(d' 2);                    double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                      10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                      298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                    double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                      c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                      24.0 * ts))) / cos_phi));                    if (p.Length < 3)                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };                  else                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };              }              else              {                  if (p.Length < 3)                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };                  else                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: if (Math.Abs(phi) < HALF_PI)              {                  SinCos(phi' out sin_phi' out cos_phi);                  tan_phi = Math.Tan(phi);                  c = esp * Math.Pow(cos_phi' 2);                  cs = Math.Pow(c' 2);                  t = Math.Pow(tan_phi' 2);                  ts = Math.Pow(t' 2);                  con = 1.0 - es * Math.Pow(sin_phi' 2);                  n = semiMajor / Math.Sqrt(con);                  r = n * (1.0 - es) / con;                  d = x / (n * scaleFactor);                  ds = Math.Pow(d' 2);                    double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                      10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                      298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                    double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                      c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                      24.0 * ts))) / cos_phi));                    if (p.Length < 3)                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };                  else                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };              }              else              {                  if (p.Length < 3)                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };                  else                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: if (Math.Abs(phi) < HALF_PI)              {                  SinCos(phi' out sin_phi' out cos_phi);                  tan_phi = Math.Tan(phi);                  c = esp * Math.Pow(cos_phi' 2);                  cs = Math.Pow(c' 2);                  t = Math.Pow(tan_phi' 2);                  ts = Math.Pow(t' 2);                  con = 1.0 - es * Math.Pow(sin_phi' 2);                  n = semiMajor / Math.Sqrt(con);                  r = n * (1.0 - es) / con;                  d = x / (n * scaleFactor);                  ds = Math.Pow(d' 2);                    double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                      10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                      298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                    double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                      c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                      24.0 * ts))) / cos_phi));                    if (p.Length < 3)                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };                  else                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };              }              else              {                  if (p.Length < 3)                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };                  else                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: if (Math.Abs(phi) < HALF_PI)              {                  SinCos(phi' out sin_phi' out cos_phi);                  tan_phi = Math.Tan(phi);                  c = esp * Math.Pow(cos_phi' 2);                  cs = Math.Pow(c' 2);                  t = Math.Pow(tan_phi' 2);                  ts = Math.Pow(t' 2);                  con = 1.0 - es * Math.Pow(sin_phi' 2);                  n = semiMajor / Math.Sqrt(con);                  r = n * (1.0 - es) / con;                  d = x / (n * scaleFactor);                  ds = Math.Pow(d' 2);                    double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                      10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                      298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                    double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                      c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                      24.0 * ts))) / cos_phi));                    if (p.Length < 3)                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };                  else                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };              }              else              {                  if (p.Length < 3)                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };                  else                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: if (Math.Abs(phi) < HALF_PI)              {                  SinCos(phi' out sin_phi' out cos_phi);                  tan_phi = Math.Tan(phi);                  c = esp * Math.Pow(cos_phi' 2);                  cs = Math.Pow(c' 2);                  t = Math.Pow(tan_phi' 2);                  ts = Math.Pow(t' 2);                  con = 1.0 - es * Math.Pow(sin_phi' 2);                  n = semiMajor / Math.Sqrt(con);                  r = n * (1.0 - es) / con;                  d = x / (n * scaleFactor);                  ds = Math.Pow(d' 2);                    double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                      10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                      298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                    double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                      c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                      24.0 * ts))) / cos_phi));                    if (p.Length < 3)                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };                  else                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };              }              else              {                  if (p.Length < 3)                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };                  else                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: if (Math.Abs(phi) < HALF_PI)              {                  SinCos(phi' out sin_phi' out cos_phi);                  tan_phi = Math.Tan(phi);                  c = esp * Math.Pow(cos_phi' 2);                  cs = Math.Pow(c' 2);                  t = Math.Pow(tan_phi' 2);                  ts = Math.Pow(t' 2);                  con = 1.0 - es * Math.Pow(sin_phi' 2);                  n = semiMajor / Math.Sqrt(con);                  r = n * (1.0 - es) / con;                  d = x / (n * scaleFactor);                  ds = Math.Pow(d' 2);                    double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                      10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                      298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                    double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                      c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                      24.0 * ts))) / cos_phi));                    if (p.Length < 3)                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };                  else                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };              }              else              {                  if (p.Length < 3)                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };                  else                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: if (Math.Abs(phi) < HALF_PI)              {                  SinCos(phi' out sin_phi' out cos_phi);                  tan_phi = Math.Tan(phi);                  c = esp * Math.Pow(cos_phi' 2);                  cs = Math.Pow(c' 2);                  t = Math.Pow(tan_phi' 2);                  ts = Math.Pow(t' 2);                  con = 1.0 - es * Math.Pow(sin_phi' 2);                  n = semiMajor / Math.Sqrt(con);                  r = n * (1.0 - es) / con;                  d = x / (n * scaleFactor);                  ds = Math.Pow(d' 2);                    double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                      10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                      298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                    double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                      c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                      24.0 * ts))) / cos_phi));                    if (p.Length < 3)                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };                  else                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };              }              else              {                  if (p.Length < 3)                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };                  else                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: if (Math.Abs(phi) < HALF_PI)              {                  SinCos(phi' out sin_phi' out cos_phi);                  tan_phi = Math.Tan(phi);                  c = esp * Math.Pow(cos_phi' 2);                  cs = Math.Pow(c' 2);                  t = Math.Pow(tan_phi' 2);                  ts = Math.Pow(t' 2);                  con = 1.0 - es * Math.Pow(sin_phi' 2);                  n = semiMajor / Math.Sqrt(con);                  r = n * (1.0 - es) / con;                  d = x / (n * scaleFactor);                  ds = Math.Pow(d' 2);                    double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                      10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                      298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                    double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                      c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                      24.0 * ts))) / cos_phi));                    if (p.Length < 3)                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };                  else                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };              }              else              {                  if (p.Length < 3)                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };                  else                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: if (Math.Abs(phi) < HALF_PI)              {                  SinCos(phi' out sin_phi' out cos_phi);                  tan_phi = Math.Tan(phi);                  c = esp * Math.Pow(cos_phi' 2);                  cs = Math.Pow(c' 2);                  t = Math.Pow(tan_phi' 2);                  ts = Math.Pow(t' 2);                  con = 1.0 - es * Math.Pow(sin_phi' 2);                  n = semiMajor / Math.Sqrt(con);                  r = n * (1.0 - es) / con;                  d = x / (n * scaleFactor);                  ds = Math.Pow(d' 2);                    double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                      10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                      298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                    double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                      c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                      24.0 * ts))) / cos_phi));                    if (p.Length < 3)                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };                  else                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };              }              else              {                  if (p.Length < 3)                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };                  else                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: if (Math.Abs(phi) < HALF_PI)              {                  SinCos(phi' out sin_phi' out cos_phi);                  tan_phi = Math.Tan(phi);                  c = esp * Math.Pow(cos_phi' 2);                  cs = Math.Pow(c' 2);                  t = Math.Pow(tan_phi' 2);                  ts = Math.Pow(t' 2);                  con = 1.0 - es * Math.Pow(sin_phi' 2);                  n = semiMajor / Math.Sqrt(con);                  r = n * (1.0 - es) / con;                  d = x / (n * scaleFactor);                  ds = Math.Pow(d' 2);                    double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                      10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                      298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                    double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                      c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                      24.0 * ts))) / cos_phi));                    if (p.Length < 3)                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };                  else                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };              }              else              {                  if (p.Length < 3)                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };                  else                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: if (Math.Abs(phi) < HALF_PI)              {                  SinCos(phi' out sin_phi' out cos_phi);                  tan_phi = Math.Tan(phi);                  c = esp * Math.Pow(cos_phi' 2);                  cs = Math.Pow(c' 2);                  t = Math.Pow(tan_phi' 2);                  ts = Math.Pow(t' 2);                  con = 1.0 - es * Math.Pow(sin_phi' 2);                  n = semiMajor / Math.Sqrt(con);                  r = n * (1.0 - es) / con;                  d = x / (n * scaleFactor);                  ds = Math.Pow(d' 2);                    double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                      10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                      298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                    double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                      c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                      24.0 * ts))) / cos_phi));                    if (p.Length < 3)                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };                  else                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };              }              else              {                  if (p.Length < 3)                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };                  else                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: if (Math.Abs(phi) < HALF_PI)              {                  SinCos(phi' out sin_phi' out cos_phi);                  tan_phi = Math.Tan(phi);                  c = esp * Math.Pow(cos_phi' 2);                  cs = Math.Pow(c' 2);                  t = Math.Pow(tan_phi' 2);                  ts = Math.Pow(t' 2);                  con = 1.0 - es * Math.Pow(sin_phi' 2);                  n = semiMajor / Math.Sqrt(con);                  r = n * (1.0 - es) / con;                  d = x / (n * scaleFactor);                  ds = Math.Pow(d' 2);                    double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                      10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                      298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                    double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                      c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                      24.0 * ts))) / cos_phi));                    if (p.Length < 3)                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };                  else                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };              }              else              {                  if (p.Length < 3)                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };                  else                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: if (Math.Abs(phi) < HALF_PI)              {                  SinCos(phi' out sin_phi' out cos_phi);                  tan_phi = Math.Tan(phi);                  c = esp * Math.Pow(cos_phi' 2);                  cs = Math.Pow(c' 2);                  t = Math.Pow(tan_phi' 2);                  ts = Math.Pow(t' 2);                  con = 1.0 - es * Math.Pow(sin_phi' 2);                  n = semiMajor / Math.Sqrt(con);                  r = n * (1.0 - es) / con;                  d = x / (n * scaleFactor);                  ds = Math.Pow(d' 2);                    double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                      10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                      298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                    double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                      c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                      24.0 * ts))) / cos_phi));                    if (p.Length < 3)                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };                  else                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };              }              else              {                  if (p.Length < 3)                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };                  else                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: if (Math.Abs(phi) < HALF_PI)              {                  SinCos(phi' out sin_phi' out cos_phi);                  tan_phi = Math.Tan(phi);                  c = esp * Math.Pow(cos_phi' 2);                  cs = Math.Pow(c' 2);                  t = Math.Pow(tan_phi' 2);                  ts = Math.Pow(t' 2);                  con = 1.0 - es * Math.Pow(sin_phi' 2);                  n = semiMajor / Math.Sqrt(con);                  r = n * (1.0 - es) / con;                  d = x / (n * scaleFactor);                  ds = Math.Pow(d' 2);                    double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                      10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                      298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                    double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                      c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                      24.0 * ts))) / cos_phi));                    if (p.Length < 3)                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };                  else                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };              }              else              {                  if (p.Length < 3)                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };                  else                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: if (Math.Abs(phi) < HALF_PI)              {                  SinCos(phi' out sin_phi' out cos_phi);                  tan_phi = Math.Tan(phi);                  c = esp * Math.Pow(cos_phi' 2);                  cs = Math.Pow(c' 2);                  t = Math.Pow(tan_phi' 2);                  ts = Math.Pow(t' 2);                  con = 1.0 - es * Math.Pow(sin_phi' 2);                  n = semiMajor / Math.Sqrt(con);                  r = n * (1.0 - es) / con;                  d = x / (n * scaleFactor);                  ds = Math.Pow(d' 2);                    double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                      10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                      298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                    double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                      c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                      24.0 * ts))) / cos_phi));                    if (p.Length < 3)                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };                  else                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };              }              else              {                  if (p.Length < 3)                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };                  else                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: if (Math.Abs(phi) < HALF_PI)              {                  SinCos(phi' out sin_phi' out cos_phi);                  tan_phi = Math.Tan(phi);                  c = esp * Math.Pow(cos_phi' 2);                  cs = Math.Pow(c' 2);                  t = Math.Pow(tan_phi' 2);                  ts = Math.Pow(t' 2);                  con = 1.0 - es * Math.Pow(sin_phi' 2);                  n = semiMajor / Math.Sqrt(con);                  r = n * (1.0 - es) / con;                  d = x / (n * scaleFactor);                  ds = Math.Pow(d' 2);                    double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                      10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                      298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                    double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                      c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                      24.0 * ts))) / cos_phi));                    if (p.Length < 3)                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };                  else                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };              }              else              {                  if (p.Length < 3)                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };                  else                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: if (Math.Abs(phi) < HALF_PI)              {                  SinCos(phi' out sin_phi' out cos_phi);                  tan_phi = Math.Tan(phi);                  c = esp * Math.Pow(cos_phi' 2);                  cs = Math.Pow(c' 2);                  t = Math.Pow(tan_phi' 2);                  ts = Math.Pow(t' 2);                  con = 1.0 - es * Math.Pow(sin_phi' 2);                  n = semiMajor / Math.Sqrt(con);                  r = n * (1.0 - es) / con;                  d = x / (n * scaleFactor);                  ds = Math.Pow(d' 2);                    double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                      10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                      298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                    double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                      c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                      24.0 * ts))) / cos_phi));                    if (p.Length < 3)                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };                  else                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };              }              else              {                  if (p.Length < 3)                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };                  else                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: if (Math.Abs(phi) < HALF_PI)              {                  SinCos(phi' out sin_phi' out cos_phi);                  tan_phi = Math.Tan(phi);                  c = esp * Math.Pow(cos_phi' 2);                  cs = Math.Pow(c' 2);                  t = Math.Pow(tan_phi' 2);                  ts = Math.Pow(t' 2);                  con = 1.0 - es * Math.Pow(sin_phi' 2);                  n = semiMajor / Math.Sqrt(con);                  r = n * (1.0 - es) / con;                  d = x / (n * scaleFactor);                  ds = Math.Pow(d' 2);                    double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                      10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                      298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                    double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                      c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                      24.0 * ts))) / cos_phi));                    if (p.Length < 3)                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };                  else                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };              }              else              {                  if (p.Length < 3)                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };                  else                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: if (Math.Abs(phi) < HALF_PI)              {                  SinCos(phi' out sin_phi' out cos_phi);                  tan_phi = Math.Tan(phi);                  c = esp * Math.Pow(cos_phi' 2);                  cs = Math.Pow(c' 2);                  t = Math.Pow(tan_phi' 2);                  ts = Math.Pow(t' 2);                  con = 1.0 - es * Math.Pow(sin_phi' 2);                  n = semiMajor / Math.Sqrt(con);                  r = n * (1.0 - es) / con;                  d = x / (n * scaleFactor);                  ds = Math.Pow(d' 2);                    double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                      10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                      298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                    double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                      c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                      24.0 * ts))) / cos_phi));                    if (p.Length < 3)                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };                  else                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };              }              else              {                  if (p.Length < 3)                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };                  else                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };              }
Magic Number,GMap.NET.Projections,SWEREF99_TMProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\SWEREF99_TMProjection.cs,MTD11,The following statement contains a magic number: if (Math.Abs(phi) < HALF_PI)              {                  SinCos(phi' out sin_phi' out cos_phi);                  tan_phi = Math.Tan(phi);                  c = esp * Math.Pow(cos_phi' 2);                  cs = Math.Pow(c' 2);                  t = Math.Pow(tan_phi' 2);                  ts = Math.Pow(t' 2);                  con = 1.0 - es * Math.Pow(sin_phi' 2);                  n = semiMajor / Math.Sqrt(con);                  r = n * (1.0 - es) / con;                  d = x / (n * scaleFactor);                  ds = Math.Pow(d' 2);                    double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                      10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                      298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                    double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                      c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                      24.0 * ts))) / cos_phi));                    if (p.Length < 3)                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };                  else                      return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };              }              else              {                  if (p.Length < 3)                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };                  else                      return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };              }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM10,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor2' 2)) / Math.Pow(semiMinor2' 2);
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM10,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor2' 2)) / Math.Pow(semiMinor2' 2);
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM10,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor2' 2)) / Math.Pow(semiMinor2' 2);
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM10,The following statement contains a magic number: double h = lonlat.Length < 3 ? 0 : lonlat[2].Equals(Double.NaN) ? 0 : lonlat[2];
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM10,The following statement contains a magic number: double h = lonlat.Length < 3 ? 0 : lonlat[2].Equals(Double.NaN) ? 0 : lonlat[2];
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM10,The following statement contains a magic number: double h = lonlat.Length < 3 ? 0 : lonlat[2].Equals(Double.NaN) ? 0 : lonlat[2];
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM10,The following statement contains a magic number: double v = semiMajor / Math.Sqrt(1 - es * Math.Pow(Math.Sin(lat)' 2));
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD10,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor' 2)) / Math.Pow(semiMinor' 2);
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD10,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor' 2)) / Math.Pow(semiMinor' 2);
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD10,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor' 2)) / Math.Pow(semiMinor' 2);
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD10,The following statement contains a magic number: double Z = pnt.Length < 3 ? 0 : pnt[2].Equals(Double.NaN) ? 0 : pnt[2];
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD10,The following statement contains a magic number: double Z = pnt.Length < 3 ? 0 : pnt[2].Equals(Double.NaN) ? 0 : pnt[2];
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD10,The following statement contains a magic number: double Z = pnt.Length < 3 ? 0 : pnt[2].Equals(Double.NaN) ? 0 : pnt[2];
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD10,The following statement contains a magic number: if(pnt[0] != 0.0)           {              lon = Math.Atan2(pnt[1]' pnt[0]);           }           else           {              if(pnt[1] > 0)              {                 lon = Math.PI / 2;              }              else                 if(pnt[1] < 0)                 {                    lon = -Math.PI * 0.5;                 }                 else                 {                    AtPole = true;                    lon = 0.0;                    if(Z > 0.0) // north pole                    {                       lat = Math.PI * 0.5;                    }                    else                       if(Z < 0.0) // south pole                       {                          lat = -Math.PI * 0.5;                       }                       else // center of earth                       {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor' };                       }                 }           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD10,The following statement contains a magic number: if(pnt[0] != 0.0)           {              lon = Math.Atan2(pnt[1]' pnt[0]);           }           else           {              if(pnt[1] > 0)              {                 lon = Math.PI / 2;              }              else                 if(pnt[1] < 0)                 {                    lon = -Math.PI * 0.5;                 }                 else                 {                    AtPole = true;                    lon = 0.0;                    if(Z > 0.0) // north pole                    {                       lat = Math.PI * 0.5;                    }                    else                       if(Z < 0.0) // south pole                       {                          lat = -Math.PI * 0.5;                       }                       else // center of earth                       {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor' };                       }                 }           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD10,The following statement contains a magic number: if(pnt[0] != 0.0)           {              lon = Math.Atan2(pnt[1]' pnt[0]);           }           else           {              if(pnt[1] > 0)              {                 lon = Math.PI / 2;              }              else                 if(pnt[1] < 0)                 {                    lon = -Math.PI * 0.5;                 }                 else                 {                    AtPole = true;                    lon = 0.0;                    if(Z > 0.0) // north pole                    {                       lat = Math.PI * 0.5;                    }                    else                       if(Z < 0.0) // south pole                       {                          lat = -Math.PI * 0.5;                       }                       else // center of earth                       {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor' };                       }                 }           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD10,The following statement contains a magic number: if(pnt[0] != 0.0)           {              lon = Math.Atan2(pnt[1]' pnt[0]);           }           else           {              if(pnt[1] > 0)              {                 lon = Math.PI / 2;              }              else                 if(pnt[1] < 0)                 {                    lon = -Math.PI * 0.5;                 }                 else                 {                    AtPole = true;                    lon = 0.0;                    if(Z > 0.0) // north pole                    {                       lat = Math.PI * 0.5;                    }                    else                       if(Z < 0.0) // south pole                       {                          lat = -Math.PI * 0.5;                       }                       else // center of earth                       {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor' };                       }                 }           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD10,The following statement contains a magic number: if(pnt[0] != 0.0)           {              lon = Math.Atan2(pnt[1]' pnt[0]);           }           else           {              if(pnt[1] > 0)              {                 lon = Math.PI / 2;              }              else                 if(pnt[1] < 0)                 {                    lon = -Math.PI * 0.5;                 }                 else                 {                    AtPole = true;                    lon = 0.0;                    if(Z > 0.0) // north pole                    {                       lat = Math.PI * 0.5;                    }                    else                       if(Z < 0.0) // south pole                       {                          lat = -Math.PI * 0.5;                       }                       else // center of earth                       {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor' };                       }                 }           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD10,The following statement contains a magic number: double Sin3_B0 = Math.Pow(Sin_B0' 3);
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM00,The following statement contains a magic number: es = 1.0 - Math.Pow(semiMinor / semiMajor' 2);
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM00,The following statement contains a magic number: als = Math.Pow(al' 2);
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM00,The following statement contains a magic number: c = esp * Math.Pow(cos_phi' 2);
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM00,The following statement contains a magic number: t = Math.Pow(tq' 2);
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM00,The following statement contains a magic number: con = 1.0 - es * Math.Pow(sin_phi' 2);
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM00,The following statement contains a magic number: double x = scaleFactor * n * al * (1.0 + als / 6.0 * (1.0 - t + c + als / 20.0 *               (5.0 - 18.0 * t + Math.Pow(t' 2) + 72.0 * c - 58.0 * esp))) + falseEasting;
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM00,The following statement contains a magic number: double x = scaleFactor * n * al * (1.0 + als / 6.0 * (1.0 - t + c + als / 20.0 *               (5.0 - 18.0 * t + Math.Pow(t' 2) + 72.0 * c - 58.0 * esp))) + falseEasting;
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM00,The following statement contains a magic number: double x = scaleFactor * n * al * (1.0 + als / 6.0 * (1.0 - t + c + als / 20.0 *               (5.0 - 18.0 * t + Math.Pow(t' 2) + 72.0 * c - 58.0 * esp))) + falseEasting;
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM00,The following statement contains a magic number: double x = scaleFactor * n * al * (1.0 + als / 6.0 * (1.0 - t + c + als / 20.0 *               (5.0 - 18.0 * t + Math.Pow(t' 2) + 72.0 * c - 58.0 * esp))) + falseEasting;
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM00,The following statement contains a magic number: double x = scaleFactor * n * al * (1.0 + als / 6.0 * (1.0 - t + c + als / 20.0 *               (5.0 - 18.0 * t + Math.Pow(t' 2) + 72.0 * c - 58.0 * esp))) + falseEasting;
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM00,The following statement contains a magic number: double x = scaleFactor * n * al * (1.0 + als / 6.0 * (1.0 - t + c + als / 20.0 *               (5.0 - 18.0 * t + Math.Pow(t' 2) + 72.0 * c - 58.0 * esp))) + falseEasting;
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM00,The following statement contains a magic number: double x = scaleFactor * n * al * (1.0 + als / 6.0 * (1.0 - t + c + als / 20.0 *               (5.0 - 18.0 * t + Math.Pow(t' 2) + 72.0 * c - 58.0 * esp))) + falseEasting;
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM00,The following statement contains a magic number: if(lonlat.Length < 3)              return new double[] { x / metersPerUnit' y / metersPerUnit };           else              return new double[] { x / metersPerUnit' y / metersPerUnit' lonlat[2] };
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM00,The following statement contains a magic number: if(lonlat.Length < 3)              return new double[] { x / metersPerUnit' y / metersPerUnit };           else              return new double[] { x / metersPerUnit' y / metersPerUnit' lonlat[2] };
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM01,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor' 2)) / Math.Pow(semiMinor' 2);
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM01,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor' 2)) / Math.Pow(semiMinor' 2);
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM01,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor' 2)) / Math.Pow(semiMinor' 2);
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM01,The following statement contains a magic number: double h = lonlat.Length < 3 ? 0 : lonlat[2].Equals(Double.NaN) ? 0 : lonlat[2];
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM01,The following statement contains a magic number: double h = lonlat.Length < 3 ? 0 : lonlat[2].Equals(Double.NaN) ? 0 : lonlat[2];
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM01,The following statement contains a magic number: double h = lonlat.Length < 3 ? 0 : lonlat[2].Equals(Double.NaN) ? 0 : lonlat[2];
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,DTM01,The following statement contains a magic number: double v = semiMajor / Math.Sqrt(1 - es * Math.Pow(Math.Sin(lat)' 2));
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD01,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor2' 2)) / Math.Pow(semiMinor2' 2);
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD01,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor2' 2)) / Math.Pow(semiMinor2' 2);
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD01,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor2' 2)) / Math.Pow(semiMinor2' 2);
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD01,The following statement contains a magic number: double Z = pnt.Length < 3 ? 0 : pnt[2].Equals(Double.NaN) ? 0 : pnt[2];
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD01,The following statement contains a magic number: double Z = pnt.Length < 3 ? 0 : pnt[2].Equals(Double.NaN) ? 0 : pnt[2];
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD01,The following statement contains a magic number: double Z = pnt.Length < 3 ? 0 : pnt[2].Equals(Double.NaN) ? 0 : pnt[2];
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD01,The following statement contains a magic number: if(pnt[0] != 0.0)           {              lon = Math.Atan2(pnt[1]' pnt[0]);           }           else           {              if(pnt[1] > 0)              {                 lon = Math.PI / 2;              }              else                 if(pnt[1] < 0)                 {                    lon = -Math.PI * 0.5;                 }                 else                 {                    At_Pole = true;                    lon = 0.0;                    if(Z > 0.0) // north pole                    {                       lat = Math.PI * 0.5;                    }                    else                       if(Z < 0.0) // south pole                       {                          lat = -Math.PI * 0.5;                       }                       else // center of earth                       {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor2' };                       }                 }           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD01,The following statement contains a magic number: if(pnt[0] != 0.0)           {              lon = Math.Atan2(pnt[1]' pnt[0]);           }           else           {              if(pnt[1] > 0)              {                 lon = Math.PI / 2;              }              else                 if(pnt[1] < 0)                 {                    lon = -Math.PI * 0.5;                 }                 else                 {                    At_Pole = true;                    lon = 0.0;                    if(Z > 0.0) // north pole                    {                       lat = Math.PI * 0.5;                    }                    else                       if(Z < 0.0) // south pole                       {                          lat = -Math.PI * 0.5;                       }                       else // center of earth                       {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor2' };                       }                 }           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD01,The following statement contains a magic number: if(pnt[0] != 0.0)           {              lon = Math.Atan2(pnt[1]' pnt[0]);           }           else           {              if(pnt[1] > 0)              {                 lon = Math.PI / 2;              }              else                 if(pnt[1] < 0)                 {                    lon = -Math.PI * 0.5;                 }                 else                 {                    At_Pole = true;                    lon = 0.0;                    if(Z > 0.0) // north pole                    {                       lat = Math.PI * 0.5;                    }                    else                       if(Z < 0.0) // south pole                       {                          lat = -Math.PI * 0.5;                       }                       else // center of earth                       {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor2' };                       }                 }           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD01,The following statement contains a magic number: if(pnt[0] != 0.0)           {              lon = Math.Atan2(pnt[1]' pnt[0]);           }           else           {              if(pnt[1] > 0)              {                 lon = Math.PI / 2;              }              else                 if(pnt[1] < 0)                 {                    lon = -Math.PI * 0.5;                 }                 else                 {                    At_Pole = true;                    lon = 0.0;                    if(Z > 0.0) // north pole                    {                       lat = Math.PI * 0.5;                    }                    else                       if(Z < 0.0) // south pole                       {                          lat = -Math.PI * 0.5;                       }                       else // center of earth                       {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor2' };                       }                 }           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD01,The following statement contains a magic number: if(pnt[0] != 0.0)           {              lon = Math.Atan2(pnt[1]' pnt[0]);           }           else           {              if(pnt[1] > 0)              {                 lon = Math.PI / 2;              }              else                 if(pnt[1] < 0)                 {                    lon = -Math.PI * 0.5;                 }                 else                 {                    At_Pole = true;                    lon = 0.0;                    if(Z > 0.0) // north pole                    {                       lat = Math.PI * 0.5;                    }                    else                       if(Z < 0.0) // south pole                       {                          lat = -Math.PI * 0.5;                       }                       else // center of earth                       {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor2' };                       }                 }           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD01,The following statement contains a magic number: double Sin3_B0 = Math.Pow(Sin_B0' 3);
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: es = 1.0 - Math.Pow(semiMinor / semiMajor' 2);
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: long max_iter = 6;
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: for(i = 0; ; i++)           {              delta_phi = ((con + e1 * Math.Sin(2.0 * phi) - e2 * Math.Sin(4.0 * phi) + e3 * Math.Sin(6.0 * phi)) / e0) - phi;              phi += delta_phi;                if(Math.Abs(delta_phi) <= EPSLoN)                 break;                if(i >= max_iter)                 throw new ArgumentException("Latitude failed to converge");           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: for(i = 0; ; i++)           {              delta_phi = ((con + e1 * Math.Sin(2.0 * phi) - e2 * Math.Sin(4.0 * phi) + e3 * Math.Sin(6.0 * phi)) / e0) - phi;              phi += delta_phi;                if(Math.Abs(delta_phi) <= EPSLoN)                 break;                if(i >= max_iter)                 throw new ArgumentException("Latitude failed to converge");           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: for(i = 0; ; i++)           {              delta_phi = ((con + e1 * Math.Sin(2.0 * phi) - e2 * Math.Sin(4.0 * phi) + e3 * Math.Sin(6.0 * phi)) / e0) - phi;              phi += delta_phi;                if(Math.Abs(delta_phi) <= EPSLoN)                 break;                if(i >= max_iter)                 throw new ArgumentException("Latitude failed to converge");           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,GenerateExtents,The following statement contains a magic number: for(int i = 0; i <= 12; i++)           {              double res = GetTileMatrixResolution(i);              //extentMatrixMin.Add(i' new GSize(FromPixelToTileXY(LksToPixel(new double[]{ Extent.Left' Extent.Top }' res))));              //extentMatrixMax.Add(i' new GSize(FromPixelToTileXY(LksToPixel(new double[] { Extent.Right' Extent.Bottom }' res))));                extentMatrixMin.Add(i' new GSize(FromPixelToTileXY(FromLatLngToPixel(Bounds.LocationTopLeft' i))));              extentMatrixMax.Add(i' new GSize(FromPixelToTileXY(FromLatLngToPixel(Bounds.LocationRightBottom' i))));           }
Magic Number,GMap.NET.Projections,PlateCarreeProjectionDarbAe,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\PlateCarreeProjectionDarbAe.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 0.0118973050291514;              }              break;                case 1:              {                 ret = 0.0059486525145757;              }              break;                case 2:              {                 ret = 0.00297432625728785;              }              break;                case 3:              {                 ret = 0.00118973050291514;              }              break;                case 4:              {                 ret = 0.00059486525145757;              }              break;                case 5:              {                 ret = 0.000356919150874542;              }              break;                case 6:              {                 ret = 0.000178459575437271;              }              break;                case 7:              {                 ret = 0.000118973050291514;              }              break;                case 8:              {                 ret = 5.9486525145757E-05;              }              break;                case 9:              {                 ret = 3.56919150874542E-05;              }              break;                case 10:              {                 ret = 1.90356880466422E-05;              }              break;                case 11:              {                 ret = 9.51784402332112E-06;              }              break;                case 12:              {                 ret = 4.75892201166056E-06;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,PlateCarreeProjectionDarbAe,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\PlateCarreeProjectionDarbAe.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 0.0118973050291514;              }              break;                case 1:              {                 ret = 0.0059486525145757;              }              break;                case 2:              {                 ret = 0.00297432625728785;              }              break;                case 3:              {                 ret = 0.00118973050291514;              }              break;                case 4:              {                 ret = 0.00059486525145757;              }              break;                case 5:              {                 ret = 0.000356919150874542;              }              break;                case 6:              {                 ret = 0.000178459575437271;              }              break;                case 7:              {                 ret = 0.000118973050291514;              }              break;                case 8:              {                 ret = 5.9486525145757E-05;              }              break;                case 9:              {                 ret = 3.56919150874542E-05;              }              break;                case 10:              {                 ret = 1.90356880466422E-05;              }              break;                case 11:              {                 ret = 9.51784402332112E-06;              }              break;                case 12:              {                 ret = 4.75892201166056E-06;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,PlateCarreeProjectionDarbAe,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\PlateCarreeProjectionDarbAe.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 0.0118973050291514;              }              break;                case 1:              {                 ret = 0.0059486525145757;              }              break;                case 2:              {                 ret = 0.00297432625728785;              }              break;                case 3:              {                 ret = 0.00118973050291514;              }              break;                case 4:              {                 ret = 0.00059486525145757;              }              break;                case 5:              {                 ret = 0.000356919150874542;              }              break;                case 6:              {                 ret = 0.000178459575437271;              }              break;                case 7:              {                 ret = 0.000118973050291514;              }              break;                case 8:              {                 ret = 5.9486525145757E-05;              }              break;                case 9:              {                 ret = 3.56919150874542E-05;              }              break;                case 10:              {                 ret = 1.90356880466422E-05;              }              break;                case 11:              {                 ret = 9.51784402332112E-06;              }              break;                case 12:              {                 ret = 4.75892201166056E-06;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,PlateCarreeProjectionDarbAe,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\PlateCarreeProjectionDarbAe.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 0.0118973050291514;              }              break;                case 1:              {                 ret = 0.0059486525145757;              }              break;                case 2:              {                 ret = 0.00297432625728785;              }              break;                case 3:              {                 ret = 0.00118973050291514;              }              break;                case 4:              {                 ret = 0.00059486525145757;              }              break;                case 5:              {                 ret = 0.000356919150874542;              }              break;                case 6:              {                 ret = 0.000178459575437271;              }              break;                case 7:              {                 ret = 0.000118973050291514;              }              break;                case 8:              {                 ret = 5.9486525145757E-05;              }              break;                case 9:              {                 ret = 3.56919150874542E-05;              }              break;                case 10:              {                 ret = 1.90356880466422E-05;              }              break;                case 11:              {                 ret = 9.51784402332112E-06;              }              break;                case 12:              {                 ret = 4.75892201166056E-06;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,PlateCarreeProjectionDarbAe,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\PlateCarreeProjectionDarbAe.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 0.0118973050291514;              }              break;                case 1:              {                 ret = 0.0059486525145757;              }              break;                case 2:              {                 ret = 0.00297432625728785;              }              break;                case 3:              {                 ret = 0.00118973050291514;              }              break;                case 4:              {                 ret = 0.00059486525145757;              }              break;                case 5:              {                 ret = 0.000356919150874542;              }              break;                case 6:              {                 ret = 0.000178459575437271;              }              break;                case 7:              {                 ret = 0.000118973050291514;              }              break;                case 8:              {                 ret = 5.9486525145757E-05;              }              break;                case 9:              {                 ret = 3.56919150874542E-05;              }              break;                case 10:              {                 ret = 1.90356880466422E-05;              }              break;                case 11:              {                 ret = 9.51784402332112E-06;              }              break;                case 12:              {                 ret = 4.75892201166056E-06;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,PlateCarreeProjectionDarbAe,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\PlateCarreeProjectionDarbAe.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 0.0118973050291514;              }              break;                case 1:              {                 ret = 0.0059486525145757;              }              break;                case 2:              {                 ret = 0.00297432625728785;              }              break;                case 3:              {                 ret = 0.00118973050291514;              }              break;                case 4:              {                 ret = 0.00059486525145757;              }              break;                case 5:              {                 ret = 0.000356919150874542;              }              break;                case 6:              {                 ret = 0.000178459575437271;              }              break;                case 7:              {                 ret = 0.000118973050291514;              }              break;                case 8:              {                 ret = 5.9486525145757E-05;              }              break;                case 9:              {                 ret = 3.56919150874542E-05;              }              break;                case 10:              {                 ret = 1.90356880466422E-05;              }              break;                case 11:              {                 ret = 9.51784402332112E-06;              }              break;                case 12:              {                 ret = 4.75892201166056E-06;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,PlateCarreeProjectionDarbAe,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\PlateCarreeProjectionDarbAe.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 0.0118973050291514;              }              break;                case 1:              {                 ret = 0.0059486525145757;              }              break;                case 2:              {                 ret = 0.00297432625728785;              }              break;                case 3:              {                 ret = 0.00118973050291514;              }              break;                case 4:              {                 ret = 0.00059486525145757;              }              break;                case 5:              {                 ret = 0.000356919150874542;              }              break;                case 6:              {                 ret = 0.000178459575437271;              }              break;                case 7:              {                 ret = 0.000118973050291514;              }              break;                case 8:              {                 ret = 5.9486525145757E-05;              }              break;                case 9:              {                 ret = 3.56919150874542E-05;              }              break;                case 10:              {                 ret = 1.90356880466422E-05;              }              break;                case 11:              {                 ret = 9.51784402332112E-06;              }              break;                case 12:              {                 ret = 4.75892201166056E-06;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,PlateCarreeProjectionDarbAe,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\PlateCarreeProjectionDarbAe.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 0.0118973050291514;              }              break;                case 1:              {                 ret = 0.0059486525145757;              }              break;                case 2:              {                 ret = 0.00297432625728785;              }              break;                case 3:              {                 ret = 0.00118973050291514;              }              break;                case 4:              {                 ret = 0.00059486525145757;              }              break;                case 5:              {                 ret = 0.000356919150874542;              }              break;                case 6:              {                 ret = 0.000178459575437271;              }              break;                case 7:              {                 ret = 0.000118973050291514;              }              break;                case 8:              {                 ret = 5.9486525145757E-05;              }              break;                case 9:              {                 ret = 3.56919150874542E-05;              }              break;                case 10:              {                 ret = 1.90356880466422E-05;              }              break;                case 11:              {                 ret = 9.51784402332112E-06;              }              break;                case 12:              {                 ret = 4.75892201166056E-06;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,PlateCarreeProjectionDarbAe,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\PlateCarreeProjectionDarbAe.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 0.0118973050291514;              }              break;                case 1:              {                 ret = 0.0059486525145757;              }              break;                case 2:              {                 ret = 0.00297432625728785;              }              break;                case 3:              {                 ret = 0.00118973050291514;              }              break;                case 4:              {                 ret = 0.00059486525145757;              }              break;                case 5:              {                 ret = 0.000356919150874542;              }              break;                case 6:              {                 ret = 0.000178459575437271;              }              break;                case 7:              {                 ret = 0.000118973050291514;              }              break;                case 8:              {                 ret = 5.9486525145757E-05;              }              break;                case 9:              {                 ret = 3.56919150874542E-05;              }              break;                case 10:              {                 ret = 1.90356880466422E-05;              }              break;                case 11:              {                 ret = 9.51784402332112E-06;              }              break;                case 12:              {                 ret = 4.75892201166056E-06;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,PlateCarreeProjectionDarbAe,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\PlateCarreeProjectionDarbAe.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 0.0118973050291514;              }              break;                case 1:              {                 ret = 0.0059486525145757;              }              break;                case 2:              {                 ret = 0.00297432625728785;              }              break;                case 3:              {                 ret = 0.00118973050291514;              }              break;                case 4:              {                 ret = 0.00059486525145757;              }              break;                case 5:              {                 ret = 0.000356919150874542;              }              break;                case 6:              {                 ret = 0.000178459575437271;              }              break;                case 7:              {                 ret = 0.000118973050291514;              }              break;                case 8:              {                 ret = 5.9486525145757E-05;              }              break;                case 9:              {                 ret = 3.56919150874542E-05;              }              break;                case 10:              {                 ret = 1.90356880466422E-05;              }              break;                case 11:              {                 ret = 9.51784402332112E-06;              }              break;                case 12:              {                 ret = 4.75892201166056E-06;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,PlateCarreeProjectionDarbAe,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\PlateCarreeProjectionDarbAe.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 0.0118973050291514;              }              break;                case 1:              {                 ret = 0.0059486525145757;              }              break;                case 2:              {                 ret = 0.00297432625728785;              }              break;                case 3:              {                 ret = 0.00118973050291514;              }              break;                case 4:              {                 ret = 0.00059486525145757;              }              break;                case 5:              {                 ret = 0.000356919150874542;              }              break;                case 6:              {                 ret = 0.000178459575437271;              }              break;                case 7:              {                 ret = 0.000118973050291514;              }              break;                case 8:              {                 ret = 5.9486525145757E-05;              }              break;                case 9:              {                 ret = 3.56919150874542E-05;              }              break;                case 10:              {                 ret = 1.90356880466422E-05;              }              break;                case 11:              {                 ret = 9.51784402332112E-06;              }              break;                case 12:              {                 ret = 4.75892201166056E-06;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,PlateCarreeProjectionDarbAe,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\PlateCarreeProjectionDarbAe.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 0.0118973050291514;              }              break;                case 1:              {                 ret = 0.0059486525145757;              }              break;                case 2:              {                 ret = 0.00297432625728785;              }              break;                case 3:              {                 ret = 0.00118973050291514;              }              break;                case 4:              {                 ret = 0.00059486525145757;              }              break;                case 5:              {                 ret = 0.000356919150874542;              }              break;                case 6:              {                 ret = 0.000178459575437271;              }              break;                case 7:              {                 ret = 0.000118973050291514;              }              break;                case 8:              {                 ret = 5.9486525145757E-05;              }              break;                case 9:              {                 ret = 3.56919150874542E-05;              }              break;                case 10:              {                 ret = 1.90356880466422E-05;              }              break;                case 11:              {                 ret = 9.51784402332112E-06;              }              break;                case 12:              {                 ret = 4.75892201166056E-06;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,PlateCarreeProjectionDarbAe,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\PlateCarreeProjectionDarbAe.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 0.0118973050291514;              }              break;                case 1:              {                 ret = 0.0059486525145757;              }              break;                case 2:              {                 ret = 0.00297432625728785;              }              break;                case 3:              {                 ret = 0.00118973050291514;              }              break;                case 4:              {                 ret = 0.00059486525145757;              }              break;                case 5:              {                 ret = 0.000356919150874542;              }              break;                case 6:              {                 ret = 0.000178459575437271;              }              break;                case 7:              {                 ret = 0.000118973050291514;              }              break;                case 8:              {                 ret = 5.9486525145757E-05;              }              break;                case 9:              {                 ret = 3.56919150874542E-05;              }              break;                case 10:              {                 ret = 1.90356880466422E-05;              }              break;                case 11:              {                 ret = 9.51784402332112E-06;              }              break;                case 12:              {                 ret = 4.75892201166056E-06;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,PlateCarreeProjectionDarbAe,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\PlateCarreeProjectionDarbAe.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 0.0118973050291514;              }              break;                case 1:              {                 ret = 0.0059486525145757;              }              break;                case 2:              {                 ret = 0.00297432625728785;              }              break;                case 3:              {                 ret = 0.00118973050291514;              }              break;                case 4:              {                 ret = 0.00059486525145757;              }              break;                case 5:              {                 ret = 0.000356919150874542;              }              break;                case 6:              {                 ret = 0.000178459575437271;              }              break;                case 7:              {                 ret = 0.000118973050291514;              }              break;                case 8:              {                 ret = 5.9486525145757E-05;              }              break;                case 9:              {                 ret = 3.56919150874542E-05;              }              break;                case 10:              {                 ret = 1.90356880466422E-05;              }              break;                case 11:              {                 ret = 9.51784402332112E-06;              }              break;                case 12:              {                 ret = 4.75892201166056E-06;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,PlateCarreeProjectionDarbAe,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\PlateCarreeProjectionDarbAe.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 0.0118973050291514;              }              break;                case 1:              {                 ret = 0.0059486525145757;              }              break;                case 2:              {                 ret = 0.00297432625728785;              }              break;                case 3:              {                 ret = 0.00118973050291514;              }              break;                case 4:              {                 ret = 0.00059486525145757;              }              break;                case 5:              {                 ret = 0.000356919150874542;              }              break;                case 6:              {                 ret = 0.000178459575437271;              }              break;                case 7:              {                 ret = 0.000118973050291514;              }              break;                case 8:              {                 ret = 5.9486525145757E-05;              }              break;                case 9:              {                 ret = 3.56919150874542E-05;              }              break;                case 10:              {                 ret = 1.90356880466422E-05;              }              break;                case 11:              {                 ret = 9.51784402332112E-06;              }              break;                case 12:              {                 ret = 4.75892201166056E-06;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,PlateCarreeProjectionDarbAe,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\PlateCarreeProjectionDarbAe.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 0.0118973050291514;              }              break;                case 1:              {                 ret = 0.0059486525145757;              }              break;                case 2:              {                 ret = 0.00297432625728785;              }              break;                case 3:              {                 ret = 0.00118973050291514;              }              break;                case 4:              {                 ret = 0.00059486525145757;              }              break;                case 5:              {                 ret = 0.000356919150874542;              }              break;                case 6:              {                 ret = 0.000178459575437271;              }              break;                case 7:              {                 ret = 0.000118973050291514;              }              break;                case 8:              {                 ret = 5.9486525145757E-05;              }              break;                case 9:              {                 ret = 3.56919150874542E-05;              }              break;                case 10:              {                 ret = 1.90356880466422E-05;              }              break;                case 11:              {                 ret = 9.51784402332112E-06;              }              break;                case 12:              {                 ret = 4.75892201166056E-06;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,PlateCarreeProjectionDarbAe,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\PlateCarreeProjectionDarbAe.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 0.0118973050291514;              }              break;                case 1:              {                 ret = 0.0059486525145757;              }              break;                case 2:              {                 ret = 0.00297432625728785;              }              break;                case 3:              {                 ret = 0.00118973050291514;              }              break;                case 4:              {                 ret = 0.00059486525145757;              }              break;                case 5:              {                 ret = 0.000356919150874542;              }              break;                case 6:              {                 ret = 0.000178459575437271;              }              break;                case 7:              {                 ret = 0.000118973050291514;              }              break;                case 8:              {                 ret = 5.9486525145757E-05;              }              break;                case 9:              {                 ret = 3.56919150874542E-05;              }              break;                case 10:              {                 ret = 1.90356880466422E-05;              }              break;                case 11:              {                 ret = 9.51784402332112E-06;              }              break;                case 12:              {                 ret = 4.75892201166056E-06;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,PlateCarreeProjectionDarbAe,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\PlateCarreeProjectionDarbAe.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 0.0118973050291514;              }              break;                case 1:              {                 ret = 0.0059486525145757;              }              break;                case 2:              {                 ret = 0.00297432625728785;              }              break;                case 3:              {                 ret = 0.00118973050291514;              }              break;                case 4:              {                 ret = 0.00059486525145757;              }              break;                case 5:              {                 ret = 0.000356919150874542;              }              break;                case 6:              {                 ret = 0.000178459575437271;              }              break;                case 7:              {                 ret = 0.000118973050291514;              }              break;                case 8:              {                 ret = 5.9486525145757E-05;              }              break;                case 9:              {                 ret = 3.56919150874542E-05;              }              break;                case 10:              {                 ret = 1.90356880466422E-05;              }              break;                case 11:              {                 ret = 9.51784402332112E-06;              }              break;                case 12:              {                 ret = 4.75892201166056E-06;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,PlateCarreeProjectionDarbAe,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\PlateCarreeProjectionDarbAe.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 0.0118973050291514;              }              break;                case 1:              {                 ret = 0.0059486525145757;              }              break;                case 2:              {                 ret = 0.00297432625728785;              }              break;                case 3:              {                 ret = 0.00118973050291514;              }              break;                case 4:              {                 ret = 0.00059486525145757;              }              break;                case 5:              {                 ret = 0.000356919150874542;              }              break;                case 6:              {                 ret = 0.000178459575437271;              }              break;                case 7:              {                 ret = 0.000118973050291514;              }              break;                case 8:              {                 ret = 5.9486525145757E-05;              }              break;                case 9:              {                 ret = 3.56919150874542E-05;              }              break;                case 10:              {                 ret = 1.90356880466422E-05;              }              break;                case 11:              {                 ret = 9.51784402332112E-06;              }              break;                case 12:              {                 ret = 4.75892201166056E-06;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,PlateCarreeProjectionDarbAe,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\PlateCarreeProjectionDarbAe.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 0.0118973050291514;              }              break;                case 1:              {                 ret = 0.0059486525145757;              }              break;                case 2:              {                 ret = 0.00297432625728785;              }              break;                case 3:              {                 ret = 0.00118973050291514;              }              break;                case 4:              {                 ret = 0.00059486525145757;              }              break;                case 5:              {                 ret = 0.000356919150874542;              }              break;                case 6:              {                 ret = 0.000178459575437271;              }              break;                case 7:              {                 ret = 0.000118973050291514;              }              break;                case 8:              {                 ret = 5.9486525145757E-05;              }              break;                case 9:              {                 ret = 3.56919150874542E-05;              }              break;                case 10:              {                 ret = 1.90356880466422E-05;              }              break;                case 11:              {                 ret = 9.51784402332112E-06;              }              break;                case 12:              {                 ret = 4.75892201166056E-06;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,PlateCarreeProjectionDarbAe,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\PlateCarreeProjectionDarbAe.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 0.0118973050291514;              }              break;                case 1:              {                 ret = 0.0059486525145757;              }              break;                case 2:              {                 ret = 0.00297432625728785;              }              break;                case 3:              {                 ret = 0.00118973050291514;              }              break;                case 4:              {                 ret = 0.00059486525145757;              }              break;                case 5:              {                 ret = 0.000356919150874542;              }              break;                case 6:              {                 ret = 0.000178459575437271;              }              break;                case 7:              {                 ret = 0.000118973050291514;              }              break;                case 8:              {                 ret = 5.9486525145757E-05;              }              break;                case 9:              {                 ret = 3.56919150874542E-05;              }              break;                case 10:              {                 ret = 1.90356880466422E-05;              }              break;                case 11:              {                 ret = 9.51784402332112E-06;              }              break;                case 12:              {                 ret = 4.75892201166056E-06;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,PlateCarreeProjectionDarbAe,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\PlateCarreeProjectionDarbAe.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 0.0118973050291514;              }              break;                case 1:              {                 ret = 0.0059486525145757;              }              break;                case 2:              {                 ret = 0.00297432625728785;              }              break;                case 3:              {                 ret = 0.00118973050291514;              }              break;                case 4:              {                 ret = 0.00059486525145757;              }              break;                case 5:              {                 ret = 0.000356919150874542;              }              break;                case 6:              {                 ret = 0.000178459575437271;              }              break;                case 7:              {                 ret = 0.000118973050291514;              }              break;                case 8:              {                 ret = 5.9486525145757E-05;              }              break;                case 9:              {                 ret = 3.56919150874542E-05;              }              break;                case 10:              {                 ret = 1.90356880466422E-05;              }              break;                case 11:              {                 ret = 9.51784402332112E-06;              }              break;                case 12:              {                 ret = 4.75892201166056E-06;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,PlateCarreeProjectionDarbAe,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\PlateCarreeProjectionDarbAe.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 0.0118973050291514;              }              break;                case 1:              {                 ret = 0.0059486525145757;              }              break;                case 2:              {                 ret = 0.00297432625728785;              }              break;                case 3:              {                 ret = 0.00118973050291514;              }              break;                case 4:              {                 ret = 0.00059486525145757;              }              break;                case 5:              {                 ret = 0.000356919150874542;              }              break;                case 6:              {                 ret = 0.000178459575437271;              }              break;                case 7:              {                 ret = 0.000118973050291514;              }              break;                case 8:              {                 ret = 5.9486525145757E-05;              }              break;                case 9:              {                 ret = 3.56919150874542E-05;              }              break;                case 10:              {                 ret = 1.90356880466422E-05;              }              break;                case 11:              {                 ret = 9.51784402332112E-06;              }              break;                case 12:              {                 ret = 4.75892201166056E-06;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,PlateCarreeProjectionDarbAe,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\PlateCarreeProjectionDarbAe.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 0.0118973050291514;              }              break;                case 1:              {                 ret = 0.0059486525145757;              }              break;                case 2:              {                 ret = 0.00297432625728785;              }              break;                case 3:              {                 ret = 0.00118973050291514;              }              break;                case 4:              {                 ret = 0.00059486525145757;              }              break;                case 5:              {                 ret = 0.000356919150874542;              }              break;                case 6:              {                 ret = 0.000178459575437271;              }              break;                case 7:              {                 ret = 0.000118973050291514;              }              break;                case 8:              {                 ret = 5.9486525145757E-05;              }              break;                case 9:              {                 ret = 3.56919150874542E-05;              }              break;                case 10:              {                 ret = 1.90356880466422E-05;              }              break;                case 11:              {                 ret = 9.51784402332112E-06;              }              break;                case 12:              {                 ret = 4.75892201166056E-06;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM10,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor2' 2)) / Math.Pow(semiMinor2' 2);
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM10,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor2' 2)) / Math.Pow(semiMinor2' 2);
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM10,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor2' 2)) / Math.Pow(semiMinor2' 2);
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM10,The following statement contains a magic number: double h = lonlat.Length < 3 ? 0 : lonlat[2].Equals(Double.NaN) ? 0 : lonlat[2];
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM10,The following statement contains a magic number: double h = lonlat.Length < 3 ? 0 : lonlat[2].Equals(Double.NaN) ? 0 : lonlat[2];
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM10,The following statement contains a magic number: double h = lonlat.Length < 3 ? 0 : lonlat[2].Equals(Double.NaN) ? 0 : lonlat[2];
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM10,The following statement contains a magic number: double v = semiMajor / Math.Sqrt(1 - es * Math.Pow(Math.Sin(lat)' 2));
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD10,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor' 2)) / Math.Pow(semiMinor' 2);
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD10,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor' 2)) / Math.Pow(semiMinor' 2);
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD10,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor' 2)) / Math.Pow(semiMinor' 2);
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD10,The following statement contains a magic number: double Z = pnt.Length < 3 ? 0 : pnt[2].Equals(Double.NaN) ? 0 : pnt[2];
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD10,The following statement contains a magic number: double Z = pnt.Length < 3 ? 0 : pnt[2].Equals(Double.NaN) ? 0 : pnt[2];
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD10,The following statement contains a magic number: double Z = pnt.Length < 3 ? 0 : pnt[2].Equals(Double.NaN) ? 0 : pnt[2];
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD10,The following statement contains a magic number: if(pnt[0] != 0.0)           {              lon = Math.Atan2(pnt[1]' pnt[0]);           }           else           {              if(pnt[1] > 0)              {                 lon = Math.PI / 2;              }              else                 if(pnt[1] < 0)                 {                    lon = -Math.PI * 0.5;                 }                 else                 {                    AtPole = true;                    lon = 0.0;                    if(Z > 0.0) // north pole                    {                       lat = Math.PI * 0.5;                    }                    else                       if(Z < 0.0) // south pole                       {                          lat = -Math.PI * 0.5;                       }                       else // center of earth                       {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor' };                       }                 }           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD10,The following statement contains a magic number: if(pnt[0] != 0.0)           {              lon = Math.Atan2(pnt[1]' pnt[0]);           }           else           {              if(pnt[1] > 0)              {                 lon = Math.PI / 2;              }              else                 if(pnt[1] < 0)                 {                    lon = -Math.PI * 0.5;                 }                 else                 {                    AtPole = true;                    lon = 0.0;                    if(Z > 0.0) // north pole                    {                       lat = Math.PI * 0.5;                    }                    else                       if(Z < 0.0) // south pole                       {                          lat = -Math.PI * 0.5;                       }                       else // center of earth                       {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor' };                       }                 }           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD10,The following statement contains a magic number: if(pnt[0] != 0.0)           {              lon = Math.Atan2(pnt[1]' pnt[0]);           }           else           {              if(pnt[1] > 0)              {                 lon = Math.PI / 2;              }              else                 if(pnt[1] < 0)                 {                    lon = -Math.PI * 0.5;                 }                 else                 {                    AtPole = true;                    lon = 0.0;                    if(Z > 0.0) // north pole                    {                       lat = Math.PI * 0.5;                    }                    else                       if(Z < 0.0) // south pole                       {                          lat = -Math.PI * 0.5;                       }                       else // center of earth                       {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor' };                       }                 }           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD10,The following statement contains a magic number: if(pnt[0] != 0.0)           {              lon = Math.Atan2(pnt[1]' pnt[0]);           }           else           {              if(pnt[1] > 0)              {                 lon = Math.PI / 2;              }              else                 if(pnt[1] < 0)                 {                    lon = -Math.PI * 0.5;                 }                 else                 {                    AtPole = true;                    lon = 0.0;                    if(Z > 0.0) // north pole                    {                       lat = Math.PI * 0.5;                    }                    else                       if(Z < 0.0) // south pole                       {                          lat = -Math.PI * 0.5;                       }                       else // center of earth                       {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor' };                       }                 }           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD10,The following statement contains a magic number: if(pnt[0] != 0.0)           {              lon = Math.Atan2(pnt[1]' pnt[0]);           }           else           {              if(pnt[1] > 0)              {                 lon = Math.PI / 2;              }              else                 if(pnt[1] < 0)                 {                    lon = -Math.PI * 0.5;                 }                 else                 {                    AtPole = true;                    lon = 0.0;                    if(Z > 0.0) // north pole                    {                       lat = Math.PI * 0.5;                    }                    else                       if(Z < 0.0) // south pole                       {                          lat = -Math.PI * 0.5;                       }                       else // center of earth                       {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor' };                       }                 }           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD10,The following statement contains a magic number: double Sin3_B0 = Math.Pow(Sin_B0' 3);
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM00,The following statement contains a magic number: es = 1.0 - Math.Pow(semiMinor / semiMajor' 2);
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM00,The following statement contains a magic number: als = Math.Pow(al' 2);
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM00,The following statement contains a magic number: c = esp * Math.Pow(cos_phi' 2);
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM00,The following statement contains a magic number: t = Math.Pow(tq' 2);
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM00,The following statement contains a magic number: con = 1.0 - es * Math.Pow(sin_phi' 2);
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM00,The following statement contains a magic number: double x = scaleFactor * n * al * (1.0 + als / 6.0 * (1.0 - t + c + als / 20.0 *               (5.0 - 18.0 * t + Math.Pow(t' 2) + 72.0 * c - 58.0 * esp))) + falseEasting;
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM00,The following statement contains a magic number: double x = scaleFactor * n * al * (1.0 + als / 6.0 * (1.0 - t + c + als / 20.0 *               (5.0 - 18.0 * t + Math.Pow(t' 2) + 72.0 * c - 58.0 * esp))) + falseEasting;
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM00,The following statement contains a magic number: double x = scaleFactor * n * al * (1.0 + als / 6.0 * (1.0 - t + c + als / 20.0 *               (5.0 - 18.0 * t + Math.Pow(t' 2) + 72.0 * c - 58.0 * esp))) + falseEasting;
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM00,The following statement contains a magic number: double x = scaleFactor * n * al * (1.0 + als / 6.0 * (1.0 - t + c + als / 20.0 *               (5.0 - 18.0 * t + Math.Pow(t' 2) + 72.0 * c - 58.0 * esp))) + falseEasting;
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM00,The following statement contains a magic number: double x = scaleFactor * n * al * (1.0 + als / 6.0 * (1.0 - t + c + als / 20.0 *               (5.0 - 18.0 * t + Math.Pow(t' 2) + 72.0 * c - 58.0 * esp))) + falseEasting;
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM00,The following statement contains a magic number: double x = scaleFactor * n * al * (1.0 + als / 6.0 * (1.0 - t + c + als / 20.0 *               (5.0 - 18.0 * t + Math.Pow(t' 2) + 72.0 * c - 58.0 * esp))) + falseEasting;
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM00,The following statement contains a magic number: double x = scaleFactor * n * al * (1.0 + als / 6.0 * (1.0 - t + c + als / 20.0 *               (5.0 - 18.0 * t + Math.Pow(t' 2) + 72.0 * c - 58.0 * esp))) + falseEasting;
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM00,The following statement contains a magic number: if(lonlat.Length < 3)              return new double[] { x / metersPerUnit' y / metersPerUnit };           else              return new double[] { x / metersPerUnit' y / metersPerUnit' lonlat[2] };
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM00,The following statement contains a magic number: if(lonlat.Length < 3)              return new double[] { x / metersPerUnit' y / metersPerUnit };           else              return new double[] { x / metersPerUnit' y / metersPerUnit' lonlat[2] };
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM01,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor' 2)) / Math.Pow(semiMinor' 2);
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM01,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor' 2)) / Math.Pow(semiMinor' 2);
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM01,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor' 2)) / Math.Pow(semiMinor' 2);
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM01,The following statement contains a magic number: double h = lonlat.Length < 3 ? 0 : lonlat[2].Equals(Double.NaN) ? 0 : lonlat[2];
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM01,The following statement contains a magic number: double h = lonlat.Length < 3 ? 0 : lonlat[2].Equals(Double.NaN) ? 0 : lonlat[2];
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM01,The following statement contains a magic number: double h = lonlat.Length < 3 ? 0 : lonlat[2].Equals(Double.NaN) ? 0 : lonlat[2];
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,DTM01,The following statement contains a magic number: double v = semiMajor / Math.Sqrt(1 - es * Math.Pow(Math.Sin(lat)' 2));
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD01,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor2' 2)) / Math.Pow(semiMinor2' 2);
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD01,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor2' 2)) / Math.Pow(semiMinor2' 2);
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD01,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor2' 2)) / Math.Pow(semiMinor2' 2);
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD01,The following statement contains a magic number: double Z = pnt.Length < 3 ? 0 : pnt[2].Equals(Double.NaN) ? 0 : pnt[2];
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD01,The following statement contains a magic number: double Z = pnt.Length < 3 ? 0 : pnt[2].Equals(Double.NaN) ? 0 : pnt[2];
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD01,The following statement contains a magic number: double Z = pnt.Length < 3 ? 0 : pnt[2].Equals(Double.NaN) ? 0 : pnt[2];
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD01,The following statement contains a magic number: if(pnt[0] != 0.0)           {              lon = Math.Atan2(pnt[1]' pnt[0]);           }           else           {              if(pnt[1] > 0)              {                 lon = Math.PI / 2;              }              else                 if(pnt[1] < 0)                 {                    lon = -Math.PI * 0.5;                 }                 else                 {                    At_Pole = true;                    lon = 0.0;                    if(Z > 0.0) // north pole                    {                       lat = Math.PI * 0.5;                    }                    else                       if(Z < 0.0) // south pole                       {                          lat = -Math.PI * 0.5;                       }                       else // center of earth                       {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor2' };                       }                 }           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD01,The following statement contains a magic number: if(pnt[0] != 0.0)           {              lon = Math.Atan2(pnt[1]' pnt[0]);           }           else           {              if(pnt[1] > 0)              {                 lon = Math.PI / 2;              }              else                 if(pnt[1] < 0)                 {                    lon = -Math.PI * 0.5;                 }                 else                 {                    At_Pole = true;                    lon = 0.0;                    if(Z > 0.0) // north pole                    {                       lat = Math.PI * 0.5;                    }                    else                       if(Z < 0.0) // south pole                       {                          lat = -Math.PI * 0.5;                       }                       else // center of earth                       {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor2' };                       }                 }           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD01,The following statement contains a magic number: if(pnt[0] != 0.0)           {              lon = Math.Atan2(pnt[1]' pnt[0]);           }           else           {              if(pnt[1] > 0)              {                 lon = Math.PI / 2;              }              else                 if(pnt[1] < 0)                 {                    lon = -Math.PI * 0.5;                 }                 else                 {                    At_Pole = true;                    lon = 0.0;                    if(Z > 0.0) // north pole                    {                       lat = Math.PI * 0.5;                    }                    else                       if(Z < 0.0) // south pole                       {                          lat = -Math.PI * 0.5;                       }                       else // center of earth                       {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor2' };                       }                 }           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD01,The following statement contains a magic number: if(pnt[0] != 0.0)           {              lon = Math.Atan2(pnt[1]' pnt[0]);           }           else           {              if(pnt[1] > 0)              {                 lon = Math.PI / 2;              }              else                 if(pnt[1] < 0)                 {                    lon = -Math.PI * 0.5;                 }                 else                 {                    At_Pole = true;                    lon = 0.0;                    if(Z > 0.0) // north pole                    {                       lat = Math.PI * 0.5;                    }                    else                       if(Z < 0.0) // south pole                       {                          lat = -Math.PI * 0.5;                       }                       else // center of earth                       {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor2' };                       }                 }           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD01,The following statement contains a magic number: if(pnt[0] != 0.0)           {              lon = Math.Atan2(pnt[1]' pnt[0]);           }           else           {              if(pnt[1] > 0)              {                 lon = Math.PI / 2;              }              else                 if(pnt[1] < 0)                 {                    lon = -Math.PI * 0.5;                 }                 else                 {                    At_Pole = true;                    lon = 0.0;                    if(Z > 0.0) // north pole                    {                       lat = Math.PI * 0.5;                    }                    else                       if(Z < 0.0) // south pole                       {                          lat = -Math.PI * 0.5;                       }                       else // center of earth                       {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor2' };                       }                 }           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD01,The following statement contains a magic number: double Sin3_B0 = Math.Pow(Sin_B0' 3);
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: es = 1.0 - Math.Pow(semiMinor / semiMajor' 2);
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: long max_iter = 6;
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: for(i = 0; ; i++)           {              delta_phi = ((con + e1 * Math.Sin(2.0 * phi) - e2 * Math.Sin(4.0 * phi) + e3 * Math.Sin(6.0 * phi)) / e0) - phi;              phi += delta_phi;                if(Math.Abs(delta_phi) <= EPSLoN)                 break;                if(i >= max_iter)                 throw new ArgumentException("Latitude failed to converge");           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: for(i = 0; ; i++)           {              delta_phi = ((con + e1 * Math.Sin(2.0 * phi) - e2 * Math.Sin(4.0 * phi) + e3 * Math.Sin(6.0 * phi)) / e0) - phi;              phi += delta_phi;                if(Math.Abs(delta_phi) <= EPSLoN)                 break;                if(i >= max_iter)                 throw new ArgumentException("Latitude failed to converge");           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: for(i = 0; ; i++)           {              delta_phi = ((con + e1 * Math.Sin(2.0 * phi) - e2 * Math.Sin(4.0 * phi) + e3 * Math.Sin(6.0 * phi)) / e0) - phi;              phi += delta_phi;                if(Math.Abs(delta_phi) <= EPSLoN)                 break;                if(i >= max_iter)                 throw new ArgumentException("Latitude failed to converge");           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }              break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }              break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }              break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }              break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }              break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }              break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }              break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }              break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }              break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }              break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }              break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }              break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }              break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }              break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }              break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }              break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }              break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }              break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }              break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }              break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }              break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }              break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,GenerateExtents,The following statement contains a magic number: for(int i = 0; i <= 11; i++)           {              double res = GetTileMatrixResolution(i);              //extentMatrixMin.Add(i' new GSize(FromPixelToTileXY(LksToPixel(new double[]{ Extent.Left' Extent.Top }' res))));              //extentMatrixMax.Add(i' new GSize(FromPixelToTileXY(LksToPixel(new double[] { Extent.Right' Extent.Bottom }' res))));                extentMatrixMin.Add(i' new GSize(FromPixelToTileXY(FromLatLngToPixel(Bounds.LocationTopLeft' i))));              extentMatrixMax.Add(i' new GSize(FromPixelToTileXY(FromLatLngToPixel(Bounds.LocationRightBottom' i))));           }
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,getLCM,The following statement contains a magic number: if((zone < 1) || (zone > 60))           {              throw new Exception("MapyCZProjection: UTM Zone number is not between 1 and 60.");           }           else           {              return ((zone * 6) - 183);           }
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,getLCM,The following statement contains a magic number: if((zone < 1) || (zone > 60))           {              throw new Exception("MapyCZProjection: UTM Zone number is not between 1 and 60.");           }           else           {              return ((zone * 6) - 183);           }
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,getLCM,The following statement contains a magic number: if((zone < 1) || (zone > 60))           {              throw new Exception("MapyCZProjection: UTM Zone number is not between 1 and 60.");           }           else           {              return ((zone * 6) - 183);           }
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,roundoff,The following statement contains a magic number: x = Math.Round(x * Math.Pow(10' y)) / Math.Pow(10' y);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,roundoff,The following statement contains a magic number: x = Math.Round(x * Math.Pow(10' y)) / Math.Pow(10' y);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,WGSToPP,The following statement contains a magic number: var utmEE = wgsToUTM(DegreesToRadians(la)' DegreesToRadians(lo)' 33);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmEEToPP,The following statement contains a magic number: var x = (Math.Round(east) - (-3700000.0)) * Math.Pow(2' 5);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmEEToPP,The following statement contains a magic number: var x = (Math.Round(east) - (-3700000.0)) * Math.Pow(2' 5);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmEEToPP,The following statement contains a magic number: var x = (Math.Round(east) - (-3700000.0)) * Math.Pow(2' 5);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmEEToPP,The following statement contains a magic number: var y = (Math.Round(north) - (1300000.0)) * Math.Pow(2' 5);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmEEToPP,The following statement contains a magic number: var y = (Math.Round(north) - (1300000.0)) * Math.Pow(2' 5);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmEEToPP,The following statement contains a magic number: var y = (Math.Round(north) - (1300000.0)) * Math.Pow(2' 5);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var G = a * (1.0 - n) * (1.0 - n * n) * (1.0 + (9 / 4.0) * n * n + (255.0 / 64.0) * Math.Pow(n' 4)) * (PI / 180.0);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var G = a * (1.0 - n) * (1.0 - n * n) * (1.0 + (9 / 4.0) * n * n + (255.0 / 64.0) * Math.Pow(n' 4)) * (PI / 180.0);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var G = a * (1.0 - n) * (1.0 - n * n) * (1.0 + (9 / 4.0) * n * n + (255.0 / 64.0) * Math.Pow(n' 4)) * (PI / 180.0);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var G = a * (1.0 - n) * (1.0 - n * n) * (1.0 + (9 / 4.0) * n * n + (255.0 / 64.0) * Math.Pow(n' 4)) * (PI / 180.0);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var G = a * (1.0 - n) * (1.0 - n * n) * (1.0 + (9 / 4.0) * n * n + (255.0 / 64.0) * Math.Pow(n' 4)) * (PI / 180.0);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var G = a * (1.0 - n) * (1.0 - n * n) * (1.0 + (9 / 4.0) * n * n + (255.0 / 64.0) * Math.Pow(n' 4)) * (PI / 180.0);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var w = londdd - ((double) (zone * 6 - 183));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var w = londdd - ((double) (zone * 6 - 183));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var rho = a * (1.0 - e2) / Math.Pow(1.0 - (e2 * Math.Sin(latrad) * Math.Sin(latrad))' (3 / 2.0));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var rho = a * (1.0 - e2) / Math.Pow(1.0 - (e2 * Math.Sin(latrad) * Math.Sin(latrad))' (3 / 2.0));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var A0 = 1 - (e2 / 4.0) - (3 * e2 * e2 / 64.0) - (5 * Math.Pow(e2' 3) / 256.0);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var A0 = 1 - (e2 / 4.0) - (3 * e2 * e2 / 64.0) - (5 * Math.Pow(e2' 3) / 256.0);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var A0 = 1 - (e2 / 4.0) - (3 * e2 * e2 / 64.0) - (5 * Math.Pow(e2' 3) / 256.0);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var A0 = 1 - (e2 / 4.0) - (3 * e2 * e2 / 64.0) - (5 * Math.Pow(e2' 3) / 256.0);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var A0 = 1 - (e2 / 4.0) - (3 * e2 * e2 / 64.0) - (5 * Math.Pow(e2' 3) / 256.0);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var A0 = 1 - (e2 / 4.0) - (3 * e2 * e2 / 64.0) - (5 * Math.Pow(e2' 3) / 256.0);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var A2 = (3 / 8.0) * (e2 + (e2 * e2 / 4.0) + (15 * Math.Pow(e2' 3) / 128.0));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var A2 = (3 / 8.0) * (e2 + (e2 * e2 / 4.0) + (15 * Math.Pow(e2' 3) / 128.0));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var A2 = (3 / 8.0) * (e2 + (e2 * e2 / 4.0) + (15 * Math.Pow(e2' 3) / 128.0));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var A2 = (3 / 8.0) * (e2 + (e2 * e2 / 4.0) + (15 * Math.Pow(e2' 3) / 128.0));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var A2 = (3 / 8.0) * (e2 + (e2 * e2 / 4.0) + (15 * Math.Pow(e2' 3) / 128.0));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var A2 = (3 / 8.0) * (e2 + (e2 * e2 / 4.0) + (15 * Math.Pow(e2' 3) / 128.0));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var A4 = (15 / 256.0) * (e2 * e2 + (3 * Math.Pow(e2' 3) / 4.0));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var A4 = (15 / 256.0) * (e2 * e2 + (3 * Math.Pow(e2' 3) / 4.0));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var A4 = (15 / 256.0) * (e2 * e2 + (3 * Math.Pow(e2' 3) / 4.0));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var A4 = (15 / 256.0) * (e2 * e2 + (3 * Math.Pow(e2' 3) / 4.0));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var A4 = (15 / 256.0) * (e2 * e2 + (3 * Math.Pow(e2' 3) / 4.0));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var A6 = 35 * Math.Pow(e2' 3) / 3072.0;
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var A6 = 35 * Math.Pow(e2' 3) / 3072.0;
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var A6 = 35 * Math.Pow(e2' 3) / 3072.0;
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var m = a * ((A0 * latrad) - (A2 * Math.Sin(2 * latrad)) + (A4 * Math.Sin(4 * latrad)) - (A6 * Math.Sin(6 * latrad)));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var m = a * ((A0 * latrad) - (A2 * Math.Sin(2 * latrad)) + (A4 * Math.Sin(4 * latrad)) - (A6 * Math.Sin(6 * latrad)));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var m = a * ((A0 * latrad) - (A2 * Math.Sin(2 * latrad)) + (A4 * Math.Sin(4 * latrad)) - (A6 * Math.Sin(6 * latrad)));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var eterm1 = (w * w / 6.0) * coslat * coslat * (psi - t * t);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var eterm2 = (Math.Pow(w' 4) / 120.0) * Math.Pow(coslat' 4) * (4 * Math.Pow(psi' 3) * (1.0 - 6 * t * t) + psi * psi * (1.0 + 8 * t * t) - psi * 2 * t * t + Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var eterm2 = (Math.Pow(w' 4) / 120.0) * Math.Pow(coslat' 4) * (4 * Math.Pow(psi' 3) * (1.0 - 6 * t * t) + psi * psi * (1.0 + 8 * t * t) - psi * 2 * t * t + Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var eterm2 = (Math.Pow(w' 4) / 120.0) * Math.Pow(coslat' 4) * (4 * Math.Pow(psi' 3) * (1.0 - 6 * t * t) + psi * psi * (1.0 + 8 * t * t) - psi * 2 * t * t + Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var eterm2 = (Math.Pow(w' 4) / 120.0) * Math.Pow(coslat' 4) * (4 * Math.Pow(psi' 3) * (1.0 - 6 * t * t) + psi * psi * (1.0 + 8 * t * t) - psi * 2 * t * t + Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var eterm2 = (Math.Pow(w' 4) / 120.0) * Math.Pow(coslat' 4) * (4 * Math.Pow(psi' 3) * (1.0 - 6 * t * t) + psi * psi * (1.0 + 8 * t * t) - psi * 2 * t * t + Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var eterm2 = (Math.Pow(w' 4) / 120.0) * Math.Pow(coslat' 4) * (4 * Math.Pow(psi' 3) * (1.0 - 6 * t * t) + psi * psi * (1.0 + 8 * t * t) - psi * 2 * t * t + Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var eterm2 = (Math.Pow(w' 4) / 120.0) * Math.Pow(coslat' 4) * (4 * Math.Pow(psi' 3) * (1.0 - 6 * t * t) + psi * psi * (1.0 + 8 * t * t) - psi * 2 * t * t + Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var eterm2 = (Math.Pow(w' 4) / 120.0) * Math.Pow(coslat' 4) * (4 * Math.Pow(psi' 3) * (1.0 - 6 * t * t) + psi * psi * (1.0 + 8 * t * t) - psi * 2 * t * t + Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var eterm2 = (Math.Pow(w' 4) / 120.0) * Math.Pow(coslat' 4) * (4 * Math.Pow(psi' 3) * (1.0 - 6 * t * t) + psi * psi * (1.0 + 8 * t * t) - psi * 2 * t * t + Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var eterm3 = (Math.Pow(w' 6) / 5040.0) * Math.Pow(coslat' 6) * (61.0 - 479 * t * t + 179 * Math.Pow(t' 4) - Math.Pow(t' 6));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var eterm3 = (Math.Pow(w' 6) / 5040.0) * Math.Pow(coslat' 6) * (61.0 - 479 * t * t + 179 * Math.Pow(t' 4) - Math.Pow(t' 6));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var eterm3 = (Math.Pow(w' 6) / 5040.0) * Math.Pow(coslat' 6) * (61.0 - 479 * t * t + 179 * Math.Pow(t' 4) - Math.Pow(t' 6));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var eterm3 = (Math.Pow(w' 6) / 5040.0) * Math.Pow(coslat' 6) * (61.0 - 479 * t * t + 179 * Math.Pow(t' 4) - Math.Pow(t' 6));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var eterm3 = (Math.Pow(w' 6) / 5040.0) * Math.Pow(coslat' 6) * (61.0 - 479 * t * t + 179 * Math.Pow(t' 4) - Math.Pow(t' 6));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var eterm3 = (Math.Pow(w' 6) / 5040.0) * Math.Pow(coslat' 6) * (61.0 - 479 * t * t + 179 * Math.Pow(t' 4) - Math.Pow(t' 6));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var eterm3 = (Math.Pow(w' 6) / 5040.0) * Math.Pow(coslat' 6) * (61.0 - 479 * t * t + 179 * Math.Pow(t' 4) - Math.Pow(t' 6));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var eterm3 = (Math.Pow(w' 6) / 5040.0) * Math.Pow(coslat' 6) * (61.0 - 479 * t * t + 179 * Math.Pow(t' 4) - Math.Pow(t' 6));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var east = 500000.0 + (dE / UNITS);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var nterm1 = (w * w / 2.0) * nu * sinlat * coslat;
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var nterm2 = (Math.Pow(w' 4) / 24.0) * nu * sinlat * Math.Pow(coslat' 3) * (4 * psi * psi + psi - t * t);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var nterm2 = (Math.Pow(w' 4) / 24.0) * nu * sinlat * Math.Pow(coslat' 3) * (4 * psi * psi + psi - t * t);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var nterm2 = (Math.Pow(w' 4) / 24.0) * nu * sinlat * Math.Pow(coslat' 3) * (4 * psi * psi + psi - t * t);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var nterm2 = (Math.Pow(w' 4) / 24.0) * nu * sinlat * Math.Pow(coslat' 3) * (4 * psi * psi + psi - t * t);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var nterm3 = (Math.Pow(w' 6) / 720.0) * nu * sinlat * Math.Pow(coslat' 5) * (8 * Math.Pow(psi' 4) * (11.0 - 24 * t * t) - 28 * Math.Pow(psi' 3) * (1.0 - 6 * t * t) + psi * psi * (1.0 - 32 * t * t) - psi * 2 * t * t + Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var nterm3 = (Math.Pow(w' 6) / 720.0) * nu * sinlat * Math.Pow(coslat' 5) * (8 * Math.Pow(psi' 4) * (11.0 - 24 * t * t) - 28 * Math.Pow(psi' 3) * (1.0 - 6 * t * t) + psi * psi * (1.0 - 32 * t * t) - psi * 2 * t * t + Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var nterm3 = (Math.Pow(w' 6) / 720.0) * nu * sinlat * Math.Pow(coslat' 5) * (8 * Math.Pow(psi' 4) * (11.0 - 24 * t * t) - 28 * Math.Pow(psi' 3) * (1.0 - 6 * t * t) + psi * psi * (1.0 - 32 * t * t) - psi * 2 * t * t + Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var nterm3 = (Math.Pow(w' 6) / 720.0) * nu * sinlat * Math.Pow(coslat' 5) * (8 * Math.Pow(psi' 4) * (11.0 - 24 * t * t) - 28 * Math.Pow(psi' 3) * (1.0 - 6 * t * t) + psi * psi * (1.0 - 32 * t * t) - psi * 2 * t * t + Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var nterm3 = (Math.Pow(w' 6) / 720.0) * nu * sinlat * Math.Pow(coslat' 5) * (8 * Math.Pow(psi' 4) * (11.0 - 24 * t * t) - 28 * Math.Pow(psi' 3) * (1.0 - 6 * t * t) + psi * psi * (1.0 - 32 * t * t) - psi * 2 * t * t + Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var nterm3 = (Math.Pow(w' 6) / 720.0) * nu * sinlat * Math.Pow(coslat' 5) * (8 * Math.Pow(psi' 4) * (11.0 - 24 * t * t) - 28 * Math.Pow(psi' 3) * (1.0 - 6 * t * t) + psi * psi * (1.0 - 32 * t * t) - psi * 2 * t * t + Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var nterm3 = (Math.Pow(w' 6) / 720.0) * nu * sinlat * Math.Pow(coslat' 5) * (8 * Math.Pow(psi' 4) * (11.0 - 24 * t * t) - 28 * Math.Pow(psi' 3) * (1.0 - 6 * t * t) + psi * psi * (1.0 - 32 * t * t) - psi * 2 * t * t + Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var nterm3 = (Math.Pow(w' 6) / 720.0) * nu * sinlat * Math.Pow(coslat' 5) * (8 * Math.Pow(psi' 4) * (11.0 - 24 * t * t) - 28 * Math.Pow(psi' 3) * (1.0 - 6 * t * t) + psi * psi * (1.0 - 32 * t * t) - psi * 2 * t * t + Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var nterm3 = (Math.Pow(w' 6) / 720.0) * nu * sinlat * Math.Pow(coslat' 5) * (8 * Math.Pow(psi' 4) * (11.0 - 24 * t * t) - 28 * Math.Pow(psi' 3) * (1.0 - 6 * t * t) + psi * psi * (1.0 - 32 * t * t) - psi * 2 * t * t + Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var nterm3 = (Math.Pow(w' 6) / 720.0) * nu * sinlat * Math.Pow(coslat' 5) * (8 * Math.Pow(psi' 4) * (11.0 - 24 * t * t) - 28 * Math.Pow(psi' 3) * (1.0 - 6 * t * t) + psi * psi * (1.0 - 32 * t * t) - psi * 2 * t * t + Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var nterm3 = (Math.Pow(w' 6) / 720.0) * nu * sinlat * Math.Pow(coslat' 5) * (8 * Math.Pow(psi' 4) * (11.0 - 24 * t * t) - 28 * Math.Pow(psi' 3) * (1.0 - 6 * t * t) + psi * psi * (1.0 - 32 * t * t) - psi * 2 * t * t + Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var nterm3 = (Math.Pow(w' 6) / 720.0) * nu * sinlat * Math.Pow(coslat' 5) * (8 * Math.Pow(psi' 4) * (11.0 - 24 * t * t) - 28 * Math.Pow(psi' 3) * (1.0 - 6 * t * t) + psi * psi * (1.0 - 32 * t * t) - psi * 2 * t * t + Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var nterm3 = (Math.Pow(w' 6) / 720.0) * nu * sinlat * Math.Pow(coslat' 5) * (8 * Math.Pow(psi' 4) * (11.0 - 24 * t * t) - 28 * Math.Pow(psi' 3) * (1.0 - 6 * t * t) + psi * psi * (1.0 - 32 * t * t) - psi * 2 * t * t + Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var nterm4 = (Math.Pow(w' 8) / 40320.0) * nu * sinlat * Math.Pow(coslat' 7) * (1385.0 - 3111 * t * t + 543 * Math.Pow(t' 4) - Math.Pow(t' 6));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var nterm4 = (Math.Pow(w' 8) / 40320.0) * nu * sinlat * Math.Pow(coslat' 7) * (1385.0 - 3111 * t * t + 543 * Math.Pow(t' 4) - Math.Pow(t' 6));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var nterm4 = (Math.Pow(w' 8) / 40320.0) * nu * sinlat * Math.Pow(coslat' 7) * (1385.0 - 3111 * t * t + 543 * Math.Pow(t' 4) - Math.Pow(t' 6));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var nterm4 = (Math.Pow(w' 8) / 40320.0) * nu * sinlat * Math.Pow(coslat' 7) * (1385.0 - 3111 * t * t + 543 * Math.Pow(t' 4) - Math.Pow(t' 6));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var nterm4 = (Math.Pow(w' 8) / 40320.0) * nu * sinlat * Math.Pow(coslat' 7) * (1385.0 - 3111 * t * t + 543 * Math.Pow(t' 4) - Math.Pow(t' 6));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var nterm4 = (Math.Pow(w' 8) / 40320.0) * nu * sinlat * Math.Pow(coslat' 7) * (1385.0 - 3111 * t * t + 543 * Math.Pow(t' 4) - Math.Pow(t' 6));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var nterm4 = (Math.Pow(w' 8) / 40320.0) * nu * sinlat * Math.Pow(coslat' 7) * (1385.0 - 3111 * t * t + 543 * Math.Pow(t' 4) - Math.Pow(t' 6));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,wgsToUTM,The following statement contains a magic number: var nterm4 = (Math.Pow(w' 8) / 40320.0) * nu * sinlat * Math.Pow(coslat' 7) * (1385.0 - 3111 * t * t + 543 * Math.Pow(t' 4) - Math.Pow(t' 6));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,PPToWGS,The following statement contains a magic number: var ret = utmToWGS(utmEE[0]' utmEE[1]' 33);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,ppToUTMEE,The following statement contains a magic number: var north = y * Math.Pow(2' -5) + 1300000.0;
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,ppToUTMEE,The following statement contains a magic number: var north = y * Math.Pow(2' -5) + 1300000.0;
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,ppToUTMEE,The following statement contains a magic number: var north = y * Math.Pow(2' -5) + 1300000.0;
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,ppToUTMEE,The following statement contains a magic number: var east = x * Math.Pow(2' -5) + (-3700000.0);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,ppToUTMEE,The following statement contains a magic number: var east = x * Math.Pow(2' -5) + (-3700000.0);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,ppToUTMEE,The following statement contains a magic number: var east = x * Math.Pow(2' -5) + (-3700000.0);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var G = a * (1.0 - n) * (1.0 - n * n) * (1.0 + (9 / 4.0) * n * n + (255 / 64.0) * Math.Pow(n' 4)) * (PI / 180.0);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var G = a * (1.0 - n) * (1.0 - n * n) * (1.0 + (9 / 4.0) * n * n + (255 / 64.0) * Math.Pow(n' 4)) * (PI / 180.0);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var G = a * (1.0 - n) * (1.0 - n * n) * (1.0 + (9 / 4.0) * n * n + (255 / 64.0) * Math.Pow(n' 4)) * (PI / 180.0);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var G = a * (1.0 - n) * (1.0 - n * n) * (1.0 + (9 / 4.0) * n * n + (255 / 64.0) * Math.Pow(n' 4)) * (PI / 180.0);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var G = a * (1.0 - n) * (1.0 - n * n) * (1.0 + (9 / 4.0) * n * n + (255 / 64.0) * Math.Pow(n' 4)) * (PI / 180.0);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var G = a * (1.0 - n) * (1.0 - n * n) * (1.0 + (9 / 4.0) * n * n + (255 / 64.0) * Math.Pow(n' 4)) * (PI / 180.0);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var east = (eastIn - 500000.0) * UNITS;
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var sigma = (m * PI) / (180.0 * G);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var footlat = sigma + ((3 * n / 2.0) - (27 * Math.Pow(n' 3) / 32.0)) * Math.Sin(2 * sigma) + ((21 * n * n / 16.0) - (55 * Math.Pow(n' 4) / 32.0)) * Math.Sin(4 * sigma) + (151 * Math.Pow(n' 3) / 96.0) * Math.Sin(6 * sigma) + (1097 * Math.Pow(n' 4) / 512.0) * Math.Sin(8 * sigma);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var footlat = sigma + ((3 * n / 2.0) - (27 * Math.Pow(n' 3) / 32.0)) * Math.Sin(2 * sigma) + ((21 * n * n / 16.0) - (55 * Math.Pow(n' 4) / 32.0)) * Math.Sin(4 * sigma) + (151 * Math.Pow(n' 3) / 96.0) * Math.Sin(6 * sigma) + (1097 * Math.Pow(n' 4) / 512.0) * Math.Sin(8 * sigma);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var footlat = sigma + ((3 * n / 2.0) - (27 * Math.Pow(n' 3) / 32.0)) * Math.Sin(2 * sigma) + ((21 * n * n / 16.0) - (55 * Math.Pow(n' 4) / 32.0)) * Math.Sin(4 * sigma) + (151 * Math.Pow(n' 3) / 96.0) * Math.Sin(6 * sigma) + (1097 * Math.Pow(n' 4) / 512.0) * Math.Sin(8 * sigma);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var footlat = sigma + ((3 * n / 2.0) - (27 * Math.Pow(n' 3) / 32.0)) * Math.Sin(2 * sigma) + ((21 * n * n / 16.0) - (55 * Math.Pow(n' 4) / 32.0)) * Math.Sin(4 * sigma) + (151 * Math.Pow(n' 3) / 96.0) * Math.Sin(6 * sigma) + (1097 * Math.Pow(n' 4) / 512.0) * Math.Sin(8 * sigma);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var footlat = sigma + ((3 * n / 2.0) - (27 * Math.Pow(n' 3) / 32.0)) * Math.Sin(2 * sigma) + ((21 * n * n / 16.0) - (55 * Math.Pow(n' 4) / 32.0)) * Math.Sin(4 * sigma) + (151 * Math.Pow(n' 3) / 96.0) * Math.Sin(6 * sigma) + (1097 * Math.Pow(n' 4) / 512.0) * Math.Sin(8 * sigma);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var footlat = sigma + ((3 * n / 2.0) - (27 * Math.Pow(n' 3) / 32.0)) * Math.Sin(2 * sigma) + ((21 * n * n / 16.0) - (55 * Math.Pow(n' 4) / 32.0)) * Math.Sin(4 * sigma) + (151 * Math.Pow(n' 3) / 96.0) * Math.Sin(6 * sigma) + (1097 * Math.Pow(n' 4) / 512.0) * Math.Sin(8 * sigma);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var footlat = sigma + ((3 * n / 2.0) - (27 * Math.Pow(n' 3) / 32.0)) * Math.Sin(2 * sigma) + ((21 * n * n / 16.0) - (55 * Math.Pow(n' 4) / 32.0)) * Math.Sin(4 * sigma) + (151 * Math.Pow(n' 3) / 96.0) * Math.Sin(6 * sigma) + (1097 * Math.Pow(n' 4) / 512.0) * Math.Sin(8 * sigma);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var footlat = sigma + ((3 * n / 2.0) - (27 * Math.Pow(n' 3) / 32.0)) * Math.Sin(2 * sigma) + ((21 * n * n / 16.0) - (55 * Math.Pow(n' 4) / 32.0)) * Math.Sin(4 * sigma) + (151 * Math.Pow(n' 3) / 96.0) * Math.Sin(6 * sigma) + (1097 * Math.Pow(n' 4) / 512.0) * Math.Sin(8 * sigma);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var footlat = sigma + ((3 * n / 2.0) - (27 * Math.Pow(n' 3) / 32.0)) * Math.Sin(2 * sigma) + ((21 * n * n / 16.0) - (55 * Math.Pow(n' 4) / 32.0)) * Math.Sin(4 * sigma) + (151 * Math.Pow(n' 3) / 96.0) * Math.Sin(6 * sigma) + (1097 * Math.Pow(n' 4) / 512.0) * Math.Sin(8 * sigma);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var footlat = sigma + ((3 * n / 2.0) - (27 * Math.Pow(n' 3) / 32.0)) * Math.Sin(2 * sigma) + ((21 * n * n / 16.0) - (55 * Math.Pow(n' 4) / 32.0)) * Math.Sin(4 * sigma) + (151 * Math.Pow(n' 3) / 96.0) * Math.Sin(6 * sigma) + (1097 * Math.Pow(n' 4) / 512.0) * Math.Sin(8 * sigma);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var footlat = sigma + ((3 * n / 2.0) - (27 * Math.Pow(n' 3) / 32.0)) * Math.Sin(2 * sigma) + ((21 * n * n / 16.0) - (55 * Math.Pow(n' 4) / 32.0)) * Math.Sin(4 * sigma) + (151 * Math.Pow(n' 3) / 96.0) * Math.Sin(6 * sigma) + (1097 * Math.Pow(n' 4) / 512.0) * Math.Sin(8 * sigma);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var footlat = sigma + ((3 * n / 2.0) - (27 * Math.Pow(n' 3) / 32.0)) * Math.Sin(2 * sigma) + ((21 * n * n / 16.0) - (55 * Math.Pow(n' 4) / 32.0)) * Math.Sin(4 * sigma) + (151 * Math.Pow(n' 3) / 96.0) * Math.Sin(6 * sigma) + (1097 * Math.Pow(n' 4) / 512.0) * Math.Sin(8 * sigma);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var footlat = sigma + ((3 * n / 2.0) - (27 * Math.Pow(n' 3) / 32.0)) * Math.Sin(2 * sigma) + ((21 * n * n / 16.0) - (55 * Math.Pow(n' 4) / 32.0)) * Math.Sin(4 * sigma) + (151 * Math.Pow(n' 3) / 96.0) * Math.Sin(6 * sigma) + (1097 * Math.Pow(n' 4) / 512.0) * Math.Sin(8 * sigma);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var footlat = sigma + ((3 * n / 2.0) - (27 * Math.Pow(n' 3) / 32.0)) * Math.Sin(2 * sigma) + ((21 * n * n / 16.0) - (55 * Math.Pow(n' 4) / 32.0)) * Math.Sin(4 * sigma) + (151 * Math.Pow(n' 3) / 96.0) * Math.Sin(6 * sigma) + (1097 * Math.Pow(n' 4) / 512.0) * Math.Sin(8 * sigma);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var footlat = sigma + ((3 * n / 2.0) - (27 * Math.Pow(n' 3) / 32.0)) * Math.Sin(2 * sigma) + ((21 * n * n / 16.0) - (55 * Math.Pow(n' 4) / 32.0)) * Math.Sin(4 * sigma) + (151 * Math.Pow(n' 3) / 96.0) * Math.Sin(6 * sigma) + (1097 * Math.Pow(n' 4) / 512.0) * Math.Sin(8 * sigma);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var footlat = sigma + ((3 * n / 2.0) - (27 * Math.Pow(n' 3) / 32.0)) * Math.Sin(2 * sigma) + ((21 * n * n / 16.0) - (55 * Math.Pow(n' 4) / 32.0)) * Math.Sin(4 * sigma) + (151 * Math.Pow(n' 3) / 96.0) * Math.Sin(6 * sigma) + (1097 * Math.Pow(n' 4) / 512.0) * Math.Sin(8 * sigma);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var footlat = sigma + ((3 * n / 2.0) - (27 * Math.Pow(n' 3) / 32.0)) * Math.Sin(2 * sigma) + ((21 * n * n / 16.0) - (55 * Math.Pow(n' 4) / 32.0)) * Math.Sin(4 * sigma) + (151 * Math.Pow(n' 3) / 96.0) * Math.Sin(6 * sigma) + (1097 * Math.Pow(n' 4) / 512.0) * Math.Sin(8 * sigma);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var footlat = sigma + ((3 * n / 2.0) - (27 * Math.Pow(n' 3) / 32.0)) * Math.Sin(2 * sigma) + ((21 * n * n / 16.0) - (55 * Math.Pow(n' 4) / 32.0)) * Math.Sin(4 * sigma) + (151 * Math.Pow(n' 3) / 96.0) * Math.Sin(6 * sigma) + (1097 * Math.Pow(n' 4) / 512.0) * Math.Sin(8 * sigma);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var footlat = sigma + ((3 * n / 2.0) - (27 * Math.Pow(n' 3) / 32.0)) * Math.Sin(2 * sigma) + ((21 * n * n / 16.0) - (55 * Math.Pow(n' 4) / 32.0)) * Math.Sin(4 * sigma) + (151 * Math.Pow(n' 3) / 96.0) * Math.Sin(6 * sigma) + (1097 * Math.Pow(n' 4) / 512.0) * Math.Sin(8 * sigma);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var footlat = sigma + ((3 * n / 2.0) - (27 * Math.Pow(n' 3) / 32.0)) * Math.Sin(2 * sigma) + ((21 * n * n / 16.0) - (55 * Math.Pow(n' 4) / 32.0)) * Math.Sin(4 * sigma) + (151 * Math.Pow(n' 3) / 96.0) * Math.Sin(6 * sigma) + (1097 * Math.Pow(n' 4) / 512.0) * Math.Sin(8 * sigma);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var rho = a * (1.0 - e2) / Math.Pow(1.0 - (e2 * Math.Sin(footlat) * Math.Sin(footlat))' (3 / 2.0));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var rho = a * (1.0 - e2) / Math.Pow(1.0 - (e2 * Math.Sin(footlat) * Math.Sin(footlat))' (3 / 2.0));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm1 = (t / (k * rho)) * (east * x / 2.0);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm2 = (t / (k * rho)) * (east * Math.Pow(x' 3) / 24.0) * (-4 * psi * psi + 9 * psi * (1 - t * t) + 12 * t * t);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm2 = (t / (k * rho)) * (east * Math.Pow(x' 3) / 24.0) * (-4 * psi * psi + 9 * psi * (1 - t * t) + 12 * t * t);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm2 = (t / (k * rho)) * (east * Math.Pow(x' 3) / 24.0) * (-4 * psi * psi + 9 * psi * (1 - t * t) + 12 * t * t);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm2 = (t / (k * rho)) * (east * Math.Pow(x' 3) / 24.0) * (-4 * psi * psi + 9 * psi * (1 - t * t) + 12 * t * t);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm2 = (t / (k * rho)) * (east * Math.Pow(x' 3) / 24.0) * (-4 * psi * psi + 9 * psi * (1 - t * t) + 12 * t * t);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm3 = (t / (k * rho)) * (east * Math.Pow(x' 5) / 720.0) * (8 * Math.Pow(psi' 4) * (11 - 24 * t * t) - 12 * Math.Pow(psi' 3) * (21.0 - 71 * t * t) + 15 * psi * psi * (15.0 - 98 * t * t + 15 * Math.Pow(t' 4)) + 180 * psi * (5 * t * t - 3 * Math.Pow(t' 4)) + 360 * Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm3 = (t / (k * rho)) * (east * Math.Pow(x' 5) / 720.0) * (8 * Math.Pow(psi' 4) * (11 - 24 * t * t) - 12 * Math.Pow(psi' 3) * (21.0 - 71 * t * t) + 15 * psi * psi * (15.0 - 98 * t * t + 15 * Math.Pow(t' 4)) + 180 * psi * (5 * t * t - 3 * Math.Pow(t' 4)) + 360 * Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm3 = (t / (k * rho)) * (east * Math.Pow(x' 5) / 720.0) * (8 * Math.Pow(psi' 4) * (11 - 24 * t * t) - 12 * Math.Pow(psi' 3) * (21.0 - 71 * t * t) + 15 * psi * psi * (15.0 - 98 * t * t + 15 * Math.Pow(t' 4)) + 180 * psi * (5 * t * t - 3 * Math.Pow(t' 4)) + 360 * Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm3 = (t / (k * rho)) * (east * Math.Pow(x' 5) / 720.0) * (8 * Math.Pow(psi' 4) * (11 - 24 * t * t) - 12 * Math.Pow(psi' 3) * (21.0 - 71 * t * t) + 15 * psi * psi * (15.0 - 98 * t * t + 15 * Math.Pow(t' 4)) + 180 * psi * (5 * t * t - 3 * Math.Pow(t' 4)) + 360 * Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm3 = (t / (k * rho)) * (east * Math.Pow(x' 5) / 720.0) * (8 * Math.Pow(psi' 4) * (11 - 24 * t * t) - 12 * Math.Pow(psi' 3) * (21.0 - 71 * t * t) + 15 * psi * psi * (15.0 - 98 * t * t + 15 * Math.Pow(t' 4)) + 180 * psi * (5 * t * t - 3 * Math.Pow(t' 4)) + 360 * Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm3 = (t / (k * rho)) * (east * Math.Pow(x' 5) / 720.0) * (8 * Math.Pow(psi' 4) * (11 - 24 * t * t) - 12 * Math.Pow(psi' 3) * (21.0 - 71 * t * t) + 15 * psi * psi * (15.0 - 98 * t * t + 15 * Math.Pow(t' 4)) + 180 * psi * (5 * t * t - 3 * Math.Pow(t' 4)) + 360 * Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm3 = (t / (k * rho)) * (east * Math.Pow(x' 5) / 720.0) * (8 * Math.Pow(psi' 4) * (11 - 24 * t * t) - 12 * Math.Pow(psi' 3) * (21.0 - 71 * t * t) + 15 * psi * psi * (15.0 - 98 * t * t + 15 * Math.Pow(t' 4)) + 180 * psi * (5 * t * t - 3 * Math.Pow(t' 4)) + 360 * Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm3 = (t / (k * rho)) * (east * Math.Pow(x' 5) / 720.0) * (8 * Math.Pow(psi' 4) * (11 - 24 * t * t) - 12 * Math.Pow(psi' 3) * (21.0 - 71 * t * t) + 15 * psi * psi * (15.0 - 98 * t * t + 15 * Math.Pow(t' 4)) + 180 * psi * (5 * t * t - 3 * Math.Pow(t' 4)) + 360 * Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm3 = (t / (k * rho)) * (east * Math.Pow(x' 5) / 720.0) * (8 * Math.Pow(psi' 4) * (11 - 24 * t * t) - 12 * Math.Pow(psi' 3) * (21.0 - 71 * t * t) + 15 * psi * psi * (15.0 - 98 * t * t + 15 * Math.Pow(t' 4)) + 180 * psi * (5 * t * t - 3 * Math.Pow(t' 4)) + 360 * Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm3 = (t / (k * rho)) * (east * Math.Pow(x' 5) / 720.0) * (8 * Math.Pow(psi' 4) * (11 - 24 * t * t) - 12 * Math.Pow(psi' 3) * (21.0 - 71 * t * t) + 15 * psi * psi * (15.0 - 98 * t * t + 15 * Math.Pow(t' 4)) + 180 * psi * (5 * t * t - 3 * Math.Pow(t' 4)) + 360 * Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm3 = (t / (k * rho)) * (east * Math.Pow(x' 5) / 720.0) * (8 * Math.Pow(psi' 4) * (11 - 24 * t * t) - 12 * Math.Pow(psi' 3) * (21.0 - 71 * t * t) + 15 * psi * psi * (15.0 - 98 * t * t + 15 * Math.Pow(t' 4)) + 180 * psi * (5 * t * t - 3 * Math.Pow(t' 4)) + 360 * Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm3 = (t / (k * rho)) * (east * Math.Pow(x' 5) / 720.0) * (8 * Math.Pow(psi' 4) * (11 - 24 * t * t) - 12 * Math.Pow(psi' 3) * (21.0 - 71 * t * t) + 15 * psi * psi * (15.0 - 98 * t * t + 15 * Math.Pow(t' 4)) + 180 * psi * (5 * t * t - 3 * Math.Pow(t' 4)) + 360 * Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm3 = (t / (k * rho)) * (east * Math.Pow(x' 5) / 720.0) * (8 * Math.Pow(psi' 4) * (11 - 24 * t * t) - 12 * Math.Pow(psi' 3) * (21.0 - 71 * t * t) + 15 * psi * psi * (15.0 - 98 * t * t + 15 * Math.Pow(t' 4)) + 180 * psi * (5 * t * t - 3 * Math.Pow(t' 4)) + 360 * Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm3 = (t / (k * rho)) * (east * Math.Pow(x' 5) / 720.0) * (8 * Math.Pow(psi' 4) * (11 - 24 * t * t) - 12 * Math.Pow(psi' 3) * (21.0 - 71 * t * t) + 15 * psi * psi * (15.0 - 98 * t * t + 15 * Math.Pow(t' 4)) + 180 * psi * (5 * t * t - 3 * Math.Pow(t' 4)) + 360 * Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm3 = (t / (k * rho)) * (east * Math.Pow(x' 5) / 720.0) * (8 * Math.Pow(psi' 4) * (11 - 24 * t * t) - 12 * Math.Pow(psi' 3) * (21.0 - 71 * t * t) + 15 * psi * psi * (15.0 - 98 * t * t + 15 * Math.Pow(t' 4)) + 180 * psi * (5 * t * t - 3 * Math.Pow(t' 4)) + 360 * Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm3 = (t / (k * rho)) * (east * Math.Pow(x' 5) / 720.0) * (8 * Math.Pow(psi' 4) * (11 - 24 * t * t) - 12 * Math.Pow(psi' 3) * (21.0 - 71 * t * t) + 15 * psi * psi * (15.0 - 98 * t * t + 15 * Math.Pow(t' 4)) + 180 * psi * (5 * t * t - 3 * Math.Pow(t' 4)) + 360 * Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm3 = (t / (k * rho)) * (east * Math.Pow(x' 5) / 720.0) * (8 * Math.Pow(psi' 4) * (11 - 24 * t * t) - 12 * Math.Pow(psi' 3) * (21.0 - 71 * t * t) + 15 * psi * psi * (15.0 - 98 * t * t + 15 * Math.Pow(t' 4)) + 180 * psi * (5 * t * t - 3 * Math.Pow(t' 4)) + 360 * Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm3 = (t / (k * rho)) * (east * Math.Pow(x' 5) / 720.0) * (8 * Math.Pow(psi' 4) * (11 - 24 * t * t) - 12 * Math.Pow(psi' 3) * (21.0 - 71 * t * t) + 15 * psi * psi * (15.0 - 98 * t * t + 15 * Math.Pow(t' 4)) + 180 * psi * (5 * t * t - 3 * Math.Pow(t' 4)) + 360 * Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm3 = (t / (k * rho)) * (east * Math.Pow(x' 5) / 720.0) * (8 * Math.Pow(psi' 4) * (11 - 24 * t * t) - 12 * Math.Pow(psi' 3) * (21.0 - 71 * t * t) + 15 * psi * psi * (15.0 - 98 * t * t + 15 * Math.Pow(t' 4)) + 180 * psi * (5 * t * t - 3 * Math.Pow(t' 4)) + 360 * Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm3 = (t / (k * rho)) * (east * Math.Pow(x' 5) / 720.0) * (8 * Math.Pow(psi' 4) * (11 - 24 * t * t) - 12 * Math.Pow(psi' 3) * (21.0 - 71 * t * t) + 15 * psi * psi * (15.0 - 98 * t * t + 15 * Math.Pow(t' 4)) + 180 * psi * (5 * t * t - 3 * Math.Pow(t' 4)) + 360 * Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm3 = (t / (k * rho)) * (east * Math.Pow(x' 5) / 720.0) * (8 * Math.Pow(psi' 4) * (11 - 24 * t * t) - 12 * Math.Pow(psi' 3) * (21.0 - 71 * t * t) + 15 * psi * psi * (15.0 - 98 * t * t + 15 * Math.Pow(t' 4)) + 180 * psi * (5 * t * t - 3 * Math.Pow(t' 4)) + 360 * Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm4 = (t / (k * rho)) * (east * Math.Pow(x' 7) / 40320.0) * (1385.0 + 3633 * t * t + 4095 * Math.Pow(t' 4) + 1575 * Math.Pow(t' 6));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm4 = (t / (k * rho)) * (east * Math.Pow(x' 7) / 40320.0) * (1385.0 + 3633 * t * t + 4095 * Math.Pow(t' 4) + 1575 * Math.Pow(t' 6));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm4 = (t / (k * rho)) * (east * Math.Pow(x' 7) / 40320.0) * (1385.0 + 3633 * t * t + 4095 * Math.Pow(t' 4) + 1575 * Math.Pow(t' 6));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm4 = (t / (k * rho)) * (east * Math.Pow(x' 7) / 40320.0) * (1385.0 + 3633 * t * t + 4095 * Math.Pow(t' 4) + 1575 * Math.Pow(t' 6));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm4 = (t / (k * rho)) * (east * Math.Pow(x' 7) / 40320.0) * (1385.0 + 3633 * t * t + 4095 * Math.Pow(t' 4) + 1575 * Math.Pow(t' 6));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm4 = (t / (k * rho)) * (east * Math.Pow(x' 7) / 40320.0) * (1385.0 + 3633 * t * t + 4095 * Math.Pow(t' 4) + 1575 * Math.Pow(t' 6));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm4 = (t / (k * rho)) * (east * Math.Pow(x' 7) / 40320.0) * (1385.0 + 3633 * t * t + 4095 * Math.Pow(t' 4) + 1575 * Math.Pow(t' 6));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var laterm4 = (t / (k * rho)) * (east * Math.Pow(x' 7) / 40320.0) * (1385.0 + 3633 * t * t + 4095 * Math.Pow(t' 4) + 1575 * Math.Pow(t' 6));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var loterm2 = (Math.Pow(x' 3) / 6.0) * seclat * (psi + 2 * t * t);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var loterm2 = (Math.Pow(x' 3) / 6.0) * seclat * (psi + 2 * t * t);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var loterm2 = (Math.Pow(x' 3) / 6.0) * seclat * (psi + 2 * t * t);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var loterm3 = (Math.Pow(x' 5) / 120.0) * seclat * (-4 * Math.Pow(psi' 3) * (1 - 6 * t * t) + psi * psi * (9 - 68 * t * t) + 72 * psi * t * t + 24 * Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var loterm3 = (Math.Pow(x' 5) / 120.0) * seclat * (-4 * Math.Pow(psi' 3) * (1 - 6 * t * t) + psi * psi * (9 - 68 * t * t) + 72 * psi * t * t + 24 * Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var loterm3 = (Math.Pow(x' 5) / 120.0) * seclat * (-4 * Math.Pow(psi' 3) * (1 - 6 * t * t) + psi * psi * (9 - 68 * t * t) + 72 * psi * t * t + 24 * Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var loterm3 = (Math.Pow(x' 5) / 120.0) * seclat * (-4 * Math.Pow(psi' 3) * (1 - 6 * t * t) + psi * psi * (9 - 68 * t * t) + 72 * psi * t * t + 24 * Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var loterm3 = (Math.Pow(x' 5) / 120.0) * seclat * (-4 * Math.Pow(psi' 3) * (1 - 6 * t * t) + psi * psi * (9 - 68 * t * t) + 72 * psi * t * t + 24 * Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var loterm3 = (Math.Pow(x' 5) / 120.0) * seclat * (-4 * Math.Pow(psi' 3) * (1 - 6 * t * t) + psi * psi * (9 - 68 * t * t) + 72 * psi * t * t + 24 * Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var loterm3 = (Math.Pow(x' 5) / 120.0) * seclat * (-4 * Math.Pow(psi' 3) * (1 - 6 * t * t) + psi * psi * (9 - 68 * t * t) + 72 * psi * t * t + 24 * Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var loterm3 = (Math.Pow(x' 5) / 120.0) * seclat * (-4 * Math.Pow(psi' 3) * (1 - 6 * t * t) + psi * psi * (9 - 68 * t * t) + 72 * psi * t * t + 24 * Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var loterm3 = (Math.Pow(x' 5) / 120.0) * seclat * (-4 * Math.Pow(psi' 3) * (1 - 6 * t * t) + psi * psi * (9 - 68 * t * t) + 72 * psi * t * t + 24 * Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var loterm3 = (Math.Pow(x' 5) / 120.0) * seclat * (-4 * Math.Pow(psi' 3) * (1 - 6 * t * t) + psi * psi * (9 - 68 * t * t) + 72 * psi * t * t + 24 * Math.Pow(t' 4));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var loterm4 = (Math.Pow(x' 7) / 5040.0) * seclat * (61.0 + 662 * t * t + 1320 * Math.Pow(t' 4) + 720 * Math.Pow(t' 6));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var loterm4 = (Math.Pow(x' 7) / 5040.0) * seclat * (61.0 + 662 * t * t + 1320 * Math.Pow(t' 4) + 720 * Math.Pow(t' 6));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var loterm4 = (Math.Pow(x' 7) / 5040.0) * seclat * (61.0 + 662 * t * t + 1320 * Math.Pow(t' 4) + 720 * Math.Pow(t' 6));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var loterm4 = (Math.Pow(x' 7) / 5040.0) * seclat * (61.0 + 662 * t * t + 1320 * Math.Pow(t' 4) + 720 * Math.Pow(t' 6));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var loterm4 = (Math.Pow(x' 7) / 5040.0) * seclat * (61.0 + 662 * t * t + 1320 * Math.Pow(t' 4) + 720 * Math.Pow(t' 6));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var loterm4 = (Math.Pow(x' 7) / 5040.0) * seclat * (61.0 + 662 * t * t + 1320 * Math.Pow(t' 4) + 720 * Math.Pow(t' 6));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var loterm4 = (Math.Pow(x' 7) / 5040.0) * seclat * (61.0 + 662 * t * t + 1320 * Math.Pow(t' 4) + 720 * Math.Pow(t' 6));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,utmToWGS,The following statement contains a magic number: var loterm4 = (Math.Pow(x' 7) / 5040.0) * seclat * (61.0 + 662 * t * t + 1320 * Math.Pow(t' 4) + 720 * Math.Pow(t' 6));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,FromLatLngToPixel,The following statement contains a magic number: {              var l = WGSToPP(lat' lng);              ret.X = (long)l[0] >> (20 - zoom);              ret.Y = size.Height - ((long)l[1] >> (20 - zoom));           }
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,FromLatLngToPixel,The following statement contains a magic number: {              var l = WGSToPP(lat' lng);              ret.X = (long)l[0] >> (20 - zoom);              ret.Y = size.Height - ((long)l[1] >> (20 - zoom));           }
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,FromPixelToLatLng,The following statement contains a magic number: var oX = x << (20 - zoom);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,FromPixelToLatLng,The following statement contains a magic number: var oY = (size.Height - y) << (20 - zoom);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,GetTileMatrixSizeXY,The following statement contains a magic number: return new GSize((long)Math.Pow(2' zoom)' (long)Math.Pow(2' zoom));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,GetTileMatrixSizeXY,The following statement contains a magic number: return new GSize((long)Math.Pow(2' zoom)' (long)Math.Pow(2' zoom));
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,GetTileMatrixSizePixel,The following statement contains a magic number: return new GSize(s.Width << 8' s.Height << 8);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,GetTileMatrixSizePixel,The following statement contains a magic number: return new GSize(s.Width << 8' s.Height << 8);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,GetTileMatrixMinXY,The following statement contains a magic number: long wh = zoom > 3 ? (3 * (long)Math.Pow(2' zoom - 4)) : 1;
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,GetTileMatrixMinXY,The following statement contains a magic number: long wh = zoom > 3 ? (3 * (long)Math.Pow(2' zoom - 4)) : 1;
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,GetTileMatrixMinXY,The following statement contains a magic number: long wh = zoom > 3 ? (3 * (long)Math.Pow(2' zoom - 4)) : 1;
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,GetTileMatrixMinXY,The following statement contains a magic number: long wh = zoom > 3 ? (3 * (long)Math.Pow(2' zoom - 4)) : 1;
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,GetTileMatrixMaxXY,The following statement contains a magic number: long wh = (long)Math.Pow(2' zoom) - (long)Math.Pow(2' zoom - 2);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,GetTileMatrixMaxXY,The following statement contains a magic number: long wh = (long)Math.Pow(2' zoom) - (long)Math.Pow(2' zoom - 2);
Magic Number,GMap.NET.Projections,MapyCZProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapyCZProjection.cs,GetTileMatrixMaxXY,The following statement contains a magic number: long wh = (long)Math.Pow(2' zoom) - (long)Math.Pow(2' zoom - 2);
Magic Number,GMap.NET.Projections,MercatorProjectionYandex,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjectionYandex.cs,FromLatLngToPixel,The following statement contains a magic number: double a = 6378137;
Magic Number,GMap.NET.Projections,MercatorProjectionYandex,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjectionYandex.cs,FromLatLngToPixel,The following statement contains a magic number: double k = 0.0818191908426;
Magic Number,GMap.NET.Projections,MercatorProjectionYandex,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjectionYandex.cs,FromLatLngToPixel,The following statement contains a magic number: double z = Math.Tan(MathPiDiv4 + rLat / 2) / Math.Pow((Math.Tan(MathPiDiv4 + Math.Asin(k * Math.Sin(rLat)) / 2))' k);
Magic Number,GMap.NET.Projections,MercatorProjectionYandex,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjectionYandex.cs,FromLatLngToPixel,The following statement contains a magic number: double z = Math.Tan(MathPiDiv4 + rLat / 2) / Math.Pow((Math.Tan(MathPiDiv4 + Math.Asin(k * Math.Sin(rLat)) / 2))' k);
Magic Number,GMap.NET.Projections,MercatorProjectionYandex,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjectionYandex.cs,FromLatLngToPixel,The following statement contains a magic number: double z1 = Math.Pow(2' 23 - zoom);
Magic Number,GMap.NET.Projections,MercatorProjectionYandex,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjectionYandex.cs,FromLatLngToPixel,The following statement contains a magic number: double z1 = Math.Pow(2' 23 - zoom);
Magic Number,GMap.NET.Projections,MercatorProjectionYandex,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjectionYandex.cs,FromLatLngToPixel,The following statement contains a magic number: double DX = ((20037508.342789 + a * rLon) * 53.5865938 / z1);
Magic Number,GMap.NET.Projections,MercatorProjectionYandex,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjectionYandex.cs,FromLatLngToPixel,The following statement contains a magic number: double DX = ((20037508.342789 + a * rLon) * 53.5865938 / z1);
Magic Number,GMap.NET.Projections,MercatorProjectionYandex,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjectionYandex.cs,FromLatLngToPixel,The following statement contains a magic number: double DY = ((20037508.342789 - a * Math.Log(z)) * 53.5865938 / z1);
Magic Number,GMap.NET.Projections,MercatorProjectionYandex,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjectionYandex.cs,FromLatLngToPixel,The following statement contains a magic number: double DY = ((20037508.342789 - a * Math.Log(z)) * 53.5865938 / z1);
Magic Number,GMap.NET.Projections,MercatorProjectionYandex,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjectionYandex.cs,FromPixelToLatLng,The following statement contains a magic number: double a = 6378137;
Magic Number,GMap.NET.Projections,MercatorProjectionYandex,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjectionYandex.cs,FromPixelToLatLng,The following statement contains a magic number: double c1 = 0.00335655146887969;
Magic Number,GMap.NET.Projections,MercatorProjectionYandex,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjectionYandex.cs,FromPixelToLatLng,The following statement contains a magic number: double c2 = 0.00000657187271079536;
Magic Number,GMap.NET.Projections,MercatorProjectionYandex,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjectionYandex.cs,FromPixelToLatLng,The following statement contains a magic number: double c3 = 0.00000001764564338702;
Magic Number,GMap.NET.Projections,MercatorProjectionYandex,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjectionYandex.cs,FromPixelToLatLng,The following statement contains a magic number: double c4 = 0.00000000005328478445;
Magic Number,GMap.NET.Projections,MercatorProjectionYandex,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjectionYandex.cs,FromPixelToLatLng,The following statement contains a magic number: double z1 = (23 - zoom);
Magic Number,GMap.NET.Projections,MercatorProjectionYandex,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjectionYandex.cs,FromPixelToLatLng,The following statement contains a magic number: double mercX = (x * Math.Pow(2' z1)) / 53.5865938 - 20037508.342789;
Magic Number,GMap.NET.Projections,MercatorProjectionYandex,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjectionYandex.cs,FromPixelToLatLng,The following statement contains a magic number: double mercX = (x * Math.Pow(2' z1)) / 53.5865938 - 20037508.342789;
Magic Number,GMap.NET.Projections,MercatorProjectionYandex,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjectionYandex.cs,FromPixelToLatLng,The following statement contains a magic number: double mercX = (x * Math.Pow(2' z1)) / 53.5865938 - 20037508.342789;
Magic Number,GMap.NET.Projections,MercatorProjectionYandex,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjectionYandex.cs,FromPixelToLatLng,The following statement contains a magic number: double mercY = 20037508.342789 - (y * Math.Pow(2' z1)) / 53.5865938;
Magic Number,GMap.NET.Projections,MercatorProjectionYandex,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjectionYandex.cs,FromPixelToLatLng,The following statement contains a magic number: double mercY = 20037508.342789 - (y * Math.Pow(2' z1)) / 53.5865938;
Magic Number,GMap.NET.Projections,MercatorProjectionYandex,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjectionYandex.cs,FromPixelToLatLng,The following statement contains a magic number: double mercY = 20037508.342789 - (y * Math.Pow(2' z1)) / 53.5865938;
Magic Number,GMap.NET.Projections,MercatorProjectionYandex,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjectionYandex.cs,FromPixelToLatLng,The following statement contains a magic number: double g = Math.PI / 2 - 2 * Math.Atan(1 / Math.Exp(mercY / a));
Magic Number,GMap.NET.Projections,MercatorProjectionYandex,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjectionYandex.cs,FromPixelToLatLng,The following statement contains a magic number: double g = Math.PI / 2 - 2 * Math.Atan(1 / Math.Exp(mercY / a));
Magic Number,GMap.NET.Projections,MercatorProjectionYandex,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjectionYandex.cs,FromPixelToLatLng,The following statement contains a magic number: double z = g + c1 * Math.Sin(2 * g) + c2 * Math.Sin(4 * g) + c3 * Math.Sin(6 * g) + c4 * Math.Sin(8 * g);
Magic Number,GMap.NET.Projections,MercatorProjectionYandex,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjectionYandex.cs,FromPixelToLatLng,The following statement contains a magic number: double z = g + c1 * Math.Sin(2 * g) + c2 * Math.Sin(4 * g) + c3 * Math.Sin(6 * g) + c4 * Math.Sin(8 * g);
Magic Number,GMap.NET.Projections,MercatorProjectionYandex,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjectionYandex.cs,FromPixelToLatLng,The following statement contains a magic number: double z = g + c1 * Math.Sin(2 * g) + c2 * Math.Sin(4 * g) + c3 * Math.Sin(6 * g) + c4 * Math.Sin(8 * g);
Magic Number,GMap.NET.Projections,MercatorProjectionYandex,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjectionYandex.cs,FromPixelToLatLng,The following statement contains a magic number: double z = g + c1 * Math.Sin(2 * g) + c2 * Math.Sin(4 * g) + c3 * Math.Sin(6 * g) + c4 * Math.Sin(8 * g);
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM10,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor2' 2)) / Math.Pow(semiMinor2' 2);
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM10,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor2' 2)) / Math.Pow(semiMinor2' 2);
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM10,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor2' 2)) / Math.Pow(semiMinor2' 2);
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM10,The following statement contains a magic number: double h = lonlat.Length < 3 ? 0 : lonlat[2].Equals(Double.NaN) ? 0 : lonlat[2];
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM10,The following statement contains a magic number: double h = lonlat.Length < 3 ? 0 : lonlat[2].Equals(Double.NaN) ? 0 : lonlat[2];
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM10,The following statement contains a magic number: double h = lonlat.Length < 3 ? 0 : lonlat[2].Equals(Double.NaN) ? 0 : lonlat[2];
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM10,The following statement contains a magic number: double v = semiMajor / Math.Sqrt(1 - es * Math.Pow(Math.Sin(lat)' 2));
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD10,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor' 2)) / Math.Pow(semiMinor' 2);
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD10,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor' 2)) / Math.Pow(semiMinor' 2);
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD10,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor' 2)) / Math.Pow(semiMinor' 2);
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD10,The following statement contains a magic number: double Z = pnt.Length < 3 ? 0 : pnt[2].Equals(Double.NaN) ? 0 : pnt[2];
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD10,The following statement contains a magic number: double Z = pnt.Length < 3 ? 0 : pnt[2].Equals(Double.NaN) ? 0 : pnt[2];
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD10,The following statement contains a magic number: double Z = pnt.Length < 3 ? 0 : pnt[2].Equals(Double.NaN) ? 0 : pnt[2];
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD10,The following statement contains a magic number: if(pnt[0] != 0.0)           {              lon = Math.Atan2(pnt[1]' pnt[0]);           }           else           {              if(pnt[1] > 0)              {                 lon = Math.PI / 2;              }              else                 if(pnt[1] < 0)                 {                    lon = -Math.PI * 0.5;                 }                 else                 {                    AtPole = true;                    lon = 0.0;                    if(Z > 0.0) // north pole                    {                       lat = Math.PI * 0.5;                    }                    else                       if(Z < 0.0) // south pole                       {                          lat = -Math.PI * 0.5;                       }                       else // center of earth                       {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor' };                       }                 }           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD10,The following statement contains a magic number: if(pnt[0] != 0.0)           {              lon = Math.Atan2(pnt[1]' pnt[0]);           }           else           {              if(pnt[1] > 0)              {                 lon = Math.PI / 2;              }              else                 if(pnt[1] < 0)                 {                    lon = -Math.PI * 0.5;                 }                 else                 {                    AtPole = true;                    lon = 0.0;                    if(Z > 0.0) // north pole                    {                       lat = Math.PI * 0.5;                    }                    else                       if(Z < 0.0) // south pole                       {                          lat = -Math.PI * 0.5;                       }                       else // center of earth                       {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor' };                       }                 }           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD10,The following statement contains a magic number: if(pnt[0] != 0.0)           {              lon = Math.Atan2(pnt[1]' pnt[0]);           }           else           {              if(pnt[1] > 0)              {                 lon = Math.PI / 2;              }              else                 if(pnt[1] < 0)                 {                    lon = -Math.PI * 0.5;                 }                 else                 {                    AtPole = true;                    lon = 0.0;                    if(Z > 0.0) // north pole                    {                       lat = Math.PI * 0.5;                    }                    else                       if(Z < 0.0) // south pole                       {                          lat = -Math.PI * 0.5;                       }                       else // center of earth                       {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor' };                       }                 }           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD10,The following statement contains a magic number: if(pnt[0] != 0.0)           {              lon = Math.Atan2(pnt[1]' pnt[0]);           }           else           {              if(pnt[1] > 0)              {                 lon = Math.PI / 2;              }              else                 if(pnt[1] < 0)                 {                    lon = -Math.PI * 0.5;                 }                 else                 {                    AtPole = true;                    lon = 0.0;                    if(Z > 0.0) // north pole                    {                       lat = Math.PI * 0.5;                    }                    else                       if(Z < 0.0) // south pole                       {                          lat = -Math.PI * 0.5;                       }                       else // center of earth                       {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor' };                       }                 }           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD10,The following statement contains a magic number: if(pnt[0] != 0.0)           {              lon = Math.Atan2(pnt[1]' pnt[0]);           }           else           {              if(pnt[1] > 0)              {                 lon = Math.PI / 2;              }              else                 if(pnt[1] < 0)                 {                    lon = -Math.PI * 0.5;                 }                 else                 {                    AtPole = true;                    lon = 0.0;                    if(Z > 0.0) // north pole                    {                       lat = Math.PI * 0.5;                    }                    else                       if(Z < 0.0) // south pole                       {                          lat = -Math.PI * 0.5;                       }                       else // center of earth                       {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor' };                       }                 }           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD10,The following statement contains a magic number: double Sin3_B0 = Math.Pow(Sin_B0' 3);
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM00,The following statement contains a magic number: es = 1.0 - Math.Pow(semiMinor / semiMajor' 2);
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM00,The following statement contains a magic number: als = Math.Pow(al' 2);
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM00,The following statement contains a magic number: c = esp * Math.Pow(cos_phi' 2);
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM00,The following statement contains a magic number: t = Math.Pow(tq' 2);
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM00,The following statement contains a magic number: con = 1.0 - es * Math.Pow(sin_phi' 2);
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM00,The following statement contains a magic number: double x = scaleFactor * n * al * (1.0 + als / 6.0 * (1.0 - t + c + als / 20.0 *               (5.0 - 18.0 * t + Math.Pow(t' 2) + 72.0 * c - 58.0 * esp))) + falseEasting;
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM00,The following statement contains a magic number: double x = scaleFactor * n * al * (1.0 + als / 6.0 * (1.0 - t + c + als / 20.0 *               (5.0 - 18.0 * t + Math.Pow(t' 2) + 72.0 * c - 58.0 * esp))) + falseEasting;
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM00,The following statement contains a magic number: double x = scaleFactor * n * al * (1.0 + als / 6.0 * (1.0 - t + c + als / 20.0 *               (5.0 - 18.0 * t + Math.Pow(t' 2) + 72.0 * c - 58.0 * esp))) + falseEasting;
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM00,The following statement contains a magic number: double x = scaleFactor * n * al * (1.0 + als / 6.0 * (1.0 - t + c + als / 20.0 *               (5.0 - 18.0 * t + Math.Pow(t' 2) + 72.0 * c - 58.0 * esp))) + falseEasting;
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM00,The following statement contains a magic number: double x = scaleFactor * n * al * (1.0 + als / 6.0 * (1.0 - t + c + als / 20.0 *               (5.0 - 18.0 * t + Math.Pow(t' 2) + 72.0 * c - 58.0 * esp))) + falseEasting;
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM00,The following statement contains a magic number: double x = scaleFactor * n * al * (1.0 + als / 6.0 * (1.0 - t + c + als / 20.0 *               (5.0 - 18.0 * t + Math.Pow(t' 2) + 72.0 * c - 58.0 * esp))) + falseEasting;
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM00,The following statement contains a magic number: double x = scaleFactor * n * al * (1.0 + als / 6.0 * (1.0 - t + c + als / 20.0 *               (5.0 - 18.0 * t + Math.Pow(t' 2) + 72.0 * c - 58.0 * esp))) + falseEasting;
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM00,The following statement contains a magic number: double y = scaleFactor * (ml - ml0 + n * tq * (als * (0.5 + als / 24.0 *               (5.0 - t + 9.0 * c + 4.0 * Math.Pow(c' 2) + als / 30.0 * (61.0 - 58.0 * t               + Math.Pow(t' 2) + 600.0 * c - 330.0 * esp))))) + falseNorthing;
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM00,The following statement contains a magic number: if(lonlat.Length < 3)              return new double[] { x / metersPerUnit' y / metersPerUnit };           else              return new double[] { x / metersPerUnit' y / metersPerUnit' lonlat[2] };
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM00,The following statement contains a magic number: if(lonlat.Length < 3)              return new double[] { x / metersPerUnit' y / metersPerUnit };           else              return new double[] { x / metersPerUnit' y / metersPerUnit' lonlat[2] };
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM01,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor' 2)) / Math.Pow(semiMinor' 2);
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM01,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor' 2)) / Math.Pow(semiMinor' 2);
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM01,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor' 2)) / Math.Pow(semiMinor' 2);
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM01,The following statement contains a magic number: double h = lonlat.Length < 3 ? 0 : lonlat[2].Equals(Double.NaN) ? 0 : lonlat[2];
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM01,The following statement contains a magic number: double h = lonlat.Length < 3 ? 0 : lonlat[2].Equals(Double.NaN) ? 0 : lonlat[2];
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM01,The following statement contains a magic number: double h = lonlat.Length < 3 ? 0 : lonlat[2].Equals(Double.NaN) ? 0 : lonlat[2];
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,DTM01,The following statement contains a magic number: double v = semiMajor / Math.Sqrt(1 - es * Math.Pow(Math.Sin(lat)' 2));
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD01,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor2' 2)) / Math.Pow(semiMinor2' 2);
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD01,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor2' 2)) / Math.Pow(semiMinor2' 2);
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD01,The following statement contains a magic number: double ses = (Math.Pow(semiMajor' 2) - Math.Pow(semiMinor2' 2)) / Math.Pow(semiMinor2' 2);
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD01,The following statement contains a magic number: double Z = pnt.Length < 3 ? 0 : pnt[2].Equals(Double.NaN) ? 0 : pnt[2];
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD01,The following statement contains a magic number: double Z = pnt.Length < 3 ? 0 : pnt[2].Equals(Double.NaN) ? 0 : pnt[2];
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD01,The following statement contains a magic number: double Z = pnt.Length < 3 ? 0 : pnt[2].Equals(Double.NaN) ? 0 : pnt[2];
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD01,The following statement contains a magic number: if(pnt[0] != 0.0)           {              lon = Math.Atan2(pnt[1]' pnt[0]);           }           else           {              if(pnt[1] > 0)              {                 lon = Math.PI / 2;              }              else                 if(pnt[1] < 0)                 {                    lon = -Math.PI * 0.5;                 }                 else                 {                    At_Pole = true;                    lon = 0.0;                    if(Z > 0.0) // north pole                    {                       lat = Math.PI * 0.5;                    }                    else                       if(Z < 0.0) // south pole                       {                          lat = -Math.PI * 0.5;                       }                       else // center of earth                       {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor2' };                       }                 }           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD01,The following statement contains a magic number: if(pnt[0] != 0.0)           {              lon = Math.Atan2(pnt[1]' pnt[0]);           }           else           {              if(pnt[1] > 0)              {                 lon = Math.PI / 2;              }              else                 if(pnt[1] < 0)                 {                    lon = -Math.PI * 0.5;                 }                 else                 {                    At_Pole = true;                    lon = 0.0;                    if(Z > 0.0) // north pole                    {                       lat = Math.PI * 0.5;                    }                    else                       if(Z < 0.0) // south pole                       {                          lat = -Math.PI * 0.5;                       }                       else // center of earth                       {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor2' };                       }                 }           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD01,The following statement contains a magic number: if(pnt[0] != 0.0)           {              lon = Math.Atan2(pnt[1]' pnt[0]);           }           else           {              if(pnt[1] > 0)              {                 lon = Math.PI / 2;              }              else                 if(pnt[1] < 0)                 {                    lon = -Math.PI * 0.5;                 }                 else                 {                    At_Pole = true;                    lon = 0.0;                    if(Z > 0.0) // north pole                    {                       lat = Math.PI * 0.5;                    }                    else                       if(Z < 0.0) // south pole                       {                          lat = -Math.PI * 0.5;                       }                       else // center of earth                       {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor2' };                       }                 }           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD01,The following statement contains a magic number: if(pnt[0] != 0.0)           {              lon = Math.Atan2(pnt[1]' pnt[0]);           }           else           {              if(pnt[1] > 0)              {                 lon = Math.PI / 2;              }              else                 if(pnt[1] < 0)                 {                    lon = -Math.PI * 0.5;                 }                 else                 {                    At_Pole = true;                    lon = 0.0;                    if(Z > 0.0) // north pole                    {                       lat = Math.PI * 0.5;                    }                    else                       if(Z < 0.0) // south pole                       {                          lat = -Math.PI * 0.5;                       }                       else // center of earth                       {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor2' };                       }                 }           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD01,The following statement contains a magic number: if(pnt[0] != 0.0)           {              lon = Math.Atan2(pnt[1]' pnt[0]);           }           else           {              if(pnt[1] > 0)              {                 lon = Math.PI / 2;              }              else                 if(pnt[1] < 0)                 {                    lon = -Math.PI * 0.5;                 }                 else                 {                    At_Pole = true;                    lon = 0.0;                    if(Z > 0.0) // north pole                    {                       lat = Math.PI * 0.5;                    }                    else                       if(Z < 0.0) // south pole                       {                          lat = -Math.PI * 0.5;                       }                       else // center of earth                       {                          return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(Math.PI * 0.5)' -semiMinor2' };                       }                 }           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD01,The following statement contains a magic number: double Sin3_B0 = Math.Pow(Sin_B0' 3);
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: es = 1.0 - Math.Pow(semiMinor / semiMajor' 2);
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: long max_iter = 6;
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: for(i = 0; ; i++)           {              delta_phi = ((con + e1 * Math.Sin(2.0 * phi) - e2 * Math.Sin(4.0 * phi) + e3 * Math.Sin(6.0 * phi)) / e0) - phi;              phi += delta_phi;                if(Math.Abs(delta_phi) <= EPSLoN)                 break;                if(i >= max_iter)                 throw new ArgumentException("Latitude failed to converge");           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: for(i = 0; ; i++)           {              delta_phi = ((con + e1 * Math.Sin(2.0 * phi) - e2 * Math.Sin(4.0 * phi) + e3 * Math.Sin(6.0 * phi)) / e0) - phi;              phi += delta_phi;                if(Math.Abs(delta_phi) <= EPSLoN)                 break;                if(i >= max_iter)                 throw new ArgumentException("Latitude failed to converge");           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: for(i = 0; ; i++)           {              delta_phi = ((con + e1 * Math.Sin(2.0 * phi) - e2 * Math.Sin(4.0 * phi) + e3 * Math.Sin(6.0 * phi)) / e0) - phi;              phi += delta_phi;                if(Math.Abs(delta_phi) <= EPSLoN)                 break;                if(i >= max_iter)                 throw new ArgumentException("Latitude failed to converge");           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,MTD11,The following statement contains a magic number: if(Math.Abs(phi) < HALF_PI)           {              SinCos(phi' out sin_phi' out cos_phi);              tan_phi = Math.Tan(phi);              c = esp * Math.Pow(cos_phi' 2);              cs = Math.Pow(c' 2);              t = Math.Pow(tan_phi' 2);              ts = Math.Pow(t' 2);              con = 1.0 - es * Math.Pow(sin_phi' 2);              n = semiMajor / Math.Sqrt(con);              r = n * (1.0 - es) / con;              d = x / (n * scaleFactor);              ds = Math.Pow(d' 2);                double lat = phi - (n * tan_phi * ds / r) * (0.5 - ds / 24.0 * (5.0 + 3.0 * t +                  10.0 * c - 4.0 * cs - 9.0 * esp - ds / 30.0 * (61.0 + 90.0 * t +                  298.0 * c + 45.0 * ts - 252.0 * esp - 3.0 * cs)));                double lon = AdjustLongitude(centralMeridian + (d * (1.0 - ds / 6.0 * (1.0 + 2.0 * t +                  c - ds / 20.0 * (5.0 - 2.0 * c + 28.0 * t - 3.0 * cs + 8.0 * esp +                  24.0 * ts))) / cos_phi));                if(p.Length < 3)                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat) };              else                 return new double[] { RadiansToDegrees(lon)' RadiansToDegrees(lat)' p[2] };           }           else           {              if(p.Length < 3)                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian) };              else                 return new double[] { RadiansToDegrees(HALF_PI * Sign(y))' RadiansToDegrees(centralMeridian)' p[2] };           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,GetTileMatrixResolution,The following statement contains a magic number: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Magic Number,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,GenerateExtents,The following statement contains a magic number: for(int i = 0; i <= 12; i++)           {              double res = GetTileMatrixResolution(i);              //extentMatrixMin.Add(i' new GSize(FromPixelToTileXY(LksToPixel(new double[]{ Extent.Left' Extent.Top }' res))));              //extentMatrixMax.Add(i' new GSize(FromPixelToTileXY(LksToPixel(new double[] { Extent.Right' Extent.Bottom }' res))));                extentMatrixMin.Add(i' new GSize(FromPixelToTileXY(FromLatLngToPixel(Bounds.LocationTopLeft' i))));              extentMatrixMax.Add(i' new GSize(FromPixelToTileXY(FromLatLngToPixel(Bounds.LocationRightBottom' i))));           }
Magic Number,GMap.NET.Projections,MercatorProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjection.cs,FromLatLngToPixel,The following statement contains a magic number: double x = (lng + 180) / 360;
Magic Number,GMap.NET.Projections,MercatorProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjection.cs,FromLatLngToPixel,The following statement contains a magic number: double x = (lng + 180) / 360;
Magic Number,GMap.NET.Projections,MercatorProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjection.cs,FromLatLngToPixel,The following statement contains a magic number: double sinLatitude = Math.Sin(lat * Math.PI / 180);
Magic Number,GMap.NET.Projections,MercatorProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjection.cs,FromLatLngToPixel,The following statement contains a magic number: double y = 0.5 - Math.Log((1 + sinLatitude) / (1 - sinLatitude)) / (4 * Math.PI);
Magic Number,GMap.NET.Projections,MercatorProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjection.cs,FromLatLngToPixel,The following statement contains a magic number: double y = 0.5 - Math.Log((1 + sinLatitude) / (1 - sinLatitude)) / (4 * Math.PI);
Magic Number,GMap.NET.Projections,MercatorProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjection.cs,FromLatLngToPixel,The following statement contains a magic number: ret.X = (long)Clip(x * mapSizeX + 0.5' 0' mapSizeX - 1);
Magic Number,GMap.NET.Projections,MercatorProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjection.cs,FromLatLngToPixel,The following statement contains a magic number: ret.Y = (long)Clip(y * mapSizeY + 0.5' 0' mapSizeY - 1);
Magic Number,GMap.NET.Projections,MercatorProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjection.cs,FromPixelToLatLng,The following statement contains a magic number: double xx = (Clip(x' 0' mapSizeX - 1) / mapSizeX) - 0.5;
Magic Number,GMap.NET.Projections,MercatorProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjection.cs,FromPixelToLatLng,The following statement contains a magic number: double yy = 0.5 - (Clip(y' 0' mapSizeY - 1) / mapSizeY);
Magic Number,GMap.NET.Projections,MercatorProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjection.cs,FromPixelToLatLng,The following statement contains a magic number: ret.Lat = 90 - 360 * Math.Atan(Math.Exp(-yy * 2 * Math.PI)) / Math.PI;
Magic Number,GMap.NET.Projections,MercatorProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjection.cs,FromPixelToLatLng,The following statement contains a magic number: ret.Lat = 90 - 360 * Math.Atan(Math.Exp(-yy * 2 * Math.PI)) / Math.PI;
Magic Number,GMap.NET.Projections,MercatorProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjection.cs,FromPixelToLatLng,The following statement contains a magic number: ret.Lat = 90 - 360 * Math.Atan(Math.Exp(-yy * 2 * Math.PI)) / Math.PI;
Magic Number,GMap.NET.Projections,MercatorProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MercatorProjection.cs,FromPixelToLatLng,The following statement contains a magic number: ret.Lng = 360 * xx;
Magic Number,GMap.NET.Projections,PlateCarreeProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\PlateCarreeProjection.cs,FromLatLngToPixel,The following statement contains a magic number: double scale = 360.0 / mapSizeX;
Magic Number,GMap.NET.Projections,PlateCarreeProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\PlateCarreeProjection.cs,FromLatLngToPixel,The following statement contains a magic number: ret.Y = (long)((90.0 - lat) / scale);
Magic Number,GMap.NET.Projections,PlateCarreeProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\PlateCarreeProjection.cs,FromLatLngToPixel,The following statement contains a magic number: ret.X = (long)((lng + 180.0) / scale);
Magic Number,GMap.NET.Projections,PlateCarreeProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\PlateCarreeProjection.cs,FromPixelToLatLng,The following statement contains a magic number: double scale = 360.0 / mapSizeX;
Magic Number,GMap.NET.Projections,PlateCarreeProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\PlateCarreeProjection.cs,FromPixelToLatLng,The following statement contains a magic number: ret.Lat = 90 - (y * scale);
Magic Number,GMap.NET.Projections,PlateCarreeProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\PlateCarreeProjection.cs,FromPixelToLatLng,The following statement contains a magic number: ret.Lng = (x * scale) - 180;
Magic Number,GMap.NET.Projections,PlateCarreeProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\PlateCarreeProjection.cs,GetTileMatrixMaxXY,The following statement contains a magic number: long y = (long)Math.Pow(2' zoom);
Magic Number,GMap.NET.Projections,PlateCarreeProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\PlateCarreeProjection.cs,GetTileMatrixMaxXY,The following statement contains a magic number: return new GSize((2 * y) - 1' y - 1);
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,GetGroundResolution,The following statement contains a magic number: return (Math.Cos(latitude * (Math.PI / 180)) * 2 * Math.PI * Axis) / GetTileMatrixSizePixel(zoom).Width;
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,GetGroundResolution,The following statement contains a magic number: return (Math.Cos(latitude * (Math.PI / 180)) * 2 * Math.PI * Axis) / GetTileMatrixSizePixel(zoom).Width;
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,AdjustLongitude,The following statement contains a magic number: while(true)           {              if(Math.Abs(x) <= PI)                 break;              else                 if(((long)Math.Abs(x / Math.PI)) < 2)                    x = x - (Sign(x) * TWO_PI);                 else                    if(((long)Math.Abs(x / TWO_PI)) < MAXLONG)                    {                       x = x - (((long)(x / TWO_PI)) * TWO_PI);                    }                    else                       if(((long)Math.Abs(x / (MAXLONG * TWO_PI))) < MAXLONG)                       {                          x = x - (((long)(x / (MAXLONG * TWO_PI))) * (TWO_PI * MAXLONG));                       }                       else                          if(((long)Math.Abs(x / (DBLLONG * TWO_PI))) < MAXLONG)                          {                             x = x - (((long)(x / (DBLLONG * TWO_PI))) * (TWO_PI * DBLLONG));                          }                          else                             x = x - (Sign(x) * TWO_PI);              count++;              if(count > MAX_VAL)                 break;           }
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,e0fn,The following statement contains a magic number: return (1.0 - 0.25 * x * (1.0 + x / 16.0 * (3.0 + 1.25 * x)));
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,e0fn,The following statement contains a magic number: return (1.0 - 0.25 * x * (1.0 + x / 16.0 * (3.0 + 1.25 * x)));
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,e0fn,The following statement contains a magic number: return (1.0 - 0.25 * x * (1.0 + x / 16.0 * (3.0 + 1.25 * x)));
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,e0fn,The following statement contains a magic number: return (1.0 - 0.25 * x * (1.0 + x / 16.0 * (3.0 + 1.25 * x)));
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,e1fn,The following statement contains a magic number: return (0.375 * x * (1.0 + 0.25 * x * (1.0 + 0.46875 * x)));
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,e1fn,The following statement contains a magic number: return (0.375 * x * (1.0 + 0.25 * x * (1.0 + 0.46875 * x)));
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,e1fn,The following statement contains a magic number: return (0.375 * x * (1.0 + 0.25 * x * (1.0 + 0.46875 * x)));
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,e2fn,The following statement contains a magic number: return (0.05859375 * x * x * (1.0 + 0.75 * x));
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,e2fn,The following statement contains a magic number: return (0.05859375 * x * x * (1.0 + 0.75 * x));
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,e3fn,The following statement contains a magic number: return (x * x * x * (35.0 / 3072.0));
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,e3fn,The following statement contains a magic number: return (x * x * x * (35.0 / 3072.0));
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,mlfn,The following statement contains a magic number: return (e0 * phi - e1 * Math.Sin(2.0 * phi) + e2 * Math.Sin(4.0 * phi) - e3 * Math.Sin(6.0 * phi));
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,mlfn,The following statement contains a magic number: return (e0 * phi - e1 * Math.Sin(2.0 * phi) + e2 * Math.Sin(4.0 * phi) - e3 * Math.Sin(6.0 * phi));
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,mlfn,The following statement contains a magic number: return (e0 * phi - e1 * Math.Sin(2.0 * phi) + e2 * Math.Sin(4.0 * phi) - e3 * Math.Sin(6.0 * phi));
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,GetUTMzone,The following statement contains a magic number: return ((long)(((lon + 180.0) / 6.0) + 1.0));
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,GetUTMzone,The following statement contains a magic number: return ((long)(((lon + 180.0) / 6.0) + 1.0));
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,GetDistance,The following statement contains a magic number: double dLat1InRad = p1.Lat * (Math.PI / 180);
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,GetDistance,The following statement contains a magic number: double dLong1InRad = p1.Lng * (Math.PI / 180);
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,GetDistance,The following statement contains a magic number: double dLat2InRad = p2.Lat * (Math.PI / 180);
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,GetDistance,The following statement contains a magic number: double dLong2InRad = p2.Lng * (Math.PI / 180);
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,GetDistance,The following statement contains a magic number: double a = Math.Pow(Math.Sin(dLatitude / 2)' 2) + Math.Cos(dLat1InRad) * Math.Cos(dLat2InRad) * Math.Pow(Math.Sin(dLongitude / 2)' 2);
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,GetDistance,The following statement contains a magic number: double a = Math.Pow(Math.Sin(dLatitude / 2)' 2) + Math.Cos(dLat1InRad) * Math.Cos(dLat2InRad) * Math.Pow(Math.Sin(dLongitude / 2)' 2);
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,GetDistance,The following statement contains a magic number: double a = Math.Pow(Math.Sin(dLatitude / 2)' 2) + Math.Cos(dLat1InRad) * Math.Cos(dLat2InRad) * Math.Pow(Math.Sin(dLongitude / 2)' 2);
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,GetDistance,The following statement contains a magic number: double a = Math.Pow(Math.Sin(dLatitude / 2)' 2) + Math.Cos(dLat1InRad) * Math.Cos(dLat2InRad) * Math.Pow(Math.Sin(dLongitude / 2)' 2);
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,GetDistance,The following statement contains a magic number: double c = 2 * Math.Atan2(Math.Sqrt(a)' Math.Sqrt(1 - a));
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,GetDistance,The following statement contains a magic number: double dDistance = (Axis / 1000.0) * c;
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,GetBearing,The following statement contains a magic number: return (RadiansToDegrees(Math.Atan2(y' x)) + 360) % 360;
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,GetBearing,The following statement contains a magic number: return (RadiansToDegrees(Math.Atan2(y' x)) + 360) % 360;
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,FromGeodeticToCartesian,The following statement contains a magic number: Lat = (Math.PI / 180) * Lat;
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,FromGeodeticToCartesian,The following statement contains a magic number: Lng = (Math.PI / 180) * Lng;
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,FromCartesianTGeodetic,The following statement contains a magic number: double E = Flattening * (2.0 - Flattening);
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,FromCartesianTGeodetic,The following statement contains a magic number: Lat /= (Math.PI / 180);
Magic Number,GMap.NET,PureProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\PureProjection.cs,FromCartesianTGeodetic,The following statement contains a magic number: Lng /= (Math.PI / 180);
Magic Number,GMap.NET,GRect,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\GRect.cs,GetHashCode,The following statement contains a magic number: return (int)(((this.X ^ ((this.Y << 13) | (this.Y >> 0x13))) ^ ((this.Width << 0x1a) | (this.Width >> 6))) ^ ((this.Height << 7) | (this.Height >> 0x19)));
Magic Number,GMap.NET,GRect,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\GRect.cs,GetHashCode,The following statement contains a magic number: return (int)(((this.X ^ ((this.Y << 13) | (this.Y >> 0x13))) ^ ((this.Width << 0x1a) | (this.Width >> 6))) ^ ((this.Height << 7) | (this.Height >> 0x19)));
Magic Number,GMap.NET,GRect,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\GRect.cs,GetHashCode,The following statement contains a magic number: return (int)(((this.X ^ ((this.Y << 13) | (this.Y >> 0x13))) ^ ((this.Width << 0x1a) | (this.Width >> 6))) ^ ((this.Height << 7) | (this.Height >> 0x19)));
Magic Number,GMap.NET,GRect,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\GRect.cs,Inflate,The following statement contains a magic number: this.Width += 2*width;
Magic Number,GMap.NET,GRect,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\GRect.cs,Inflate,The following statement contains a magic number: this.Height += 2*height;
Magic Number,GMap.NET,GMaps,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\GMaps.cs,GMaps,The following statement contains a magic number: ServicePointManager.DefaultConnectionLimit = 5;
Magic Number,GMap.NET,GMaps,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\GMaps.cs,CacheEngineLoop,The following statement contains a magic number: while(!abortCacheLoop)           {              try              {                 CacheQueueItem? task = null;                   lock(tileCacheQueue)                 {                    left = tileCacheQueue.Count;                    if(left > 0)                    {                       task = tileCacheQueue.Dequeue();                    }                 }                   if(task.HasValue)                 {                    if(startEvent)                    {                       startEvent = false;                         if(OnTileCacheStart != null)                       {                          OnTileCacheStart();                       }                    }                      if(OnTileCacheProgress != null)                    {                       OnTileCacheProgress(left);                    }                      #region -- save --                    // check if stream wasn't disposed somehow                    if(task.Value.Img != null)                    {                       Debug.WriteLine("CacheEngine[" + left + "]: storing tile " + task.Value + "' " + task.Value.Img.Length / 1024 + "kB...");                         if((task.Value.CacheType & CacheUsage.First) == CacheUsage.First && PrimaryCache != null)                       {                          if(cacheOnIdleRead)                          {                             while(Interlocked.Decrement(ref readingCache) > 0)                             {                                Thread.Sleep(1000);                             }                          }                          PrimaryCache.PutImageToCache(task.Value.Img' task.Value.Tile.Type' task.Value.Tile.Pos' task.Value.Tile.Zoom);                       }                         if((task.Value.CacheType & CacheUsage.Second) == CacheUsage.Second && SecondaryCache != null)                       {                          if(cacheOnIdleRead)                          {                             while(Interlocked.Decrement(ref readingCache) > 0)                             {                                Thread.Sleep(1000);                             }                          }                          SecondaryCache.PutImageToCache(task.Value.Img' task.Value.Tile.Type' task.Value.Tile.Pos' task.Value.Tile.Zoom);                       }                         task.Value.Clear();                         if(!boostCacheEngine)                       {  #if PocketPC                          Thread.Sleep(3333);  #else                          Thread.Sleep(333);  #endif                       }                    }                    else                    {                       Debug.WriteLine("CacheEngineLoop: skip' tile disposed to early -> " + task.Value);                    }                    task = null;                    #endregion                 }                 else                 {                    if(!startEvent)                    {                       startEvent = true;                         if(OnTileCacheComplete != null)                       {                          OnTileCacheComplete();                       }                    }                      if(abortCacheLoop || noMapInstances || !WaitForCache.WaitOne(33333' false) || noMapInstances)                    {                       break;                    }                 }              }  #if !PocketPC              catch(AbandonedMutexException)              {                 break;              }  #endif              catch(Exception ex)              {                 Debug.WriteLine("CacheEngineLoop: " + ex.ToString());              }           }
Magic Number,GMap.NET,GMaps,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\GMaps.cs,CacheEngineLoop,The following statement contains a magic number: while(!abortCacheLoop)           {              try              {                 CacheQueueItem? task = null;                   lock(tileCacheQueue)                 {                    left = tileCacheQueue.Count;                    if(left > 0)                    {                       task = tileCacheQueue.Dequeue();                    }                 }                   if(task.HasValue)                 {                    if(startEvent)                    {                       startEvent = false;                         if(OnTileCacheStart != null)                       {                          OnTileCacheStart();                       }                    }                      if(OnTileCacheProgress != null)                    {                       OnTileCacheProgress(left);                    }                      #region -- save --                    // check if stream wasn't disposed somehow                    if(task.Value.Img != null)                    {                       Debug.WriteLine("CacheEngine[" + left + "]: storing tile " + task.Value + "' " + task.Value.Img.Length / 1024 + "kB...");                         if((task.Value.CacheType & CacheUsage.First) == CacheUsage.First && PrimaryCache != null)                       {                          if(cacheOnIdleRead)                          {                             while(Interlocked.Decrement(ref readingCache) > 0)                             {                                Thread.Sleep(1000);                             }                          }                          PrimaryCache.PutImageToCache(task.Value.Img' task.Value.Tile.Type' task.Value.Tile.Pos' task.Value.Tile.Zoom);                       }                         if((task.Value.CacheType & CacheUsage.Second) == CacheUsage.Second && SecondaryCache != null)                       {                          if(cacheOnIdleRead)                          {                             while(Interlocked.Decrement(ref readingCache) > 0)                             {                                Thread.Sleep(1000);                             }                          }                          SecondaryCache.PutImageToCache(task.Value.Img' task.Value.Tile.Type' task.Value.Tile.Pos' task.Value.Tile.Zoom);                       }                         task.Value.Clear();                         if(!boostCacheEngine)                       {  #if PocketPC                          Thread.Sleep(3333);  #else                          Thread.Sleep(333);  #endif                       }                    }                    else                    {                       Debug.WriteLine("CacheEngineLoop: skip' tile disposed to early -> " + task.Value);                    }                    task = null;                    #endregion                 }                 else                 {                    if(!startEvent)                    {                       startEvent = true;                         if(OnTileCacheComplete != null)                       {                          OnTileCacheComplete();                       }                    }                      if(abortCacheLoop || noMapInstances || !WaitForCache.WaitOne(33333' false) || noMapInstances)                    {                       break;                    }                 }              }  #if !PocketPC              catch(AbandonedMutexException)              {                 break;              }  #endif              catch(Exception ex)              {                 Debug.WriteLine("CacheEngineLoop: " + ex.ToString());              }           }
Magic Number,GMap.NET,GMaps,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\GMaps.cs,CacheEngineLoop,The following statement contains a magic number: while(!abortCacheLoop)           {              try              {                 CacheQueueItem? task = null;                   lock(tileCacheQueue)                 {                    left = tileCacheQueue.Count;                    if(left > 0)                    {                       task = tileCacheQueue.Dequeue();                    }                 }                   if(task.HasValue)                 {                    if(startEvent)                    {                       startEvent = false;                         if(OnTileCacheStart != null)                       {                          OnTileCacheStart();                       }                    }                      if(OnTileCacheProgress != null)                    {                       OnTileCacheProgress(left);                    }                      #region -- save --                    // check if stream wasn't disposed somehow                    if(task.Value.Img != null)                    {                       Debug.WriteLine("CacheEngine[" + left + "]: storing tile " + task.Value + "' " + task.Value.Img.Length / 1024 + "kB...");                         if((task.Value.CacheType & CacheUsage.First) == CacheUsage.First && PrimaryCache != null)                       {                          if(cacheOnIdleRead)                          {                             while(Interlocked.Decrement(ref readingCache) > 0)                             {                                Thread.Sleep(1000);                             }                          }                          PrimaryCache.PutImageToCache(task.Value.Img' task.Value.Tile.Type' task.Value.Tile.Pos' task.Value.Tile.Zoom);                       }                         if((task.Value.CacheType & CacheUsage.Second) == CacheUsage.Second && SecondaryCache != null)                       {                          if(cacheOnIdleRead)                          {                             while(Interlocked.Decrement(ref readingCache) > 0)                             {                                Thread.Sleep(1000);                             }                          }                          SecondaryCache.PutImageToCache(task.Value.Img' task.Value.Tile.Type' task.Value.Tile.Pos' task.Value.Tile.Zoom);                       }                         task.Value.Clear();                         if(!boostCacheEngine)                       {  #if PocketPC                          Thread.Sleep(3333);  #else                          Thread.Sleep(333);  #endif                       }                    }                    else                    {                       Debug.WriteLine("CacheEngineLoop: skip' tile disposed to early -> " + task.Value);                    }                    task = null;                    #endregion                 }                 else                 {                    if(!startEvent)                    {                       startEvent = true;                         if(OnTileCacheComplete != null)                       {                          OnTileCacheComplete();                       }                    }                      if(abortCacheLoop || noMapInstances || !WaitForCache.WaitOne(33333' false) || noMapInstances)                    {                       break;                    }                 }              }  #if !PocketPC              catch(AbandonedMutexException)              {                 break;              }  #endif              catch(Exception ex)              {                 Debug.WriteLine("CacheEngineLoop: " + ex.ToString());              }           }
Magic Number,GMap.NET,GMaps,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\GMaps.cs,CacheEngineLoop,The following statement contains a magic number: while(!abortCacheLoop)           {              try              {                 CacheQueueItem? task = null;                   lock(tileCacheQueue)                 {                    left = tileCacheQueue.Count;                    if(left > 0)                    {                       task = tileCacheQueue.Dequeue();                    }                 }                   if(task.HasValue)                 {                    if(startEvent)                    {                       startEvent = false;                         if(OnTileCacheStart != null)                       {                          OnTileCacheStart();                       }                    }                      if(OnTileCacheProgress != null)                    {                       OnTileCacheProgress(left);                    }                      #region -- save --                    // check if stream wasn't disposed somehow                    if(task.Value.Img != null)                    {                       Debug.WriteLine("CacheEngine[" + left + "]: storing tile " + task.Value + "' " + task.Value.Img.Length / 1024 + "kB...");                         if((task.Value.CacheType & CacheUsage.First) == CacheUsage.First && PrimaryCache != null)                       {                          if(cacheOnIdleRead)                          {                             while(Interlocked.Decrement(ref readingCache) > 0)                             {                                Thread.Sleep(1000);                             }                          }                          PrimaryCache.PutImageToCache(task.Value.Img' task.Value.Tile.Type' task.Value.Tile.Pos' task.Value.Tile.Zoom);                       }                         if((task.Value.CacheType & CacheUsage.Second) == CacheUsage.Second && SecondaryCache != null)                       {                          if(cacheOnIdleRead)                          {                             while(Interlocked.Decrement(ref readingCache) > 0)                             {                                Thread.Sleep(1000);                             }                          }                          SecondaryCache.PutImageToCache(task.Value.Img' task.Value.Tile.Type' task.Value.Tile.Pos' task.Value.Tile.Zoom);                       }                         task.Value.Clear();                         if(!boostCacheEngine)                       {  #if PocketPC                          Thread.Sleep(3333);  #else                          Thread.Sleep(333);  #endif                       }                    }                    else                    {                       Debug.WriteLine("CacheEngineLoop: skip' tile disposed to early -> " + task.Value);                    }                    task = null;                    #endregion                 }                 else                 {                    if(!startEvent)                    {                       startEvent = true;                         if(OnTileCacheComplete != null)                       {                          OnTileCacheComplete();                       }                    }                      if(abortCacheLoop || noMapInstances || !WaitForCache.WaitOne(33333' false) || noMapInstances)                    {                       break;                    }                 }              }  #if !PocketPC              catch(AbandonedMutexException)              {                 break;              }  #endif              catch(Exception ex)              {                 Debug.WriteLine("CacheEngineLoop: " + ex.ToString());              }           }
Magic Number,GMap.NET,GMaps,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\GMaps.cs,CacheEngineLoop,The following statement contains a magic number: while(!abortCacheLoop)           {              try              {                 CacheQueueItem? task = null;                   lock(tileCacheQueue)                 {                    left = tileCacheQueue.Count;                    if(left > 0)                    {                       task = tileCacheQueue.Dequeue();                    }                 }                   if(task.HasValue)                 {                    if(startEvent)                    {                       startEvent = false;                         if(OnTileCacheStart != null)                       {                          OnTileCacheStart();                       }                    }                      if(OnTileCacheProgress != null)                    {                       OnTileCacheProgress(left);                    }                      #region -- save --                    // check if stream wasn't disposed somehow                    if(task.Value.Img != null)                    {                       Debug.WriteLine("CacheEngine[" + left + "]: storing tile " + task.Value + "' " + task.Value.Img.Length / 1024 + "kB...");                         if((task.Value.CacheType & CacheUsage.First) == CacheUsage.First && PrimaryCache != null)                       {                          if(cacheOnIdleRead)                          {                             while(Interlocked.Decrement(ref readingCache) > 0)                             {                                Thread.Sleep(1000);                             }                          }                          PrimaryCache.PutImageToCache(task.Value.Img' task.Value.Tile.Type' task.Value.Tile.Pos' task.Value.Tile.Zoom);                       }                         if((task.Value.CacheType & CacheUsage.Second) == CacheUsage.Second && SecondaryCache != null)                       {                          if(cacheOnIdleRead)                          {                             while(Interlocked.Decrement(ref readingCache) > 0)                             {                                Thread.Sleep(1000);                             }                          }                          SecondaryCache.PutImageToCache(task.Value.Img' task.Value.Tile.Type' task.Value.Tile.Pos' task.Value.Tile.Zoom);                       }                         task.Value.Clear();                         if(!boostCacheEngine)                       {  #if PocketPC                          Thread.Sleep(3333);  #else                          Thread.Sleep(333);  #endif                       }                    }                    else                    {                       Debug.WriteLine("CacheEngineLoop: skip' tile disposed to early -> " + task.Value);                    }                    task = null;                    #endregion                 }                 else                 {                    if(!startEvent)                    {                       startEvent = true;                         if(OnTileCacheComplete != null)                       {                          OnTileCacheComplete();                       }                    }                      if(abortCacheLoop || noMapInstances || !WaitForCache.WaitOne(33333' false) || noMapInstances)                    {                       break;                    }                 }              }  #if !PocketPC              catch(AbandonedMutexException)              {                 break;              }  #endif              catch(Exception ex)              {                 Debug.WriteLine("CacheEngineLoop: " + ex.ToString());              }           }
Magic Number,GMap.NET,GMaps,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\GMaps.cs,GetImageFrom,The following statement contains a magic number: try           {              var rtile = new RawTile(provider.DbId' pos' zoom);                // let't check memmory first              if(UseMemoryCache)              {                 var m = MemoryCache.GetTileFromMemoryCache(rtile);                 if(m != null)                 {                    if(GMapProvider.TileImageProxy != null)                    {                       ret = GMapProvider.TileImageProxy.FromArray(m);                       if(ret == null)                       {  #if DEBUG                          Debug.WriteLine("Image disposed in MemoryCache o.O' should never happen ;} " + new RawTile(provider.DbId' pos' zoom));                          if(Debugger.IsAttached)                          {                             Debugger.Break();                          }  #endif                          m = null;                       }                    }                 }              }                if(ret == null)              {                 if(Mode != AccessMode.ServerOnly && !provider.BypassCache)                 {                    if(PrimaryCache != null)                    {                       // hold writer for 5s                       if(cacheOnIdleRead)                       {                          Interlocked.Exchange(ref readingCache' 5);                       }                         ret = PrimaryCache.GetImageFromCache(provider.DbId' pos' zoom);                       if(ret != null)                       {                          if(UseMemoryCache)                          {                             MemoryCache.AddTileToMemoryCache(rtile' ret.Data.GetBuffer());                          }                          return ret;                       }                    }                      if(SecondaryCache != null)                    {                       // hold writer for 5s                       if(cacheOnIdleRead)                       {                          Interlocked.Exchange(ref readingCache' 5);                       }                         ret = SecondaryCache.GetImageFromCache(provider.DbId' pos' zoom);                       if(ret != null)                       {                          if(UseMemoryCache)                          {                             MemoryCache.AddTileToMemoryCache(rtile' ret.Data.GetBuffer());                          }                          EnqueueCacheTask(new CacheQueueItem(rtile' ret.Data.GetBuffer()' CacheUsage.First));                          return ret;                       }                    }                 }                   if(Mode != AccessMode.CacheOnly)                 {                    ret = provider.GetTileImage(pos' zoom);                    {                       // Enqueue Cache                       if(ret != null)                       {                          if(UseMemoryCache)                          {                             MemoryCache.AddTileToMemoryCache(rtile' ret.Data.GetBuffer());                          }                            if (Mode != AccessMode.ServerOnly && !provider.BypassCache)                          {                             EnqueueCacheTask(new CacheQueueItem(rtile' ret.Data.GetBuffer()' CacheUsage.Both));                          }                       }                    }                 }                 else                 {                    result = noDataException;                 }              }           }           catch(Exception ex)           {              result = ex;              ret = null;              Debug.WriteLine("GetImageFrom: " + ex.ToString());           }
Magic Number,GMap.NET,GMaps,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\GMaps.cs,GetImageFrom,The following statement contains a magic number: try           {              var rtile = new RawTile(provider.DbId' pos' zoom);                // let't check memmory first              if(UseMemoryCache)              {                 var m = MemoryCache.GetTileFromMemoryCache(rtile);                 if(m != null)                 {                    if(GMapProvider.TileImageProxy != null)                    {                       ret = GMapProvider.TileImageProxy.FromArray(m);                       if(ret == null)                       {  #if DEBUG                          Debug.WriteLine("Image disposed in MemoryCache o.O' should never happen ;} " + new RawTile(provider.DbId' pos' zoom));                          if(Debugger.IsAttached)                          {                             Debugger.Break();                          }  #endif                          m = null;                       }                    }                 }              }                if(ret == null)              {                 if(Mode != AccessMode.ServerOnly && !provider.BypassCache)                 {                    if(PrimaryCache != null)                    {                       // hold writer for 5s                       if(cacheOnIdleRead)                       {                          Interlocked.Exchange(ref readingCache' 5);                       }                         ret = PrimaryCache.GetImageFromCache(provider.DbId' pos' zoom);                       if(ret != null)                       {                          if(UseMemoryCache)                          {                             MemoryCache.AddTileToMemoryCache(rtile' ret.Data.GetBuffer());                          }                          return ret;                       }                    }                      if(SecondaryCache != null)                    {                       // hold writer for 5s                       if(cacheOnIdleRead)                       {                          Interlocked.Exchange(ref readingCache' 5);                       }                         ret = SecondaryCache.GetImageFromCache(provider.DbId' pos' zoom);                       if(ret != null)                       {                          if(UseMemoryCache)                          {                             MemoryCache.AddTileToMemoryCache(rtile' ret.Data.GetBuffer());                          }                          EnqueueCacheTask(new CacheQueueItem(rtile' ret.Data.GetBuffer()' CacheUsage.First));                          return ret;                       }                    }                 }                   if(Mode != AccessMode.CacheOnly)                 {                    ret = provider.GetTileImage(pos' zoom);                    {                       // Enqueue Cache                       if(ret != null)                       {                          if(UseMemoryCache)                          {                             MemoryCache.AddTileToMemoryCache(rtile' ret.Data.GetBuffer());                          }                            if (Mode != AccessMode.ServerOnly && !provider.BypassCache)                          {                             EnqueueCacheTask(new CacheQueueItem(rtile' ret.Data.GetBuffer()' CacheUsage.Both));                          }                       }                    }                 }                 else                 {                    result = noDataException;                 }              }           }           catch(Exception ex)           {              result = ex;              ret = null;              Debug.WriteLine("GetImageFrom: " + ex.ToString());           }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,ZipStorer,The following statement contains a magic number: CrcTable = new UInt32[256];
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,ZipStorer,The following statement contains a magic number: for (int i = 0; i < CrcTable.Length; i++)              {                  UInt32 c = (UInt32)i;                  for (int j = 0; j < 8; j++)                  {                      if ((c & 1) != 0)                          c = 3988292384 ^ (c >> 1);                      else                          c >>= 1;                  }                  CrcTable[i] = c;              }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,ZipStorer,The following statement contains a magic number: for (int i = 0; i < CrcTable.Length; i++)              {                  UInt32 c = (UInt32)i;                  for (int j = 0; j < 8; j++)                  {                      if ((c & 1) != 0)                          c = 3988292384 ^ (c >> 1);                      else                          c >>= 1;                  }                  CrcTable[i] = c;              }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length; )              {                  uint signature = BitConverter.ToUInt32(CentralDirImage' pointer);                  if (signature != 0x02014b50)                      break;                    bool encodeUTF8 = (BitConverter.ToUInt16(CentralDirImage' pointer + 8) & 0x0800) != 0;                  ushort method = BitConverter.ToUInt16(CentralDirImage' pointer + 10);                  uint modifyTime = BitConverter.ToUInt32(CentralDirImage' pointer + 12);                  uint crc32 = BitConverter.ToUInt32(CentralDirImage' pointer + 16);                  uint comprSize = BitConverter.ToUInt32(CentralDirImage' pointer + 20);                  uint fileSize = BitConverter.ToUInt32(CentralDirImage' pointer + 24);                  ushort filenameSize = BitConverter.ToUInt16(CentralDirImage' pointer + 28);                  ushort extraSize = BitConverter.ToUInt16(CentralDirImage' pointer + 30);                  ushort commentSize = BitConverter.ToUInt16(CentralDirImage' pointer + 32);                  uint headerOffset = BitConverter.ToUInt32(CentralDirImage' pointer + 42);                  uint headerSize = (uint)( 46 + filenameSize + extraSize + commentSize);                    Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;                    ZipFileEntry zfe = new ZipFileEntry();                  zfe.Method = (Compression)method;                  zfe.FilenameInZip = encoder.GetString(CentralDirImage' pointer + 46' filenameSize);                  zfe.FileOffset = GetFileOffset(headerOffset);                  zfe.FileSize = fileSize;                  zfe.CompressedSize = comprSize;                  zfe.HeaderOffset = headerOffset;                  zfe.HeaderSize = headerSize;                  zfe.Crc32 = crc32;                  zfe.ModifyTime = DosTimeToDateTime(modifyTime);                  if (commentSize > 0)                      zfe.Comment = encoder.GetString(CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);                    result.Add(zfe);                  pointer += (46 + filenameSize + extraSize + commentSize);              }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length; )              {                  uint signature = BitConverter.ToUInt32(CentralDirImage' pointer);                  if (signature != 0x02014b50)                      break;                    bool encodeUTF8 = (BitConverter.ToUInt16(CentralDirImage' pointer + 8) & 0x0800) != 0;                  ushort method = BitConverter.ToUInt16(CentralDirImage' pointer + 10);                  uint modifyTime = BitConverter.ToUInt32(CentralDirImage' pointer + 12);                  uint crc32 = BitConverter.ToUInt32(CentralDirImage' pointer + 16);                  uint comprSize = BitConverter.ToUInt32(CentralDirImage' pointer + 20);                  uint fileSize = BitConverter.ToUInt32(CentralDirImage' pointer + 24);                  ushort filenameSize = BitConverter.ToUInt16(CentralDirImage' pointer + 28);                  ushort extraSize = BitConverter.ToUInt16(CentralDirImage' pointer + 30);                  ushort commentSize = BitConverter.ToUInt16(CentralDirImage' pointer + 32);                  uint headerOffset = BitConverter.ToUInt32(CentralDirImage' pointer + 42);                  uint headerSize = (uint)( 46 + filenameSize + extraSize + commentSize);                    Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;                    ZipFileEntry zfe = new ZipFileEntry();                  zfe.Method = (Compression)method;                  zfe.FilenameInZip = encoder.GetString(CentralDirImage' pointer + 46' filenameSize);                  zfe.FileOffset = GetFileOffset(headerOffset);                  zfe.FileSize = fileSize;                  zfe.CompressedSize = comprSize;                  zfe.HeaderOffset = headerOffset;                  zfe.HeaderSize = headerSize;                  zfe.Crc32 = crc32;                  zfe.ModifyTime = DosTimeToDateTime(modifyTime);                  if (commentSize > 0)                      zfe.Comment = encoder.GetString(CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);                    result.Add(zfe);                  pointer += (46 + filenameSize + extraSize + commentSize);              }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length; )              {                  uint signature = BitConverter.ToUInt32(CentralDirImage' pointer);                  if (signature != 0x02014b50)                      break;                    bool encodeUTF8 = (BitConverter.ToUInt16(CentralDirImage' pointer + 8) & 0x0800) != 0;                  ushort method = BitConverter.ToUInt16(CentralDirImage' pointer + 10);                  uint modifyTime = BitConverter.ToUInt32(CentralDirImage' pointer + 12);                  uint crc32 = BitConverter.ToUInt32(CentralDirImage' pointer + 16);                  uint comprSize = BitConverter.ToUInt32(CentralDirImage' pointer + 20);                  uint fileSize = BitConverter.ToUInt32(CentralDirImage' pointer + 24);                  ushort filenameSize = BitConverter.ToUInt16(CentralDirImage' pointer + 28);                  ushort extraSize = BitConverter.ToUInt16(CentralDirImage' pointer + 30);                  ushort commentSize = BitConverter.ToUInt16(CentralDirImage' pointer + 32);                  uint headerOffset = BitConverter.ToUInt32(CentralDirImage' pointer + 42);                  uint headerSize = (uint)( 46 + filenameSize + extraSize + commentSize);                    Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;                    ZipFileEntry zfe = new ZipFileEntry();                  zfe.Method = (Compression)method;                  zfe.FilenameInZip = encoder.GetString(CentralDirImage' pointer + 46' filenameSize);                  zfe.FileOffset = GetFileOffset(headerOffset);                  zfe.FileSize = fileSize;                  zfe.CompressedSize = comprSize;                  zfe.HeaderOffset = headerOffset;                  zfe.HeaderSize = headerSize;                  zfe.Crc32 = crc32;                  zfe.ModifyTime = DosTimeToDateTime(modifyTime);                  if (commentSize > 0)                      zfe.Comment = encoder.GetString(CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);                    result.Add(zfe);                  pointer += (46 + filenameSize + extraSize + commentSize);              }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length; )              {                  uint signature = BitConverter.ToUInt32(CentralDirImage' pointer);                  if (signature != 0x02014b50)                      break;                    bool encodeUTF8 = (BitConverter.ToUInt16(CentralDirImage' pointer + 8) & 0x0800) != 0;                  ushort method = BitConverter.ToUInt16(CentralDirImage' pointer + 10);                  uint modifyTime = BitConverter.ToUInt32(CentralDirImage' pointer + 12);                  uint crc32 = BitConverter.ToUInt32(CentralDirImage' pointer + 16);                  uint comprSize = BitConverter.ToUInt32(CentralDirImage' pointer + 20);                  uint fileSize = BitConverter.ToUInt32(CentralDirImage' pointer + 24);                  ushort filenameSize = BitConverter.ToUInt16(CentralDirImage' pointer + 28);                  ushort extraSize = BitConverter.ToUInt16(CentralDirImage' pointer + 30);                  ushort commentSize = BitConverter.ToUInt16(CentralDirImage' pointer + 32);                  uint headerOffset = BitConverter.ToUInt32(CentralDirImage' pointer + 42);                  uint headerSize = (uint)( 46 + filenameSize + extraSize + commentSize);                    Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;                    ZipFileEntry zfe = new ZipFileEntry();                  zfe.Method = (Compression)method;                  zfe.FilenameInZip = encoder.GetString(CentralDirImage' pointer + 46' filenameSize);                  zfe.FileOffset = GetFileOffset(headerOffset);                  zfe.FileSize = fileSize;                  zfe.CompressedSize = comprSize;                  zfe.HeaderOffset = headerOffset;                  zfe.HeaderSize = headerSize;                  zfe.Crc32 = crc32;                  zfe.ModifyTime = DosTimeToDateTime(modifyTime);                  if (commentSize > 0)                      zfe.Comment = encoder.GetString(CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);                    result.Add(zfe);                  pointer += (46 + filenameSize + extraSize + commentSize);              }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length; )              {                  uint signature = BitConverter.ToUInt32(CentralDirImage' pointer);                  if (signature != 0x02014b50)                      break;                    bool encodeUTF8 = (BitConverter.ToUInt16(CentralDirImage' pointer + 8) & 0x0800) != 0;                  ushort method = BitConverter.ToUInt16(CentralDirImage' pointer + 10);                  uint modifyTime = BitConverter.ToUInt32(CentralDirImage' pointer + 12);                  uint crc32 = BitConverter.ToUInt32(CentralDirImage' pointer + 16);                  uint comprSize = BitConverter.ToUInt32(CentralDirImage' pointer + 20);                  uint fileSize = BitConverter.ToUInt32(CentralDirImage' pointer + 24);                  ushort filenameSize = BitConverter.ToUInt16(CentralDirImage' pointer + 28);                  ushort extraSize = BitConverter.ToUInt16(CentralDirImage' pointer + 30);                  ushort commentSize = BitConverter.ToUInt16(CentralDirImage' pointer + 32);                  uint headerOffset = BitConverter.ToUInt32(CentralDirImage' pointer + 42);                  uint headerSize = (uint)( 46 + filenameSize + extraSize + commentSize);                    Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;                    ZipFileEntry zfe = new ZipFileEntry();                  zfe.Method = (Compression)method;                  zfe.FilenameInZip = encoder.GetString(CentralDirImage' pointer + 46' filenameSize);                  zfe.FileOffset = GetFileOffset(headerOffset);                  zfe.FileSize = fileSize;                  zfe.CompressedSize = comprSize;                  zfe.HeaderOffset = headerOffset;                  zfe.HeaderSize = headerSize;                  zfe.Crc32 = crc32;                  zfe.ModifyTime = DosTimeToDateTime(modifyTime);                  if (commentSize > 0)                      zfe.Comment = encoder.GetString(CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);                    result.Add(zfe);                  pointer += (46 + filenameSize + extraSize + commentSize);              }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length; )              {                  uint signature = BitConverter.ToUInt32(CentralDirImage' pointer);                  if (signature != 0x02014b50)                      break;                    bool encodeUTF8 = (BitConverter.ToUInt16(CentralDirImage' pointer + 8) & 0x0800) != 0;                  ushort method = BitConverter.ToUInt16(CentralDirImage' pointer + 10);                  uint modifyTime = BitConverter.ToUInt32(CentralDirImage' pointer + 12);                  uint crc32 = BitConverter.ToUInt32(CentralDirImage' pointer + 16);                  uint comprSize = BitConverter.ToUInt32(CentralDirImage' pointer + 20);                  uint fileSize = BitConverter.ToUInt32(CentralDirImage' pointer + 24);                  ushort filenameSize = BitConverter.ToUInt16(CentralDirImage' pointer + 28);                  ushort extraSize = BitConverter.ToUInt16(CentralDirImage' pointer + 30);                  ushort commentSize = BitConverter.ToUInt16(CentralDirImage' pointer + 32);                  uint headerOffset = BitConverter.ToUInt32(CentralDirImage' pointer + 42);                  uint headerSize = (uint)( 46 + filenameSize + extraSize + commentSize);                    Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;                    ZipFileEntry zfe = new ZipFileEntry();                  zfe.Method = (Compression)method;                  zfe.FilenameInZip = encoder.GetString(CentralDirImage' pointer + 46' filenameSize);                  zfe.FileOffset = GetFileOffset(headerOffset);                  zfe.FileSize = fileSize;                  zfe.CompressedSize = comprSize;                  zfe.HeaderOffset = headerOffset;                  zfe.HeaderSize = headerSize;                  zfe.Crc32 = crc32;                  zfe.ModifyTime = DosTimeToDateTime(modifyTime);                  if (commentSize > 0)                      zfe.Comment = encoder.GetString(CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);                    result.Add(zfe);                  pointer += (46 + filenameSize + extraSize + commentSize);              }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length; )              {                  uint signature = BitConverter.ToUInt32(CentralDirImage' pointer);                  if (signature != 0x02014b50)                      break;                    bool encodeUTF8 = (BitConverter.ToUInt16(CentralDirImage' pointer + 8) & 0x0800) != 0;                  ushort method = BitConverter.ToUInt16(CentralDirImage' pointer + 10);                  uint modifyTime = BitConverter.ToUInt32(CentralDirImage' pointer + 12);                  uint crc32 = BitConverter.ToUInt32(CentralDirImage' pointer + 16);                  uint comprSize = BitConverter.ToUInt32(CentralDirImage' pointer + 20);                  uint fileSize = BitConverter.ToUInt32(CentralDirImage' pointer + 24);                  ushort filenameSize = BitConverter.ToUInt16(CentralDirImage' pointer + 28);                  ushort extraSize = BitConverter.ToUInt16(CentralDirImage' pointer + 30);                  ushort commentSize = BitConverter.ToUInt16(CentralDirImage' pointer + 32);                  uint headerOffset = BitConverter.ToUInt32(CentralDirImage' pointer + 42);                  uint headerSize = (uint)( 46 + filenameSize + extraSize + commentSize);                    Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;                    ZipFileEntry zfe = new ZipFileEntry();                  zfe.Method = (Compression)method;                  zfe.FilenameInZip = encoder.GetString(CentralDirImage' pointer + 46' filenameSize);                  zfe.FileOffset = GetFileOffset(headerOffset);                  zfe.FileSize = fileSize;                  zfe.CompressedSize = comprSize;                  zfe.HeaderOffset = headerOffset;                  zfe.HeaderSize = headerSize;                  zfe.Crc32 = crc32;                  zfe.ModifyTime = DosTimeToDateTime(modifyTime);                  if (commentSize > 0)                      zfe.Comment = encoder.GetString(CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);                    result.Add(zfe);                  pointer += (46 + filenameSize + extraSize + commentSize);              }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length; )              {                  uint signature = BitConverter.ToUInt32(CentralDirImage' pointer);                  if (signature != 0x02014b50)                      break;                    bool encodeUTF8 = (BitConverter.ToUInt16(CentralDirImage' pointer + 8) & 0x0800) != 0;                  ushort method = BitConverter.ToUInt16(CentralDirImage' pointer + 10);                  uint modifyTime = BitConverter.ToUInt32(CentralDirImage' pointer + 12);                  uint crc32 = BitConverter.ToUInt32(CentralDirImage' pointer + 16);                  uint comprSize = BitConverter.ToUInt32(CentralDirImage' pointer + 20);                  uint fileSize = BitConverter.ToUInt32(CentralDirImage' pointer + 24);                  ushort filenameSize = BitConverter.ToUInt16(CentralDirImage' pointer + 28);                  ushort extraSize = BitConverter.ToUInt16(CentralDirImage' pointer + 30);                  ushort commentSize = BitConverter.ToUInt16(CentralDirImage' pointer + 32);                  uint headerOffset = BitConverter.ToUInt32(CentralDirImage' pointer + 42);                  uint headerSize = (uint)( 46 + filenameSize + extraSize + commentSize);                    Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;                    ZipFileEntry zfe = new ZipFileEntry();                  zfe.Method = (Compression)method;                  zfe.FilenameInZip = encoder.GetString(CentralDirImage' pointer + 46' filenameSize);                  zfe.FileOffset = GetFileOffset(headerOffset);                  zfe.FileSize = fileSize;                  zfe.CompressedSize = comprSize;                  zfe.HeaderOffset = headerOffset;                  zfe.HeaderSize = headerSize;                  zfe.Crc32 = crc32;                  zfe.ModifyTime = DosTimeToDateTime(modifyTime);                  if (commentSize > 0)                      zfe.Comment = encoder.GetString(CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);                    result.Add(zfe);                  pointer += (46 + filenameSize + extraSize + commentSize);              }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length; )              {                  uint signature = BitConverter.ToUInt32(CentralDirImage' pointer);                  if (signature != 0x02014b50)                      break;                    bool encodeUTF8 = (BitConverter.ToUInt16(CentralDirImage' pointer + 8) & 0x0800) != 0;                  ushort method = BitConverter.ToUInt16(CentralDirImage' pointer + 10);                  uint modifyTime = BitConverter.ToUInt32(CentralDirImage' pointer + 12);                  uint crc32 = BitConverter.ToUInt32(CentralDirImage' pointer + 16);                  uint comprSize = BitConverter.ToUInt32(CentralDirImage' pointer + 20);                  uint fileSize = BitConverter.ToUInt32(CentralDirImage' pointer + 24);                  ushort filenameSize = BitConverter.ToUInt16(CentralDirImage' pointer + 28);                  ushort extraSize = BitConverter.ToUInt16(CentralDirImage' pointer + 30);                  ushort commentSize = BitConverter.ToUInt16(CentralDirImage' pointer + 32);                  uint headerOffset = BitConverter.ToUInt32(CentralDirImage' pointer + 42);                  uint headerSize = (uint)( 46 + filenameSize + extraSize + commentSize);                    Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;                    ZipFileEntry zfe = new ZipFileEntry();                  zfe.Method = (Compression)method;                  zfe.FilenameInZip = encoder.GetString(CentralDirImage' pointer + 46' filenameSize);                  zfe.FileOffset = GetFileOffset(headerOffset);                  zfe.FileSize = fileSize;                  zfe.CompressedSize = comprSize;                  zfe.HeaderOffset = headerOffset;                  zfe.HeaderSize = headerSize;                  zfe.Crc32 = crc32;                  zfe.ModifyTime = DosTimeToDateTime(modifyTime);                  if (commentSize > 0)                      zfe.Comment = encoder.GetString(CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);                    result.Add(zfe);                  pointer += (46 + filenameSize + extraSize + commentSize);              }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length; )              {                  uint signature = BitConverter.ToUInt32(CentralDirImage' pointer);                  if (signature != 0x02014b50)                      break;                    bool encodeUTF8 = (BitConverter.ToUInt16(CentralDirImage' pointer + 8) & 0x0800) != 0;                  ushort method = BitConverter.ToUInt16(CentralDirImage' pointer + 10);                  uint modifyTime = BitConverter.ToUInt32(CentralDirImage' pointer + 12);                  uint crc32 = BitConverter.ToUInt32(CentralDirImage' pointer + 16);                  uint comprSize = BitConverter.ToUInt32(CentralDirImage' pointer + 20);                  uint fileSize = BitConverter.ToUInt32(CentralDirImage' pointer + 24);                  ushort filenameSize = BitConverter.ToUInt16(CentralDirImage' pointer + 28);                  ushort extraSize = BitConverter.ToUInt16(CentralDirImage' pointer + 30);                  ushort commentSize = BitConverter.ToUInt16(CentralDirImage' pointer + 32);                  uint headerOffset = BitConverter.ToUInt32(CentralDirImage' pointer + 42);                  uint headerSize = (uint)( 46 + filenameSize + extraSize + commentSize);                    Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;                    ZipFileEntry zfe = new ZipFileEntry();                  zfe.Method = (Compression)method;                  zfe.FilenameInZip = encoder.GetString(CentralDirImage' pointer + 46' filenameSize);                  zfe.FileOffset = GetFileOffset(headerOffset);                  zfe.FileSize = fileSize;                  zfe.CompressedSize = comprSize;                  zfe.HeaderOffset = headerOffset;                  zfe.HeaderSize = headerSize;                  zfe.Crc32 = crc32;                  zfe.ModifyTime = DosTimeToDateTime(modifyTime);                  if (commentSize > 0)                      zfe.Comment = encoder.GetString(CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);                    result.Add(zfe);                  pointer += (46 + filenameSize + extraSize + commentSize);              }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length; )              {                  uint signature = BitConverter.ToUInt32(CentralDirImage' pointer);                  if (signature != 0x02014b50)                      break;                    bool encodeUTF8 = (BitConverter.ToUInt16(CentralDirImage' pointer + 8) & 0x0800) != 0;                  ushort method = BitConverter.ToUInt16(CentralDirImage' pointer + 10);                  uint modifyTime = BitConverter.ToUInt32(CentralDirImage' pointer + 12);                  uint crc32 = BitConverter.ToUInt32(CentralDirImage' pointer + 16);                  uint comprSize = BitConverter.ToUInt32(CentralDirImage' pointer + 20);                  uint fileSize = BitConverter.ToUInt32(CentralDirImage' pointer + 24);                  ushort filenameSize = BitConverter.ToUInt16(CentralDirImage' pointer + 28);                  ushort extraSize = BitConverter.ToUInt16(CentralDirImage' pointer + 30);                  ushort commentSize = BitConverter.ToUInt16(CentralDirImage' pointer + 32);                  uint headerOffset = BitConverter.ToUInt32(CentralDirImage' pointer + 42);                  uint headerSize = (uint)( 46 + filenameSize + extraSize + commentSize);                    Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;                    ZipFileEntry zfe = new ZipFileEntry();                  zfe.Method = (Compression)method;                  zfe.FilenameInZip = encoder.GetString(CentralDirImage' pointer + 46' filenameSize);                  zfe.FileOffset = GetFileOffset(headerOffset);                  zfe.FileSize = fileSize;                  zfe.CompressedSize = comprSize;                  zfe.HeaderOffset = headerOffset;                  zfe.HeaderSize = headerSize;                  zfe.Crc32 = crc32;                  zfe.ModifyTime = DosTimeToDateTime(modifyTime);                  if (commentSize > 0)                      zfe.Comment = encoder.GetString(CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);                    result.Add(zfe);                  pointer += (46 + filenameSize + extraSize + commentSize);              }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length; )              {                  uint signature = BitConverter.ToUInt32(CentralDirImage' pointer);                  if (signature != 0x02014b50)                      break;                    bool encodeUTF8 = (BitConverter.ToUInt16(CentralDirImage' pointer + 8) & 0x0800) != 0;                  ushort method = BitConverter.ToUInt16(CentralDirImage' pointer + 10);                  uint modifyTime = BitConverter.ToUInt32(CentralDirImage' pointer + 12);                  uint crc32 = BitConverter.ToUInt32(CentralDirImage' pointer + 16);                  uint comprSize = BitConverter.ToUInt32(CentralDirImage' pointer + 20);                  uint fileSize = BitConverter.ToUInt32(CentralDirImage' pointer + 24);                  ushort filenameSize = BitConverter.ToUInt16(CentralDirImage' pointer + 28);                  ushort extraSize = BitConverter.ToUInt16(CentralDirImage' pointer + 30);                  ushort commentSize = BitConverter.ToUInt16(CentralDirImage' pointer + 32);                  uint headerOffset = BitConverter.ToUInt32(CentralDirImage' pointer + 42);                  uint headerSize = (uint)( 46 + filenameSize + extraSize + commentSize);                    Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;                    ZipFileEntry zfe = new ZipFileEntry();                  zfe.Method = (Compression)method;                  zfe.FilenameInZip = encoder.GetString(CentralDirImage' pointer + 46' filenameSize);                  zfe.FileOffset = GetFileOffset(headerOffset);                  zfe.FileSize = fileSize;                  zfe.CompressedSize = comprSize;                  zfe.HeaderOffset = headerOffset;                  zfe.HeaderSize = headerSize;                  zfe.Crc32 = crc32;                  zfe.ModifyTime = DosTimeToDateTime(modifyTime);                  if (commentSize > 0)                      zfe.Comment = encoder.GetString(CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);                    result.Add(zfe);                  pointer += (46 + filenameSize + extraSize + commentSize);              }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length; )              {                  uint signature = BitConverter.ToUInt32(CentralDirImage' pointer);                  if (signature != 0x02014b50)                      break;                    bool encodeUTF8 = (BitConverter.ToUInt16(CentralDirImage' pointer + 8) & 0x0800) != 0;                  ushort method = BitConverter.ToUInt16(CentralDirImage' pointer + 10);                  uint modifyTime = BitConverter.ToUInt32(CentralDirImage' pointer + 12);                  uint crc32 = BitConverter.ToUInt32(CentralDirImage' pointer + 16);                  uint comprSize = BitConverter.ToUInt32(CentralDirImage' pointer + 20);                  uint fileSize = BitConverter.ToUInt32(CentralDirImage' pointer + 24);                  ushort filenameSize = BitConverter.ToUInt16(CentralDirImage' pointer + 28);                  ushort extraSize = BitConverter.ToUInt16(CentralDirImage' pointer + 30);                  ushort commentSize = BitConverter.ToUInt16(CentralDirImage' pointer + 32);                  uint headerOffset = BitConverter.ToUInt32(CentralDirImage' pointer + 42);                  uint headerSize = (uint)( 46 + filenameSize + extraSize + commentSize);                    Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;                    ZipFileEntry zfe = new ZipFileEntry();                  zfe.Method = (Compression)method;                  zfe.FilenameInZip = encoder.GetString(CentralDirImage' pointer + 46' filenameSize);                  zfe.FileOffset = GetFileOffset(headerOffset);                  zfe.FileSize = fileSize;                  zfe.CompressedSize = comprSize;                  zfe.HeaderOffset = headerOffset;                  zfe.HeaderSize = headerSize;                  zfe.Crc32 = crc32;                  zfe.ModifyTime = DosTimeToDateTime(modifyTime);                  if (commentSize > 0)                      zfe.Comment = encoder.GetString(CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);                    result.Add(zfe);                  pointer += (46 + filenameSize + extraSize + commentSize);              }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,ReadCentralDir,The following statement contains a magic number: for (int pointer = 0; pointer < this.CentralDirImage.Length; )              {                  uint signature = BitConverter.ToUInt32(CentralDirImage' pointer);                  if (signature != 0x02014b50)                      break;                    bool encodeUTF8 = (BitConverter.ToUInt16(CentralDirImage' pointer + 8) & 0x0800) != 0;                  ushort method = BitConverter.ToUInt16(CentralDirImage' pointer + 10);                  uint modifyTime = BitConverter.ToUInt32(CentralDirImage' pointer + 12);                  uint crc32 = BitConverter.ToUInt32(CentralDirImage' pointer + 16);                  uint comprSize = BitConverter.ToUInt32(CentralDirImage' pointer + 20);                  uint fileSize = BitConverter.ToUInt32(CentralDirImage' pointer + 24);                  ushort filenameSize = BitConverter.ToUInt16(CentralDirImage' pointer + 28);                  ushort extraSize = BitConverter.ToUInt16(CentralDirImage' pointer + 30);                  ushort commentSize = BitConverter.ToUInt16(CentralDirImage' pointer + 32);                  uint headerOffset = BitConverter.ToUInt32(CentralDirImage' pointer + 42);                  uint headerSize = (uint)( 46 + filenameSize + extraSize + commentSize);                    Encoding encoder = encodeUTF8 ? Encoding.UTF8 : DefaultEncoding;                    ZipFileEntry zfe = new ZipFileEntry();                  zfe.Method = (Compression)method;                  zfe.FilenameInZip = encoder.GetString(CentralDirImage' pointer + 46' filenameSize);                  zfe.FileOffset = GetFileOffset(headerOffset);                  zfe.FileSize = fileSize;                  zfe.CompressedSize = comprSize;                  zfe.HeaderOffset = headerOffset;                  zfe.HeaderSize = headerSize;                  zfe.Crc32 = crc32;                  zfe.ModifyTime = DosTimeToDateTime(modifyTime);                  if (commentSize > 0)                      zfe.Comment = encoder.GetString(CentralDirImage' pointer + 46 + filenameSize + extraSize' commentSize);                    result.Add(zfe);                  pointer += (46 + filenameSize + extraSize + commentSize);              }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,ExtractFile,The following statement contains a magic number: byte[] signature = new byte[4];
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,ExtractFile,The following statement contains a magic number: this.ZipFileStream.Read(signature' 0' 4);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,ExtractFile,The following statement contains a magic number: byte[] buffer = new byte[16384];
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,GetFileOffset,The following statement contains a magic number: byte[] buffer = new byte[2];
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,GetFileOffset,The following statement contains a magic number: this.ZipFileStream.Seek(_headerOffset + 26' SeekOrigin.Begin);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,GetFileOffset,The following statement contains a magic number: this.ZipFileStream.Read(buffer' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,GetFileOffset,The following statement contains a magic number: this.ZipFileStream.Read(buffer' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,GetFileOffset,The following statement contains a magic number: return (uint)(30 + filenameSize + extraSize + _headerOffset);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 3' 4' 20' 0}' 0' 6);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 3' 4' 20' 0}' 0' 6);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 3' 4' 20' 0}' 0' 6);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 3' 4' 20' 0}' 0' 6);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 3' 4' 20' 0}' 0' 6);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 3' 4' 20' 0}' 0' 6);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)(_zfe.EncodeUTF8 ? 0x0800 : 0))' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)_zfe.Method)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes(DateTimeToDosTime(_zfe.ModifyTime))' 0' 4);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0 }' 0' 12);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)encodedFilename.Length)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteLocalHeader,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)0)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 1' 2' 23' 0xB' 20' 0 }' 0' 8);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 1' 2' 23' 0xB' 20' 0 }' 0' 8);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 1' 2' 23' 0xB' 20' 0 }' 0' 8);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 1' 2' 23' 0xB' 20' 0 }' 0' 8);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 1' 2' 23' 0xB' 20' 0 }' 0' 8);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 1' 2' 23' 0xB' 20' 0 }' 0' 8);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)(_zfe.EncodeUTF8 ? 0x0800 : 0))' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)_zfe.Method)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes(DateTimeToDosTime(_zfe.ModifyTime))' 0' 4);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes(_zfe.Crc32)' 0' 4);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes(_zfe.CompressedSize)' 0' 4);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes(_zfe.FileSize)' 0' 4);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)encodedFilename.Length)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)0)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)encodedComment.Length)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)0)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)0)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)0)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)0x8100)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteCentralDirRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes(_zfe.HeaderOffset)' 0' 4);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteEndRecord,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 5' 6' 0' 0' 0' 0 }' 0' 8);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteEndRecord,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 5' 6' 0' 0' 0' 0 }' 0' 8);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteEndRecord,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 5' 6' 0' 0' 0' 0 }' 0' 8);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteEndRecord,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 5' 6' 0' 0' 0' 0 }' 0' 8);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteEndRecord,The following statement contains a magic number: this.ZipFileStream.Write(new byte[] { 80' 75' 5' 6' 0' 0' 0' 0 }' 0' 8);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteEndRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)Files.Count+ExistingFiles)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteEndRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)Files.Count+ExistingFiles)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteEndRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes(_size)' 0' 4);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteEndRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes(_offset)' 0' 4);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,WriteEndRecord,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)encodedComment.Length)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,Store,The following statement contains a magic number: byte[] buffer = new byte[16384];
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,Store,The following statement contains a magic number: do              {                  bytesRead = _source.Read(buffer' 0' buffer.Length);                  totalRead += (uint)bytesRead;                  if (bytesRead > 0)                  {                      outStream.Write(buffer' 0' bytesRead);                        for (uint i = 0; i < bytesRead; i++)                      {                          _zfe.Crc32 = ZipStorer.CrcTable[(_zfe.Crc32 ^ buffer[i]) & 0xFF] ^ (_zfe.Crc32 >> 8);                      }                  }              } while (bytesRead == buffer.Length);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,DateTimeToDosTime,The following statement contains a magic number: return (uint)(                  (_dt.Second / 2) | (_dt.Minute << 5) | (_dt.Hour << 11) |                   (_dt.Day<<16) | (_dt.Month << 21) | ((_dt.Year - 1980) << 25));
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,DateTimeToDosTime,The following statement contains a magic number: return (uint)(                  (_dt.Second / 2) | (_dt.Minute << 5) | (_dt.Hour << 11) |                   (_dt.Day<<16) | (_dt.Month << 21) | ((_dt.Year - 1980) << 25));
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,DateTimeToDosTime,The following statement contains a magic number: return (uint)(                  (_dt.Second / 2) | (_dt.Minute << 5) | (_dt.Hour << 11) |                   (_dt.Day<<16) | (_dt.Month << 21) | ((_dt.Year - 1980) << 25));
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,DateTimeToDosTime,The following statement contains a magic number: return (uint)(                  (_dt.Second / 2) | (_dt.Minute << 5) | (_dt.Hour << 11) |                   (_dt.Day<<16) | (_dt.Month << 21) | ((_dt.Year - 1980) << 25));
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,DateTimeToDosTime,The following statement contains a magic number: return (uint)(                  (_dt.Second / 2) | (_dt.Minute << 5) | (_dt.Hour << 11) |                   (_dt.Day<<16) | (_dt.Month << 21) | ((_dt.Year - 1980) << 25));
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,DateTimeToDosTime,The following statement contains a magic number: return (uint)(                  (_dt.Second / 2) | (_dt.Minute << 5) | (_dt.Hour << 11) |                   (_dt.Day<<16) | (_dt.Month << 21) | ((_dt.Year - 1980) << 25));
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,DateTimeToDosTime,The following statement contains a magic number: return (uint)(                  (_dt.Second / 2) | (_dt.Minute << 5) | (_dt.Hour << 11) |                   (_dt.Day<<16) | (_dt.Month << 21) | ((_dt.Year - 1980) << 25));
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime(                  (int)(_dt >> 25) + 1980'                  (int)(_dt >> 21) & 15'                  (int)(_dt >> 16) & 31'                  (int)(_dt >> 11) & 31'                  (int)(_dt >> 5) & 63'                  (int)(_dt & 31) * 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime(                  (int)(_dt >> 25) + 1980'                  (int)(_dt >> 21) & 15'                  (int)(_dt >> 16) & 31'                  (int)(_dt >> 11) & 31'                  (int)(_dt >> 5) & 63'                  (int)(_dt & 31) * 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime(                  (int)(_dt >> 25) + 1980'                  (int)(_dt >> 21) & 15'                  (int)(_dt >> 16) & 31'                  (int)(_dt >> 11) & 31'                  (int)(_dt >> 5) & 63'                  (int)(_dt & 31) * 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime(                  (int)(_dt >> 25) + 1980'                  (int)(_dt >> 21) & 15'                  (int)(_dt >> 16) & 31'                  (int)(_dt >> 11) & 31'                  (int)(_dt >> 5) & 63'                  (int)(_dt & 31) * 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime(                  (int)(_dt >> 25) + 1980'                  (int)(_dt >> 21) & 15'                  (int)(_dt >> 16) & 31'                  (int)(_dt >> 11) & 31'                  (int)(_dt >> 5) & 63'                  (int)(_dt & 31) * 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime(                  (int)(_dt >> 25) + 1980'                  (int)(_dt >> 21) & 15'                  (int)(_dt >> 16) & 31'                  (int)(_dt >> 11) & 31'                  (int)(_dt >> 5) & 63'                  (int)(_dt & 31) * 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime(                  (int)(_dt >> 25) + 1980'                  (int)(_dt >> 21) & 15'                  (int)(_dt >> 16) & 31'                  (int)(_dt >> 11) & 31'                  (int)(_dt >> 5) & 63'                  (int)(_dt & 31) * 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime(                  (int)(_dt >> 25) + 1980'                  (int)(_dt >> 21) & 15'                  (int)(_dt >> 16) & 31'                  (int)(_dt >> 11) & 31'                  (int)(_dt >> 5) & 63'                  (int)(_dt & 31) * 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime(                  (int)(_dt >> 25) + 1980'                  (int)(_dt >> 21) & 15'                  (int)(_dt >> 16) & 31'                  (int)(_dt >> 11) & 31'                  (int)(_dt >> 5) & 63'                  (int)(_dt & 31) * 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime(                  (int)(_dt >> 25) + 1980'                  (int)(_dt >> 21) & 15'                  (int)(_dt >> 16) & 31'                  (int)(_dt >> 11) & 31'                  (int)(_dt >> 5) & 63'                  (int)(_dt & 31) * 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime(                  (int)(_dt >> 25) + 1980'                  (int)(_dt >> 21) & 15'                  (int)(_dt >> 16) & 31'                  (int)(_dt >> 11) & 31'                  (int)(_dt >> 5) & 63'                  (int)(_dt & 31) * 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,DosTimeToDateTime,The following statement contains a magic number: return new DateTime(                  (int)(_dt >> 25) + 1980'                  (int)(_dt >> 21) & 15'                  (int)(_dt >> 16) & 31'                  (int)(_dt >> 11) & 31'                  (int)(_dt >> 5) & 63'                  (int)(_dt & 31) * 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,UpdateCrcAndSizes,The following statement contains a magic number: this.ZipFileStream.Position = _zfe.HeaderOffset + 8;
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,UpdateCrcAndSizes,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes((ushort)_zfe.Method)' 0' 2);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,UpdateCrcAndSizes,The following statement contains a magic number: this.ZipFileStream.Position = _zfe.HeaderOffset + 14;
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,UpdateCrcAndSizes,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes(_zfe.Crc32)' 0' 4);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,UpdateCrcAndSizes,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes(_zfe.CompressedSize)' 0' 4);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,UpdateCrcAndSizes,The following statement contains a magic number: this.ZipFileStream.Write(BitConverter.GetBytes(_zfe.FileSize)' 0' 4);
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,ReadFileInfo,The following statement contains a magic number: if (this.ZipFileStream.Length < 22)                  return false;
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,ReadFileInfo,The following statement contains a magic number: try              {                  this.ZipFileStream.Seek(-17' SeekOrigin.End);                  BinaryReader br = new BinaryReader(this.ZipFileStream);                  do                  {                      this.ZipFileStream.Seek(-5' SeekOrigin.Current);                      UInt32 sig = br.ReadUInt32();                      if (sig == 0x06054b50)                      {                          this.ZipFileStream.Seek(6' SeekOrigin.Current);                            UInt16 entries = br.ReadUInt16();                          Int32 centralSize = br.ReadInt32();                          UInt32 centralDirOffset = br.ReadUInt32();                          UInt16 commentSize = br.ReadUInt16();                            // check if comment field is the very last data in file                          if (this.ZipFileStream.Position + commentSize != this.ZipFileStream.Length)                              return false;                            // Copy entire central directory to a memory buffer                          this.ExistingFiles = entries;                          this.CentralDirImage = new byte[centralSize];                          this.ZipFileStream.Seek(centralDirOffset' SeekOrigin.Begin);                          this.ZipFileStream.Read(this.CentralDirImage' 0' centralSize);                            // Leave the pointer at the begining of central dir' to append new files                          this.ZipFileStream.Seek(centralDirOffset' SeekOrigin.Begin);                          return true;                      }                  } while (this.ZipFileStream.Position > 0);              }              catch { }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,ReadFileInfo,The following statement contains a magic number: try              {                  this.ZipFileStream.Seek(-17' SeekOrigin.End);                  BinaryReader br = new BinaryReader(this.ZipFileStream);                  do                  {                      this.ZipFileStream.Seek(-5' SeekOrigin.Current);                      UInt32 sig = br.ReadUInt32();                      if (sig == 0x06054b50)                      {                          this.ZipFileStream.Seek(6' SeekOrigin.Current);                            UInt16 entries = br.ReadUInt16();                          Int32 centralSize = br.ReadInt32();                          UInt32 centralDirOffset = br.ReadUInt32();                          UInt16 commentSize = br.ReadUInt16();                            // check if comment field is the very last data in file                          if (this.ZipFileStream.Position + commentSize != this.ZipFileStream.Length)                              return false;                            // Copy entire central directory to a memory buffer                          this.ExistingFiles = entries;                          this.CentralDirImage = new byte[centralSize];                          this.ZipFileStream.Seek(centralDirOffset' SeekOrigin.Begin);                          this.ZipFileStream.Read(this.CentralDirImage' 0' centralSize);                            // Leave the pointer at the begining of central dir' to append new files                          this.ZipFileStream.Seek(centralDirOffset' SeekOrigin.Begin);                          return true;                      }                  } while (this.ZipFileStream.Position > 0);              }              catch { }
Magic Number,System.IO.Compression,ZipStorer,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET\ZipStorer.cs,ReadFileInfo,The following statement contains a magic number: try              {                  this.ZipFileStream.Seek(-17' SeekOrigin.End);                  BinaryReader br = new BinaryReader(this.ZipFileStream);                  do                  {                      this.ZipFileStream.Seek(-5' SeekOrigin.Current);                      UInt32 sig = br.ReadUInt32();                      if (sig == 0x06054b50)                      {                          this.ZipFileStream.Seek(6' SeekOrigin.Current);                            UInt16 entries = br.ReadUInt16();                          Int32 centralSize = br.ReadInt32();                          UInt32 centralDirOffset = br.ReadUInt32();                          UInt16 commentSize = br.ReadUInt16();                            // check if comment field is the very last data in file                          if (this.ZipFileStream.Position + commentSize != this.ZipFileStream.Length)                              return false;                            // Copy entire central directory to a memory buffer                          this.ExistingFiles = entries;                          this.CentralDirImage = new byte[centralSize];                          this.ZipFileStream.Seek(centralDirOffset' SeekOrigin.Begin);                          this.ZipFileStream.Read(this.CentralDirImage' 0' centralSize);                            // Leave the pointer at the begining of central dir' to append new files                          this.ZipFileStream.Seek(centralDirOffset' SeekOrigin.Begin);                          return true;                      }                  } while (this.ZipFileStream.Position > 0);              }              catch { }
Duplicate Code,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetLatLngFromGeocoderUrl,The method contains a code clone-set at the following line numbers (starting from the method definition): ((45' 70)' (112' 137))
Duplicate Code,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetPlacemarkFromReverseGeocoderUrl,The method contains a code clone-set at the following line numbers (starting from the method definition): ((53' 77)' (108' 132)' (170' 194))
Duplicate Code,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetPlacemarkFromReverseGeocoderUrl,The method contains a code clone-set at the following line numbers (starting from the method definition): ((108' 134)' (170' 196))
Duplicate Code,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetPlacemarkFromReverseGeocoderUrl,The method contains a code clone-set at the following line numbers (starting from the method definition): ((54' 73)' (109' 128)' (171' 190)' (283' 302))
Duplicate Code,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetPlacemarkFromReverseGeocoderUrl,The method contains a code clone-set at the following line numbers (starting from the method definition): ((54' 77)' (283' 306))
Duplicate Code,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetPlacemarkFromReverseGeocoderUrl,The method contains a code clone-set at the following line numbers (starting from the method definition): ((109' 134)' (283' 308)' (171' 196))
Duplicate Code,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetPlacemarkFromReverseGeocoderUrl,The method contains a code clone-set at the following line numbers (starting from the method definition): ((58' 77)' (113' 132)' (175' 194)' (231' 250)' (287' 306))
Duplicate Code,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetPlacemarkFromReverseGeocoderUrl,The method contains a code clone-set at the following line numbers (starting from the method definition): ((58' 77)' (231' 250))
Duplicate Code,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetPlacemarkFromReverseGeocoderUrl,The method contains a code clone-set at the following line numbers (starting from the method definition): ((113' 134)' (231' 252)' (287' 308))
Duplicate Code,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetPlacemarkFromReverseGeocoderUrl,The method contains a code clone-set at the following line numbers (starting from the method definition): ((175' 202)' (231' 258))
Duplicate Code,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetPlacemarkFromReverseGeocoderUrl,The method contains a code clone-set at the following line numbers (starting from the method definition): ((115' 134)' (177' 196)' (233' 252)' (289' 308)' (339' 358))
Duplicate Code,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetPlacemarkFromReverseGeocoderUrl,The method contains a code clone-set at the following line numbers (starting from the method definition): ((115' 134)' (339' 358)' (177' 196)' (233' 252)' (289' 308))
Duplicate Code,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetPlacemarkFromReverseGeocoderUrl,The method contains a code clone-set at the following line numbers (starting from the method definition): ((311' 335)' (361' 385))
Missing Default,GMap.NET.Internals,SocksHttpWebResponse,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Internals\SocksProxySocket\SocksHttpWebRequest.cs,SocksHttpWebResponse,The following switch statement is missing a default case: switch (headerEntry[0])                  {                      case "Content-Type":                      {                          ContentType = headerEntry[1];                      }                      break;                        case "Content-Length":                      {                          long r = 0;                          if(long.TryParse(headerEntry[1]' out r))                          {                            ContentLength = r;                          }                      }                      break;                  }
Missing Default,GMap.NET.MapProviders,GoogleMapProviderBase,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.MapProviders\Google\GoogleMapProvider.cs,GetPlacemarkFromReverseGeocoderUrl,The following switch statement is missing a default case: switch (type)                                                          {                                                              case "street_address":                                                              {                                                                  ret.StreetNumber = nn.InnerText;                                                              }                                                              break;                                                                case "route":                                                              {                                                                  ret.ThoroughfareName = nn.InnerText;                                                              }                                                              break;                                                                case "postal_code":                                                              {                                                                  ret.PostalCodeNumber = nn.InnerText;                                                              }                                                              break;                                                                case "country":                                                              {                                                                  ret.CountryName = nn.InnerText;                                                              }                                                              break;                                                                case "locality":                                                              {                                                                  ret.LocalityName = nn.InnerText;                                                              }                                                              break;                                                                case "administrative_area_level_2":                                                              {                                                                ret.DistrictName = nn.InnerText;                                                              }                                                              break;                                                                case "administrative_area_level_1":                                                              {                                                                  ret.AdministrativeAreaName = nn.InnerText;                                                              }                                                              break;                                                                case "administrative_area_level_3":                                                              {                                                                  ret.SubAdministrativeAreaName = nn.InnerText;                                                              }                                                              break;                                                                case "neighborhood":                                                              {                                                                  ret.Neighborhood = nn.InnerText;                                                              }                                                              break;                                                          }
Missing Default,GMap.NET.Projections,LKS94rProjection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTReliefProjection.cs,GetTileMatrixResolution,The following switch statement is missing a default case: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
Missing Default,GMap.NET.Projections,PlateCarreeProjectionDarbAe,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\PlateCarreeProjectionDarbAe.cs,GetTileMatrixResolution,The following switch statement is missing a default case: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 0.0118973050291514;              }              break;                case 1:              {                 ret = 0.0059486525145757;              }              break;                case 2:              {                 ret = 0.00297432625728785;              }              break;                case 3:              {                 ret = 0.00118973050291514;              }              break;                case 4:              {                 ret = 0.00059486525145757;              }              break;                case 5:              {                 ret = 0.000356919150874542;              }              break;                case 6:              {                 ret = 0.000178459575437271;              }              break;                case 7:              {                 ret = 0.000118973050291514;              }              break;                case 8:              {                 ret = 5.9486525145757E-05;              }              break;                case 9:              {                 ret = 3.56919150874542E-05;              }              break;                case 10:              {                 ret = 1.90356880466422E-05;              }              break;                case 11:              {                 ret = 9.51784402332112E-06;              }              break;                case 12:              {                 ret = 4.75892201166056E-06;              }              break;              #endregion           }
Missing Default,GMap.NET.Projections,LKS92Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLVProjection.cs,GetTileMatrixResolution,The following switch statement is missing a default case: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }              break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;              #endregion           }
Missing Default,GMap.NET.Projections,LKS94Projection,C:\repos\radioman_greatmaps\GMap.NET.Core\GMap.NET.Projections\MapsLTProjection.cs,GetTileMatrixResolution,The following switch statement is missing a default case: switch(zoom)           {              #region -- sizes --              case 0:              {                 ret = 1587.5031750063501;              }                   break;                case 1:              {                 ret = 793.7515875031751;              }              break;                case 2:              {                 ret = 529.1677250021168;              }              break;                case 3:              {                 ret = 264.5838625010584;              }              break;                case 4:              {                 ret = 132.2919312505292;              }              break;                case 5:              {                 ret = 52.91677250021167;              }              break;                case 6:              {                 ret = 26.458386250105836;              }              break;                case 7:              {                 ret = 13.229193125052918;              }              break;                case 8:              {                 ret = 6.614596562526459;              }              break;                case 9:              {                 ret = 2.6458386250105836;              }              break;                case 10:              {                 ret = 1.3229193125052918;              }              break;                case 11:              {                 ret = 0.5291677250021167;              }              break;                case 12:              {                 ret = 0.26458386250105836;              }              break;              #endregion           }
