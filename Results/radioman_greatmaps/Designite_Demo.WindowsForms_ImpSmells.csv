Implementation smell,Namespace,Class,File,Method,Description
Long Method,BSE.Windows.Forms,Panel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\Panel.cs,OnPaint,The method has 135 lines of code.
Long Method,BSE.Windows.Forms,XPanderPanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\XPanderPanel.cs,DrawCaptionbar,The method has 106 lines of code.
Long Method,BSE.Windows.Forms,XPanderPanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\XPanderPanel.cs,DrawBorders,The method has 117 lines of code.
Long Method,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,MainForm,The method has 166 lines of code.
Long Method,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,connectionsWorker_DoWork,The method has 114 lines of code.
Long Method,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,connectionsWorker_ProgressChanged,The method has 180 lines of code.
Long Method,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The method has 1482 lines of code.
Long Method,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,bg_DoWork,The method has 271 lines of code.
Long Method,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The method has 124 lines of code.
Long Method,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetRoutesFromMobileLog,The method has 103 lines of code.
Long Method,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetVilniusTransportData,The method has 146 lines of code.
Complex Method,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,OnMouseMove,Cyclomatic complexity of the method is 8
Complex Method,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,DrawImagesAndText,Cyclomatic complexity of the method is 10
Complex Method,BSE.Windows.Forms,XPanderPanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\XPanderPanel.cs,DrawCaptionbar,Cyclomatic complexity of the method is 9
Complex Method,BSE.Windows.Forms,XPanderPanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\XPanderPanel.cs,CalculatePanelHeights,Cyclomatic complexity of the method is 9
Complex Method,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,iptracerWorker_DoWork,Cyclomatic complexity of the method is 13
Complex Method,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,AddGpsMobileLogRoutes,Cyclomatic complexity of the method is 8
Complex Method,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,RealTimeChanged,Cyclomatic complexity of the method is 8
Complex Method,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetVilniusTransportData,Cyclomatic complexity of the method is 8
Long Parameter List,BSE.Windows.Forms,ProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ProgressBar.cs,DrawProgressBar,The method has 9 parameters. Parameters: graphics' clientRectangle' colorBackgroundEnd' colorValueEnd' borderColor' rightToLeft' iMinimum' iMaximum' iValue
Long Parameter List,BSE.Windows.Forms,ProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ProgressBar.cs,GetRectangleValue,The method has 5 parameters. Parameters: backgroundRectangle' rightToLeft' iMinimum' iMaximum' iValue
Long Parameter List,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,RenderOverflowButtonLine,The method has 6 parameters. Parameters: graphics' color' x1' y1' x2' y2
Long Parameter List,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,DrawString,The method has 7 parameters. Parameters: graphics' layoutRectangle' font' fontColor' strText' rightToLeft' stringAlignment
Long Parameter List,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,DrawIcon,The method has 5 parameters. Parameters: graphics' imgPanelIcon' imageRectangle' foreColorImage' iconPositionY
Long Parameter List,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,DrawImagesAndText,The method has 9 parameters. Parameters: graphics' captionRectangle' iSpacing' imageRectangle' image' rightToLeft' fontCaption' captionForeColor' strCaptionText
Long Parameter List,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,DrawImagesAndText,The method has 18 parameters. Parameters: graphics' captionRectangle' iSpacing' imageRectangle' image' rightToLeft' bIsClosable' bShowCloseIcon' imageClosePanel' foreColorCloseIcon' rectangleImageClosePanel' bShowExpandIcon' imageExandPanel' foreColorExpandIcon' rectangleImageExandPanel' fontCaption' captionForeColor' strCaptionText
Long Parameter List,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,DrawImagesAndText,The method has 21 parameters. Parameters: graphics' dockStyle' iSpacing' captionRectangle' panelRectangle' imageRectangle' image' rightToLeft' bShowCloseIcon' imageClosePanel' foreColorCloseIcon' rectangleImageClosePanel' bShowExpandIcon' bIsExpanded' imageExandPanel' foreColorExpandPanel' rectangleImageExandPanel' fontCaption' captionForeColor' collapsedForeColor' strCaptionText
Long Parameter List,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,RenderDoubleBackgroundGradient,The method has 7 parameters. Parameters: graphics' bounds' beginColor' middleColor' endColor' linearGradientMode' flipHorizontal
Long Parameter List,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,RenderBackgroundGradient,The method has 5 parameters. Parameters: graphics' bounds' beginColor' endColor' linearGradientMode
Long Parameter List,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,RenderButtonBackground,The method has 5 parameters. Parameters: graphics' bounds' colorGradientBegin' colorGradientMiddle' colorGradientEnd
Long Parameter List,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,RenderFlatButtonBackground,The method has 5 parameters. Parameters: graphics' bounds' colorGradientBegin' colorGradientEnd' bHover
Long Parameter List,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,RenderDoubleBackgroundGradient,The method has 9 parameters. Parameters: graphics' bounds' beginColor' middleColor' endColor' firstGradientWidth' secondGradientWidth' mode' flipHorizontal
Long Parameter List,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,DrawVerticalImagesAndText,The method has 13 parameters. Parameters: graphics' captionRectangle' panelRectangle' imageRectangle' dockStyle' image' rightToLeft' imageExandPanel' foreColorExpandPanel' rectangleImageExandPanel' captionFont' collapsedCaptionForeColor' strCaptionText
Long Parameter List,BSE.Windows.Forms,Panel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\Panel.cs,DrawStyleDefault,The method has 5 parameters. Parameters: graphics' captionRectangle' colorGradientBegin' colorGradientEnd' colorGradientMiddle
Long Parameter List,BSE.Windows.Forms,Panel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\Panel.cs,DrawBorder,The method has 5 parameters. Parameters: graphics' panelRectangle' captionRectangle' borderColor' innerBorderColor
Long Parameter List,Demo.WindowsForms,MapInfo,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,MapInfo,The method has 5 parameters. Parameters: Area' Zoom' Type' makeWorldFile' MakeKmz
Long Parameter List,Demo.WindowsForms,IpHelper,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\Program.cs,GetExtendedTcpTable,The method has 6 parameters. Parameters: tcpTable' tcpTableLength' sort' ipVersion' tcpTableType' reserved
Long Identifier,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,,The length of the parameter m_strToolTipTextExpandIconPanelExpanded is 39.
Long Identifier,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,,The length of the parameter m_strToolTipTextExpandIconPanelCollapsed is 40.
Long Identifier,BSE.Windows.Forms,CustomPanelColors,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\CustomPanelColors.cs,,The length of the parameter m_captionSelectedGradientBegin is 30.
Long Identifier,BSE.Windows.Forms,CustomXPanderPanelColors,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\CustomXPanderPanelColors.cs,,The length of the parameter m_captionPressedGradientMiddle is 30.
Long Identifier,BSE.Windows.Forms,CustomXPanderPanelColors,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\CustomXPanderPanelColors.cs,,The length of the parameter m_captionCheckedGradientMiddle is 30.
Long Identifier,BSE.Windows.Forms,CustomXPanderPanelColors,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\CustomXPanderPanelColors.cs,,The length of the parameter m_captionSelectedGradientBegin is 30.
Long Identifier,BSE.Windows.Forms,CustomXPanderPanelColors,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\CustomXPanderPanelColors.cs,,The length of the parameter m_captionSelectedGradientMiddle is 31.
Long Identifier,BSE.Windows.Forms,Panel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\Panel.cs,OnPaint,The length of the parameter bShowXPanderPanelProfessionalStyle is 34.
Long Identifier,BSE.Windows.Forms,Panel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\Panel.cs,,The length of the parameter m_bShowXPanderPanelProfessionalStyle is 36.
Long Identifier,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetRoutesFromMobileLog,The length of the parameter maxPositionDilutionOfPrecision is 30.
Long Statement,BSE.Windows.Forms,ProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ProgressBar.cs,GetValuePath,The length of the statement  "                graphicsPath.AddArc(x + width - radius' y + radius + height - (2 * radius)' radius' radius' 360' 90); // Lower right corner " is 123.
Long Statement,BSE.Windows.Forms,ProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ProgressBar.cs,GetGradientBackBrush,The length of the statement  "            LinearGradientBrush linearGradientBrush = linearGradientBrush = new LinearGradientBrush(bounds' Color.White' backColor' LinearGradientMode.Vertical); " is 149.
Long Statement,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderSplitButtonBackground,The length of the statement  "                            base.DrawArrow(new ToolStripArrowRenderEventArgs(graphics' item' dropDownButtonBounds' colorTable.MenuItemText' ArrowDirection.Down)); " is 134.
Long Statement,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderSplitButtonBackground,The length of the statement  "                            base.DrawArrow(new ToolStripArrowRenderEventArgs(graphics' item' dropDownButtonBounds' colorTable.StatusStripText' ArrowDirection.Down)); " is 137.
Long Statement,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderSplitButtonBackground,The length of the statement  "                            base.DrawArrow(new ToolStripArrowRenderEventArgs(graphics' item' dropDownButtonBounds' colorTable.ToolStripText' ArrowDirection.Down)); " is 135.
Long Statement,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderMenuItemBackground,The length of the statement  "                            ControlPaint.DrawBorder(e.Graphics' innerBorderRectangle' ColorTable.ButtonSelectedHighlightBorder' ButtonBorderStyle.Solid); " is 125.
Long Statement,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderOverflowButtonBackground,The length of the statement  "                        RenderOverflowButtonLine(graphics' colorTable.ToolStripText' (int)(arrowRectangle.Right - 6)' (int)(arrowRectangle.Y - 2)' (int)(arrowRectangle.Right - 2)' (int)(arrowRectangle.Y - 2)); " is 185.
Long Statement,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderOverflowButtonBackground,The length of the statement  "                        RenderOverflowButtonLine(graphics' colorTable.ToolStripGradientMiddle' (int)((arrowRectangle.Right - 5) + x)' (int)(arrowRectangle.Y - 1)' (int)((arrowRectangle.Right - 1) + x)' (int)(arrowRectangle.Y - 1)); " is 207.
Long Statement,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderOverflowButtonBackground,The length of the statement  "                        RenderOverflowButtonLine(graphics' colorTable.ToolStripText' arrowRectangle.X' arrowRectangle.Y' arrowRectangle.X' arrowRectangle.Bottom - 1); " is 142.
Long Statement,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderOverflowButtonBackground,The length of the statement  "                        RenderOverflowButtonLine(graphics' colorTable.ToolStripGradientMiddle' arrowRectangle.X + 1' arrowRectangle.Y + 1' arrowRectangle.X + 1' arrowRectangle.Bottom); " is 160.
Long Statement,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderToolStripBackground,The length of the statement  "                        Rectangle lowerRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Height - y2' backgroundRectangle.Width' y2); " is 128.
Long Statement,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderToolStripBackground,The length of the statement  "                        Rectangle lowerRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Height - y2' backgroundRectangle.Width' y2); " is 128.
Long Statement,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,RenderArrowInternal,The length of the statement  "            Point point = new Point(dropDownRectangle.Left + (dropDownRectangle.Width / 2)' dropDownRectangle.Top + (dropDownRectangle.Height / 2)); " is 136.
Long Statement,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,RenderArrowInternal,The length of the statement  "                    points = new Point[] { new Point(point.X + 2' point.Y - 3)' new Point(point.X + 2' point.Y + 3)' new Point(point.X - 1' point.Y) }; " is 131.
Long Statement,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,RenderArrowInternal,The length of the statement  "                    points = new Point[] { new Point(point.X - 2' point.Y + 1)' new Point(point.X + 3' point.Y + 1)' new Point(point.X' point.Y - 2) }; " is 131.
Long Statement,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,RenderArrowInternal,The length of the statement  "                    points = new Point[] { new Point(point.X - 2' point.Y - 3)' new Point(point.X - 2' point.Y + 3)' new Point(point.X + 1' point.Y) }; " is 131.
Long Statement,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,RenderArrowInternal,The length of the statement  "                    points = new Point[] { new Point(point.X - 2' point.Y - 1)' new Point(point.X + 3' point.Y - 1)' new Point(point.X' point.Y + 2) }; " is 131.
Long Statement,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,RenderBackgroundGradient,The length of the statement  "         using(LinearGradientBrush linearGradientBrush = new LinearGradientBrush(bounds' beginColor' endColor' linearGradientMode)) " is 122.
Long Statement,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,RenderFlatButtonBackground,The length of the statement  "         using(LinearGradientBrush gradientBrush = GetFlatGradientBackBrush(bounds' colorGradientBegin' colorGradientEnd' bHover)) " is 121.
Long Statement,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,GetFlatGradientBackBrush,The length of the statement  "         linearGradientBrush = linearGradientBrush = new LinearGradientBrush(bounds' colorGradientBegin' colorGradientEnd' LinearGradientMode.Horizontal); " is 145.
Long Statement,BSE.Windows.Forms,PanelSettingsManager,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelSettingsManager.cs,FindControls,The length of the statement  "                    if (((controlsToLookIn[j] != null) && !(controlsToLookIn[j] is Form)) && ((controlsToLookIn[j].Controls != null) && (controlsToLookIn[j].Controls.Count > 0))) " is 158.
Long Statement,BSE.Windows.Forms,XPanderPanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\XPanderPanel.cs,DrawInnerBorders,The length of the statement  "                     graphicsPath.AddLine(captionRectangle.X' captionRectangle.Y + captionRectangle.Height' captionRectangle.X' captionRectangle.Y + Constants.BorderThickness); " is 155.
Long Statement,BSE.Windows.Forms,XPanderPanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\XPanderPanel.cs,DrawInnerBorders,The length of the statement  "                        graphicsPath.AddLine(captionRectangle.X' captionRectangle.Y' captionRectangle.X + captionRectangle.Width' captionRectangle.Y); " is 126.
Long Statement,BSE.Windows.Forms,XPanderPanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\XPanderPanel.cs,DrawInnerBorders,The length of the statement  "                        graphicsPath.AddLine(captionRectangle.X' captionRectangle.Y + Constants.BorderThickness' captionRectangle.X + captionRectangle.Width' captionRectangle.Y + Constants.BorderThickness); " is 182.
Long Statement,BSE.Windows.Forms,XPanderPanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\XPanderPanel.cs,DrawInnerBorders,The length of the statement  "                  graphicsPath.AddLine(captionRectangle.X + Constants.BorderThickness' captionRectangle.Y + captionRectangle.Height' captionRectangle.X + Constants.BorderThickness' captionRectangle.Y); " is 183.
Long Statement,BSE.Windows.Forms,XPanderPanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\XPanderPanel.cs,DrawInnerBorders,The length of the statement  "                     graphicsPath.AddLine(captionRectangle.X + Constants.BorderThickness' captionRectangle.Y + Constants.BorderThickness' captionRectangle.X + captionRectangle.Width - Constants.BorderThickness' captionRectangle.Y + Constants.BorderThickness); " is 238.
Long Statement,BSE.Windows.Forms,XPanderPanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\XPanderPanel.cs,DrawInnerBorders,The length of the statement  "                     graphicsPath.AddLine(captionRectangle.X + Constants.BorderThickness' captionRectangle.Y' captionRectangle.X + captionRectangle.Width - Constants.BorderThickness' captionRectangle.Y); " is 182.
Long Statement,BSE.Windows.Forms,XPanderPanelList,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\XPanderPanelList.cs,OnControlAdded,The length of the statement  "            xpanderPanel.Anchor = ((System.Windows.Forms.AnchorStyles) (((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 141.
Long Statement,BSE.Windows.Forms,XPanderPanelList,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\XPanderPanelList.cs,OnResize,The length of the statement  "                  xpanderPanel.Height = this.Height - iXPanderPanelCaptionHeight - this.Padding.Top - this.Padding.Bottom + xpanderPanel.CaptionHeight; " is 133.
Long Statement,BSE.Windows.Forms,XPanderPanelListDesigner,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\XPanderPanelList.cs,OnPaintAdornments,The length of the statement  "         e.Graphics.DrawRectangle(this.m_borderPen' 0' 0' this.m_xpanderPanelList.Width - 2' this.m_xpanderPanelList.Height - 2); " is 120.
Long Statement,Demo.WindowsForms.CustomMarkers,GMapMarkerCircle,C:\repos\radioman_greatmaps\Demo.WindowsForms\CustomMarkers\GMapMarkerCircle.cs,OnRender,The length of the statement  "         int R = (int)((Radius) / Overlay.Control.MapProvider.Projection.GetGroundResolution((int)Overlay.Control.Zoom' Position.Lat)) * 2; " is 130.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,timer_Tick,The length of the statement  "         var pos = new PointLatLng(NextDouble(rnd' MainMap.ViewArea.Top' MainMap.ViewArea.Bottom)' NextDouble(rnd' MainMap.ViewArea.Left' MainMap.ViewArea.Right)); " is 154.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,transport_ProgressChanged,The length of the statement  "               marker.ToolTipText = "Trolley " + d.Line + (d.Bearing.HasValue ? "' bearing: " + d.Bearing.Value.ToString() : string.Empty) + "' " + d.Time; " is 140.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,transport_ProgressChanged,The length of the statement  "               marker.ToolTipText = "Bus " + d.Line + (d.Bearing.HasValue ? "' bearing: " + d.Bearing.Value.ToString() : string.Empty) + "' " + d.Time; " is 136.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,connectionsWorker_ProgressChanged,The length of the statement  "                     if((DateTime.Now - tcp.Value.StatusTime > TimeSpan.FromSeconds(8)) || (SelectedCountriesCount > 0 && !SelectedCountries.Contains(tcp.Value.CountryName))) " is 153.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,GetIpHostInfo,The length of the statement  "            string reqUrl = string.Format("http://api.ipinfodb.com/v2/ip_query.php?key=fbea1992ab11f7125064590a417a8461ccaf06728798c718dbd2809b31a7a5e0&ip={0}&timezone=false"' iplistNew); " is 175.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,GetIpHostInfo,The length of the statement  "                  reqUrl = string.Format("http://backup.ipinfodb.com/v2/ip_query.php?key=fbea1992ab11f7125064590a417a8461ccaf06728798c718dbd2809b31a7a5e0&ip={0}&timezone=false"' iplist); " is 168.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,OnTileCacheComplete,The length of the statement  "               textBoxCacheSize.Text = string.Format(CultureInfo.InvariantCulture' "{0} db in {1:00} MB"' db' size / (1024.0 * 1024.0)); " is 121.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,MainMap_MouseDown,The length of the statement  "               var px = MainMap.MapProvider.Projection.FromLatLngToPixel(currentMarker.Position.Lat' currentMarker.Position.Lng' (int) MainMap.Zoom); " is 134.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,MainMap_OnTileLoadComplete,The length of the statement  "            textBoxMemory.Text = string.Format(CultureInfo.InvariantCulture' "{0:0.00} MB of {1:0.00} MB"' MainMap.Manager.MemoryCache.Size' MainMap.Manager.MemoryCache.Capacity); " is 167.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,textBoxGeo_KeyPress,The length of the statement  "               MessageBox.Show("Geocoder can't find: '" + textBoxGeo.Text + "'' reason: " + status.ToString()' "GMap.NET"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 158.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,button2_Click,The length of the statement  "         if(MessageBox.Show("Are You sure?"' "Clear GMap.NET cache?"' MessageBoxButtons.OKCancel' MessageBoxIcon.Warning) == DialogResult.OK) " is 132.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,button11_Click,The length of the statement  "                     obj.Start(area' i' MainMap.MapProvider' MainMap.Manager.Mode == AccessMode.CacheOnly ? 0 : 100' MainMap.Manager.Mode == AccessMode.CacheOnly ? 0 : 1); " is 150.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.MainMap.SelectedAreaFillColor = System.Drawing.Color.FromArgb(((int)(((byte)(33))))' ((int)(((byte)(65))))' ((int)(((byte)(105))))' ((int)(((byte)(225))))); " is 161.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.panelMenu.CaptionFont = new System.Drawing.Font("Segoe UI"' 9.75F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 151.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.panelMenu.CustomColors.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(184))))' ((int)(((byte)(184))))' ((int)(((byte)(184))))); " is 144.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.panelMenu.CustomColors.CaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252))))); " is 153.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.panelMenu.CustomColors.CaptionGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248))))); " is 154.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.panelMenu.CustomColors.CaptionSelectedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255))))); " is 161.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.panelMenu.CustomColors.CaptionSelectedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255))))); " is 159.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.panelMenu.CustomColors.ContentGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252))))); " is 151.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelMain.CustomColors.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(184))))' ((int)(((byte)(184))))' ((int)(((byte)(184))))); " is 151.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelMain.CustomColors.CaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252))))); " is 160.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelMain.CustomColors.CaptionGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248))))); " is 161.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelMain.CustomColors.CaptionPressedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255))))); " is 167.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelMain.CustomColors.CaptionPressedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255))))); " is 165.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelMain.CustomColors.CaptionPressedGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255))))); " is 168.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelMain.CustomColors.CaptionSelectedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255))))); " is 168.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelMain.CustomColors.CaptionSelectedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255))))); " is 166.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelMain.CustomColors.CaptionSelectedGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255))))); " is 169.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelMain.CustomColors.FlatCaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248))))); " is 164.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelMain.CustomColors.FlatCaptionGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252))))); " is 162.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel4.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute' 64F)); " is 123.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel4.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 49.27536F)); " is 128.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel5.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 50F)); " is 122.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.button1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 145.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.button8.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 145.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.buttonZoomUp.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 157.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.buttonZoomDown.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 159.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelCache.CustomColors.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(184))))' ((int)(((byte)(184))))' ((int)(((byte)(184))))); " is 152.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelCache.CustomColors.CaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252))))); " is 161.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelCache.CustomColors.CaptionGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248))))); " is 162.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelCache.CustomColors.CaptionPressedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255))))); " is 168.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelCache.CustomColors.CaptionPressedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255))))); " is 166.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelCache.CustomColors.CaptionPressedGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255))))); " is 169.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelCache.CustomColors.CaptionSelectedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255))))); " is 169.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelCache.CustomColors.CaptionSelectedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255))))); " is 167.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelCache.CustomColors.CaptionSelectedGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255))))); " is 170.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelCache.CustomColors.FlatCaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248))))); " is 165.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelCache.CustomColors.FlatCaptionGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252))))); " is 163.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute' 20F)); " is 123.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 50F)); " is 122.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute' 20F)); " is 123.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.textBoxCacheSize.Font = new System.Drawing.Font("Microsoft Sans Serif"' 13.8F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 166.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.textBoxCacheStatus.Font = new System.Drawing.Font("Microsoft Sans Serif"' 13.8F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 168.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.textBoxMemory.Font = new System.Drawing.Font("Microsoft Sans Serif"' 13.8F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 163.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelInfo.CustomColors.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(184))))' ((int)(((byte)(184))))' ((int)(((byte)(184))))); " is 151.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelInfo.CustomColors.CaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252))))); " is 160.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelInfo.CustomColors.CaptionGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248))))); " is 161.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelInfo.CustomColors.CaptionPressedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255))))); " is 167.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelInfo.CustomColors.CaptionPressedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255))))); " is 165.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelInfo.CustomColors.CaptionPressedGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255))))); " is 168.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelInfo.CustomColors.CaptionSelectedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255))))); " is 168.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelInfo.CustomColors.CaptionSelectedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255))))); " is 166.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelInfo.CustomColors.CaptionSelectedGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255))))); " is 169.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelInfo.CustomColors.FlatCaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248))))); " is 164.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelInfo.CustomColors.FlatCaptionGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252))))); " is 162.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel2.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute' 20F)); " is 123.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel2.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 50F)); " is 122.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel2.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute' 20F)); " is 123.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.textBoxZoomCurrent.Font = new System.Drawing.Font("Microsoft Sans Serif"' 13.8F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 168.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.textBoxrouteCount.Font = new System.Drawing.Font("Microsoft Sans Serif"' 13.8F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 167.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.textBoxLngCurrent.Font = new System.Drawing.Font("Microsoft Sans Serif"' 13.8F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 167.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.textBoxMarkerCount.Font = new System.Drawing.Font("Microsoft Sans Serif"' 13.8F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 168.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.textBoxLatCurrent.Font = new System.Drawing.Font("Microsoft Sans Serif"' 13.8F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 167.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelLive.CustomColors.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(184))))' ((int)(((byte)(184))))' ((int)(((byte)(184))))); " is 151.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelLive.CustomColors.CaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252))))); " is 160.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelLive.CustomColors.CaptionGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248))))); " is 161.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelLive.CustomColors.CaptionPressedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255))))); " is 167.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelLive.CustomColors.CaptionPressedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255))))); " is 165.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelLive.CustomColors.CaptionPressedGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255))))); " is 168.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelLive.CustomColors.CaptionSelectedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255))))); " is 168.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelLive.CustomColors.CaptionSelectedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255))))); " is 166.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelLive.CustomColors.CaptionSelectedGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255))))); " is 169.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelLive.CustomColors.FlatCaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248))))); " is 164.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.xPanderPanelLive.CustomColors.FlatCaptionGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252))))); " is 162.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel3.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute' 20F)); " is 123.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel3.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 29.06977F)); " is 128.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel3.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute' 20F)); " is 123.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.GridConnections.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 121.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            dataGridViewCellStyle1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 167.
Long Statement,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The length of the statement  "            this.GridConnections.CellValueNeeded += new System.Windows.Forms.DataGridViewCellValueEventHandler(this.GridConnections_CellValueNeeded); " is 137.
Long Statement,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,bg_DoWork,The length of the statement  "            string bigImage = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory) + Path.DirectorySeparatorChar + "GMap at zoom " + info.Zoom + " - " + info.Type + "-" + DateTime.Now.Ticks + ".jpg"; " is 204.
Long Statement,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,bg_DoWork,The length of the statement  "                              gfx.DrawString(rightBottom' f' p.Brush' rect.Right - s2.Width - s2.Height / 2' rect.Bottom - s2.Height - s2.Height / 2); " is 120.
Long Statement,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,bg_DoWork,The length of the statement  "            //-0.0000554613012    // the comparable vertical pixel size in latitude degrees' negative because latitude decreases as you go from top to bottom in the image. " is 159.
Long Statement,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,bg_DoWork,The length of the statement  "               var kmzFile = Path.GetDirectoryName(bigImage) + Path.DirectorySeparatorChar + Path.GetFileNameWithoutExtension(bigImage) + ".kmz"; " is 130.
Long Statement,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,bg_DoWork,The length of the statement  "<kml xmlns=""http://www.opengis.net/kml/2.2"" xmlns:gx=""http://www.google.com/kml/ext/2.2"" xmlns:kml=""http://www.opengis.net/kml/2.2"" xmlns:atom=""http://www.w3.org/2005/Atom""> " is 181.
Long Statement,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,button1_Click,The length of the statement  "            bg.RunWorkerAsync(new MapInfo(area.Value' (int)numericUpDown1.Value' Main.MainMap.MapProvider' checkBoxWorldFile.Checked' checkBoxKMZ.Checked)); " is 144.
Long Statement,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The length of the statement  "         this.button1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 143.
Long Statement,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The length of the statement  "         this.progressBar1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 148.
Long Statement,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The length of the statement  "         this.numericUpDown1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 150.
Long Statement,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The length of the statement  "         this.button2.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 143.
Long Statement,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The length of the statement  "         this.label1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 142.
Long Statement,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The length of the statement  "         this.checkBoxWorldFile.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 155.
Long Statement,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The length of the statement  "         this.checkBoxRoutes.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 152.
Long Statement,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The length of the statement  "         this.checkBoxKMZ.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 149.
Long Statement,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetVilniusTransportData,The length of the statement  "         string url = string.Format(CultureInfo.InvariantCulture' "http://www.troleibusai.lt/eismas/get_gps.php?allowed=true&more=1&bus={0}&rand={1}"' type == TransportType.Bus ? 2 : 1' r.NextDouble()); " is 193.
Long Statement,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetFlightRadarData,The length of the statement  "         //var r = GetContentUsingHttp("http://www.flightradar24.com/FlightDataService.php?callsign=WZZ1MF&hex=47340F&date=" + tm' p1' 6' id); " is 133.
Long Statement,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetFlightRadarData,The length of the statement  "            //var response = GetFlightRadarContentUsingHttp("http://arn.data.fr24.com/zones/fcgi/feed.js?bounds=63.056845879294244'55.95299968262111'5.99853515625'28.54248046875&faa=1&mlat=1&flarm=1&adsb=1&gnd=1&air=1&vehicles=1&estimated=1&maxage=900&gliders=1&stats=1&"' location' zoom' sessionId); " is 288.
Long Statement,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetFlightRadarData,The length of the statement  "            var response = GetFlightRadarContentUsingHttp(string.Format(CultureInfo.InvariantCulture' "http://arn.data.fr24.com/zones/fcgi/feed.js?bounds={0}'{1}'{2}'{3}&faa=1&mlat=1&flarm=1&adsb=1&gnd=1&air=1&vehicles=1&estimated=1&maxage=900&gliders=1&stats=1&"' bounds.Top' bounds.Bottom' bounds.Left' bounds.Right)); " is 308.
Long Statement,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetFlightRadarData,The length of the statement  "                     fd.point = new PointLatLng(double.Parse(lat' CultureInfo.InvariantCulture)' double.Parse(lng' CultureInfo.InvariantCulture)); " is 125.
Long Statement,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetFlightRadarContentUsingHttp,The length of the statement  "         //request.Headers.Add("Cookie"' string.Format(System.Globalization.CultureInfo.InvariantCulture' "map_lat={0}; map_lon={1}; map_zoom={2}; " + (!string.IsNullOrEmpty(sid) ? "PHPSESSID=" + sid + ";" : string.Empty) + "__utma=109878426.303091014.1316587318.1316587318.1316587318.1; __utmb=109878426.2.10.1316587318; __utmz=109878426.1316587318.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none)"' p.Lat' p.Lng' zoom)); " is 414.
Long Statement,Demo.WindowsForms,Map,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\Map.cs,OnPaintOverlays,The length of the statement  "         g.DrawString(string.Format(CultureInfo.InvariantCulture' "{0:0.0}"' Zoom) + "z' " + MapProvider + "' refresh: " + counter++ + "' load: " + ElapsedMilliseconds + "ms' render: " + delta + "ms"' DebugFont' Brushes.Blue' DebugFont.Height' DebugFont.Height + 20); " is 258.
Long Statement,Demo.WindowsForms,Map,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\Map.cs,OnPaintOverlays,The length of the statement  "         //g.DrawString(ViewAreaPixel.Location.ToString()' DebugFontSmall' Brushes.Blue' DebugFontSmall.Height' DebugFontSmall.Height); " is 126.
Long Statement,Demo.WindowsForms,Map,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\Map.cs,OnPaintOverlays,The length of the statement  "         //g.DrawString(rb' DebugFontSmall' Brushes.Blue' Width - rbs.Width - DebugFontSmall.Height' Height - DebugFontSmall.Height * 2); " is 128.
Long Statement,Demo.WindowsForms,TraceRoute,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\Program.cs,GetTraceRoute,The length of the statement  "            //Debug.WriteLine("GetTraceRoute[" + hostNameOrAddress + "]: " + reply.RoundtripTime + "ms " + reply.Address + " -> " + reply.Status); " is 134.
Long Statement,Demo.WindowsForms,ManagedIpHelper,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\Program.cs,UpdateExtendedTcpTable,The length of the statement  "         if(IpHelper.GetExtendedTcpTable(tcpTable' ref tcpTableLength' sorted' IpHelper.AfInet' IpHelper.TcpTableType.OwnerPidConnections' 0) != 0) " is 138.
Long Statement,Demo.WindowsForms,ManagedIpHelper,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\Program.cs,UpdateExtendedTcpTable,The length of the statement  "               if(IpHelper.GetExtendedTcpTable(tcpTable' ref tcpTableLength' true' IpHelper.AfInet' IpHelper.TcpTableType.OwnerPidConnections' 0) == 0) " is 136.
Long Statement,Demo.WindowsForms,SQLiteIpCache,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\SQLiteIpCache.cs,PutDataToCache,The length of the statement  "                              cmd.CommandText = "INSERT INTO Cache(Ip' CountryName' RegionName' City' Latitude' Longitude' Time) VALUES(@p1' @p2' @p3' @p4' @p5' @p6' @p7)"; " is 142.
Long Statement,Demo.WindowsForms.Forms,Message,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\Message.cs,InitializeComponent,The length of the statement  "         System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(Message)); " is 127.
Long Statement,Demo.WindowsForms.Forms,Message,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\Message.cs,InitializeComponent,The length of the statement  "         this.button1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,Demo.WindowsForms.Forms,Message,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\Message.cs,InitializeComponent,The length of the statement  "         this.button1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 7.8F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 153.
Long Statement,Demo.WindowsForms.Forms,Message,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\Message.cs,InitializeComponent,The length of the statement  "         this.button2.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 145.
Complex Conditional,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,DrawImagesAndText,The conditional expression  "(bShowCloseIcon == true)                      && (imageClosePanel != null)                      && (bShowExpandIcon == true)                      && (imageExandPanel != null)"  is complex.
Complex Conditional,BSE.Windows.Forms,Panel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\Panel.cs,OnPaint,The conditional expression  "(dockStyle == DockStyle.Fill) || (dockStyle == DockStyle.None) ||                          ((bShowExpandIcon == false) && (bShowCloseIcon == false))"  is complex.
Complex Conditional,BSE.Windows.Forms,PanelSettingsManager,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelSettingsManager.cs,FindControls,The conditional expression  "((controlsToLookIn[j] != null) && !(controlsToLookIn[j] is Form)) && ((controlsToLookIn[j].Controls != null) && (controlsToLookIn[j].Controls.Count > 0))"  is complex.
Complex Conditional,BSE.Windows.Forms,XPanderPanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\XPanderPanel.cs,DrawBorders,The conditional expression  "((panel != null) && (panel.Padding == new Padding(0))) ||                                  ((parentXPanderPanel != null) && (parentXPanderPanel.Padding == new Padding(0)))"  is complex.
Complex Conditional,BSE.Windows.Forms,XPanderPanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\XPanderPanel.cs,DrawInnerBorders,The conditional expression  "((panel != null) && (panel.Padding == new Padding(0))) ||                              ((parentXPanderPanel != null) && (parentXPanderPanel.Padding == new Padding(0)))"  is complex.
Empty Catch Block,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,connectionsWorker_DoWork,The method has an empty catch block.
Empty Catch Block,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,OnTileCacheComplete,The method has an empty catch block.
Empty Catch Block,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,OnTileCacheComplete,The method has an empty catch block.
Empty Catch Block,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,MainMap_OnTileLoadStart,The method has an empty catch block.
Empty Catch Block,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,MainMap_OnTileLoadComplete,The method has an empty catch block.
Empty Catch Block,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,bg_RunWorkerCompleted,The method has an empty catch block.
Magic Number,BSE.Windows.Forms,ProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ProgressBar.cs,ProgressBar,The following statement contains a magic number: this.m_iMaximum = 100;
Magic Number,BSE.Windows.Forms,ProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ProgressBar.cs,ProgressBar,The following statement contains a magic number: this.m_backgroundColor = Color.FromArgb(20' 20' 255);
Magic Number,BSE.Windows.Forms,ProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ProgressBar.cs,ProgressBar,The following statement contains a magic number: this.m_backgroundColor = Color.FromArgb(20' 20' 255);
Magic Number,BSE.Windows.Forms,ProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ProgressBar.cs,ProgressBar,The following statement contains a magic number: this.m_backgroundColor = Color.FromArgb(20' 20' 255);
Magic Number,BSE.Windows.Forms,ProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ProgressBar.cs,ProgressBar,The following statement contains a magic number: this.m_valueColor = Color.FromArgb(255' 0' 255);
Magic Number,BSE.Windows.Forms,ProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ProgressBar.cs,ProgressBar,The following statement contains a magic number: this.m_valueColor = Color.FromArgb(255' 0' 255);
Magic Number,BSE.Windows.Forms,ProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ProgressBar.cs,DrawProgressBar,The following statement contains a magic number: using (GraphicsPath outerRectangleGraphicsPath = GetBackgroundPath(outerRectangle' 4))              {                  if (outerRectangleGraphicsPath != null)                  {                      using (LinearGradientBrush gradientBrush = GetGradientBackBrush(outerRectangle' colorBackgroundEnd))                      {                          if (gradientBrush != null)                          {                              graphics.FillPath(gradientBrush' outerRectangleGraphicsPath);                          }                      }                        // Draws the value rectangle                      if (iValue > 0)                      {                          Rectangle valueRectangle = GetRectangleValue(outerRectangle' rightToLeft' iMinimum' iMaximum' iValue);                          using (GraphicsPath valueGraphicsPath = GetValuePath(valueRectangle' rightToLeft' 5))                          {                              using (LinearGradientBrush gradientBrush = GetGradientBackBrush(valueRectangle' colorValueEnd))                              {                                  if (gradientBrush != null)                                  {                                      graphics.FillPath(gradientBrush' valueGraphicsPath);                                  }                              }                          }                      }                      using (Pen borderPen = new Pen(borderColor))                      {                          graphics.DrawPath(borderPen' outerRectangleGraphicsPath);                      }                  }              }
Magic Number,BSE.Windows.Forms,ProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ProgressBar.cs,DrawProgressBar,The following statement contains a magic number: using (GraphicsPath outerRectangleGraphicsPath = GetBackgroundPath(outerRectangle' 4))              {                  if (outerRectangleGraphicsPath != null)                  {                      using (LinearGradientBrush gradientBrush = GetGradientBackBrush(outerRectangle' colorBackgroundEnd))                      {                          if (gradientBrush != null)                          {                              graphics.FillPath(gradientBrush' outerRectangleGraphicsPath);                          }                      }                        // Draws the value rectangle                      if (iValue > 0)                      {                          Rectangle valueRectangle = GetRectangleValue(outerRectangle' rightToLeft' iMinimum' iMaximum' iValue);                          using (GraphicsPath valueGraphicsPath = GetValuePath(valueRectangle' rightToLeft' 5))                          {                              using (LinearGradientBrush gradientBrush = GetGradientBackBrush(valueRectangle' colorValueEnd))                              {                                  if (gradientBrush != null)                                  {                                      graphics.FillPath(gradientBrush' valueGraphicsPath);                                  }                              }                          }                      }                      using (Pen borderPen = new Pen(borderColor))                      {                          graphics.DrawPath(borderPen' outerRectangleGraphicsPath);                      }                  }              }
Magic Number,BSE.Windows.Forms,ProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ProgressBar.cs,GetBackgroundPath,The following statement contains a magic number: graphicsPath.AddArc(x' y' radius' radius' 180' 90);
Magic Number,BSE.Windows.Forms,ProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ProgressBar.cs,GetBackgroundPath,The following statement contains a magic number: graphicsPath.AddArc(x' y' radius' radius' 180' 90);
Magic Number,BSE.Windows.Forms,ProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ProgressBar.cs,GetBackgroundPath,The following statement contains a magic number: graphicsPath.AddArc(x + width - radius' y' radius' radius' 270' 90);
Magic Number,BSE.Windows.Forms,ProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ProgressBar.cs,GetBackgroundPath,The following statement contains a magic number: graphicsPath.AddArc(x + width - radius' y' radius' radius' 270' 90);
Magic Number,BSE.Windows.Forms,ProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ProgressBar.cs,GetBackgroundPath,The following statement contains a magic number: graphicsPath.AddArc(x + width - radius' y + height - radius' radius' radius' 0' 90);
Magic Number,BSE.Windows.Forms,ProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ProgressBar.cs,GetBackgroundPath,The following statement contains a magic number: graphicsPath.AddArc(x' y + height - radius' radius' radius' 90' 90);
Magic Number,BSE.Windows.Forms,ProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ProgressBar.cs,GetBackgroundPath,The following statement contains a magic number: graphicsPath.AddArc(x' y + height - radius' radius' radius' 90' 90);
Magic Number,BSE.Windows.Forms,ProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ProgressBar.cs,GetValuePath,The following statement contains a magic number: if (rightToLeft == RightToLeft.No)              {                  graphicsPath.AddArc(x' y' radius' radius' 180' 90);				                    //Upper left corner                  graphicsPath.AddLine(x + radius' y' x + width' y);                                  //Upper line                  graphicsPath.AddLine(x + width' y' x + width' y + height);                          //Right line                  graphicsPath.AddArc(x' y + height - radius' radius' radius' 90' 90);			    //Lower left corner              }              else              {                  graphicsPath.AddLine(x' y' width - radius' y);                                      //Upper Line                  graphicsPath.AddArc(x + width - radius' y' radius' radius' 270' 90);                // Upper right corner                  graphicsPath.AddLine(x + width' y + radius' x + width' y + radius + height - (2 * radius)); // right line                  graphicsPath.AddArc(x + width - radius' y + radius + height - (2 * radius)' radius' radius' 360' 90); // Lower right corner                  graphicsPath.AddLine(x + width - radius' y + height' x' y + height);                // Lower line              }
Magic Number,BSE.Windows.Forms,ProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ProgressBar.cs,GetValuePath,The following statement contains a magic number: if (rightToLeft == RightToLeft.No)              {                  graphicsPath.AddArc(x' y' radius' radius' 180' 90);				                    //Upper left corner                  graphicsPath.AddLine(x + radius' y' x + width' y);                                  //Upper line                  graphicsPath.AddLine(x + width' y' x + width' y + height);                          //Right line                  graphicsPath.AddArc(x' y + height - radius' radius' radius' 90' 90);			    //Lower left corner              }              else              {                  graphicsPath.AddLine(x' y' width - radius' y);                                      //Upper Line                  graphicsPath.AddArc(x + width - radius' y' radius' radius' 270' 90);                // Upper right corner                  graphicsPath.AddLine(x + width' y + radius' x + width' y + radius + height - (2 * radius)); // right line                  graphicsPath.AddArc(x + width - radius' y + radius + height - (2 * radius)' radius' radius' 360' 90); // Lower right corner                  graphicsPath.AddLine(x + width - radius' y + height' x' y + height);                // Lower line              }
Magic Number,BSE.Windows.Forms,ProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ProgressBar.cs,GetValuePath,The following statement contains a magic number: if (rightToLeft == RightToLeft.No)              {                  graphicsPath.AddArc(x' y' radius' radius' 180' 90);				                    //Upper left corner                  graphicsPath.AddLine(x + radius' y' x + width' y);                                  //Upper line                  graphicsPath.AddLine(x + width' y' x + width' y + height);                          //Right line                  graphicsPath.AddArc(x' y + height - radius' radius' radius' 90' 90);			    //Lower left corner              }              else              {                  graphicsPath.AddLine(x' y' width - radius' y);                                      //Upper Line                  graphicsPath.AddArc(x + width - radius' y' radius' radius' 270' 90);                // Upper right corner                  graphicsPath.AddLine(x + width' y + radius' x + width' y + radius + height - (2 * radius)); // right line                  graphicsPath.AddArc(x + width - radius' y + radius + height - (2 * radius)' radius' radius' 360' 90); // Lower right corner                  graphicsPath.AddLine(x + width - radius' y + height' x' y + height);                // Lower line              }
Magic Number,BSE.Windows.Forms,ProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ProgressBar.cs,GetValuePath,The following statement contains a magic number: if (rightToLeft == RightToLeft.No)              {                  graphicsPath.AddArc(x' y' radius' radius' 180' 90);				                    //Upper left corner                  graphicsPath.AddLine(x + radius' y' x + width' y);                                  //Upper line                  graphicsPath.AddLine(x + width' y' x + width' y + height);                          //Right line                  graphicsPath.AddArc(x' y + height - radius' radius' radius' 90' 90);			    //Lower left corner              }              else              {                  graphicsPath.AddLine(x' y' width - radius' y);                                      //Upper Line                  graphicsPath.AddArc(x + width - radius' y' radius' radius' 270' 90);                // Upper right corner                  graphicsPath.AddLine(x + width' y + radius' x + width' y + radius + height - (2 * radius)); // right line                  graphicsPath.AddArc(x + width - radius' y + radius + height - (2 * radius)' radius' radius' 360' 90); // Lower right corner                  graphicsPath.AddLine(x + width - radius' y + height' x' y + height);                // Lower line              }
Magic Number,BSE.Windows.Forms,ProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ProgressBar.cs,GetValuePath,The following statement contains a magic number: if (rightToLeft == RightToLeft.No)              {                  graphicsPath.AddArc(x' y' radius' radius' 180' 90);				                    //Upper left corner                  graphicsPath.AddLine(x + radius' y' x + width' y);                                  //Upper line                  graphicsPath.AddLine(x + width' y' x + width' y + height);                          //Right line                  graphicsPath.AddArc(x' y + height - radius' radius' radius' 90' 90);			    //Lower left corner              }              else              {                  graphicsPath.AddLine(x' y' width - radius' y);                                      //Upper Line                  graphicsPath.AddArc(x + width - radius' y' radius' radius' 270' 90);                // Upper right corner                  graphicsPath.AddLine(x + width' y + radius' x + width' y + radius + height - (2 * radius)); // right line                  graphicsPath.AddArc(x + width - radius' y + radius + height - (2 * radius)' radius' radius' 360' 90); // Lower right corner                  graphicsPath.AddLine(x + width - radius' y + height' x' y + height);                // Lower line              }
Magic Number,BSE.Windows.Forms,ProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ProgressBar.cs,GetValuePath,The following statement contains a magic number: if (rightToLeft == RightToLeft.No)              {                  graphicsPath.AddArc(x' y' radius' radius' 180' 90);				                    //Upper left corner                  graphicsPath.AddLine(x + radius' y' x + width' y);                                  //Upper line                  graphicsPath.AddLine(x + width' y' x + width' y + height);                          //Right line                  graphicsPath.AddArc(x' y + height - radius' radius' radius' 90' 90);			    //Lower left corner              }              else              {                  graphicsPath.AddLine(x' y' width - radius' y);                                      //Upper Line                  graphicsPath.AddArc(x + width - radius' y' radius' radius' 270' 90);                // Upper right corner                  graphicsPath.AddLine(x + width' y + radius' x + width' y + radius + height - (2 * radius)); // right line                  graphicsPath.AddArc(x + width - radius' y + radius + height - (2 * radius)' radius' radius' 360' 90); // Lower right corner                  graphicsPath.AddLine(x + width - radius' y + height' x' y + height);                // Lower line              }
Magic Number,BSE.Windows.Forms,ProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ProgressBar.cs,GetValuePath,The following statement contains a magic number: if (rightToLeft == RightToLeft.No)              {                  graphicsPath.AddArc(x' y' radius' radius' 180' 90);				                    //Upper left corner                  graphicsPath.AddLine(x + radius' y' x + width' y);                                  //Upper line                  graphicsPath.AddLine(x + width' y' x + width' y + height);                          //Right line                  graphicsPath.AddArc(x' y + height - radius' radius' radius' 90' 90);			    //Lower left corner              }              else              {                  graphicsPath.AddLine(x' y' width - radius' y);                                      //Upper Line                  graphicsPath.AddArc(x + width - radius' y' radius' radius' 270' 90);                // Upper right corner                  graphicsPath.AddLine(x + width' y + radius' x + width' y + radius + height - (2 * radius)); // right line                  graphicsPath.AddArc(x + width - radius' y + radius + height - (2 * radius)' radius' radius' 360' 90); // Lower right corner                  graphicsPath.AddLine(x + width - radius' y + height' x' y + height);                // Lower line              }
Magic Number,BSE.Windows.Forms,ProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ProgressBar.cs,GetValuePath,The following statement contains a magic number: if (rightToLeft == RightToLeft.No)              {                  graphicsPath.AddArc(x' y' radius' radius' 180' 90);				                    //Upper left corner                  graphicsPath.AddLine(x + radius' y' x + width' y);                                  //Upper line                  graphicsPath.AddLine(x + width' y' x + width' y + height);                          //Right line                  graphicsPath.AddArc(x' y + height - radius' radius' radius' 90' 90);			    //Lower left corner              }              else              {                  graphicsPath.AddLine(x' y' width - radius' y);                                      //Upper Line                  graphicsPath.AddArc(x + width - radius' y' radius' radius' 270' 90);                // Upper right corner                  graphicsPath.AddLine(x + width' y + radius' x + width' y + radius + height - (2 * radius)); // right line                  graphicsPath.AddArc(x + width - radius' y + radius + height - (2 * radius)' radius' radius' 360' 90); // Lower right corner                  graphicsPath.AddLine(x + width - radius' y + height' x' y + height);                // Lower line              }
Magic Number,BSE.Windows.Forms,ProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ProgressBar.cs,GetValuePath,The following statement contains a magic number: if (rightToLeft == RightToLeft.No)              {                  graphicsPath.AddArc(x' y' radius' radius' 180' 90);				                    //Upper left corner                  graphicsPath.AddLine(x + radius' y' x + width' y);                                  //Upper line                  graphicsPath.AddLine(x + width' y' x + width' y + height);                          //Right line                  graphicsPath.AddArc(x' y + height - radius' radius' radius' 90' 90);			    //Lower left corner              }              else              {                  graphicsPath.AddLine(x' y' width - radius' y);                                      //Upper Line                  graphicsPath.AddArc(x + width - radius' y' radius' radius' 270' 90);                // Upper right corner                  graphicsPath.AddLine(x + width' y + radius' x + width' y + radius + height - (2 * radius)); // right line                  graphicsPath.AddArc(x + width - radius' y + radius + height - (2 * radius)' radius' radius' 360' 90); // Lower right corner                  graphicsPath.AddLine(x + width - radius' y + height' x' y + height);                // Lower line              }
Magic Number,BSE.Windows.Forms,ProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ProgressBar.cs,GetValuePath,The following statement contains a magic number: if (rightToLeft == RightToLeft.No)              {                  graphicsPath.AddArc(x' y' radius' radius' 180' 90);				                    //Upper left corner                  graphicsPath.AddLine(x + radius' y' x + width' y);                                  //Upper line                  graphicsPath.AddLine(x + width' y' x + width' y + height);                          //Right line                  graphicsPath.AddArc(x' y + height - radius' radius' radius' 90' 90);			    //Lower left corner              }              else              {                  graphicsPath.AddLine(x' y' width - radius' y);                                      //Upper Line                  graphicsPath.AddArc(x + width - radius' y' radius' radius' 270' 90);                // Upper right corner                  graphicsPath.AddLine(x + width' y + radius' x + width' y + radius + height - (2 * radius)); // right line                  graphicsPath.AddArc(x + width - radius' y + radius + height - (2 * radius)' radius' radius' 360' 90); // Lower right corner                  graphicsPath.AddLine(x + width - radius' y + height' x' y + height);                // Lower line              }
Magic Number,BSE.Windows.Forms,ProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ProgressBar.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(100' 23);
Magic Number,BSE.Windows.Forms,ProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ProgressBar.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(100' 23);
Magic Number,BSE.Windows.Forms,ToolStripProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ToolStripProgressBar.cs,CreateControlInstance,The following statement contains a magic number: progressBar.Size = new Size(100' 15);
Magic Number,BSE.Windows.Forms,ToolStripProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ToolStripProgressBar.cs,CreateControlInstance,The following statement contains a magic number: progressBar.Size = new Size(100' 15);
Magic Number,BSE.Windows.Forms,ToolStripProgressBar,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\ProgressBar\ToolStripProgressBar.cs,OwnerRendererChanged,The following statement contains a magic number: if (toolsTripRenderer != null)              {                  if (toolsTripRenderer is BseRenderer)                  {                      ToolStripProfessionalRenderer renderer = toolsTripRenderer as ToolStripProfessionalRenderer;                          if (renderer != null)                          {                              this.ProgressBar.BorderColor = renderer.ColorTable.ToolStripBorder;                          }                      if (this.Owner.GetType() != typeof(StatusStrip))                      {                          this.Margin = new Padding(1' 1' 1' 3);                      }                  }                  else                  {                      this.Margin = DefaultMargin;                  }              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,BseRenderer,The following statement contains a magic number: MarginInset = 2;
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,BseRenderer,The following statement contains a magic number: baseSizeGripRectangles = new Rectangle[] { new Rectangle(8' 0' 2' 2)' new Rectangle(8' 4' 2' 2)' new Rectangle(8' 8' 2' 2)' new Rectangle(4' 4' 2' 2)' new Rectangle(4' 8' 2' 2)' new Rectangle(0' 8' 2' 2) };
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,BseRenderer,The following statement contains a magic number: baseSizeGripRectangles = new Rectangle[] { new Rectangle(8' 0' 2' 2)' new Rectangle(8' 4' 2' 2)' new Rectangle(8' 8' 2' 2)' new Rectangle(4' 4' 2' 2)' new Rectangle(4' 8' 2' 2)' new Rectangle(0' 8' 2' 2) };
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,BseRenderer,The following statement contains a magic number: baseSizeGripRectangles = new Rectangle[] { new Rectangle(8' 0' 2' 2)' new Rectangle(8' 4' 2' 2)' new Rectangle(8' 8' 2' 2)' new Rectangle(4' 4' 2' 2)' new Rectangle(4' 8' 2' 2)' new Rectangle(0' 8' 2' 2) };
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,BseRenderer,The following statement contains a magic number: baseSizeGripRectangles = new Rectangle[] { new Rectangle(8' 0' 2' 2)' new Rectangle(8' 4' 2' 2)' new Rectangle(8' 8' 2' 2)' new Rectangle(4' 4' 2' 2)' new Rectangle(4' 8' 2' 2)' new Rectangle(0' 8' 2' 2) };
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,BseRenderer,The following statement contains a magic number: baseSizeGripRectangles = new Rectangle[] { new Rectangle(8' 0' 2' 2)' new Rectangle(8' 4' 2' 2)' new Rectangle(8' 8' 2' 2)' new Rectangle(4' 4' 2' 2)' new Rectangle(4' 8' 2' 2)' new Rectangle(0' 8' 2' 2) };
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,BseRenderer,The following statement contains a magic number: baseSizeGripRectangles = new Rectangle[] { new Rectangle(8' 0' 2' 2)' new Rectangle(8' 4' 2' 2)' new Rectangle(8' 8' 2' 2)' new Rectangle(4' 4' 2' 2)' new Rectangle(4' 8' 2' 2)' new Rectangle(0' 8' 2' 2) };
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,BseRenderer,The following statement contains a magic number: baseSizeGripRectangles = new Rectangle[] { new Rectangle(8' 0' 2' 2)' new Rectangle(8' 4' 2' 2)' new Rectangle(8' 8' 2' 2)' new Rectangle(4' 4' 2' 2)' new Rectangle(4' 8' 2' 2)' new Rectangle(0' 8' 2' 2) };
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,BseRenderer,The following statement contains a magic number: baseSizeGripRectangles = new Rectangle[] { new Rectangle(8' 0' 2' 2)' new Rectangle(8' 4' 2' 2)' new Rectangle(8' 8' 2' 2)' new Rectangle(4' 4' 2' 2)' new Rectangle(4' 8' 2' 2)' new Rectangle(0' 8' 2' 2) };
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,BseRenderer,The following statement contains a magic number: baseSizeGripRectangles = new Rectangle[] { new Rectangle(8' 0' 2' 2)' new Rectangle(8' 4' 2' 2)' new Rectangle(8' 8' 2' 2)' new Rectangle(4' 4' 2' 2)' new Rectangle(4' 8' 2' 2)' new Rectangle(0' 8' 2' 2) };
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,BseRenderer,The following statement contains a magic number: baseSizeGripRectangles = new Rectangle[] { new Rectangle(8' 0' 2' 2)' new Rectangle(8' 4' 2' 2)' new Rectangle(8' 8' 2' 2)' new Rectangle(4' 4' 2' 2)' new Rectangle(4' 8' 2' 2)' new Rectangle(0' 8' 2' 2) };
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,BseRenderer,The following statement contains a magic number: baseSizeGripRectangles = new Rectangle[] { new Rectangle(8' 0' 2' 2)' new Rectangle(8' 4' 2' 2)' new Rectangle(8' 8' 2' 2)' new Rectangle(4' 4' 2' 2)' new Rectangle(4' 8' 2' 2)' new Rectangle(0' 8' 2' 2) };
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,BseRenderer,The following statement contains a magic number: baseSizeGripRectangles = new Rectangle[] { new Rectangle(8' 0' 2' 2)' new Rectangle(8' 4' 2' 2)' new Rectangle(8' 8' 2' 2)' new Rectangle(4' 4' 2' 2)' new Rectangle(4' 8' 2' 2)' new Rectangle(0' 8' 2' 2) };
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,BseRenderer,The following statement contains a magic number: baseSizeGripRectangles = new Rectangle[] { new Rectangle(8' 0' 2' 2)' new Rectangle(8' 4' 2' 2)' new Rectangle(8' 8' 2' 2)' new Rectangle(4' 4' 2' 2)' new Rectangle(4' 8' 2' 2)' new Rectangle(0' 8' 2' 2) };
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,BseRenderer,The following statement contains a magic number: baseSizeGripRectangles = new Rectangle[] { new Rectangle(8' 0' 2' 2)' new Rectangle(8' 4' 2' 2)' new Rectangle(8' 8' 2' 2)' new Rectangle(4' 4' 2' 2)' new Rectangle(4' 8' 2' 2)' new Rectangle(0' 8' 2' 2) };
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,BseRenderer,The following statement contains a magic number: baseSizeGripRectangles = new Rectangle[] { new Rectangle(8' 0' 2' 2)' new Rectangle(8' 4' 2' 2)' new Rectangle(8' 8' 2' 2)' new Rectangle(4' 4' 2' 2)' new Rectangle(4' 8' 2' 2)' new Rectangle(0' 8' 2' 2) };
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,BseRenderer,The following statement contains a magic number: baseSizeGripRectangles = new Rectangle[] { new Rectangle(8' 0' 2' 2)' new Rectangle(8' 4' 2' 2)' new Rectangle(8' 8' 2' 2)' new Rectangle(4' 4' 2' 2)' new Rectangle(4' 8' 2' 2)' new Rectangle(0' 8' 2' 2) };
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,BseRenderer,The following statement contains a magic number: baseSizeGripRectangles = new Rectangle[] { new Rectangle(8' 0' 2' 2)' new Rectangle(8' 4' 2' 2)' new Rectangle(8' 8' 2' 2)' new Rectangle(4' 4' 2' 2)' new Rectangle(4' 8' 2' 2)' new Rectangle(0' 8' 2' 2) };
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,BseRenderer,The following statement contains a magic number: baseSizeGripRectangles = new Rectangle[] { new Rectangle(8' 0' 2' 2)' new Rectangle(8' 4' 2' 2)' new Rectangle(8' 8' 2' 2)' new Rectangle(4' 4' 2' 2)' new Rectangle(4' 8' 2' 2)' new Rectangle(0' 8' 2' 2) };
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,BseRenderer,The following statement contains a magic number: baseSizeGripRectangles = new Rectangle[] { new Rectangle(8' 0' 2' 2)' new Rectangle(8' 4' 2' 2)' new Rectangle(8' 8' 2' 2)' new Rectangle(4' 4' 2' 2)' new Rectangle(4' 8' 2' 2)' new Rectangle(0' 8' 2' 2) };
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,BseRenderer,The following statement contains a magic number: baseSizeGripRectangles = new Rectangle[] { new Rectangle(8' 0' 2' 2)' new Rectangle(8' 4' 2' 2)' new Rectangle(8' 8' 2' 2)' new Rectangle(4' 4' 2' 2)' new Rectangle(4' 8' 2' 2)' new Rectangle(0' 8' 2' 2) };
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,BseRenderer,The following statement contains a magic number: baseSizeGripRectangles = new Rectangle[] { new Rectangle(8' 0' 2' 2)' new Rectangle(8' 4' 2' 2)' new Rectangle(8' 8' 2' 2)' new Rectangle(4' 4' 2' 2)' new Rectangle(4' 8' 2' 2)' new Rectangle(0' 8' 2' 2) };
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,BseRenderer,The following statement contains a magic number: baseSizeGripRectangles = new Rectangle[] { new Rectangle(8' 0' 2' 2)' new Rectangle(8' 4' 2' 2)' new Rectangle(8' 8' 2' 2)' new Rectangle(4' 4' 2' 2)' new Rectangle(4' 8' 2' 2)' new Rectangle(0' 8' 2' 2) };
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderOverflowButtonBackground,The following statement contains a magic number: if ((item.Selected == false) && (item.Pressed == false))              {                  ProfessionalColorTable colorTable = ColorTable as ProfessionalColorTable;                  if (colorTable != null)                  {                      Graphics graphics = e.Graphics;                      bool bRightToLeft = item.RightToLeft == RightToLeft.Yes;                        bool bOrientation = e.ToolStrip.Orientation == Orientation.Horizontal;                      Rectangle arrowRectangle = Rectangle.Empty;                      if (bRightToLeft)                      {                          arrowRectangle = new Rectangle(0' item.Height - 8' 9' 5);                      }                      else                      {                          arrowRectangle = new Rectangle(item.Width - 12' item.Height - 8' 9' 5);                      }                        ArrowDirection arrowDirection = bOrientation ? ArrowDirection.Down : ArrowDirection.Right;                      int x = (bRightToLeft && bOrientation) ? -1 : 1;                      arrowRectangle.Offset(x' 1);                      RenderArrowInternal(graphics' arrowRectangle' arrowDirection' colorTable.ToolStripGradientMiddle);                      arrowRectangle.Offset(-1 * x' -1);                      RenderArrowInternal(graphics' arrowRectangle' arrowDirection' colorTable.ToolStripText);                      if (bOrientation)                      {                          x = bRightToLeft ? -2 : 0;                          RenderOverflowButtonLine(graphics' colorTable.ToolStripText' (int)(arrowRectangle.Right - 6)' (int)(arrowRectangle.Y - 2)' (int)(arrowRectangle.Right - 2)' (int)(arrowRectangle.Y - 2));                          RenderOverflowButtonLine(graphics' colorTable.ToolStripGradientMiddle' (int)((arrowRectangle.Right - 5) + x)' (int)(arrowRectangle.Y - 1)' (int)((arrowRectangle.Right - 1) + x)' (int)(arrowRectangle.Y - 1));                      }                      else                      {                          RenderOverflowButtonLine(graphics' colorTable.ToolStripText' arrowRectangle.X' arrowRectangle.Y' arrowRectangle.X' arrowRectangle.Bottom - 1);                          RenderOverflowButtonLine(graphics' colorTable.ToolStripGradientMiddle' arrowRectangle.X + 1' arrowRectangle.Y + 1' arrowRectangle.X + 1' arrowRectangle.Bottom);                      }                  }              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderOverflowButtonBackground,The following statement contains a magic number: if ((item.Selected == false) && (item.Pressed == false))              {                  ProfessionalColorTable colorTable = ColorTable as ProfessionalColorTable;                  if (colorTable != null)                  {                      Graphics graphics = e.Graphics;                      bool bRightToLeft = item.RightToLeft == RightToLeft.Yes;                        bool bOrientation = e.ToolStrip.Orientation == Orientation.Horizontal;                      Rectangle arrowRectangle = Rectangle.Empty;                      if (bRightToLeft)                      {                          arrowRectangle = new Rectangle(0' item.Height - 8' 9' 5);                      }                      else                      {                          arrowRectangle = new Rectangle(item.Width - 12' item.Height - 8' 9' 5);                      }                        ArrowDirection arrowDirection = bOrientation ? ArrowDirection.Down : ArrowDirection.Right;                      int x = (bRightToLeft && bOrientation) ? -1 : 1;                      arrowRectangle.Offset(x' 1);                      RenderArrowInternal(graphics' arrowRectangle' arrowDirection' colorTable.ToolStripGradientMiddle);                      arrowRectangle.Offset(-1 * x' -1);                      RenderArrowInternal(graphics' arrowRectangle' arrowDirection' colorTable.ToolStripText);                      if (bOrientation)                      {                          x = bRightToLeft ? -2 : 0;                          RenderOverflowButtonLine(graphics' colorTable.ToolStripText' (int)(arrowRectangle.Right - 6)' (int)(arrowRectangle.Y - 2)' (int)(arrowRectangle.Right - 2)' (int)(arrowRectangle.Y - 2));                          RenderOverflowButtonLine(graphics' colorTable.ToolStripGradientMiddle' (int)((arrowRectangle.Right - 5) + x)' (int)(arrowRectangle.Y - 1)' (int)((arrowRectangle.Right - 1) + x)' (int)(arrowRectangle.Y - 1));                      }                      else                      {                          RenderOverflowButtonLine(graphics' colorTable.ToolStripText' arrowRectangle.X' arrowRectangle.Y' arrowRectangle.X' arrowRectangle.Bottom - 1);                          RenderOverflowButtonLine(graphics' colorTable.ToolStripGradientMiddle' arrowRectangle.X + 1' arrowRectangle.Y + 1' arrowRectangle.X + 1' arrowRectangle.Bottom);                      }                  }              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderOverflowButtonBackground,The following statement contains a magic number: if ((item.Selected == false) && (item.Pressed == false))              {                  ProfessionalColorTable colorTable = ColorTable as ProfessionalColorTable;                  if (colorTable != null)                  {                      Graphics graphics = e.Graphics;                      bool bRightToLeft = item.RightToLeft == RightToLeft.Yes;                        bool bOrientation = e.ToolStrip.Orientation == Orientation.Horizontal;                      Rectangle arrowRectangle = Rectangle.Empty;                      if (bRightToLeft)                      {                          arrowRectangle = new Rectangle(0' item.Height - 8' 9' 5);                      }                      else                      {                          arrowRectangle = new Rectangle(item.Width - 12' item.Height - 8' 9' 5);                      }                        ArrowDirection arrowDirection = bOrientation ? ArrowDirection.Down : ArrowDirection.Right;                      int x = (bRightToLeft && bOrientation) ? -1 : 1;                      arrowRectangle.Offset(x' 1);                      RenderArrowInternal(graphics' arrowRectangle' arrowDirection' colorTable.ToolStripGradientMiddle);                      arrowRectangle.Offset(-1 * x' -1);                      RenderArrowInternal(graphics' arrowRectangle' arrowDirection' colorTable.ToolStripText);                      if (bOrientation)                      {                          x = bRightToLeft ? -2 : 0;                          RenderOverflowButtonLine(graphics' colorTable.ToolStripText' (int)(arrowRectangle.Right - 6)' (int)(arrowRectangle.Y - 2)' (int)(arrowRectangle.Right - 2)' (int)(arrowRectangle.Y - 2));                          RenderOverflowButtonLine(graphics' colorTable.ToolStripGradientMiddle' (int)((arrowRectangle.Right - 5) + x)' (int)(arrowRectangle.Y - 1)' (int)((arrowRectangle.Right - 1) + x)' (int)(arrowRectangle.Y - 1));                      }                      else                      {                          RenderOverflowButtonLine(graphics' colorTable.ToolStripText' arrowRectangle.X' arrowRectangle.Y' arrowRectangle.X' arrowRectangle.Bottom - 1);                          RenderOverflowButtonLine(graphics' colorTable.ToolStripGradientMiddle' arrowRectangle.X + 1' arrowRectangle.Y + 1' arrowRectangle.X + 1' arrowRectangle.Bottom);                      }                  }              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderOverflowButtonBackground,The following statement contains a magic number: if ((item.Selected == false) && (item.Pressed == false))              {                  ProfessionalColorTable colorTable = ColorTable as ProfessionalColorTable;                  if (colorTable != null)                  {                      Graphics graphics = e.Graphics;                      bool bRightToLeft = item.RightToLeft == RightToLeft.Yes;                        bool bOrientation = e.ToolStrip.Orientation == Orientation.Horizontal;                      Rectangle arrowRectangle = Rectangle.Empty;                      if (bRightToLeft)                      {                          arrowRectangle = new Rectangle(0' item.Height - 8' 9' 5);                      }                      else                      {                          arrowRectangle = new Rectangle(item.Width - 12' item.Height - 8' 9' 5);                      }                        ArrowDirection arrowDirection = bOrientation ? ArrowDirection.Down : ArrowDirection.Right;                      int x = (bRightToLeft && bOrientation) ? -1 : 1;                      arrowRectangle.Offset(x' 1);                      RenderArrowInternal(graphics' arrowRectangle' arrowDirection' colorTable.ToolStripGradientMiddle);                      arrowRectangle.Offset(-1 * x' -1);                      RenderArrowInternal(graphics' arrowRectangle' arrowDirection' colorTable.ToolStripText);                      if (bOrientation)                      {                          x = bRightToLeft ? -2 : 0;                          RenderOverflowButtonLine(graphics' colorTable.ToolStripText' (int)(arrowRectangle.Right - 6)' (int)(arrowRectangle.Y - 2)' (int)(arrowRectangle.Right - 2)' (int)(arrowRectangle.Y - 2));                          RenderOverflowButtonLine(graphics' colorTable.ToolStripGradientMiddle' (int)((arrowRectangle.Right - 5) + x)' (int)(arrowRectangle.Y - 1)' (int)((arrowRectangle.Right - 1) + x)' (int)(arrowRectangle.Y - 1));                      }                      else                      {                          RenderOverflowButtonLine(graphics' colorTable.ToolStripText' arrowRectangle.X' arrowRectangle.Y' arrowRectangle.X' arrowRectangle.Bottom - 1);                          RenderOverflowButtonLine(graphics' colorTable.ToolStripGradientMiddle' arrowRectangle.X + 1' arrowRectangle.Y + 1' arrowRectangle.X + 1' arrowRectangle.Bottom);                      }                  }              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderOverflowButtonBackground,The following statement contains a magic number: if ((item.Selected == false) && (item.Pressed == false))              {                  ProfessionalColorTable colorTable = ColorTable as ProfessionalColorTable;                  if (colorTable != null)                  {                      Graphics graphics = e.Graphics;                      bool bRightToLeft = item.RightToLeft == RightToLeft.Yes;                        bool bOrientation = e.ToolStrip.Orientation == Orientation.Horizontal;                      Rectangle arrowRectangle = Rectangle.Empty;                      if (bRightToLeft)                      {                          arrowRectangle = new Rectangle(0' item.Height - 8' 9' 5);                      }                      else                      {                          arrowRectangle = new Rectangle(item.Width - 12' item.Height - 8' 9' 5);                      }                        ArrowDirection arrowDirection = bOrientation ? ArrowDirection.Down : ArrowDirection.Right;                      int x = (bRightToLeft && bOrientation) ? -1 : 1;                      arrowRectangle.Offset(x' 1);                      RenderArrowInternal(graphics' arrowRectangle' arrowDirection' colorTable.ToolStripGradientMiddle);                      arrowRectangle.Offset(-1 * x' -1);                      RenderArrowInternal(graphics' arrowRectangle' arrowDirection' colorTable.ToolStripText);                      if (bOrientation)                      {                          x = bRightToLeft ? -2 : 0;                          RenderOverflowButtonLine(graphics' colorTable.ToolStripText' (int)(arrowRectangle.Right - 6)' (int)(arrowRectangle.Y - 2)' (int)(arrowRectangle.Right - 2)' (int)(arrowRectangle.Y - 2));                          RenderOverflowButtonLine(graphics' colorTable.ToolStripGradientMiddle' (int)((arrowRectangle.Right - 5) + x)' (int)(arrowRectangle.Y - 1)' (int)((arrowRectangle.Right - 1) + x)' (int)(arrowRectangle.Y - 1));                      }                      else                      {                          RenderOverflowButtonLine(graphics' colorTable.ToolStripText' arrowRectangle.X' arrowRectangle.Y' arrowRectangle.X' arrowRectangle.Bottom - 1);                          RenderOverflowButtonLine(graphics' colorTable.ToolStripGradientMiddle' arrowRectangle.X + 1' arrowRectangle.Y + 1' arrowRectangle.X + 1' arrowRectangle.Bottom);                      }                  }              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderOverflowButtonBackground,The following statement contains a magic number: if ((item.Selected == false) && (item.Pressed == false))              {                  ProfessionalColorTable colorTable = ColorTable as ProfessionalColorTable;                  if (colorTable != null)                  {                      Graphics graphics = e.Graphics;                      bool bRightToLeft = item.RightToLeft == RightToLeft.Yes;                        bool bOrientation = e.ToolStrip.Orientation == Orientation.Horizontal;                      Rectangle arrowRectangle = Rectangle.Empty;                      if (bRightToLeft)                      {                          arrowRectangle = new Rectangle(0' item.Height - 8' 9' 5);                      }                      else                      {                          arrowRectangle = new Rectangle(item.Width - 12' item.Height - 8' 9' 5);                      }                        ArrowDirection arrowDirection = bOrientation ? ArrowDirection.Down : ArrowDirection.Right;                      int x = (bRightToLeft && bOrientation) ? -1 : 1;                      arrowRectangle.Offset(x' 1);                      RenderArrowInternal(graphics' arrowRectangle' arrowDirection' colorTable.ToolStripGradientMiddle);                      arrowRectangle.Offset(-1 * x' -1);                      RenderArrowInternal(graphics' arrowRectangle' arrowDirection' colorTable.ToolStripText);                      if (bOrientation)                      {                          x = bRightToLeft ? -2 : 0;                          RenderOverflowButtonLine(graphics' colorTable.ToolStripText' (int)(arrowRectangle.Right - 6)' (int)(arrowRectangle.Y - 2)' (int)(arrowRectangle.Right - 2)' (int)(arrowRectangle.Y - 2));                          RenderOverflowButtonLine(graphics' colorTable.ToolStripGradientMiddle' (int)((arrowRectangle.Right - 5) + x)' (int)(arrowRectangle.Y - 1)' (int)((arrowRectangle.Right - 1) + x)' (int)(arrowRectangle.Y - 1));                      }                      else                      {                          RenderOverflowButtonLine(graphics' colorTable.ToolStripText' arrowRectangle.X' arrowRectangle.Y' arrowRectangle.X' arrowRectangle.Bottom - 1);                          RenderOverflowButtonLine(graphics' colorTable.ToolStripGradientMiddle' arrowRectangle.X + 1' arrowRectangle.Y + 1' arrowRectangle.X + 1' arrowRectangle.Bottom);                      }                  }              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderOverflowButtonBackground,The following statement contains a magic number: if ((item.Selected == false) && (item.Pressed == false))              {                  ProfessionalColorTable colorTable = ColorTable as ProfessionalColorTable;                  if (colorTable != null)                  {                      Graphics graphics = e.Graphics;                      bool bRightToLeft = item.RightToLeft == RightToLeft.Yes;                        bool bOrientation = e.ToolStrip.Orientation == Orientation.Horizontal;                      Rectangle arrowRectangle = Rectangle.Empty;                      if (bRightToLeft)                      {                          arrowRectangle = new Rectangle(0' item.Height - 8' 9' 5);                      }                      else                      {                          arrowRectangle = new Rectangle(item.Width - 12' item.Height - 8' 9' 5);                      }                        ArrowDirection arrowDirection = bOrientation ? ArrowDirection.Down : ArrowDirection.Right;                      int x = (bRightToLeft && bOrientation) ? -1 : 1;                      arrowRectangle.Offset(x' 1);                      RenderArrowInternal(graphics' arrowRectangle' arrowDirection' colorTable.ToolStripGradientMiddle);                      arrowRectangle.Offset(-1 * x' -1);                      RenderArrowInternal(graphics' arrowRectangle' arrowDirection' colorTable.ToolStripText);                      if (bOrientation)                      {                          x = bRightToLeft ? -2 : 0;                          RenderOverflowButtonLine(graphics' colorTable.ToolStripText' (int)(arrowRectangle.Right - 6)' (int)(arrowRectangle.Y - 2)' (int)(arrowRectangle.Right - 2)' (int)(arrowRectangle.Y - 2));                          RenderOverflowButtonLine(graphics' colorTable.ToolStripGradientMiddle' (int)((arrowRectangle.Right - 5) + x)' (int)(arrowRectangle.Y - 1)' (int)((arrowRectangle.Right - 1) + x)' (int)(arrowRectangle.Y - 1));                      }                      else                      {                          RenderOverflowButtonLine(graphics' colorTable.ToolStripText' arrowRectangle.X' arrowRectangle.Y' arrowRectangle.X' arrowRectangle.Bottom - 1);                          RenderOverflowButtonLine(graphics' colorTable.ToolStripGradientMiddle' arrowRectangle.X + 1' arrowRectangle.Y + 1' arrowRectangle.X + 1' arrowRectangle.Bottom);                      }                  }              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderOverflowButtonBackground,The following statement contains a magic number: if ((item.Selected == false) && (item.Pressed == false))              {                  ProfessionalColorTable colorTable = ColorTable as ProfessionalColorTable;                  if (colorTable != null)                  {                      Graphics graphics = e.Graphics;                      bool bRightToLeft = item.RightToLeft == RightToLeft.Yes;                        bool bOrientation = e.ToolStrip.Orientation == Orientation.Horizontal;                      Rectangle arrowRectangle = Rectangle.Empty;                      if (bRightToLeft)                      {                          arrowRectangle = new Rectangle(0' item.Height - 8' 9' 5);                      }                      else                      {                          arrowRectangle = new Rectangle(item.Width - 12' item.Height - 8' 9' 5);                      }                        ArrowDirection arrowDirection = bOrientation ? ArrowDirection.Down : ArrowDirection.Right;                      int x = (bRightToLeft && bOrientation) ? -1 : 1;                      arrowRectangle.Offset(x' 1);                      RenderArrowInternal(graphics' arrowRectangle' arrowDirection' colorTable.ToolStripGradientMiddle);                      arrowRectangle.Offset(-1 * x' -1);                      RenderArrowInternal(graphics' arrowRectangle' arrowDirection' colorTable.ToolStripText);                      if (bOrientation)                      {                          x = bRightToLeft ? -2 : 0;                          RenderOverflowButtonLine(graphics' colorTable.ToolStripText' (int)(arrowRectangle.Right - 6)' (int)(arrowRectangle.Y - 2)' (int)(arrowRectangle.Right - 2)' (int)(arrowRectangle.Y - 2));                          RenderOverflowButtonLine(graphics' colorTable.ToolStripGradientMiddle' (int)((arrowRectangle.Right - 5) + x)' (int)(arrowRectangle.Y - 1)' (int)((arrowRectangle.Right - 1) + x)' (int)(arrowRectangle.Y - 1));                      }                      else                      {                          RenderOverflowButtonLine(graphics' colorTable.ToolStripText' arrowRectangle.X' arrowRectangle.Y' arrowRectangle.X' arrowRectangle.Bottom - 1);                          RenderOverflowButtonLine(graphics' colorTable.ToolStripGradientMiddle' arrowRectangle.X + 1' arrowRectangle.Y + 1' arrowRectangle.X + 1' arrowRectangle.Bottom);                      }                  }              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderOverflowButtonBackground,The following statement contains a magic number: if ((item.Selected == false) && (item.Pressed == false))              {                  ProfessionalColorTable colorTable = ColorTable as ProfessionalColorTable;                  if (colorTable != null)                  {                      Graphics graphics = e.Graphics;                      bool bRightToLeft = item.RightToLeft == RightToLeft.Yes;                        bool bOrientation = e.ToolStrip.Orientation == Orientation.Horizontal;                      Rectangle arrowRectangle = Rectangle.Empty;                      if (bRightToLeft)                      {                          arrowRectangle = new Rectangle(0' item.Height - 8' 9' 5);                      }                      else                      {                          arrowRectangle = new Rectangle(item.Width - 12' item.Height - 8' 9' 5);                      }                        ArrowDirection arrowDirection = bOrientation ? ArrowDirection.Down : ArrowDirection.Right;                      int x = (bRightToLeft && bOrientation) ? -1 : 1;                      arrowRectangle.Offset(x' 1);                      RenderArrowInternal(graphics' arrowRectangle' arrowDirection' colorTable.ToolStripGradientMiddle);                      arrowRectangle.Offset(-1 * x' -1);                      RenderArrowInternal(graphics' arrowRectangle' arrowDirection' colorTable.ToolStripText);                      if (bOrientation)                      {                          x = bRightToLeft ? -2 : 0;                          RenderOverflowButtonLine(graphics' colorTable.ToolStripText' (int)(arrowRectangle.Right - 6)' (int)(arrowRectangle.Y - 2)' (int)(arrowRectangle.Right - 2)' (int)(arrowRectangle.Y - 2));                          RenderOverflowButtonLine(graphics' colorTable.ToolStripGradientMiddle' (int)((arrowRectangle.Right - 5) + x)' (int)(arrowRectangle.Y - 1)' (int)((arrowRectangle.Right - 1) + x)' (int)(arrowRectangle.Y - 1));                      }                      else                      {                          RenderOverflowButtonLine(graphics' colorTable.ToolStripText' arrowRectangle.X' arrowRectangle.Y' arrowRectangle.X' arrowRectangle.Bottom - 1);                          RenderOverflowButtonLine(graphics' colorTable.ToolStripGradientMiddle' arrowRectangle.X + 1' arrowRectangle.Y + 1' arrowRectangle.X + 1' arrowRectangle.Bottom);                      }                  }              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderOverflowButtonBackground,The following statement contains a magic number: if ((item.Selected == false) && (item.Pressed == false))              {                  ProfessionalColorTable colorTable = ColorTable as ProfessionalColorTable;                  if (colorTable != null)                  {                      Graphics graphics = e.Graphics;                      bool bRightToLeft = item.RightToLeft == RightToLeft.Yes;                        bool bOrientation = e.ToolStrip.Orientation == Orientation.Horizontal;                      Rectangle arrowRectangle = Rectangle.Empty;                      if (bRightToLeft)                      {                          arrowRectangle = new Rectangle(0' item.Height - 8' 9' 5);                      }                      else                      {                          arrowRectangle = new Rectangle(item.Width - 12' item.Height - 8' 9' 5);                      }                        ArrowDirection arrowDirection = bOrientation ? ArrowDirection.Down : ArrowDirection.Right;                      int x = (bRightToLeft && bOrientation) ? -1 : 1;                      arrowRectangle.Offset(x' 1);                      RenderArrowInternal(graphics' arrowRectangle' arrowDirection' colorTable.ToolStripGradientMiddle);                      arrowRectangle.Offset(-1 * x' -1);                      RenderArrowInternal(graphics' arrowRectangle' arrowDirection' colorTable.ToolStripText);                      if (bOrientation)                      {                          x = bRightToLeft ? -2 : 0;                          RenderOverflowButtonLine(graphics' colorTable.ToolStripText' (int)(arrowRectangle.Right - 6)' (int)(arrowRectangle.Y - 2)' (int)(arrowRectangle.Right - 2)' (int)(arrowRectangle.Y - 2));                          RenderOverflowButtonLine(graphics' colorTable.ToolStripGradientMiddle' (int)((arrowRectangle.Right - 5) + x)' (int)(arrowRectangle.Y - 1)' (int)((arrowRectangle.Right - 1) + x)' (int)(arrowRectangle.Y - 1));                      }                      else                      {                          RenderOverflowButtonLine(graphics' colorTable.ToolStripText' arrowRectangle.X' arrowRectangle.Y' arrowRectangle.X' arrowRectangle.Bottom - 1);                          RenderOverflowButtonLine(graphics' colorTable.ToolStripGradientMiddle' arrowRectangle.X + 1' arrowRectangle.Y + 1' arrowRectangle.X + 1' arrowRectangle.Bottom);                      }                  }              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderOverflowButtonBackground,The following statement contains a magic number: if ((item.Selected == false) && (item.Pressed == false))              {                  ProfessionalColorTable colorTable = ColorTable as ProfessionalColorTable;                  if (colorTable != null)                  {                      Graphics graphics = e.Graphics;                      bool bRightToLeft = item.RightToLeft == RightToLeft.Yes;                        bool bOrientation = e.ToolStrip.Orientation == Orientation.Horizontal;                      Rectangle arrowRectangle = Rectangle.Empty;                      if (bRightToLeft)                      {                          arrowRectangle = new Rectangle(0' item.Height - 8' 9' 5);                      }                      else                      {                          arrowRectangle = new Rectangle(item.Width - 12' item.Height - 8' 9' 5);                      }                        ArrowDirection arrowDirection = bOrientation ? ArrowDirection.Down : ArrowDirection.Right;                      int x = (bRightToLeft && bOrientation) ? -1 : 1;                      arrowRectangle.Offset(x' 1);                      RenderArrowInternal(graphics' arrowRectangle' arrowDirection' colorTable.ToolStripGradientMiddle);                      arrowRectangle.Offset(-1 * x' -1);                      RenderArrowInternal(graphics' arrowRectangle' arrowDirection' colorTable.ToolStripText);                      if (bOrientation)                      {                          x = bRightToLeft ? -2 : 0;                          RenderOverflowButtonLine(graphics' colorTable.ToolStripText' (int)(arrowRectangle.Right - 6)' (int)(arrowRectangle.Y - 2)' (int)(arrowRectangle.Right - 2)' (int)(arrowRectangle.Y - 2));                          RenderOverflowButtonLine(graphics' colorTable.ToolStripGradientMiddle' (int)((arrowRectangle.Right - 5) + x)' (int)(arrowRectangle.Y - 1)' (int)((arrowRectangle.Right - 1) + x)' (int)(arrowRectangle.Y - 1));                      }                      else                      {                          RenderOverflowButtonLine(graphics' colorTable.ToolStripText' arrowRectangle.X' arrowRectangle.Y' arrowRectangle.X' arrowRectangle.Bottom - 1);                          RenderOverflowButtonLine(graphics' colorTable.ToolStripGradientMiddle' arrowRectangle.X + 1' arrowRectangle.Y + 1' arrowRectangle.X + 1' arrowRectangle.Bottom);                      }                  }              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderOverflowButtonBackground,The following statement contains a magic number: if ((item.Selected == false) && (item.Pressed == false))              {                  ProfessionalColorTable colorTable = ColorTable as ProfessionalColorTable;                  if (colorTable != null)                  {                      Graphics graphics = e.Graphics;                      bool bRightToLeft = item.RightToLeft == RightToLeft.Yes;                        bool bOrientation = e.ToolStrip.Orientation == Orientation.Horizontal;                      Rectangle arrowRectangle = Rectangle.Empty;                      if (bRightToLeft)                      {                          arrowRectangle = new Rectangle(0' item.Height - 8' 9' 5);                      }                      else                      {                          arrowRectangle = new Rectangle(item.Width - 12' item.Height - 8' 9' 5);                      }                        ArrowDirection arrowDirection = bOrientation ? ArrowDirection.Down : ArrowDirection.Right;                      int x = (bRightToLeft && bOrientation) ? -1 : 1;                      arrowRectangle.Offset(x' 1);                      RenderArrowInternal(graphics' arrowRectangle' arrowDirection' colorTable.ToolStripGradientMiddle);                      arrowRectangle.Offset(-1 * x' -1);                      RenderArrowInternal(graphics' arrowRectangle' arrowDirection' colorTable.ToolStripText);                      if (bOrientation)                      {                          x = bRightToLeft ? -2 : 0;                          RenderOverflowButtonLine(graphics' colorTable.ToolStripText' (int)(arrowRectangle.Right - 6)' (int)(arrowRectangle.Y - 2)' (int)(arrowRectangle.Right - 2)' (int)(arrowRectangle.Y - 2));                          RenderOverflowButtonLine(graphics' colorTable.ToolStripGradientMiddle' (int)((arrowRectangle.Right - 5) + x)' (int)(arrowRectangle.Y - 1)' (int)((arrowRectangle.Right - 1) + x)' (int)(arrowRectangle.Y - 1));                      }                      else                      {                          RenderOverflowButtonLine(graphics' colorTable.ToolStripText' arrowRectangle.X' arrowRectangle.Y' arrowRectangle.X' arrowRectangle.Bottom - 1);                          RenderOverflowButtonLine(graphics' colorTable.ToolStripGradientMiddle' arrowRectangle.X + 1' arrowRectangle.Y + 1' arrowRectangle.X + 1' arrowRectangle.Bottom);                      }                  }              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderOverflowButtonBackground,The following statement contains a magic number: if ((item.Selected == false) && (item.Pressed == false))              {                  ProfessionalColorTable colorTable = ColorTable as ProfessionalColorTable;                  if (colorTable != null)                  {                      Graphics graphics = e.Graphics;                      bool bRightToLeft = item.RightToLeft == RightToLeft.Yes;                        bool bOrientation = e.ToolStrip.Orientation == Orientation.Horizontal;                      Rectangle arrowRectangle = Rectangle.Empty;                      if (bRightToLeft)                      {                          arrowRectangle = new Rectangle(0' item.Height - 8' 9' 5);                      }                      else                      {                          arrowRectangle = new Rectangle(item.Width - 12' item.Height - 8' 9' 5);                      }                        ArrowDirection arrowDirection = bOrientation ? ArrowDirection.Down : ArrowDirection.Right;                      int x = (bRightToLeft && bOrientation) ? -1 : 1;                      arrowRectangle.Offset(x' 1);                      RenderArrowInternal(graphics' arrowRectangle' arrowDirection' colorTable.ToolStripGradientMiddle);                      arrowRectangle.Offset(-1 * x' -1);                      RenderArrowInternal(graphics' arrowRectangle' arrowDirection' colorTable.ToolStripText);                      if (bOrientation)                      {                          x = bRightToLeft ? -2 : 0;                          RenderOverflowButtonLine(graphics' colorTable.ToolStripText' (int)(arrowRectangle.Right - 6)' (int)(arrowRectangle.Y - 2)' (int)(arrowRectangle.Right - 2)' (int)(arrowRectangle.Y - 2));                          RenderOverflowButtonLine(graphics' colorTable.ToolStripGradientMiddle' (int)((arrowRectangle.Right - 5) + x)' (int)(arrowRectangle.Y - 1)' (int)((arrowRectangle.Right - 1) + x)' (int)(arrowRectangle.Y - 1));                      }                      else                      {                          RenderOverflowButtonLine(graphics' colorTable.ToolStripText' arrowRectangle.X' arrowRectangle.Y' arrowRectangle.X' arrowRectangle.Bottom - 1);                          RenderOverflowButtonLine(graphics' colorTable.ToolStripGradientMiddle' arrowRectangle.X + 1' arrowRectangle.Y + 1' arrowRectangle.X + 1' arrowRectangle.Bottom);                      }                  }              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderStatusStripSizingGrip,The following statement contains a magic number: if (toolStrip != null)              {                  Rectangle sizeGripBounds = toolStrip.SizeGripBounds;                  if (IsZeroWidthOrHeight(sizeGripBounds) == false)                  {                      Rectangle[] rectanglesLight = new Rectangle[baseSizeGripRectangles.Length];                      Rectangle[] rectanglesDark = new Rectangle[baseSizeGripRectangles.Length];                      for (int i = 0; i < baseSizeGripRectangles.Length; i++)                      {                          Rectangle rectangleDark = baseSizeGripRectangles[i];                          if (toolStrip.RightToLeft == RightToLeft.Yes)                          {                              rectangleDark.X = (sizeGripBounds.Width - rectangleDark.X) - rectangleDark.Width;                          }                          rectangleDark.Offset(sizeGripBounds.X' sizeGripBounds.Bottom - 12);                          rectanglesLight[i] = rectangleDark;                          if (toolStrip.RightToLeft == RightToLeft.Yes)                          {                              rectangleDark.Offset(1' -1);                          }                          else                          {                              rectangleDark.Offset(-1' -1);                          }                          rectanglesDark[i] = rectangleDark;                      }                      using (SolidBrush darkBrush = new SolidBrush(ColorTable.GripDark)'                          lightBrush = new SolidBrush(ColorTable.GripDark))                      {                          graphics.FillRectangles(lightBrush' rectanglesLight);                          graphics.FillRectangles(darkBrush' rectanglesDark);                      }                  }              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderToolStripBackground,The following statement contains a magic number: if (ColorTable.UseSystemColors == true)              {                  base.OnRenderToolStripBackground(e);              }              else              {                  Trace.WriteLine("ToolStrip: " + e.ToolStrip.GetType());                  Rectangle backgroundRectangle = new Rectangle(0' 0' e.ToolStrip.Width' e.ToolStrip.Height);                  Rectangle innerRectangle = backgroundRectangle;                  innerRectangle.Height = (backgroundRectangle.Height / 2) + 1;                  // Cannot paint a zero sized area                  if ((backgroundRectangle.Width > 0) && (backgroundRectangle.Height > 0))                  {                      if (e.ToolStrip is StatusStrip)                      {                          using (SolidBrush outerBrush = new SolidBrush(ColorTable.StatusStripGradientEnd))                          {                              e.Graphics.FillRectangle(outerBrush' backgroundRectangle);                          }                            int y2 = backgroundRectangle.Height / 2;                          Rectangle upperRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Y' backgroundRectangle.Width' y2);                          upperRectangle.Height += 1;                          using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              upperRectangle'                              ColorTable.StatusStripGradientBegin'                              Color.FromArgb(128'ColorTable.StatusStripGradientBegin)'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' upperRectangle); //draw top bubble                          }                            y2 = (backgroundRectangle.Height / 4) + 1;                          Rectangle lowerRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Height - y2' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              lowerRectangle'                              ColorTable.StatusStripGradientEnd'                              Color.FromArgb(128'ColorTable.StatusStripGradientBegin)'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' lowerRectangle); //draw top bubble                          }                      }                      else if (e.ToolStrip is MenuStrip)                      {                          using (SolidBrush outerBrush = new SolidBrush(ColorTable.MenuStripGradientEnd))                          {                              e.Graphics.FillRectangle(outerBrush' backgroundRectangle);                          }                            int y2 = backgroundRectangle.Height / 3;                          Rectangle lowerRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Y' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              lowerRectangle'                              ColorTable.MenuStripGradientBegin'                              Color.FromArgb(128' ColorTable.StatusStripGradientBegin)'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' lowerRectangle); //draw top bubble                          }                      }                      else if (e.ToolStrip is ToolStripDropDown)                      {                          base.OnRenderToolStripBackground(e);                      }                      else                      {                          using (SolidBrush outerBrush = new SolidBrush(ColorTable.ToolStripGradientEnd))                          {                              e.Graphics.FillRectangle(outerBrush' backgroundRectangle);                          }                            int y2 = backgroundRectangle.Height / 2;                          Rectangle upperRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Y' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              upperRectangle'                              ColorTable.ToolStripGradientBegin'                              ColorTable.ToolStripGradientMiddle'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' upperRectangle); //draw top bubble                          }                            y2 = backgroundRectangle.Height / 4;                           Rectangle lowerRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Height - y2' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              lowerRectangle'                              ColorTable.ToolStripGradientEnd'                              ColorTable.ToolStripGradientMiddle'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' lowerRectangle); //draw top bubble                          }                      }                  }              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderToolStripBackground,The following statement contains a magic number: if (ColorTable.UseSystemColors == true)              {                  base.OnRenderToolStripBackground(e);              }              else              {                  Trace.WriteLine("ToolStrip: " + e.ToolStrip.GetType());                  Rectangle backgroundRectangle = new Rectangle(0' 0' e.ToolStrip.Width' e.ToolStrip.Height);                  Rectangle innerRectangle = backgroundRectangle;                  innerRectangle.Height = (backgroundRectangle.Height / 2) + 1;                  // Cannot paint a zero sized area                  if ((backgroundRectangle.Width > 0) && (backgroundRectangle.Height > 0))                  {                      if (e.ToolStrip is StatusStrip)                      {                          using (SolidBrush outerBrush = new SolidBrush(ColorTable.StatusStripGradientEnd))                          {                              e.Graphics.FillRectangle(outerBrush' backgroundRectangle);                          }                            int y2 = backgroundRectangle.Height / 2;                          Rectangle upperRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Y' backgroundRectangle.Width' y2);                          upperRectangle.Height += 1;                          using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              upperRectangle'                              ColorTable.StatusStripGradientBegin'                              Color.FromArgb(128'ColorTable.StatusStripGradientBegin)'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' upperRectangle); //draw top bubble                          }                            y2 = (backgroundRectangle.Height / 4) + 1;                          Rectangle lowerRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Height - y2' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              lowerRectangle'                              ColorTable.StatusStripGradientEnd'                              Color.FromArgb(128'ColorTable.StatusStripGradientBegin)'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' lowerRectangle); //draw top bubble                          }                      }                      else if (e.ToolStrip is MenuStrip)                      {                          using (SolidBrush outerBrush = new SolidBrush(ColorTable.MenuStripGradientEnd))                          {                              e.Graphics.FillRectangle(outerBrush' backgroundRectangle);                          }                            int y2 = backgroundRectangle.Height / 3;                          Rectangle lowerRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Y' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              lowerRectangle'                              ColorTable.MenuStripGradientBegin'                              Color.FromArgb(128' ColorTable.StatusStripGradientBegin)'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' lowerRectangle); //draw top bubble                          }                      }                      else if (e.ToolStrip is ToolStripDropDown)                      {                          base.OnRenderToolStripBackground(e);                      }                      else                      {                          using (SolidBrush outerBrush = new SolidBrush(ColorTable.ToolStripGradientEnd))                          {                              e.Graphics.FillRectangle(outerBrush' backgroundRectangle);                          }                            int y2 = backgroundRectangle.Height / 2;                          Rectangle upperRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Y' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              upperRectangle'                              ColorTable.ToolStripGradientBegin'                              ColorTable.ToolStripGradientMiddle'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' upperRectangle); //draw top bubble                          }                            y2 = backgroundRectangle.Height / 4;                           Rectangle lowerRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Height - y2' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              lowerRectangle'                              ColorTable.ToolStripGradientEnd'                              ColorTable.ToolStripGradientMiddle'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' lowerRectangle); //draw top bubble                          }                      }                  }              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderToolStripBackground,The following statement contains a magic number: if (ColorTable.UseSystemColors == true)              {                  base.OnRenderToolStripBackground(e);              }              else              {                  Trace.WriteLine("ToolStrip: " + e.ToolStrip.GetType());                  Rectangle backgroundRectangle = new Rectangle(0' 0' e.ToolStrip.Width' e.ToolStrip.Height);                  Rectangle innerRectangle = backgroundRectangle;                  innerRectangle.Height = (backgroundRectangle.Height / 2) + 1;                  // Cannot paint a zero sized area                  if ((backgroundRectangle.Width > 0) && (backgroundRectangle.Height > 0))                  {                      if (e.ToolStrip is StatusStrip)                      {                          using (SolidBrush outerBrush = new SolidBrush(ColorTable.StatusStripGradientEnd))                          {                              e.Graphics.FillRectangle(outerBrush' backgroundRectangle);                          }                            int y2 = backgroundRectangle.Height / 2;                          Rectangle upperRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Y' backgroundRectangle.Width' y2);                          upperRectangle.Height += 1;                          using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              upperRectangle'                              ColorTable.StatusStripGradientBegin'                              Color.FromArgb(128'ColorTable.StatusStripGradientBegin)'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' upperRectangle); //draw top bubble                          }                            y2 = (backgroundRectangle.Height / 4) + 1;                          Rectangle lowerRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Height - y2' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              lowerRectangle'                              ColorTable.StatusStripGradientEnd'                              Color.FromArgb(128'ColorTable.StatusStripGradientBegin)'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' lowerRectangle); //draw top bubble                          }                      }                      else if (e.ToolStrip is MenuStrip)                      {                          using (SolidBrush outerBrush = new SolidBrush(ColorTable.MenuStripGradientEnd))                          {                              e.Graphics.FillRectangle(outerBrush' backgroundRectangle);                          }                            int y2 = backgroundRectangle.Height / 3;                          Rectangle lowerRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Y' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              lowerRectangle'                              ColorTable.MenuStripGradientBegin'                              Color.FromArgb(128' ColorTable.StatusStripGradientBegin)'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' lowerRectangle); //draw top bubble                          }                      }                      else if (e.ToolStrip is ToolStripDropDown)                      {                          base.OnRenderToolStripBackground(e);                      }                      else                      {                          using (SolidBrush outerBrush = new SolidBrush(ColorTable.ToolStripGradientEnd))                          {                              e.Graphics.FillRectangle(outerBrush' backgroundRectangle);                          }                            int y2 = backgroundRectangle.Height / 2;                          Rectangle upperRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Y' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              upperRectangle'                              ColorTable.ToolStripGradientBegin'                              ColorTable.ToolStripGradientMiddle'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' upperRectangle); //draw top bubble                          }                            y2 = backgroundRectangle.Height / 4;                           Rectangle lowerRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Height - y2' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              lowerRectangle'                              ColorTable.ToolStripGradientEnd'                              ColorTable.ToolStripGradientMiddle'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' lowerRectangle); //draw top bubble                          }                      }                  }              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderToolStripBackground,The following statement contains a magic number: if (ColorTable.UseSystemColors == true)              {                  base.OnRenderToolStripBackground(e);              }              else              {                  Trace.WriteLine("ToolStrip: " + e.ToolStrip.GetType());                  Rectangle backgroundRectangle = new Rectangle(0' 0' e.ToolStrip.Width' e.ToolStrip.Height);                  Rectangle innerRectangle = backgroundRectangle;                  innerRectangle.Height = (backgroundRectangle.Height / 2) + 1;                  // Cannot paint a zero sized area                  if ((backgroundRectangle.Width > 0) && (backgroundRectangle.Height > 0))                  {                      if (e.ToolStrip is StatusStrip)                      {                          using (SolidBrush outerBrush = new SolidBrush(ColorTable.StatusStripGradientEnd))                          {                              e.Graphics.FillRectangle(outerBrush' backgroundRectangle);                          }                            int y2 = backgroundRectangle.Height / 2;                          Rectangle upperRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Y' backgroundRectangle.Width' y2);                          upperRectangle.Height += 1;                          using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              upperRectangle'                              ColorTable.StatusStripGradientBegin'                              Color.FromArgb(128'ColorTable.StatusStripGradientBegin)'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' upperRectangle); //draw top bubble                          }                            y2 = (backgroundRectangle.Height / 4) + 1;                          Rectangle lowerRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Height - y2' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              lowerRectangle'                              ColorTable.StatusStripGradientEnd'                              Color.FromArgb(128'ColorTable.StatusStripGradientBegin)'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' lowerRectangle); //draw top bubble                          }                      }                      else if (e.ToolStrip is MenuStrip)                      {                          using (SolidBrush outerBrush = new SolidBrush(ColorTable.MenuStripGradientEnd))                          {                              e.Graphics.FillRectangle(outerBrush' backgroundRectangle);                          }                            int y2 = backgroundRectangle.Height / 3;                          Rectangle lowerRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Y' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              lowerRectangle'                              ColorTable.MenuStripGradientBegin'                              Color.FromArgb(128' ColorTable.StatusStripGradientBegin)'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' lowerRectangle); //draw top bubble                          }                      }                      else if (e.ToolStrip is ToolStripDropDown)                      {                          base.OnRenderToolStripBackground(e);                      }                      else                      {                          using (SolidBrush outerBrush = new SolidBrush(ColorTable.ToolStripGradientEnd))                          {                              e.Graphics.FillRectangle(outerBrush' backgroundRectangle);                          }                            int y2 = backgroundRectangle.Height / 2;                          Rectangle upperRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Y' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              upperRectangle'                              ColorTable.ToolStripGradientBegin'                              ColorTable.ToolStripGradientMiddle'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' upperRectangle); //draw top bubble                          }                            y2 = backgroundRectangle.Height / 4;                           Rectangle lowerRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Height - y2' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              lowerRectangle'                              ColorTable.ToolStripGradientEnd'                              ColorTable.ToolStripGradientMiddle'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' lowerRectangle); //draw top bubble                          }                      }                  }              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderToolStripBackground,The following statement contains a magic number: if (ColorTable.UseSystemColors == true)              {                  base.OnRenderToolStripBackground(e);              }              else              {                  Trace.WriteLine("ToolStrip: " + e.ToolStrip.GetType());                  Rectangle backgroundRectangle = new Rectangle(0' 0' e.ToolStrip.Width' e.ToolStrip.Height);                  Rectangle innerRectangle = backgroundRectangle;                  innerRectangle.Height = (backgroundRectangle.Height / 2) + 1;                  // Cannot paint a zero sized area                  if ((backgroundRectangle.Width > 0) && (backgroundRectangle.Height > 0))                  {                      if (e.ToolStrip is StatusStrip)                      {                          using (SolidBrush outerBrush = new SolidBrush(ColorTable.StatusStripGradientEnd))                          {                              e.Graphics.FillRectangle(outerBrush' backgroundRectangle);                          }                            int y2 = backgroundRectangle.Height / 2;                          Rectangle upperRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Y' backgroundRectangle.Width' y2);                          upperRectangle.Height += 1;                          using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              upperRectangle'                              ColorTable.StatusStripGradientBegin'                              Color.FromArgb(128'ColorTable.StatusStripGradientBegin)'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' upperRectangle); //draw top bubble                          }                            y2 = (backgroundRectangle.Height / 4) + 1;                          Rectangle lowerRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Height - y2' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              lowerRectangle'                              ColorTable.StatusStripGradientEnd'                              Color.FromArgb(128'ColorTable.StatusStripGradientBegin)'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' lowerRectangle); //draw top bubble                          }                      }                      else if (e.ToolStrip is MenuStrip)                      {                          using (SolidBrush outerBrush = new SolidBrush(ColorTable.MenuStripGradientEnd))                          {                              e.Graphics.FillRectangle(outerBrush' backgroundRectangle);                          }                            int y2 = backgroundRectangle.Height / 3;                          Rectangle lowerRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Y' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              lowerRectangle'                              ColorTable.MenuStripGradientBegin'                              Color.FromArgb(128' ColorTable.StatusStripGradientBegin)'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' lowerRectangle); //draw top bubble                          }                      }                      else if (e.ToolStrip is ToolStripDropDown)                      {                          base.OnRenderToolStripBackground(e);                      }                      else                      {                          using (SolidBrush outerBrush = new SolidBrush(ColorTable.ToolStripGradientEnd))                          {                              e.Graphics.FillRectangle(outerBrush' backgroundRectangle);                          }                            int y2 = backgroundRectangle.Height / 2;                          Rectangle upperRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Y' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              upperRectangle'                              ColorTable.ToolStripGradientBegin'                              ColorTable.ToolStripGradientMiddle'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' upperRectangle); //draw top bubble                          }                            y2 = backgroundRectangle.Height / 4;                           Rectangle lowerRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Height - y2' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              lowerRectangle'                              ColorTable.ToolStripGradientEnd'                              ColorTable.ToolStripGradientMiddle'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' lowerRectangle); //draw top bubble                          }                      }                  }              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderToolStripBackground,The following statement contains a magic number: if (ColorTable.UseSystemColors == true)              {                  base.OnRenderToolStripBackground(e);              }              else              {                  Trace.WriteLine("ToolStrip: " + e.ToolStrip.GetType());                  Rectangle backgroundRectangle = new Rectangle(0' 0' e.ToolStrip.Width' e.ToolStrip.Height);                  Rectangle innerRectangle = backgroundRectangle;                  innerRectangle.Height = (backgroundRectangle.Height / 2) + 1;                  // Cannot paint a zero sized area                  if ((backgroundRectangle.Width > 0) && (backgroundRectangle.Height > 0))                  {                      if (e.ToolStrip is StatusStrip)                      {                          using (SolidBrush outerBrush = new SolidBrush(ColorTable.StatusStripGradientEnd))                          {                              e.Graphics.FillRectangle(outerBrush' backgroundRectangle);                          }                            int y2 = backgroundRectangle.Height / 2;                          Rectangle upperRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Y' backgroundRectangle.Width' y2);                          upperRectangle.Height += 1;                          using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              upperRectangle'                              ColorTable.StatusStripGradientBegin'                              Color.FromArgb(128'ColorTable.StatusStripGradientBegin)'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' upperRectangle); //draw top bubble                          }                            y2 = (backgroundRectangle.Height / 4) + 1;                          Rectangle lowerRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Height - y2' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              lowerRectangle'                              ColorTable.StatusStripGradientEnd'                              Color.FromArgb(128'ColorTable.StatusStripGradientBegin)'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' lowerRectangle); //draw top bubble                          }                      }                      else if (e.ToolStrip is MenuStrip)                      {                          using (SolidBrush outerBrush = new SolidBrush(ColorTable.MenuStripGradientEnd))                          {                              e.Graphics.FillRectangle(outerBrush' backgroundRectangle);                          }                            int y2 = backgroundRectangle.Height / 3;                          Rectangle lowerRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Y' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              lowerRectangle'                              ColorTable.MenuStripGradientBegin'                              Color.FromArgb(128' ColorTable.StatusStripGradientBegin)'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' lowerRectangle); //draw top bubble                          }                      }                      else if (e.ToolStrip is ToolStripDropDown)                      {                          base.OnRenderToolStripBackground(e);                      }                      else                      {                          using (SolidBrush outerBrush = new SolidBrush(ColorTable.ToolStripGradientEnd))                          {                              e.Graphics.FillRectangle(outerBrush' backgroundRectangle);                          }                            int y2 = backgroundRectangle.Height / 2;                          Rectangle upperRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Y' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              upperRectangle'                              ColorTable.ToolStripGradientBegin'                              ColorTable.ToolStripGradientMiddle'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' upperRectangle); //draw top bubble                          }                            y2 = backgroundRectangle.Height / 4;                           Rectangle lowerRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Height - y2' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              lowerRectangle'                              ColorTable.ToolStripGradientEnd'                              ColorTable.ToolStripGradientMiddle'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' lowerRectangle); //draw top bubble                          }                      }                  }              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderToolStripBackground,The following statement contains a magic number: if (ColorTable.UseSystemColors == true)              {                  base.OnRenderToolStripBackground(e);              }              else              {                  Trace.WriteLine("ToolStrip: " + e.ToolStrip.GetType());                  Rectangle backgroundRectangle = new Rectangle(0' 0' e.ToolStrip.Width' e.ToolStrip.Height);                  Rectangle innerRectangle = backgroundRectangle;                  innerRectangle.Height = (backgroundRectangle.Height / 2) + 1;                  // Cannot paint a zero sized area                  if ((backgroundRectangle.Width > 0) && (backgroundRectangle.Height > 0))                  {                      if (e.ToolStrip is StatusStrip)                      {                          using (SolidBrush outerBrush = new SolidBrush(ColorTable.StatusStripGradientEnd))                          {                              e.Graphics.FillRectangle(outerBrush' backgroundRectangle);                          }                            int y2 = backgroundRectangle.Height / 2;                          Rectangle upperRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Y' backgroundRectangle.Width' y2);                          upperRectangle.Height += 1;                          using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              upperRectangle'                              ColorTable.StatusStripGradientBegin'                              Color.FromArgb(128'ColorTable.StatusStripGradientBegin)'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' upperRectangle); //draw top bubble                          }                            y2 = (backgroundRectangle.Height / 4) + 1;                          Rectangle lowerRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Height - y2' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              lowerRectangle'                              ColorTable.StatusStripGradientEnd'                              Color.FromArgb(128'ColorTable.StatusStripGradientBegin)'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' lowerRectangle); //draw top bubble                          }                      }                      else if (e.ToolStrip is MenuStrip)                      {                          using (SolidBrush outerBrush = new SolidBrush(ColorTable.MenuStripGradientEnd))                          {                              e.Graphics.FillRectangle(outerBrush' backgroundRectangle);                          }                            int y2 = backgroundRectangle.Height / 3;                          Rectangle lowerRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Y' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              lowerRectangle'                              ColorTable.MenuStripGradientBegin'                              Color.FromArgb(128' ColorTable.StatusStripGradientBegin)'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' lowerRectangle); //draw top bubble                          }                      }                      else if (e.ToolStrip is ToolStripDropDown)                      {                          base.OnRenderToolStripBackground(e);                      }                      else                      {                          using (SolidBrush outerBrush = new SolidBrush(ColorTable.ToolStripGradientEnd))                          {                              e.Graphics.FillRectangle(outerBrush' backgroundRectangle);                          }                            int y2 = backgroundRectangle.Height / 2;                          Rectangle upperRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Y' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              upperRectangle'                              ColorTable.ToolStripGradientBegin'                              ColorTable.ToolStripGradientMiddle'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' upperRectangle); //draw top bubble                          }                            y2 = backgroundRectangle.Height / 4;                           Rectangle lowerRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Height - y2' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              lowerRectangle'                              ColorTable.ToolStripGradientEnd'                              ColorTable.ToolStripGradientMiddle'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' lowerRectangle); //draw top bubble                          }                      }                  }              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderToolStripBackground,The following statement contains a magic number: if (ColorTable.UseSystemColors == true)              {                  base.OnRenderToolStripBackground(e);              }              else              {                  Trace.WriteLine("ToolStrip: " + e.ToolStrip.GetType());                  Rectangle backgroundRectangle = new Rectangle(0' 0' e.ToolStrip.Width' e.ToolStrip.Height);                  Rectangle innerRectangle = backgroundRectangle;                  innerRectangle.Height = (backgroundRectangle.Height / 2) + 1;                  // Cannot paint a zero sized area                  if ((backgroundRectangle.Width > 0) && (backgroundRectangle.Height > 0))                  {                      if (e.ToolStrip is StatusStrip)                      {                          using (SolidBrush outerBrush = new SolidBrush(ColorTable.StatusStripGradientEnd))                          {                              e.Graphics.FillRectangle(outerBrush' backgroundRectangle);                          }                            int y2 = backgroundRectangle.Height / 2;                          Rectangle upperRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Y' backgroundRectangle.Width' y2);                          upperRectangle.Height += 1;                          using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              upperRectangle'                              ColorTable.StatusStripGradientBegin'                              Color.FromArgb(128'ColorTable.StatusStripGradientBegin)'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' upperRectangle); //draw top bubble                          }                            y2 = (backgroundRectangle.Height / 4) + 1;                          Rectangle lowerRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Height - y2' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              lowerRectangle'                              ColorTable.StatusStripGradientEnd'                              Color.FromArgb(128'ColorTable.StatusStripGradientBegin)'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' lowerRectangle); //draw top bubble                          }                      }                      else if (e.ToolStrip is MenuStrip)                      {                          using (SolidBrush outerBrush = new SolidBrush(ColorTable.MenuStripGradientEnd))                          {                              e.Graphics.FillRectangle(outerBrush' backgroundRectangle);                          }                            int y2 = backgroundRectangle.Height / 3;                          Rectangle lowerRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Y' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              lowerRectangle'                              ColorTable.MenuStripGradientBegin'                              Color.FromArgb(128' ColorTable.StatusStripGradientBegin)'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' lowerRectangle); //draw top bubble                          }                      }                      else if (e.ToolStrip is ToolStripDropDown)                      {                          base.OnRenderToolStripBackground(e);                      }                      else                      {                          using (SolidBrush outerBrush = new SolidBrush(ColorTable.ToolStripGradientEnd))                          {                              e.Graphics.FillRectangle(outerBrush' backgroundRectangle);                          }                            int y2 = backgroundRectangle.Height / 2;                          Rectangle upperRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Y' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              upperRectangle'                              ColorTable.ToolStripGradientBegin'                              ColorTable.ToolStripGradientMiddle'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' upperRectangle); //draw top bubble                          }                            y2 = backgroundRectangle.Height / 4;                           Rectangle lowerRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Height - y2' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              lowerRectangle'                              ColorTable.ToolStripGradientEnd'                              ColorTable.ToolStripGradientMiddle'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' lowerRectangle); //draw top bubble                          }                      }                  }              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderToolStripBackground,The following statement contains a magic number: if (ColorTable.UseSystemColors == true)              {                  base.OnRenderToolStripBackground(e);              }              else              {                  Trace.WriteLine("ToolStrip: " + e.ToolStrip.GetType());                  Rectangle backgroundRectangle = new Rectangle(0' 0' e.ToolStrip.Width' e.ToolStrip.Height);                  Rectangle innerRectangle = backgroundRectangle;                  innerRectangle.Height = (backgroundRectangle.Height / 2) + 1;                  // Cannot paint a zero sized area                  if ((backgroundRectangle.Width > 0) && (backgroundRectangle.Height > 0))                  {                      if (e.ToolStrip is StatusStrip)                      {                          using (SolidBrush outerBrush = new SolidBrush(ColorTable.StatusStripGradientEnd))                          {                              e.Graphics.FillRectangle(outerBrush' backgroundRectangle);                          }                            int y2 = backgroundRectangle.Height / 2;                          Rectangle upperRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Y' backgroundRectangle.Width' y2);                          upperRectangle.Height += 1;                          using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              upperRectangle'                              ColorTable.StatusStripGradientBegin'                              Color.FromArgb(128'ColorTable.StatusStripGradientBegin)'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' upperRectangle); //draw top bubble                          }                            y2 = (backgroundRectangle.Height / 4) + 1;                          Rectangle lowerRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Height - y2' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              lowerRectangle'                              ColorTable.StatusStripGradientEnd'                              Color.FromArgb(128'ColorTable.StatusStripGradientBegin)'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' lowerRectangle); //draw top bubble                          }                      }                      else if (e.ToolStrip is MenuStrip)                      {                          using (SolidBrush outerBrush = new SolidBrush(ColorTable.MenuStripGradientEnd))                          {                              e.Graphics.FillRectangle(outerBrush' backgroundRectangle);                          }                            int y2 = backgroundRectangle.Height / 3;                          Rectangle lowerRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Y' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              lowerRectangle'                              ColorTable.MenuStripGradientBegin'                              Color.FromArgb(128' ColorTable.StatusStripGradientBegin)'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' lowerRectangle); //draw top bubble                          }                      }                      else if (e.ToolStrip is ToolStripDropDown)                      {                          base.OnRenderToolStripBackground(e);                      }                      else                      {                          using (SolidBrush outerBrush = new SolidBrush(ColorTable.ToolStripGradientEnd))                          {                              e.Graphics.FillRectangle(outerBrush' backgroundRectangle);                          }                            int y2 = backgroundRectangle.Height / 2;                          Rectangle upperRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Y' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              upperRectangle'                              ColorTable.ToolStripGradientBegin'                              ColorTable.ToolStripGradientMiddle'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' upperRectangle); //draw top bubble                          }                            y2 = backgroundRectangle.Height / 4;                           Rectangle lowerRectangle = new Rectangle(backgroundRectangle.X' backgroundRectangle.Height - y2' backgroundRectangle.Width' y2);                            using (LinearGradientBrush innerRectangleBrush = new LinearGradientBrush(                              lowerRectangle'                              ColorTable.ToolStripGradientEnd'                              ColorTable.ToolStripGradientMiddle'                              LinearGradientMode.Vertical))                          {                              e.Graphics.FillRectangle(innerRectangleBrush' lowerRectangle); //draw top bubble                          }                      }                  }              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderImageMargin,The following statement contains a magic number: if (ColorTable.UseSystemColors == true)  			{  				base.OnRenderToolStripBackground(e);  			}  			else  			{  				if ((e.ToolStrip is ContextMenuStrip) ||  					(e.ToolStrip is ToolStripDropDownMenu))  				{  					// Start with the total margin area  					Rectangle marginRectangle = e.AffectedBounds;    					// Do we need to draw with separator on the opposite edge?  					bool bIsRightToLeft = (e.ToolStrip.RightToLeft == RightToLeft.Yes);    					marginRectangle.Y += MarginInset;  					marginRectangle.Height -= MarginInset * 2;    					// Reduce so it is inside the border  					if (bIsRightToLeft == false)  					{  						marginRectangle.X += MarginInset;  					}  					else  					{  						marginRectangle.X += MarginInset / 2;  					}    					// Draw the entire margine area in a solid color  					using (SolidBrush backBrush = new SolidBrush(  						ColorTable.ImageMarginGradientBegin))  						e.Graphics.FillRectangle(backBrush' marginRectangle);  				}  				else  				{  					base.OnRenderImageMargin(e);  				}  			}
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,OnRenderImageMargin,The following statement contains a magic number: if (ColorTable.UseSystemColors == true)  			{  				base.OnRenderToolStripBackground(e);  			}  			else  			{  				if ((e.ToolStrip is ContextMenuStrip) ||  					(e.ToolStrip is ToolStripDropDownMenu))  				{  					// Start with the total margin area  					Rectangle marginRectangle = e.AffectedBounds;    					// Do we need to draw with separator on the opposite edge?  					bool bIsRightToLeft = (e.ToolStrip.RightToLeft == RightToLeft.Yes);    					marginRectangle.Y += MarginInset;  					marginRectangle.Height -= MarginInset * 2;    					// Reduce so it is inside the border  					if (bIsRightToLeft == false)  					{  						marginRectangle.X += MarginInset;  					}  					else  					{  						marginRectangle.X += MarginInset / 2;  					}    					// Draw the entire margine area in a solid color  					using (SolidBrush backBrush = new SolidBrush(  						ColorTable.ImageMarginGradientBegin))  						e.Graphics.FillRectangle(backBrush' marginRectangle);  				}  				else  				{  					base.OnRenderImageMargin(e);  				}  			}
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,GetBackgroundPath,The following statement contains a magic number: graphicsPath.AddArc(x' y' radius' radius' 180' 90);
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,GetBackgroundPath,The following statement contains a magic number: graphicsPath.AddArc(x' y' radius' radius' 180' 90);
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,GetBackgroundPath,The following statement contains a magic number: graphicsPath.AddArc(x + width - radius' y' radius' radius' 270' 90);
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,GetBackgroundPath,The following statement contains a magic number: graphicsPath.AddArc(x + width - radius' y' radius' radius' 270' 90);
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,GetBackgroundPath,The following statement contains a magic number: graphicsPath.AddArc(x + width - radius' y + height - radius' radius' radius' 0' 90);
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,GetBackgroundPath,The following statement contains a magic number: graphicsPath.AddArc(x' y + height - radius' radius' radius' 90' 90);
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,GetBackgroundPath,The following statement contains a magic number: graphicsPath.AddArc(x' y + height - radius' radius' radius' 90' 90);
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,RenderButton,The following statement contains a magic number: using (GraphicsPath graphicsPath = GetBackgroundPath(buttonBounds' 3))              {                  using (LinearGradientBrush backBrush = new LinearGradientBrush(buttonBounds'                      gradientColor'                      Color.Transparent'                      LinearGradientMode.Vertical))                  {                      backBrush.Blend = ButtonBlend;                      graphics.FillPath(backBrush' graphicsPath);                  }              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,DrawButtonBorder,The following statement contains a magic number: using (GraphicsPath itemPath = GetBackgroundPath(buttonBounds' 3))              {                  using (Pen itemPen = new Pen(borderColor))                  {                      graphics.DrawPath(itemPen' itemPath);                  }              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,DrawInnerButtonBorder,The following statement contains a magic number: using (GraphicsPath innerBorderPath = GetBackgroundPath(innerButtonRectangle' 3))              {                  using (Pen itemPen = new Pen(innerBorderColor))                  {                      graphics.DrawPath(itemPen' innerBorderPath);                  }              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,RenderArrowInternal,The following statement contains a magic number: Point point = new Point(dropDownRectangle.Left + (dropDownRectangle.Width / 2)' dropDownRectangle.Top + (dropDownRectangle.Height / 2));
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,RenderArrowInternal,The following statement contains a magic number: Point point = new Point(dropDownRectangle.Left + (dropDownRectangle.Width / 2)' dropDownRectangle.Top + (dropDownRectangle.Height / 2));
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,RenderArrowInternal,The following statement contains a magic number: point.X += dropDownRectangle.Width % 2;
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,RenderArrowInternal,The following statement contains a magic number: switch (direction)              {                  case ArrowDirection.Left:                      points = new Point[] { new Point(point.X + 2' point.Y - 3)' new Point(point.X + 2' point.Y + 3)' new Point(point.X - 1' point.Y) };                      break;                    case ArrowDirection.Up:                      points = new Point[] { new Point(point.X - 2' point.Y + 1)' new Point(point.X + 3' point.Y + 1)' new Point(point.X' point.Y - 2) };                      break;                    case ArrowDirection.Right:                      points = new Point[] { new Point(point.X - 2' point.Y - 3)' new Point(point.X - 2' point.Y + 3)' new Point(point.X + 1' point.Y) };                      break;                    default:                      points = new Point[] { new Point(point.X - 2' point.Y - 1)' new Point(point.X + 3' point.Y - 1)' new Point(point.X' point.Y + 2) };                      break;              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,RenderArrowInternal,The following statement contains a magic number: switch (direction)              {                  case ArrowDirection.Left:                      points = new Point[] { new Point(point.X + 2' point.Y - 3)' new Point(point.X + 2' point.Y + 3)' new Point(point.X - 1' point.Y) };                      break;                    case ArrowDirection.Up:                      points = new Point[] { new Point(point.X - 2' point.Y + 1)' new Point(point.X + 3' point.Y + 1)' new Point(point.X' point.Y - 2) };                      break;                    case ArrowDirection.Right:                      points = new Point[] { new Point(point.X - 2' point.Y - 3)' new Point(point.X - 2' point.Y + 3)' new Point(point.X + 1' point.Y) };                      break;                    default:                      points = new Point[] { new Point(point.X - 2' point.Y - 1)' new Point(point.X + 3' point.Y - 1)' new Point(point.X' point.Y + 2) };                      break;              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,RenderArrowInternal,The following statement contains a magic number: switch (direction)              {                  case ArrowDirection.Left:                      points = new Point[] { new Point(point.X + 2' point.Y - 3)' new Point(point.X + 2' point.Y + 3)' new Point(point.X - 1' point.Y) };                      break;                    case ArrowDirection.Up:                      points = new Point[] { new Point(point.X - 2' point.Y + 1)' new Point(point.X + 3' point.Y + 1)' new Point(point.X' point.Y - 2) };                      break;                    case ArrowDirection.Right:                      points = new Point[] { new Point(point.X - 2' point.Y - 3)' new Point(point.X - 2' point.Y + 3)' new Point(point.X + 1' point.Y) };                      break;                    default:                      points = new Point[] { new Point(point.X - 2' point.Y - 1)' new Point(point.X + 3' point.Y - 1)' new Point(point.X' point.Y + 2) };                      break;              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,RenderArrowInternal,The following statement contains a magic number: switch (direction)              {                  case ArrowDirection.Left:                      points = new Point[] { new Point(point.X + 2' point.Y - 3)' new Point(point.X + 2' point.Y + 3)' new Point(point.X - 1' point.Y) };                      break;                    case ArrowDirection.Up:                      points = new Point[] { new Point(point.X - 2' point.Y + 1)' new Point(point.X + 3' point.Y + 1)' new Point(point.X' point.Y - 2) };                      break;                    case ArrowDirection.Right:                      points = new Point[] { new Point(point.X - 2' point.Y - 3)' new Point(point.X - 2' point.Y + 3)' new Point(point.X + 1' point.Y) };                      break;                    default:                      points = new Point[] { new Point(point.X - 2' point.Y - 1)' new Point(point.X + 3' point.Y - 1)' new Point(point.X' point.Y + 2) };                      break;              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,RenderArrowInternal,The following statement contains a magic number: switch (direction)              {                  case ArrowDirection.Left:                      points = new Point[] { new Point(point.X + 2' point.Y - 3)' new Point(point.X + 2' point.Y + 3)' new Point(point.X - 1' point.Y) };                      break;                    case ArrowDirection.Up:                      points = new Point[] { new Point(point.X - 2' point.Y + 1)' new Point(point.X + 3' point.Y + 1)' new Point(point.X' point.Y - 2) };                      break;                    case ArrowDirection.Right:                      points = new Point[] { new Point(point.X - 2' point.Y - 3)' new Point(point.X - 2' point.Y + 3)' new Point(point.X + 1' point.Y) };                      break;                    default:                      points = new Point[] { new Point(point.X - 2' point.Y - 1)' new Point(point.X + 3' point.Y - 1)' new Point(point.X' point.Y + 2) };                      break;              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,RenderArrowInternal,The following statement contains a magic number: switch (direction)              {                  case ArrowDirection.Left:                      points = new Point[] { new Point(point.X + 2' point.Y - 3)' new Point(point.X + 2' point.Y + 3)' new Point(point.X - 1' point.Y) };                      break;                    case ArrowDirection.Up:                      points = new Point[] { new Point(point.X - 2' point.Y + 1)' new Point(point.X + 3' point.Y + 1)' new Point(point.X' point.Y - 2) };                      break;                    case ArrowDirection.Right:                      points = new Point[] { new Point(point.X - 2' point.Y - 3)' new Point(point.X - 2' point.Y + 3)' new Point(point.X + 1' point.Y) };                      break;                    default:                      points = new Point[] { new Point(point.X - 2' point.Y - 1)' new Point(point.X + 3' point.Y - 1)' new Point(point.X' point.Y + 2) };                      break;              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,RenderArrowInternal,The following statement contains a magic number: switch (direction)              {                  case ArrowDirection.Left:                      points = new Point[] { new Point(point.X + 2' point.Y - 3)' new Point(point.X + 2' point.Y + 3)' new Point(point.X - 1' point.Y) };                      break;                    case ArrowDirection.Up:                      points = new Point[] { new Point(point.X - 2' point.Y + 1)' new Point(point.X + 3' point.Y + 1)' new Point(point.X' point.Y - 2) };                      break;                    case ArrowDirection.Right:                      points = new Point[] { new Point(point.X - 2' point.Y - 3)' new Point(point.X - 2' point.Y + 3)' new Point(point.X + 1' point.Y) };                      break;                    default:                      points = new Point[] { new Point(point.X - 2' point.Y - 1)' new Point(point.X + 3' point.Y - 1)' new Point(point.X' point.Y + 2) };                      break;              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,RenderArrowInternal,The following statement contains a magic number: switch (direction)              {                  case ArrowDirection.Left:                      points = new Point[] { new Point(point.X + 2' point.Y - 3)' new Point(point.X + 2' point.Y + 3)' new Point(point.X - 1' point.Y) };                      break;                    case ArrowDirection.Up:                      points = new Point[] { new Point(point.X - 2' point.Y + 1)' new Point(point.X + 3' point.Y + 1)' new Point(point.X' point.Y - 2) };                      break;                    case ArrowDirection.Right:                      points = new Point[] { new Point(point.X - 2' point.Y - 3)' new Point(point.X - 2' point.Y + 3)' new Point(point.X + 1' point.Y) };                      break;                    default:                      points = new Point[] { new Point(point.X - 2' point.Y - 1)' new Point(point.X + 3' point.Y - 1)' new Point(point.X' point.Y + 2) };                      break;              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,RenderArrowInternal,The following statement contains a magic number: switch (direction)              {                  case ArrowDirection.Left:                      points = new Point[] { new Point(point.X + 2' point.Y - 3)' new Point(point.X + 2' point.Y + 3)' new Point(point.X - 1' point.Y) };                      break;                    case ArrowDirection.Up:                      points = new Point[] { new Point(point.X - 2' point.Y + 1)' new Point(point.X + 3' point.Y + 1)' new Point(point.X' point.Y - 2) };                      break;                    case ArrowDirection.Right:                      points = new Point[] { new Point(point.X - 2' point.Y - 3)' new Point(point.X - 2' point.Y + 3)' new Point(point.X + 1' point.Y) };                      break;                    default:                      points = new Point[] { new Point(point.X - 2' point.Y - 1)' new Point(point.X + 3' point.Y - 1)' new Point(point.X' point.Y + 2) };                      break;              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,RenderArrowInternal,The following statement contains a magic number: switch (direction)              {                  case ArrowDirection.Left:                      points = new Point[] { new Point(point.X + 2' point.Y - 3)' new Point(point.X + 2' point.Y + 3)' new Point(point.X - 1' point.Y) };                      break;                    case ArrowDirection.Up:                      points = new Point[] { new Point(point.X - 2' point.Y + 1)' new Point(point.X + 3' point.Y + 1)' new Point(point.X' point.Y - 2) };                      break;                    case ArrowDirection.Right:                      points = new Point[] { new Point(point.X - 2' point.Y - 3)' new Point(point.X - 2' point.Y + 3)' new Point(point.X + 1' point.Y) };                      break;                    default:                      points = new Point[] { new Point(point.X - 2' point.Y - 1)' new Point(point.X + 3' point.Y - 1)' new Point(point.X' point.Y + 2) };                      break;              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,RenderArrowInternal,The following statement contains a magic number: switch (direction)              {                  case ArrowDirection.Left:                      points = new Point[] { new Point(point.X + 2' point.Y - 3)' new Point(point.X + 2' point.Y + 3)' new Point(point.X - 1' point.Y) };                      break;                    case ArrowDirection.Up:                      points = new Point[] { new Point(point.X - 2' point.Y + 1)' new Point(point.X + 3' point.Y + 1)' new Point(point.X' point.Y - 2) };                      break;                    case ArrowDirection.Right:                      points = new Point[] { new Point(point.X - 2' point.Y - 3)' new Point(point.X - 2' point.Y + 3)' new Point(point.X + 1' point.Y) };                      break;                    default:                      points = new Point[] { new Point(point.X - 2' point.Y - 1)' new Point(point.X + 3' point.Y - 1)' new Point(point.X' point.Y + 2) };                      break;              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,RenderArrowInternal,The following statement contains a magic number: switch (direction)              {                  case ArrowDirection.Left:                      points = new Point[] { new Point(point.X + 2' point.Y - 3)' new Point(point.X + 2' point.Y + 3)' new Point(point.X - 1' point.Y) };                      break;                    case ArrowDirection.Up:                      points = new Point[] { new Point(point.X - 2' point.Y + 1)' new Point(point.X + 3' point.Y + 1)' new Point(point.X' point.Y - 2) };                      break;                    case ArrowDirection.Right:                      points = new Point[] { new Point(point.X - 2' point.Y - 3)' new Point(point.X - 2' point.Y + 3)' new Point(point.X + 1' point.Y) };                      break;                    default:                      points = new Point[] { new Point(point.X - 2' point.Y - 1)' new Point(point.X + 3' point.Y - 1)' new Point(point.X' point.Y + 2) };                      break;              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,RenderArrowInternal,The following statement contains a magic number: switch (direction)              {                  case ArrowDirection.Left:                      points = new Point[] { new Point(point.X + 2' point.Y - 3)' new Point(point.X + 2' point.Y + 3)' new Point(point.X - 1' point.Y) };                      break;                    case ArrowDirection.Up:                      points = new Point[] { new Point(point.X - 2' point.Y + 1)' new Point(point.X + 3' point.Y + 1)' new Point(point.X' point.Y - 2) };                      break;                    case ArrowDirection.Right:                      points = new Point[] { new Point(point.X - 2' point.Y - 3)' new Point(point.X - 2' point.Y + 3)' new Point(point.X + 1' point.Y) };                      break;                    default:                      points = new Point[] { new Point(point.X - 2' point.Y - 1)' new Point(point.X + 3' point.Y - 1)' new Point(point.X' point.Y + 2) };                      break;              }
Magic Number,BSE.Windows.Forms,BseRenderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\BseRenderer.cs,RenderArrowInternal,The following statement contains a magic number: switch (direction)              {                  case ArrowDirection.Left:                      points = new Point[] { new Point(point.X + 2' point.Y - 3)' new Point(point.X + 2' point.Y + 3)' new Point(point.X - 1' point.Y) };                      break;                    case ArrowDirection.Up:                      points = new Point[] { new Point(point.X - 2' point.Y + 1)' new Point(point.X + 3' point.Y + 1)' new Point(point.X' point.Y - 2) };                      break;                    case ArrowDirection.Right:                      points = new Point[] { new Point(point.X - 2' point.Y - 3)' new Point(point.X - 2' point.Y + 3)' new Point(point.X + 1' point.Y) };                      break;                    default:                      points = new Point[] { new Point(point.X - 2' point.Y - 1)' new Point(point.X + 3' point.Y - 1)' new Point(point.X' point.Y + 2) };                      break;              }
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedBorder] = Color.FromArgb(145' 153' 164);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedBorder] = Color.FromArgb(145' 153' 164);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedBorder] = Color.FromArgb(145' 153' 164);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientBegin] = Color.FromArgb(141' 170' 253);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientBegin] = Color.FromArgb(141' 170' 253);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientBegin] = Color.FromArgb(141' 170' 253);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientEnd] = Color.FromArgb(98' 101' 252);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientEnd] = Color.FromArgb(98' 101' 252);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientEnd] = Color.FromArgb(98' 101' 252);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientMiddle] = Color.FromArgb(43' 93' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientMiddle] = Color.FromArgb(43' 93' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientMiddle] = Color.FromArgb(43' 93' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientBegin] = Color.FromArgb(106' 109' 228);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientBegin] = Color.FromArgb(106' 109' 228);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientBegin] = Color.FromArgb(106' 109' 228);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientEnd] = Color.FromArgb(88' 111' 226);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientEnd] = Color.FromArgb(88' 111' 226);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientEnd] = Color.FromArgb(88' 111' 226);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientMiddle] = Color.FromArgb(39' 39' 217);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientMiddle] = Color.FromArgb(39' 39' 217);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientMiddle] = Color.FromArgb(39' 39' 217);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedHighlightBorder] = Color.FromArgb(145' 153' 164);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedHighlightBorder] = Color.FromArgb(145' 153' 164);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedHighlightBorder] = Color.FromArgb(145' 153' 164);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.GripDark] = Color.FromArgb(102' 102' 102);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.GripDark] = Color.FromArgb(102' 102' 102);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.GripDark] = Color.FromArgb(102' 102' 102);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.GripLight] = Color.FromArgb(182' 182' 182);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.GripLight] = Color.FromArgb(182' 182' 182);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.GripLight] = Color.FromArgb(182' 182' 182);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ImageMarginGradientBegin] = Color.FromArgb(239' 239' 239);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ImageMarginGradientBegin] = Color.FromArgb(239' 239' 239);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ImageMarginGradientBegin] = Color.FromArgb(239' 239' 239);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelectedGradientBegin] = Color.FromArgb(231' 239' 243);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelectedGradientBegin] = Color.FromArgb(231' 239' 243);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelectedGradientBegin] = Color.FromArgb(231' 239' 243);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelectedGradientEnd] = Color.FromArgb(218' 235' 243);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelectedGradientEnd] = Color.FromArgb(218' 235' 243);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelectedGradientEnd] = Color.FromArgb(218' 235' 243);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemTopLevelSelectedBorder] = Color.FromArgb(145' 153' 164);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemTopLevelSelectedBorder] = Color.FromArgb(145' 153' 164);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemTopLevelSelectedBorder] = Color.FromArgb(145' 153' 164);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemTopLevelSelectedGradientBegin] = Color.FromArgb(205' 208' 213);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemTopLevelSelectedGradientBegin] = Color.FromArgb(205' 208' 213);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemTopLevelSelectedGradientBegin] = Color.FromArgb(205' 208' 213);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuStripGradientBegin] = Color.FromArgb(102' 102' 102);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuStripGradientBegin] = Color.FromArgb(102' 102' 102);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuStripGradientBegin] = Color.FromArgb(102' 102' 102);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientBegin] = Color.FromArgb(136' 144' 254);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientBegin] = Color.FromArgb(136' 144' 254);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientBegin] = Color.FromArgb(136' 144' 254);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientEnd] = Color.FromArgb(111' 145' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientEnd] = Color.FromArgb(111' 145' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientEnd] = Color.FromArgb(111' 145' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientMiddle] = Color.FromArgb(42' 52' 254);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientMiddle] = Color.FromArgb(42' 52' 254);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientMiddle] = Color.FromArgb(42' 52' 254);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.RaftingContainerGradientBegin] = Color.FromArgb(83' 83' 83);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.RaftingContainerGradientBegin] = Color.FromArgb(83' 83' 83);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.RaftingContainerGradientBegin] = Color.FromArgb(83' 83' 83);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.RaftingContainerGradientEnd] = Color.FromArgb(83' 83' 83);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.RaftingContainerGradientEnd] = Color.FromArgb(83' 83' 83);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.RaftingContainerGradientEnd] = Color.FromArgb(83' 83' 83);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.SeparatorDark] = Color.FromArgb(102' 102' 102);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.SeparatorDark] = Color.FromArgb(102' 102' 102);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.SeparatorDark] = Color.FromArgb(102' 102' 102);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.SeparatorLight] = Color.FromArgb(182' 182' 182);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.SeparatorLight] = Color.FromArgb(182' 182' 182);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.SeparatorLight] = Color.FromArgb(182' 182' 182);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripGradientBegin] = Color.FromArgb(100' 100' 100);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripGradientBegin] = Color.FromArgb(100' 100' 100);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripGradientBegin] = Color.FromArgb(100' 100' 100);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripBorder] = Color.FromArgb(102' 102' 102);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripBorder] = Color.FromArgb(102' 102' 102);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripBorder] = Color.FromArgb(102' 102' 102);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripContentPanelGradientBegin] = Color.FromArgb(42' 42' 42);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripContentPanelGradientBegin] = Color.FromArgb(42' 42' 42);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripContentPanelGradientBegin] = Color.FromArgb(42' 42' 42);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripContentPanelGradientEnd] = Color.FromArgb(10' 10' 10);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripContentPanelGradientEnd] = Color.FromArgb(10' 10' 10);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripContentPanelGradientEnd] = Color.FromArgb(10' 10' 10);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripDropDownBackground] = Color.FromArgb(250' 250' 250);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripDropDownBackground] = Color.FromArgb(250' 250' 250);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripDropDownBackground] = Color.FromArgb(250' 250' 250);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientBegin] = Color.FromArgb(102' 102' 102);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientBegin] = Color.FromArgb(102' 102' 102);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientBegin] = Color.FromArgb(102' 102' 102);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientMiddle] = Color.FromArgb(52' 52' 52);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientMiddle] = Color.FromArgb(52' 52' 52);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientMiddle] = Color.FromArgb(52' 52' 52);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripPanelGradientBegin] = Color.FromArgb(12' 12' 12);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripPanelGradientBegin] = Color.FromArgb(12' 12' 12);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripPanelGradientBegin] = Color.FromArgb(12' 12' 12);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripPanelGradientEnd] = Color.FromArgb(2' 2' 2);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripPanelGradientEnd] = Color.FromArgb(2' 2' 2);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripPanelGradientEnd] = Color.FromArgb(2' 2' 2);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedBorder] = Color.FromArgb(145' 153' 164);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedBorder] = Color.FromArgb(145' 153' 164);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedBorder] = Color.FromArgb(145' 153' 164);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientBegin] = Color.FromArgb(141' 170' 253);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientBegin] = Color.FromArgb(141' 170' 253);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientBegin] = Color.FromArgb(141' 170' 253);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientEnd] = Color.FromArgb(98' 101' 252);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientEnd] = Color.FromArgb(98' 101' 252);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientEnd] = Color.FromArgb(98' 101' 252);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientMiddle] = Color.FromArgb(43' 93' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientMiddle] = Color.FromArgb(43' 93' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientMiddle] = Color.FromArgb(43' 93' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientBegin] = Color.FromArgb(188' 205' 254);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientBegin] = Color.FromArgb(188' 205' 254);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientBegin] = Color.FromArgb(188' 205' 254);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientEnd] = Color.FromArgb(153' 155' 253);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientEnd] = Color.FromArgb(153' 155' 253);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientEnd] = Color.FromArgb(153' 155' 253);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientMiddle] = Color.FromArgb(111' 145' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientMiddle] = Color.FromArgb(111' 145' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientMiddle] = Color.FromArgb(111' 145' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedHighlightBorder] = Color.FromArgb(145' 153' 164);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedHighlightBorder] = Color.FromArgb(145' 153' 164);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedHighlightBorder] = Color.FromArgb(145' 153' 164);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.GripDark] = Color.FromArgb(102' 102' 102);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.GripDark] = Color.FromArgb(102' 102' 102);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.GripDark] = Color.FromArgb(102' 102' 102);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.GripLight] = Color.FromArgb(182' 182' 182);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.GripLight] = Color.FromArgb(182' 182' 182);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.GripLight] = Color.FromArgb(182' 182' 182);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ImageMarginGradientBegin] = Color.FromArgb(239' 239' 239);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ImageMarginGradientBegin] = Color.FromArgb(239' 239' 239);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ImageMarginGradientBegin] = Color.FromArgb(239' 239' 239);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelectedGradientBegin] = Color.FromArgb(231' 239' 243);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelectedGradientBegin] = Color.FromArgb(231' 239' 243);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelectedGradientBegin] = Color.FromArgb(231' 239' 243);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelectedGradientEnd] = Color.FromArgb(218' 235' 243);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelectedGradientEnd] = Color.FromArgb(218' 235' 243);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelectedGradientEnd] = Color.FromArgb(218' 235' 243);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemTopLevelSelectedBorder] = Color.FromArgb(145' 153' 164);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemTopLevelSelectedBorder] = Color.FromArgb(145' 153' 164);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemTopLevelSelectedBorder] = Color.FromArgb(145' 153' 164);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemTopLevelSelectedGradientBegin] = Color.FromArgb(205' 208' 213);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemTopLevelSelectedGradientBegin] = Color.FromArgb(205' 208' 213);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemTopLevelSelectedGradientBegin] = Color.FromArgb(205' 208' 213);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuStripGradientBegin] = Color.FromArgb(128' 128' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuStripGradientBegin] = Color.FromArgb(128' 128' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuStripGradientBegin] = Color.FromArgb(128' 128' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuStripGradientEnd] = Color.FromArgb(0' 0' 128);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientBegin] = Color.FromArgb(166' 189' 254);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientBegin] = Color.FromArgb(166' 189' 254);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientBegin] = Color.FromArgb(166' 189' 254);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientEnd] = Color.FromArgb(119' 123' 253);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientEnd] = Color.FromArgb(119' 123' 253);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientEnd] = Color.FromArgb(119' 123' 253);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientMiddle] = Color.FromArgb(63' 108' 253);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientMiddle] = Color.FromArgb(63' 108' 253);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientMiddle] = Color.FromArgb(63' 108' 253);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.RaftingContainerGradientBegin] = Color.FromArgb(83' 83' 83);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.RaftingContainerGradientBegin] = Color.FromArgb(83' 83' 83);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.RaftingContainerGradientBegin] = Color.FromArgb(83' 83' 83);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.RaftingContainerGradientEnd] = Color.FromArgb(83' 83' 83);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.RaftingContainerGradientEnd] = Color.FromArgb(83' 83' 83);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.RaftingContainerGradientEnd] = Color.FromArgb(83' 83' 83);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.SeparatorDark] = Color.FromArgb(102' 102' 102);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.SeparatorDark] = Color.FromArgb(102' 102' 102);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.SeparatorDark] = Color.FromArgb(102' 102' 102);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.SeparatorLight] = Color.FromArgb(182' 182' 182);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.SeparatorLight] = Color.FromArgb(182' 182' 182);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.SeparatorLight] = Color.FromArgb(182' 182' 182);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripGradientBegin] = Color.FromArgb(128' 128' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripGradientBegin] = Color.FromArgb(128' 128' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripGradientBegin] = Color.FromArgb(128' 128' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripGradientEnd] = Color.FromArgb(0' 0' 128);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripBorder] = Color.FromArgb(102' 102' 102);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripBorder] = Color.FromArgb(102' 102' 102);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripBorder] = Color.FromArgb(102' 102' 102);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripContentPanelGradientBegin] = Color.FromArgb(0' 0' 139);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripContentPanelGradientEnd] = Color.FromArgb(0' 0' 128);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripDropDownBackground] = Color.FromArgb(250' 250' 250);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripDropDownBackground] = Color.FromArgb(250' 250' 250);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripDropDownBackground] = Color.FromArgb(250' 250' 250);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientBegin] = Color.FromArgb(128' 128' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientBegin] = Color.FromArgb(128' 128' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientBegin] = Color.FromArgb(128' 128' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientEnd] = Color.FromArgb(0' 0' 139);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientMiddle] = Color.FromArgb(0' 0' 128);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripPanelGradientBegin] = Color.FromArgb(0' 0' 128);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripPanelGradientEnd] = Color.FromArgb(0' 0' 128);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,ColorTableBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\ColorTableBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientBegin] = Color.FromArgb(248' 181' 106);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientBegin] = Color.FromArgb(248' 181' 106);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientBegin] = Color.FromArgb(248' 181' 106);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientEnd] = Color.FromArgb(255' 208' 134);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientEnd] = Color.FromArgb(255' 208' 134);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientEnd] = Color.FromArgb(255' 208' 134);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientMiddle] = Color.FromArgb(251' 140' 60);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientMiddle] = Color.FromArgb(251' 140' 60);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientMiddle] = Color.FromArgb(251' 140' 60);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientBegin] = Color.FromArgb(255' 245' 204);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientBegin] = Color.FromArgb(255' 245' 204);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientBegin] = Color.FromArgb(255' 245' 204);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientEnd] = Color.FromArgb(255' 219' 117);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientEnd] = Color.FromArgb(255' 219' 117);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientEnd] = Color.FromArgb(255' 219' 117);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientMiddle] = Color.FromArgb(255' 231' 162);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientMiddle] = Color.FromArgb(255' 231' 162);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientMiddle] = Color.FromArgb(255' 231' 162);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedHighlightBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedHighlightBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedHighlightBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.CheckBackground] = Color.FromArgb(255' 227' 149);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.CheckBackground] = Color.FromArgb(255' 227' 149);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.CheckBackground] = Color.FromArgb(255' 227' 149);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.CheckSelectedBackground] = Color.FromArgb(254' 128' 62);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.CheckSelectedBackground] = Color.FromArgb(254' 128' 62);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.CheckSelectedBackground] = Color.FromArgb(254' 128' 62);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.GripDark] = Color.FromArgb(145' 153' 164);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.GripDark] = Color.FromArgb(145' 153' 164);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.GripDark] = Color.FromArgb(145' 153' 164);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.GripLight] = Color.FromArgb(221' 224' 227);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.GripLight] = Color.FromArgb(221' 224' 227);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.GripLight] = Color.FromArgb(221' 224' 227);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ImageMarginGradientBegin] = Color.FromArgb(239' 239' 239);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ImageMarginGradientBegin] = Color.FromArgb(239' 239' 239);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ImageMarginGradientBegin] = Color.FromArgb(239' 239' 239);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuBorder] = Color.FromArgb(145' 153' 164);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuBorder] = Color.FromArgb(145' 153' 164);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuBorder] = Color.FromArgb(145' 153' 164);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemPressedGradientBegin] = Color.FromArgb(145' 153' 164);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemPressedGradientBegin] = Color.FromArgb(145' 153' 164);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemPressedGradientBegin] = Color.FromArgb(145' 153' 164);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemPressedGradientEnd] = Color.FromArgb(108' 117' 128);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemPressedGradientEnd] = Color.FromArgb(108' 117' 128);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemPressedGradientEnd] = Color.FromArgb(108' 117' 128);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemPressedGradientMiddle] = Color.FromArgb(126' 135' 146);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemPressedGradientMiddle] = Color.FromArgb(126' 135' 146);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemPressedGradientMiddle] = Color.FromArgb(126' 135' 146);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelected] = Color.FromArgb(255' 238' 194);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelected] = Color.FromArgb(255' 238' 194);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelected] = Color.FromArgb(255' 238' 194);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelectedGradientBegin] = Color.FromArgb(255' 245' 204);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelectedGradientBegin] = Color.FromArgb(255' 245' 204);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelectedGradientBegin] = Color.FromArgb(255' 245' 204);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelectedGradientEnd] = Color.FromArgb(255' 223' 132);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelectedGradientEnd] = Color.FromArgb(255' 223' 132);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelectedGradientEnd] = Color.FromArgb(255' 223' 132);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuStripGradientBegin] = Color.FromArgb(83' 83' 83);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuStripGradientBegin] = Color.FromArgb(83' 83' 83);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuStripGradientBegin] = Color.FromArgb(83' 83' 83);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuStripGradientEnd] = Color.FromArgb(83' 83' 83);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuStripGradientEnd] = Color.FromArgb(83' 83' 83);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuStripGradientEnd] = Color.FromArgb(83' 83' 83);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientBegin] = Color.FromArgb(178' 183' 191);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientBegin] = Color.FromArgb(178' 183' 191);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientBegin] = Color.FromArgb(178' 183' 191);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientEnd] = Color.FromArgb(81' 88' 98);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientEnd] = Color.FromArgb(81' 88' 98);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientEnd] = Color.FromArgb(81' 88' 98);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientMiddle] = Color.FromArgb(145' 153' 164);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientMiddle] = Color.FromArgb(145' 153' 164);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientMiddle] = Color.FromArgb(145' 153' 164);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.RaftingContainerGradientBegin] = Color.FromArgb(83' 83' 83);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.RaftingContainerGradientBegin] = Color.FromArgb(83' 83' 83);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.RaftingContainerGradientBegin] = Color.FromArgb(83' 83' 83);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.RaftingContainerGradientEnd] = Color.FromArgb(83' 83' 83);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.RaftingContainerGradientEnd] = Color.FromArgb(83' 83' 83);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.RaftingContainerGradientEnd] = Color.FromArgb(83' 83' 83);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.SeparatorDark] = Color.FromArgb(145' 153' 164);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.SeparatorDark] = Color.FromArgb(145' 153' 164);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.SeparatorDark] = Color.FromArgb(145' 153' 164);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.SeparatorLight] = Color.FromArgb(221' 224' 227);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.SeparatorLight] = Color.FromArgb(221' 224' 227);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.SeparatorLight] = Color.FromArgb(221' 224' 227);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripGradientBegin] = Color.FromArgb(76' 83' 92);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripGradientBegin] = Color.FromArgb(76' 83' 92);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripGradientBegin] = Color.FromArgb(76' 83' 92);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripGradientEnd] = Color.FromArgb(35' 38' 42);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripGradientEnd] = Color.FromArgb(35' 38' 42);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripGradientEnd] = Color.FromArgb(35' 38' 42);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripBorder] = Color.FromArgb(76' 83' 92);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripBorder] = Color.FromArgb(76' 83' 92);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripBorder] = Color.FromArgb(76' 83' 92);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripContentPanelGradientBegin] = Color.FromArgb(82' 82' 82);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripContentPanelGradientBegin] = Color.FromArgb(82' 82' 82);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripContentPanelGradientBegin] = Color.FromArgb(82' 82' 82);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripContentPanelGradientEnd] = Color.FromArgb(10' 10' 10);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripContentPanelGradientEnd] = Color.FromArgb(10' 10' 10);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripContentPanelGradientEnd] = Color.FromArgb(10' 10' 10);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripDropDownBackground] = Color.FromArgb(250' 250' 250);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripDropDownBackground] = Color.FromArgb(250' 250' 250);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripDropDownBackground] = Color.FromArgb(250' 250' 250);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientBegin] = Color.FromArgb(205' 208' 213);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientBegin] = Color.FromArgb(205' 208' 213);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientBegin] = Color.FromArgb(205' 208' 213);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientEnd] = Color.FromArgb(148' 156' 166);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientEnd] = Color.FromArgb(148' 156' 166);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientEnd] = Color.FromArgb(148' 156' 166);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientMiddle] = Color.FromArgb(188' 193' 200);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientMiddle] = Color.FromArgb(188' 193' 200);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientMiddle] = Color.FromArgb(188' 193' 200);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripPanelGradientBegin] = Color.FromArgb(83' 83' 83);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripPanelGradientBegin] = Color.FromArgb(83' 83' 83);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripPanelGradientBegin] = Color.FromArgb(83' 83' 83);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripPanelGradientEnd] = Color.FromArgb(83' 83' 83);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripPanelGradientEnd] = Color.FromArgb(83' 83' 83);
Magic Number,BSE.Windows.Forms,Office2007BlackColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlackColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripPanelGradientEnd] = Color.FromArgb(83' 83' 83);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientBegin] = Color.FromArgb(248' 181' 106);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientBegin] = Color.FromArgb(248' 181' 106);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientBegin] = Color.FromArgb(248' 181' 106);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientEnd] = Color.FromArgb(255' 208' 134);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientEnd] = Color.FromArgb(255' 208' 134);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientEnd] = Color.FromArgb(255' 208' 134);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientMiddle] = Color.FromArgb(251' 140' 60);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientMiddle] = Color.FromArgb(251' 140' 60);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientMiddle] = Color.FromArgb(251' 140' 60);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientBegin] = Color.FromArgb(255' 245' 204);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientBegin] = Color.FromArgb(255' 245' 204);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientBegin] = Color.FromArgb(255' 245' 204);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientEnd] = Color.FromArgb(255' 219' 117);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientEnd] = Color.FromArgb(255' 219' 117);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientEnd] = Color.FromArgb(255' 219' 117);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientMiddle] = Color.FromArgb(255' 231' 162);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientMiddle] = Color.FromArgb(255' 231' 162);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientMiddle] = Color.FromArgb(255' 231' 162);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedHighlightBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedHighlightBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedHighlightBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.CheckBackground] = Color.FromArgb(255' 227' 149);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.CheckBackground] = Color.FromArgb(255' 227' 149);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.CheckBackground] = Color.FromArgb(255' 227' 149);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.CheckSelectedBackground] = Color.FromArgb(254' 128' 62);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.CheckSelectedBackground] = Color.FromArgb(254' 128' 62);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.CheckSelectedBackground] = Color.FromArgb(254' 128' 62);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.GripDark] = Color.FromArgb(111' 157' 217);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.GripDark] = Color.FromArgb(111' 157' 217);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.GripDark] = Color.FromArgb(111' 157' 217);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.GripLight] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.GripLight] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.GripLight] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ImageMarginGradientBegin] = Color.FromArgb(233' 238' 238);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ImageMarginGradientBegin] = Color.FromArgb(233' 238' 238);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ImageMarginGradientBegin] = Color.FromArgb(233' 238' 238);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuBorder] = Color.FromArgb(134' 134' 134);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuBorder] = Color.FromArgb(134' 134' 134);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuBorder] = Color.FromArgb(134' 134' 134);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemPressedGradientBegin] = Color.FromArgb(227' 239' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemPressedGradientBegin] = Color.FromArgb(227' 239' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemPressedGradientBegin] = Color.FromArgb(227' 239' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemPressedGradientEnd] = Color.FromArgb(152' 186' 230);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemPressedGradientEnd] = Color.FromArgb(152' 186' 230);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemPressedGradientEnd] = Color.FromArgb(152' 186' 230);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemPressedGradientMiddle] = Color.FromArgb(222' 236' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemPressedGradientMiddle] = Color.FromArgb(222' 236' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemPressedGradientMiddle] = Color.FromArgb(222' 236' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelected] = Color.FromArgb(255' 238' 194);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelected] = Color.FromArgb(255' 238' 194);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelected] = Color.FromArgb(255' 238' 194);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelectedGradientBegin] = Color.FromArgb(255' 245' 204);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelectedGradientBegin] = Color.FromArgb(255' 245' 204);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelectedGradientBegin] = Color.FromArgb(255' 245' 204);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelectedGradientEnd] = Color.FromArgb(255' 223' 132);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelectedGradientEnd] = Color.FromArgb(255' 223' 132);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelectedGradientEnd] = Color.FromArgb(255' 223' 132);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuStripGradientBegin] = Color.FromArgb(191' 219' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuStripGradientBegin] = Color.FromArgb(191' 219' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuStripGradientBegin] = Color.FromArgb(191' 219' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuStripGradientEnd] = Color.FromArgb(191' 219' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuStripGradientEnd] = Color.FromArgb(191' 219' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuStripGradientEnd] = Color.FromArgb(191' 219' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientBegin] = Color.FromArgb(167' 204' 251);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientBegin] = Color.FromArgb(167' 204' 251);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientBegin] = Color.FromArgb(167' 204' 251);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientEnd] = Color.FromArgb(101' 147' 207);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientEnd] = Color.FromArgb(101' 147' 207);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientEnd] = Color.FromArgb(101' 147' 207);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientMiddle] = Color.FromArgb(167' 204' 251);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientMiddle] = Color.FromArgb(167' 204' 251);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientMiddle] = Color.FromArgb(167' 204' 251);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.RaftingContainerGradientBegin] = Color.FromArgb(191' 219' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.RaftingContainerGradientBegin] = Color.FromArgb(191' 219' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.RaftingContainerGradientBegin] = Color.FromArgb(191' 219' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.RaftingContainerGradientEnd] = Color.FromArgb(191' 219' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.RaftingContainerGradientEnd] = Color.FromArgb(191' 219' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.RaftingContainerGradientEnd] = Color.FromArgb(191' 219' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.SeparatorDark] = Color.FromArgb(173' 209' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.SeparatorDark] = Color.FromArgb(173' 209' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.SeparatorDark] = Color.FromArgb(173' 209' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.SeparatorLight] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.SeparatorLight] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.SeparatorLight] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripGradientBegin] = Color.FromArgb(227' 239' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripGradientBegin] = Color.FromArgb(227' 239' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripGradientBegin] = Color.FromArgb(227' 239' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripGradientEnd] = Color.FromArgb(173' 209' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripGradientEnd] = Color.FromArgb(173' 209' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripGradientEnd] = Color.FromArgb(173' 209' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripText] = Color.FromArgb(21' 66' 139);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripText] = Color.FromArgb(21' 66' 139);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripText] = Color.FromArgb(21' 66' 139);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripBorder] = Color.FromArgb(111' 157' 217);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripBorder] = Color.FromArgb(111' 157' 217);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripBorder] = Color.FromArgb(111' 157' 217);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripContentPanelGradientBegin] = Color.FromArgb(191' 219' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripContentPanelGradientBegin] = Color.FromArgb(191' 219' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripContentPanelGradientBegin] = Color.FromArgb(191' 219' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripContentPanelGradientEnd] = Color.FromArgb(101' 145' 205);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripContentPanelGradientEnd] = Color.FromArgb(101' 145' 205);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripContentPanelGradientEnd] = Color.FromArgb(101' 145' 205);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripDropDownBackground] = Color.FromArgb(250' 250' 250);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripDropDownBackground] = Color.FromArgb(250' 250' 250);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripDropDownBackground] = Color.FromArgb(250' 250' 250);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientBegin] = Color.FromArgb(227' 239' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientBegin] = Color.FromArgb(227' 239' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientBegin] = Color.FromArgb(227' 239' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientEnd] = Color.FromArgb(152' 186' 230);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientEnd] = Color.FromArgb(152' 186' 230);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientEnd] = Color.FromArgb(152' 186' 230);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientMiddle] = Color.FromArgb(222' 236' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientMiddle] = Color.FromArgb(222' 236' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientMiddle] = Color.FromArgb(222' 236' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripPanelGradientBegin] = Color.FromArgb(191' 219' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripPanelGradientBegin] = Color.FromArgb(191' 219' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripPanelGradientBegin] = Color.FromArgb(191' 219' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripPanelGradientEnd] = Color.FromArgb(191' 219' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripPanelGradientEnd] = Color.FromArgb(191' 219' 255);
Magic Number,BSE.Windows.Forms,Office2007BlueColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007BlueColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripPanelGradientEnd] = Color.FromArgb(191' 219' 255);
Magic Number,BSE.Windows.Forms,Office2007Renderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007Renderer.cs,Office2007Renderer,The following statement contains a magic number: MarginInset = 2;
Magic Number,BSE.Windows.Forms,Office2007Renderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007Renderer.cs,OnRenderImageMargin,The following statement contains a magic number: if (ColorTable.UseSystemColors == true)  			{  				base.OnRenderToolStripBackground(e);  			}  			else  			{  				if ((e.ToolStrip is ContextMenuStrip) ||  					(e.ToolStrip is ToolStripDropDownMenu))  				{  					// Start with the total margin area  					Rectangle marginRectangle = e.AffectedBounds;    					// Do we need to draw with separator on the opposite edge?  					bool bIsRightToLeft = (e.ToolStrip.RightToLeft == RightToLeft.Yes);    					marginRectangle.Y += MarginInset;  					marginRectangle.Height -= MarginInset * 2;    					// Reduce so it is inside the border  					if (bIsRightToLeft == false)  					{  						marginRectangle.X += MarginInset;  					}  					else  					{  						marginRectangle.X += MarginInset / 2;  					}    					// Draw the entire margine area in a solid color  					using (SolidBrush backBrush = new SolidBrush(  						ColorTable.ImageMarginGradientBegin))  						e.Graphics.FillRectangle(backBrush' marginRectangle);  				}  				else  				{  					base.OnRenderImageMargin(e);  				}  			}
Magic Number,BSE.Windows.Forms,Office2007Renderer,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007Renderer.cs,OnRenderImageMargin,The following statement contains a magic number: if (ColorTable.UseSystemColors == true)  			{  				base.OnRenderToolStripBackground(e);  			}  			else  			{  				if ((e.ToolStrip is ContextMenuStrip) ||  					(e.ToolStrip is ToolStripDropDownMenu))  				{  					// Start with the total margin area  					Rectangle marginRectangle = e.AffectedBounds;    					// Do we need to draw with separator on the opposite edge?  					bool bIsRightToLeft = (e.ToolStrip.RightToLeft == RightToLeft.Yes);    					marginRectangle.Y += MarginInset;  					marginRectangle.Height -= MarginInset * 2;    					// Reduce so it is inside the border  					if (bIsRightToLeft == false)  					{  						marginRectangle.X += MarginInset;  					}  					else  					{  						marginRectangle.X += MarginInset / 2;  					}    					// Draw the entire margine area in a solid color  					using (SolidBrush backBrush = new SolidBrush(  						ColorTable.ImageMarginGradientBegin))  						e.Graphics.FillRectangle(backBrush' marginRectangle);  				}  				else  				{  					base.OnRenderImageMargin(e);  				}  			}
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientBegin] = Color.FromArgb(248' 181' 106);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientBegin] = Color.FromArgb(248' 181' 106);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientBegin] = Color.FromArgb(248' 181' 106);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientEnd] = Color.FromArgb(255' 208' 134);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientEnd] = Color.FromArgb(255' 208' 134);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientEnd] = Color.FromArgb(255' 208' 134);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientMiddle] = Color.FromArgb(251' 140' 60);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientMiddle] = Color.FromArgb(251' 140' 60);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonPressedGradientMiddle] = Color.FromArgb(251' 140' 60);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientBegin] = Color.FromArgb(255' 245' 204);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientBegin] = Color.FromArgb(255' 245' 204);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientBegin] = Color.FromArgb(255' 245' 204);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientEnd] = Color.FromArgb(255' 219' 117);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientEnd] = Color.FromArgb(255' 219' 117);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientEnd] = Color.FromArgb(255' 219' 117);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientMiddle] = Color.FromArgb(255' 232' 116);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientMiddle] = Color.FromArgb(255' 232' 116);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedGradientMiddle] = Color.FromArgb(255' 232' 116);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedHighlightBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedHighlightBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ButtonSelectedHighlightBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.CheckBackground] = Color.FromArgb(255' 227' 149);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.CheckBackground] = Color.FromArgb(255' 227' 149);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.CheckBackground] = Color.FromArgb(255' 227' 149);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.CheckSelectedBackground] = Color.FromArgb(254' 128' 62);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.CheckSelectedBackground] = Color.FromArgb(254' 128' 62);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.CheckSelectedBackground] = Color.FromArgb(254' 128' 62);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.GripDark] = Color.FromArgb(84' 84' 117);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.GripDark] = Color.FromArgb(84' 84' 117);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.GripDark] = Color.FromArgb(84' 84' 117);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.GripLight] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.GripLight] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.GripLight] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ImageMarginGradientBegin] = Color.FromArgb(239' 239' 239);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ImageMarginGradientBegin] = Color.FromArgb(239' 239' 239);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ImageMarginGradientBegin] = Color.FromArgb(239' 239' 239);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuBorder] = Color.FromArgb(124' 124' 148);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuBorder] = Color.FromArgb(124' 124' 148);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuBorder] = Color.FromArgb(124' 124' 148);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemBorder] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemPressedGradientBegin] = Color.FromArgb(232' 233' 241);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemPressedGradientBegin] = Color.FromArgb(232' 233' 241);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemPressedGradientBegin] = Color.FromArgb(232' 233' 241);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemPressedGradientEnd] = Color.FromArgb(186' 185' 205);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemPressedGradientEnd] = Color.FromArgb(186' 185' 205);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemPressedGradientEnd] = Color.FromArgb(186' 185' 205);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemPressedGradientMiddle] = Color.FromArgb(209' 209' 223);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemPressedGradientMiddle] = Color.FromArgb(209' 209' 223);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemPressedGradientMiddle] = Color.FromArgb(209' 209' 223);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelected] = Color.FromArgb(255' 238' 194);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelected] = Color.FromArgb(255' 238' 194);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelected] = Color.FromArgb(255' 238' 194);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelectedGradientBegin] = Color.FromArgb(255' 245' 204);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelectedGradientBegin] = Color.FromArgb(255' 245' 204);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelectedGradientBegin] = Color.FromArgb(255' 245' 204);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelectedGradientEnd] = Color.FromArgb(255' 223' 132);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelectedGradientEnd] = Color.FromArgb(255' 223' 132);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuItemSelectedGradientEnd] = Color.FromArgb(255' 223' 132);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuStripGradientBegin] = Color.FromArgb(215' 215' 229);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuStripGradientBegin] = Color.FromArgb(215' 215' 229);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuStripGradientBegin] = Color.FromArgb(215' 215' 229);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuStripGradientEnd] = Color.FromArgb(243' 243' 247);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuStripGradientEnd] = Color.FromArgb(243' 243' 247);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.MenuStripGradientEnd] = Color.FromArgb(243' 243' 247);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientBegin] = Color.FromArgb(179' 178' 200);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientBegin] = Color.FromArgb(179' 178' 200);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientBegin] = Color.FromArgb(179' 178' 200);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientEnd] = Color.FromArgb(118' 116' 146);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientEnd] = Color.FromArgb(118' 116' 146);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientEnd] = Color.FromArgb(118' 116' 146);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientMiddle] = Color.FromArgb(152' 151' 177);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientMiddle] = Color.FromArgb(152' 151' 177);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.OverflowButtonGradientMiddle] = Color.FromArgb(152' 151' 177);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.RaftingContainerGradientBegin] = Color.FromArgb(215' 215' 229);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.RaftingContainerGradientBegin] = Color.FromArgb(215' 215' 229);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.RaftingContainerGradientBegin] = Color.FromArgb(215' 215' 229);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.RaftingContainerGradientEnd] = Color.FromArgb(243' 243' 247);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.RaftingContainerGradientEnd] = Color.FromArgb(243' 243' 247);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.RaftingContainerGradientEnd] = Color.FromArgb(243' 243' 247);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.SeparatorDark] = Color.FromArgb(110' 109' 143);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.SeparatorDark] = Color.FromArgb(110' 109' 143);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.SeparatorDark] = Color.FromArgb(110' 109' 143);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.SeparatorLight] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.SeparatorLight] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.SeparatorLight] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripGradientBegin] = Color.FromArgb(235' 238' 250);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripGradientBegin] = Color.FromArgb(235' 238' 250);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripGradientBegin] = Color.FromArgb(235' 238' 250);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripGradientEnd] = Color.FromArgb(197' 199' 209);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripGradientEnd] = Color.FromArgb(197' 199' 209);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.StatusStripGradientEnd] = Color.FromArgb(197' 199' 209);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripBorder] = Color.FromArgb(124' 124' 148);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripBorder] = Color.FromArgb(124' 124' 148);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripBorder] = Color.FromArgb(124' 124' 148);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripContentPanelGradientBegin] = Color.FromArgb(207' 211' 220);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripContentPanelGradientBegin] = Color.FromArgb(207' 211' 220);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripContentPanelGradientBegin] = Color.FromArgb(207' 211' 220);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripContentPanelGradientEnd] = Color.FromArgb(155' 159' 166);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripContentPanelGradientEnd] = Color.FromArgb(155' 159' 166);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripContentPanelGradientEnd] = Color.FromArgb(155' 159' 166);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripDropDownBackground] = Color.FromArgb(250' 250' 250);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripDropDownBackground] = Color.FromArgb(250' 250' 250);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripDropDownBackground] = Color.FromArgb(250' 250' 250);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientBegin] = Color.FromArgb(243' 244' 250);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientBegin] = Color.FromArgb(243' 244' 250);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientBegin] = Color.FromArgb(243' 244' 250);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientEnd] = Color.FromArgb(153' 151' 181);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientEnd] = Color.FromArgb(153' 151' 181);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientEnd] = Color.FromArgb(153' 151' 181);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientMiddle] = Color.FromArgb(218' 219' 231);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientMiddle] = Color.FromArgb(218' 219' 231);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripGradientMiddle] = Color.FromArgb(218' 219' 231);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripPanelGradientBegin] = Color.FromArgb(215' 215' 229);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripPanelGradientBegin] = Color.FromArgb(215' 215' 229);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripPanelGradientBegin] = Color.FromArgb(215' 215' 229);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripPanelGradientEnd] = Color.FromArgb(243' 243' 247);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripPanelGradientEnd] = Color.FromArgb(243' 243' 247);
Magic Number,BSE.Windows.Forms,Office2007SilverColorTable,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\Renderer\Office2007SilverColorTable.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.ToolStripPanelGradientEnd] = Color.FromArgb(243' 243' 247);
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,BasePanel,The following statement contains a magic number: this.CaptionHeight = 25;
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,BasePanel,The following statement contains a magic number: this.m_imageSize = new Size(16' 16);
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,BasePanel,The following statement contains a magic number: this.m_imageSize = new Size(16' 16);
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,DrawIcon,The following statement contains a magic number: Rectangle rectangleIcon = new Rectangle(               iconPositionX + (iconWidth / 2) - 1'               iconPositionY + (iconHeight / 2) - 1'               imgPanelIcon.Width'               imgPanelIcon.Height - 1);
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,DrawIcon,The following statement contains a magic number: Rectangle rectangleIcon = new Rectangle(               iconPositionX + (iconWidth / 2) - 1'               iconPositionY + (iconHeight / 2) - 1'               imgPanelIcon.Width'               imgPanelIcon.Height - 1);
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,DrawIcon,The following statement contains a magic number: using(System.Drawing.Imaging.ImageAttributes imageAttribute = new System.Drawing.Imaging.ImageAttributes())           {              imageAttribute.SetColorKey(Color.Magenta' Color.Magenta);              System.Drawing.Imaging.ColorMap colorMap = new System.Drawing.Imaging.ColorMap();              colorMap.OldColor = Color.FromArgb(0' 60' 166);              colorMap.NewColor = foreColorImage;              imageAttribute.SetRemapTable(new System.Drawing.Imaging.ColorMap[] { colorMap });                graphics.DrawImage(imgPanelIcon' rectangleIcon' 0' 0' iconWidth' iconHeight' GraphicsUnit.Pixel' imageAttribute);           }
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,DrawIcon,The following statement contains a magic number: using(System.Drawing.Imaging.ImageAttributes imageAttribute = new System.Drawing.Imaging.ImageAttributes())           {              imageAttribute.SetColorKey(Color.Magenta' Color.Magenta);              System.Drawing.Imaging.ColorMap colorMap = new System.Drawing.Imaging.ColorMap();              colorMap.OldColor = Color.FromArgb(0' 60' 166);              colorMap.NewColor = foreColorImage;              imageAttribute.SetRemapTable(new System.Drawing.Imaging.ColorMap[] { colorMap });                graphics.DrawImage(imgPanelIcon' rectangleIcon' 0' 0' iconWidth' iconHeight' GraphicsUnit.Pixel' imageAttribute);           }
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,DrawImagesAndText,The following statement contains a magic number: imageRectangle.Y = (captionRectangle.Height - imageRectangle.Height) / 2;
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,DrawImagesAndText,The following statement contains a magic number: imageRectangle.Y = (captionRectangle.Height - imageRectangle.Height) / 2;
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,DrawImagesAndText,The following statement contains a magic number: if(rightToLeft == RightToLeft.No)           {              if(image != null)              {                 DrawImage(graphics' image' imageRectangle);                 iTextPositionX1 += imageRectangle.Width + iSpacing;                 iTextPositionX2 -= iTextPositionX1;              }           }           else           {              if((bShowCloseIcon == true) && (imageClosePanel != null))              {                 rectangleImageClosePanel = imageRectangle;                 rectangleImageClosePanel.X = imageRectangle.X;                 if(bIsClosable == true)                 {                    DrawIcon(graphics' imageClosePanel' rectangleImageClosePanel' foreColorCloseIcon' imageRectangle.Y);                 }                 iTextPositionX1 = rectangleImageClosePanel.X + rectangleImageClosePanel.Width;              }              if((bShowExpandIcon == true) && (imageExandPanel != null))              {                 rectangleImageExandPanel = imageRectangle;                 rectangleImageExandPanel.X = imageRectangle.X;                 if((bShowCloseIcon == true) && (imageClosePanel != null))                 {                    rectangleImageExandPanel.X = iTextPositionX1 + (iSpacing / 2);                 }                 DrawIcon(graphics' imageExandPanel' rectangleImageExandPanel' foreColorExpandIcon' imageRectangle.Y);                 iTextPositionX1 = rectangleImageExandPanel.X + rectangleImageExandPanel.Width;              }           }
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,DrawImagesAndText,The following statement contains a magic number: if(rightToLeft == RightToLeft.No)           {              if((bShowCloseIcon == true) && (imageClosePanel != null))              {                 rectangleImageClosePanel = imageRectangle;                 rectangleImageClosePanel.X = captionRectangle.Right - iSpacing - imageRectangle.Width;                 if(bIsClosable == true)                 {                    DrawIcon(graphics' imageClosePanel' rectangleImageClosePanel' foreColorCloseIcon' imageRectangle.Y);                 }                 iTextPositionX2 = rectangleImageClosePanel.X;              }              if((bShowExpandIcon == true) && (imageExandPanel != null))              {                 rectangleImageExandPanel = imageRectangle;                 rectangleImageExandPanel.X = captionRectangle.Right - iSpacing - imageRectangle.Width;                 if((bShowCloseIcon == true) && (imageClosePanel != null))                 {                    rectangleImageExandPanel.X = iTextPositionX2 - (iSpacing / 2) - imageRectangle.Width;                 }                 DrawIcon(graphics' imageExandPanel' rectangleImageExandPanel' foreColorExpandIcon' imageRectangle.Y);                 iTextPositionX2 = rectangleImageExandPanel.X;              }              if((bShowCloseIcon == true)                      && (imageClosePanel != null)                      && (bShowExpandIcon == true)                      && (imageExandPanel != null))              {                 iTextPositionX2 -= iSpacing;              }           }           else           {              if(image != null)              {                 Rectangle imageRectangleRight = imageRectangle;                 imageRectangleRight.X = iTextPositionX2 - imageRectangle.Width;                 DrawImage(graphics' image' imageRectangleRight);                 iTextPositionX2 = imageRectangleRight.X - iSpacing;              }           }
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,DrawImagesAndText,The following statement contains a magic number: textRectangle.Y = (float) (captionRectangle.Height - fontCaption.Height) / 2 + 1;
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,RenderDoubleBackgroundGradient,The following statement contains a magic number: int iUpperHeight = bounds.Height / 2;
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,RenderButtonBackground,The following statement contains a magic number: correctionRectangle.Height = 2;
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,GetPath,The following statement contains a magic number: graphicsPath.AddArc(x' y' radius' radius' 180' 90);
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,GetPath,The following statement contains a magic number: graphicsPath.AddArc(x' y' radius' radius' 180' 90);
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,GetPath,The following statement contains a magic number: graphicsPath.AddArc(x + width - radius' y' radius' radius' 270' 90);
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,GetPath,The following statement contains a magic number: graphicsPath.AddArc(x + width - radius' y' radius' radius' 270' 90);
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,GetPath,The following statement contains a magic number: graphicsPath.AddArc(x + width - radius' y + height - radius' radius' radius' 0' 90);
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,GetPath,The following statement contains a magic number: graphicsPath.AddArc(x' y + height - radius' radius' radius' 90' 90);
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,GetPath,The following statement contains a magic number: graphicsPath.AddArc(x' y + height - radius' radius' radius' 90' 90);
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,GetUpperBackgroundPath,The following statement contains a magic number: graphicsPath.AddArc(x' y' radius' radius' 180' 90);
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,GetUpperBackgroundPath,The following statement contains a magic number: graphicsPath.AddArc(x' y' radius' radius' 180' 90);
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,GetUpperBackgroundPath,The following statement contains a magic number: graphicsPath.AddArc(x + width - radius' y' radius' radius' 270' 90);
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,GetUpperBackgroundPath,The following statement contains a magic number: graphicsPath.AddArc(x + width - radius' y' radius' radius' 270' 90);
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,GetBackgroundPath,The following statement contains a magic number: graphicsPath.AddArc(x' y' radius' radius' 180' 90);
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,GetBackgroundPath,The following statement contains a magic number: graphicsPath.AddArc(x' y' radius' radius' 180' 90);
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,GetBackgroundPath,The following statement contains a magic number: graphicsPath.AddArc(x + width - radius' y' radius' radius' 270' 90);
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,GetBackgroundPath,The following statement contains a magic number: graphicsPath.AddArc(x + width - radius' y' radius' radius' 270' 90);
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,GetBackgroundPath,The following statement contains a magic number: graphicsPath.AddArc(x + width - radius' y + height - radius' radius' radius' 0' 90);
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,GetBackgroundPath,The following statement contains a magic number: graphicsPath.AddArc(x' y + height - radius' radius' radius' 90' 90);
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,GetBackgroundPath,The following statement contains a magic number: graphicsPath.AddArc(x' y + height - radius' radius' radius' 90' 90);
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,DrawVerticalImagesAndText,The following statement contains a magic number: imageRectangle.Y = (captionRectangle.Height - imageRectangle.Height) / 2;
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,DrawVerticalImagesAndText,The following statement contains a magic number: if(imageExandPanel != null)           {              rectangleImageExandPanel = imageRectangle;              rectangleImageExandPanel.X = (panelRectangle.Width - imageRectangle.Width) / 2;              DrawIcon(graphics' imageExandPanel' rectangleImageExandPanel' foreColorExpandPanel' imageRectangle.Y);           }
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,DrawVerticalImagesAndText,The following statement contains a magic number: if(image != null)           {              imageRectangle.Y = iTextPositionY2 - imageRectangle.Height;              imageRectangle.X = (panelRectangle.Width - imageRectangle.Width) / 2;              DrawImage(graphics' image' imageRectangle);              iTextPositionY1 += imageRectangle.Height + CaptionSpacing;           }
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,DrawVerticalImagesAndText,The following statement contains a magic number: using(SolidBrush textBrush = new SolidBrush(collapsedCaptionForeColor))           {              if(dockStyle == DockStyle.Left)              {                 graphics.TranslateTransform(0' panelRectangle.Height);                 graphics.RotateTransform(-90);                   DrawString(                     graphics'                     textRectangle'               captionFont'                     collapsedCaptionForeColor'               strCaptionText'               rightToLeft'                     StringAlignment.Center);                   graphics.ResetTransform();              }              if(dockStyle == DockStyle.Right)              {                 graphics.TranslateTransform(panelRectangle.Width' 0);                 graphics.RotateTransform(90);                   DrawString(                     graphics'                     textRectangle'               captionFont'                     collapsedCaptionForeColor'               strCaptionText'               rightToLeft'                     StringAlignment.Center);                   graphics.ResetTransform();              }           }
Magic Number,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,DrawVerticalImagesAndText,The following statement contains a magic number: using(SolidBrush textBrush = new SolidBrush(collapsedCaptionForeColor))           {              if(dockStyle == DockStyle.Left)              {                 graphics.TranslateTransform(0' panelRectangle.Height);                 graphics.RotateTransform(-90);                   DrawString(                     graphics'                     textRectangle'               captionFont'                     collapsedCaptionForeColor'               strCaptionText'               rightToLeft'                     StringAlignment.Center);                   graphics.ResetTransform();              }              if(dockStyle == DockStyle.Right)              {                 graphics.TranslateTransform(panelRectangle.Width' 0);                 graphics.RotateTransform(90);                   DrawString(                     graphics'                     textRectangle'               captionFont'                     collapsedCaptionForeColor'               strCaptionText'               rightToLeft'                     StringAlignment.Center);                   graphics.ResetTransform();              }           }
Magic Number,BSE.Windows.Forms,Panel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\Panel.cs,Panel,The following statement contains a magic number: this.CaptionHeight = 27;
Magic Number,BSE.Windows.Forms,Panel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\Panel.cs,Panel,The following statement contains a magic number: this.ImageSize = new Size(18' 18);
Magic Number,BSE.Windows.Forms,Panel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\Panel.cs,Panel,The following statement contains a magic number: this.ImageSize = new Size(18' 18);
Magic Number,BSE.Windows.Forms,Panel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\Panel.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(200' 100);
Magic Number,BSE.Windows.Forms,Panel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\Panel.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(200' 100);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionCloseIcon] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionCloseIcon] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionCloseIcon] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionExpandIcon] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionExpandIcon] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionExpandIcon] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientBegin] = Color.FromArgb(122' 122' 122);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientBegin] = Color.FromArgb(122' 122' 122);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientBegin] = Color.FromArgb(122' 122' 122);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientMiddle] = Color.FromArgb(80' 80' 80);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientMiddle] = Color.FromArgb(80' 80' 80);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientMiddle] = Color.FromArgb(80' 80' 80);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelContentGradientBegin] = Color.FromArgb(240' 241' 242);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelContentGradientBegin] = Color.FromArgb(240' 241' 242);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelContentGradientBegin] = Color.FromArgb(240' 241' 242);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelContentGradientEnd] = Color.FromArgb(240' 241' 242);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelContentGradientEnd] = Color.FromArgb(240' 241' 242);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelContentGradientEnd] = Color.FromArgb(240' 241' 242);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.InnerBorderColor] = Color.FromArgb(185' 185' 185);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.InnerBorderColor] = Color.FromArgb(185' 185' 185);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.InnerBorderColor] = Color.FromArgb(185' 185' 185);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelBackColor] = Color.FromArgb(240' 241' 242);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelBackColor] = Color.FromArgb(240' 241' 242);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelBackColor] = Color.FromArgb(240' 241' 242);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionCloseIcon] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionCloseIcon] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionCloseIcon] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionExpandIcon] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionExpandIcon] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionExpandIcon] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientBegin] = Color.FromArgb(155' 155' 155);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientBegin] = Color.FromArgb(155' 155' 155);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientBegin] = Color.FromArgb(155' 155' 155);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientEnd] = Color.FromArgb(47' 47' 47);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientEnd] = Color.FromArgb(47' 47' 47);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientEnd] = Color.FromArgb(47' 47' 47);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelFlatCaptionGradientBegin] = Color.FromArgb(90' 90' 90);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelFlatCaptionGradientBegin] = Color.FromArgb(90' 90' 90);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelFlatCaptionGradientBegin] = Color.FromArgb(90' 90' 90);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelFlatCaptionGradientEnd] = Color.FromArgb(155' 155' 155);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelFlatCaptionGradientEnd] = Color.FromArgb(155' 155' 155);
Magic Number,BSE.Windows.Forms,PanelColorsBlack,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlack.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelFlatCaptionGradientEnd] = Color.FromArgb(155' 155' 155);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionCloseIcon] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionCloseIcon] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionCloseIcon] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionExpandIcon] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionExpandIcon] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionExpandIcon] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientBegin] = Color.FromArgb(128' 128' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientBegin] = Color.FromArgb(128' 128' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientBegin] = Color.FromArgb(128' 128' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientEnd] = Color.FromArgb(0' 0' 128);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientMiddle] = Color.FromArgb(0' 0' 139);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelContentGradientBegin] = Color.FromArgb(240' 241' 242);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelContentGradientBegin] = Color.FromArgb(240' 241' 242);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelContentGradientBegin] = Color.FromArgb(240' 241' 242);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelContentGradientEnd] = Color.FromArgb(240' 241' 242);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelContentGradientEnd] = Color.FromArgb(240' 241' 242);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelContentGradientEnd] = Color.FromArgb(240' 241' 242);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.InnerBorderColor] = Color.FromArgb(185' 185' 185);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.InnerBorderColor] = Color.FromArgb(185' 185' 185);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.InnerBorderColor] = Color.FromArgb(185' 185' 185);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelBackColor] = Color.FromArgb(240' 241' 242);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelBackColor] = Color.FromArgb(240' 241' 242);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelBackColor] = Color.FromArgb(240' 241' 242);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionCloseIcon] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionCloseIcon] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionCloseIcon] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionExpandIcon] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionExpandIcon] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionExpandIcon] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionText] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientBegin] = Color.FromArgb(128' 128' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientBegin] = Color.FromArgb(128' 128' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientBegin] = Color.FromArgb(128' 128' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientEnd] = Color.FromArgb(98' 98' 205);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientEnd] = Color.FromArgb(98' 98' 205);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientEnd] = Color.FromArgb(98' 98' 205);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientMiddle] = Color.FromArgb(0' 0' 139);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelFlatCaptionGradientBegin] = Color.FromArgb(111' 145' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelFlatCaptionGradientBegin] = Color.FromArgb(111' 145' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelFlatCaptionGradientBegin] = Color.FromArgb(111' 145' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelFlatCaptionGradientEnd] = Color.FromArgb(188' 205' 254);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelFlatCaptionGradientEnd] = Color.FromArgb(188' 205' 254);
Magic Number,BSE.Windows.Forms,PanelColorsBlue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBlue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelFlatCaptionGradientEnd] = Color.FromArgb(188' 205' 254);
Magic Number,BSE.Windows.Forms,PanelColorsBse,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBse.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionSelectedGradientBegin] = Color.FromArgb(156' 163' 254);
Magic Number,BSE.Windows.Forms,PanelColorsBse,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBse.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionSelectedGradientBegin] = Color.FromArgb(156' 163' 254);
Magic Number,BSE.Windows.Forms,PanelColorsBse,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBse.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionSelectedGradientBegin] = Color.FromArgb(156' 163' 254);
Magic Number,BSE.Windows.Forms,PanelColorsBse,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBse.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionSelectedGradientEnd] = Color.FromArgb(90' 98' 254);
Magic Number,BSE.Windows.Forms,PanelColorsBse,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBse.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionSelectedGradientEnd] = Color.FromArgb(90' 98' 254);
Magic Number,BSE.Windows.Forms,PanelColorsBse,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBse.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionSelectedGradientEnd] = Color.FromArgb(90' 98' 254);
Magic Number,BSE.Windows.Forms,PanelColorsBse,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBse.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCheckedCaptionBegin] = Color.FromArgb(136' 144' 254);
Magic Number,BSE.Windows.Forms,PanelColorsBse,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBse.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCheckedCaptionBegin] = Color.FromArgb(136' 144' 254);
Magic Number,BSE.Windows.Forms,PanelColorsBse,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBse.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCheckedCaptionBegin] = Color.FromArgb(136' 144' 254);
Magic Number,BSE.Windows.Forms,PanelColorsBse,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBse.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCheckedCaptionEnd] = Color.FromArgb(111' 145' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBse,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBse.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCheckedCaptionEnd] = Color.FromArgb(111' 145' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBse,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBse.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCheckedCaptionEnd] = Color.FromArgb(111' 145' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBse,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBse.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCheckedCaptionMiddle] = Color.FromArgb(42' 52' 254);
Magic Number,BSE.Windows.Forms,PanelColorsBse,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBse.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCheckedCaptionMiddle] = Color.FromArgb(42' 52' 254);
Magic Number,BSE.Windows.Forms,PanelColorsBse,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBse.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCheckedCaptionMiddle] = Color.FromArgb(42' 52' 254);
Magic Number,BSE.Windows.Forms,PanelColorsBse,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBse.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelPressedCaptionBegin] = Color.FromArgb(106' 109' 228);
Magic Number,BSE.Windows.Forms,PanelColorsBse,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBse.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelPressedCaptionBegin] = Color.FromArgb(106' 109' 228);
Magic Number,BSE.Windows.Forms,PanelColorsBse,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBse.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelPressedCaptionBegin] = Color.FromArgb(106' 109' 228);
Magic Number,BSE.Windows.Forms,PanelColorsBse,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBse.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelPressedCaptionEnd] = Color.FromArgb(88' 111' 226);
Magic Number,BSE.Windows.Forms,PanelColorsBse,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBse.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelPressedCaptionEnd] = Color.FromArgb(88' 111' 226);
Magic Number,BSE.Windows.Forms,PanelColorsBse,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBse.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelPressedCaptionEnd] = Color.FromArgb(88' 111' 226);
Magic Number,BSE.Windows.Forms,PanelColorsBse,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBse.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelPressedCaptionMiddle] = Color.FromArgb(39' 39' 217);
Magic Number,BSE.Windows.Forms,PanelColorsBse,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBse.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelPressedCaptionMiddle] = Color.FromArgb(39' 39' 217);
Magic Number,BSE.Windows.Forms,PanelColorsBse,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBse.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelPressedCaptionMiddle] = Color.FromArgb(39' 39' 217);
Magic Number,BSE.Windows.Forms,PanelColorsBse,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBse.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelSelectedCaptionBegin] = Color.FromArgb(156' 163' 254);
Magic Number,BSE.Windows.Forms,PanelColorsBse,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBse.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelSelectedCaptionBegin] = Color.FromArgb(156' 163' 254);
Magic Number,BSE.Windows.Forms,PanelColorsBse,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBse.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelSelectedCaptionBegin] = Color.FromArgb(156' 163' 254);
Magic Number,BSE.Windows.Forms,PanelColorsBse,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBse.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelSelectedCaptionEnd] = Color.FromArgb(139' 164' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBse,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBse.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelSelectedCaptionEnd] = Color.FromArgb(139' 164' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBse,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBse.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelSelectedCaptionEnd] = Color.FromArgb(139' 164' 255);
Magic Number,BSE.Windows.Forms,PanelColorsBse,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBse.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelSelectedCaptionMiddle] = Color.FromArgb(90' 98' 254);
Magic Number,BSE.Windows.Forms,PanelColorsBse,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBse.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelSelectedCaptionMiddle] = Color.FromArgb(90' 98' 254);
Magic Number,BSE.Windows.Forms,PanelColorsBse,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsBse.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelSelectedCaptionMiddle] = Color.FromArgb(90' 98' 254);
Magic Number,BSE.Windows.Forms,PanelColorsOffice,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionSelectedGradientBegin] = Color.FromArgb(255' 255' 220);
Magic Number,BSE.Windows.Forms,PanelColorsOffice,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionSelectedGradientBegin] = Color.FromArgb(255' 255' 220);
Magic Number,BSE.Windows.Forms,PanelColorsOffice,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionSelectedGradientBegin] = Color.FromArgb(255' 255' 220);
Magic Number,BSE.Windows.Forms,PanelColorsOffice,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionSelectedGradientEnd] = Color.FromArgb(247' 193' 94);
Magic Number,BSE.Windows.Forms,PanelColorsOffice,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionSelectedGradientEnd] = Color.FromArgb(247' 193' 94);
Magic Number,BSE.Windows.Forms,PanelColorsOffice,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionSelectedGradientEnd] = Color.FromArgb(247' 193' 94);
Magic Number,BSE.Windows.Forms,PanelColorsOffice,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCheckedCaptionBegin] = Color.FromArgb(255' 217' 170);
Magic Number,BSE.Windows.Forms,PanelColorsOffice,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCheckedCaptionBegin] = Color.FromArgb(255' 217' 170);
Magic Number,BSE.Windows.Forms,PanelColorsOffice,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCheckedCaptionBegin] = Color.FromArgb(255' 217' 170);
Magic Number,BSE.Windows.Forms,PanelColorsOffice,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCheckedCaptionEnd] = Color.FromArgb(254' 225' 122);
Magic Number,BSE.Windows.Forms,PanelColorsOffice,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCheckedCaptionEnd] = Color.FromArgb(254' 225' 122);
Magic Number,BSE.Windows.Forms,PanelColorsOffice,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCheckedCaptionEnd] = Color.FromArgb(254' 225' 122);
Magic Number,BSE.Windows.Forms,PanelColorsOffice,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCheckedCaptionMiddle] = Color.FromArgb(255' 171' 63);
Magic Number,BSE.Windows.Forms,PanelColorsOffice,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCheckedCaptionMiddle] = Color.FromArgb(255' 171' 63);
Magic Number,BSE.Windows.Forms,PanelColorsOffice,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCheckedCaptionMiddle] = Color.FromArgb(255' 171' 63);
Magic Number,BSE.Windows.Forms,PanelColorsOffice,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelPressedCaptionBegin] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,PanelColorsOffice,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelPressedCaptionBegin] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,PanelColorsOffice,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelPressedCaptionBegin] = Color.FromArgb(255' 189' 105);
Magic Number,BSE.Windows.Forms,PanelColorsOffice,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelPressedCaptionEnd] = Color.FromArgb(254' 211' 100);
Magic Number,BSE.Windows.Forms,PanelColorsOffice,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelPressedCaptionEnd] = Color.FromArgb(254' 211' 100);
Magic Number,BSE.Windows.Forms,PanelColorsOffice,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelPressedCaptionEnd] = Color.FromArgb(254' 211' 100);
Magic Number,BSE.Windows.Forms,PanelColorsOffice,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelPressedCaptionMiddle] = Color.FromArgb(251' 140' 60);
Magic Number,BSE.Windows.Forms,PanelColorsOffice,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelPressedCaptionMiddle] = Color.FromArgb(251' 140' 60);
Magic Number,BSE.Windows.Forms,PanelColorsOffice,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelPressedCaptionMiddle] = Color.FromArgb(251' 140' 60);
Magic Number,BSE.Windows.Forms,PanelColorsOffice,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelSelectedCaptionBegin] = Color.FromArgb(255' 252' 222);
Magic Number,BSE.Windows.Forms,PanelColorsOffice,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelSelectedCaptionBegin] = Color.FromArgb(255' 252' 222);
Magic Number,BSE.Windows.Forms,PanelColorsOffice,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelSelectedCaptionBegin] = Color.FromArgb(255' 252' 222);
Magic Number,BSE.Windows.Forms,PanelColorsOffice,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelSelectedCaptionEnd] = Color.FromArgb(255' 230' 158);
Magic Number,BSE.Windows.Forms,PanelColorsOffice,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelSelectedCaptionEnd] = Color.FromArgb(255' 230' 158);
Magic Number,BSE.Windows.Forms,PanelColorsOffice,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelSelectedCaptionEnd] = Color.FromArgb(255' 230' 158);
Magic Number,BSE.Windows.Forms,PanelColorsOffice,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelSelectedCaptionMiddle] = Color.FromArgb(255' 215' 103);
Magic Number,BSE.Windows.Forms,PanelColorsOffice,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelSelectedCaptionMiddle] = Color.FromArgb(255' 215' 103);
Magic Number,BSE.Windows.Forms,PanelColorsOffice,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelSelectedCaptionMiddle] = Color.FromArgb(255' 215' 103);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.BorderColor] = Color.FromArgb(76' 83' 92);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.BorderColor] = Color.FromArgb(76' 83' 92);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.BorderColor] = Color.FromArgb(76' 83' 92);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionExpandIcon] = Color.FromArgb(101' 104' 112);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionExpandIcon] = Color.FromArgb(101' 104' 112);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionExpandIcon] = Color.FromArgb(101' 104' 112);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientBegin] = Color.FromArgb(240' 241' 242);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientBegin] = Color.FromArgb(240' 241' 242);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientBegin] = Color.FromArgb(240' 241' 242);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientEnd] = Color.FromArgb(189' 193' 200);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientEnd] = Color.FromArgb(189' 193' 200);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientEnd] = Color.FromArgb(189' 193' 200);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientMiddle] = Color.FromArgb(216' 219' 223);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientMiddle] = Color.FromArgb(216' 219' 223);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientMiddle] = Color.FromArgb(216' 219' 223);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelContentGradientBegin] = Color.FromArgb(240' 241' 242);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelContentGradientBegin] = Color.FromArgb(240' 241' 242);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelContentGradientBegin] = Color.FromArgb(240' 241' 242);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelContentGradientEnd] = Color.FromArgb(240' 241' 242);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelContentGradientEnd] = Color.FromArgb(240' 241' 242);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelContentGradientEnd] = Color.FromArgb(240' 241' 242);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionCloseIcon] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionCloseIcon] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionCloseIcon] = Color.FromArgb(255' 255' 255);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionExpandIcon] = Color.FromArgb(101' 104' 112);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionExpandIcon] = Color.FromArgb(101' 104' 112);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionExpandIcon] = Color.FromArgb(101' 104' 112);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionText] = Color.FromArgb(55' 60' 67);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionText] = Color.FromArgb(55' 60' 67);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionText] = Color.FromArgb(55' 60' 67);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientBegin] = Color.FromArgb(248' 248' 249);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientBegin] = Color.FromArgb(248' 248' 249);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientBegin] = Color.FromArgb(248' 248' 249);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientEnd] = Color.FromArgb(219' 222' 226);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientEnd] = Color.FromArgb(219' 222' 226);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientEnd] = Color.FromArgb(219' 222' 226);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientMiddle] = Color.FromArgb(200' 204' 209);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientMiddle] = Color.FromArgb(200' 204' 209);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientMiddle] = Color.FromArgb(200' 204' 209);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelFlatCaptionGradientBegin] = Color.FromArgb(212' 215' 219);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelFlatCaptionGradientBegin] = Color.FromArgb(212' 215' 219);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelFlatCaptionGradientBegin] = Color.FromArgb(212' 215' 219);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelFlatCaptionGradientEnd] = Color.FromArgb(253' 253' 254);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelFlatCaptionGradientEnd] = Color.FromArgb(253' 253' 254);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Black,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Black.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelFlatCaptionGradientEnd] = Color.FromArgb(253' 253' 254);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.BorderColor] = Color.FromArgb(101' 147' 207);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.BorderColor] = Color.FromArgb(101' 147' 207);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.BorderColor] = Color.FromArgb(101' 147' 207);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionExpandIcon] = Color.FromArgb(21' 66' 139);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionExpandIcon] = Color.FromArgb(21' 66' 139);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionExpandIcon] = Color.FromArgb(21' 66' 139);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientBegin] = Color.FromArgb(227' 239' 255);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientBegin] = Color.FromArgb(227' 239' 255);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientBegin] = Color.FromArgb(227' 239' 255);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientEnd] = Color.FromArgb(173' 209' 255);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientEnd] = Color.FromArgb(173' 209' 255);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientEnd] = Color.FromArgb(173' 209' 255);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientMiddle] = Color.FromArgb(199' 224' 255);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientMiddle] = Color.FromArgb(199' 224' 255);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientMiddle] = Color.FromArgb(199' 224' 255);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelContentGradientBegin] = Color.FromArgb(227' 239' 255);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelContentGradientBegin] = Color.FromArgb(227' 239' 255);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelContentGradientBegin] = Color.FromArgb(227' 239' 255);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelContentGradientEnd] = Color.FromArgb(227' 239' 255);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelContentGradientEnd] = Color.FromArgb(227' 239' 255);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelContentGradientEnd] = Color.FromArgb(227' 239' 255);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionText] = Color.FromArgb(22' 65' 139);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionText] = Color.FromArgb(22' 65' 139);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionText] = Color.FromArgb(22' 65' 139);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCollapsedCaptionText] = Color.FromArgb(21' 66' 139);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCollapsedCaptionText] = Color.FromArgb(21' 66' 139);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCollapsedCaptionText] = Color.FromArgb(21' 66' 139);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionExpandIcon] = Color.FromArgb(21' 66' 139);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionExpandIcon] = Color.FromArgb(21' 66' 139);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionExpandIcon] = Color.FromArgb(21' 66' 139);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionText] = Color.FromArgb(21' 66' 139);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionText] = Color.FromArgb(21' 66' 139);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionText] = Color.FromArgb(21' 66' 139);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientBegin] = Color.FromArgb(227' 239' 255);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientBegin] = Color.FromArgb(227' 239' 255);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientBegin] = Color.FromArgb(227' 239' 255);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientEnd] = Color.FromArgb(199' 224' 255);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientEnd] = Color.FromArgb(199' 224' 255);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientEnd] = Color.FromArgb(199' 224' 255);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientMiddle] = Color.FromArgb(173' 209' 255);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientMiddle] = Color.FromArgb(173' 209' 255);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientMiddle] = Color.FromArgb(173' 209' 255);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelFlatCaptionGradientBegin] = Color.FromArgb(214' 232' 255);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelFlatCaptionGradientBegin] = Color.FromArgb(214' 232' 255);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelFlatCaptionGradientBegin] = Color.FromArgb(214' 232' 255);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelFlatCaptionGradientEnd] = Color.FromArgb(253' 253' 254);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelFlatCaptionGradientEnd] = Color.FromArgb(253' 253' 254);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Blue,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Blue.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelFlatCaptionGradientEnd] = Color.FromArgb(253' 253' 254);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.BorderColor] = Color.FromArgb(111' 112' 116);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.BorderColor] = Color.FromArgb(111' 112' 116);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.BorderColor] = Color.FromArgb(111' 112' 116);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionCloseIcon] = Color.FromArgb(75' 79' 85);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionCloseIcon] = Color.FromArgb(75' 79' 85);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionCloseIcon] = Color.FromArgb(75' 79' 85);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionExpandIcon] = Color.FromArgb(101' 104' 112);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionExpandIcon] = Color.FromArgb(101' 104' 112);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionExpandIcon] = Color.FromArgb(101' 104' 112);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientBegin] = Color.FromArgb(248' 248' 248);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientBegin] = Color.FromArgb(248' 248' 248);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientBegin] = Color.FromArgb(248' 248' 248);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientEnd] = Color.FromArgb(199' 203' 209);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientEnd] = Color.FromArgb(199' 203' 209);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientEnd] = Color.FromArgb(199' 203' 209);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientMiddle] = Color.FromArgb(218' 219' 231);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientMiddle] = Color.FromArgb(218' 219' 231);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionGradientMiddle] = Color.FromArgb(218' 219' 231);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelContentGradientBegin] = Color.FromArgb(240' 241' 242);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelContentGradientBegin] = Color.FromArgb(240' 241' 242);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelContentGradientBegin] = Color.FromArgb(240' 241' 242);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelContentGradientEnd] = Color.FromArgb(240' 241' 242);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelContentGradientEnd] = Color.FromArgb(240' 241' 242);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelContentGradientEnd] = Color.FromArgb(240' 241' 242);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionText] = Color.FromArgb(21' 66' 139);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionText] = Color.FromArgb(21' 66' 139);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCaptionText] = Color.FromArgb(21' 66' 139);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCollapsedCaptionText] = Color.FromArgb(21' 66' 139);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCollapsedCaptionText] = Color.FromArgb(21' 66' 139);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.PanelCollapsedCaptionText] = Color.FromArgb(21' 66' 139);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionCloseIcon] = Color.FromArgb(75' 79' 85);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionCloseIcon] = Color.FromArgb(75' 79' 85);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionCloseIcon] = Color.FromArgb(75' 79' 85);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionExpandIcon] = Color.FromArgb(101' 104' 112);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionExpandIcon] = Color.FromArgb(101' 104' 112);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionExpandIcon] = Color.FromArgb(101' 104' 112);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionText] = Color.FromArgb(76' 83' 92);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionText] = Color.FromArgb(76' 83' 92);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionText] = Color.FromArgb(76' 83' 92);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientBegin] = Color.FromArgb(235' 238' 250);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientBegin] = Color.FromArgb(235' 238' 250);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientBegin] = Color.FromArgb(235' 238' 250);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientEnd] = Color.FromArgb(212' 216' 226);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientEnd] = Color.FromArgb(212' 216' 226);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientEnd] = Color.FromArgb(212' 216' 226);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientMiddle] = Color.FromArgb(197' 199' 209);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientMiddle] = Color.FromArgb(197' 199' 209);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelCaptionGradientMiddle] = Color.FromArgb(197' 199' 209);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelFlatCaptionGradientBegin] = Color.FromArgb(213' 219' 231);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelFlatCaptionGradientBegin] = Color.FromArgb(213' 219' 231);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelFlatCaptionGradientBegin] = Color.FromArgb(213' 219' 231);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelFlatCaptionGradientEnd] = Color.FromArgb(253' 253' 254);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelFlatCaptionGradientEnd] = Color.FromArgb(253' 253' 254);
Magic Number,BSE.Windows.Forms,PanelColorsOffice2007Silver,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\PanelColorsOffice2007Silver.cs,InitColors,The following statement contains a magic number: rgbTable[KnownColors.XPanderPanelFlatCaptionGradientEnd] = Color.FromArgb(253' 253' 254);
Magic Number,BSE.Windows.Forms,XPanderPanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\XPanderPanel.cs,InitializeComponent,The following statement contains a magic number: this.BackColor = System.Drawing.Color.FromArgb(214' 223' 247);
Magic Number,BSE.Windows.Forms,XPanderPanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\XPanderPanel.cs,InitializeComponent,The following statement contains a magic number: this.BackColor = System.Drawing.Color.FromArgb(214' 223' 247);
Magic Number,BSE.Windows.Forms,XPanderPanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\XPanderPanel.cs,InitializeComponent,The following statement contains a magic number: this.BackColor = System.Drawing.Color.FromArgb(214' 223' 247);
Magic Number,BSE.Windows.Forms,XPanderPanelDesigner,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\XPanderPanel.cs,OnPaintAdornments,The following statement contains a magic number: e.Graphics.DrawRectangle(              this.m_borderPen'              0'              0'              this.Control.Width - 2'              this.Control.Height - 2);
Magic Number,BSE.Windows.Forms,XPanderPanelDesigner,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\XPanderPanel.cs,OnPaintAdornments,The following statement contains a magic number: e.Graphics.DrawRectangle(              this.m_borderPen'              0'              0'              this.Control.Width - 2'              this.Control.Height - 2);
Magic Number,BSE.Windows.Forms,XPanderPanelList,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\XPanderPanelList.cs,XPanderPanelList,The following statement contains a magic number: this.CaptionHeight = 25;
Magic Number,BSE.Windows.Forms,XPanderPanelList,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\XPanderPanelList.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(200' 100);
Magic Number,BSE.Windows.Forms,XPanderPanelList,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\XPanderPanelList.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(200' 100);
Magic Number,BSE.Windows.Forms,XPanderPanelListDesigner,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\XPanderPanelList.cs,OnPaintAdornments,The following statement contains a magic number: e.Graphics.DrawRectangle(this.m_borderPen' 0' 0' this.m_xpanderPanelList.Width - 2' this.m_xpanderPanelList.Height - 2);
Magic Number,BSE.Windows.Forms,XPanderPanelListDesigner,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\XPanderPanelList.cs,OnPaintAdornments,The following statement contains a magic number: e.Graphics.DrawRectangle(this.m_borderPen' 0' 0' this.m_xpanderPanelList.Width - 2' this.m_xpanderPanelList.Height - 2);
Magic Number,Demo.WindowsForms.CustomMarkers,GMapMarkerCircle,C:\repos\radioman_greatmaps\Demo.WindowsForms\CustomMarkers\GMapMarkerCircle.cs,GMapMarkerCircle,The following statement contains a magic number: Radius = 888;
Magic Number,Demo.WindowsForms.CustomMarkers,GMapMarkerCircle,C:\repos\radioman_greatmaps\Demo.WindowsForms\CustomMarkers\GMapMarkerCircle.cs,OnRender,The following statement contains a magic number: int R = (int)((Radius) / Overlay.Control.MapProvider.Projection.GetGroundResolution((int)Overlay.Control.Zoom' Position.Lat)) * 2;
Magic Number,Demo.WindowsForms.CustomMarkers,GMapMarkerCircle,C:\repos\radioman_greatmaps\Demo.WindowsForms\CustomMarkers\GMapMarkerCircle.cs,OnRender,The following statement contains a magic number: if(IsFilled)           {              g.FillEllipse(Fill' new System.Drawing.Rectangle(LocalPosition.X - R / 2' LocalPosition.Y - R / 2' R' R));           }
Magic Number,Demo.WindowsForms.CustomMarkers,GMapMarkerCircle,C:\repos\radioman_greatmaps\Demo.WindowsForms\CustomMarkers\GMapMarkerCircle.cs,OnRender,The following statement contains a magic number: if(IsFilled)           {              g.FillEllipse(Fill' new System.Drawing.Rectangle(LocalPosition.X - R / 2' LocalPosition.Y - R / 2' R' R));           }
Magic Number,Demo.WindowsForms.CustomMarkers,GMapMarkerCircle,C:\repos\radioman_greatmaps\Demo.WindowsForms\CustomMarkers\GMapMarkerCircle.cs,OnRender,The following statement contains a magic number: g.DrawEllipse(Stroke' new System.Drawing.Rectangle(LocalPosition.X - R / 2' LocalPosition.Y - R / 2' R' R));
Magic Number,Demo.WindowsForms.CustomMarkers,GMapMarkerCircle,C:\repos\radioman_greatmaps\Demo.WindowsForms\CustomMarkers\GMapMarkerCircle.cs,OnRender,The following statement contains a magic number: g.DrawEllipse(Stroke' new System.Drawing.Rectangle(LocalPosition.X - R / 2' LocalPosition.Y - R / 2' R' R));
Magic Number,Demo.WindowsForms.CustomMarkers,GMapMarkerRect,C:\repos\radioman_greatmaps\Demo.WindowsForms\CustomMarkers\GMapMarkerRect.cs,GMapMarkerRect,The following statement contains a magic number: Pen = new Pen(Brushes.Blue' 5);
Magic Number,Demo.WindowsForms.CustomMarkers,GMapMarkerRect,C:\repos\radioman_greatmaps\Demo.WindowsForms\CustomMarkers\GMapMarkerRect.cs,GMapMarkerRect,The following statement contains a magic number: Size = new System.Drawing.Size(111' 111);
Magic Number,Demo.WindowsForms.CustomMarkers,GMapMarkerRect,C:\repos\radioman_greatmaps\Demo.WindowsForms\CustomMarkers\GMapMarkerRect.cs,GMapMarkerRect,The following statement contains a magic number: Size = new System.Drawing.Size(111' 111);
Magic Number,Demo.WindowsForms.CustomMarkers,GMapMarkerRect,C:\repos\radioman_greatmaps\Demo.WindowsForms\CustomMarkers\GMapMarkerRect.cs,GMapMarkerRect,The following statement contains a magic number: Offset = new System.Drawing.Point(-Size.Width / 2' -Size.Height / 2);
Magic Number,Demo.WindowsForms.CustomMarkers,GMapMarkerRect,C:\repos\radioman_greatmaps\Demo.WindowsForms\CustomMarkers\GMapMarkerRect.cs,GMapMarkerRect,The following statement contains a magic number: Offset = new System.Drawing.Point(-Size.Width / 2' -Size.Height / 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,MainForm,The following statement contains a magic number: if (!GMapControl.IsDesignerHosted)           {              // add your custom map db provider              //GMap.NET.CacheProviders.MySQLPureImageCache ch = new GMap.NET.CacheProviders.MySQLPureImageCache();              //ch.ConnectionString = @"server=sql2008;User Id=trolis;Persist Security Info=True;database=gmapnetcache;password=trolis;";              //MainMap.Manager.SecondaryCache = ch;                // set your proxy here if need              //GMapProvider.IsSocksProxy = true;              //GMapProvider.WebProxy = new WebProxy("127.0.0.1"' 1080);              //GMapProvider.WebProxy.Credentials = new NetworkCredential("ogrenci@bilgeadam.com"' "bilgeada");              // or              //GMapProvider.WebProxy = WebRequest.DefaultWebProxy;              //                                          // set cache mode only if no internet avaible              if(!Stuff.PingNetwork("pingtest.com"))              {                 MainMap.Manager.Mode = AccessMode.CacheOnly;                 MessageBox.Show("No internet connection available' going to CacheOnly mode."' "GMap.NET - Demo.WindowsForms"' MessageBoxButtons.OK' MessageBoxIcon.Warning);              }                // config map                       MainMap.MapProvider = GMapProviders.OpenStreetMap;              MainMap.Position = new PointLatLng(54.6961334816182' 25.2985095977783);              MainMap.MinZoom = 0;              MainMap.MaxZoom = 24;              MainMap.Zoom = 9;                            //MainMap.ScaleMode = ScaleModes.Fractional;                // map events              {                 MainMap.OnPositionChanged += new PositionChanged(MainMap_OnPositionChanged);                   MainMap.OnTileLoadStart += new TileLoadStart(MainMap_OnTileLoadStart);                 MainMap.OnTileLoadComplete += new TileLoadComplete(MainMap_OnTileLoadComplete);                   MainMap.OnMapZoomChanged += new MapZoomChanged(MainMap_OnMapZoomChanged);                 MainMap.OnMapTypeChanged += new MapTypeChanged(MainMap_OnMapTypeChanged);                   MainMap.OnMarkerClick += new MarkerClick(MainMap_OnMarkerClick);                 MainMap.OnMarkerEnter += new MarkerEnter(MainMap_OnMarkerEnter);                 MainMap.OnMarkerLeave += new MarkerLeave(MainMap_OnMarkerLeave);                   MainMap.OnPolygonEnter += new PolygonEnter(MainMap_OnPolygonEnter);                 MainMap.OnPolygonLeave += new PolygonLeave(MainMap_OnPolygonLeave);                   MainMap.OnRouteEnter += new RouteEnter(MainMap_OnRouteEnter);                 MainMap.OnRouteLeave += new RouteLeave(MainMap_OnRouteLeave);                   MainMap.Manager.OnTileCacheComplete += new TileCacheComplete(OnTileCacheComplete);                 MainMap.Manager.OnTileCacheStart += new TileCacheStart(OnTileCacheStart);                 MainMap.Manager.OnTileCacheProgress += new TileCacheProgress(OnTileCacheProgress);              }                MainMap.MouseMove += new MouseEventHandler(MainMap_MouseMove);              MainMap.MouseDown += new MouseEventHandler(MainMap_MouseDown);              MainMap.MouseUp += new MouseEventHandler(MainMap_MouseUp);              MainMap.MouseDoubleClick += new MouseEventHandler(MainMap_MouseDoubleClick);                // get map types  #if !MONO   // mono doesn't handle it' so we 'lost' provider list ;]              comboBoxMapType.ValueMember = "Name";              comboBoxMapType.DataSource = GMapProviders.List;              comboBoxMapType.SelectedItem = MainMap.MapProvider;  #endif              // acccess mode              comboBoxMode.DataSource = Enum.GetValues(typeof(AccessMode));              comboBoxMode.SelectedItem = MainMap.Manager.Mode;                // get position              textBoxLat.Text = MainMap.Position.Lat.ToString(CultureInfo.InvariantCulture);              textBoxLng.Text = MainMap.Position.Lng.ToString(CultureInfo.InvariantCulture);                // get cache modes              checkBoxUseRouteCache.Checked = MainMap.Manager.UseRouteCache;                MobileLogFrom.Value = DateTime.Today;              MobileLogTo.Value = DateTime.Now;                // get zoom                trackBar1.Minimum = MainMap.MinZoom * 100;              trackBar1.Maximum = MainMap.MaxZoom * 100;              trackBar1.TickFrequency = 100;    #if DEBUG              checkBoxDebug.Checked = true;  #endif                ToolStripManager.Renderer = new BSE.Windows.Forms.Office2007Renderer();                #region -- demo workers --              // flight demo              {                 flightWorker.DoWork += new DoWorkEventHandler(flight_DoWork);                 flightWorker.ProgressChanged += new ProgressChangedEventHandler(flight_ProgressChanged);                 flightWorker.WorkerSupportsCancellation = true;                 flightWorker.WorkerReportsProgress = true;              }                // vehicle demo              {                 transportWorker.DoWork += new DoWorkEventHandler(transport_DoWork);                 transportWorker.ProgressChanged += new ProgressChangedEventHandler(transport_ProgressChanged);                 transportWorker.WorkerSupportsCancellation = true;                 transportWorker.WorkerReportsProgress = true;              }                // Connections              {                 connectionsWorker.DoWork += new DoWorkEventHandler(connectionsWorker_DoWork);                 connectionsWorker.ProgressChanged += new ProgressChangedEventHandler(connectionsWorker_ProgressChanged);                 connectionsWorker.WorkerSupportsCancellation = true;                 connectionsWorker.WorkerReportsProgress = true;                   ipInfoSearchWorker.DoWork += new DoWorkEventHandler(ipInfoSearchWorker_DoWork);                 ipInfoSearchWorker.WorkerSupportsCancellation = true;                   iptracerWorker.DoWork += new DoWorkEventHandler(iptracerWorker_DoWork);                 iptracerWorker.WorkerSupportsCancellation = true;                   GridConnections.AutoGenerateColumns = false;                   IpCache.CacheLocation = MainMap.CacheLocation;              }                // perf              timerPerf.Tick += new EventHandler(timer_Tick);              #endregion                // add custom layers                {                 MainMap.Overlays.Add(routes);                 MainMap.Overlays.Add(polygons);                 MainMap.Overlays.Add(objects);                 MainMap.Overlays.Add(top);                   routes.Routes.CollectionChanged += new GMap.NET.ObjectModel.NotifyCollectionChangedEventHandler(Routes_CollectionChanged);                 objects.Markers.CollectionChanged += new GMap.NET.ObjectModel.NotifyCollectionChangedEventHandler(Markers_CollectionChanged);              }                // set current marker              currentMarker = new GMarkerGoogle(MainMap.Position' GMarkerGoogleType.arrow);                        currentMarker.IsHitTestVisible = false;               top.Markers.Add(currentMarker);                //MainMap.VirtualSizeEnabled = true;              //if(false)              {                 // add my city location for demo                 GeoCoderStatusCode status = GeoCoderStatusCode.Unknow;                 {                    PointLatLng? pos = GMapProviders.GoogleMap.GetPoint("Lithuania' Vilnius"' out status);                    if(pos != null && status == GeoCoderStatusCode.G_GEO_SUCCESS)                    {                       currentMarker.Position = pos.Value;                         GMapMarker myCity = new GMarkerGoogle(pos.Value' GMarkerGoogleType.green_small);                       myCity.ToolTipMode = MarkerTooltipMode.Always;                       myCity.ToolTipText = "Welcome to Lithuania! ;}";                       objects.Markers.Add(myCity);                    }                 }                   // add some points in lithuania                 AddLocationLithuania("Kaunas");                 AddLocationLithuania("Klaipėda");                 AddLocationLithuania("Šiauliai");                 AddLocationLithuania("Panevėžys");                   if(objects.Markers.Count > 0)                 {                    MainMap.ZoomAndCenterMarkers(null);                 }                       RegeneratePolygon();                   try                 {                    GMapOverlay overlay = DeepClone<GMapOverlay>(objects);                    Debug.WriteLine("ISerializable status for markers: OK");                      GMapOverlay overlay2 = DeepClone<GMapOverlay>(polygons);                    Debug.WriteLine("ISerializable status for polygons: OK");                      GMapOverlay overlay3 = DeepClone<GMapOverlay>(routes);                    Debug.WriteLine("ISerializable status for routes: OK");                 }                 catch(Exception ex)                 {                    Debug.WriteLine("ISerializable failure: " + ex.Message);    #if DEBUG                    if(Debugger.IsAttached)                    {                       Debugger.Break();                    }  #endif                 }              }           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,MainForm,The following statement contains a magic number: if (!GMapControl.IsDesignerHosted)           {              // add your custom map db provider              //GMap.NET.CacheProviders.MySQLPureImageCache ch = new GMap.NET.CacheProviders.MySQLPureImageCache();              //ch.ConnectionString = @"server=sql2008;User Id=trolis;Persist Security Info=True;database=gmapnetcache;password=trolis;";              //MainMap.Manager.SecondaryCache = ch;                // set your proxy here if need              //GMapProvider.IsSocksProxy = true;              //GMapProvider.WebProxy = new WebProxy("127.0.0.1"' 1080);              //GMapProvider.WebProxy.Credentials = new NetworkCredential("ogrenci@bilgeadam.com"' "bilgeada");              // or              //GMapProvider.WebProxy = WebRequest.DefaultWebProxy;              //                                          // set cache mode only if no internet avaible              if(!Stuff.PingNetwork("pingtest.com"))              {                 MainMap.Manager.Mode = AccessMode.CacheOnly;                 MessageBox.Show("No internet connection available' going to CacheOnly mode."' "GMap.NET - Demo.WindowsForms"' MessageBoxButtons.OK' MessageBoxIcon.Warning);              }                // config map                       MainMap.MapProvider = GMapProviders.OpenStreetMap;              MainMap.Position = new PointLatLng(54.6961334816182' 25.2985095977783);              MainMap.MinZoom = 0;              MainMap.MaxZoom = 24;              MainMap.Zoom = 9;                            //MainMap.ScaleMode = ScaleModes.Fractional;                // map events              {                 MainMap.OnPositionChanged += new PositionChanged(MainMap_OnPositionChanged);                   MainMap.OnTileLoadStart += new TileLoadStart(MainMap_OnTileLoadStart);                 MainMap.OnTileLoadComplete += new TileLoadComplete(MainMap_OnTileLoadComplete);                   MainMap.OnMapZoomChanged += new MapZoomChanged(MainMap_OnMapZoomChanged);                 MainMap.OnMapTypeChanged += new MapTypeChanged(MainMap_OnMapTypeChanged);                   MainMap.OnMarkerClick += new MarkerClick(MainMap_OnMarkerClick);                 MainMap.OnMarkerEnter += new MarkerEnter(MainMap_OnMarkerEnter);                 MainMap.OnMarkerLeave += new MarkerLeave(MainMap_OnMarkerLeave);                   MainMap.OnPolygonEnter += new PolygonEnter(MainMap_OnPolygonEnter);                 MainMap.OnPolygonLeave += new PolygonLeave(MainMap_OnPolygonLeave);                   MainMap.OnRouteEnter += new RouteEnter(MainMap_OnRouteEnter);                 MainMap.OnRouteLeave += new RouteLeave(MainMap_OnRouteLeave);                   MainMap.Manager.OnTileCacheComplete += new TileCacheComplete(OnTileCacheComplete);                 MainMap.Manager.OnTileCacheStart += new TileCacheStart(OnTileCacheStart);                 MainMap.Manager.OnTileCacheProgress += new TileCacheProgress(OnTileCacheProgress);              }                MainMap.MouseMove += new MouseEventHandler(MainMap_MouseMove);              MainMap.MouseDown += new MouseEventHandler(MainMap_MouseDown);              MainMap.MouseUp += new MouseEventHandler(MainMap_MouseUp);              MainMap.MouseDoubleClick += new MouseEventHandler(MainMap_MouseDoubleClick);                // get map types  #if !MONO   // mono doesn't handle it' so we 'lost' provider list ;]              comboBoxMapType.ValueMember = "Name";              comboBoxMapType.DataSource = GMapProviders.List;              comboBoxMapType.SelectedItem = MainMap.MapProvider;  #endif              // acccess mode              comboBoxMode.DataSource = Enum.GetValues(typeof(AccessMode));              comboBoxMode.SelectedItem = MainMap.Manager.Mode;                // get position              textBoxLat.Text = MainMap.Position.Lat.ToString(CultureInfo.InvariantCulture);              textBoxLng.Text = MainMap.Position.Lng.ToString(CultureInfo.InvariantCulture);                // get cache modes              checkBoxUseRouteCache.Checked = MainMap.Manager.UseRouteCache;                MobileLogFrom.Value = DateTime.Today;              MobileLogTo.Value = DateTime.Now;                // get zoom                trackBar1.Minimum = MainMap.MinZoom * 100;              trackBar1.Maximum = MainMap.MaxZoom * 100;              trackBar1.TickFrequency = 100;    #if DEBUG              checkBoxDebug.Checked = true;  #endif                ToolStripManager.Renderer = new BSE.Windows.Forms.Office2007Renderer();                #region -- demo workers --              // flight demo              {                 flightWorker.DoWork += new DoWorkEventHandler(flight_DoWork);                 flightWorker.ProgressChanged += new ProgressChangedEventHandler(flight_ProgressChanged);                 flightWorker.WorkerSupportsCancellation = true;                 flightWorker.WorkerReportsProgress = true;              }                // vehicle demo              {                 transportWorker.DoWork += new DoWorkEventHandler(transport_DoWork);                 transportWorker.ProgressChanged += new ProgressChangedEventHandler(transport_ProgressChanged);                 transportWorker.WorkerSupportsCancellation = true;                 transportWorker.WorkerReportsProgress = true;              }                // Connections              {                 connectionsWorker.DoWork += new DoWorkEventHandler(connectionsWorker_DoWork);                 connectionsWorker.ProgressChanged += new ProgressChangedEventHandler(connectionsWorker_ProgressChanged);                 connectionsWorker.WorkerSupportsCancellation = true;                 connectionsWorker.WorkerReportsProgress = true;                   ipInfoSearchWorker.DoWork += new DoWorkEventHandler(ipInfoSearchWorker_DoWork);                 ipInfoSearchWorker.WorkerSupportsCancellation = true;                   iptracerWorker.DoWork += new DoWorkEventHandler(iptracerWorker_DoWork);                 iptracerWorker.WorkerSupportsCancellation = true;                   GridConnections.AutoGenerateColumns = false;                   IpCache.CacheLocation = MainMap.CacheLocation;              }                // perf              timerPerf.Tick += new EventHandler(timer_Tick);              #endregion                // add custom layers                {                 MainMap.Overlays.Add(routes);                 MainMap.Overlays.Add(polygons);                 MainMap.Overlays.Add(objects);                 MainMap.Overlays.Add(top);                   routes.Routes.CollectionChanged += new GMap.NET.ObjectModel.NotifyCollectionChangedEventHandler(Routes_CollectionChanged);                 objects.Markers.CollectionChanged += new GMap.NET.ObjectModel.NotifyCollectionChangedEventHandler(Markers_CollectionChanged);              }                // set current marker              currentMarker = new GMarkerGoogle(MainMap.Position' GMarkerGoogleType.arrow);                        currentMarker.IsHitTestVisible = false;               top.Markers.Add(currentMarker);                //MainMap.VirtualSizeEnabled = true;              //if(false)              {                 // add my city location for demo                 GeoCoderStatusCode status = GeoCoderStatusCode.Unknow;                 {                    PointLatLng? pos = GMapProviders.GoogleMap.GetPoint("Lithuania' Vilnius"' out status);                    if(pos != null && status == GeoCoderStatusCode.G_GEO_SUCCESS)                    {                       currentMarker.Position = pos.Value;                         GMapMarker myCity = new GMarkerGoogle(pos.Value' GMarkerGoogleType.green_small);                       myCity.ToolTipMode = MarkerTooltipMode.Always;                       myCity.ToolTipText = "Welcome to Lithuania! ;}";                       objects.Markers.Add(myCity);                    }                 }                   // add some points in lithuania                 AddLocationLithuania("Kaunas");                 AddLocationLithuania("Klaipėda");                 AddLocationLithuania("Šiauliai");                 AddLocationLithuania("Panevėžys");                   if(objects.Markers.Count > 0)                 {                    MainMap.ZoomAndCenterMarkers(null);                 }                       RegeneratePolygon();                   try                 {                    GMapOverlay overlay = DeepClone<GMapOverlay>(objects);                    Debug.WriteLine("ISerializable status for markers: OK");                      GMapOverlay overlay2 = DeepClone<GMapOverlay>(polygons);                    Debug.WriteLine("ISerializable status for polygons: OK");                      GMapOverlay overlay3 = DeepClone<GMapOverlay>(routes);                    Debug.WriteLine("ISerializable status for routes: OK");                 }                 catch(Exception ex)                 {                    Debug.WriteLine("ISerializable failure: " + ex.Message);    #if DEBUG                    if(Debugger.IsAttached)                    {                       Debugger.Break();                    }  #endif                 }              }           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,MainForm,The following statement contains a magic number: if (!GMapControl.IsDesignerHosted)           {              // add your custom map db provider              //GMap.NET.CacheProviders.MySQLPureImageCache ch = new GMap.NET.CacheProviders.MySQLPureImageCache();              //ch.ConnectionString = @"server=sql2008;User Id=trolis;Persist Security Info=True;database=gmapnetcache;password=trolis;";              //MainMap.Manager.SecondaryCache = ch;                // set your proxy here if need              //GMapProvider.IsSocksProxy = true;              //GMapProvider.WebProxy = new WebProxy("127.0.0.1"' 1080);              //GMapProvider.WebProxy.Credentials = new NetworkCredential("ogrenci@bilgeadam.com"' "bilgeada");              // or              //GMapProvider.WebProxy = WebRequest.DefaultWebProxy;              //                                          // set cache mode only if no internet avaible              if(!Stuff.PingNetwork("pingtest.com"))              {                 MainMap.Manager.Mode = AccessMode.CacheOnly;                 MessageBox.Show("No internet connection available' going to CacheOnly mode."' "GMap.NET - Demo.WindowsForms"' MessageBoxButtons.OK' MessageBoxIcon.Warning);              }                // config map                       MainMap.MapProvider = GMapProviders.OpenStreetMap;              MainMap.Position = new PointLatLng(54.6961334816182' 25.2985095977783);              MainMap.MinZoom = 0;              MainMap.MaxZoom = 24;              MainMap.Zoom = 9;                            //MainMap.ScaleMode = ScaleModes.Fractional;                // map events              {                 MainMap.OnPositionChanged += new PositionChanged(MainMap_OnPositionChanged);                   MainMap.OnTileLoadStart += new TileLoadStart(MainMap_OnTileLoadStart);                 MainMap.OnTileLoadComplete += new TileLoadComplete(MainMap_OnTileLoadComplete);                   MainMap.OnMapZoomChanged += new MapZoomChanged(MainMap_OnMapZoomChanged);                 MainMap.OnMapTypeChanged += new MapTypeChanged(MainMap_OnMapTypeChanged);                   MainMap.OnMarkerClick += new MarkerClick(MainMap_OnMarkerClick);                 MainMap.OnMarkerEnter += new MarkerEnter(MainMap_OnMarkerEnter);                 MainMap.OnMarkerLeave += new MarkerLeave(MainMap_OnMarkerLeave);                   MainMap.OnPolygonEnter += new PolygonEnter(MainMap_OnPolygonEnter);                 MainMap.OnPolygonLeave += new PolygonLeave(MainMap_OnPolygonLeave);                   MainMap.OnRouteEnter += new RouteEnter(MainMap_OnRouteEnter);                 MainMap.OnRouteLeave += new RouteLeave(MainMap_OnRouteLeave);                   MainMap.Manager.OnTileCacheComplete += new TileCacheComplete(OnTileCacheComplete);                 MainMap.Manager.OnTileCacheStart += new TileCacheStart(OnTileCacheStart);                 MainMap.Manager.OnTileCacheProgress += new TileCacheProgress(OnTileCacheProgress);              }                MainMap.MouseMove += new MouseEventHandler(MainMap_MouseMove);              MainMap.MouseDown += new MouseEventHandler(MainMap_MouseDown);              MainMap.MouseUp += new MouseEventHandler(MainMap_MouseUp);              MainMap.MouseDoubleClick += new MouseEventHandler(MainMap_MouseDoubleClick);                // get map types  #if !MONO   // mono doesn't handle it' so we 'lost' provider list ;]              comboBoxMapType.ValueMember = "Name";              comboBoxMapType.DataSource = GMapProviders.List;              comboBoxMapType.SelectedItem = MainMap.MapProvider;  #endif              // acccess mode              comboBoxMode.DataSource = Enum.GetValues(typeof(AccessMode));              comboBoxMode.SelectedItem = MainMap.Manager.Mode;                // get position              textBoxLat.Text = MainMap.Position.Lat.ToString(CultureInfo.InvariantCulture);              textBoxLng.Text = MainMap.Position.Lng.ToString(CultureInfo.InvariantCulture);                // get cache modes              checkBoxUseRouteCache.Checked = MainMap.Manager.UseRouteCache;                MobileLogFrom.Value = DateTime.Today;              MobileLogTo.Value = DateTime.Now;                // get zoom                trackBar1.Minimum = MainMap.MinZoom * 100;              trackBar1.Maximum = MainMap.MaxZoom * 100;              trackBar1.TickFrequency = 100;    #if DEBUG              checkBoxDebug.Checked = true;  #endif                ToolStripManager.Renderer = new BSE.Windows.Forms.Office2007Renderer();                #region -- demo workers --              // flight demo              {                 flightWorker.DoWork += new DoWorkEventHandler(flight_DoWork);                 flightWorker.ProgressChanged += new ProgressChangedEventHandler(flight_ProgressChanged);                 flightWorker.WorkerSupportsCancellation = true;                 flightWorker.WorkerReportsProgress = true;              }                // vehicle demo              {                 transportWorker.DoWork += new DoWorkEventHandler(transport_DoWork);                 transportWorker.ProgressChanged += new ProgressChangedEventHandler(transport_ProgressChanged);                 transportWorker.WorkerSupportsCancellation = true;                 transportWorker.WorkerReportsProgress = true;              }                // Connections              {                 connectionsWorker.DoWork += new DoWorkEventHandler(connectionsWorker_DoWork);                 connectionsWorker.ProgressChanged += new ProgressChangedEventHandler(connectionsWorker_ProgressChanged);                 connectionsWorker.WorkerSupportsCancellation = true;                 connectionsWorker.WorkerReportsProgress = true;                   ipInfoSearchWorker.DoWork += new DoWorkEventHandler(ipInfoSearchWorker_DoWork);                 ipInfoSearchWorker.WorkerSupportsCancellation = true;                   iptracerWorker.DoWork += new DoWorkEventHandler(iptracerWorker_DoWork);                 iptracerWorker.WorkerSupportsCancellation = true;                   GridConnections.AutoGenerateColumns = false;                   IpCache.CacheLocation = MainMap.CacheLocation;              }                // perf              timerPerf.Tick += new EventHandler(timer_Tick);              #endregion                // add custom layers                {                 MainMap.Overlays.Add(routes);                 MainMap.Overlays.Add(polygons);                 MainMap.Overlays.Add(objects);                 MainMap.Overlays.Add(top);                   routes.Routes.CollectionChanged += new GMap.NET.ObjectModel.NotifyCollectionChangedEventHandler(Routes_CollectionChanged);                 objects.Markers.CollectionChanged += new GMap.NET.ObjectModel.NotifyCollectionChangedEventHandler(Markers_CollectionChanged);              }                // set current marker              currentMarker = new GMarkerGoogle(MainMap.Position' GMarkerGoogleType.arrow);                        currentMarker.IsHitTestVisible = false;               top.Markers.Add(currentMarker);                //MainMap.VirtualSizeEnabled = true;              //if(false)              {                 // add my city location for demo                 GeoCoderStatusCode status = GeoCoderStatusCode.Unknow;                 {                    PointLatLng? pos = GMapProviders.GoogleMap.GetPoint("Lithuania' Vilnius"' out status);                    if(pos != null && status == GeoCoderStatusCode.G_GEO_SUCCESS)                    {                       currentMarker.Position = pos.Value;                         GMapMarker myCity = new GMarkerGoogle(pos.Value' GMarkerGoogleType.green_small);                       myCity.ToolTipMode = MarkerTooltipMode.Always;                       myCity.ToolTipText = "Welcome to Lithuania! ;}";                       objects.Markers.Add(myCity);                    }                 }                   // add some points in lithuania                 AddLocationLithuania("Kaunas");                 AddLocationLithuania("Klaipėda");                 AddLocationLithuania("Šiauliai");                 AddLocationLithuania("Panevėžys");                   if(objects.Markers.Count > 0)                 {                    MainMap.ZoomAndCenterMarkers(null);                 }                       RegeneratePolygon();                   try                 {                    GMapOverlay overlay = DeepClone<GMapOverlay>(objects);                    Debug.WriteLine("ISerializable status for markers: OK");                      GMapOverlay overlay2 = DeepClone<GMapOverlay>(polygons);                    Debug.WriteLine("ISerializable status for polygons: OK");                      GMapOverlay overlay3 = DeepClone<GMapOverlay>(routes);                    Debug.WriteLine("ISerializable status for routes: OK");                 }                 catch(Exception ex)                 {                    Debug.WriteLine("ISerializable failure: " + ex.Message);    #if DEBUG                    if(Debugger.IsAttached)                    {                       Debugger.Break();                    }  #endif                 }              }           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,MainForm,The following statement contains a magic number: if (!GMapControl.IsDesignerHosted)           {              // add your custom map db provider              //GMap.NET.CacheProviders.MySQLPureImageCache ch = new GMap.NET.CacheProviders.MySQLPureImageCache();              //ch.ConnectionString = @"server=sql2008;User Id=trolis;Persist Security Info=True;database=gmapnetcache;password=trolis;";              //MainMap.Manager.SecondaryCache = ch;                // set your proxy here if need              //GMapProvider.IsSocksProxy = true;              //GMapProvider.WebProxy = new WebProxy("127.0.0.1"' 1080);              //GMapProvider.WebProxy.Credentials = new NetworkCredential("ogrenci@bilgeadam.com"' "bilgeada");              // or              //GMapProvider.WebProxy = WebRequest.DefaultWebProxy;              //                                          // set cache mode only if no internet avaible              if(!Stuff.PingNetwork("pingtest.com"))              {                 MainMap.Manager.Mode = AccessMode.CacheOnly;                 MessageBox.Show("No internet connection available' going to CacheOnly mode."' "GMap.NET - Demo.WindowsForms"' MessageBoxButtons.OK' MessageBoxIcon.Warning);              }                // config map                       MainMap.MapProvider = GMapProviders.OpenStreetMap;              MainMap.Position = new PointLatLng(54.6961334816182' 25.2985095977783);              MainMap.MinZoom = 0;              MainMap.MaxZoom = 24;              MainMap.Zoom = 9;                            //MainMap.ScaleMode = ScaleModes.Fractional;                // map events              {                 MainMap.OnPositionChanged += new PositionChanged(MainMap_OnPositionChanged);                   MainMap.OnTileLoadStart += new TileLoadStart(MainMap_OnTileLoadStart);                 MainMap.OnTileLoadComplete += new TileLoadComplete(MainMap_OnTileLoadComplete);                   MainMap.OnMapZoomChanged += new MapZoomChanged(MainMap_OnMapZoomChanged);                 MainMap.OnMapTypeChanged += new MapTypeChanged(MainMap_OnMapTypeChanged);                   MainMap.OnMarkerClick += new MarkerClick(MainMap_OnMarkerClick);                 MainMap.OnMarkerEnter += new MarkerEnter(MainMap_OnMarkerEnter);                 MainMap.OnMarkerLeave += new MarkerLeave(MainMap_OnMarkerLeave);                   MainMap.OnPolygonEnter += new PolygonEnter(MainMap_OnPolygonEnter);                 MainMap.OnPolygonLeave += new PolygonLeave(MainMap_OnPolygonLeave);                   MainMap.OnRouteEnter += new RouteEnter(MainMap_OnRouteEnter);                 MainMap.OnRouteLeave += new RouteLeave(MainMap_OnRouteLeave);                   MainMap.Manager.OnTileCacheComplete += new TileCacheComplete(OnTileCacheComplete);                 MainMap.Manager.OnTileCacheStart += new TileCacheStart(OnTileCacheStart);                 MainMap.Manager.OnTileCacheProgress += new TileCacheProgress(OnTileCacheProgress);              }                MainMap.MouseMove += new MouseEventHandler(MainMap_MouseMove);              MainMap.MouseDown += new MouseEventHandler(MainMap_MouseDown);              MainMap.MouseUp += new MouseEventHandler(MainMap_MouseUp);              MainMap.MouseDoubleClick += new MouseEventHandler(MainMap_MouseDoubleClick);                // get map types  #if !MONO   // mono doesn't handle it' so we 'lost' provider list ;]              comboBoxMapType.ValueMember = "Name";              comboBoxMapType.DataSource = GMapProviders.List;              comboBoxMapType.SelectedItem = MainMap.MapProvider;  #endif              // acccess mode              comboBoxMode.DataSource = Enum.GetValues(typeof(AccessMode));              comboBoxMode.SelectedItem = MainMap.Manager.Mode;                // get position              textBoxLat.Text = MainMap.Position.Lat.ToString(CultureInfo.InvariantCulture);              textBoxLng.Text = MainMap.Position.Lng.ToString(CultureInfo.InvariantCulture);                // get cache modes              checkBoxUseRouteCache.Checked = MainMap.Manager.UseRouteCache;                MobileLogFrom.Value = DateTime.Today;              MobileLogTo.Value = DateTime.Now;                // get zoom                trackBar1.Minimum = MainMap.MinZoom * 100;              trackBar1.Maximum = MainMap.MaxZoom * 100;              trackBar1.TickFrequency = 100;    #if DEBUG              checkBoxDebug.Checked = true;  #endif                ToolStripManager.Renderer = new BSE.Windows.Forms.Office2007Renderer();                #region -- demo workers --              // flight demo              {                 flightWorker.DoWork += new DoWorkEventHandler(flight_DoWork);                 flightWorker.ProgressChanged += new ProgressChangedEventHandler(flight_ProgressChanged);                 flightWorker.WorkerSupportsCancellation = true;                 flightWorker.WorkerReportsProgress = true;              }                // vehicle demo              {                 transportWorker.DoWork += new DoWorkEventHandler(transport_DoWork);                 transportWorker.ProgressChanged += new ProgressChangedEventHandler(transport_ProgressChanged);                 transportWorker.WorkerSupportsCancellation = true;                 transportWorker.WorkerReportsProgress = true;              }                // Connections              {                 connectionsWorker.DoWork += new DoWorkEventHandler(connectionsWorker_DoWork);                 connectionsWorker.ProgressChanged += new ProgressChangedEventHandler(connectionsWorker_ProgressChanged);                 connectionsWorker.WorkerSupportsCancellation = true;                 connectionsWorker.WorkerReportsProgress = true;                   ipInfoSearchWorker.DoWork += new DoWorkEventHandler(ipInfoSearchWorker_DoWork);                 ipInfoSearchWorker.WorkerSupportsCancellation = true;                   iptracerWorker.DoWork += new DoWorkEventHandler(iptracerWorker_DoWork);                 iptracerWorker.WorkerSupportsCancellation = true;                   GridConnections.AutoGenerateColumns = false;                   IpCache.CacheLocation = MainMap.CacheLocation;              }                // perf              timerPerf.Tick += new EventHandler(timer_Tick);              #endregion                // add custom layers                {                 MainMap.Overlays.Add(routes);                 MainMap.Overlays.Add(polygons);                 MainMap.Overlays.Add(objects);                 MainMap.Overlays.Add(top);                   routes.Routes.CollectionChanged += new GMap.NET.ObjectModel.NotifyCollectionChangedEventHandler(Routes_CollectionChanged);                 objects.Markers.CollectionChanged += new GMap.NET.ObjectModel.NotifyCollectionChangedEventHandler(Markers_CollectionChanged);              }                // set current marker              currentMarker = new GMarkerGoogle(MainMap.Position' GMarkerGoogleType.arrow);                        currentMarker.IsHitTestVisible = false;               top.Markers.Add(currentMarker);                //MainMap.VirtualSizeEnabled = true;              //if(false)              {                 // add my city location for demo                 GeoCoderStatusCode status = GeoCoderStatusCode.Unknow;                 {                    PointLatLng? pos = GMapProviders.GoogleMap.GetPoint("Lithuania' Vilnius"' out status);                    if(pos != null && status == GeoCoderStatusCode.G_GEO_SUCCESS)                    {                       currentMarker.Position = pos.Value;                         GMapMarker myCity = new GMarkerGoogle(pos.Value' GMarkerGoogleType.green_small);                       myCity.ToolTipMode = MarkerTooltipMode.Always;                       myCity.ToolTipText = "Welcome to Lithuania! ;}";                       objects.Markers.Add(myCity);                    }                 }                   // add some points in lithuania                 AddLocationLithuania("Kaunas");                 AddLocationLithuania("Klaipėda");                 AddLocationLithuania("Šiauliai");                 AddLocationLithuania("Panevėžys");                   if(objects.Markers.Count > 0)                 {                    MainMap.ZoomAndCenterMarkers(null);                 }                       RegeneratePolygon();                   try                 {                    GMapOverlay overlay = DeepClone<GMapOverlay>(objects);                    Debug.WriteLine("ISerializable status for markers: OK");                      GMapOverlay overlay2 = DeepClone<GMapOverlay>(polygons);                    Debug.WriteLine("ISerializable status for polygons: OK");                      GMapOverlay overlay3 = DeepClone<GMapOverlay>(routes);                    Debug.WriteLine("ISerializable status for routes: OK");                 }                 catch(Exception ex)                 {                    Debug.WriteLine("ISerializable failure: " + ex.Message);    #if DEBUG                    if(Debugger.IsAttached)                    {                       Debugger.Break();                    }  #endif                 }              }           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,MainForm,The following statement contains a magic number: if (!GMapControl.IsDesignerHosted)           {              // add your custom map db provider              //GMap.NET.CacheProviders.MySQLPureImageCache ch = new GMap.NET.CacheProviders.MySQLPureImageCache();              //ch.ConnectionString = @"server=sql2008;User Id=trolis;Persist Security Info=True;database=gmapnetcache;password=trolis;";              //MainMap.Manager.SecondaryCache = ch;                // set your proxy here if need              //GMapProvider.IsSocksProxy = true;              //GMapProvider.WebProxy = new WebProxy("127.0.0.1"' 1080);              //GMapProvider.WebProxy.Credentials = new NetworkCredential("ogrenci@bilgeadam.com"' "bilgeada");              // or              //GMapProvider.WebProxy = WebRequest.DefaultWebProxy;              //                                          // set cache mode only if no internet avaible              if(!Stuff.PingNetwork("pingtest.com"))              {                 MainMap.Manager.Mode = AccessMode.CacheOnly;                 MessageBox.Show("No internet connection available' going to CacheOnly mode."' "GMap.NET - Demo.WindowsForms"' MessageBoxButtons.OK' MessageBoxIcon.Warning);              }                // config map                       MainMap.MapProvider = GMapProviders.OpenStreetMap;              MainMap.Position = new PointLatLng(54.6961334816182' 25.2985095977783);              MainMap.MinZoom = 0;              MainMap.MaxZoom = 24;              MainMap.Zoom = 9;                            //MainMap.ScaleMode = ScaleModes.Fractional;                // map events              {                 MainMap.OnPositionChanged += new PositionChanged(MainMap_OnPositionChanged);                   MainMap.OnTileLoadStart += new TileLoadStart(MainMap_OnTileLoadStart);                 MainMap.OnTileLoadComplete += new TileLoadComplete(MainMap_OnTileLoadComplete);                   MainMap.OnMapZoomChanged += new MapZoomChanged(MainMap_OnMapZoomChanged);                 MainMap.OnMapTypeChanged += new MapTypeChanged(MainMap_OnMapTypeChanged);                   MainMap.OnMarkerClick += new MarkerClick(MainMap_OnMarkerClick);                 MainMap.OnMarkerEnter += new MarkerEnter(MainMap_OnMarkerEnter);                 MainMap.OnMarkerLeave += new MarkerLeave(MainMap_OnMarkerLeave);                   MainMap.OnPolygonEnter += new PolygonEnter(MainMap_OnPolygonEnter);                 MainMap.OnPolygonLeave += new PolygonLeave(MainMap_OnPolygonLeave);                   MainMap.OnRouteEnter += new RouteEnter(MainMap_OnRouteEnter);                 MainMap.OnRouteLeave += new RouteLeave(MainMap_OnRouteLeave);                   MainMap.Manager.OnTileCacheComplete += new TileCacheComplete(OnTileCacheComplete);                 MainMap.Manager.OnTileCacheStart += new TileCacheStart(OnTileCacheStart);                 MainMap.Manager.OnTileCacheProgress += new TileCacheProgress(OnTileCacheProgress);              }                MainMap.MouseMove += new MouseEventHandler(MainMap_MouseMove);              MainMap.MouseDown += new MouseEventHandler(MainMap_MouseDown);              MainMap.MouseUp += new MouseEventHandler(MainMap_MouseUp);              MainMap.MouseDoubleClick += new MouseEventHandler(MainMap_MouseDoubleClick);                // get map types  #if !MONO   // mono doesn't handle it' so we 'lost' provider list ;]              comboBoxMapType.ValueMember = "Name";              comboBoxMapType.DataSource = GMapProviders.List;              comboBoxMapType.SelectedItem = MainMap.MapProvider;  #endif              // acccess mode              comboBoxMode.DataSource = Enum.GetValues(typeof(AccessMode));              comboBoxMode.SelectedItem = MainMap.Manager.Mode;                // get position              textBoxLat.Text = MainMap.Position.Lat.ToString(CultureInfo.InvariantCulture);              textBoxLng.Text = MainMap.Position.Lng.ToString(CultureInfo.InvariantCulture);                // get cache modes              checkBoxUseRouteCache.Checked = MainMap.Manager.UseRouteCache;                MobileLogFrom.Value = DateTime.Today;              MobileLogTo.Value = DateTime.Now;                // get zoom                trackBar1.Minimum = MainMap.MinZoom * 100;              trackBar1.Maximum = MainMap.MaxZoom * 100;              trackBar1.TickFrequency = 100;    #if DEBUG              checkBoxDebug.Checked = true;  #endif                ToolStripManager.Renderer = new BSE.Windows.Forms.Office2007Renderer();                #region -- demo workers --              // flight demo              {                 flightWorker.DoWork += new DoWorkEventHandler(flight_DoWork);                 flightWorker.ProgressChanged += new ProgressChangedEventHandler(flight_ProgressChanged);                 flightWorker.WorkerSupportsCancellation = true;                 flightWorker.WorkerReportsProgress = true;              }                // vehicle demo              {                 transportWorker.DoWork += new DoWorkEventHandler(transport_DoWork);                 transportWorker.ProgressChanged += new ProgressChangedEventHandler(transport_ProgressChanged);                 transportWorker.WorkerSupportsCancellation = true;                 transportWorker.WorkerReportsProgress = true;              }                // Connections              {                 connectionsWorker.DoWork += new DoWorkEventHandler(connectionsWorker_DoWork);                 connectionsWorker.ProgressChanged += new ProgressChangedEventHandler(connectionsWorker_ProgressChanged);                 connectionsWorker.WorkerSupportsCancellation = true;                 connectionsWorker.WorkerReportsProgress = true;                   ipInfoSearchWorker.DoWork += new DoWorkEventHandler(ipInfoSearchWorker_DoWork);                 ipInfoSearchWorker.WorkerSupportsCancellation = true;                   iptracerWorker.DoWork += new DoWorkEventHandler(iptracerWorker_DoWork);                 iptracerWorker.WorkerSupportsCancellation = true;                   GridConnections.AutoGenerateColumns = false;                   IpCache.CacheLocation = MainMap.CacheLocation;              }                // perf              timerPerf.Tick += new EventHandler(timer_Tick);              #endregion                // add custom layers                {                 MainMap.Overlays.Add(routes);                 MainMap.Overlays.Add(polygons);                 MainMap.Overlays.Add(objects);                 MainMap.Overlays.Add(top);                   routes.Routes.CollectionChanged += new GMap.NET.ObjectModel.NotifyCollectionChangedEventHandler(Routes_CollectionChanged);                 objects.Markers.CollectionChanged += new GMap.NET.ObjectModel.NotifyCollectionChangedEventHandler(Markers_CollectionChanged);              }                // set current marker              currentMarker = new GMarkerGoogle(MainMap.Position' GMarkerGoogleType.arrow);                        currentMarker.IsHitTestVisible = false;               top.Markers.Add(currentMarker);                //MainMap.VirtualSizeEnabled = true;              //if(false)              {                 // add my city location for demo                 GeoCoderStatusCode status = GeoCoderStatusCode.Unknow;                 {                    PointLatLng? pos = GMapProviders.GoogleMap.GetPoint("Lithuania' Vilnius"' out status);                    if(pos != null && status == GeoCoderStatusCode.G_GEO_SUCCESS)                    {                       currentMarker.Position = pos.Value;                         GMapMarker myCity = new GMarkerGoogle(pos.Value' GMarkerGoogleType.green_small);                       myCity.ToolTipMode = MarkerTooltipMode.Always;                       myCity.ToolTipText = "Welcome to Lithuania! ;}";                       objects.Markers.Add(myCity);                    }                 }                   // add some points in lithuania                 AddLocationLithuania("Kaunas");                 AddLocationLithuania("Klaipėda");                 AddLocationLithuania("Šiauliai");                 AddLocationLithuania("Panevėžys");                   if(objects.Markers.Count > 0)                 {                    MainMap.ZoomAndCenterMarkers(null);                 }                       RegeneratePolygon();                   try                 {                    GMapOverlay overlay = DeepClone<GMapOverlay>(objects);                    Debug.WriteLine("ISerializable status for markers: OK");                      GMapOverlay overlay2 = DeepClone<GMapOverlay>(polygons);                    Debug.WriteLine("ISerializable status for polygons: OK");                      GMapOverlay overlay3 = DeepClone<GMapOverlay>(routes);                    Debug.WriteLine("ISerializable status for routes: OK");                 }                 catch(Exception ex)                 {                    Debug.WriteLine("ISerializable failure: " + ex.Message);    #if DEBUG                    if(Debugger.IsAttached)                    {                       Debugger.Break();                    }  #endif                 }              }           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,MainForm,The following statement contains a magic number: if (!GMapControl.IsDesignerHosted)           {              // add your custom map db provider              //GMap.NET.CacheProviders.MySQLPureImageCache ch = new GMap.NET.CacheProviders.MySQLPureImageCache();              //ch.ConnectionString = @"server=sql2008;User Id=trolis;Persist Security Info=True;database=gmapnetcache;password=trolis;";              //MainMap.Manager.SecondaryCache = ch;                // set your proxy here if need              //GMapProvider.IsSocksProxy = true;              //GMapProvider.WebProxy = new WebProxy("127.0.0.1"' 1080);              //GMapProvider.WebProxy.Credentials = new NetworkCredential("ogrenci@bilgeadam.com"' "bilgeada");              // or              //GMapProvider.WebProxy = WebRequest.DefaultWebProxy;              //                                          // set cache mode only if no internet avaible              if(!Stuff.PingNetwork("pingtest.com"))              {                 MainMap.Manager.Mode = AccessMode.CacheOnly;                 MessageBox.Show("No internet connection available' going to CacheOnly mode."' "GMap.NET - Demo.WindowsForms"' MessageBoxButtons.OK' MessageBoxIcon.Warning);              }                // config map                       MainMap.MapProvider = GMapProviders.OpenStreetMap;              MainMap.Position = new PointLatLng(54.6961334816182' 25.2985095977783);              MainMap.MinZoom = 0;              MainMap.MaxZoom = 24;              MainMap.Zoom = 9;                            //MainMap.ScaleMode = ScaleModes.Fractional;                // map events              {                 MainMap.OnPositionChanged += new PositionChanged(MainMap_OnPositionChanged);                   MainMap.OnTileLoadStart += new TileLoadStart(MainMap_OnTileLoadStart);                 MainMap.OnTileLoadComplete += new TileLoadComplete(MainMap_OnTileLoadComplete);                   MainMap.OnMapZoomChanged += new MapZoomChanged(MainMap_OnMapZoomChanged);                 MainMap.OnMapTypeChanged += new MapTypeChanged(MainMap_OnMapTypeChanged);                   MainMap.OnMarkerClick += new MarkerClick(MainMap_OnMarkerClick);                 MainMap.OnMarkerEnter += new MarkerEnter(MainMap_OnMarkerEnter);                 MainMap.OnMarkerLeave += new MarkerLeave(MainMap_OnMarkerLeave);                   MainMap.OnPolygonEnter += new PolygonEnter(MainMap_OnPolygonEnter);                 MainMap.OnPolygonLeave += new PolygonLeave(MainMap_OnPolygonLeave);                   MainMap.OnRouteEnter += new RouteEnter(MainMap_OnRouteEnter);                 MainMap.OnRouteLeave += new RouteLeave(MainMap_OnRouteLeave);                   MainMap.Manager.OnTileCacheComplete += new TileCacheComplete(OnTileCacheComplete);                 MainMap.Manager.OnTileCacheStart += new TileCacheStart(OnTileCacheStart);                 MainMap.Manager.OnTileCacheProgress += new TileCacheProgress(OnTileCacheProgress);              }                MainMap.MouseMove += new MouseEventHandler(MainMap_MouseMove);              MainMap.MouseDown += new MouseEventHandler(MainMap_MouseDown);              MainMap.MouseUp += new MouseEventHandler(MainMap_MouseUp);              MainMap.MouseDoubleClick += new MouseEventHandler(MainMap_MouseDoubleClick);                // get map types  #if !MONO   // mono doesn't handle it' so we 'lost' provider list ;]              comboBoxMapType.ValueMember = "Name";              comboBoxMapType.DataSource = GMapProviders.List;              comboBoxMapType.SelectedItem = MainMap.MapProvider;  #endif              // acccess mode              comboBoxMode.DataSource = Enum.GetValues(typeof(AccessMode));              comboBoxMode.SelectedItem = MainMap.Manager.Mode;                // get position              textBoxLat.Text = MainMap.Position.Lat.ToString(CultureInfo.InvariantCulture);              textBoxLng.Text = MainMap.Position.Lng.ToString(CultureInfo.InvariantCulture);                // get cache modes              checkBoxUseRouteCache.Checked = MainMap.Manager.UseRouteCache;                MobileLogFrom.Value = DateTime.Today;              MobileLogTo.Value = DateTime.Now;                // get zoom                trackBar1.Minimum = MainMap.MinZoom * 100;              trackBar1.Maximum = MainMap.MaxZoom * 100;              trackBar1.TickFrequency = 100;    #if DEBUG              checkBoxDebug.Checked = true;  #endif                ToolStripManager.Renderer = new BSE.Windows.Forms.Office2007Renderer();                #region -- demo workers --              // flight demo              {                 flightWorker.DoWork += new DoWorkEventHandler(flight_DoWork);                 flightWorker.ProgressChanged += new ProgressChangedEventHandler(flight_ProgressChanged);                 flightWorker.WorkerSupportsCancellation = true;                 flightWorker.WorkerReportsProgress = true;              }                // vehicle demo              {                 transportWorker.DoWork += new DoWorkEventHandler(transport_DoWork);                 transportWorker.ProgressChanged += new ProgressChangedEventHandler(transport_ProgressChanged);                 transportWorker.WorkerSupportsCancellation = true;                 transportWorker.WorkerReportsProgress = true;              }                // Connections              {                 connectionsWorker.DoWork += new DoWorkEventHandler(connectionsWorker_DoWork);                 connectionsWorker.ProgressChanged += new ProgressChangedEventHandler(connectionsWorker_ProgressChanged);                 connectionsWorker.WorkerSupportsCancellation = true;                 connectionsWorker.WorkerReportsProgress = true;                   ipInfoSearchWorker.DoWork += new DoWorkEventHandler(ipInfoSearchWorker_DoWork);                 ipInfoSearchWorker.WorkerSupportsCancellation = true;                   iptracerWorker.DoWork += new DoWorkEventHandler(iptracerWorker_DoWork);                 iptracerWorker.WorkerSupportsCancellation = true;                   GridConnections.AutoGenerateColumns = false;                   IpCache.CacheLocation = MainMap.CacheLocation;              }                // perf              timerPerf.Tick += new EventHandler(timer_Tick);              #endregion                // add custom layers                {                 MainMap.Overlays.Add(routes);                 MainMap.Overlays.Add(polygons);                 MainMap.Overlays.Add(objects);                 MainMap.Overlays.Add(top);                   routes.Routes.CollectionChanged += new GMap.NET.ObjectModel.NotifyCollectionChangedEventHandler(Routes_CollectionChanged);                 objects.Markers.CollectionChanged += new GMap.NET.ObjectModel.NotifyCollectionChangedEventHandler(Markers_CollectionChanged);              }                // set current marker              currentMarker = new GMarkerGoogle(MainMap.Position' GMarkerGoogleType.arrow);                        currentMarker.IsHitTestVisible = false;               top.Markers.Add(currentMarker);                //MainMap.VirtualSizeEnabled = true;              //if(false)              {                 // add my city location for demo                 GeoCoderStatusCode status = GeoCoderStatusCode.Unknow;                 {                    PointLatLng? pos = GMapProviders.GoogleMap.GetPoint("Lithuania' Vilnius"' out status);                    if(pos != null && status == GeoCoderStatusCode.G_GEO_SUCCESS)                    {                       currentMarker.Position = pos.Value;                         GMapMarker myCity = new GMarkerGoogle(pos.Value' GMarkerGoogleType.green_small);                       myCity.ToolTipMode = MarkerTooltipMode.Always;                       myCity.ToolTipText = "Welcome to Lithuania! ;}";                       objects.Markers.Add(myCity);                    }                 }                   // add some points in lithuania                 AddLocationLithuania("Kaunas");                 AddLocationLithuania("Klaipėda");                 AddLocationLithuania("Šiauliai");                 AddLocationLithuania("Panevėžys");                   if(objects.Markers.Count > 0)                 {                    MainMap.ZoomAndCenterMarkers(null);                 }                       RegeneratePolygon();                   try                 {                    GMapOverlay overlay = DeepClone<GMapOverlay>(objects);                    Debug.WriteLine("ISerializable status for markers: OK");                      GMapOverlay overlay2 = DeepClone<GMapOverlay>(polygons);                    Debug.WriteLine("ISerializable status for polygons: OK");                      GMapOverlay overlay3 = DeepClone<GMapOverlay>(routes);                    Debug.WriteLine("ISerializable status for routes: OK");                 }                 catch(Exception ex)                 {                    Debug.WriteLine("ISerializable failure: " + ex.Message);    #if DEBUG                    if(Debugger.IsAttached)                    {                       Debugger.Break();                    }  #endif                 }              }           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,MainForm,The following statement contains a magic number: if (!GMapControl.IsDesignerHosted)           {              // add your custom map db provider              //GMap.NET.CacheProviders.MySQLPureImageCache ch = new GMap.NET.CacheProviders.MySQLPureImageCache();              //ch.ConnectionString = @"server=sql2008;User Id=trolis;Persist Security Info=True;database=gmapnetcache;password=trolis;";              //MainMap.Manager.SecondaryCache = ch;                // set your proxy here if need              //GMapProvider.IsSocksProxy = true;              //GMapProvider.WebProxy = new WebProxy("127.0.0.1"' 1080);              //GMapProvider.WebProxy.Credentials = new NetworkCredential("ogrenci@bilgeadam.com"' "bilgeada");              // or              //GMapProvider.WebProxy = WebRequest.DefaultWebProxy;              //                                          // set cache mode only if no internet avaible              if(!Stuff.PingNetwork("pingtest.com"))              {                 MainMap.Manager.Mode = AccessMode.CacheOnly;                 MessageBox.Show("No internet connection available' going to CacheOnly mode."' "GMap.NET - Demo.WindowsForms"' MessageBoxButtons.OK' MessageBoxIcon.Warning);              }                // config map                       MainMap.MapProvider = GMapProviders.OpenStreetMap;              MainMap.Position = new PointLatLng(54.6961334816182' 25.2985095977783);              MainMap.MinZoom = 0;              MainMap.MaxZoom = 24;              MainMap.Zoom = 9;                            //MainMap.ScaleMode = ScaleModes.Fractional;                // map events              {                 MainMap.OnPositionChanged += new PositionChanged(MainMap_OnPositionChanged);                   MainMap.OnTileLoadStart += new TileLoadStart(MainMap_OnTileLoadStart);                 MainMap.OnTileLoadComplete += new TileLoadComplete(MainMap_OnTileLoadComplete);                   MainMap.OnMapZoomChanged += new MapZoomChanged(MainMap_OnMapZoomChanged);                 MainMap.OnMapTypeChanged += new MapTypeChanged(MainMap_OnMapTypeChanged);                   MainMap.OnMarkerClick += new MarkerClick(MainMap_OnMarkerClick);                 MainMap.OnMarkerEnter += new MarkerEnter(MainMap_OnMarkerEnter);                 MainMap.OnMarkerLeave += new MarkerLeave(MainMap_OnMarkerLeave);                   MainMap.OnPolygonEnter += new PolygonEnter(MainMap_OnPolygonEnter);                 MainMap.OnPolygonLeave += new PolygonLeave(MainMap_OnPolygonLeave);                   MainMap.OnRouteEnter += new RouteEnter(MainMap_OnRouteEnter);                 MainMap.OnRouteLeave += new RouteLeave(MainMap_OnRouteLeave);                   MainMap.Manager.OnTileCacheComplete += new TileCacheComplete(OnTileCacheComplete);                 MainMap.Manager.OnTileCacheStart += new TileCacheStart(OnTileCacheStart);                 MainMap.Manager.OnTileCacheProgress += new TileCacheProgress(OnTileCacheProgress);              }                MainMap.MouseMove += new MouseEventHandler(MainMap_MouseMove);              MainMap.MouseDown += new MouseEventHandler(MainMap_MouseDown);              MainMap.MouseUp += new MouseEventHandler(MainMap_MouseUp);              MainMap.MouseDoubleClick += new MouseEventHandler(MainMap_MouseDoubleClick);                // get map types  #if !MONO   // mono doesn't handle it' so we 'lost' provider list ;]              comboBoxMapType.ValueMember = "Name";              comboBoxMapType.DataSource = GMapProviders.List;              comboBoxMapType.SelectedItem = MainMap.MapProvider;  #endif              // acccess mode              comboBoxMode.DataSource = Enum.GetValues(typeof(AccessMode));              comboBoxMode.SelectedItem = MainMap.Manager.Mode;                // get position              textBoxLat.Text = MainMap.Position.Lat.ToString(CultureInfo.InvariantCulture);              textBoxLng.Text = MainMap.Position.Lng.ToString(CultureInfo.InvariantCulture);                // get cache modes              checkBoxUseRouteCache.Checked = MainMap.Manager.UseRouteCache;                MobileLogFrom.Value = DateTime.Today;              MobileLogTo.Value = DateTime.Now;                // get zoom                trackBar1.Minimum = MainMap.MinZoom * 100;              trackBar1.Maximum = MainMap.MaxZoom * 100;              trackBar1.TickFrequency = 100;    #if DEBUG              checkBoxDebug.Checked = true;  #endif                ToolStripManager.Renderer = new BSE.Windows.Forms.Office2007Renderer();                #region -- demo workers --              // flight demo              {                 flightWorker.DoWork += new DoWorkEventHandler(flight_DoWork);                 flightWorker.ProgressChanged += new ProgressChangedEventHandler(flight_ProgressChanged);                 flightWorker.WorkerSupportsCancellation = true;                 flightWorker.WorkerReportsProgress = true;              }                // vehicle demo              {                 transportWorker.DoWork += new DoWorkEventHandler(transport_DoWork);                 transportWorker.ProgressChanged += new ProgressChangedEventHandler(transport_ProgressChanged);                 transportWorker.WorkerSupportsCancellation = true;                 transportWorker.WorkerReportsProgress = true;              }                // Connections              {                 connectionsWorker.DoWork += new DoWorkEventHandler(connectionsWorker_DoWork);                 connectionsWorker.ProgressChanged += new ProgressChangedEventHandler(connectionsWorker_ProgressChanged);                 connectionsWorker.WorkerSupportsCancellation = true;                 connectionsWorker.WorkerReportsProgress = true;                   ipInfoSearchWorker.DoWork += new DoWorkEventHandler(ipInfoSearchWorker_DoWork);                 ipInfoSearchWorker.WorkerSupportsCancellation = true;                   iptracerWorker.DoWork += new DoWorkEventHandler(iptracerWorker_DoWork);                 iptracerWorker.WorkerSupportsCancellation = true;                   GridConnections.AutoGenerateColumns = false;                   IpCache.CacheLocation = MainMap.CacheLocation;              }                // perf              timerPerf.Tick += new EventHandler(timer_Tick);              #endregion                // add custom layers                {                 MainMap.Overlays.Add(routes);                 MainMap.Overlays.Add(polygons);                 MainMap.Overlays.Add(objects);                 MainMap.Overlays.Add(top);                   routes.Routes.CollectionChanged += new GMap.NET.ObjectModel.NotifyCollectionChangedEventHandler(Routes_CollectionChanged);                 objects.Markers.CollectionChanged += new GMap.NET.ObjectModel.NotifyCollectionChangedEventHandler(Markers_CollectionChanged);              }                // set current marker              currentMarker = new GMarkerGoogle(MainMap.Position' GMarkerGoogleType.arrow);                        currentMarker.IsHitTestVisible = false;               top.Markers.Add(currentMarker);                //MainMap.VirtualSizeEnabled = true;              //if(false)              {                 // add my city location for demo                 GeoCoderStatusCode status = GeoCoderStatusCode.Unknow;                 {                    PointLatLng? pos = GMapProviders.GoogleMap.GetPoint("Lithuania' Vilnius"' out status);                    if(pos != null && status == GeoCoderStatusCode.G_GEO_SUCCESS)                    {                       currentMarker.Position = pos.Value;                         GMapMarker myCity = new GMarkerGoogle(pos.Value' GMarkerGoogleType.green_small);                       myCity.ToolTipMode = MarkerTooltipMode.Always;                       myCity.ToolTipText = "Welcome to Lithuania! ;}";                       objects.Markers.Add(myCity);                    }                 }                   // add some points in lithuania                 AddLocationLithuania("Kaunas");                 AddLocationLithuania("Klaipėda");                 AddLocationLithuania("Šiauliai");                 AddLocationLithuania("Panevėžys");                   if(objects.Markers.Count > 0)                 {                    MainMap.ZoomAndCenterMarkers(null);                 }                       RegeneratePolygon();                   try                 {                    GMapOverlay overlay = DeepClone<GMapOverlay>(objects);                    Debug.WriteLine("ISerializable status for markers: OK");                      GMapOverlay overlay2 = DeepClone<GMapOverlay>(polygons);                    Debug.WriteLine("ISerializable status for polygons: OK");                      GMapOverlay overlay3 = DeepClone<GMapOverlay>(routes);                    Debug.WriteLine("ISerializable status for routes: OK");                 }                 catch(Exception ex)                 {                    Debug.WriteLine("ISerializable failure: " + ex.Message);    #if DEBUG                    if(Debugger.IsAttached)                    {                       Debugger.Break();                    }  #endif                 }              }           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,timer_Tick,The following statement contains a magic number: if(tt >= 333)           {              timerPerf.Stop();              tt = 0;           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,flight_ProgressChanged,The following statement contains a magic number: if(firstLoadFlight)           {              MainMap.Zoom = 5;              MainMap.SetZoomToFitRect(new RectLatLng(54.4955675218741' -0.966796875' 28.916015625' 13.3830987326932));              firstLoadFlight = false;           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,flight_ProgressChanged,The following statement contains a magic number: if(firstLoadFlight)           {              MainMap.Zoom = 5;              MainMap.SetZoomToFitRect(new RectLatLng(54.4955675218741' -0.966796875' 28.916015625' 13.3830987326932));              firstLoadFlight = false;           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,flight_ProgressChanged,The following statement contains a magic number: if(firstLoadFlight)           {              MainMap.Zoom = 5;              MainMap.SetZoomToFitRect(new RectLatLng(54.4955675218741' -0.966796875' 28.916015625' 13.3830987326932));              firstLoadFlight = false;           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,flight_ProgressChanged,The following statement contains a magic number: if(firstLoadFlight)           {              MainMap.Zoom = 5;              MainMap.SetZoomToFitRect(new RectLatLng(54.4955675218741' -0.966796875' 28.916015625' 13.3830987326932));              firstLoadFlight = false;           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,flight_ProgressChanged,The following statement contains a magic number: if(firstLoadFlight)           {              MainMap.Zoom = 5;              MainMap.SetZoomToFitRect(new RectLatLng(54.4955675218741' -0.966796875' 28.916015625' 13.3830987326932));              firstLoadFlight = false;           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,flight_DoWork,The following statement contains a magic number: while(!flightWorker.CancellationPending)           {              try              {                 lock(flights)                 {                    //Stuff.GetFlightRadarData(flights' lastPosition' lastZoom' restartSesion);                      Stuff.GetFlightRadarData(flights' flightBounds);                      //if(flights.Count > 0 && restartSesion)                    //{                    //   restartSesion = false;                    //}                 }                   flightWorker.ReportProgress(100);              }              catch(Exception ex)              {                 Debug.WriteLine("flight_DoWork: " + ex.ToString());              }              Thread.Sleep(5 * 1000);           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,flight_DoWork,The following statement contains a magic number: while(!flightWorker.CancellationPending)           {              try              {                 lock(flights)                 {                    //Stuff.GetFlightRadarData(flights' lastPosition' lastZoom' restartSesion);                      Stuff.GetFlightRadarData(flights' flightBounds);                      //if(flights.Count > 0 && restartSesion)                    //{                    //   restartSesion = false;                    //}                 }                   flightWorker.ReportProgress(100);              }              catch(Exception ex)              {                 Debug.WriteLine("flight_DoWork: " + ex.ToString());              }              Thread.Sleep(5 * 1000);           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,flight_DoWork,The following statement contains a magic number: while(!flightWorker.CancellationPending)           {              try              {                 lock(flights)                 {                    //Stuff.GetFlightRadarData(flights' lastPosition' lastZoom' restartSesion);                      Stuff.GetFlightRadarData(flights' flightBounds);                      //if(flights.Count > 0 && restartSesion)                    //{                    //   restartSesion = false;                    //}                 }                   flightWorker.ReportProgress(100);              }              catch(Exception ex)              {                 Debug.WriteLine("flight_DoWork: " + ex.ToString());              }              Thread.Sleep(5 * 1000);           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,transport_ProgressChanged,The following statement contains a magic number: if(firstLoadTrasport)           {              MainMap.Zoom = 5;              MainMap.ZoomAndCenterMarkers("objects");              firstLoadTrasport = false;           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,transport_DoWork,The following statement contains a magic number: while(!transportWorker.CancellationPending)           {              try              {                 #region -- old vehicle demo --                 lock(trolleybus)                 {                    Stuff.GetVilniusTransportData(TransportType.TrolleyBus' string.Empty' trolleybus);                 }                   lock(bus)                 {                    Stuff.GetVilniusTransportData(TransportType.Bus' string.Empty' bus);                 }                 #endregion                   transportWorker.ReportProgress(100);              }              catch(Exception ex)              {                 Debug.WriteLine("transport_DoWork: " + ex.ToString());              }              Thread.Sleep(2 * 1000);           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,transport_DoWork,The following statement contains a magic number: while(!transportWorker.CancellationPending)           {              try              {                 #region -- old vehicle demo --                 lock(trolleybus)                 {                    Stuff.GetVilniusTransportData(TransportType.TrolleyBus' string.Empty' trolleybus);                 }                   lock(bus)                 {                    Stuff.GetVilniusTransportData(TransportType.Bus' string.Empty' bus);                 }                 #endregion                   transportWorker.ReportProgress(100);              }              catch(Exception ex)              {                 Debug.WriteLine("transport_DoWork: " + ex.ToString());              }              Thread.Sleep(2 * 1000);           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,transport_DoWork,The following statement contains a magic number: while(!transportWorker.CancellationPending)           {              try              {                 #region -- old vehicle demo --                 lock(trolleybus)                 {                    Stuff.GetVilniusTransportData(TransportType.TrolleyBus' string.Empty' trolleybus);                 }                   lock(bus)                 {                    Stuff.GetVilniusTransportData(TransportType.Bus' string.Empty' bus);                 }                 #endregion                   transportWorker.ReportProgress(100);              }              catch(Exception ex)              {                 Debug.WriteLine("transport_DoWork: " + ex.ToString());              }              Thread.Sleep(2 * 1000);           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,ipInfoSearchWorker_DoWork,The following statement contains a magic number: while(!ipInfoSearchWorker.CancellationPending)           {              try              {                 string iplist = string.Empty;                   lock(TcpStateNeedLocationInfo)                 {                    //int count = 0;                    foreach(var info in TcpStateNeedLocationInfo)                    {                       if(iplist.Length > 0)                       {                          iplist += "'";                       }                       iplist += info;                         //if(count++ >= 1)                       {                          break;                       }                    }                 }                   // fill location info                 if(!string.IsNullOrEmpty(iplist))                 {                    List<IpInfo> ips = GetIpHostInfo(iplist);                    foreach(var i in ips)                    {                       lock(TcpState)                       {                          IpInfo info;                          if(TcpState.TryGetValue(i.Ip' out info))                          {                             info.CountryName = i.CountryName;                             info.RegionName = i.RegionName;                             info.City = i.City;                             info.Latitude = i.Latitude;                             info.Longitude = i.Longitude;                             info.TracePoint = false;                               if(info.CountryName != "Reserved")                             {                                info.Ip = i.Ip;                                  // add host for tracing                                lock(TcpStateNeedtraceInfo)                                {                                   if(!TcpStateNeedtraceInfo.Contains(i.Ip))                                   {                                      TcpStateNeedtraceInfo.Enqueue(i.Ip);                                   }                                }                             }                               lock(TcpStateNeedLocationInfo)                             {                                TcpStateNeedLocationInfo.Remove(i.Ip);                                  Debug.WriteLine("TcpStateNeedLocationInfo: " + TcpStateNeedLocationInfo.Count + " left...");                             }                          }                       }                    }                    ips.Clear();                 }                 else                 {                    break;                 }              }              catch(Exception ex)              {                 Debug.WriteLine("ipInfoSearchWorker_DoWork: " + ex.ToString());              }              Thread.Sleep(1111);           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,iptracerWorker_DoWork,The following statement contains a magic number: while(!iptracerWorker.CancellationPending)           {              try              {                 string Ip = string.Empty;                 int count = 0;                 lock(TcpStateNeedtraceInfo)                 {                    count = TcpStateNeedtraceInfo.Count;                    if(count > 0)                    {                       Ip = TcpStateNeedtraceInfo.Dequeue();                    }                 }                   if(!string.IsNullOrEmpty(Ip))                 {                    string tracertIps = string.Empty;                      List<PingReply> tracert;                      bool contains = false;                    lock(TraceRoutes)                    {                       contains = TraceRoutes.TryGetValue(Ip' out tracert);                    }                      if(!contains)                    {                       Debug.WriteLine("GetTraceRoute: " + Ip + "' left " + count);                         tracert = TraceRoute.GetTraceRoute(Ip);                       if(tracert != null)                       {                          if(tracert[tracert.Count - 1].Status == IPStatus.Success)                          {                             foreach(var t in tracert)                             {                                if(!t.ToString().StartsWith("192.168.") && !t.ToString().StartsWith("127.0."))                                {                                   if(tracertIps.Length > 0)                                   {                                      tracertIps += "'";                                   }                                   tracertIps += t.Address.ToString();                                }                             }                               if(!string.IsNullOrEmpty(tracertIps))                             {                                List<IpInfo> tinfo = GetIpHostInfo(tracertIps);                                if(tinfo.Count > 0)                                {                                   for(int i = 0; i < tinfo.Count; i++)                                   {                                      IpInfo ti = tinfo[i];                                      ti.TracePoint = true;                                        if(ti.CountryName != "Reserved")                                      {                                         lock(TcpTracePoints)                                         {                                            TcpTracePoints[ti.Ip] = ti;                                         }                                      }                                   }                                   tinfo.Clear();                                     lock(TraceRoutes)                                   {                                      TraceRoutes[Ip] = tracert;                                   }                                }                             }                          }                          else                          {                             // move failed' eque itself again                             lock(TcpStateNeedtraceInfo)                             {                                TcpStateNeedtraceInfo.Enqueue(Ip);                             }                          }                       }                    }                 }                 else                 {                    break;                 }              }              catch(Exception ex)              {                 Debug.WriteLine("iptracerWorker_DoWork: " + ex.ToString());              }              Thread.Sleep(3333);           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,connectionsWorker_DoWork,The following statement contains a magic number: while(!connectionsWorker.CancellationPending)           {              try              {                 #region -- xml --                 // http://ipinfodb.com/ip_location_api.php                   // http://ipinfodb.com/ip_query2.php?ip=74.125.45.100'206.190.60.37&timezone=false                   //<?xml version="1.0" encoding="UTF-8"?>                 //<Locations>                 //  <Location id="0">                 //    <Ip>74.125.45.100</Ip>                 //    <Status>OK</Status>                 //    <CountryCode>US</CountryCode>                 //    <CountryName>United States</CountryName>                 //    <RegionCode>06</RegionCode>                 //    <RegionName>California</RegionName>                 //    <City>Mountain View</City>                 //    <ZipPostalCode>94043</ZipPostalCode>                 //    <Latitude>37.4192</Latitude>                 //    <Longitude>-122.057</Longitude>                 //  </Location>                  #endregion                   lock(TcpState)                 {                    //TcpConnectionInformation[] tcpInfoList = properties.GetActiveTcpConnections();                    //foreach(TcpConnectionInformation i in tcpInfoList)                    //{                      //}                      CountryStatus.Clear();                    ManagedIpHelper.UpdateExtendedTcpTable(false);                      foreach(TcpRow i in ManagedIpHelper.TcpRows)                    {                       #region -- update TcpState --                       string Ip = i.RemoteEndPoint.Address.ToString();                         // exclude local network                       if(!Ip.StartsWith("192.168.") && !Ip.StartsWith("127.0."))                       {                          IpInfo info;                          if(!TcpState.TryGetValue(Ip' out info))                          {                             info = new IpInfo();                             TcpState[Ip] = info;                               // request location info                             lock(TcpStateNeedLocationInfo)                             {                                if(!TcpStateNeedLocationInfo.Contains(Ip))                                {                                   TcpStateNeedLocationInfo.Add(Ip);                                     if(!ipInfoSearchWorker.IsBusy)                                   {                                      ipInfoSearchWorker.RunWorkerAsync();                                   }                                }                             }                          }                            info.State = i.State;                          info.Port = i.RemoteEndPoint.Port;                          info.StatusTime = DateTime.Now;                            try                          {                             Process p;                             if(!ProcessList.TryGetValue(i.ProcessId' out p))                             {                                p = Process.GetProcessById(i.ProcessId);                                ProcessList[i.ProcessId] = p;                             }                             info.ProcessName = p.ProcessName;                          }                          catch                          {                          }                            if(!string.IsNullOrEmpty(info.CountryName))                          {                             if(!CountryStatus.ContainsKey(info.CountryName))                             {                                CountryStatus[info.CountryName] = 1;                             }                             else                             {                                CountryStatus[info.CountryName]++;                             }                          }                       }                       #endregion                    }                 }                   // launch tracer if needed                 if(TryTraceConnection)                 {                    if(!iptracerWorker.IsBusy)                    {                       lock(TcpStateNeedtraceInfo)                       {                          if(TcpStateNeedtraceInfo.Count > 0)                          {                             iptracerWorker.RunWorkerAsync();                          }                       }                    }                 }                   connectionsWorker.ReportProgress(100);              }              catch(Exception ex)              {                 Debug.WriteLine("connectionsWorker_DoWork: " + ex.ToString());              }              Thread.Sleep(3333);           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,connectionsWorker_DoWork,The following statement contains a magic number: while(!connectionsWorker.CancellationPending)           {              try              {                 #region -- xml --                 // http://ipinfodb.com/ip_location_api.php                   // http://ipinfodb.com/ip_query2.php?ip=74.125.45.100'206.190.60.37&timezone=false                   //<?xml version="1.0" encoding="UTF-8"?>                 //<Locations>                 //  <Location id="0">                 //    <Ip>74.125.45.100</Ip>                 //    <Status>OK</Status>                 //    <CountryCode>US</CountryCode>                 //    <CountryName>United States</CountryName>                 //    <RegionCode>06</RegionCode>                 //    <RegionName>California</RegionName>                 //    <City>Mountain View</City>                 //    <ZipPostalCode>94043</ZipPostalCode>                 //    <Latitude>37.4192</Latitude>                 //    <Longitude>-122.057</Longitude>                 //  </Location>                  #endregion                   lock(TcpState)                 {                    //TcpConnectionInformation[] tcpInfoList = properties.GetActiveTcpConnections();                    //foreach(TcpConnectionInformation i in tcpInfoList)                    //{                      //}                      CountryStatus.Clear();                    ManagedIpHelper.UpdateExtendedTcpTable(false);                      foreach(TcpRow i in ManagedIpHelper.TcpRows)                    {                       #region -- update TcpState --                       string Ip = i.RemoteEndPoint.Address.ToString();                         // exclude local network                       if(!Ip.StartsWith("192.168.") && !Ip.StartsWith("127.0."))                       {                          IpInfo info;                          if(!TcpState.TryGetValue(Ip' out info))                          {                             info = new IpInfo();                             TcpState[Ip] = info;                               // request location info                             lock(TcpStateNeedLocationInfo)                             {                                if(!TcpStateNeedLocationInfo.Contains(Ip))                                {                                   TcpStateNeedLocationInfo.Add(Ip);                                     if(!ipInfoSearchWorker.IsBusy)                                   {                                      ipInfoSearchWorker.RunWorkerAsync();                                   }                                }                             }                          }                            info.State = i.State;                          info.Port = i.RemoteEndPoint.Port;                          info.StatusTime = DateTime.Now;                            try                          {                             Process p;                             if(!ProcessList.TryGetValue(i.ProcessId' out p))                             {                                p = Process.GetProcessById(i.ProcessId);                                ProcessList[i.ProcessId] = p;                             }                             info.ProcessName = p.ProcessName;                          }                          catch                          {                          }                            if(!string.IsNullOrEmpty(info.CountryName))                          {                             if(!CountryStatus.ContainsKey(info.CountryName))                             {                                CountryStatus[info.CountryName] = 1;                             }                             else                             {                                CountryStatus[info.CountryName]++;                             }                          }                       }                       #endregion                    }                 }                   // launch tracer if needed                 if(TryTraceConnection)                 {                    if(!iptracerWorker.IsBusy)                    {                       lock(TcpStateNeedtraceInfo)                       {                          if(TcpStateNeedtraceInfo.Count > 0)                          {                             iptracerWorker.RunWorkerAsync();                          }                       }                    }                 }                   connectionsWorker.ReportProgress(100);              }              catch(Exception ex)              {                 Debug.WriteLine("connectionsWorker_DoWork: " + ex.ToString());              }              Thread.Sleep(3333);           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,connectionsWorker_ProgressChanged,The following statement contains a magic number: try           {              // stops immediate marker/route/polygon invalidations;              // call Refresh to perform single refresh and reset invalidation state              MainMap.HoldInvalidation = true;                SelectedCountries.Clear();              Int32 SelectedCountriesCount = GridConnections.Rows.GetRowCount(DataGridViewElementStates.Selected);              if(SelectedCountriesCount > 0)              {                 for(int i = 0; i < SelectedCountriesCount; i++)                 {                    string country = GridConnections.SelectedRows[i].Cells[0].Value as string;                    SelectedCountries.Add(country);                 }              }                ComparerIpStatus.SortOnlyCountryName = !(SelectedCountriesCount == 0);                lock(TcpState)              {                 bool snap = true;                 foreach(var tcp in TcpState)                 {                    GMapMarker marker;                      if(!tcpConnections.TryGetValue(tcp.Key' out marker))                    {                       if(!string.IsNullOrEmpty(tcp.Value.Ip))                       {                          marker = new GMarkerGoogle(new PointLatLng(tcp.Value.Latitude' tcp.Value.Longitude)' GMarkerGoogleType.green_small);                          marker.ToolTipMode = MarkerTooltipMode.OnMouseOver;                          marker.Tag = tcp.Value.CountryName;                            tcpConnections[tcp.Key] = marker;                          {                             if(!(SelectedCountriesCount > 0 && !SelectedCountries.Contains(tcp.Value.CountryName)))                             {                                objects.Markers.Add(marker);                                  UpdateMarkerTcpIpToolTip(marker' tcp.Value' "(" + objects.Markers.Count + ") ");                                  if(snap)                                {                                   if(checkBoxTcpIpSnap.Checked && !MainMap.IsDragging)                                   {                                      MainMap.Position = marker.Position;                                   }                                   snap = false;                                     if(lastTcpmarker != null)                                   {                                      marker.ToolTipMode = MarkerTooltipMode.Always;                                      lastTcpmarker.ToolTipMode = MarkerTooltipMode.OnMouseOver;                                   }                                     lastTcpmarker = marker;                                }                             }                          }                       }                    }                    else                    {                       if((DateTime.Now - tcp.Value.StatusTime > TimeSpan.FromSeconds(8)) || (SelectedCountriesCount > 0 && !SelectedCountries.Contains(tcp.Value.CountryName)))                       {                          objects.Markers.Remove(marker);                            GMapRoute route;                          if(tcpRoutes.TryGetValue(tcp.Key' out route))                          {                             routes.Routes.Remove(route);                          }                            lock(TcpStateNeedLocationInfo)                          {                             bool r = TcpStateNeedLocationInfo.Remove(tcp.Key);                             if(r)                             {                                Debug.WriteLine("TcpStateNeedLocationInfo: removed " + tcp.Key + " " + r);                             }                          }                       }                       else                       {                          marker.Position = new PointLatLng(tcp.Value.Latitude' tcp.Value.Longitude);                          if(!objects.Markers.Contains(marker))                          {                             objects.Markers.Add(marker);                          }                          UpdateMarkerTcpIpToolTip(marker' tcp.Value' string.Empty);                            if(TryTraceConnection)                          {                             // routes                             GMapRoute route;                             if(!this.tcpRoutes.TryGetValue(tcp.Key' out route))                             {                                lock(TraceRoutes)                                {                                   List<PingReply> tr;                                   if(TraceRoutes.TryGetValue(tcp.Key' out tr))                                   {                                      if(tr != null)                                      {                                         List<PointLatLng> points = new List<PointLatLng>();                                         foreach(var add in tr)                                         {                                            IpInfo info;                                              lock(TcpTracePoints)                                            {                                               if(TcpTracePoints.TryGetValue(add.Address.ToString()' out info))                                               {                                                  if(!string.IsNullOrEmpty(info.Ip))                                                  {                                                     points.Add(new PointLatLng(info.Latitude' info.Longitude));                                                  }                                               }                                            }                                         }                                           if(points.Count > 0)                                         {                                            route = new GMapRoute(points' tcp.Value.CountryName);                                              route.Stroke = new Pen(GetRandomColor());                                            route.Stroke.Width = 4;                                            route.Stroke.DashStyle = System.Drawing.Drawing2D.DashStyle.DashDot;                                              route.Stroke.StartCap = LineCap.NoAnchor;                                            route.Stroke.EndCap = System.Drawing.Drawing2D.LineCap.ArrowAnchor;                                            route.Stroke.LineJoin = LineJoin.Round;                                              routes.Routes.Add(route);                                            tcpRoutes[tcp.Key] = route;                                         }                                      }                                   }                                }                             }                             else                             {                                if(!routes.Routes.Contains(route))                                {                                   routes.Routes.Add(route);                                }                             }                          }                       }                    }                 }                   // update grid data                 if(panelMenu.Expand && xPanderPanelLive.Expand)                 {                    bool empty = CountryStatusView.Count == 0;                      if(!ComparerIpStatus.SortOnlyCountryName)                    {                       CountryStatusView.Clear();                    }                      foreach(var c in CountryStatus)                    {                       IpStatus s = new IpStatus();                       {                          s.CountryName = c.Key;                          s.ConnectionsCount = c.Value;                       }                         if(ComparerIpStatus.SortOnlyCountryName)                       {                          int idx = CountryStatusView.FindIndex(p => p.CountryName == c.Key);                          if(idx >= 0)                          {                             CountryStatusView[idx] = s;                          }                       }                       else                       {                          CountryStatusView.Add(s);                       }                    }                      CountryStatusView.Sort(ComparerIpStatus);                      GridConnections.RowCount = CountryStatusView.Count;                    GridConnections.Refresh();                      if(empty)                    {                       GridConnections.ClearSelection();                    }                 }              }                MainMap.Refresh();           }           catch(Exception ex)           {              Debug.WriteLine(ex.ToString());           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,connectionsWorker_ProgressChanged,The following statement contains a magic number: try           {              // stops immediate marker/route/polygon invalidations;              // call Refresh to perform single refresh and reset invalidation state              MainMap.HoldInvalidation = true;                SelectedCountries.Clear();              Int32 SelectedCountriesCount = GridConnections.Rows.GetRowCount(DataGridViewElementStates.Selected);              if(SelectedCountriesCount > 0)              {                 for(int i = 0; i < SelectedCountriesCount; i++)                 {                    string country = GridConnections.SelectedRows[i].Cells[0].Value as string;                    SelectedCountries.Add(country);                 }              }                ComparerIpStatus.SortOnlyCountryName = !(SelectedCountriesCount == 0);                lock(TcpState)              {                 bool snap = true;                 foreach(var tcp in TcpState)                 {                    GMapMarker marker;                      if(!tcpConnections.TryGetValue(tcp.Key' out marker))                    {                       if(!string.IsNullOrEmpty(tcp.Value.Ip))                       {                          marker = new GMarkerGoogle(new PointLatLng(tcp.Value.Latitude' tcp.Value.Longitude)' GMarkerGoogleType.green_small);                          marker.ToolTipMode = MarkerTooltipMode.OnMouseOver;                          marker.Tag = tcp.Value.CountryName;                            tcpConnections[tcp.Key] = marker;                          {                             if(!(SelectedCountriesCount > 0 && !SelectedCountries.Contains(tcp.Value.CountryName)))                             {                                objects.Markers.Add(marker);                                  UpdateMarkerTcpIpToolTip(marker' tcp.Value' "(" + objects.Markers.Count + ") ");                                  if(snap)                                {                                   if(checkBoxTcpIpSnap.Checked && !MainMap.IsDragging)                                   {                                      MainMap.Position = marker.Position;                                   }                                   snap = false;                                     if(lastTcpmarker != null)                                   {                                      marker.ToolTipMode = MarkerTooltipMode.Always;                                      lastTcpmarker.ToolTipMode = MarkerTooltipMode.OnMouseOver;                                   }                                     lastTcpmarker = marker;                                }                             }                          }                       }                    }                    else                    {                       if((DateTime.Now - tcp.Value.StatusTime > TimeSpan.FromSeconds(8)) || (SelectedCountriesCount > 0 && !SelectedCountries.Contains(tcp.Value.CountryName)))                       {                          objects.Markers.Remove(marker);                            GMapRoute route;                          if(tcpRoutes.TryGetValue(tcp.Key' out route))                          {                             routes.Routes.Remove(route);                          }                            lock(TcpStateNeedLocationInfo)                          {                             bool r = TcpStateNeedLocationInfo.Remove(tcp.Key);                             if(r)                             {                                Debug.WriteLine("TcpStateNeedLocationInfo: removed " + tcp.Key + " " + r);                             }                          }                       }                       else                       {                          marker.Position = new PointLatLng(tcp.Value.Latitude' tcp.Value.Longitude);                          if(!objects.Markers.Contains(marker))                          {                             objects.Markers.Add(marker);                          }                          UpdateMarkerTcpIpToolTip(marker' tcp.Value' string.Empty);                            if(TryTraceConnection)                          {                             // routes                             GMapRoute route;                             if(!this.tcpRoutes.TryGetValue(tcp.Key' out route))                             {                                lock(TraceRoutes)                                {                                   List<PingReply> tr;                                   if(TraceRoutes.TryGetValue(tcp.Key' out tr))                                   {                                      if(tr != null)                                      {                                         List<PointLatLng> points = new List<PointLatLng>();                                         foreach(var add in tr)                                         {                                            IpInfo info;                                              lock(TcpTracePoints)                                            {                                               if(TcpTracePoints.TryGetValue(add.Address.ToString()' out info))                                               {                                                  if(!string.IsNullOrEmpty(info.Ip))                                                  {                                                     points.Add(new PointLatLng(info.Latitude' info.Longitude));                                                  }                                               }                                            }                                         }                                           if(points.Count > 0)                                         {                                            route = new GMapRoute(points' tcp.Value.CountryName);                                              route.Stroke = new Pen(GetRandomColor());                                            route.Stroke.Width = 4;                                            route.Stroke.DashStyle = System.Drawing.Drawing2D.DashStyle.DashDot;                                              route.Stroke.StartCap = LineCap.NoAnchor;                                            route.Stroke.EndCap = System.Drawing.Drawing2D.LineCap.ArrowAnchor;                                            route.Stroke.LineJoin = LineJoin.Round;                                              routes.Routes.Add(route);                                            tcpRoutes[tcp.Key] = route;                                         }                                      }                                   }                                }                             }                             else                             {                                if(!routes.Routes.Contains(route))                                {                                   routes.Routes.Add(route);                                }                             }                          }                       }                    }                 }                   // update grid data                 if(panelMenu.Expand && xPanderPanelLive.Expand)                 {                    bool empty = CountryStatusView.Count == 0;                      if(!ComparerIpStatus.SortOnlyCountryName)                    {                       CountryStatusView.Clear();                    }                      foreach(var c in CountryStatus)                    {                       IpStatus s = new IpStatus();                       {                          s.CountryName = c.Key;                          s.ConnectionsCount = c.Value;                       }                         if(ComparerIpStatus.SortOnlyCountryName)                       {                          int idx = CountryStatusView.FindIndex(p => p.CountryName == c.Key);                          if(idx >= 0)                          {                             CountryStatusView[idx] = s;                          }                       }                       else                       {                          CountryStatusView.Add(s);                       }                    }                      CountryStatusView.Sort(ComparerIpStatus);                      GridConnections.RowCount = CountryStatusView.Count;                    GridConnections.Refresh();                      if(empty)                    {                       GridConnections.ClearSelection();                    }                 }              }                MainMap.Refresh();           }           catch(Exception ex)           {              Debug.WriteLine(ex.ToString());           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,GetRandomColor,The following statement contains a magic number: byte r = Convert.ToByte(rnd.Next(0' 111));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,GetRandomColor,The following statement contains a magic number: byte g = Convert.ToByte(rnd.Next(0' 111));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,GetRandomColor,The following statement contains a magic number: byte b = Convert.ToByte(rnd.Next(0' 111));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,GetRandomColor,The following statement contains a magic number: return Color.FromArgb(144' r' g' b);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,AddGpsMobileLogRoutes,The following statement contains a magic number: try           {              MainMap.HoldInvalidation = true;                DateTime? date = null;              DateTime? dateEnd = null;                if(MobileLogFrom.Checked)              {                 date = MobileLogFrom.Value.ToUniversalTime();              }                if(MobileLogTo.Checked)              {                 dateEnd = MobileLogTo.Value.ToUniversalTime();              }                var log = Stuff.GetRoutesFromMobileLog(file' date' dateEnd' 10);                if(routes != null)              {                 List<PointLatLng> track = new List<PointLatLng>();                   var sessions = new List<List<GpsLog>>(log);                   PointLatLng lastPoint = PointLatLng.Empty;                   foreach(var session in sessions)                 {                    // connect to last session with direct line                    if(!lastPoint.IsEmpty && session.Count > 0)                    {                       track.Clear();                       track.Add(lastPoint);                       track.Add(session[0].Position);                         GMapRoute grl = new GMapRoute(track' "");                       grl.Stroke = new Pen(GMapRoute.DefaultStroke.Brush);                       grl.Stroke.Color = Color.Red;                       grl.Stroke.Width = 2.0f;                       routes.Routes.Add(grl);                    }                      track.Clear();                      foreach(var point in session)                    {                       track.Add(point.Position);                                          }                      if(track.Count > 0)                    {                       lastPoint = track[track.Count - 1];                          GMapRoute gr = new GMapRoute(track' "");                       routes.Routes.Add(gr);                    }                    else                    {                       lastPoint = PointLatLng.Empty;                    }                   }                   sessions.Clear();                 sessions = null;                   track.Clear();                 track = null;              }                MainMap.Refresh();           }           catch(Exception ex)           {              Debug.WriteLine("AddGpsMobileLogRoutes: " + ex.ToString());           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,OnTileCacheComplete,The following statement contains a magic number: if(!IsDisposed)           {              MethodInvoker m = delegate              {                 textBoxCacheSize.Text = string.Format(CultureInfo.InvariantCulture' "{0} db in {1:00} MB"' db' size / (1024.0 * 1024.0));                 textBoxCacheStatus.Text = "all tiles saved!";              };                if (!IsDisposed)              {                 try                 {                      Invoke(m);                 }                 catch(Exception)                 {                 }              }           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,OnTileCacheComplete,The following statement contains a magic number: if(!IsDisposed)           {              MethodInvoker m = delegate              {                 textBoxCacheSize.Text = string.Format(CultureInfo.InvariantCulture' "{0} db in {1:00} MB"' db' size / (1024.0 * 1024.0));                 textBoxCacheStatus.Text = "all tiles saved!";              };                if (!IsDisposed)              {                 try                 {                      Invoke(m);                 }                 catch(Exception)                 {                 }              }           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,MainMap_OnMapTypeChanged,The following statement contains a magic number: trackBar1.Minimum = MainMap.MinZoom * 100;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,MainMap_OnMapTypeChanged,The following statement contains a magic number: trackBar1.Maximum = MainMap.MaxZoom * 100;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,MainMap_OnMapZoomChanged,The following statement contains a magic number: trackBar1.Value = (int) (MainMap.Zoom * 100.0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,MainForm_Load,The following statement contains a magic number: trackBar1.Value = (int) MainMap.Zoom * 100;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,trackBar1_ValueChanged,The following statement contains a magic number: MainMap.Zoom = trackBar1.Value / 100.0;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,button11_Click,The following statement contains a magic number: if(!area.IsEmpty)           {              for(int i = (int) MainMap.Zoom; i <= MainMap.MaxZoom; i++)              {                 DialogResult res = MessageBox.Show("Ready ripp at Zoom = " + i + " ?"' "GMap.NET"' MessageBoxButtons.YesNoCancel);                   if(res == DialogResult.Yes)                 {                    using(TilePrefetcher obj = new TilePrefetcher())                    {                       obj.Overlay = objects; // set overlay if you want to see cache progress on the map                         obj.Shuffle = MainMap.Manager.Mode != AccessMode.CacheOnly;                         obj.Owner = this;                       obj.ShowCompleteMessage = true;                       obj.Start(area' i' MainMap.MapProvider' MainMap.Manager.Mode == AccessMode.CacheOnly ? 0 : 100' MainMap.Manager.Mode == AccessMode.CacheOnly ? 0 : 1);                    }                 }                 else if(res == DialogResult.No)                 {                    continue;                 }                 else if(res == DialogResult.Cancel)                 {                    break;                 }              }           }           else           {              MessageBox.Show("Select map area holding ALT"' "GMap.NET"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,MainForm_KeyUp,The following statement contains a magic number: int offset = -22;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,MainForm_KeyPress,The following statement contains a magic number: if(MainMap.Focused)           {              if(e.KeyChar == '+')              {                 MainMap.Zoom = ((int) MainMap.Zoom) + 1;              }              else if(e.KeyChar == '-')              {                 MainMap.Zoom = ((int) (MainMap.Zoom + 0.99)) - 1;              }              else if(e.KeyChar == 'a')              {                 MainMap.Bearing--;              }              else if(e.KeyChar == 'z')              {                 MainMap.Bearing++;              }           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,buttonZoomDown_Click,The following statement contains a magic number: MainMap.Zoom = ((int) (MainMap.Zoom + 0.99)) - 1;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,RealTimeChanged,The following statement contains a magic number: if(radioButtonPerf.Checked)           {              timerPerf.Interval = 44;              timerPerf.Start();           }           else           {              // stop performance test              timerPerf.Stop();           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,RealTimeChanged,The following statement contains a magic number: if(radioButtonTcpIp.Checked)           {              GridConnections.Visible = true;              checkBoxTcpIpSnap.Visible = true;              checkBoxTraceRoute.Visible = true;              GridConnections.Refresh();                if(!connectionsWorker.IsBusy)              {                 MainMap.Zoom = 5;                   connectionsWorker.RunWorkerAsync();              }           }           else           {              CountryStatusView.Clear();              GridConnections.Visible = false;              checkBoxTcpIpSnap.Visible = false;              checkBoxTraceRoute.Visible = false;                if(connectionsWorker.IsBusy)              {                 connectionsWorker.CancelAsync();              }                if(ipInfoSearchWorker.IsBusy)              {                 ipInfoSearchWorker.CancelAsync();              }                if(iptracerWorker.IsBusy)              {                 iptracerWorker.CancelAsync();              }           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,buttonExportToGpx_Click,The following statement contains a magic number: try           {              using(SaveFileDialog sfd = new SaveFileDialog())              {                 sfd.Filter = "GPX (*.gpx)|*.gpx";                 sfd.FileName = "mobile gps log";                   DateTime? date = null;                 DateTime? dateEnd = null;                   if(MobileLogFrom.Checked)                 {                    date = MobileLogFrom.Value.ToUniversalTime();                      sfd.FileName += " from " + MobileLogFrom.Value.ToString("yyyy-MM-dd HH-mm");                 }                   if(MobileLogTo.Checked)                 {                    dateEnd = MobileLogTo.Value.ToUniversalTime();                      sfd.FileName += " to " + MobileLogTo.Value.ToString("yyyy-MM-dd HH-mm");                 }                   if(sfd.ShowDialog() == DialogResult.OK)                 {                    var log = Stuff.GetRoutesFromMobileLog(mobileGpsLog' date' dateEnd' 3.3);                    if(log != null)                    {                       if(MainMap.Manager.ExportGPX(log' sfd.FileName))                       {                          MessageBox.Show("GPX saved: " + sfd.FileName' "GMap.NET"' MessageBoxButtons.OK' MessageBoxIcon.Information);                       }                    }                 }              }           }           catch(Exception ex)           {              MessageBox.Show("GPX failed to save: " + ex.Message' "GMap.NET"' MessageBoxButtons.OK' MessageBoxIcon.Error);           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,button16_Click,The following statement contains a magic number: using(FileDialog dlg = new OpenFileDialog())           {              dlg.CheckPathExists = true;              dlg.CheckFileExists = false;              dlg.AddExtension = true;              dlg.DefaultExt = "gpx";              dlg.ValidateNames = true;              dlg.Title = "GMap.NET: open gpx log";              dlg.Filter = "gpx files (*.gpx)|*.gpx";              dlg.FilterIndex = 1;              dlg.RestoreDirectory = true;                if(dlg.ShowDialog() == DialogResult.OK)              {                 try                 {                    string gpx = File.ReadAllText(dlg.FileName);                      gpxType r = MainMap.Manager.DeserializeGPX(gpx);                    if(r != null)                    {                       if(r.trk.Length > 0)                       {                          foreach(var trk in r.trk)                          {                             List<PointLatLng> points = new List<PointLatLng>();                               foreach(var seg in trk.trkseg)                             {                                foreach(var p in seg.trkpt)                                {                                   points.Add(new PointLatLng((double) p.lat' (double) p.lon));                                }                             }                               GMapRoute rt = new GMapRoute(points' string.Empty);                             {                                rt.Stroke = new Pen(Color.FromArgb(144' Color.Red));                                rt.Stroke.Width = 5;                                rt.Stroke.DashStyle = System.Drawing.Drawing2D.DashStyle.DashDot;                             }                             routes.Routes.Add(rt);                          }                            MainMap.ZoomAndCenterRoutes(null);                       }                    }                 }                 catch(Exception ex)                 {                    Debug.WriteLine("GPX import: " + ex.ToString());                    MessageBox.Show("Error importing gpx: " + ex.Message' "GMap.NET"' MessageBoxButtons.OK' MessageBoxIcon.Warning);                 }              }           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,button16_Click,The following statement contains a magic number: using(FileDialog dlg = new OpenFileDialog())           {              dlg.CheckPathExists = true;              dlg.CheckFileExists = false;              dlg.AddExtension = true;              dlg.DefaultExt = "gpx";              dlg.ValidateNames = true;              dlg.Title = "GMap.NET: open gpx log";              dlg.Filter = "gpx files (*.gpx)|*.gpx";              dlg.FilterIndex = 1;              dlg.RestoreDirectory = true;                if(dlg.ShowDialog() == DialogResult.OK)              {                 try                 {                    string gpx = File.ReadAllText(dlg.FileName);                      gpxType r = MainMap.Manager.DeserializeGPX(gpx);                    if(r != null)                    {                       if(r.trk.Length > 0)                       {                          foreach(var trk in r.trk)                          {                             List<PointLatLng> points = new List<PointLatLng>();                               foreach(var seg in trk.trkseg)                             {                                foreach(var p in seg.trkpt)                                {                                   points.Add(new PointLatLng((double) p.lat' (double) p.lon));                                }                             }                               GMapRoute rt = new GMapRoute(points' string.Empty);                             {                                rt.Stroke = new Pen(Color.FromArgb(144' Color.Red));                                rt.Stroke.Width = 5;                                rt.Stroke.DashStyle = System.Drawing.Drawing2D.DashStyle.DashDot;                             }                             routes.Routes.Add(rt);                          }                            MainMap.ZoomAndCenterRoutes(null);                       }                    }                 }                 catch(Exception ex)                 {                    Debug.WriteLine("GPX import: " + ex.ToString());                    MessageBox.Show("Error importing gpx: " + ex.Message' "GMap.NET"' MessageBoxButtons.OK' MessageBoxIcon.Warning);                 }              }           }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,checkBoxTileHost_CheckedChanged,The following statement contains a magic number: if (checkBoxTileHost.Checked)            {                try                {                    MainMap.Manager.EnableTileHost(8844);                    TryExtractLeafletjs();                }                catch (Exception ex)                {                    MessageBox.Show("EnableTileHost: " + ex.Message' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);                }            }            else            {                MainMap.Manager.DisableTileHost();            }
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size(881' 818);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size(881' 818);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panel2.TabIndex = 41;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MainMap.LevelsKeepInMemmory = 5;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MainMap.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MainMap.MaxZoom = 17;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MainMap.MinZoom = 2;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MainMap.SelectedAreaFillColor = System.Drawing.Color.FromArgb(((int)(((byte)(33))))' ((int)(((byte)(65))))' ((int)(((byte)(105))))' ((int)(((byte)(225)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MainMap.SelectedAreaFillColor = System.Drawing.Color.FromArgb(((int)(((byte)(33))))' ((int)(((byte)(65))))' ((int)(((byte)(105))))' ((int)(((byte)(225)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MainMap.SelectedAreaFillColor = System.Drawing.Color.FromArgb(((int)(((byte)(33))))' ((int)(((byte)(65))))' ((int)(((byte)(105))))' ((int)(((byte)(225)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MainMap.SelectedAreaFillColor = System.Drawing.Color.FromArgb(((int)(((byte)(33))))' ((int)(((byte)(65))))' ((int)(((byte)(105))))' ((int)(((byte)(225)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MainMap.Size = new System.Drawing.Size(881' 818);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MainMap.Size = new System.Drawing.Size(881' 818);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panel4.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panel4.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panel4.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panel4.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panel4.Size = new System.Drawing.Size(1188' 818);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panel4.Size = new System.Drawing.Size(1188' 818);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panel4.TabIndex = 44;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.splitter1.Location = new System.Drawing.Point(881' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.splitter1.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.splitter1.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.splitter1.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.splitter1.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.splitter1.MinExtra = 390;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.splitter1.MinSize = 390;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.splitter1.Size = new System.Drawing.Size(3' 818);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.splitter1.Size = new System.Drawing.Size(3' 818);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.splitter1.TabIndex = 42;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelMenu.CaptionHeight = 27;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelMenu.CustomColors.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(184))))' ((int)(((byte)(184))))' ((int)(((byte)(184)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelMenu.CustomColors.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(184))))' ((int)(((byte)(184))))' ((int)(((byte)(184)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelMenu.CustomColors.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(184))))' ((int)(((byte)(184))))' ((int)(((byte)(184)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelMenu.CustomColors.CaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelMenu.CustomColors.CaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelMenu.CustomColors.CaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelMenu.CustomColors.CaptionGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelMenu.CustomColors.CaptionGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelMenu.CustomColors.CaptionGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelMenu.CustomColors.CaptionSelectedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelMenu.CustomColors.CaptionSelectedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelMenu.CustomColors.CaptionSelectedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelMenu.CustomColors.CaptionSelectedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelMenu.CustomColors.CaptionSelectedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelMenu.CustomColors.CaptionSelectedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelMenu.CustomColors.ContentGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelMenu.CustomColors.ContentGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelMenu.CustomColors.ContentGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelMenu.Location = new System.Drawing.Point(884' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelMenu.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelMenu.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelMenu.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelMenu.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelMenu.MinimumSize = new System.Drawing.Size(27' 27);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelMenu.MinimumSize = new System.Drawing.Size(27' 27);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelMenu.Size = new System.Drawing.Size(304' 818);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelMenu.Size = new System.Drawing.Size(304' 818);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelMenu.TabIndex = 40;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelList1.Location = new System.Drawing.Point(0' 28);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelList1.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelList1.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelList1.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelList1.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelList1.Size = new System.Drawing.Size(304' 789);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelList1.Size = new System.Drawing.Size(304' 789);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.CustomColors.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(184))))' ((int)(((byte)(184))))' ((int)(((byte)(184)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.CustomColors.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(184))))' ((int)(((byte)(184))))' ((int)(((byte)(184)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.CustomColors.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(184))))' ((int)(((byte)(184))))' ((int)(((byte)(184)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.CustomColors.CaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.CustomColors.CaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.CustomColors.CaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.CustomColors.CaptionGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.CustomColors.CaptionGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.CustomColors.CaptionGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.CustomColors.CaptionPressedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.CustomColors.CaptionPressedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.CustomColors.CaptionPressedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.CustomColors.CaptionPressedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.CustomColors.CaptionPressedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.CustomColors.CaptionPressedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.CustomColors.CaptionPressedGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.CustomColors.CaptionPressedGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.CustomColors.CaptionPressedGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.CustomColors.CaptionSelectedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.CustomColors.CaptionSelectedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.CustomColors.CaptionSelectedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.CustomColors.CaptionSelectedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.CustomColors.CaptionSelectedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.CustomColors.CaptionSelectedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.CustomColors.CaptionSelectedGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.CustomColors.CaptionSelectedGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.CustomColors.CaptionSelectedGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.CustomColors.FlatCaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.CustomColors.FlatCaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.CustomColors.FlatCaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.CustomColors.FlatCaptionGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.CustomColors.FlatCaptionGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.CustomColors.FlatCaptionGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.Size = new System.Drawing.Size(304' 714);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelMain.Size = new System.Drawing.Size(304' 714);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.ColumnCount = 2;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Location = new System.Drawing.Point(1' 25);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Size = new System.Drawing.Size(302' 689);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Size = new System.Drawing.Size(302' 689);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.TabIndex = 38;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Controls.Add(this.groupBox8' 0' 3);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Controls.Add(this.groupBox7' 0' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Location = new System.Drawing.Point(64' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Margin = new System.Windows.Forms.Padding(0' 0' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Margin = new System.Windows.Forms.Padding(0' 0' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.RowCount = 5;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Size = new System.Drawing.Size(235' 687);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Size = new System.Drawing.Size(235' 687);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.TabIndex = 30;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox8.Location = new System.Drawing.Point(4' 557);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox8.Location = new System.Drawing.Point(4' 557);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox8.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox8.Padding = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox8.Size = new System.Drawing.Size(227' 91);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox8.Size = new System.Drawing.Size(227' 91);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox8.TabIndex = 37;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button7.Location = new System.Drawing.Point(8' 55);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button7.Location = new System.Drawing.Point(8' 55);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button7.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button7.Size = new System.Drawing.Size(109' 30);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button7.Size = new System.Drawing.Size(109' 30);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button7.TabIndex = 15;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxPlacemarkInfo.Location = new System.Drawing.Point(125' 23);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxPlacemarkInfo.Location = new System.Drawing.Point(125' 23);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxPlacemarkInfo.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxPlacemarkInfo.Size = new System.Drawing.Size(91' 21);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxPlacemarkInfo.Size = new System.Drawing.Size(91' 21);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxPlacemarkInfo.TabIndex = 14;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button5.Location = new System.Drawing.Point(125' 55);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button5.Location = new System.Drawing.Point(125' 55);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button5.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button5.Size = new System.Drawing.Size(84' 30);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button5.Size = new System.Drawing.Size(84' 30);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button5.TabIndex = 13;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button4.Location = new System.Drawing.Point(8' 18);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button4.Location = new System.Drawing.Point(8' 18);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button4.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button4.Size = new System.Drawing.Size(109' 30);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button4.Size = new System.Drawing.Size(109' 30);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button4.TabIndex = 12;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox7.Location = new System.Drawing.Point(4' 358);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox7.Location = new System.Drawing.Point(4' 358);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox7.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox7.Padding = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox7.Size = new System.Drawing.Size(227' 191);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox7.Size = new System.Drawing.Size(227' 191);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox7.TabIndex = 35;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonExportToGpx.Location = new System.Drawing.Point(165' 96);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonExportToGpx.Location = new System.Drawing.Point(165' 96);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonExportToGpx.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonExportToGpx.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonExportToGpx.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonExportToGpx.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonExportToGpx.Size = new System.Drawing.Size(49' 46);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonExportToGpx.Size = new System.Drawing.Size(49' 46);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonExportToGpx.TabIndex = 48;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MobileLogTo.Location = new System.Drawing.Point(12' 122);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MobileLogTo.Location = new System.Drawing.Point(12' 122);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MobileLogTo.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MobileLogTo.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MobileLogTo.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MobileLogTo.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MobileLogTo.Size = new System.Drawing.Size(145' 22);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MobileLogTo.Size = new System.Drawing.Size(145' 22);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MobileLogTo.TabIndex = 47;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(12' 158);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(12' 158);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(45' 17);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(45' 17);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 46;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button15.Location = new System.Drawing.Point(139' 153);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button15.Location = new System.Drawing.Point(139' 153);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button15.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button15.Size = new System.Drawing.Size(75' 30);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button15.Size = new System.Drawing.Size(75' 30);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button15.TabIndex = 45;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MobileLogFrom.Location = new System.Drawing.Point(12' 96);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MobileLogFrom.Location = new System.Drawing.Point(12' 96);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MobileLogFrom.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MobileLogFrom.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MobileLogFrom.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MobileLogFrom.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MobileLogFrom.Size = new System.Drawing.Size(145' 22);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MobileLogFrom.Size = new System.Drawing.Size(145' 22);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MobileLogFrom.TabIndex = 44;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MobileLogFrom.Value = new System.DateTime(2010' 5' 10' 15' 41' 0' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MobileLogFrom.Value = new System.DateTime(2010' 5' 10' 15' 41' 0' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MobileLogFrom.Value = new System.DateTime(2010' 5' 10' 15' 41' 0' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MobileLogFrom.Value = new System.DateTime(2010' 5' 10' 15' 41' 0' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MobileLogFrom.Value = new System.DateTime(2010' 5' 10' 15' 41' 0' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button14.Location = new System.Drawing.Point(117' 60);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button14.Location = new System.Drawing.Point(117' 60);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button14.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button14.Size = new System.Drawing.Size(97' 30);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button14.Size = new System.Drawing.Size(97' 30);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button14.TabIndex = 43;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonSetEnd.Location = new System.Drawing.Point(117' 23);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonSetEnd.Location = new System.Drawing.Point(117' 23);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonSetEnd.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonSetEnd.Size = new System.Drawing.Size(97' 30);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonSetEnd.Size = new System.Drawing.Size(97' 30);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonSetEnd.TabIndex = 42;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonSetStart.Location = new System.Drawing.Point(12' 23);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonSetStart.Location = new System.Drawing.Point(12' 23);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonSetStart.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonSetStart.Size = new System.Drawing.Size(97' 30);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonSetStart.Size = new System.Drawing.Size(97' 30);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonSetStart.TabIndex = 41;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button6.Location = new System.Drawing.Point(60' 153);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button6.Location = new System.Drawing.Point(60' 153);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button6.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button6.Size = new System.Drawing.Size(73' 30);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button6.Size = new System.Drawing.Size(73' 30);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button6.TabIndex = 34;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button3.Location = new System.Drawing.Point(12' 60);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button3.Location = new System.Drawing.Point(12' 60);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button3.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button3.Size = new System.Drawing.Size(97' 30);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button3.Size = new System.Drawing.Size(97' 30);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button3.TabIndex = 33;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox5.Location = new System.Drawing.Point(4' 170);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox5.Location = new System.Drawing.Point(4' 170);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox5.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox5.Padding = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox5.Size = new System.Drawing.Size(227' 180);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox5.Size = new System.Drawing.Size(227' 180);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox5.TabIndex = 31;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button16.Location = new System.Drawing.Point(123' 113);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button16.Location = new System.Drawing.Point(123' 113);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button16.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button16.Size = new System.Drawing.Size(92' 30);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button16.Size = new System.Drawing.Size(92' 30);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button16.TabIndex = 49;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button13.Location = new System.Drawing.Point(12' 144);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button13.Location = new System.Drawing.Point(12' 144);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button13.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button13.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button13.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button13.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button13.Size = new System.Drawing.Size(97' 30);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button13.Size = new System.Drawing.Size(97' 30);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button13.TabIndex = 41;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxDebug.Location = new System.Drawing.Point(139' 91);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxDebug.Location = new System.Drawing.Point(139' 91);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxDebug.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxDebug.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxDebug.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxDebug.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxDebug.Size = new System.Drawing.Size(57' 21);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxDebug.Size = new System.Drawing.Size(57' 21);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxDebug.TabIndex = 40;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button12.Location = new System.Drawing.Point(123' 144);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button12.Location = new System.Drawing.Point(123' 144);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button12.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button12.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button12.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button12.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button12.Size = new System.Drawing.Size(92' 30);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button12.Size = new System.Drawing.Size(92' 30);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button12.TabIndex = 39;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label8.Location = new System.Drawing.Point(176' 60);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label8.Location = new System.Drawing.Point(176' 60);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label8.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label8.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label8.Size = new System.Drawing.Size(43' 17);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label8.Size = new System.Drawing.Size(43' 17);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label8.TabIndex = 38;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxMode.Location = new System.Drawing.Point(11' 57);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxMode.Location = new System.Drawing.Point(11' 57);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxMode.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxMode.Size = new System.Drawing.Size(163' 24);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxMode.Size = new System.Drawing.Size(163' 24);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxMode.TabIndex = 37;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxCanDrag.Location = new System.Drawing.Point(12' 117);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxCanDrag.Location = new System.Drawing.Point(12' 117);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxCanDrag.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxCanDrag.Size = new System.Drawing.Size(92' 21);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxCanDrag.Size = new System.Drawing.Size(92' 21);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxCanDrag.TabIndex = 36;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxCurrentMarker.Location = new System.Drawing.Point(12' 90);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxCurrentMarker.Location = new System.Drawing.Point(12' 90);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxCurrentMarker.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxCurrentMarker.Size = new System.Drawing.Size(125' 21);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxCurrentMarker.Size = new System.Drawing.Size(125' 21);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxCurrentMarker.TabIndex = 35;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point(176' 27);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point(176' 27);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label7.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label7.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size(35' 17);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size(35' 17);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label7.TabIndex = 31;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxMapType.Location = new System.Drawing.Point(11' 23);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxMapType.Location = new System.Drawing.Point(11' 23);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxMapType.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxMapType.Size = new System.Drawing.Size(163' 24);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxMapType.Size = new System.Drawing.Size(163' 24);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxMapType.TabIndex = 9;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Location = new System.Drawing.Point(4' 4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Location = new System.Drawing.Point(4' 4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Padding = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Size = new System.Drawing.Size(227' 158);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Size = new System.Drawing.Size(227' 158);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.TabIndex = 28;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(176' 91);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(176' 91);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(36' 17);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(36' 17);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.TabIndex = 11;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxGeo.Location = new System.Drawing.Point(12' 87);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxGeo.Location = new System.Drawing.Point(12' 87);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxGeo.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxGeo.Size = new System.Drawing.Size(161' 22);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxGeo.Size = new System.Drawing.Size(161' 22);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxGeo.TabIndex = 10;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(113' 121);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(113' 121);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(99' 30);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(99' 30);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.TabIndex = 9;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button8.Location = new System.Drawing.Point(12' 121);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button8.Location = new System.Drawing.Point(12' 121);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button8.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button8.Size = new System.Drawing.Size(96' 30);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button8.Size = new System.Drawing.Size(96' 30);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button8.TabIndex = 8;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(176' 59);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(176' 59);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(27' 17);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(27' 17);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 3;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(176' 27);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(176' 27);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(23' 17);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(23' 17);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 2;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxLng.Location = new System.Drawing.Point(12' 55);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxLng.Location = new System.Drawing.Point(12' 55);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxLng.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxLng.Size = new System.Drawing.Size(161' 22);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxLng.Size = new System.Drawing.Size(161' 22);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxLat.Location = new System.Drawing.Point(12' 23);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxLat.Location = new System.Drawing.Point(12' 23);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxLat.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxLat.Size = new System.Drawing.Size(161' 22);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxLat.Size = new System.Drawing.Size(161' 22);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel6.Controls.Add(this.buttonZoomDown' 0' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel6.Location = new System.Drawing.Point(3' 3);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel6.Location = new System.Drawing.Point(3' 3);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel6.RowCount = 3;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel6.Size = new System.Drawing.Size(58' 683);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel6.Size = new System.Drawing.Size(58' 683);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel6.TabIndex = 31;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonZoomUp.Size = new System.Drawing.Size(58' 33);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonZoomUp.Size = new System.Drawing.Size(58' 33);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.trackBar1.Location = new System.Drawing.Point(0' 33);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.trackBar1.Maximum = 1700;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.trackBar1.Size = new System.Drawing.Size(58' 617);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.trackBar1.Size = new System.Drawing.Size(58' 617);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.trackBar1.TabIndex = 29;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.trackBar1.TickFrequency = 100;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.trackBar1.Value = 12;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonZoomDown.Location = new System.Drawing.Point(0' 650);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonZoomDown.Size = new System.Drawing.Size(58' 33);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonZoomDown.Size = new System.Drawing.Size(58' 33);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.CustomColors.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(184))))' ((int)(((byte)(184))))' ((int)(((byte)(184)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.CustomColors.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(184))))' ((int)(((byte)(184))))' ((int)(((byte)(184)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.CustomColors.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(184))))' ((int)(((byte)(184))))' ((int)(((byte)(184)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.CustomColors.CaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.CustomColors.CaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.CustomColors.CaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.CustomColors.CaptionGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.CustomColors.CaptionGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.CustomColors.CaptionGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.CustomColors.CaptionPressedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.CustomColors.CaptionPressedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.CustomColors.CaptionPressedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.CustomColors.CaptionPressedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.CustomColors.CaptionPressedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.CustomColors.CaptionPressedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.CustomColors.CaptionPressedGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.CustomColors.CaptionPressedGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.CustomColors.CaptionPressedGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.CustomColors.CaptionSelectedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.CustomColors.CaptionSelectedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.CustomColors.CaptionSelectedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.CustomColors.CaptionSelectedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.CustomColors.CaptionSelectedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.CustomColors.CaptionSelectedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.CustomColors.CaptionSelectedGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.CustomColors.CaptionSelectedGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.CustomColors.CaptionSelectedGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.CustomColors.FlatCaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.CustomColors.FlatCaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.CustomColors.FlatCaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.CustomColors.FlatCaptionGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.CustomColors.FlatCaptionGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.CustomColors.FlatCaptionGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.Size = new System.Drawing.Size(304' 25);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelCache.Size = new System.Drawing.Size(304' 25);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.ColumnCount = 3;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.textBoxCacheSize' 1' 12);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.textBoxCacheStatus' 1' 15);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.textBoxMemory' 1' 9);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.checkBoxUseRouteCache' 1' 17);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.button9' 1' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.button11' 1' 3);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.label10' 1' 8);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.button2' 1' 5);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.label13' 1' 14);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.label14' 1' 11);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.button17' 1' 6);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.checkBoxTileHost' 1' 19);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Location = new System.Drawing.Point(1' 25);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.RowCount = 21;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(302' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.TabIndex = 41;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxCacheSize.Location = new System.Drawing.Point(24' 300);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxCacheSize.Location = new System.Drawing.Point(24' 300);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxCacheSize.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxCacheSize.Size = new System.Drawing.Size(254' 34);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxCacheSize.Size = new System.Drawing.Size(254' 34);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxCacheSize.TabIndex = 49;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxCacheStatus.Location = new System.Drawing.Point(24' 379);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxCacheStatus.Location = new System.Drawing.Point(24' 379);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxCacheStatus.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxCacheStatus.Size = new System.Drawing.Size(254' 34);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxCacheStatus.Size = new System.Drawing.Size(254' 34);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxCacheStatus.TabIndex = 46;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button10.Location = new System.Drawing.Point(24' 24);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button10.Location = new System.Drawing.Point(24' 24);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button10.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button10.Size = new System.Drawing.Size(254' 25);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button10.Size = new System.Drawing.Size(254' 25);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button10.TabIndex = 5;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxMemory.Location = new System.Drawing.Point(24' 221);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxMemory.Location = new System.Drawing.Point(24' 221);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxMemory.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxMemory.Size = new System.Drawing.Size(254' 34);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxMemory.Size = new System.Drawing.Size(254' 34);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxMemory.TabIndex = 39;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxUseRouteCache.Location = new System.Drawing.Point(24' 441);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxUseRouteCache.Location = new System.Drawing.Point(24' 441);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxUseRouteCache.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxUseRouteCache.Size = new System.Drawing.Size(201' 21);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxUseRouteCache.Size = new System.Drawing.Size(201' 21);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxUseRouteCache.TabIndex = 2;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button9.Location = new System.Drawing.Point(24' 57);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button9.Location = new System.Drawing.Point(24' 57);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button9.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button9.Size = new System.Drawing.Size(254' 24);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button9.Size = new System.Drawing.Size(254' 24);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button9.TabIndex = 4;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button11.Location = new System.Drawing.Point(24' 89);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button11.Location = new System.Drawing.Point(24' 89);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button11.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button11.Size = new System.Drawing.Size(254' 25);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button11.Size = new System.Drawing.Size(254' 25);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button11.TabIndex = 38;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label10.Location = new System.Drawing.Point(24' 200);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label10.Location = new System.Drawing.Point(24' 200);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label10.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label10.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label10.Size = new System.Drawing.Size(147' 17);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label10.Size = new System.Drawing.Size(147' 17);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label10.TabIndex = 40;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button2.Location = new System.Drawing.Point(24' 122);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button2.Location = new System.Drawing.Point(24' 122);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button2.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button2.Size = new System.Drawing.Size(254' 25);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button2.Size = new System.Drawing.Size(254' 25);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button2.TabIndex = 43;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label13.Location = new System.Drawing.Point(24' 358);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label13.Location = new System.Drawing.Point(24' 358);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label13.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label13.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label13.Size = new System.Drawing.Size(121' 17);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label13.Size = new System.Drawing.Size(121' 17);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label13.TabIndex = 44;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label14.Location = new System.Drawing.Point(24' 279);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label14.Location = new System.Drawing.Point(24' 279);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label14.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label14.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label14.Size = new System.Drawing.Size(108' 17);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label14.Size = new System.Drawing.Size(108' 17);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label14.TabIndex = 47;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button17.Location = new System.Drawing.Point(23' 154);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button17.Location = new System.Drawing.Point(23' 154);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button17.Size = new System.Drawing.Size(256' 23);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button17.Size = new System.Drawing.Size(256' 23);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.button17.TabIndex = 50;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxTileHost.Location = new System.Drawing.Point(24' 490);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxTileHost.Location = new System.Drawing.Point(24' 490);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxTileHost.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxTileHost.Size = new System.Drawing.Size(222' 21);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxTileHost.Size = new System.Drawing.Size(222' 21);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxTileHost.TabIndex = 51;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.CustomColors.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(184))))' ((int)(((byte)(184))))' ((int)(((byte)(184)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.CustomColors.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(184))))' ((int)(((byte)(184))))' ((int)(((byte)(184)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.CustomColors.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(184))))' ((int)(((byte)(184))))' ((int)(((byte)(184)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.CustomColors.CaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.CustomColors.CaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.CustomColors.CaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.CustomColors.CaptionGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.CustomColors.CaptionGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.CustomColors.CaptionGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.CustomColors.CaptionPressedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.CustomColors.CaptionPressedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.CustomColors.CaptionPressedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.CustomColors.CaptionPressedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.CustomColors.CaptionPressedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.CustomColors.CaptionPressedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.CustomColors.CaptionPressedGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.CustomColors.CaptionPressedGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.CustomColors.CaptionPressedGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.CustomColors.CaptionSelectedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.CustomColors.CaptionSelectedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.CustomColors.CaptionSelectedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.CustomColors.CaptionSelectedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.CustomColors.CaptionSelectedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.CustomColors.CaptionSelectedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.CustomColors.CaptionSelectedGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.CustomColors.CaptionSelectedGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.CustomColors.CaptionSelectedGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.CustomColors.FlatCaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.CustomColors.FlatCaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.CustomColors.FlatCaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.CustomColors.FlatCaptionGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.CustomColors.FlatCaptionGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.CustomColors.FlatCaptionGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.Size = new System.Drawing.Size(304' 25);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.Size = new System.Drawing.Size(304' 25);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelInfo.TabIndex = 3;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.ColumnCount = 3;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Controls.Add(this.textBoxZoomCurrent' 1' 7);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Controls.Add(this.textBoxrouteCount' 1' 11);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Controls.Add(this.label12' 1' 10);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Controls.Add(this.label9' 1' 6);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Controls.Add(this.textBoxLngCurrent' 1' 4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Controls.Add(this.textBoxMarkerCount' 1' 9);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Controls.Add(this.label11' 1' 8);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Controls.Add(this.label4' 1' 3);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Controls.Add(this.textBoxLatCurrent' 1' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Location = new System.Drawing.Point(1' 25);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.RowCount = 13;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Size = new System.Drawing.Size(302' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.TabIndex = 14;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxZoomCurrent.Location = new System.Drawing.Point(24' 179);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxZoomCurrent.Location = new System.Drawing.Point(24' 179);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxZoomCurrent.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxZoomCurrent.Size = new System.Drawing.Size(254' 34);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxZoomCurrent.Size = new System.Drawing.Size(254' 34);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxZoomCurrent.TabIndex = 8;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxrouteCount.Location = new System.Drawing.Point(24' 297);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxrouteCount.Location = new System.Drawing.Point(24' 297);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxrouteCount.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxrouteCount.Size = new System.Drawing.Size(254' 34);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxrouteCount.Size = new System.Drawing.Size(254' 34);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxrouteCount.TabIndex = 12;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label12.Location = new System.Drawing.Point(24' 276);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label12.Location = new System.Drawing.Point(24' 276);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label12.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label12.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label12.Size = new System.Drawing.Size(52' 17);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label12.Size = new System.Drawing.Size(52' 17);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label12.TabIndex = 13;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new System.Drawing.Point(24' 158);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new System.Drawing.Point(24' 158);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label9.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label9.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size(46' 17);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size(46' 17);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label9.TabIndex = 9;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxLngCurrent.Location = new System.Drawing.Point(24' 100);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxLngCurrent.Location = new System.Drawing.Point(24' 100);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxLngCurrent.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxLngCurrent.Size = new System.Drawing.Size(254' 34);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxLngCurrent.Size = new System.Drawing.Size(254' 34);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxLngCurrent.TabIndex = 5;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxMarkerCount.Location = new System.Drawing.Point(24' 238);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxMarkerCount.Location = new System.Drawing.Point(24' 238);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxMarkerCount.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxMarkerCount.Size = new System.Drawing.Size(254' 34);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxMarkerCount.Size = new System.Drawing.Size(254' 34);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxMarkerCount.TabIndex = 10;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label11.Location = new System.Drawing.Point(24' 217);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label11.Location = new System.Drawing.Point(24' 217);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label11.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label11.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label11.Size = new System.Drawing.Size(63' 17);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label11.Size = new System.Drawing.Size(63' 17);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label11.TabIndex = 11;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(24' 79);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(24' 79);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(31' 17);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(31' 17);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.TabIndex = 7;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxLatCurrent.Location = new System.Drawing.Point(24' 41);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxLatCurrent.Location = new System.Drawing.Point(24' 41);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxLatCurrent.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxLatCurrent.Size = new System.Drawing.Size(254' 34);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxLatCurrent.Size = new System.Drawing.Size(254' 34);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxLatCurrent.TabIndex = 4;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(24' 20);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(24' 20);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(27' 17);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(27' 17);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.TabIndex = 6;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.CustomColors.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(184))))' ((int)(((byte)(184))))' ((int)(((byte)(184)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.CustomColors.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(184))))' ((int)(((byte)(184))))' ((int)(((byte)(184)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.CustomColors.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(184))))' ((int)(((byte)(184))))' ((int)(((byte)(184)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.CustomColors.CaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.CustomColors.CaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.CustomColors.CaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.CustomColors.CaptionGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.CustomColors.CaptionGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.CustomColors.CaptionGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.CustomColors.CaptionPressedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.CustomColors.CaptionPressedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.CustomColors.CaptionPressedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.CustomColors.CaptionPressedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.CustomColors.CaptionPressedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.CustomColors.CaptionPressedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.CustomColors.CaptionPressedGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.CustomColors.CaptionPressedGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.CustomColors.CaptionPressedGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.CustomColors.CaptionSelectedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.CustomColors.CaptionSelectedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.CustomColors.CaptionSelectedGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.CustomColors.CaptionSelectedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.CustomColors.CaptionSelectedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.CustomColors.CaptionSelectedGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.CustomColors.CaptionSelectedGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.CustomColors.CaptionSelectedGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.CustomColors.CaptionSelectedGradientMiddle = System.Drawing.Color.FromArgb(((int)(((byte)(179))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.CustomColors.FlatCaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.CustomColors.FlatCaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.CustomColors.FlatCaptionGradientBegin = System.Drawing.Color.FromArgb(((int)(((byte)(248))))' ((int)(((byte)(248))))' ((int)(((byte)(248)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.CustomColors.FlatCaptionGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.CustomColors.FlatCaptionGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.CustomColors.FlatCaptionGradientEnd = System.Drawing.Color.FromArgb(((int)(((byte)(252))))' ((int)(((byte)(252))))' ((int)(((byte)(252)))));
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.Padding = new System.Windows.Forms.Padding(0' 0' 0' 30);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.Size = new System.Drawing.Size(304' 25);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.Size = new System.Drawing.Size(304' 25);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPanderPanelLive.TabIndex = 2;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.ColumnCount = 3;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.Controls.Add(this.checkBoxTcpIpSnap' 1' 7);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.Controls.Add(this.GridConnections' 1' 6);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.Controls.Add(this.radioButtonFlight' 1' 3);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.Controls.Add(this.radioButtonPerf' 1' 4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.Controls.Add(this.radioButtonTcpIp' 1' 5);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.Controls.Add(this.checkBoxTraceRoute' 1' 8);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.Controls.Add(this.radioButtonVehicle' 1' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.Location = new System.Drawing.Point(1' 25);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.RowCount = 9;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.Size = new System.Drawing.Size(302' 0);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.TabIndex = 6;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonNone.Location = new System.Drawing.Point(24' 24);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonNone.Location = new System.Drawing.Point(24' 24);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonNone.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonNone.Size = new System.Drawing.Size(63' 21);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonNone.Size = new System.Drawing.Size(63' 21);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonNone.TabIndex = 2;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxTcpIpSnap.Location = new System.Drawing.Point(23' -47);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxTcpIpSnap.Location = new System.Drawing.Point(23' -47);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxTcpIpSnap.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxTcpIpSnap.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxTcpIpSnap.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxTcpIpSnap.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxTcpIpSnap.Size = new System.Drawing.Size(238' 21);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxTcpIpSnap.Size = new System.Drawing.Size(238' 21);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxTcpIpSnap.TabIndex = 4;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.GridConnections.Location = new System.Drawing.Point(23' 167);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.GridConnections.Location = new System.Drawing.Point(23' 167);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.GridConnections.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.GridConnections.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.GridConnections.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.GridConnections.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.GridConnections.RowTemplate.Height = 24;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.GridConnections.Size = new System.Drawing.Size(256' 1);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.GridConnections.TabIndex = 5;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonFlight.Location = new System.Drawing.Point(24' 82);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonFlight.Location = new System.Drawing.Point(24' 82);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonFlight.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonFlight.Size = new System.Drawing.Size(141' 21);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonFlight.Size = new System.Drawing.Size(141' 21);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonPerf.Location = new System.Drawing.Point(24' 111);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonPerf.Location = new System.Drawing.Point(24' 111);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonPerf.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonPerf.Size = new System.Drawing.Size(137' 21);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonPerf.Size = new System.Drawing.Size(137' 21);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonTcpIp.Location = new System.Drawing.Point(24' 140);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonTcpIp.Location = new System.Drawing.Point(24' 140);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonTcpIp.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonTcpIp.Size = new System.Drawing.Size(152' 21);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonTcpIp.Size = new System.Drawing.Size(152' 21);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonTcpIp.TabIndex = 3;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxTraceRoute.Location = new System.Drawing.Point(23' -22);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxTraceRoute.Location = new System.Drawing.Point(23' -22);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxTraceRoute.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxTraceRoute.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxTraceRoute.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxTraceRoute.Margin = new System.Windows.Forms.Padding(3' 2' 3' 2);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxTraceRoute.Size = new System.Drawing.Size(233' 21);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxTraceRoute.Size = new System.Drawing.Size(233' 21);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxTraceRoute.TabIndex = 6;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonVehicle.Location = new System.Drawing.Point(24' 53);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonVehicle.Location = new System.Drawing.Point(24' 53);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonVehicle.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonVehicle.Size = new System.Drawing.Size(114' 21);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonVehicle.Size = new System.Drawing.Size(114' 21);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonVehicle.TabIndex = 7;
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(1188' 818);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(1188' 818);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(733' 121);
Magic Number,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(733' 121);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,bg_DoWork,The following statement contains a magic number: if(!info.Area.IsEmpty)           {              string bigImage = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory) + Path.DirectorySeparatorChar + "GMap at zoom " + info.Zoom + " - " + info.Type + "-" + DateTime.Now.Ticks + ".jpg";              e.Result = bigImage;                // current area              GPoint topLeftPx = info.Type.Projection.FromLatLngToPixel(info.Area.LocationTopLeft' info.Zoom);              GPoint rightButtomPx = info.Type.Projection.FromLatLngToPixel(info.Area.Bottom' info.Area.Right' info.Zoom);              GPoint pxDelta = new GPoint(rightButtomPx.X - topLeftPx.X' rightButtomPx.Y - topLeftPx.Y);              GMap.NET.GSize maxOfTiles = info.Type.Projection.GetTileMatrixMaxXY(info.Zoom);                int padding = info.MakeWorldFile || info.MakeKmz ? 0 : 22;              {                 using(Bitmap bmpDestination = new Bitmap((int)(pxDelta.X + padding * 2)' (int)(pxDelta.Y + padding * 2)))                 {                    using(Graphics gfx = Graphics.FromImage(bmpDestination))                    {                       gfx.InterpolationMode = InterpolationMode.HighQualityBicubic;                       gfx.SmoothingMode = SmoothingMode.HighQuality;                         int i = 0;                         // get tiles & combine into one                       lock(tileArea)                       {                          foreach(var p in tileArea)                          {                             if(bg.CancellationPending)                             {                                e.Cancel = true;                                return;                             }                               int pc = (int)(((double)++i / tileArea.Count) * 100);                             bg.ReportProgress(pc' p);                               foreach(var tp in info.Type.Overlays)                             {                                Exception ex;                                GMapImage tile;                                  // tile number inversion(BottomLeft -> TopLeft) for pergo maps                                if(tp.InvertedAxisY)                                {                                   tile = GMaps.Instance.GetImageFrom(tp' new GPoint(p.X' maxOfTiles.Height - p.Y)' info.Zoom' out ex) as GMapImage;                                }                                else // ok                                {                                   tile = GMaps.Instance.GetImageFrom(tp' p' info.Zoom' out ex) as GMapImage;                                }                                  if(tile != null)                                {                                   using(tile)                                   {                                      long x = p.X * info.Type.Projection.TileSize.Width - topLeftPx.X + padding;                                      long y = p.Y * info.Type.Projection.TileSize.Width - topLeftPx.Y + padding;                                      {                                         gfx.DrawImage(tile.Img' x' y' info.Type.Projection.TileSize.Width' info.Type.Projection.TileSize.Height);                                      }                                   }                                }                             }                          }                       }                         // draw routes                       {                          foreach(GMapRoute r in Main.routes.Routes)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw polygons                       {                          foreach(GMapPolygon r in Main.polygons.Polygons)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      rp.CloseFigure();                                        gfx.FillPath(r.Fill' rp);                                        gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw markers                       {                          foreach(GMapMarker r in Main.objects.Markers)                          {                             if(r.IsVisible)                             {                                var pr = r.Position;                                GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                  px.Offset(padding' padding);                                px.Offset(-topLeftPx.X' -topLeftPx.Y);                                px.Offset(r.Offset.X' r.Offset.Y);                                  gfx.ResetTransform();                                gfx.TranslateTransform(-r.LocalPosition.X' -r.LocalPosition.Y);                                gfx.TranslateTransform((int)px.X' (int)px.Y);                                  r.OnRender(gfx);                             }                          }                            // tooltips above                          foreach(GMapMarker m in Main.objects.Markers)                          {                             if(m.IsVisible && m.ToolTip != null && m.IsVisible)                             {                                if(!string.IsNullOrEmpty(m.ToolTipText))                                {                                   var pr = m.Position;                                   GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                     px.Offset(padding' padding);                                   px.Offset(-topLeftPx.X' -topLeftPx.Y);                                   px.Offset(m.Offset.X' m.Offset.Y);                                     gfx.ResetTransform();                                   gfx.TranslateTransform(-m.LocalPosition.X' -m.LocalPosition.Y);                                   gfx.TranslateTransform((int)px.X' (int)px.Y);                                     m.ToolTip.OnRender(gfx);                                }                             }                          }                          gfx.ResetTransform();                       }                         // draw info                       if(!info.MakeWorldFile)                       {                          System.Drawing.Rectangle rect = new System.Drawing.Rectangle();                          {                             rect.Location = new System.Drawing.Point(padding' padding);                             rect.Size = new System.Drawing.Size((int)pxDelta.X' (int)pxDelta.Y);                          }                            using(Font f = new Font(FontFamily.GenericSansSerif' 9' FontStyle.Bold))                          {                             // draw bounds & coordinates                             using(Pen p = new Pen(Brushes.DimGray' 3))                             {                                p.DashStyle = System.Drawing.Drawing2D.DashStyle.DashDot;                                  gfx.DrawRectangle(p' rect);                                  string topleft = info.Area.LocationTopLeft.ToString();                                SizeF s = gfx.MeasureString(topleft' f);                                  gfx.DrawString(topleft' f' p.Brush' rect.X + s.Height / 2' rect.Y + s.Height / 2);                                  string rightBottom = new PointLatLng(info.Area.Bottom' info.Area.Right).ToString();                                SizeF s2 = gfx.MeasureString(rightBottom' f);                                  gfx.DrawString(rightBottom' f' p.Brush' rect.Right - s2.Width - s2.Height / 2' rect.Bottom - s2.Height - s2.Height / 2);                             }                               // draw scale                             using(Pen p = new Pen(Brushes.Blue' 1))                             {                                double rez = info.Type.Projection.GetGroundResolution(info.Zoom' info.Area.Bottom);                                int px100 = (int)(100.0 / rez); // 100 meters                                int px1000 = (int)(1000.0 / rez); // 1km                                     gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px1000' 10);                                gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px100' 10);                                  string leftBottom = "scale: 100m | 1Km";                                SizeF s = gfx.MeasureString(leftBottom' f);                                gfx.DrawString(leftBottom' f' p.Brush' rect.X + 10' rect.Bottom - s.Height - 20);                             }                          }                       }                    }                      bmpDestination.Save(bigImage' ImageFormat.Jpeg);                 }              }                //The worldfile for the original image is:                //0.000067897543      // the horizontal size of a pixel in coordinate units (longitude degrees in this case);              //0.0000000              //0.0000000              //-0.0000554613012    // the comparable vertical pixel size in latitude degrees' negative because latitude decreases as you go from top to bottom in the image.              //-111.743323868834   // longitude of the pixel in the upper-left-hand corner.              //35.1254392635083    // latitude of the pixel in the upper-left-hand corner.                // generate world file              if(info.MakeWorldFile)              {                 string wf = bigImage + "w";                 using(StreamWriter world = File.CreateText(wf))                 {                    world.WriteLine("{0:0.000000000000}"' (info.Area.WidthLng / pxDelta.X));                    world.WriteLine("0.0000000");                    world.WriteLine("0.0000000");                    world.WriteLine("{0:0.000000000000}"' (-info.Area.HeightLat / pxDelta.Y));                    world.WriteLine("{0:0.000000000000}"' info.Area.Left);                    world.WriteLine("{0:0.000000000000}"' info.Area.Top);                    world.Close();                 }              }                if(info.MakeKmz)              {                 var kmzFile = Path.GetDirectoryName(bigImage) + Path.DirectorySeparatorChar + Path.GetFileNameWithoutExtension(bigImage) + ".kmz";                 e.Result = kmzFile;                   using(ZipStorer zip = ZipStorer.Create(kmzFile' "GMap.NET"))                 {                    zip.AddFile(ZipStorer.Compression.Store' bigImage' "files/map.jpg"' "map");                      using(var readme = new MemoryStream(                      Encoding.UTF8.GetBytes(                       string.Format(CultureInfo.InvariantCulture' @"<?xml version=""1.0"" encoding=""UTF-8""?>   <kml xmlns=""http://www.opengis.net/kml/2.2"" xmlns:gx=""http://www.google.com/kml/ext/2.2"" xmlns:kml=""http://www.opengis.net/kml/2.2"" xmlns:atom=""http://www.w3.org/2005/Atom"">  <GroundOverlay>  	<name>{8}</name>  	<LookAt>  		<longitude>{6}</longitude>  		<latitude>{7}</latitude>  		<altitude>0</altitude>  		<heading>0</heading>  		<tilt>0</tilt>  		<range>69327.55500845652</range>  	</LookAt>  	<color>91ffffff</color>  	<Icon>  		<href>files/map.jpg</href>  	</Icon>  	<gx:LatLonQuad>  		<coordinates>  			{0}'{1}'0 {2}'{3}'0 {4}'{5}'0 {6}'{7}'0   		</coordinates>  	</gx:LatLonQuad>  </GroundOverlay>  </kml>"' info.Area.Left' info.Area.Bottom'           info.Area.Right' info.Area.Bottom'           info.Area.Right' info.Area.Top'           info.Area.Left' info.Area.Top'           kmzFile))))                    {                         zip.AddStream(ZipStorer.Compression.Store' "doc.kml"' readme' DateTime.Now' "kml");                       zip.Close();                    }                 }              }           }
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,bg_DoWork,The following statement contains a magic number: if(!info.Area.IsEmpty)           {              string bigImage = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory) + Path.DirectorySeparatorChar + "GMap at zoom " + info.Zoom + " - " + info.Type + "-" + DateTime.Now.Ticks + ".jpg";              e.Result = bigImage;                // current area              GPoint topLeftPx = info.Type.Projection.FromLatLngToPixel(info.Area.LocationTopLeft' info.Zoom);              GPoint rightButtomPx = info.Type.Projection.FromLatLngToPixel(info.Area.Bottom' info.Area.Right' info.Zoom);              GPoint pxDelta = new GPoint(rightButtomPx.X - topLeftPx.X' rightButtomPx.Y - topLeftPx.Y);              GMap.NET.GSize maxOfTiles = info.Type.Projection.GetTileMatrixMaxXY(info.Zoom);                int padding = info.MakeWorldFile || info.MakeKmz ? 0 : 22;              {                 using(Bitmap bmpDestination = new Bitmap((int)(pxDelta.X + padding * 2)' (int)(pxDelta.Y + padding * 2)))                 {                    using(Graphics gfx = Graphics.FromImage(bmpDestination))                    {                       gfx.InterpolationMode = InterpolationMode.HighQualityBicubic;                       gfx.SmoothingMode = SmoothingMode.HighQuality;                         int i = 0;                         // get tiles & combine into one                       lock(tileArea)                       {                          foreach(var p in tileArea)                          {                             if(bg.CancellationPending)                             {                                e.Cancel = true;                                return;                             }                               int pc = (int)(((double)++i / tileArea.Count) * 100);                             bg.ReportProgress(pc' p);                               foreach(var tp in info.Type.Overlays)                             {                                Exception ex;                                GMapImage tile;                                  // tile number inversion(BottomLeft -> TopLeft) for pergo maps                                if(tp.InvertedAxisY)                                {                                   tile = GMaps.Instance.GetImageFrom(tp' new GPoint(p.X' maxOfTiles.Height - p.Y)' info.Zoom' out ex) as GMapImage;                                }                                else // ok                                {                                   tile = GMaps.Instance.GetImageFrom(tp' p' info.Zoom' out ex) as GMapImage;                                }                                  if(tile != null)                                {                                   using(tile)                                   {                                      long x = p.X * info.Type.Projection.TileSize.Width - topLeftPx.X + padding;                                      long y = p.Y * info.Type.Projection.TileSize.Width - topLeftPx.Y + padding;                                      {                                         gfx.DrawImage(tile.Img' x' y' info.Type.Projection.TileSize.Width' info.Type.Projection.TileSize.Height);                                      }                                   }                                }                             }                          }                       }                         // draw routes                       {                          foreach(GMapRoute r in Main.routes.Routes)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw polygons                       {                          foreach(GMapPolygon r in Main.polygons.Polygons)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      rp.CloseFigure();                                        gfx.FillPath(r.Fill' rp);                                        gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw markers                       {                          foreach(GMapMarker r in Main.objects.Markers)                          {                             if(r.IsVisible)                             {                                var pr = r.Position;                                GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                  px.Offset(padding' padding);                                px.Offset(-topLeftPx.X' -topLeftPx.Y);                                px.Offset(r.Offset.X' r.Offset.Y);                                  gfx.ResetTransform();                                gfx.TranslateTransform(-r.LocalPosition.X' -r.LocalPosition.Y);                                gfx.TranslateTransform((int)px.X' (int)px.Y);                                  r.OnRender(gfx);                             }                          }                            // tooltips above                          foreach(GMapMarker m in Main.objects.Markers)                          {                             if(m.IsVisible && m.ToolTip != null && m.IsVisible)                             {                                if(!string.IsNullOrEmpty(m.ToolTipText))                                {                                   var pr = m.Position;                                   GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                     px.Offset(padding' padding);                                   px.Offset(-topLeftPx.X' -topLeftPx.Y);                                   px.Offset(m.Offset.X' m.Offset.Y);                                     gfx.ResetTransform();                                   gfx.TranslateTransform(-m.LocalPosition.X' -m.LocalPosition.Y);                                   gfx.TranslateTransform((int)px.X' (int)px.Y);                                     m.ToolTip.OnRender(gfx);                                }                             }                          }                          gfx.ResetTransform();                       }                         // draw info                       if(!info.MakeWorldFile)                       {                          System.Drawing.Rectangle rect = new System.Drawing.Rectangle();                          {                             rect.Location = new System.Drawing.Point(padding' padding);                             rect.Size = new System.Drawing.Size((int)pxDelta.X' (int)pxDelta.Y);                          }                            using(Font f = new Font(FontFamily.GenericSansSerif' 9' FontStyle.Bold))                          {                             // draw bounds & coordinates                             using(Pen p = new Pen(Brushes.DimGray' 3))                             {                                p.DashStyle = System.Drawing.Drawing2D.DashStyle.DashDot;                                  gfx.DrawRectangle(p' rect);                                  string topleft = info.Area.LocationTopLeft.ToString();                                SizeF s = gfx.MeasureString(topleft' f);                                  gfx.DrawString(topleft' f' p.Brush' rect.X + s.Height / 2' rect.Y + s.Height / 2);                                  string rightBottom = new PointLatLng(info.Area.Bottom' info.Area.Right).ToString();                                SizeF s2 = gfx.MeasureString(rightBottom' f);                                  gfx.DrawString(rightBottom' f' p.Brush' rect.Right - s2.Width - s2.Height / 2' rect.Bottom - s2.Height - s2.Height / 2);                             }                               // draw scale                             using(Pen p = new Pen(Brushes.Blue' 1))                             {                                double rez = info.Type.Projection.GetGroundResolution(info.Zoom' info.Area.Bottom);                                int px100 = (int)(100.0 / rez); // 100 meters                                int px1000 = (int)(1000.0 / rez); // 1km                                     gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px1000' 10);                                gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px100' 10);                                  string leftBottom = "scale: 100m | 1Km";                                SizeF s = gfx.MeasureString(leftBottom' f);                                gfx.DrawString(leftBottom' f' p.Brush' rect.X + 10' rect.Bottom - s.Height - 20);                             }                          }                       }                    }                      bmpDestination.Save(bigImage' ImageFormat.Jpeg);                 }              }                //The worldfile for the original image is:                //0.000067897543      // the horizontal size of a pixel in coordinate units (longitude degrees in this case);              //0.0000000              //0.0000000              //-0.0000554613012    // the comparable vertical pixel size in latitude degrees' negative because latitude decreases as you go from top to bottom in the image.              //-111.743323868834   // longitude of the pixel in the upper-left-hand corner.              //35.1254392635083    // latitude of the pixel in the upper-left-hand corner.                // generate world file              if(info.MakeWorldFile)              {                 string wf = bigImage + "w";                 using(StreamWriter world = File.CreateText(wf))                 {                    world.WriteLine("{0:0.000000000000}"' (info.Area.WidthLng / pxDelta.X));                    world.WriteLine("0.0000000");                    world.WriteLine("0.0000000");                    world.WriteLine("{0:0.000000000000}"' (-info.Area.HeightLat / pxDelta.Y));                    world.WriteLine("{0:0.000000000000}"' info.Area.Left);                    world.WriteLine("{0:0.000000000000}"' info.Area.Top);                    world.Close();                 }              }                if(info.MakeKmz)              {                 var kmzFile = Path.GetDirectoryName(bigImage) + Path.DirectorySeparatorChar + Path.GetFileNameWithoutExtension(bigImage) + ".kmz";                 e.Result = kmzFile;                   using(ZipStorer zip = ZipStorer.Create(kmzFile' "GMap.NET"))                 {                    zip.AddFile(ZipStorer.Compression.Store' bigImage' "files/map.jpg"' "map");                      using(var readme = new MemoryStream(                      Encoding.UTF8.GetBytes(                       string.Format(CultureInfo.InvariantCulture' @"<?xml version=""1.0"" encoding=""UTF-8""?>   <kml xmlns=""http://www.opengis.net/kml/2.2"" xmlns:gx=""http://www.google.com/kml/ext/2.2"" xmlns:kml=""http://www.opengis.net/kml/2.2"" xmlns:atom=""http://www.w3.org/2005/Atom"">  <GroundOverlay>  	<name>{8}</name>  	<LookAt>  		<longitude>{6}</longitude>  		<latitude>{7}</latitude>  		<altitude>0</altitude>  		<heading>0</heading>  		<tilt>0</tilt>  		<range>69327.55500845652</range>  	</LookAt>  	<color>91ffffff</color>  	<Icon>  		<href>files/map.jpg</href>  	</Icon>  	<gx:LatLonQuad>  		<coordinates>  			{0}'{1}'0 {2}'{3}'0 {4}'{5}'0 {6}'{7}'0   		</coordinates>  	</gx:LatLonQuad>  </GroundOverlay>  </kml>"' info.Area.Left' info.Area.Bottom'           info.Area.Right' info.Area.Bottom'           info.Area.Right' info.Area.Top'           info.Area.Left' info.Area.Top'           kmzFile))))                    {                         zip.AddStream(ZipStorer.Compression.Store' "doc.kml"' readme' DateTime.Now' "kml");                       zip.Close();                    }                 }              }           }
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,bg_DoWork,The following statement contains a magic number: if(!info.Area.IsEmpty)           {              string bigImage = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory) + Path.DirectorySeparatorChar + "GMap at zoom " + info.Zoom + " - " + info.Type + "-" + DateTime.Now.Ticks + ".jpg";              e.Result = bigImage;                // current area              GPoint topLeftPx = info.Type.Projection.FromLatLngToPixel(info.Area.LocationTopLeft' info.Zoom);              GPoint rightButtomPx = info.Type.Projection.FromLatLngToPixel(info.Area.Bottom' info.Area.Right' info.Zoom);              GPoint pxDelta = new GPoint(rightButtomPx.X - topLeftPx.X' rightButtomPx.Y - topLeftPx.Y);              GMap.NET.GSize maxOfTiles = info.Type.Projection.GetTileMatrixMaxXY(info.Zoom);                int padding = info.MakeWorldFile || info.MakeKmz ? 0 : 22;              {                 using(Bitmap bmpDestination = new Bitmap((int)(pxDelta.X + padding * 2)' (int)(pxDelta.Y + padding * 2)))                 {                    using(Graphics gfx = Graphics.FromImage(bmpDestination))                    {                       gfx.InterpolationMode = InterpolationMode.HighQualityBicubic;                       gfx.SmoothingMode = SmoothingMode.HighQuality;                         int i = 0;                         // get tiles & combine into one                       lock(tileArea)                       {                          foreach(var p in tileArea)                          {                             if(bg.CancellationPending)                             {                                e.Cancel = true;                                return;                             }                               int pc = (int)(((double)++i / tileArea.Count) * 100);                             bg.ReportProgress(pc' p);                               foreach(var tp in info.Type.Overlays)                             {                                Exception ex;                                GMapImage tile;                                  // tile number inversion(BottomLeft -> TopLeft) for pergo maps                                if(tp.InvertedAxisY)                                {                                   tile = GMaps.Instance.GetImageFrom(tp' new GPoint(p.X' maxOfTiles.Height - p.Y)' info.Zoom' out ex) as GMapImage;                                }                                else // ok                                {                                   tile = GMaps.Instance.GetImageFrom(tp' p' info.Zoom' out ex) as GMapImage;                                }                                  if(tile != null)                                {                                   using(tile)                                   {                                      long x = p.X * info.Type.Projection.TileSize.Width - topLeftPx.X + padding;                                      long y = p.Y * info.Type.Projection.TileSize.Width - topLeftPx.Y + padding;                                      {                                         gfx.DrawImage(tile.Img' x' y' info.Type.Projection.TileSize.Width' info.Type.Projection.TileSize.Height);                                      }                                   }                                }                             }                          }                       }                         // draw routes                       {                          foreach(GMapRoute r in Main.routes.Routes)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw polygons                       {                          foreach(GMapPolygon r in Main.polygons.Polygons)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      rp.CloseFigure();                                        gfx.FillPath(r.Fill' rp);                                        gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw markers                       {                          foreach(GMapMarker r in Main.objects.Markers)                          {                             if(r.IsVisible)                             {                                var pr = r.Position;                                GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                  px.Offset(padding' padding);                                px.Offset(-topLeftPx.X' -topLeftPx.Y);                                px.Offset(r.Offset.X' r.Offset.Y);                                  gfx.ResetTransform();                                gfx.TranslateTransform(-r.LocalPosition.X' -r.LocalPosition.Y);                                gfx.TranslateTransform((int)px.X' (int)px.Y);                                  r.OnRender(gfx);                             }                          }                            // tooltips above                          foreach(GMapMarker m in Main.objects.Markers)                          {                             if(m.IsVisible && m.ToolTip != null && m.IsVisible)                             {                                if(!string.IsNullOrEmpty(m.ToolTipText))                                {                                   var pr = m.Position;                                   GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                     px.Offset(padding' padding);                                   px.Offset(-topLeftPx.X' -topLeftPx.Y);                                   px.Offset(m.Offset.X' m.Offset.Y);                                     gfx.ResetTransform();                                   gfx.TranslateTransform(-m.LocalPosition.X' -m.LocalPosition.Y);                                   gfx.TranslateTransform((int)px.X' (int)px.Y);                                     m.ToolTip.OnRender(gfx);                                }                             }                          }                          gfx.ResetTransform();                       }                         // draw info                       if(!info.MakeWorldFile)                       {                          System.Drawing.Rectangle rect = new System.Drawing.Rectangle();                          {                             rect.Location = new System.Drawing.Point(padding' padding);                             rect.Size = new System.Drawing.Size((int)pxDelta.X' (int)pxDelta.Y);                          }                            using(Font f = new Font(FontFamily.GenericSansSerif' 9' FontStyle.Bold))                          {                             // draw bounds & coordinates                             using(Pen p = new Pen(Brushes.DimGray' 3))                             {                                p.DashStyle = System.Drawing.Drawing2D.DashStyle.DashDot;                                  gfx.DrawRectangle(p' rect);                                  string topleft = info.Area.LocationTopLeft.ToString();                                SizeF s = gfx.MeasureString(topleft' f);                                  gfx.DrawString(topleft' f' p.Brush' rect.X + s.Height / 2' rect.Y + s.Height / 2);                                  string rightBottom = new PointLatLng(info.Area.Bottom' info.Area.Right).ToString();                                SizeF s2 = gfx.MeasureString(rightBottom' f);                                  gfx.DrawString(rightBottom' f' p.Brush' rect.Right - s2.Width - s2.Height / 2' rect.Bottom - s2.Height - s2.Height / 2);                             }                               // draw scale                             using(Pen p = new Pen(Brushes.Blue' 1))                             {                                double rez = info.Type.Projection.GetGroundResolution(info.Zoom' info.Area.Bottom);                                int px100 = (int)(100.0 / rez); // 100 meters                                int px1000 = (int)(1000.0 / rez); // 1km                                     gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px1000' 10);                                gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px100' 10);                                  string leftBottom = "scale: 100m | 1Km";                                SizeF s = gfx.MeasureString(leftBottom' f);                                gfx.DrawString(leftBottom' f' p.Brush' rect.X + 10' rect.Bottom - s.Height - 20);                             }                          }                       }                    }                      bmpDestination.Save(bigImage' ImageFormat.Jpeg);                 }              }                //The worldfile for the original image is:                //0.000067897543      // the horizontal size of a pixel in coordinate units (longitude degrees in this case);              //0.0000000              //0.0000000              //-0.0000554613012    // the comparable vertical pixel size in latitude degrees' negative because latitude decreases as you go from top to bottom in the image.              //-111.743323868834   // longitude of the pixel in the upper-left-hand corner.              //35.1254392635083    // latitude of the pixel in the upper-left-hand corner.                // generate world file              if(info.MakeWorldFile)              {                 string wf = bigImage + "w";                 using(StreamWriter world = File.CreateText(wf))                 {                    world.WriteLine("{0:0.000000000000}"' (info.Area.WidthLng / pxDelta.X));                    world.WriteLine("0.0000000");                    world.WriteLine("0.0000000");                    world.WriteLine("{0:0.000000000000}"' (-info.Area.HeightLat / pxDelta.Y));                    world.WriteLine("{0:0.000000000000}"' info.Area.Left);                    world.WriteLine("{0:0.000000000000}"' info.Area.Top);                    world.Close();                 }              }                if(info.MakeKmz)              {                 var kmzFile = Path.GetDirectoryName(bigImage) + Path.DirectorySeparatorChar + Path.GetFileNameWithoutExtension(bigImage) + ".kmz";                 e.Result = kmzFile;                   using(ZipStorer zip = ZipStorer.Create(kmzFile' "GMap.NET"))                 {                    zip.AddFile(ZipStorer.Compression.Store' bigImage' "files/map.jpg"' "map");                      using(var readme = new MemoryStream(                      Encoding.UTF8.GetBytes(                       string.Format(CultureInfo.InvariantCulture' @"<?xml version=""1.0"" encoding=""UTF-8""?>   <kml xmlns=""http://www.opengis.net/kml/2.2"" xmlns:gx=""http://www.google.com/kml/ext/2.2"" xmlns:kml=""http://www.opengis.net/kml/2.2"" xmlns:atom=""http://www.w3.org/2005/Atom"">  <GroundOverlay>  	<name>{8}</name>  	<LookAt>  		<longitude>{6}</longitude>  		<latitude>{7}</latitude>  		<altitude>0</altitude>  		<heading>0</heading>  		<tilt>0</tilt>  		<range>69327.55500845652</range>  	</LookAt>  	<color>91ffffff</color>  	<Icon>  		<href>files/map.jpg</href>  	</Icon>  	<gx:LatLonQuad>  		<coordinates>  			{0}'{1}'0 {2}'{3}'0 {4}'{5}'0 {6}'{7}'0   		</coordinates>  	</gx:LatLonQuad>  </GroundOverlay>  </kml>"' info.Area.Left' info.Area.Bottom'           info.Area.Right' info.Area.Bottom'           info.Area.Right' info.Area.Top'           info.Area.Left' info.Area.Top'           kmzFile))))                    {                         zip.AddStream(ZipStorer.Compression.Store' "doc.kml"' readme' DateTime.Now' "kml");                       zip.Close();                    }                 }              }           }
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,bg_DoWork,The following statement contains a magic number: if(!info.Area.IsEmpty)           {              string bigImage = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory) + Path.DirectorySeparatorChar + "GMap at zoom " + info.Zoom + " - " + info.Type + "-" + DateTime.Now.Ticks + ".jpg";              e.Result = bigImage;                // current area              GPoint topLeftPx = info.Type.Projection.FromLatLngToPixel(info.Area.LocationTopLeft' info.Zoom);              GPoint rightButtomPx = info.Type.Projection.FromLatLngToPixel(info.Area.Bottom' info.Area.Right' info.Zoom);              GPoint pxDelta = new GPoint(rightButtomPx.X - topLeftPx.X' rightButtomPx.Y - topLeftPx.Y);              GMap.NET.GSize maxOfTiles = info.Type.Projection.GetTileMatrixMaxXY(info.Zoom);                int padding = info.MakeWorldFile || info.MakeKmz ? 0 : 22;              {                 using(Bitmap bmpDestination = new Bitmap((int)(pxDelta.X + padding * 2)' (int)(pxDelta.Y + padding * 2)))                 {                    using(Graphics gfx = Graphics.FromImage(bmpDestination))                    {                       gfx.InterpolationMode = InterpolationMode.HighQualityBicubic;                       gfx.SmoothingMode = SmoothingMode.HighQuality;                         int i = 0;                         // get tiles & combine into one                       lock(tileArea)                       {                          foreach(var p in tileArea)                          {                             if(bg.CancellationPending)                             {                                e.Cancel = true;                                return;                             }                               int pc = (int)(((double)++i / tileArea.Count) * 100);                             bg.ReportProgress(pc' p);                               foreach(var tp in info.Type.Overlays)                             {                                Exception ex;                                GMapImage tile;                                  // tile number inversion(BottomLeft -> TopLeft) for pergo maps                                if(tp.InvertedAxisY)                                {                                   tile = GMaps.Instance.GetImageFrom(tp' new GPoint(p.X' maxOfTiles.Height - p.Y)' info.Zoom' out ex) as GMapImage;                                }                                else // ok                                {                                   tile = GMaps.Instance.GetImageFrom(tp' p' info.Zoom' out ex) as GMapImage;                                }                                  if(tile != null)                                {                                   using(tile)                                   {                                      long x = p.X * info.Type.Projection.TileSize.Width - topLeftPx.X + padding;                                      long y = p.Y * info.Type.Projection.TileSize.Width - topLeftPx.Y + padding;                                      {                                         gfx.DrawImage(tile.Img' x' y' info.Type.Projection.TileSize.Width' info.Type.Projection.TileSize.Height);                                      }                                   }                                }                             }                          }                       }                         // draw routes                       {                          foreach(GMapRoute r in Main.routes.Routes)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw polygons                       {                          foreach(GMapPolygon r in Main.polygons.Polygons)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      rp.CloseFigure();                                        gfx.FillPath(r.Fill' rp);                                        gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw markers                       {                          foreach(GMapMarker r in Main.objects.Markers)                          {                             if(r.IsVisible)                             {                                var pr = r.Position;                                GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                  px.Offset(padding' padding);                                px.Offset(-topLeftPx.X' -topLeftPx.Y);                                px.Offset(r.Offset.X' r.Offset.Y);                                  gfx.ResetTransform();                                gfx.TranslateTransform(-r.LocalPosition.X' -r.LocalPosition.Y);                                gfx.TranslateTransform((int)px.X' (int)px.Y);                                  r.OnRender(gfx);                             }                          }                            // tooltips above                          foreach(GMapMarker m in Main.objects.Markers)                          {                             if(m.IsVisible && m.ToolTip != null && m.IsVisible)                             {                                if(!string.IsNullOrEmpty(m.ToolTipText))                                {                                   var pr = m.Position;                                   GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                     px.Offset(padding' padding);                                   px.Offset(-topLeftPx.X' -topLeftPx.Y);                                   px.Offset(m.Offset.X' m.Offset.Y);                                     gfx.ResetTransform();                                   gfx.TranslateTransform(-m.LocalPosition.X' -m.LocalPosition.Y);                                   gfx.TranslateTransform((int)px.X' (int)px.Y);                                     m.ToolTip.OnRender(gfx);                                }                             }                          }                          gfx.ResetTransform();                       }                         // draw info                       if(!info.MakeWorldFile)                       {                          System.Drawing.Rectangle rect = new System.Drawing.Rectangle();                          {                             rect.Location = new System.Drawing.Point(padding' padding);                             rect.Size = new System.Drawing.Size((int)pxDelta.X' (int)pxDelta.Y);                          }                            using(Font f = new Font(FontFamily.GenericSansSerif' 9' FontStyle.Bold))                          {                             // draw bounds & coordinates                             using(Pen p = new Pen(Brushes.DimGray' 3))                             {                                p.DashStyle = System.Drawing.Drawing2D.DashStyle.DashDot;                                  gfx.DrawRectangle(p' rect);                                  string topleft = info.Area.LocationTopLeft.ToString();                                SizeF s = gfx.MeasureString(topleft' f);                                  gfx.DrawString(topleft' f' p.Brush' rect.X + s.Height / 2' rect.Y + s.Height / 2);                                  string rightBottom = new PointLatLng(info.Area.Bottom' info.Area.Right).ToString();                                SizeF s2 = gfx.MeasureString(rightBottom' f);                                  gfx.DrawString(rightBottom' f' p.Brush' rect.Right - s2.Width - s2.Height / 2' rect.Bottom - s2.Height - s2.Height / 2);                             }                               // draw scale                             using(Pen p = new Pen(Brushes.Blue' 1))                             {                                double rez = info.Type.Projection.GetGroundResolution(info.Zoom' info.Area.Bottom);                                int px100 = (int)(100.0 / rez); // 100 meters                                int px1000 = (int)(1000.0 / rez); // 1km                                     gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px1000' 10);                                gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px100' 10);                                  string leftBottom = "scale: 100m | 1Km";                                SizeF s = gfx.MeasureString(leftBottom' f);                                gfx.DrawString(leftBottom' f' p.Brush' rect.X + 10' rect.Bottom - s.Height - 20);                             }                          }                       }                    }                      bmpDestination.Save(bigImage' ImageFormat.Jpeg);                 }              }                //The worldfile for the original image is:                //0.000067897543      // the horizontal size of a pixel in coordinate units (longitude degrees in this case);              //0.0000000              //0.0000000              //-0.0000554613012    // the comparable vertical pixel size in latitude degrees' negative because latitude decreases as you go from top to bottom in the image.              //-111.743323868834   // longitude of the pixel in the upper-left-hand corner.              //35.1254392635083    // latitude of the pixel in the upper-left-hand corner.                // generate world file              if(info.MakeWorldFile)              {                 string wf = bigImage + "w";                 using(StreamWriter world = File.CreateText(wf))                 {                    world.WriteLine("{0:0.000000000000}"' (info.Area.WidthLng / pxDelta.X));                    world.WriteLine("0.0000000");                    world.WriteLine("0.0000000");                    world.WriteLine("{0:0.000000000000}"' (-info.Area.HeightLat / pxDelta.Y));                    world.WriteLine("{0:0.000000000000}"' info.Area.Left);                    world.WriteLine("{0:0.000000000000}"' info.Area.Top);                    world.Close();                 }              }                if(info.MakeKmz)              {                 var kmzFile = Path.GetDirectoryName(bigImage) + Path.DirectorySeparatorChar + Path.GetFileNameWithoutExtension(bigImage) + ".kmz";                 e.Result = kmzFile;                   using(ZipStorer zip = ZipStorer.Create(kmzFile' "GMap.NET"))                 {                    zip.AddFile(ZipStorer.Compression.Store' bigImage' "files/map.jpg"' "map");                      using(var readme = new MemoryStream(                      Encoding.UTF8.GetBytes(                       string.Format(CultureInfo.InvariantCulture' @"<?xml version=""1.0"" encoding=""UTF-8""?>   <kml xmlns=""http://www.opengis.net/kml/2.2"" xmlns:gx=""http://www.google.com/kml/ext/2.2"" xmlns:kml=""http://www.opengis.net/kml/2.2"" xmlns:atom=""http://www.w3.org/2005/Atom"">  <GroundOverlay>  	<name>{8}</name>  	<LookAt>  		<longitude>{6}</longitude>  		<latitude>{7}</latitude>  		<altitude>0</altitude>  		<heading>0</heading>  		<tilt>0</tilt>  		<range>69327.55500845652</range>  	</LookAt>  	<color>91ffffff</color>  	<Icon>  		<href>files/map.jpg</href>  	</Icon>  	<gx:LatLonQuad>  		<coordinates>  			{0}'{1}'0 {2}'{3}'0 {4}'{5}'0 {6}'{7}'0   		</coordinates>  	</gx:LatLonQuad>  </GroundOverlay>  </kml>"' info.Area.Left' info.Area.Bottom'           info.Area.Right' info.Area.Bottom'           info.Area.Right' info.Area.Top'           info.Area.Left' info.Area.Top'           kmzFile))))                    {                         zip.AddStream(ZipStorer.Compression.Store' "doc.kml"' readme' DateTime.Now' "kml");                       zip.Close();                    }                 }              }           }
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,bg_DoWork,The following statement contains a magic number: if(!info.Area.IsEmpty)           {              string bigImage = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory) + Path.DirectorySeparatorChar + "GMap at zoom " + info.Zoom + " - " + info.Type + "-" + DateTime.Now.Ticks + ".jpg";              e.Result = bigImage;                // current area              GPoint topLeftPx = info.Type.Projection.FromLatLngToPixel(info.Area.LocationTopLeft' info.Zoom);              GPoint rightButtomPx = info.Type.Projection.FromLatLngToPixel(info.Area.Bottom' info.Area.Right' info.Zoom);              GPoint pxDelta = new GPoint(rightButtomPx.X - topLeftPx.X' rightButtomPx.Y - topLeftPx.Y);              GMap.NET.GSize maxOfTiles = info.Type.Projection.GetTileMatrixMaxXY(info.Zoom);                int padding = info.MakeWorldFile || info.MakeKmz ? 0 : 22;              {                 using(Bitmap bmpDestination = new Bitmap((int)(pxDelta.X + padding * 2)' (int)(pxDelta.Y + padding * 2)))                 {                    using(Graphics gfx = Graphics.FromImage(bmpDestination))                    {                       gfx.InterpolationMode = InterpolationMode.HighQualityBicubic;                       gfx.SmoothingMode = SmoothingMode.HighQuality;                         int i = 0;                         // get tiles & combine into one                       lock(tileArea)                       {                          foreach(var p in tileArea)                          {                             if(bg.CancellationPending)                             {                                e.Cancel = true;                                return;                             }                               int pc = (int)(((double)++i / tileArea.Count) * 100);                             bg.ReportProgress(pc' p);                               foreach(var tp in info.Type.Overlays)                             {                                Exception ex;                                GMapImage tile;                                  // tile number inversion(BottomLeft -> TopLeft) for pergo maps                                if(tp.InvertedAxisY)                                {                                   tile = GMaps.Instance.GetImageFrom(tp' new GPoint(p.X' maxOfTiles.Height - p.Y)' info.Zoom' out ex) as GMapImage;                                }                                else // ok                                {                                   tile = GMaps.Instance.GetImageFrom(tp' p' info.Zoom' out ex) as GMapImage;                                }                                  if(tile != null)                                {                                   using(tile)                                   {                                      long x = p.X * info.Type.Projection.TileSize.Width - topLeftPx.X + padding;                                      long y = p.Y * info.Type.Projection.TileSize.Width - topLeftPx.Y + padding;                                      {                                         gfx.DrawImage(tile.Img' x' y' info.Type.Projection.TileSize.Width' info.Type.Projection.TileSize.Height);                                      }                                   }                                }                             }                          }                       }                         // draw routes                       {                          foreach(GMapRoute r in Main.routes.Routes)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw polygons                       {                          foreach(GMapPolygon r in Main.polygons.Polygons)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      rp.CloseFigure();                                        gfx.FillPath(r.Fill' rp);                                        gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw markers                       {                          foreach(GMapMarker r in Main.objects.Markers)                          {                             if(r.IsVisible)                             {                                var pr = r.Position;                                GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                  px.Offset(padding' padding);                                px.Offset(-topLeftPx.X' -topLeftPx.Y);                                px.Offset(r.Offset.X' r.Offset.Y);                                  gfx.ResetTransform();                                gfx.TranslateTransform(-r.LocalPosition.X' -r.LocalPosition.Y);                                gfx.TranslateTransform((int)px.X' (int)px.Y);                                  r.OnRender(gfx);                             }                          }                            // tooltips above                          foreach(GMapMarker m in Main.objects.Markers)                          {                             if(m.IsVisible && m.ToolTip != null && m.IsVisible)                             {                                if(!string.IsNullOrEmpty(m.ToolTipText))                                {                                   var pr = m.Position;                                   GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                     px.Offset(padding' padding);                                   px.Offset(-topLeftPx.X' -topLeftPx.Y);                                   px.Offset(m.Offset.X' m.Offset.Y);                                     gfx.ResetTransform();                                   gfx.TranslateTransform(-m.LocalPosition.X' -m.LocalPosition.Y);                                   gfx.TranslateTransform((int)px.X' (int)px.Y);                                     m.ToolTip.OnRender(gfx);                                }                             }                          }                          gfx.ResetTransform();                       }                         // draw info                       if(!info.MakeWorldFile)                       {                          System.Drawing.Rectangle rect = new System.Drawing.Rectangle();                          {                             rect.Location = new System.Drawing.Point(padding' padding);                             rect.Size = new System.Drawing.Size((int)pxDelta.X' (int)pxDelta.Y);                          }                            using(Font f = new Font(FontFamily.GenericSansSerif' 9' FontStyle.Bold))                          {                             // draw bounds & coordinates                             using(Pen p = new Pen(Brushes.DimGray' 3))                             {                                p.DashStyle = System.Drawing.Drawing2D.DashStyle.DashDot;                                  gfx.DrawRectangle(p' rect);                                  string topleft = info.Area.LocationTopLeft.ToString();                                SizeF s = gfx.MeasureString(topleft' f);                                  gfx.DrawString(topleft' f' p.Brush' rect.X + s.Height / 2' rect.Y + s.Height / 2);                                  string rightBottom = new PointLatLng(info.Area.Bottom' info.Area.Right).ToString();                                SizeF s2 = gfx.MeasureString(rightBottom' f);                                  gfx.DrawString(rightBottom' f' p.Brush' rect.Right - s2.Width - s2.Height / 2' rect.Bottom - s2.Height - s2.Height / 2);                             }                               // draw scale                             using(Pen p = new Pen(Brushes.Blue' 1))                             {                                double rez = info.Type.Projection.GetGroundResolution(info.Zoom' info.Area.Bottom);                                int px100 = (int)(100.0 / rez); // 100 meters                                int px1000 = (int)(1000.0 / rez); // 1km                                     gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px1000' 10);                                gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px100' 10);                                  string leftBottom = "scale: 100m | 1Km";                                SizeF s = gfx.MeasureString(leftBottom' f);                                gfx.DrawString(leftBottom' f' p.Brush' rect.X + 10' rect.Bottom - s.Height - 20);                             }                          }                       }                    }                      bmpDestination.Save(bigImage' ImageFormat.Jpeg);                 }              }                //The worldfile for the original image is:                //0.000067897543      // the horizontal size of a pixel in coordinate units (longitude degrees in this case);              //0.0000000              //0.0000000              //-0.0000554613012    // the comparable vertical pixel size in latitude degrees' negative because latitude decreases as you go from top to bottom in the image.              //-111.743323868834   // longitude of the pixel in the upper-left-hand corner.              //35.1254392635083    // latitude of the pixel in the upper-left-hand corner.                // generate world file              if(info.MakeWorldFile)              {                 string wf = bigImage + "w";                 using(StreamWriter world = File.CreateText(wf))                 {                    world.WriteLine("{0:0.000000000000}"' (info.Area.WidthLng / pxDelta.X));                    world.WriteLine("0.0000000");                    world.WriteLine("0.0000000");                    world.WriteLine("{0:0.000000000000}"' (-info.Area.HeightLat / pxDelta.Y));                    world.WriteLine("{0:0.000000000000}"' info.Area.Left);                    world.WriteLine("{0:0.000000000000}"' info.Area.Top);                    world.Close();                 }              }                if(info.MakeKmz)              {                 var kmzFile = Path.GetDirectoryName(bigImage) + Path.DirectorySeparatorChar + Path.GetFileNameWithoutExtension(bigImage) + ".kmz";                 e.Result = kmzFile;                   using(ZipStorer zip = ZipStorer.Create(kmzFile' "GMap.NET"))                 {                    zip.AddFile(ZipStorer.Compression.Store' bigImage' "files/map.jpg"' "map");                      using(var readme = new MemoryStream(                      Encoding.UTF8.GetBytes(                       string.Format(CultureInfo.InvariantCulture' @"<?xml version=""1.0"" encoding=""UTF-8""?>   <kml xmlns=""http://www.opengis.net/kml/2.2"" xmlns:gx=""http://www.google.com/kml/ext/2.2"" xmlns:kml=""http://www.opengis.net/kml/2.2"" xmlns:atom=""http://www.w3.org/2005/Atom"">  <GroundOverlay>  	<name>{8}</name>  	<LookAt>  		<longitude>{6}</longitude>  		<latitude>{7}</latitude>  		<altitude>0</altitude>  		<heading>0</heading>  		<tilt>0</tilt>  		<range>69327.55500845652</range>  	</LookAt>  	<color>91ffffff</color>  	<Icon>  		<href>files/map.jpg</href>  	</Icon>  	<gx:LatLonQuad>  		<coordinates>  			{0}'{1}'0 {2}'{3}'0 {4}'{5}'0 {6}'{7}'0   		</coordinates>  	</gx:LatLonQuad>  </GroundOverlay>  </kml>"' info.Area.Left' info.Area.Bottom'           info.Area.Right' info.Area.Bottom'           info.Area.Right' info.Area.Top'           info.Area.Left' info.Area.Top'           kmzFile))))                    {                         zip.AddStream(ZipStorer.Compression.Store' "doc.kml"' readme' DateTime.Now' "kml");                       zip.Close();                    }                 }              }           }
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,bg_DoWork,The following statement contains a magic number: if(!info.Area.IsEmpty)           {              string bigImage = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory) + Path.DirectorySeparatorChar + "GMap at zoom " + info.Zoom + " - " + info.Type + "-" + DateTime.Now.Ticks + ".jpg";              e.Result = bigImage;                // current area              GPoint topLeftPx = info.Type.Projection.FromLatLngToPixel(info.Area.LocationTopLeft' info.Zoom);              GPoint rightButtomPx = info.Type.Projection.FromLatLngToPixel(info.Area.Bottom' info.Area.Right' info.Zoom);              GPoint pxDelta = new GPoint(rightButtomPx.X - topLeftPx.X' rightButtomPx.Y - topLeftPx.Y);              GMap.NET.GSize maxOfTiles = info.Type.Projection.GetTileMatrixMaxXY(info.Zoom);                int padding = info.MakeWorldFile || info.MakeKmz ? 0 : 22;              {                 using(Bitmap bmpDestination = new Bitmap((int)(pxDelta.X + padding * 2)' (int)(pxDelta.Y + padding * 2)))                 {                    using(Graphics gfx = Graphics.FromImage(bmpDestination))                    {                       gfx.InterpolationMode = InterpolationMode.HighQualityBicubic;                       gfx.SmoothingMode = SmoothingMode.HighQuality;                         int i = 0;                         // get tiles & combine into one                       lock(tileArea)                       {                          foreach(var p in tileArea)                          {                             if(bg.CancellationPending)                             {                                e.Cancel = true;                                return;                             }                               int pc = (int)(((double)++i / tileArea.Count) * 100);                             bg.ReportProgress(pc' p);                               foreach(var tp in info.Type.Overlays)                             {                                Exception ex;                                GMapImage tile;                                  // tile number inversion(BottomLeft -> TopLeft) for pergo maps                                if(tp.InvertedAxisY)                                {                                   tile = GMaps.Instance.GetImageFrom(tp' new GPoint(p.X' maxOfTiles.Height - p.Y)' info.Zoom' out ex) as GMapImage;                                }                                else // ok                                {                                   tile = GMaps.Instance.GetImageFrom(tp' p' info.Zoom' out ex) as GMapImage;                                }                                  if(tile != null)                                {                                   using(tile)                                   {                                      long x = p.X * info.Type.Projection.TileSize.Width - topLeftPx.X + padding;                                      long y = p.Y * info.Type.Projection.TileSize.Width - topLeftPx.Y + padding;                                      {                                         gfx.DrawImage(tile.Img' x' y' info.Type.Projection.TileSize.Width' info.Type.Projection.TileSize.Height);                                      }                                   }                                }                             }                          }                       }                         // draw routes                       {                          foreach(GMapRoute r in Main.routes.Routes)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw polygons                       {                          foreach(GMapPolygon r in Main.polygons.Polygons)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      rp.CloseFigure();                                        gfx.FillPath(r.Fill' rp);                                        gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw markers                       {                          foreach(GMapMarker r in Main.objects.Markers)                          {                             if(r.IsVisible)                             {                                var pr = r.Position;                                GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                  px.Offset(padding' padding);                                px.Offset(-topLeftPx.X' -topLeftPx.Y);                                px.Offset(r.Offset.X' r.Offset.Y);                                  gfx.ResetTransform();                                gfx.TranslateTransform(-r.LocalPosition.X' -r.LocalPosition.Y);                                gfx.TranslateTransform((int)px.X' (int)px.Y);                                  r.OnRender(gfx);                             }                          }                            // tooltips above                          foreach(GMapMarker m in Main.objects.Markers)                          {                             if(m.IsVisible && m.ToolTip != null && m.IsVisible)                             {                                if(!string.IsNullOrEmpty(m.ToolTipText))                                {                                   var pr = m.Position;                                   GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                     px.Offset(padding' padding);                                   px.Offset(-topLeftPx.X' -topLeftPx.Y);                                   px.Offset(m.Offset.X' m.Offset.Y);                                     gfx.ResetTransform();                                   gfx.TranslateTransform(-m.LocalPosition.X' -m.LocalPosition.Y);                                   gfx.TranslateTransform((int)px.X' (int)px.Y);                                     m.ToolTip.OnRender(gfx);                                }                             }                          }                          gfx.ResetTransform();                       }                         // draw info                       if(!info.MakeWorldFile)                       {                          System.Drawing.Rectangle rect = new System.Drawing.Rectangle();                          {                             rect.Location = new System.Drawing.Point(padding' padding);                             rect.Size = new System.Drawing.Size((int)pxDelta.X' (int)pxDelta.Y);                          }                            using(Font f = new Font(FontFamily.GenericSansSerif' 9' FontStyle.Bold))                          {                             // draw bounds & coordinates                             using(Pen p = new Pen(Brushes.DimGray' 3))                             {                                p.DashStyle = System.Drawing.Drawing2D.DashStyle.DashDot;                                  gfx.DrawRectangle(p' rect);                                  string topleft = info.Area.LocationTopLeft.ToString();                                SizeF s = gfx.MeasureString(topleft' f);                                  gfx.DrawString(topleft' f' p.Brush' rect.X + s.Height / 2' rect.Y + s.Height / 2);                                  string rightBottom = new PointLatLng(info.Area.Bottom' info.Area.Right).ToString();                                SizeF s2 = gfx.MeasureString(rightBottom' f);                                  gfx.DrawString(rightBottom' f' p.Brush' rect.Right - s2.Width - s2.Height / 2' rect.Bottom - s2.Height - s2.Height / 2);                             }                               // draw scale                             using(Pen p = new Pen(Brushes.Blue' 1))                             {                                double rez = info.Type.Projection.GetGroundResolution(info.Zoom' info.Area.Bottom);                                int px100 = (int)(100.0 / rez); // 100 meters                                int px1000 = (int)(1000.0 / rez); // 1km                                     gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px1000' 10);                                gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px100' 10);                                  string leftBottom = "scale: 100m | 1Km";                                SizeF s = gfx.MeasureString(leftBottom' f);                                gfx.DrawString(leftBottom' f' p.Brush' rect.X + 10' rect.Bottom - s.Height - 20);                             }                          }                       }                    }                      bmpDestination.Save(bigImage' ImageFormat.Jpeg);                 }              }                //The worldfile for the original image is:                //0.000067897543      // the horizontal size of a pixel in coordinate units (longitude degrees in this case);              //0.0000000              //0.0000000              //-0.0000554613012    // the comparable vertical pixel size in latitude degrees' negative because latitude decreases as you go from top to bottom in the image.              //-111.743323868834   // longitude of the pixel in the upper-left-hand corner.              //35.1254392635083    // latitude of the pixel in the upper-left-hand corner.                // generate world file              if(info.MakeWorldFile)              {                 string wf = bigImage + "w";                 using(StreamWriter world = File.CreateText(wf))                 {                    world.WriteLine("{0:0.000000000000}"' (info.Area.WidthLng / pxDelta.X));                    world.WriteLine("0.0000000");                    world.WriteLine("0.0000000");                    world.WriteLine("{0:0.000000000000}"' (-info.Area.HeightLat / pxDelta.Y));                    world.WriteLine("{0:0.000000000000}"' info.Area.Left);                    world.WriteLine("{0:0.000000000000}"' info.Area.Top);                    world.Close();                 }              }                if(info.MakeKmz)              {                 var kmzFile = Path.GetDirectoryName(bigImage) + Path.DirectorySeparatorChar + Path.GetFileNameWithoutExtension(bigImage) + ".kmz";                 e.Result = kmzFile;                   using(ZipStorer zip = ZipStorer.Create(kmzFile' "GMap.NET"))                 {                    zip.AddFile(ZipStorer.Compression.Store' bigImage' "files/map.jpg"' "map");                      using(var readme = new MemoryStream(                      Encoding.UTF8.GetBytes(                       string.Format(CultureInfo.InvariantCulture' @"<?xml version=""1.0"" encoding=""UTF-8""?>   <kml xmlns=""http://www.opengis.net/kml/2.2"" xmlns:gx=""http://www.google.com/kml/ext/2.2"" xmlns:kml=""http://www.opengis.net/kml/2.2"" xmlns:atom=""http://www.w3.org/2005/Atom"">  <GroundOverlay>  	<name>{8}</name>  	<LookAt>  		<longitude>{6}</longitude>  		<latitude>{7}</latitude>  		<altitude>0</altitude>  		<heading>0</heading>  		<tilt>0</tilt>  		<range>69327.55500845652</range>  	</LookAt>  	<color>91ffffff</color>  	<Icon>  		<href>files/map.jpg</href>  	</Icon>  	<gx:LatLonQuad>  		<coordinates>  			{0}'{1}'0 {2}'{3}'0 {4}'{5}'0 {6}'{7}'0   		</coordinates>  	</gx:LatLonQuad>  </GroundOverlay>  </kml>"' info.Area.Left' info.Area.Bottom'           info.Area.Right' info.Area.Bottom'           info.Area.Right' info.Area.Top'           info.Area.Left' info.Area.Top'           kmzFile))))                    {                         zip.AddStream(ZipStorer.Compression.Store' "doc.kml"' readme' DateTime.Now' "kml");                       zip.Close();                    }                 }              }           }
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,bg_DoWork,The following statement contains a magic number: if(!info.Area.IsEmpty)           {              string bigImage = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory) + Path.DirectorySeparatorChar + "GMap at zoom " + info.Zoom + " - " + info.Type + "-" + DateTime.Now.Ticks + ".jpg";              e.Result = bigImage;                // current area              GPoint topLeftPx = info.Type.Projection.FromLatLngToPixel(info.Area.LocationTopLeft' info.Zoom);              GPoint rightButtomPx = info.Type.Projection.FromLatLngToPixel(info.Area.Bottom' info.Area.Right' info.Zoom);              GPoint pxDelta = new GPoint(rightButtomPx.X - topLeftPx.X' rightButtomPx.Y - topLeftPx.Y);              GMap.NET.GSize maxOfTiles = info.Type.Projection.GetTileMatrixMaxXY(info.Zoom);                int padding = info.MakeWorldFile || info.MakeKmz ? 0 : 22;              {                 using(Bitmap bmpDestination = new Bitmap((int)(pxDelta.X + padding * 2)' (int)(pxDelta.Y + padding * 2)))                 {                    using(Graphics gfx = Graphics.FromImage(bmpDestination))                    {                       gfx.InterpolationMode = InterpolationMode.HighQualityBicubic;                       gfx.SmoothingMode = SmoothingMode.HighQuality;                         int i = 0;                         // get tiles & combine into one                       lock(tileArea)                       {                          foreach(var p in tileArea)                          {                             if(bg.CancellationPending)                             {                                e.Cancel = true;                                return;                             }                               int pc = (int)(((double)++i / tileArea.Count) * 100);                             bg.ReportProgress(pc' p);                               foreach(var tp in info.Type.Overlays)                             {                                Exception ex;                                GMapImage tile;                                  // tile number inversion(BottomLeft -> TopLeft) for pergo maps                                if(tp.InvertedAxisY)                                {                                   tile = GMaps.Instance.GetImageFrom(tp' new GPoint(p.X' maxOfTiles.Height - p.Y)' info.Zoom' out ex) as GMapImage;                                }                                else // ok                                {                                   tile = GMaps.Instance.GetImageFrom(tp' p' info.Zoom' out ex) as GMapImage;                                }                                  if(tile != null)                                {                                   using(tile)                                   {                                      long x = p.X * info.Type.Projection.TileSize.Width - topLeftPx.X + padding;                                      long y = p.Y * info.Type.Projection.TileSize.Width - topLeftPx.Y + padding;                                      {                                         gfx.DrawImage(tile.Img' x' y' info.Type.Projection.TileSize.Width' info.Type.Projection.TileSize.Height);                                      }                                   }                                }                             }                          }                       }                         // draw routes                       {                          foreach(GMapRoute r in Main.routes.Routes)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw polygons                       {                          foreach(GMapPolygon r in Main.polygons.Polygons)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      rp.CloseFigure();                                        gfx.FillPath(r.Fill' rp);                                        gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw markers                       {                          foreach(GMapMarker r in Main.objects.Markers)                          {                             if(r.IsVisible)                             {                                var pr = r.Position;                                GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                  px.Offset(padding' padding);                                px.Offset(-topLeftPx.X' -topLeftPx.Y);                                px.Offset(r.Offset.X' r.Offset.Y);                                  gfx.ResetTransform();                                gfx.TranslateTransform(-r.LocalPosition.X' -r.LocalPosition.Y);                                gfx.TranslateTransform((int)px.X' (int)px.Y);                                  r.OnRender(gfx);                             }                          }                            // tooltips above                          foreach(GMapMarker m in Main.objects.Markers)                          {                             if(m.IsVisible && m.ToolTip != null && m.IsVisible)                             {                                if(!string.IsNullOrEmpty(m.ToolTipText))                                {                                   var pr = m.Position;                                   GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                     px.Offset(padding' padding);                                   px.Offset(-topLeftPx.X' -topLeftPx.Y);                                   px.Offset(m.Offset.X' m.Offset.Y);                                     gfx.ResetTransform();                                   gfx.TranslateTransform(-m.LocalPosition.X' -m.LocalPosition.Y);                                   gfx.TranslateTransform((int)px.X' (int)px.Y);                                     m.ToolTip.OnRender(gfx);                                }                             }                          }                          gfx.ResetTransform();                       }                         // draw info                       if(!info.MakeWorldFile)                       {                          System.Drawing.Rectangle rect = new System.Drawing.Rectangle();                          {                             rect.Location = new System.Drawing.Point(padding' padding);                             rect.Size = new System.Drawing.Size((int)pxDelta.X' (int)pxDelta.Y);                          }                            using(Font f = new Font(FontFamily.GenericSansSerif' 9' FontStyle.Bold))                          {                             // draw bounds & coordinates                             using(Pen p = new Pen(Brushes.DimGray' 3))                             {                                p.DashStyle = System.Drawing.Drawing2D.DashStyle.DashDot;                                  gfx.DrawRectangle(p' rect);                                  string topleft = info.Area.LocationTopLeft.ToString();                                SizeF s = gfx.MeasureString(topleft' f);                                  gfx.DrawString(topleft' f' p.Brush' rect.X + s.Height / 2' rect.Y + s.Height / 2);                                  string rightBottom = new PointLatLng(info.Area.Bottom' info.Area.Right).ToString();                                SizeF s2 = gfx.MeasureString(rightBottom' f);                                  gfx.DrawString(rightBottom' f' p.Brush' rect.Right - s2.Width - s2.Height / 2' rect.Bottom - s2.Height - s2.Height / 2);                             }                               // draw scale                             using(Pen p = new Pen(Brushes.Blue' 1))                             {                                double rez = info.Type.Projection.GetGroundResolution(info.Zoom' info.Area.Bottom);                                int px100 = (int)(100.0 / rez); // 100 meters                                int px1000 = (int)(1000.0 / rez); // 1km                                     gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px1000' 10);                                gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px100' 10);                                  string leftBottom = "scale: 100m | 1Km";                                SizeF s = gfx.MeasureString(leftBottom' f);                                gfx.DrawString(leftBottom' f' p.Brush' rect.X + 10' rect.Bottom - s.Height - 20);                             }                          }                       }                    }                      bmpDestination.Save(bigImage' ImageFormat.Jpeg);                 }              }                //The worldfile for the original image is:                //0.000067897543      // the horizontal size of a pixel in coordinate units (longitude degrees in this case);              //0.0000000              //0.0000000              //-0.0000554613012    // the comparable vertical pixel size in latitude degrees' negative because latitude decreases as you go from top to bottom in the image.              //-111.743323868834   // longitude of the pixel in the upper-left-hand corner.              //35.1254392635083    // latitude of the pixel in the upper-left-hand corner.                // generate world file              if(info.MakeWorldFile)              {                 string wf = bigImage + "w";                 using(StreamWriter world = File.CreateText(wf))                 {                    world.WriteLine("{0:0.000000000000}"' (info.Area.WidthLng / pxDelta.X));                    world.WriteLine("0.0000000");                    world.WriteLine("0.0000000");                    world.WriteLine("{0:0.000000000000}"' (-info.Area.HeightLat / pxDelta.Y));                    world.WriteLine("{0:0.000000000000}"' info.Area.Left);                    world.WriteLine("{0:0.000000000000}"' info.Area.Top);                    world.Close();                 }              }                if(info.MakeKmz)              {                 var kmzFile = Path.GetDirectoryName(bigImage) + Path.DirectorySeparatorChar + Path.GetFileNameWithoutExtension(bigImage) + ".kmz";                 e.Result = kmzFile;                   using(ZipStorer zip = ZipStorer.Create(kmzFile' "GMap.NET"))                 {                    zip.AddFile(ZipStorer.Compression.Store' bigImage' "files/map.jpg"' "map");                      using(var readme = new MemoryStream(                      Encoding.UTF8.GetBytes(                       string.Format(CultureInfo.InvariantCulture' @"<?xml version=""1.0"" encoding=""UTF-8""?>   <kml xmlns=""http://www.opengis.net/kml/2.2"" xmlns:gx=""http://www.google.com/kml/ext/2.2"" xmlns:kml=""http://www.opengis.net/kml/2.2"" xmlns:atom=""http://www.w3.org/2005/Atom"">  <GroundOverlay>  	<name>{8}</name>  	<LookAt>  		<longitude>{6}</longitude>  		<latitude>{7}</latitude>  		<altitude>0</altitude>  		<heading>0</heading>  		<tilt>0</tilt>  		<range>69327.55500845652</range>  	</LookAt>  	<color>91ffffff</color>  	<Icon>  		<href>files/map.jpg</href>  	</Icon>  	<gx:LatLonQuad>  		<coordinates>  			{0}'{1}'0 {2}'{3}'0 {4}'{5}'0 {6}'{7}'0   		</coordinates>  	</gx:LatLonQuad>  </GroundOverlay>  </kml>"' info.Area.Left' info.Area.Bottom'           info.Area.Right' info.Area.Bottom'           info.Area.Right' info.Area.Top'           info.Area.Left' info.Area.Top'           kmzFile))))                    {                         zip.AddStream(ZipStorer.Compression.Store' "doc.kml"' readme' DateTime.Now' "kml");                       zip.Close();                    }                 }              }           }
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,bg_DoWork,The following statement contains a magic number: if(!info.Area.IsEmpty)           {              string bigImage = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory) + Path.DirectorySeparatorChar + "GMap at zoom " + info.Zoom + " - " + info.Type + "-" + DateTime.Now.Ticks + ".jpg";              e.Result = bigImage;                // current area              GPoint topLeftPx = info.Type.Projection.FromLatLngToPixel(info.Area.LocationTopLeft' info.Zoom);              GPoint rightButtomPx = info.Type.Projection.FromLatLngToPixel(info.Area.Bottom' info.Area.Right' info.Zoom);              GPoint pxDelta = new GPoint(rightButtomPx.X - topLeftPx.X' rightButtomPx.Y - topLeftPx.Y);              GMap.NET.GSize maxOfTiles = info.Type.Projection.GetTileMatrixMaxXY(info.Zoom);                int padding = info.MakeWorldFile || info.MakeKmz ? 0 : 22;              {                 using(Bitmap bmpDestination = new Bitmap((int)(pxDelta.X + padding * 2)' (int)(pxDelta.Y + padding * 2)))                 {                    using(Graphics gfx = Graphics.FromImage(bmpDestination))                    {                       gfx.InterpolationMode = InterpolationMode.HighQualityBicubic;                       gfx.SmoothingMode = SmoothingMode.HighQuality;                         int i = 0;                         // get tiles & combine into one                       lock(tileArea)                       {                          foreach(var p in tileArea)                          {                             if(bg.CancellationPending)                             {                                e.Cancel = true;                                return;                             }                               int pc = (int)(((double)++i / tileArea.Count) * 100);                             bg.ReportProgress(pc' p);                               foreach(var tp in info.Type.Overlays)                             {                                Exception ex;                                GMapImage tile;                                  // tile number inversion(BottomLeft -> TopLeft) for pergo maps                                if(tp.InvertedAxisY)                                {                                   tile = GMaps.Instance.GetImageFrom(tp' new GPoint(p.X' maxOfTiles.Height - p.Y)' info.Zoom' out ex) as GMapImage;                                }                                else // ok                                {                                   tile = GMaps.Instance.GetImageFrom(tp' p' info.Zoom' out ex) as GMapImage;                                }                                  if(tile != null)                                {                                   using(tile)                                   {                                      long x = p.X * info.Type.Projection.TileSize.Width - topLeftPx.X + padding;                                      long y = p.Y * info.Type.Projection.TileSize.Width - topLeftPx.Y + padding;                                      {                                         gfx.DrawImage(tile.Img' x' y' info.Type.Projection.TileSize.Width' info.Type.Projection.TileSize.Height);                                      }                                   }                                }                             }                          }                       }                         // draw routes                       {                          foreach(GMapRoute r in Main.routes.Routes)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw polygons                       {                          foreach(GMapPolygon r in Main.polygons.Polygons)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      rp.CloseFigure();                                        gfx.FillPath(r.Fill' rp);                                        gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw markers                       {                          foreach(GMapMarker r in Main.objects.Markers)                          {                             if(r.IsVisible)                             {                                var pr = r.Position;                                GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                  px.Offset(padding' padding);                                px.Offset(-topLeftPx.X' -topLeftPx.Y);                                px.Offset(r.Offset.X' r.Offset.Y);                                  gfx.ResetTransform();                                gfx.TranslateTransform(-r.LocalPosition.X' -r.LocalPosition.Y);                                gfx.TranslateTransform((int)px.X' (int)px.Y);                                  r.OnRender(gfx);                             }                          }                            // tooltips above                          foreach(GMapMarker m in Main.objects.Markers)                          {                             if(m.IsVisible && m.ToolTip != null && m.IsVisible)                             {                                if(!string.IsNullOrEmpty(m.ToolTipText))                                {                                   var pr = m.Position;                                   GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                     px.Offset(padding' padding);                                   px.Offset(-topLeftPx.X' -topLeftPx.Y);                                   px.Offset(m.Offset.X' m.Offset.Y);                                     gfx.ResetTransform();                                   gfx.TranslateTransform(-m.LocalPosition.X' -m.LocalPosition.Y);                                   gfx.TranslateTransform((int)px.X' (int)px.Y);                                     m.ToolTip.OnRender(gfx);                                }                             }                          }                          gfx.ResetTransform();                       }                         // draw info                       if(!info.MakeWorldFile)                       {                          System.Drawing.Rectangle rect = new System.Drawing.Rectangle();                          {                             rect.Location = new System.Drawing.Point(padding' padding);                             rect.Size = new System.Drawing.Size((int)pxDelta.X' (int)pxDelta.Y);                          }                            using(Font f = new Font(FontFamily.GenericSansSerif' 9' FontStyle.Bold))                          {                             // draw bounds & coordinates                             using(Pen p = new Pen(Brushes.DimGray' 3))                             {                                p.DashStyle = System.Drawing.Drawing2D.DashStyle.DashDot;                                  gfx.DrawRectangle(p' rect);                                  string topleft = info.Area.LocationTopLeft.ToString();                                SizeF s = gfx.MeasureString(topleft' f);                                  gfx.DrawString(topleft' f' p.Brush' rect.X + s.Height / 2' rect.Y + s.Height / 2);                                  string rightBottom = new PointLatLng(info.Area.Bottom' info.Area.Right).ToString();                                SizeF s2 = gfx.MeasureString(rightBottom' f);                                  gfx.DrawString(rightBottom' f' p.Brush' rect.Right - s2.Width - s2.Height / 2' rect.Bottom - s2.Height - s2.Height / 2);                             }                               // draw scale                             using(Pen p = new Pen(Brushes.Blue' 1))                             {                                double rez = info.Type.Projection.GetGroundResolution(info.Zoom' info.Area.Bottom);                                int px100 = (int)(100.0 / rez); // 100 meters                                int px1000 = (int)(1000.0 / rez); // 1km                                     gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px1000' 10);                                gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px100' 10);                                  string leftBottom = "scale: 100m | 1Km";                                SizeF s = gfx.MeasureString(leftBottom' f);                                gfx.DrawString(leftBottom' f' p.Brush' rect.X + 10' rect.Bottom - s.Height - 20);                             }                          }                       }                    }                      bmpDestination.Save(bigImage' ImageFormat.Jpeg);                 }              }                //The worldfile for the original image is:                //0.000067897543      // the horizontal size of a pixel in coordinate units (longitude degrees in this case);              //0.0000000              //0.0000000              //-0.0000554613012    // the comparable vertical pixel size in latitude degrees' negative because latitude decreases as you go from top to bottom in the image.              //-111.743323868834   // longitude of the pixel in the upper-left-hand corner.              //35.1254392635083    // latitude of the pixel in the upper-left-hand corner.                // generate world file              if(info.MakeWorldFile)              {                 string wf = bigImage + "w";                 using(StreamWriter world = File.CreateText(wf))                 {                    world.WriteLine("{0:0.000000000000}"' (info.Area.WidthLng / pxDelta.X));                    world.WriteLine("0.0000000");                    world.WriteLine("0.0000000");                    world.WriteLine("{0:0.000000000000}"' (-info.Area.HeightLat / pxDelta.Y));                    world.WriteLine("{0:0.000000000000}"' info.Area.Left);                    world.WriteLine("{0:0.000000000000}"' info.Area.Top);                    world.Close();                 }              }                if(info.MakeKmz)              {                 var kmzFile = Path.GetDirectoryName(bigImage) + Path.DirectorySeparatorChar + Path.GetFileNameWithoutExtension(bigImage) + ".kmz";                 e.Result = kmzFile;                   using(ZipStorer zip = ZipStorer.Create(kmzFile' "GMap.NET"))                 {                    zip.AddFile(ZipStorer.Compression.Store' bigImage' "files/map.jpg"' "map");                      using(var readme = new MemoryStream(                      Encoding.UTF8.GetBytes(                       string.Format(CultureInfo.InvariantCulture' @"<?xml version=""1.0"" encoding=""UTF-8""?>   <kml xmlns=""http://www.opengis.net/kml/2.2"" xmlns:gx=""http://www.google.com/kml/ext/2.2"" xmlns:kml=""http://www.opengis.net/kml/2.2"" xmlns:atom=""http://www.w3.org/2005/Atom"">  <GroundOverlay>  	<name>{8}</name>  	<LookAt>  		<longitude>{6}</longitude>  		<latitude>{7}</latitude>  		<altitude>0</altitude>  		<heading>0</heading>  		<tilt>0</tilt>  		<range>69327.55500845652</range>  	</LookAt>  	<color>91ffffff</color>  	<Icon>  		<href>files/map.jpg</href>  	</Icon>  	<gx:LatLonQuad>  		<coordinates>  			{0}'{1}'0 {2}'{3}'0 {4}'{5}'0 {6}'{7}'0   		</coordinates>  	</gx:LatLonQuad>  </GroundOverlay>  </kml>"' info.Area.Left' info.Area.Bottom'           info.Area.Right' info.Area.Bottom'           info.Area.Right' info.Area.Top'           info.Area.Left' info.Area.Top'           kmzFile))))                    {                         zip.AddStream(ZipStorer.Compression.Store' "doc.kml"' readme' DateTime.Now' "kml");                       zip.Close();                    }                 }              }           }
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,bg_DoWork,The following statement contains a magic number: if(!info.Area.IsEmpty)           {              string bigImage = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory) + Path.DirectorySeparatorChar + "GMap at zoom " + info.Zoom + " - " + info.Type + "-" + DateTime.Now.Ticks + ".jpg";              e.Result = bigImage;                // current area              GPoint topLeftPx = info.Type.Projection.FromLatLngToPixel(info.Area.LocationTopLeft' info.Zoom);              GPoint rightButtomPx = info.Type.Projection.FromLatLngToPixel(info.Area.Bottom' info.Area.Right' info.Zoom);              GPoint pxDelta = new GPoint(rightButtomPx.X - topLeftPx.X' rightButtomPx.Y - topLeftPx.Y);              GMap.NET.GSize maxOfTiles = info.Type.Projection.GetTileMatrixMaxXY(info.Zoom);                int padding = info.MakeWorldFile || info.MakeKmz ? 0 : 22;              {                 using(Bitmap bmpDestination = new Bitmap((int)(pxDelta.X + padding * 2)' (int)(pxDelta.Y + padding * 2)))                 {                    using(Graphics gfx = Graphics.FromImage(bmpDestination))                    {                       gfx.InterpolationMode = InterpolationMode.HighQualityBicubic;                       gfx.SmoothingMode = SmoothingMode.HighQuality;                         int i = 0;                         // get tiles & combine into one                       lock(tileArea)                       {                          foreach(var p in tileArea)                          {                             if(bg.CancellationPending)                             {                                e.Cancel = true;                                return;                             }                               int pc = (int)(((double)++i / tileArea.Count) * 100);                             bg.ReportProgress(pc' p);                               foreach(var tp in info.Type.Overlays)                             {                                Exception ex;                                GMapImage tile;                                  // tile number inversion(BottomLeft -> TopLeft) for pergo maps                                if(tp.InvertedAxisY)                                {                                   tile = GMaps.Instance.GetImageFrom(tp' new GPoint(p.X' maxOfTiles.Height - p.Y)' info.Zoom' out ex) as GMapImage;                                }                                else // ok                                {                                   tile = GMaps.Instance.GetImageFrom(tp' p' info.Zoom' out ex) as GMapImage;                                }                                  if(tile != null)                                {                                   using(tile)                                   {                                      long x = p.X * info.Type.Projection.TileSize.Width - topLeftPx.X + padding;                                      long y = p.Y * info.Type.Projection.TileSize.Width - topLeftPx.Y + padding;                                      {                                         gfx.DrawImage(tile.Img' x' y' info.Type.Projection.TileSize.Width' info.Type.Projection.TileSize.Height);                                      }                                   }                                }                             }                          }                       }                         // draw routes                       {                          foreach(GMapRoute r in Main.routes.Routes)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw polygons                       {                          foreach(GMapPolygon r in Main.polygons.Polygons)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      rp.CloseFigure();                                        gfx.FillPath(r.Fill' rp);                                        gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw markers                       {                          foreach(GMapMarker r in Main.objects.Markers)                          {                             if(r.IsVisible)                             {                                var pr = r.Position;                                GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                  px.Offset(padding' padding);                                px.Offset(-topLeftPx.X' -topLeftPx.Y);                                px.Offset(r.Offset.X' r.Offset.Y);                                  gfx.ResetTransform();                                gfx.TranslateTransform(-r.LocalPosition.X' -r.LocalPosition.Y);                                gfx.TranslateTransform((int)px.X' (int)px.Y);                                  r.OnRender(gfx);                             }                          }                            // tooltips above                          foreach(GMapMarker m in Main.objects.Markers)                          {                             if(m.IsVisible && m.ToolTip != null && m.IsVisible)                             {                                if(!string.IsNullOrEmpty(m.ToolTipText))                                {                                   var pr = m.Position;                                   GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                     px.Offset(padding' padding);                                   px.Offset(-topLeftPx.X' -topLeftPx.Y);                                   px.Offset(m.Offset.X' m.Offset.Y);                                     gfx.ResetTransform();                                   gfx.TranslateTransform(-m.LocalPosition.X' -m.LocalPosition.Y);                                   gfx.TranslateTransform((int)px.X' (int)px.Y);                                     m.ToolTip.OnRender(gfx);                                }                             }                          }                          gfx.ResetTransform();                       }                         // draw info                       if(!info.MakeWorldFile)                       {                          System.Drawing.Rectangle rect = new System.Drawing.Rectangle();                          {                             rect.Location = new System.Drawing.Point(padding' padding);                             rect.Size = new System.Drawing.Size((int)pxDelta.X' (int)pxDelta.Y);                          }                            using(Font f = new Font(FontFamily.GenericSansSerif' 9' FontStyle.Bold))                          {                             // draw bounds & coordinates                             using(Pen p = new Pen(Brushes.DimGray' 3))                             {                                p.DashStyle = System.Drawing.Drawing2D.DashStyle.DashDot;                                  gfx.DrawRectangle(p' rect);                                  string topleft = info.Area.LocationTopLeft.ToString();                                SizeF s = gfx.MeasureString(topleft' f);                                  gfx.DrawString(topleft' f' p.Brush' rect.X + s.Height / 2' rect.Y + s.Height / 2);                                  string rightBottom = new PointLatLng(info.Area.Bottom' info.Area.Right).ToString();                                SizeF s2 = gfx.MeasureString(rightBottom' f);                                  gfx.DrawString(rightBottom' f' p.Brush' rect.Right - s2.Width - s2.Height / 2' rect.Bottom - s2.Height - s2.Height / 2);                             }                               // draw scale                             using(Pen p = new Pen(Brushes.Blue' 1))                             {                                double rez = info.Type.Projection.GetGroundResolution(info.Zoom' info.Area.Bottom);                                int px100 = (int)(100.0 / rez); // 100 meters                                int px1000 = (int)(1000.0 / rez); // 1km                                     gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px1000' 10);                                gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px100' 10);                                  string leftBottom = "scale: 100m | 1Km";                                SizeF s = gfx.MeasureString(leftBottom' f);                                gfx.DrawString(leftBottom' f' p.Brush' rect.X + 10' rect.Bottom - s.Height - 20);                             }                          }                       }                    }                      bmpDestination.Save(bigImage' ImageFormat.Jpeg);                 }              }                //The worldfile for the original image is:                //0.000067897543      // the horizontal size of a pixel in coordinate units (longitude degrees in this case);              //0.0000000              //0.0000000              //-0.0000554613012    // the comparable vertical pixel size in latitude degrees' negative because latitude decreases as you go from top to bottom in the image.              //-111.743323868834   // longitude of the pixel in the upper-left-hand corner.              //35.1254392635083    // latitude of the pixel in the upper-left-hand corner.                // generate world file              if(info.MakeWorldFile)              {                 string wf = bigImage + "w";                 using(StreamWriter world = File.CreateText(wf))                 {                    world.WriteLine("{0:0.000000000000}"' (info.Area.WidthLng / pxDelta.X));                    world.WriteLine("0.0000000");                    world.WriteLine("0.0000000");                    world.WriteLine("{0:0.000000000000}"' (-info.Area.HeightLat / pxDelta.Y));                    world.WriteLine("{0:0.000000000000}"' info.Area.Left);                    world.WriteLine("{0:0.000000000000}"' info.Area.Top);                    world.Close();                 }              }                if(info.MakeKmz)              {                 var kmzFile = Path.GetDirectoryName(bigImage) + Path.DirectorySeparatorChar + Path.GetFileNameWithoutExtension(bigImage) + ".kmz";                 e.Result = kmzFile;                   using(ZipStorer zip = ZipStorer.Create(kmzFile' "GMap.NET"))                 {                    zip.AddFile(ZipStorer.Compression.Store' bigImage' "files/map.jpg"' "map");                      using(var readme = new MemoryStream(                      Encoding.UTF8.GetBytes(                       string.Format(CultureInfo.InvariantCulture' @"<?xml version=""1.0"" encoding=""UTF-8""?>   <kml xmlns=""http://www.opengis.net/kml/2.2"" xmlns:gx=""http://www.google.com/kml/ext/2.2"" xmlns:kml=""http://www.opengis.net/kml/2.2"" xmlns:atom=""http://www.w3.org/2005/Atom"">  <GroundOverlay>  	<name>{8}</name>  	<LookAt>  		<longitude>{6}</longitude>  		<latitude>{7}</latitude>  		<altitude>0</altitude>  		<heading>0</heading>  		<tilt>0</tilt>  		<range>69327.55500845652</range>  	</LookAt>  	<color>91ffffff</color>  	<Icon>  		<href>files/map.jpg</href>  	</Icon>  	<gx:LatLonQuad>  		<coordinates>  			{0}'{1}'0 {2}'{3}'0 {4}'{5}'0 {6}'{7}'0   		</coordinates>  	</gx:LatLonQuad>  </GroundOverlay>  </kml>"' info.Area.Left' info.Area.Bottom'           info.Area.Right' info.Area.Bottom'           info.Area.Right' info.Area.Top'           info.Area.Left' info.Area.Top'           kmzFile))))                    {                         zip.AddStream(ZipStorer.Compression.Store' "doc.kml"' readme' DateTime.Now' "kml");                       zip.Close();                    }                 }              }           }
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,bg_DoWork,The following statement contains a magic number: if(!info.Area.IsEmpty)           {              string bigImage = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory) + Path.DirectorySeparatorChar + "GMap at zoom " + info.Zoom + " - " + info.Type + "-" + DateTime.Now.Ticks + ".jpg";              e.Result = bigImage;                // current area              GPoint topLeftPx = info.Type.Projection.FromLatLngToPixel(info.Area.LocationTopLeft' info.Zoom);              GPoint rightButtomPx = info.Type.Projection.FromLatLngToPixel(info.Area.Bottom' info.Area.Right' info.Zoom);              GPoint pxDelta = new GPoint(rightButtomPx.X - topLeftPx.X' rightButtomPx.Y - topLeftPx.Y);              GMap.NET.GSize maxOfTiles = info.Type.Projection.GetTileMatrixMaxXY(info.Zoom);                int padding = info.MakeWorldFile || info.MakeKmz ? 0 : 22;              {                 using(Bitmap bmpDestination = new Bitmap((int)(pxDelta.X + padding * 2)' (int)(pxDelta.Y + padding * 2)))                 {                    using(Graphics gfx = Graphics.FromImage(bmpDestination))                    {                       gfx.InterpolationMode = InterpolationMode.HighQualityBicubic;                       gfx.SmoothingMode = SmoothingMode.HighQuality;                         int i = 0;                         // get tiles & combine into one                       lock(tileArea)                       {                          foreach(var p in tileArea)                          {                             if(bg.CancellationPending)                             {                                e.Cancel = true;                                return;                             }                               int pc = (int)(((double)++i / tileArea.Count) * 100);                             bg.ReportProgress(pc' p);                               foreach(var tp in info.Type.Overlays)                             {                                Exception ex;                                GMapImage tile;                                  // tile number inversion(BottomLeft -> TopLeft) for pergo maps                                if(tp.InvertedAxisY)                                {                                   tile = GMaps.Instance.GetImageFrom(tp' new GPoint(p.X' maxOfTiles.Height - p.Y)' info.Zoom' out ex) as GMapImage;                                }                                else // ok                                {                                   tile = GMaps.Instance.GetImageFrom(tp' p' info.Zoom' out ex) as GMapImage;                                }                                  if(tile != null)                                {                                   using(tile)                                   {                                      long x = p.X * info.Type.Projection.TileSize.Width - topLeftPx.X + padding;                                      long y = p.Y * info.Type.Projection.TileSize.Width - topLeftPx.Y + padding;                                      {                                         gfx.DrawImage(tile.Img' x' y' info.Type.Projection.TileSize.Width' info.Type.Projection.TileSize.Height);                                      }                                   }                                }                             }                          }                       }                         // draw routes                       {                          foreach(GMapRoute r in Main.routes.Routes)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw polygons                       {                          foreach(GMapPolygon r in Main.polygons.Polygons)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      rp.CloseFigure();                                        gfx.FillPath(r.Fill' rp);                                        gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw markers                       {                          foreach(GMapMarker r in Main.objects.Markers)                          {                             if(r.IsVisible)                             {                                var pr = r.Position;                                GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                  px.Offset(padding' padding);                                px.Offset(-topLeftPx.X' -topLeftPx.Y);                                px.Offset(r.Offset.X' r.Offset.Y);                                  gfx.ResetTransform();                                gfx.TranslateTransform(-r.LocalPosition.X' -r.LocalPosition.Y);                                gfx.TranslateTransform((int)px.X' (int)px.Y);                                  r.OnRender(gfx);                             }                          }                            // tooltips above                          foreach(GMapMarker m in Main.objects.Markers)                          {                             if(m.IsVisible && m.ToolTip != null && m.IsVisible)                             {                                if(!string.IsNullOrEmpty(m.ToolTipText))                                {                                   var pr = m.Position;                                   GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                     px.Offset(padding' padding);                                   px.Offset(-topLeftPx.X' -topLeftPx.Y);                                   px.Offset(m.Offset.X' m.Offset.Y);                                     gfx.ResetTransform();                                   gfx.TranslateTransform(-m.LocalPosition.X' -m.LocalPosition.Y);                                   gfx.TranslateTransform((int)px.X' (int)px.Y);                                     m.ToolTip.OnRender(gfx);                                }                             }                          }                          gfx.ResetTransform();                       }                         // draw info                       if(!info.MakeWorldFile)                       {                          System.Drawing.Rectangle rect = new System.Drawing.Rectangle();                          {                             rect.Location = new System.Drawing.Point(padding' padding);                             rect.Size = new System.Drawing.Size((int)pxDelta.X' (int)pxDelta.Y);                          }                            using(Font f = new Font(FontFamily.GenericSansSerif' 9' FontStyle.Bold))                          {                             // draw bounds & coordinates                             using(Pen p = new Pen(Brushes.DimGray' 3))                             {                                p.DashStyle = System.Drawing.Drawing2D.DashStyle.DashDot;                                  gfx.DrawRectangle(p' rect);                                  string topleft = info.Area.LocationTopLeft.ToString();                                SizeF s = gfx.MeasureString(topleft' f);                                  gfx.DrawString(topleft' f' p.Brush' rect.X + s.Height / 2' rect.Y + s.Height / 2);                                  string rightBottom = new PointLatLng(info.Area.Bottom' info.Area.Right).ToString();                                SizeF s2 = gfx.MeasureString(rightBottom' f);                                  gfx.DrawString(rightBottom' f' p.Brush' rect.Right - s2.Width - s2.Height / 2' rect.Bottom - s2.Height - s2.Height / 2);                             }                               // draw scale                             using(Pen p = new Pen(Brushes.Blue' 1))                             {                                double rez = info.Type.Projection.GetGroundResolution(info.Zoom' info.Area.Bottom);                                int px100 = (int)(100.0 / rez); // 100 meters                                int px1000 = (int)(1000.0 / rez); // 1km                                     gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px1000' 10);                                gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px100' 10);                                  string leftBottom = "scale: 100m | 1Km";                                SizeF s = gfx.MeasureString(leftBottom' f);                                gfx.DrawString(leftBottom' f' p.Brush' rect.X + 10' rect.Bottom - s.Height - 20);                             }                          }                       }                    }                      bmpDestination.Save(bigImage' ImageFormat.Jpeg);                 }              }                //The worldfile for the original image is:                //0.000067897543      // the horizontal size of a pixel in coordinate units (longitude degrees in this case);              //0.0000000              //0.0000000              //-0.0000554613012    // the comparable vertical pixel size in latitude degrees' negative because latitude decreases as you go from top to bottom in the image.              //-111.743323868834   // longitude of the pixel in the upper-left-hand corner.              //35.1254392635083    // latitude of the pixel in the upper-left-hand corner.                // generate world file              if(info.MakeWorldFile)              {                 string wf = bigImage + "w";                 using(StreamWriter world = File.CreateText(wf))                 {                    world.WriteLine("{0:0.000000000000}"' (info.Area.WidthLng / pxDelta.X));                    world.WriteLine("0.0000000");                    world.WriteLine("0.0000000");                    world.WriteLine("{0:0.000000000000}"' (-info.Area.HeightLat / pxDelta.Y));                    world.WriteLine("{0:0.000000000000}"' info.Area.Left);                    world.WriteLine("{0:0.000000000000}"' info.Area.Top);                    world.Close();                 }              }                if(info.MakeKmz)              {                 var kmzFile = Path.GetDirectoryName(bigImage) + Path.DirectorySeparatorChar + Path.GetFileNameWithoutExtension(bigImage) + ".kmz";                 e.Result = kmzFile;                   using(ZipStorer zip = ZipStorer.Create(kmzFile' "GMap.NET"))                 {                    zip.AddFile(ZipStorer.Compression.Store' bigImage' "files/map.jpg"' "map");                      using(var readme = new MemoryStream(                      Encoding.UTF8.GetBytes(                       string.Format(CultureInfo.InvariantCulture' @"<?xml version=""1.0"" encoding=""UTF-8""?>   <kml xmlns=""http://www.opengis.net/kml/2.2"" xmlns:gx=""http://www.google.com/kml/ext/2.2"" xmlns:kml=""http://www.opengis.net/kml/2.2"" xmlns:atom=""http://www.w3.org/2005/Atom"">  <GroundOverlay>  	<name>{8}</name>  	<LookAt>  		<longitude>{6}</longitude>  		<latitude>{7}</latitude>  		<altitude>0</altitude>  		<heading>0</heading>  		<tilt>0</tilt>  		<range>69327.55500845652</range>  	</LookAt>  	<color>91ffffff</color>  	<Icon>  		<href>files/map.jpg</href>  	</Icon>  	<gx:LatLonQuad>  		<coordinates>  			{0}'{1}'0 {2}'{3}'0 {4}'{5}'0 {6}'{7}'0   		</coordinates>  	</gx:LatLonQuad>  </GroundOverlay>  </kml>"' info.Area.Left' info.Area.Bottom'           info.Area.Right' info.Area.Bottom'           info.Area.Right' info.Area.Top'           info.Area.Left' info.Area.Top'           kmzFile))))                    {                         zip.AddStream(ZipStorer.Compression.Store' "doc.kml"' readme' DateTime.Now' "kml");                       zip.Close();                    }                 }              }           }
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,bg_DoWork,The following statement contains a magic number: if(!info.Area.IsEmpty)           {              string bigImage = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory) + Path.DirectorySeparatorChar + "GMap at zoom " + info.Zoom + " - " + info.Type + "-" + DateTime.Now.Ticks + ".jpg";              e.Result = bigImage;                // current area              GPoint topLeftPx = info.Type.Projection.FromLatLngToPixel(info.Area.LocationTopLeft' info.Zoom);              GPoint rightButtomPx = info.Type.Projection.FromLatLngToPixel(info.Area.Bottom' info.Area.Right' info.Zoom);              GPoint pxDelta = new GPoint(rightButtomPx.X - topLeftPx.X' rightButtomPx.Y - topLeftPx.Y);              GMap.NET.GSize maxOfTiles = info.Type.Projection.GetTileMatrixMaxXY(info.Zoom);                int padding = info.MakeWorldFile || info.MakeKmz ? 0 : 22;              {                 using(Bitmap bmpDestination = new Bitmap((int)(pxDelta.X + padding * 2)' (int)(pxDelta.Y + padding * 2)))                 {                    using(Graphics gfx = Graphics.FromImage(bmpDestination))                    {                       gfx.InterpolationMode = InterpolationMode.HighQualityBicubic;                       gfx.SmoothingMode = SmoothingMode.HighQuality;                         int i = 0;                         // get tiles & combine into one                       lock(tileArea)                       {                          foreach(var p in tileArea)                          {                             if(bg.CancellationPending)                             {                                e.Cancel = true;                                return;                             }                               int pc = (int)(((double)++i / tileArea.Count) * 100);                             bg.ReportProgress(pc' p);                               foreach(var tp in info.Type.Overlays)                             {                                Exception ex;                                GMapImage tile;                                  // tile number inversion(BottomLeft -> TopLeft) for pergo maps                                if(tp.InvertedAxisY)                                {                                   tile = GMaps.Instance.GetImageFrom(tp' new GPoint(p.X' maxOfTiles.Height - p.Y)' info.Zoom' out ex) as GMapImage;                                }                                else // ok                                {                                   tile = GMaps.Instance.GetImageFrom(tp' p' info.Zoom' out ex) as GMapImage;                                }                                  if(tile != null)                                {                                   using(tile)                                   {                                      long x = p.X * info.Type.Projection.TileSize.Width - topLeftPx.X + padding;                                      long y = p.Y * info.Type.Projection.TileSize.Width - topLeftPx.Y + padding;                                      {                                         gfx.DrawImage(tile.Img' x' y' info.Type.Projection.TileSize.Width' info.Type.Projection.TileSize.Height);                                      }                                   }                                }                             }                          }                       }                         // draw routes                       {                          foreach(GMapRoute r in Main.routes.Routes)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw polygons                       {                          foreach(GMapPolygon r in Main.polygons.Polygons)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      rp.CloseFigure();                                        gfx.FillPath(r.Fill' rp);                                        gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw markers                       {                          foreach(GMapMarker r in Main.objects.Markers)                          {                             if(r.IsVisible)                             {                                var pr = r.Position;                                GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                  px.Offset(padding' padding);                                px.Offset(-topLeftPx.X' -topLeftPx.Y);                                px.Offset(r.Offset.X' r.Offset.Y);                                  gfx.ResetTransform();                                gfx.TranslateTransform(-r.LocalPosition.X' -r.LocalPosition.Y);                                gfx.TranslateTransform((int)px.X' (int)px.Y);                                  r.OnRender(gfx);                             }                          }                            // tooltips above                          foreach(GMapMarker m in Main.objects.Markers)                          {                             if(m.IsVisible && m.ToolTip != null && m.IsVisible)                             {                                if(!string.IsNullOrEmpty(m.ToolTipText))                                {                                   var pr = m.Position;                                   GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                     px.Offset(padding' padding);                                   px.Offset(-topLeftPx.X' -topLeftPx.Y);                                   px.Offset(m.Offset.X' m.Offset.Y);                                     gfx.ResetTransform();                                   gfx.TranslateTransform(-m.LocalPosition.X' -m.LocalPosition.Y);                                   gfx.TranslateTransform((int)px.X' (int)px.Y);                                     m.ToolTip.OnRender(gfx);                                }                             }                          }                          gfx.ResetTransform();                       }                         // draw info                       if(!info.MakeWorldFile)                       {                          System.Drawing.Rectangle rect = new System.Drawing.Rectangle();                          {                             rect.Location = new System.Drawing.Point(padding' padding);                             rect.Size = new System.Drawing.Size((int)pxDelta.X' (int)pxDelta.Y);                          }                            using(Font f = new Font(FontFamily.GenericSansSerif' 9' FontStyle.Bold))                          {                             // draw bounds & coordinates                             using(Pen p = new Pen(Brushes.DimGray' 3))                             {                                p.DashStyle = System.Drawing.Drawing2D.DashStyle.DashDot;                                  gfx.DrawRectangle(p' rect);                                  string topleft = info.Area.LocationTopLeft.ToString();                                SizeF s = gfx.MeasureString(topleft' f);                                  gfx.DrawString(topleft' f' p.Brush' rect.X + s.Height / 2' rect.Y + s.Height / 2);                                  string rightBottom = new PointLatLng(info.Area.Bottom' info.Area.Right).ToString();                                SizeF s2 = gfx.MeasureString(rightBottom' f);                                  gfx.DrawString(rightBottom' f' p.Brush' rect.Right - s2.Width - s2.Height / 2' rect.Bottom - s2.Height - s2.Height / 2);                             }                               // draw scale                             using(Pen p = new Pen(Brushes.Blue' 1))                             {                                double rez = info.Type.Projection.GetGroundResolution(info.Zoom' info.Area.Bottom);                                int px100 = (int)(100.0 / rez); // 100 meters                                int px1000 = (int)(1000.0 / rez); // 1km                                     gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px1000' 10);                                gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px100' 10);                                  string leftBottom = "scale: 100m | 1Km";                                SizeF s = gfx.MeasureString(leftBottom' f);                                gfx.DrawString(leftBottom' f' p.Brush' rect.X + 10' rect.Bottom - s.Height - 20);                             }                          }                       }                    }                      bmpDestination.Save(bigImage' ImageFormat.Jpeg);                 }              }                //The worldfile for the original image is:                //0.000067897543      // the horizontal size of a pixel in coordinate units (longitude degrees in this case);              //0.0000000              //0.0000000              //-0.0000554613012    // the comparable vertical pixel size in latitude degrees' negative because latitude decreases as you go from top to bottom in the image.              //-111.743323868834   // longitude of the pixel in the upper-left-hand corner.              //35.1254392635083    // latitude of the pixel in the upper-left-hand corner.                // generate world file              if(info.MakeWorldFile)              {                 string wf = bigImage + "w";                 using(StreamWriter world = File.CreateText(wf))                 {                    world.WriteLine("{0:0.000000000000}"' (info.Area.WidthLng / pxDelta.X));                    world.WriteLine("0.0000000");                    world.WriteLine("0.0000000");                    world.WriteLine("{0:0.000000000000}"' (-info.Area.HeightLat / pxDelta.Y));                    world.WriteLine("{0:0.000000000000}"' info.Area.Left);                    world.WriteLine("{0:0.000000000000}"' info.Area.Top);                    world.Close();                 }              }                if(info.MakeKmz)              {                 var kmzFile = Path.GetDirectoryName(bigImage) + Path.DirectorySeparatorChar + Path.GetFileNameWithoutExtension(bigImage) + ".kmz";                 e.Result = kmzFile;                   using(ZipStorer zip = ZipStorer.Create(kmzFile' "GMap.NET"))                 {                    zip.AddFile(ZipStorer.Compression.Store' bigImage' "files/map.jpg"' "map");                      using(var readme = new MemoryStream(                      Encoding.UTF8.GetBytes(                       string.Format(CultureInfo.InvariantCulture' @"<?xml version=""1.0"" encoding=""UTF-8""?>   <kml xmlns=""http://www.opengis.net/kml/2.2"" xmlns:gx=""http://www.google.com/kml/ext/2.2"" xmlns:kml=""http://www.opengis.net/kml/2.2"" xmlns:atom=""http://www.w3.org/2005/Atom"">  <GroundOverlay>  	<name>{8}</name>  	<LookAt>  		<longitude>{6}</longitude>  		<latitude>{7}</latitude>  		<altitude>0</altitude>  		<heading>0</heading>  		<tilt>0</tilt>  		<range>69327.55500845652</range>  	</LookAt>  	<color>91ffffff</color>  	<Icon>  		<href>files/map.jpg</href>  	</Icon>  	<gx:LatLonQuad>  		<coordinates>  			{0}'{1}'0 {2}'{3}'0 {4}'{5}'0 {6}'{7}'0   		</coordinates>  	</gx:LatLonQuad>  </GroundOverlay>  </kml>"' info.Area.Left' info.Area.Bottom'           info.Area.Right' info.Area.Bottom'           info.Area.Right' info.Area.Top'           info.Area.Left' info.Area.Top'           kmzFile))))                    {                         zip.AddStream(ZipStorer.Compression.Store' "doc.kml"' readme' DateTime.Now' "kml");                       zip.Close();                    }                 }              }           }
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,bg_DoWork,The following statement contains a magic number: if(!info.Area.IsEmpty)           {              string bigImage = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory) + Path.DirectorySeparatorChar + "GMap at zoom " + info.Zoom + " - " + info.Type + "-" + DateTime.Now.Ticks + ".jpg";              e.Result = bigImage;                // current area              GPoint topLeftPx = info.Type.Projection.FromLatLngToPixel(info.Area.LocationTopLeft' info.Zoom);              GPoint rightButtomPx = info.Type.Projection.FromLatLngToPixel(info.Area.Bottom' info.Area.Right' info.Zoom);              GPoint pxDelta = new GPoint(rightButtomPx.X - topLeftPx.X' rightButtomPx.Y - topLeftPx.Y);              GMap.NET.GSize maxOfTiles = info.Type.Projection.GetTileMatrixMaxXY(info.Zoom);                int padding = info.MakeWorldFile || info.MakeKmz ? 0 : 22;              {                 using(Bitmap bmpDestination = new Bitmap((int)(pxDelta.X + padding * 2)' (int)(pxDelta.Y + padding * 2)))                 {                    using(Graphics gfx = Graphics.FromImage(bmpDestination))                    {                       gfx.InterpolationMode = InterpolationMode.HighQualityBicubic;                       gfx.SmoothingMode = SmoothingMode.HighQuality;                         int i = 0;                         // get tiles & combine into one                       lock(tileArea)                       {                          foreach(var p in tileArea)                          {                             if(bg.CancellationPending)                             {                                e.Cancel = true;                                return;                             }                               int pc = (int)(((double)++i / tileArea.Count) * 100);                             bg.ReportProgress(pc' p);                               foreach(var tp in info.Type.Overlays)                             {                                Exception ex;                                GMapImage tile;                                  // tile number inversion(BottomLeft -> TopLeft) for pergo maps                                if(tp.InvertedAxisY)                                {                                   tile = GMaps.Instance.GetImageFrom(tp' new GPoint(p.X' maxOfTiles.Height - p.Y)' info.Zoom' out ex) as GMapImage;                                }                                else // ok                                {                                   tile = GMaps.Instance.GetImageFrom(tp' p' info.Zoom' out ex) as GMapImage;                                }                                  if(tile != null)                                {                                   using(tile)                                   {                                      long x = p.X * info.Type.Projection.TileSize.Width - topLeftPx.X + padding;                                      long y = p.Y * info.Type.Projection.TileSize.Width - topLeftPx.Y + padding;                                      {                                         gfx.DrawImage(tile.Img' x' y' info.Type.Projection.TileSize.Width' info.Type.Projection.TileSize.Height);                                      }                                   }                                }                             }                          }                       }                         // draw routes                       {                          foreach(GMapRoute r in Main.routes.Routes)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw polygons                       {                          foreach(GMapPolygon r in Main.polygons.Polygons)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      rp.CloseFigure();                                        gfx.FillPath(r.Fill' rp);                                        gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw markers                       {                          foreach(GMapMarker r in Main.objects.Markers)                          {                             if(r.IsVisible)                             {                                var pr = r.Position;                                GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                  px.Offset(padding' padding);                                px.Offset(-topLeftPx.X' -topLeftPx.Y);                                px.Offset(r.Offset.X' r.Offset.Y);                                  gfx.ResetTransform();                                gfx.TranslateTransform(-r.LocalPosition.X' -r.LocalPosition.Y);                                gfx.TranslateTransform((int)px.X' (int)px.Y);                                  r.OnRender(gfx);                             }                          }                            // tooltips above                          foreach(GMapMarker m in Main.objects.Markers)                          {                             if(m.IsVisible && m.ToolTip != null && m.IsVisible)                             {                                if(!string.IsNullOrEmpty(m.ToolTipText))                                {                                   var pr = m.Position;                                   GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                     px.Offset(padding' padding);                                   px.Offset(-topLeftPx.X' -topLeftPx.Y);                                   px.Offset(m.Offset.X' m.Offset.Y);                                     gfx.ResetTransform();                                   gfx.TranslateTransform(-m.LocalPosition.X' -m.LocalPosition.Y);                                   gfx.TranslateTransform((int)px.X' (int)px.Y);                                     m.ToolTip.OnRender(gfx);                                }                             }                          }                          gfx.ResetTransform();                       }                         // draw info                       if(!info.MakeWorldFile)                       {                          System.Drawing.Rectangle rect = new System.Drawing.Rectangle();                          {                             rect.Location = new System.Drawing.Point(padding' padding);                             rect.Size = new System.Drawing.Size((int)pxDelta.X' (int)pxDelta.Y);                          }                            using(Font f = new Font(FontFamily.GenericSansSerif' 9' FontStyle.Bold))                          {                             // draw bounds & coordinates                             using(Pen p = new Pen(Brushes.DimGray' 3))                             {                                p.DashStyle = System.Drawing.Drawing2D.DashStyle.DashDot;                                  gfx.DrawRectangle(p' rect);                                  string topleft = info.Area.LocationTopLeft.ToString();                                SizeF s = gfx.MeasureString(topleft' f);                                  gfx.DrawString(topleft' f' p.Brush' rect.X + s.Height / 2' rect.Y + s.Height / 2);                                  string rightBottom = new PointLatLng(info.Area.Bottom' info.Area.Right).ToString();                                SizeF s2 = gfx.MeasureString(rightBottom' f);                                  gfx.DrawString(rightBottom' f' p.Brush' rect.Right - s2.Width - s2.Height / 2' rect.Bottom - s2.Height - s2.Height / 2);                             }                               // draw scale                             using(Pen p = new Pen(Brushes.Blue' 1))                             {                                double rez = info.Type.Projection.GetGroundResolution(info.Zoom' info.Area.Bottom);                                int px100 = (int)(100.0 / rez); // 100 meters                                int px1000 = (int)(1000.0 / rez); // 1km                                     gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px1000' 10);                                gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px100' 10);                                  string leftBottom = "scale: 100m | 1Km";                                SizeF s = gfx.MeasureString(leftBottom' f);                                gfx.DrawString(leftBottom' f' p.Brush' rect.X + 10' rect.Bottom - s.Height - 20);                             }                          }                       }                    }                      bmpDestination.Save(bigImage' ImageFormat.Jpeg);                 }              }                //The worldfile for the original image is:                //0.000067897543      // the horizontal size of a pixel in coordinate units (longitude degrees in this case);              //0.0000000              //0.0000000              //-0.0000554613012    // the comparable vertical pixel size in latitude degrees' negative because latitude decreases as you go from top to bottom in the image.              //-111.743323868834   // longitude of the pixel in the upper-left-hand corner.              //35.1254392635083    // latitude of the pixel in the upper-left-hand corner.                // generate world file              if(info.MakeWorldFile)              {                 string wf = bigImage + "w";                 using(StreamWriter world = File.CreateText(wf))                 {                    world.WriteLine("{0:0.000000000000}"' (info.Area.WidthLng / pxDelta.X));                    world.WriteLine("0.0000000");                    world.WriteLine("0.0000000");                    world.WriteLine("{0:0.000000000000}"' (-info.Area.HeightLat / pxDelta.Y));                    world.WriteLine("{0:0.000000000000}"' info.Area.Left);                    world.WriteLine("{0:0.000000000000}"' info.Area.Top);                    world.Close();                 }              }                if(info.MakeKmz)              {                 var kmzFile = Path.GetDirectoryName(bigImage) + Path.DirectorySeparatorChar + Path.GetFileNameWithoutExtension(bigImage) + ".kmz";                 e.Result = kmzFile;                   using(ZipStorer zip = ZipStorer.Create(kmzFile' "GMap.NET"))                 {                    zip.AddFile(ZipStorer.Compression.Store' bigImage' "files/map.jpg"' "map");                      using(var readme = new MemoryStream(                      Encoding.UTF8.GetBytes(                       string.Format(CultureInfo.InvariantCulture' @"<?xml version=""1.0"" encoding=""UTF-8""?>   <kml xmlns=""http://www.opengis.net/kml/2.2"" xmlns:gx=""http://www.google.com/kml/ext/2.2"" xmlns:kml=""http://www.opengis.net/kml/2.2"" xmlns:atom=""http://www.w3.org/2005/Atom"">  <GroundOverlay>  	<name>{8}</name>  	<LookAt>  		<longitude>{6}</longitude>  		<latitude>{7}</latitude>  		<altitude>0</altitude>  		<heading>0</heading>  		<tilt>0</tilt>  		<range>69327.55500845652</range>  	</LookAt>  	<color>91ffffff</color>  	<Icon>  		<href>files/map.jpg</href>  	</Icon>  	<gx:LatLonQuad>  		<coordinates>  			{0}'{1}'0 {2}'{3}'0 {4}'{5}'0 {6}'{7}'0   		</coordinates>  	</gx:LatLonQuad>  </GroundOverlay>  </kml>"' info.Area.Left' info.Area.Bottom'           info.Area.Right' info.Area.Bottom'           info.Area.Right' info.Area.Top'           info.Area.Left' info.Area.Top'           kmzFile))))                    {                         zip.AddStream(ZipStorer.Compression.Store' "doc.kml"' readme' DateTime.Now' "kml");                       zip.Close();                    }                 }              }           }
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,bg_DoWork,The following statement contains a magic number: if(!info.Area.IsEmpty)           {              string bigImage = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory) + Path.DirectorySeparatorChar + "GMap at zoom " + info.Zoom + " - " + info.Type + "-" + DateTime.Now.Ticks + ".jpg";              e.Result = bigImage;                // current area              GPoint topLeftPx = info.Type.Projection.FromLatLngToPixel(info.Area.LocationTopLeft' info.Zoom);              GPoint rightButtomPx = info.Type.Projection.FromLatLngToPixel(info.Area.Bottom' info.Area.Right' info.Zoom);              GPoint pxDelta = new GPoint(rightButtomPx.X - topLeftPx.X' rightButtomPx.Y - topLeftPx.Y);              GMap.NET.GSize maxOfTiles = info.Type.Projection.GetTileMatrixMaxXY(info.Zoom);                int padding = info.MakeWorldFile || info.MakeKmz ? 0 : 22;              {                 using(Bitmap bmpDestination = new Bitmap((int)(pxDelta.X + padding * 2)' (int)(pxDelta.Y + padding * 2)))                 {                    using(Graphics gfx = Graphics.FromImage(bmpDestination))                    {                       gfx.InterpolationMode = InterpolationMode.HighQualityBicubic;                       gfx.SmoothingMode = SmoothingMode.HighQuality;                         int i = 0;                         // get tiles & combine into one                       lock(tileArea)                       {                          foreach(var p in tileArea)                          {                             if(bg.CancellationPending)                             {                                e.Cancel = true;                                return;                             }                               int pc = (int)(((double)++i / tileArea.Count) * 100);                             bg.ReportProgress(pc' p);                               foreach(var tp in info.Type.Overlays)                             {                                Exception ex;                                GMapImage tile;                                  // tile number inversion(BottomLeft -> TopLeft) for pergo maps                                if(tp.InvertedAxisY)                                {                                   tile = GMaps.Instance.GetImageFrom(tp' new GPoint(p.X' maxOfTiles.Height - p.Y)' info.Zoom' out ex) as GMapImage;                                }                                else // ok                                {                                   tile = GMaps.Instance.GetImageFrom(tp' p' info.Zoom' out ex) as GMapImage;                                }                                  if(tile != null)                                {                                   using(tile)                                   {                                      long x = p.X * info.Type.Projection.TileSize.Width - topLeftPx.X + padding;                                      long y = p.Y * info.Type.Projection.TileSize.Width - topLeftPx.Y + padding;                                      {                                         gfx.DrawImage(tile.Img' x' y' info.Type.Projection.TileSize.Width' info.Type.Projection.TileSize.Height);                                      }                                   }                                }                             }                          }                       }                         // draw routes                       {                          foreach(GMapRoute r in Main.routes.Routes)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw polygons                       {                          foreach(GMapPolygon r in Main.polygons.Polygons)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      rp.CloseFigure();                                        gfx.FillPath(r.Fill' rp);                                        gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw markers                       {                          foreach(GMapMarker r in Main.objects.Markers)                          {                             if(r.IsVisible)                             {                                var pr = r.Position;                                GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                  px.Offset(padding' padding);                                px.Offset(-topLeftPx.X' -topLeftPx.Y);                                px.Offset(r.Offset.X' r.Offset.Y);                                  gfx.ResetTransform();                                gfx.TranslateTransform(-r.LocalPosition.X' -r.LocalPosition.Y);                                gfx.TranslateTransform((int)px.X' (int)px.Y);                                  r.OnRender(gfx);                             }                          }                            // tooltips above                          foreach(GMapMarker m in Main.objects.Markers)                          {                             if(m.IsVisible && m.ToolTip != null && m.IsVisible)                             {                                if(!string.IsNullOrEmpty(m.ToolTipText))                                {                                   var pr = m.Position;                                   GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                     px.Offset(padding' padding);                                   px.Offset(-topLeftPx.X' -topLeftPx.Y);                                   px.Offset(m.Offset.X' m.Offset.Y);                                     gfx.ResetTransform();                                   gfx.TranslateTransform(-m.LocalPosition.X' -m.LocalPosition.Y);                                   gfx.TranslateTransform((int)px.X' (int)px.Y);                                     m.ToolTip.OnRender(gfx);                                }                             }                          }                          gfx.ResetTransform();                       }                         // draw info                       if(!info.MakeWorldFile)                       {                          System.Drawing.Rectangle rect = new System.Drawing.Rectangle();                          {                             rect.Location = new System.Drawing.Point(padding' padding);                             rect.Size = new System.Drawing.Size((int)pxDelta.X' (int)pxDelta.Y);                          }                            using(Font f = new Font(FontFamily.GenericSansSerif' 9' FontStyle.Bold))                          {                             // draw bounds & coordinates                             using(Pen p = new Pen(Brushes.DimGray' 3))                             {                                p.DashStyle = System.Drawing.Drawing2D.DashStyle.DashDot;                                  gfx.DrawRectangle(p' rect);                                  string topleft = info.Area.LocationTopLeft.ToString();                                SizeF s = gfx.MeasureString(topleft' f);                                  gfx.DrawString(topleft' f' p.Brush' rect.X + s.Height / 2' rect.Y + s.Height / 2);                                  string rightBottom = new PointLatLng(info.Area.Bottom' info.Area.Right).ToString();                                SizeF s2 = gfx.MeasureString(rightBottom' f);                                  gfx.DrawString(rightBottom' f' p.Brush' rect.Right - s2.Width - s2.Height / 2' rect.Bottom - s2.Height - s2.Height / 2);                             }                               // draw scale                             using(Pen p = new Pen(Brushes.Blue' 1))                             {                                double rez = info.Type.Projection.GetGroundResolution(info.Zoom' info.Area.Bottom);                                int px100 = (int)(100.0 / rez); // 100 meters                                int px1000 = (int)(1000.0 / rez); // 1km                                     gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px1000' 10);                                gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px100' 10);                                  string leftBottom = "scale: 100m | 1Km";                                SizeF s = gfx.MeasureString(leftBottom' f);                                gfx.DrawString(leftBottom' f' p.Brush' rect.X + 10' rect.Bottom - s.Height - 20);                             }                          }                       }                    }                      bmpDestination.Save(bigImage' ImageFormat.Jpeg);                 }              }                //The worldfile for the original image is:                //0.000067897543      // the horizontal size of a pixel in coordinate units (longitude degrees in this case);              //0.0000000              //0.0000000              //-0.0000554613012    // the comparable vertical pixel size in latitude degrees' negative because latitude decreases as you go from top to bottom in the image.              //-111.743323868834   // longitude of the pixel in the upper-left-hand corner.              //35.1254392635083    // latitude of the pixel in the upper-left-hand corner.                // generate world file              if(info.MakeWorldFile)              {                 string wf = bigImage + "w";                 using(StreamWriter world = File.CreateText(wf))                 {                    world.WriteLine("{0:0.000000000000}"' (info.Area.WidthLng / pxDelta.X));                    world.WriteLine("0.0000000");                    world.WriteLine("0.0000000");                    world.WriteLine("{0:0.000000000000}"' (-info.Area.HeightLat / pxDelta.Y));                    world.WriteLine("{0:0.000000000000}"' info.Area.Left);                    world.WriteLine("{0:0.000000000000}"' info.Area.Top);                    world.Close();                 }              }                if(info.MakeKmz)              {                 var kmzFile = Path.GetDirectoryName(bigImage) + Path.DirectorySeparatorChar + Path.GetFileNameWithoutExtension(bigImage) + ".kmz";                 e.Result = kmzFile;                   using(ZipStorer zip = ZipStorer.Create(kmzFile' "GMap.NET"))                 {                    zip.AddFile(ZipStorer.Compression.Store' bigImage' "files/map.jpg"' "map");                      using(var readme = new MemoryStream(                      Encoding.UTF8.GetBytes(                       string.Format(CultureInfo.InvariantCulture' @"<?xml version=""1.0"" encoding=""UTF-8""?>   <kml xmlns=""http://www.opengis.net/kml/2.2"" xmlns:gx=""http://www.google.com/kml/ext/2.2"" xmlns:kml=""http://www.opengis.net/kml/2.2"" xmlns:atom=""http://www.w3.org/2005/Atom"">  <GroundOverlay>  	<name>{8}</name>  	<LookAt>  		<longitude>{6}</longitude>  		<latitude>{7}</latitude>  		<altitude>0</altitude>  		<heading>0</heading>  		<tilt>0</tilt>  		<range>69327.55500845652</range>  	</LookAt>  	<color>91ffffff</color>  	<Icon>  		<href>files/map.jpg</href>  	</Icon>  	<gx:LatLonQuad>  		<coordinates>  			{0}'{1}'0 {2}'{3}'0 {4}'{5}'0 {6}'{7}'0   		</coordinates>  	</gx:LatLonQuad>  </GroundOverlay>  </kml>"' info.Area.Left' info.Area.Bottom'           info.Area.Right' info.Area.Bottom'           info.Area.Right' info.Area.Top'           info.Area.Left' info.Area.Top'           kmzFile))))                    {                         zip.AddStream(ZipStorer.Compression.Store' "doc.kml"' readme' DateTime.Now' "kml");                       zip.Close();                    }                 }              }           }
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,bg_DoWork,The following statement contains a magic number: if(!info.Area.IsEmpty)           {              string bigImage = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory) + Path.DirectorySeparatorChar + "GMap at zoom " + info.Zoom + " - " + info.Type + "-" + DateTime.Now.Ticks + ".jpg";              e.Result = bigImage;                // current area              GPoint topLeftPx = info.Type.Projection.FromLatLngToPixel(info.Area.LocationTopLeft' info.Zoom);              GPoint rightButtomPx = info.Type.Projection.FromLatLngToPixel(info.Area.Bottom' info.Area.Right' info.Zoom);              GPoint pxDelta = new GPoint(rightButtomPx.X - topLeftPx.X' rightButtomPx.Y - topLeftPx.Y);              GMap.NET.GSize maxOfTiles = info.Type.Projection.GetTileMatrixMaxXY(info.Zoom);                int padding = info.MakeWorldFile || info.MakeKmz ? 0 : 22;              {                 using(Bitmap bmpDestination = new Bitmap((int)(pxDelta.X + padding * 2)' (int)(pxDelta.Y + padding * 2)))                 {                    using(Graphics gfx = Graphics.FromImage(bmpDestination))                    {                       gfx.InterpolationMode = InterpolationMode.HighQualityBicubic;                       gfx.SmoothingMode = SmoothingMode.HighQuality;                         int i = 0;                         // get tiles & combine into one                       lock(tileArea)                       {                          foreach(var p in tileArea)                          {                             if(bg.CancellationPending)                             {                                e.Cancel = true;                                return;                             }                               int pc = (int)(((double)++i / tileArea.Count) * 100);                             bg.ReportProgress(pc' p);                               foreach(var tp in info.Type.Overlays)                             {                                Exception ex;                                GMapImage tile;                                  // tile number inversion(BottomLeft -> TopLeft) for pergo maps                                if(tp.InvertedAxisY)                                {                                   tile = GMaps.Instance.GetImageFrom(tp' new GPoint(p.X' maxOfTiles.Height - p.Y)' info.Zoom' out ex) as GMapImage;                                }                                else // ok                                {                                   tile = GMaps.Instance.GetImageFrom(tp' p' info.Zoom' out ex) as GMapImage;                                }                                  if(tile != null)                                {                                   using(tile)                                   {                                      long x = p.X * info.Type.Projection.TileSize.Width - topLeftPx.X + padding;                                      long y = p.Y * info.Type.Projection.TileSize.Width - topLeftPx.Y + padding;                                      {                                         gfx.DrawImage(tile.Img' x' y' info.Type.Projection.TileSize.Width' info.Type.Projection.TileSize.Height);                                      }                                   }                                }                             }                          }                       }                         // draw routes                       {                          foreach(GMapRoute r in Main.routes.Routes)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw polygons                       {                          foreach(GMapPolygon r in Main.polygons.Polygons)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      rp.CloseFigure();                                        gfx.FillPath(r.Fill' rp);                                        gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw markers                       {                          foreach(GMapMarker r in Main.objects.Markers)                          {                             if(r.IsVisible)                             {                                var pr = r.Position;                                GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                  px.Offset(padding' padding);                                px.Offset(-topLeftPx.X' -topLeftPx.Y);                                px.Offset(r.Offset.X' r.Offset.Y);                                  gfx.ResetTransform();                                gfx.TranslateTransform(-r.LocalPosition.X' -r.LocalPosition.Y);                                gfx.TranslateTransform((int)px.X' (int)px.Y);                                  r.OnRender(gfx);                             }                          }                            // tooltips above                          foreach(GMapMarker m in Main.objects.Markers)                          {                             if(m.IsVisible && m.ToolTip != null && m.IsVisible)                             {                                if(!string.IsNullOrEmpty(m.ToolTipText))                                {                                   var pr = m.Position;                                   GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                     px.Offset(padding' padding);                                   px.Offset(-topLeftPx.X' -topLeftPx.Y);                                   px.Offset(m.Offset.X' m.Offset.Y);                                     gfx.ResetTransform();                                   gfx.TranslateTransform(-m.LocalPosition.X' -m.LocalPosition.Y);                                   gfx.TranslateTransform((int)px.X' (int)px.Y);                                     m.ToolTip.OnRender(gfx);                                }                             }                          }                          gfx.ResetTransform();                       }                         // draw info                       if(!info.MakeWorldFile)                       {                          System.Drawing.Rectangle rect = new System.Drawing.Rectangle();                          {                             rect.Location = new System.Drawing.Point(padding' padding);                             rect.Size = new System.Drawing.Size((int)pxDelta.X' (int)pxDelta.Y);                          }                            using(Font f = new Font(FontFamily.GenericSansSerif' 9' FontStyle.Bold))                          {                             // draw bounds & coordinates                             using(Pen p = new Pen(Brushes.DimGray' 3))                             {                                p.DashStyle = System.Drawing.Drawing2D.DashStyle.DashDot;                                  gfx.DrawRectangle(p' rect);                                  string topleft = info.Area.LocationTopLeft.ToString();                                SizeF s = gfx.MeasureString(topleft' f);                                  gfx.DrawString(topleft' f' p.Brush' rect.X + s.Height / 2' rect.Y + s.Height / 2);                                  string rightBottom = new PointLatLng(info.Area.Bottom' info.Area.Right).ToString();                                SizeF s2 = gfx.MeasureString(rightBottom' f);                                  gfx.DrawString(rightBottom' f' p.Brush' rect.Right - s2.Width - s2.Height / 2' rect.Bottom - s2.Height - s2.Height / 2);                             }                               // draw scale                             using(Pen p = new Pen(Brushes.Blue' 1))                             {                                double rez = info.Type.Projection.GetGroundResolution(info.Zoom' info.Area.Bottom);                                int px100 = (int)(100.0 / rez); // 100 meters                                int px1000 = (int)(1000.0 / rez); // 1km                                     gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px1000' 10);                                gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px100' 10);                                  string leftBottom = "scale: 100m | 1Km";                                SizeF s = gfx.MeasureString(leftBottom' f);                                gfx.DrawString(leftBottom' f' p.Brush' rect.X + 10' rect.Bottom - s.Height - 20);                             }                          }                       }                    }                      bmpDestination.Save(bigImage' ImageFormat.Jpeg);                 }              }                //The worldfile for the original image is:                //0.000067897543      // the horizontal size of a pixel in coordinate units (longitude degrees in this case);              //0.0000000              //0.0000000              //-0.0000554613012    // the comparable vertical pixel size in latitude degrees' negative because latitude decreases as you go from top to bottom in the image.              //-111.743323868834   // longitude of the pixel in the upper-left-hand corner.              //35.1254392635083    // latitude of the pixel in the upper-left-hand corner.                // generate world file              if(info.MakeWorldFile)              {                 string wf = bigImage + "w";                 using(StreamWriter world = File.CreateText(wf))                 {                    world.WriteLine("{0:0.000000000000}"' (info.Area.WidthLng / pxDelta.X));                    world.WriteLine("0.0000000");                    world.WriteLine("0.0000000");                    world.WriteLine("{0:0.000000000000}"' (-info.Area.HeightLat / pxDelta.Y));                    world.WriteLine("{0:0.000000000000}"' info.Area.Left);                    world.WriteLine("{0:0.000000000000}"' info.Area.Top);                    world.Close();                 }              }                if(info.MakeKmz)              {                 var kmzFile = Path.GetDirectoryName(bigImage) + Path.DirectorySeparatorChar + Path.GetFileNameWithoutExtension(bigImage) + ".kmz";                 e.Result = kmzFile;                   using(ZipStorer zip = ZipStorer.Create(kmzFile' "GMap.NET"))                 {                    zip.AddFile(ZipStorer.Compression.Store' bigImage' "files/map.jpg"' "map");                      using(var readme = new MemoryStream(                      Encoding.UTF8.GetBytes(                       string.Format(CultureInfo.InvariantCulture' @"<?xml version=""1.0"" encoding=""UTF-8""?>   <kml xmlns=""http://www.opengis.net/kml/2.2"" xmlns:gx=""http://www.google.com/kml/ext/2.2"" xmlns:kml=""http://www.opengis.net/kml/2.2"" xmlns:atom=""http://www.w3.org/2005/Atom"">  <GroundOverlay>  	<name>{8}</name>  	<LookAt>  		<longitude>{6}</longitude>  		<latitude>{7}</latitude>  		<altitude>0</altitude>  		<heading>0</heading>  		<tilt>0</tilt>  		<range>69327.55500845652</range>  	</LookAt>  	<color>91ffffff</color>  	<Icon>  		<href>files/map.jpg</href>  	</Icon>  	<gx:LatLonQuad>  		<coordinates>  			{0}'{1}'0 {2}'{3}'0 {4}'{5}'0 {6}'{7}'0   		</coordinates>  	</gx:LatLonQuad>  </GroundOverlay>  </kml>"' info.Area.Left' info.Area.Bottom'           info.Area.Right' info.Area.Bottom'           info.Area.Right' info.Area.Top'           info.Area.Left' info.Area.Top'           kmzFile))))                    {                         zip.AddStream(ZipStorer.Compression.Store' "doc.kml"' readme' DateTime.Now' "kml");                       zip.Close();                    }                 }              }           }
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,bg_DoWork,The following statement contains a magic number: if(!info.Area.IsEmpty)           {              string bigImage = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory) + Path.DirectorySeparatorChar + "GMap at zoom " + info.Zoom + " - " + info.Type + "-" + DateTime.Now.Ticks + ".jpg";              e.Result = bigImage;                // current area              GPoint topLeftPx = info.Type.Projection.FromLatLngToPixel(info.Area.LocationTopLeft' info.Zoom);              GPoint rightButtomPx = info.Type.Projection.FromLatLngToPixel(info.Area.Bottom' info.Area.Right' info.Zoom);              GPoint pxDelta = new GPoint(rightButtomPx.X - topLeftPx.X' rightButtomPx.Y - topLeftPx.Y);              GMap.NET.GSize maxOfTiles = info.Type.Projection.GetTileMatrixMaxXY(info.Zoom);                int padding = info.MakeWorldFile || info.MakeKmz ? 0 : 22;              {                 using(Bitmap bmpDestination = new Bitmap((int)(pxDelta.X + padding * 2)' (int)(pxDelta.Y + padding * 2)))                 {                    using(Graphics gfx = Graphics.FromImage(bmpDestination))                    {                       gfx.InterpolationMode = InterpolationMode.HighQualityBicubic;                       gfx.SmoothingMode = SmoothingMode.HighQuality;                         int i = 0;                         // get tiles & combine into one                       lock(tileArea)                       {                          foreach(var p in tileArea)                          {                             if(bg.CancellationPending)                             {                                e.Cancel = true;                                return;                             }                               int pc = (int)(((double)++i / tileArea.Count) * 100);                             bg.ReportProgress(pc' p);                               foreach(var tp in info.Type.Overlays)                             {                                Exception ex;                                GMapImage tile;                                  // tile number inversion(BottomLeft -> TopLeft) for pergo maps                                if(tp.InvertedAxisY)                                {                                   tile = GMaps.Instance.GetImageFrom(tp' new GPoint(p.X' maxOfTiles.Height - p.Y)' info.Zoom' out ex) as GMapImage;                                }                                else // ok                                {                                   tile = GMaps.Instance.GetImageFrom(tp' p' info.Zoom' out ex) as GMapImage;                                }                                  if(tile != null)                                {                                   using(tile)                                   {                                      long x = p.X * info.Type.Projection.TileSize.Width - topLeftPx.X + padding;                                      long y = p.Y * info.Type.Projection.TileSize.Width - topLeftPx.Y + padding;                                      {                                         gfx.DrawImage(tile.Img' x' y' info.Type.Projection.TileSize.Width' info.Type.Projection.TileSize.Height);                                      }                                   }                                }                             }                          }                       }                         // draw routes                       {                          foreach(GMapRoute r in Main.routes.Routes)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw polygons                       {                          foreach(GMapPolygon r in Main.polygons.Polygons)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      rp.CloseFigure();                                        gfx.FillPath(r.Fill' rp);                                        gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw markers                       {                          foreach(GMapMarker r in Main.objects.Markers)                          {                             if(r.IsVisible)                             {                                var pr = r.Position;                                GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                  px.Offset(padding' padding);                                px.Offset(-topLeftPx.X' -topLeftPx.Y);                                px.Offset(r.Offset.X' r.Offset.Y);                                  gfx.ResetTransform();                                gfx.TranslateTransform(-r.LocalPosition.X' -r.LocalPosition.Y);                                gfx.TranslateTransform((int)px.X' (int)px.Y);                                  r.OnRender(gfx);                             }                          }                            // tooltips above                          foreach(GMapMarker m in Main.objects.Markers)                          {                             if(m.IsVisible && m.ToolTip != null && m.IsVisible)                             {                                if(!string.IsNullOrEmpty(m.ToolTipText))                                {                                   var pr = m.Position;                                   GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                     px.Offset(padding' padding);                                   px.Offset(-topLeftPx.X' -topLeftPx.Y);                                   px.Offset(m.Offset.X' m.Offset.Y);                                     gfx.ResetTransform();                                   gfx.TranslateTransform(-m.LocalPosition.X' -m.LocalPosition.Y);                                   gfx.TranslateTransform((int)px.X' (int)px.Y);                                     m.ToolTip.OnRender(gfx);                                }                             }                          }                          gfx.ResetTransform();                       }                         // draw info                       if(!info.MakeWorldFile)                       {                          System.Drawing.Rectangle rect = new System.Drawing.Rectangle();                          {                             rect.Location = new System.Drawing.Point(padding' padding);                             rect.Size = new System.Drawing.Size((int)pxDelta.X' (int)pxDelta.Y);                          }                            using(Font f = new Font(FontFamily.GenericSansSerif' 9' FontStyle.Bold))                          {                             // draw bounds & coordinates                             using(Pen p = new Pen(Brushes.DimGray' 3))                             {                                p.DashStyle = System.Drawing.Drawing2D.DashStyle.DashDot;                                  gfx.DrawRectangle(p' rect);                                  string topleft = info.Area.LocationTopLeft.ToString();                                SizeF s = gfx.MeasureString(topleft' f);                                  gfx.DrawString(topleft' f' p.Brush' rect.X + s.Height / 2' rect.Y + s.Height / 2);                                  string rightBottom = new PointLatLng(info.Area.Bottom' info.Area.Right).ToString();                                SizeF s2 = gfx.MeasureString(rightBottom' f);                                  gfx.DrawString(rightBottom' f' p.Brush' rect.Right - s2.Width - s2.Height / 2' rect.Bottom - s2.Height - s2.Height / 2);                             }                               // draw scale                             using(Pen p = new Pen(Brushes.Blue' 1))                             {                                double rez = info.Type.Projection.GetGroundResolution(info.Zoom' info.Area.Bottom);                                int px100 = (int)(100.0 / rez); // 100 meters                                int px1000 = (int)(1000.0 / rez); // 1km                                     gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px1000' 10);                                gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px100' 10);                                  string leftBottom = "scale: 100m | 1Km";                                SizeF s = gfx.MeasureString(leftBottom' f);                                gfx.DrawString(leftBottom' f' p.Brush' rect.X + 10' rect.Bottom - s.Height - 20);                             }                          }                       }                    }                      bmpDestination.Save(bigImage' ImageFormat.Jpeg);                 }              }                //The worldfile for the original image is:                //0.000067897543      // the horizontal size of a pixel in coordinate units (longitude degrees in this case);              //0.0000000              //0.0000000              //-0.0000554613012    // the comparable vertical pixel size in latitude degrees' negative because latitude decreases as you go from top to bottom in the image.              //-111.743323868834   // longitude of the pixel in the upper-left-hand corner.              //35.1254392635083    // latitude of the pixel in the upper-left-hand corner.                // generate world file              if(info.MakeWorldFile)              {                 string wf = bigImage + "w";                 using(StreamWriter world = File.CreateText(wf))                 {                    world.WriteLine("{0:0.000000000000}"' (info.Area.WidthLng / pxDelta.X));                    world.WriteLine("0.0000000");                    world.WriteLine("0.0000000");                    world.WriteLine("{0:0.000000000000}"' (-info.Area.HeightLat / pxDelta.Y));                    world.WriteLine("{0:0.000000000000}"' info.Area.Left);                    world.WriteLine("{0:0.000000000000}"' info.Area.Top);                    world.Close();                 }              }                if(info.MakeKmz)              {                 var kmzFile = Path.GetDirectoryName(bigImage) + Path.DirectorySeparatorChar + Path.GetFileNameWithoutExtension(bigImage) + ".kmz";                 e.Result = kmzFile;                   using(ZipStorer zip = ZipStorer.Create(kmzFile' "GMap.NET"))                 {                    zip.AddFile(ZipStorer.Compression.Store' bigImage' "files/map.jpg"' "map");                      using(var readme = new MemoryStream(                      Encoding.UTF8.GetBytes(                       string.Format(CultureInfo.InvariantCulture' @"<?xml version=""1.0"" encoding=""UTF-8""?>   <kml xmlns=""http://www.opengis.net/kml/2.2"" xmlns:gx=""http://www.google.com/kml/ext/2.2"" xmlns:kml=""http://www.opengis.net/kml/2.2"" xmlns:atom=""http://www.w3.org/2005/Atom"">  <GroundOverlay>  	<name>{8}</name>  	<LookAt>  		<longitude>{6}</longitude>  		<latitude>{7}</latitude>  		<altitude>0</altitude>  		<heading>0</heading>  		<tilt>0</tilt>  		<range>69327.55500845652</range>  	</LookAt>  	<color>91ffffff</color>  	<Icon>  		<href>files/map.jpg</href>  	</Icon>  	<gx:LatLonQuad>  		<coordinates>  			{0}'{1}'0 {2}'{3}'0 {4}'{5}'0 {6}'{7}'0   		</coordinates>  	</gx:LatLonQuad>  </GroundOverlay>  </kml>"' info.Area.Left' info.Area.Bottom'           info.Area.Right' info.Area.Bottom'           info.Area.Right' info.Area.Top'           info.Area.Left' info.Area.Top'           kmzFile))))                    {                         zip.AddStream(ZipStorer.Compression.Store' "doc.kml"' readme' DateTime.Now' "kml");                       zip.Close();                    }                 }              }           }
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,bg_DoWork,The following statement contains a magic number: if(!info.Area.IsEmpty)           {              string bigImage = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory) + Path.DirectorySeparatorChar + "GMap at zoom " + info.Zoom + " - " + info.Type + "-" + DateTime.Now.Ticks + ".jpg";              e.Result = bigImage;                // current area              GPoint topLeftPx = info.Type.Projection.FromLatLngToPixel(info.Area.LocationTopLeft' info.Zoom);              GPoint rightButtomPx = info.Type.Projection.FromLatLngToPixel(info.Area.Bottom' info.Area.Right' info.Zoom);              GPoint pxDelta = new GPoint(rightButtomPx.X - topLeftPx.X' rightButtomPx.Y - topLeftPx.Y);              GMap.NET.GSize maxOfTiles = info.Type.Projection.GetTileMatrixMaxXY(info.Zoom);                int padding = info.MakeWorldFile || info.MakeKmz ? 0 : 22;              {                 using(Bitmap bmpDestination = new Bitmap((int)(pxDelta.X + padding * 2)' (int)(pxDelta.Y + padding * 2)))                 {                    using(Graphics gfx = Graphics.FromImage(bmpDestination))                    {                       gfx.InterpolationMode = InterpolationMode.HighQualityBicubic;                       gfx.SmoothingMode = SmoothingMode.HighQuality;                         int i = 0;                         // get tiles & combine into one                       lock(tileArea)                       {                          foreach(var p in tileArea)                          {                             if(bg.CancellationPending)                             {                                e.Cancel = true;                                return;                             }                               int pc = (int)(((double)++i / tileArea.Count) * 100);                             bg.ReportProgress(pc' p);                               foreach(var tp in info.Type.Overlays)                             {                                Exception ex;                                GMapImage tile;                                  // tile number inversion(BottomLeft -> TopLeft) for pergo maps                                if(tp.InvertedAxisY)                                {                                   tile = GMaps.Instance.GetImageFrom(tp' new GPoint(p.X' maxOfTiles.Height - p.Y)' info.Zoom' out ex) as GMapImage;                                }                                else // ok                                {                                   tile = GMaps.Instance.GetImageFrom(tp' p' info.Zoom' out ex) as GMapImage;                                }                                  if(tile != null)                                {                                   using(tile)                                   {                                      long x = p.X * info.Type.Projection.TileSize.Width - topLeftPx.X + padding;                                      long y = p.Y * info.Type.Projection.TileSize.Width - topLeftPx.Y + padding;                                      {                                         gfx.DrawImage(tile.Img' x' y' info.Type.Projection.TileSize.Width' info.Type.Projection.TileSize.Height);                                      }                                   }                                }                             }                          }                       }                         // draw routes                       {                          foreach(GMapRoute r in Main.routes.Routes)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw polygons                       {                          foreach(GMapPolygon r in Main.polygons.Polygons)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      rp.CloseFigure();                                        gfx.FillPath(r.Fill' rp);                                        gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw markers                       {                          foreach(GMapMarker r in Main.objects.Markers)                          {                             if(r.IsVisible)                             {                                var pr = r.Position;                                GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                  px.Offset(padding' padding);                                px.Offset(-topLeftPx.X' -topLeftPx.Y);                                px.Offset(r.Offset.X' r.Offset.Y);                                  gfx.ResetTransform();                                gfx.TranslateTransform(-r.LocalPosition.X' -r.LocalPosition.Y);                                gfx.TranslateTransform((int)px.X' (int)px.Y);                                  r.OnRender(gfx);                             }                          }                            // tooltips above                          foreach(GMapMarker m in Main.objects.Markers)                          {                             if(m.IsVisible && m.ToolTip != null && m.IsVisible)                             {                                if(!string.IsNullOrEmpty(m.ToolTipText))                                {                                   var pr = m.Position;                                   GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                     px.Offset(padding' padding);                                   px.Offset(-topLeftPx.X' -topLeftPx.Y);                                   px.Offset(m.Offset.X' m.Offset.Y);                                     gfx.ResetTransform();                                   gfx.TranslateTransform(-m.LocalPosition.X' -m.LocalPosition.Y);                                   gfx.TranslateTransform((int)px.X' (int)px.Y);                                     m.ToolTip.OnRender(gfx);                                }                             }                          }                          gfx.ResetTransform();                       }                         // draw info                       if(!info.MakeWorldFile)                       {                          System.Drawing.Rectangle rect = new System.Drawing.Rectangle();                          {                             rect.Location = new System.Drawing.Point(padding' padding);                             rect.Size = new System.Drawing.Size((int)pxDelta.X' (int)pxDelta.Y);                          }                            using(Font f = new Font(FontFamily.GenericSansSerif' 9' FontStyle.Bold))                          {                             // draw bounds & coordinates                             using(Pen p = new Pen(Brushes.DimGray' 3))                             {                                p.DashStyle = System.Drawing.Drawing2D.DashStyle.DashDot;                                  gfx.DrawRectangle(p' rect);                                  string topleft = info.Area.LocationTopLeft.ToString();                                SizeF s = gfx.MeasureString(topleft' f);                                  gfx.DrawString(topleft' f' p.Brush' rect.X + s.Height / 2' rect.Y + s.Height / 2);                                  string rightBottom = new PointLatLng(info.Area.Bottom' info.Area.Right).ToString();                                SizeF s2 = gfx.MeasureString(rightBottom' f);                                  gfx.DrawString(rightBottom' f' p.Brush' rect.Right - s2.Width - s2.Height / 2' rect.Bottom - s2.Height - s2.Height / 2);                             }                               // draw scale                             using(Pen p = new Pen(Brushes.Blue' 1))                             {                                double rez = info.Type.Projection.GetGroundResolution(info.Zoom' info.Area.Bottom);                                int px100 = (int)(100.0 / rez); // 100 meters                                int px1000 = (int)(1000.0 / rez); // 1km                                     gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px1000' 10);                                gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px100' 10);                                  string leftBottom = "scale: 100m | 1Km";                                SizeF s = gfx.MeasureString(leftBottom' f);                                gfx.DrawString(leftBottom' f' p.Brush' rect.X + 10' rect.Bottom - s.Height - 20);                             }                          }                       }                    }                      bmpDestination.Save(bigImage' ImageFormat.Jpeg);                 }              }                //The worldfile for the original image is:                //0.000067897543      // the horizontal size of a pixel in coordinate units (longitude degrees in this case);              //0.0000000              //0.0000000              //-0.0000554613012    // the comparable vertical pixel size in latitude degrees' negative because latitude decreases as you go from top to bottom in the image.              //-111.743323868834   // longitude of the pixel in the upper-left-hand corner.              //35.1254392635083    // latitude of the pixel in the upper-left-hand corner.                // generate world file              if(info.MakeWorldFile)              {                 string wf = bigImage + "w";                 using(StreamWriter world = File.CreateText(wf))                 {                    world.WriteLine("{0:0.000000000000}"' (info.Area.WidthLng / pxDelta.X));                    world.WriteLine("0.0000000");                    world.WriteLine("0.0000000");                    world.WriteLine("{0:0.000000000000}"' (-info.Area.HeightLat / pxDelta.Y));                    world.WriteLine("{0:0.000000000000}"' info.Area.Left);                    world.WriteLine("{0:0.000000000000}"' info.Area.Top);                    world.Close();                 }              }                if(info.MakeKmz)              {                 var kmzFile = Path.GetDirectoryName(bigImage) + Path.DirectorySeparatorChar + Path.GetFileNameWithoutExtension(bigImage) + ".kmz";                 e.Result = kmzFile;                   using(ZipStorer zip = ZipStorer.Create(kmzFile' "GMap.NET"))                 {                    zip.AddFile(ZipStorer.Compression.Store' bigImage' "files/map.jpg"' "map");                      using(var readme = new MemoryStream(                      Encoding.UTF8.GetBytes(                       string.Format(CultureInfo.InvariantCulture' @"<?xml version=""1.0"" encoding=""UTF-8""?>   <kml xmlns=""http://www.opengis.net/kml/2.2"" xmlns:gx=""http://www.google.com/kml/ext/2.2"" xmlns:kml=""http://www.opengis.net/kml/2.2"" xmlns:atom=""http://www.w3.org/2005/Atom"">  <GroundOverlay>  	<name>{8}</name>  	<LookAt>  		<longitude>{6}</longitude>  		<latitude>{7}</latitude>  		<altitude>0</altitude>  		<heading>0</heading>  		<tilt>0</tilt>  		<range>69327.55500845652</range>  	</LookAt>  	<color>91ffffff</color>  	<Icon>  		<href>files/map.jpg</href>  	</Icon>  	<gx:LatLonQuad>  		<coordinates>  			{0}'{1}'0 {2}'{3}'0 {4}'{5}'0 {6}'{7}'0   		</coordinates>  	</gx:LatLonQuad>  </GroundOverlay>  </kml>"' info.Area.Left' info.Area.Bottom'           info.Area.Right' info.Area.Bottom'           info.Area.Right' info.Area.Top'           info.Area.Left' info.Area.Top'           kmzFile))))                    {                         zip.AddStream(ZipStorer.Compression.Store' "doc.kml"' readme' DateTime.Now' "kml");                       zip.Close();                    }                 }              }           }
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,bg_DoWork,The following statement contains a magic number: if(!info.Area.IsEmpty)           {              string bigImage = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory) + Path.DirectorySeparatorChar + "GMap at zoom " + info.Zoom + " - " + info.Type + "-" + DateTime.Now.Ticks + ".jpg";              e.Result = bigImage;                // current area              GPoint topLeftPx = info.Type.Projection.FromLatLngToPixel(info.Area.LocationTopLeft' info.Zoom);              GPoint rightButtomPx = info.Type.Projection.FromLatLngToPixel(info.Area.Bottom' info.Area.Right' info.Zoom);              GPoint pxDelta = new GPoint(rightButtomPx.X - topLeftPx.X' rightButtomPx.Y - topLeftPx.Y);              GMap.NET.GSize maxOfTiles = info.Type.Projection.GetTileMatrixMaxXY(info.Zoom);                int padding = info.MakeWorldFile || info.MakeKmz ? 0 : 22;              {                 using(Bitmap bmpDestination = new Bitmap((int)(pxDelta.X + padding * 2)' (int)(pxDelta.Y + padding * 2)))                 {                    using(Graphics gfx = Graphics.FromImage(bmpDestination))                    {                       gfx.InterpolationMode = InterpolationMode.HighQualityBicubic;                       gfx.SmoothingMode = SmoothingMode.HighQuality;                         int i = 0;                         // get tiles & combine into one                       lock(tileArea)                       {                          foreach(var p in tileArea)                          {                             if(bg.CancellationPending)                             {                                e.Cancel = true;                                return;                             }                               int pc = (int)(((double)++i / tileArea.Count) * 100);                             bg.ReportProgress(pc' p);                               foreach(var tp in info.Type.Overlays)                             {                                Exception ex;                                GMapImage tile;                                  // tile number inversion(BottomLeft -> TopLeft) for pergo maps                                if(tp.InvertedAxisY)                                {                                   tile = GMaps.Instance.GetImageFrom(tp' new GPoint(p.X' maxOfTiles.Height - p.Y)' info.Zoom' out ex) as GMapImage;                                }                                else // ok                                {                                   tile = GMaps.Instance.GetImageFrom(tp' p' info.Zoom' out ex) as GMapImage;                                }                                  if(tile != null)                                {                                   using(tile)                                   {                                      long x = p.X * info.Type.Projection.TileSize.Width - topLeftPx.X + padding;                                      long y = p.Y * info.Type.Projection.TileSize.Width - topLeftPx.Y + padding;                                      {                                         gfx.DrawImage(tile.Img' x' y' info.Type.Projection.TileSize.Width' info.Type.Projection.TileSize.Height);                                      }                                   }                                }                             }                          }                       }                         // draw routes                       {                          foreach(GMapRoute r in Main.routes.Routes)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw polygons                       {                          foreach(GMapPolygon r in Main.polygons.Polygons)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      rp.CloseFigure();                                        gfx.FillPath(r.Fill' rp);                                        gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw markers                       {                          foreach(GMapMarker r in Main.objects.Markers)                          {                             if(r.IsVisible)                             {                                var pr = r.Position;                                GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                  px.Offset(padding' padding);                                px.Offset(-topLeftPx.X' -topLeftPx.Y);                                px.Offset(r.Offset.X' r.Offset.Y);                                  gfx.ResetTransform();                                gfx.TranslateTransform(-r.LocalPosition.X' -r.LocalPosition.Y);                                gfx.TranslateTransform((int)px.X' (int)px.Y);                                  r.OnRender(gfx);                             }                          }                            // tooltips above                          foreach(GMapMarker m in Main.objects.Markers)                          {                             if(m.IsVisible && m.ToolTip != null && m.IsVisible)                             {                                if(!string.IsNullOrEmpty(m.ToolTipText))                                {                                   var pr = m.Position;                                   GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                     px.Offset(padding' padding);                                   px.Offset(-topLeftPx.X' -topLeftPx.Y);                                   px.Offset(m.Offset.X' m.Offset.Y);                                     gfx.ResetTransform();                                   gfx.TranslateTransform(-m.LocalPosition.X' -m.LocalPosition.Y);                                   gfx.TranslateTransform((int)px.X' (int)px.Y);                                     m.ToolTip.OnRender(gfx);                                }                             }                          }                          gfx.ResetTransform();                       }                         // draw info                       if(!info.MakeWorldFile)                       {                          System.Drawing.Rectangle rect = new System.Drawing.Rectangle();                          {                             rect.Location = new System.Drawing.Point(padding' padding);                             rect.Size = new System.Drawing.Size((int)pxDelta.X' (int)pxDelta.Y);                          }                            using(Font f = new Font(FontFamily.GenericSansSerif' 9' FontStyle.Bold))                          {                             // draw bounds & coordinates                             using(Pen p = new Pen(Brushes.DimGray' 3))                             {                                p.DashStyle = System.Drawing.Drawing2D.DashStyle.DashDot;                                  gfx.DrawRectangle(p' rect);                                  string topleft = info.Area.LocationTopLeft.ToString();                                SizeF s = gfx.MeasureString(topleft' f);                                  gfx.DrawString(topleft' f' p.Brush' rect.X + s.Height / 2' rect.Y + s.Height / 2);                                  string rightBottom = new PointLatLng(info.Area.Bottom' info.Area.Right).ToString();                                SizeF s2 = gfx.MeasureString(rightBottom' f);                                  gfx.DrawString(rightBottom' f' p.Brush' rect.Right - s2.Width - s2.Height / 2' rect.Bottom - s2.Height - s2.Height / 2);                             }                               // draw scale                             using(Pen p = new Pen(Brushes.Blue' 1))                             {                                double rez = info.Type.Projection.GetGroundResolution(info.Zoom' info.Area.Bottom);                                int px100 = (int)(100.0 / rez); // 100 meters                                int px1000 = (int)(1000.0 / rez); // 1km                                     gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px1000' 10);                                gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px100' 10);                                  string leftBottom = "scale: 100m | 1Km";                                SizeF s = gfx.MeasureString(leftBottom' f);                                gfx.DrawString(leftBottom' f' p.Brush' rect.X + 10' rect.Bottom - s.Height - 20);                             }                          }                       }                    }                      bmpDestination.Save(bigImage' ImageFormat.Jpeg);                 }              }                //The worldfile for the original image is:                //0.000067897543      // the horizontal size of a pixel in coordinate units (longitude degrees in this case);              //0.0000000              //0.0000000              //-0.0000554613012    // the comparable vertical pixel size in latitude degrees' negative because latitude decreases as you go from top to bottom in the image.              //-111.743323868834   // longitude of the pixel in the upper-left-hand corner.              //35.1254392635083    // latitude of the pixel in the upper-left-hand corner.                // generate world file              if(info.MakeWorldFile)              {                 string wf = bigImage + "w";                 using(StreamWriter world = File.CreateText(wf))                 {                    world.WriteLine("{0:0.000000000000}"' (info.Area.WidthLng / pxDelta.X));                    world.WriteLine("0.0000000");                    world.WriteLine("0.0000000");                    world.WriteLine("{0:0.000000000000}"' (-info.Area.HeightLat / pxDelta.Y));                    world.WriteLine("{0:0.000000000000}"' info.Area.Left);                    world.WriteLine("{0:0.000000000000}"' info.Area.Top);                    world.Close();                 }              }                if(info.MakeKmz)              {                 var kmzFile = Path.GetDirectoryName(bigImage) + Path.DirectorySeparatorChar + Path.GetFileNameWithoutExtension(bigImage) + ".kmz";                 e.Result = kmzFile;                   using(ZipStorer zip = ZipStorer.Create(kmzFile' "GMap.NET"))                 {                    zip.AddFile(ZipStorer.Compression.Store' bigImage' "files/map.jpg"' "map");                      using(var readme = new MemoryStream(                      Encoding.UTF8.GetBytes(                       string.Format(CultureInfo.InvariantCulture' @"<?xml version=""1.0"" encoding=""UTF-8""?>   <kml xmlns=""http://www.opengis.net/kml/2.2"" xmlns:gx=""http://www.google.com/kml/ext/2.2"" xmlns:kml=""http://www.opengis.net/kml/2.2"" xmlns:atom=""http://www.w3.org/2005/Atom"">  <GroundOverlay>  	<name>{8}</name>  	<LookAt>  		<longitude>{6}</longitude>  		<latitude>{7}</latitude>  		<altitude>0</altitude>  		<heading>0</heading>  		<tilt>0</tilt>  		<range>69327.55500845652</range>  	</LookAt>  	<color>91ffffff</color>  	<Icon>  		<href>files/map.jpg</href>  	</Icon>  	<gx:LatLonQuad>  		<coordinates>  			{0}'{1}'0 {2}'{3}'0 {4}'{5}'0 {6}'{7}'0   		</coordinates>  	</gx:LatLonQuad>  </GroundOverlay>  </kml>"' info.Area.Left' info.Area.Bottom'           info.Area.Right' info.Area.Bottom'           info.Area.Right' info.Area.Top'           info.Area.Left' info.Area.Top'           kmzFile))))                    {                         zip.AddStream(ZipStorer.Compression.Store' "doc.kml"' readme' DateTime.Now' "kml");                       zip.Close();                    }                 }              }           }
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,bg_DoWork,The following statement contains a magic number: if(!info.Area.IsEmpty)           {              string bigImage = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory) + Path.DirectorySeparatorChar + "GMap at zoom " + info.Zoom + " - " + info.Type + "-" + DateTime.Now.Ticks + ".jpg";              e.Result = bigImage;                // current area              GPoint topLeftPx = info.Type.Projection.FromLatLngToPixel(info.Area.LocationTopLeft' info.Zoom);              GPoint rightButtomPx = info.Type.Projection.FromLatLngToPixel(info.Area.Bottom' info.Area.Right' info.Zoom);              GPoint pxDelta = new GPoint(rightButtomPx.X - topLeftPx.X' rightButtomPx.Y - topLeftPx.Y);              GMap.NET.GSize maxOfTiles = info.Type.Projection.GetTileMatrixMaxXY(info.Zoom);                int padding = info.MakeWorldFile || info.MakeKmz ? 0 : 22;              {                 using(Bitmap bmpDestination = new Bitmap((int)(pxDelta.X + padding * 2)' (int)(pxDelta.Y + padding * 2)))                 {                    using(Graphics gfx = Graphics.FromImage(bmpDestination))                    {                       gfx.InterpolationMode = InterpolationMode.HighQualityBicubic;                       gfx.SmoothingMode = SmoothingMode.HighQuality;                         int i = 0;                         // get tiles & combine into one                       lock(tileArea)                       {                          foreach(var p in tileArea)                          {                             if(bg.CancellationPending)                             {                                e.Cancel = true;                                return;                             }                               int pc = (int)(((double)++i / tileArea.Count) * 100);                             bg.ReportProgress(pc' p);                               foreach(var tp in info.Type.Overlays)                             {                                Exception ex;                                GMapImage tile;                                  // tile number inversion(BottomLeft -> TopLeft) for pergo maps                                if(tp.InvertedAxisY)                                {                                   tile = GMaps.Instance.GetImageFrom(tp' new GPoint(p.X' maxOfTiles.Height - p.Y)' info.Zoom' out ex) as GMapImage;                                }                                else // ok                                {                                   tile = GMaps.Instance.GetImageFrom(tp' p' info.Zoom' out ex) as GMapImage;                                }                                  if(tile != null)                                {                                   using(tile)                                   {                                      long x = p.X * info.Type.Projection.TileSize.Width - topLeftPx.X + padding;                                      long y = p.Y * info.Type.Projection.TileSize.Width - topLeftPx.Y + padding;                                      {                                         gfx.DrawImage(tile.Img' x' y' info.Type.Projection.TileSize.Width' info.Type.Projection.TileSize.Height);                                      }                                   }                                }                             }                          }                       }                         // draw routes                       {                          foreach(GMapRoute r in Main.routes.Routes)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw polygons                       {                          foreach(GMapPolygon r in Main.polygons.Polygons)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      rp.CloseFigure();                                        gfx.FillPath(r.Fill' rp);                                        gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw markers                       {                          foreach(GMapMarker r in Main.objects.Markers)                          {                             if(r.IsVisible)                             {                                var pr = r.Position;                                GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                  px.Offset(padding' padding);                                px.Offset(-topLeftPx.X' -topLeftPx.Y);                                px.Offset(r.Offset.X' r.Offset.Y);                                  gfx.ResetTransform();                                gfx.TranslateTransform(-r.LocalPosition.X' -r.LocalPosition.Y);                                gfx.TranslateTransform((int)px.X' (int)px.Y);                                  r.OnRender(gfx);                             }                          }                            // tooltips above                          foreach(GMapMarker m in Main.objects.Markers)                          {                             if(m.IsVisible && m.ToolTip != null && m.IsVisible)                             {                                if(!string.IsNullOrEmpty(m.ToolTipText))                                {                                   var pr = m.Position;                                   GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                     px.Offset(padding' padding);                                   px.Offset(-topLeftPx.X' -topLeftPx.Y);                                   px.Offset(m.Offset.X' m.Offset.Y);                                     gfx.ResetTransform();                                   gfx.TranslateTransform(-m.LocalPosition.X' -m.LocalPosition.Y);                                   gfx.TranslateTransform((int)px.X' (int)px.Y);                                     m.ToolTip.OnRender(gfx);                                }                             }                          }                          gfx.ResetTransform();                       }                         // draw info                       if(!info.MakeWorldFile)                       {                          System.Drawing.Rectangle rect = new System.Drawing.Rectangle();                          {                             rect.Location = new System.Drawing.Point(padding' padding);                             rect.Size = new System.Drawing.Size((int)pxDelta.X' (int)pxDelta.Y);                          }                            using(Font f = new Font(FontFamily.GenericSansSerif' 9' FontStyle.Bold))                          {                             // draw bounds & coordinates                             using(Pen p = new Pen(Brushes.DimGray' 3))                             {                                p.DashStyle = System.Drawing.Drawing2D.DashStyle.DashDot;                                  gfx.DrawRectangle(p' rect);                                  string topleft = info.Area.LocationTopLeft.ToString();                                SizeF s = gfx.MeasureString(topleft' f);                                  gfx.DrawString(topleft' f' p.Brush' rect.X + s.Height / 2' rect.Y + s.Height / 2);                                  string rightBottom = new PointLatLng(info.Area.Bottom' info.Area.Right).ToString();                                SizeF s2 = gfx.MeasureString(rightBottom' f);                                  gfx.DrawString(rightBottom' f' p.Brush' rect.Right - s2.Width - s2.Height / 2' rect.Bottom - s2.Height - s2.Height / 2);                             }                               // draw scale                             using(Pen p = new Pen(Brushes.Blue' 1))                             {                                double rez = info.Type.Projection.GetGroundResolution(info.Zoom' info.Area.Bottom);                                int px100 = (int)(100.0 / rez); // 100 meters                                int px1000 = (int)(1000.0 / rez); // 1km                                     gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px1000' 10);                                gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px100' 10);                                  string leftBottom = "scale: 100m | 1Km";                                SizeF s = gfx.MeasureString(leftBottom' f);                                gfx.DrawString(leftBottom' f' p.Brush' rect.X + 10' rect.Bottom - s.Height - 20);                             }                          }                       }                    }                      bmpDestination.Save(bigImage' ImageFormat.Jpeg);                 }              }                //The worldfile for the original image is:                //0.000067897543      // the horizontal size of a pixel in coordinate units (longitude degrees in this case);              //0.0000000              //0.0000000              //-0.0000554613012    // the comparable vertical pixel size in latitude degrees' negative because latitude decreases as you go from top to bottom in the image.              //-111.743323868834   // longitude of the pixel in the upper-left-hand corner.              //35.1254392635083    // latitude of the pixel in the upper-left-hand corner.                // generate world file              if(info.MakeWorldFile)              {                 string wf = bigImage + "w";                 using(StreamWriter world = File.CreateText(wf))                 {                    world.WriteLine("{0:0.000000000000}"' (info.Area.WidthLng / pxDelta.X));                    world.WriteLine("0.0000000");                    world.WriteLine("0.0000000");                    world.WriteLine("{0:0.000000000000}"' (-info.Area.HeightLat / pxDelta.Y));                    world.WriteLine("{0:0.000000000000}"' info.Area.Left);                    world.WriteLine("{0:0.000000000000}"' info.Area.Top);                    world.Close();                 }              }                if(info.MakeKmz)              {                 var kmzFile = Path.GetDirectoryName(bigImage) + Path.DirectorySeparatorChar + Path.GetFileNameWithoutExtension(bigImage) + ".kmz";                 e.Result = kmzFile;                   using(ZipStorer zip = ZipStorer.Create(kmzFile' "GMap.NET"))                 {                    zip.AddFile(ZipStorer.Compression.Store' bigImage' "files/map.jpg"' "map");                      using(var readme = new MemoryStream(                      Encoding.UTF8.GetBytes(                       string.Format(CultureInfo.InvariantCulture' @"<?xml version=""1.0"" encoding=""UTF-8""?>   <kml xmlns=""http://www.opengis.net/kml/2.2"" xmlns:gx=""http://www.google.com/kml/ext/2.2"" xmlns:kml=""http://www.opengis.net/kml/2.2"" xmlns:atom=""http://www.w3.org/2005/Atom"">  <GroundOverlay>  	<name>{8}</name>  	<LookAt>  		<longitude>{6}</longitude>  		<latitude>{7}</latitude>  		<altitude>0</altitude>  		<heading>0</heading>  		<tilt>0</tilt>  		<range>69327.55500845652</range>  	</LookAt>  	<color>91ffffff</color>  	<Icon>  		<href>files/map.jpg</href>  	</Icon>  	<gx:LatLonQuad>  		<coordinates>  			{0}'{1}'0 {2}'{3}'0 {4}'{5}'0 {6}'{7}'0   		</coordinates>  	</gx:LatLonQuad>  </GroundOverlay>  </kml>"' info.Area.Left' info.Area.Bottom'           info.Area.Right' info.Area.Bottom'           info.Area.Right' info.Area.Top'           info.Area.Left' info.Area.Top'           kmzFile))))                    {                         zip.AddStream(ZipStorer.Compression.Store' "doc.kml"' readme' DateTime.Now' "kml");                       zip.Close();                    }                 }              }           }
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,bg_DoWork,The following statement contains a magic number: if(!info.Area.IsEmpty)           {              string bigImage = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory) + Path.DirectorySeparatorChar + "GMap at zoom " + info.Zoom + " - " + info.Type + "-" + DateTime.Now.Ticks + ".jpg";              e.Result = bigImage;                // current area              GPoint topLeftPx = info.Type.Projection.FromLatLngToPixel(info.Area.LocationTopLeft' info.Zoom);              GPoint rightButtomPx = info.Type.Projection.FromLatLngToPixel(info.Area.Bottom' info.Area.Right' info.Zoom);              GPoint pxDelta = new GPoint(rightButtomPx.X - topLeftPx.X' rightButtomPx.Y - topLeftPx.Y);              GMap.NET.GSize maxOfTiles = info.Type.Projection.GetTileMatrixMaxXY(info.Zoom);                int padding = info.MakeWorldFile || info.MakeKmz ? 0 : 22;              {                 using(Bitmap bmpDestination = new Bitmap((int)(pxDelta.X + padding * 2)' (int)(pxDelta.Y + padding * 2)))                 {                    using(Graphics gfx = Graphics.FromImage(bmpDestination))                    {                       gfx.InterpolationMode = InterpolationMode.HighQualityBicubic;                       gfx.SmoothingMode = SmoothingMode.HighQuality;                         int i = 0;                         // get tiles & combine into one                       lock(tileArea)                       {                          foreach(var p in tileArea)                          {                             if(bg.CancellationPending)                             {                                e.Cancel = true;                                return;                             }                               int pc = (int)(((double)++i / tileArea.Count) * 100);                             bg.ReportProgress(pc' p);                               foreach(var tp in info.Type.Overlays)                             {                                Exception ex;                                GMapImage tile;                                  // tile number inversion(BottomLeft -> TopLeft) for pergo maps                                if(tp.InvertedAxisY)                                {                                   tile = GMaps.Instance.GetImageFrom(tp' new GPoint(p.X' maxOfTiles.Height - p.Y)' info.Zoom' out ex) as GMapImage;                                }                                else // ok                                {                                   tile = GMaps.Instance.GetImageFrom(tp' p' info.Zoom' out ex) as GMapImage;                                }                                  if(tile != null)                                {                                   using(tile)                                   {                                      long x = p.X * info.Type.Projection.TileSize.Width - topLeftPx.X + padding;                                      long y = p.Y * info.Type.Projection.TileSize.Width - topLeftPx.Y + padding;                                      {                                         gfx.DrawImage(tile.Img' x' y' info.Type.Projection.TileSize.Width' info.Type.Projection.TileSize.Height);                                      }                                   }                                }                             }                          }                       }                         // draw routes                       {                          foreach(GMapRoute r in Main.routes.Routes)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw polygons                       {                          foreach(GMapPolygon r in Main.polygons.Polygons)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      rp.CloseFigure();                                        gfx.FillPath(r.Fill' rp);                                        gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw markers                       {                          foreach(GMapMarker r in Main.objects.Markers)                          {                             if(r.IsVisible)                             {                                var pr = r.Position;                                GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                  px.Offset(padding' padding);                                px.Offset(-topLeftPx.X' -topLeftPx.Y);                                px.Offset(r.Offset.X' r.Offset.Y);                                  gfx.ResetTransform();                                gfx.TranslateTransform(-r.LocalPosition.X' -r.LocalPosition.Y);                                gfx.TranslateTransform((int)px.X' (int)px.Y);                                  r.OnRender(gfx);                             }                          }                            // tooltips above                          foreach(GMapMarker m in Main.objects.Markers)                          {                             if(m.IsVisible && m.ToolTip != null && m.IsVisible)                             {                                if(!string.IsNullOrEmpty(m.ToolTipText))                                {                                   var pr = m.Position;                                   GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                     px.Offset(padding' padding);                                   px.Offset(-topLeftPx.X' -topLeftPx.Y);                                   px.Offset(m.Offset.X' m.Offset.Y);                                     gfx.ResetTransform();                                   gfx.TranslateTransform(-m.LocalPosition.X' -m.LocalPosition.Y);                                   gfx.TranslateTransform((int)px.X' (int)px.Y);                                     m.ToolTip.OnRender(gfx);                                }                             }                          }                          gfx.ResetTransform();                       }                         // draw info                       if(!info.MakeWorldFile)                       {                          System.Drawing.Rectangle rect = new System.Drawing.Rectangle();                          {                             rect.Location = new System.Drawing.Point(padding' padding);                             rect.Size = new System.Drawing.Size((int)pxDelta.X' (int)pxDelta.Y);                          }                            using(Font f = new Font(FontFamily.GenericSansSerif' 9' FontStyle.Bold))                          {                             // draw bounds & coordinates                             using(Pen p = new Pen(Brushes.DimGray' 3))                             {                                p.DashStyle = System.Drawing.Drawing2D.DashStyle.DashDot;                                  gfx.DrawRectangle(p' rect);                                  string topleft = info.Area.LocationTopLeft.ToString();                                SizeF s = gfx.MeasureString(topleft' f);                                  gfx.DrawString(topleft' f' p.Brush' rect.X + s.Height / 2' rect.Y + s.Height / 2);                                  string rightBottom = new PointLatLng(info.Area.Bottom' info.Area.Right).ToString();                                SizeF s2 = gfx.MeasureString(rightBottom' f);                                  gfx.DrawString(rightBottom' f' p.Brush' rect.Right - s2.Width - s2.Height / 2' rect.Bottom - s2.Height - s2.Height / 2);                             }                               // draw scale                             using(Pen p = new Pen(Brushes.Blue' 1))                             {                                double rez = info.Type.Projection.GetGroundResolution(info.Zoom' info.Area.Bottom);                                int px100 = (int)(100.0 / rez); // 100 meters                                int px1000 = (int)(1000.0 / rez); // 1km                                     gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px1000' 10);                                gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px100' 10);                                  string leftBottom = "scale: 100m | 1Km";                                SizeF s = gfx.MeasureString(leftBottom' f);                                gfx.DrawString(leftBottom' f' p.Brush' rect.X + 10' rect.Bottom - s.Height - 20);                             }                          }                       }                    }                      bmpDestination.Save(bigImage' ImageFormat.Jpeg);                 }              }                //The worldfile for the original image is:                //0.000067897543      // the horizontal size of a pixel in coordinate units (longitude degrees in this case);              //0.0000000              //0.0000000              //-0.0000554613012    // the comparable vertical pixel size in latitude degrees' negative because latitude decreases as you go from top to bottom in the image.              //-111.743323868834   // longitude of the pixel in the upper-left-hand corner.              //35.1254392635083    // latitude of the pixel in the upper-left-hand corner.                // generate world file              if(info.MakeWorldFile)              {                 string wf = bigImage + "w";                 using(StreamWriter world = File.CreateText(wf))                 {                    world.WriteLine("{0:0.000000000000}"' (info.Area.WidthLng / pxDelta.X));                    world.WriteLine("0.0000000");                    world.WriteLine("0.0000000");                    world.WriteLine("{0:0.000000000000}"' (-info.Area.HeightLat / pxDelta.Y));                    world.WriteLine("{0:0.000000000000}"' info.Area.Left);                    world.WriteLine("{0:0.000000000000}"' info.Area.Top);                    world.Close();                 }              }                if(info.MakeKmz)              {                 var kmzFile = Path.GetDirectoryName(bigImage) + Path.DirectorySeparatorChar + Path.GetFileNameWithoutExtension(bigImage) + ".kmz";                 e.Result = kmzFile;                   using(ZipStorer zip = ZipStorer.Create(kmzFile' "GMap.NET"))                 {                    zip.AddFile(ZipStorer.Compression.Store' bigImage' "files/map.jpg"' "map");                      using(var readme = new MemoryStream(                      Encoding.UTF8.GetBytes(                       string.Format(CultureInfo.InvariantCulture' @"<?xml version=""1.0"" encoding=""UTF-8""?>   <kml xmlns=""http://www.opengis.net/kml/2.2"" xmlns:gx=""http://www.google.com/kml/ext/2.2"" xmlns:kml=""http://www.opengis.net/kml/2.2"" xmlns:atom=""http://www.w3.org/2005/Atom"">  <GroundOverlay>  	<name>{8}</name>  	<LookAt>  		<longitude>{6}</longitude>  		<latitude>{7}</latitude>  		<altitude>0</altitude>  		<heading>0</heading>  		<tilt>0</tilt>  		<range>69327.55500845652</range>  	</LookAt>  	<color>91ffffff</color>  	<Icon>  		<href>files/map.jpg</href>  	</Icon>  	<gx:LatLonQuad>  		<coordinates>  			{0}'{1}'0 {2}'{3}'0 {4}'{5}'0 {6}'{7}'0   		</coordinates>  	</gx:LatLonQuad>  </GroundOverlay>  </kml>"' info.Area.Left' info.Area.Bottom'           info.Area.Right' info.Area.Bottom'           info.Area.Right' info.Area.Top'           info.Area.Left' info.Area.Top'           kmzFile))))                    {                         zip.AddStream(ZipStorer.Compression.Store' "doc.kml"' readme' DateTime.Now' "kml");                       zip.Close();                    }                 }              }           }
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,bg_DoWork,The following statement contains a magic number: if(!info.Area.IsEmpty)           {              string bigImage = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory) + Path.DirectorySeparatorChar + "GMap at zoom " + info.Zoom + " - " + info.Type + "-" + DateTime.Now.Ticks + ".jpg";              e.Result = bigImage;                // current area              GPoint topLeftPx = info.Type.Projection.FromLatLngToPixel(info.Area.LocationTopLeft' info.Zoom);              GPoint rightButtomPx = info.Type.Projection.FromLatLngToPixel(info.Area.Bottom' info.Area.Right' info.Zoom);              GPoint pxDelta = new GPoint(rightButtomPx.X - topLeftPx.X' rightButtomPx.Y - topLeftPx.Y);              GMap.NET.GSize maxOfTiles = info.Type.Projection.GetTileMatrixMaxXY(info.Zoom);                int padding = info.MakeWorldFile || info.MakeKmz ? 0 : 22;              {                 using(Bitmap bmpDestination = new Bitmap((int)(pxDelta.X + padding * 2)' (int)(pxDelta.Y + padding * 2)))                 {                    using(Graphics gfx = Graphics.FromImage(bmpDestination))                    {                       gfx.InterpolationMode = InterpolationMode.HighQualityBicubic;                       gfx.SmoothingMode = SmoothingMode.HighQuality;                         int i = 0;                         // get tiles & combine into one                       lock(tileArea)                       {                          foreach(var p in tileArea)                          {                             if(bg.CancellationPending)                             {                                e.Cancel = true;                                return;                             }                               int pc = (int)(((double)++i / tileArea.Count) * 100);                             bg.ReportProgress(pc' p);                               foreach(var tp in info.Type.Overlays)                             {                                Exception ex;                                GMapImage tile;                                  // tile number inversion(BottomLeft -> TopLeft) for pergo maps                                if(tp.InvertedAxisY)                                {                                   tile = GMaps.Instance.GetImageFrom(tp' new GPoint(p.X' maxOfTiles.Height - p.Y)' info.Zoom' out ex) as GMapImage;                                }                                else // ok                                {                                   tile = GMaps.Instance.GetImageFrom(tp' p' info.Zoom' out ex) as GMapImage;                                }                                  if(tile != null)                                {                                   using(tile)                                   {                                      long x = p.X * info.Type.Projection.TileSize.Width - topLeftPx.X + padding;                                      long y = p.Y * info.Type.Projection.TileSize.Width - topLeftPx.Y + padding;                                      {                                         gfx.DrawImage(tile.Img' x' y' info.Type.Projection.TileSize.Width' info.Type.Projection.TileSize.Height);                                      }                                   }                                }                             }                          }                       }                         // draw routes                       {                          foreach(GMapRoute r in Main.routes.Routes)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw polygons                       {                          foreach(GMapPolygon r in Main.polygons.Polygons)                          {                             if(r.IsVisible)                             {                                using(GraphicsPath rp = new GraphicsPath())                                {                                   for(int j = 0; j < r.Points.Count; j++)                                   {                                      var pr = r.Points[j];                                      GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                        px.Offset(padding' padding);                                      px.Offset(-topLeftPx.X' -topLeftPx.Y);                                        GPoint p2 = px;                                        if(j == 0)                                      {                                         rp.AddLine(p2.X' p2.Y' p2.X' p2.Y);                                      }                                      else                                      {                                         System.Drawing.PointF p = rp.GetLastPoint();                                         rp.AddLine(p.X' p.Y' p2.X' p2.Y);                                      }                                   }                                     if(rp.PointCount > 0)                                   {                                      rp.CloseFigure();                                        gfx.FillPath(r.Fill' rp);                                        gfx.DrawPath(r.Stroke' rp);                                   }                                }                             }                          }                       }                         // draw markers                       {                          foreach(GMapMarker r in Main.objects.Markers)                          {                             if(r.IsVisible)                             {                                var pr = r.Position;                                GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                  px.Offset(padding' padding);                                px.Offset(-topLeftPx.X' -topLeftPx.Y);                                px.Offset(r.Offset.X' r.Offset.Y);                                  gfx.ResetTransform();                                gfx.TranslateTransform(-r.LocalPosition.X' -r.LocalPosition.Y);                                gfx.TranslateTransform((int)px.X' (int)px.Y);                                  r.OnRender(gfx);                             }                          }                            // tooltips above                          foreach(GMapMarker m in Main.objects.Markers)                          {                             if(m.IsVisible && m.ToolTip != null && m.IsVisible)                             {                                if(!string.IsNullOrEmpty(m.ToolTipText))                                {                                   var pr = m.Position;                                   GPoint px = info.Type.Projection.FromLatLngToPixel(pr.Lat' pr.Lng' info.Zoom);                                     px.Offset(padding' padding);                                   px.Offset(-topLeftPx.X' -topLeftPx.Y);                                   px.Offset(m.Offset.X' m.Offset.Y);                                     gfx.ResetTransform();                                   gfx.TranslateTransform(-m.LocalPosition.X' -m.LocalPosition.Y);                                   gfx.TranslateTransform((int)px.X' (int)px.Y);                                     m.ToolTip.OnRender(gfx);                                }                             }                          }                          gfx.ResetTransform();                       }                         // draw info                       if(!info.MakeWorldFile)                       {                          System.Drawing.Rectangle rect = new System.Drawing.Rectangle();                          {                             rect.Location = new System.Drawing.Point(padding' padding);                             rect.Size = new System.Drawing.Size((int)pxDelta.X' (int)pxDelta.Y);                          }                            using(Font f = new Font(FontFamily.GenericSansSerif' 9' FontStyle.Bold))                          {                             // draw bounds & coordinates                             using(Pen p = new Pen(Brushes.DimGray' 3))                             {                                p.DashStyle = System.Drawing.Drawing2D.DashStyle.DashDot;                                  gfx.DrawRectangle(p' rect);                                  string topleft = info.Area.LocationTopLeft.ToString();                                SizeF s = gfx.MeasureString(topleft' f);                                  gfx.DrawString(topleft' f' p.Brush' rect.X + s.Height / 2' rect.Y + s.Height / 2);                                  string rightBottom = new PointLatLng(info.Area.Bottom' info.Area.Right).ToString();                                SizeF s2 = gfx.MeasureString(rightBottom' f);                                  gfx.DrawString(rightBottom' f' p.Brush' rect.Right - s2.Width - s2.Height / 2' rect.Bottom - s2.Height - s2.Height / 2);                             }                               // draw scale                             using(Pen p = new Pen(Brushes.Blue' 1))                             {                                double rez = info.Type.Projection.GetGroundResolution(info.Zoom' info.Area.Bottom);                                int px100 = (int)(100.0 / rez); // 100 meters                                int px1000 = (int)(1000.0 / rez); // 1km                                     gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px1000' 10);                                gfx.DrawRectangle(p' rect.X + 10' rect.Bottom - 20' px100' 10);                                  string leftBottom = "scale: 100m | 1Km";                                SizeF s = gfx.MeasureString(leftBottom' f);                                gfx.DrawString(leftBottom' f' p.Brush' rect.X + 10' rect.Bottom - s.Height - 20);                             }                          }                       }                    }                      bmpDestination.Save(bigImage' ImageFormat.Jpeg);                 }              }                //The worldfile for the original image is:                //0.000067897543      // the horizontal size of a pixel in coordinate units (longitude degrees in this case);              //0.0000000              //0.0000000              //-0.0000554613012    // the comparable vertical pixel size in latitude degrees' negative because latitude decreases as you go from top to bottom in the image.              //-111.743323868834   // longitude of the pixel in the upper-left-hand corner.              //35.1254392635083    // latitude of the pixel in the upper-left-hand corner.                // generate world file              if(info.MakeWorldFile)              {                 string wf = bigImage + "w";                 using(StreamWriter world = File.CreateText(wf))                 {                    world.WriteLine("{0:0.000000000000}"' (info.Area.WidthLng / pxDelta.X));                    world.WriteLine("0.0000000");                    world.WriteLine("0.0000000");                    world.WriteLine("{0:0.000000000000}"' (-info.Area.HeightLat / pxDelta.Y));                    world.WriteLine("{0:0.000000000000}"' info.Area.Left);                    world.WriteLine("{0:0.000000000000}"' info.Area.Top);                    world.Close();                 }              }                if(info.MakeKmz)              {                 var kmzFile = Path.GetDirectoryName(bigImage) + Path.DirectorySeparatorChar + Path.GetFileNameWithoutExtension(bigImage) + ".kmz";                 e.Result = kmzFile;                   using(ZipStorer zip = ZipStorer.Create(kmzFile' "GMap.NET"))                 {                    zip.AddFile(ZipStorer.Compression.Store' bigImage' "files/map.jpg"' "map");                      using(var readme = new MemoryStream(                      Encoding.UTF8.GetBytes(                       string.Format(CultureInfo.InvariantCulture' @"<?xml version=""1.0"" encoding=""UTF-8""?>   <kml xmlns=""http://www.opengis.net/kml/2.2"" xmlns:gx=""http://www.google.com/kml/ext/2.2"" xmlns:kml=""http://www.opengis.net/kml/2.2"" xmlns:atom=""http://www.w3.org/2005/Atom"">  <GroundOverlay>  	<name>{8}</name>  	<LookAt>  		<longitude>{6}</longitude>  		<latitude>{7}</latitude>  		<altitude>0</altitude>  		<heading>0</heading>  		<tilt>0</tilt>  		<range>69327.55500845652</range>  	</LookAt>  	<color>91ffffff</color>  	<Icon>  		<href>files/map.jpg</href>  	</Icon>  	<gx:LatLonQuad>  		<coordinates>  			{0}'{1}'0 {2}'{3}'0 {4}'{5}'0 {6}'{7}'0   		</coordinates>  	</gx:LatLonQuad>  </GroundOverlay>  </kml>"' info.Area.Left' info.Area.Bottom'           info.Area.Right' info.Area.Bottom'           info.Area.Right' info.Area.Top'           info.Area.Left' info.Area.Top'           kmzFile))))                    {                         zip.AddStream(ZipStorer.Compression.Store' "doc.kml"' readme' DateTime.Now' "kml");                       zip.Close();                    }                 }              }           }
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(366' 29);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(366' 29);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.button1.Margin = new System.Windows.Forms.Padding(2);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(84' 32);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(84' 32);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.progressBar1.Location = new System.Drawing.Point(6' 6);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.progressBar1.Location = new System.Drawing.Point(6' 6);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.progressBar1.Margin = new System.Windows.Forms.Padding(2);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.progressBar1.Size = new System.Drawing.Size(353' 93);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.progressBar1.Size = new System.Drawing.Size(353' 93);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.progressBar1.TabIndex = 2;
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDown1.Location = new System.Drawing.Point(404' 6);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDown1.Location = new System.Drawing.Point(404' 6);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDown1.Margin = new System.Windows.Forms.Padding(2);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDown1.Size = new System.Drawing.Size(47' 20);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDown1.Size = new System.Drawing.Size(47' 20);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDown1.TabIndex = 3;
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.button2.Location = new System.Drawing.Point(366' 67);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.button2.Location = new System.Drawing.Point(366' 67);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.button2.Margin = new System.Windows.Forms.Padding(2);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.button2.Size = new System.Drawing.Size(84' 32);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.button2.Size = new System.Drawing.Size(84' 32);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.button2.TabIndex = 4;
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(363' 8);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(363' 8);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.label1.Margin = new System.Windows.Forms.Padding(2' 0' 2' 0);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.label1.Margin = new System.Windows.Forms.Padding(2' 0' 2' 0);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(37' 13);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(37' 13);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 5;
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxWorldFile.Location = new System.Drawing.Point(179' 116);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxWorldFile.Location = new System.Drawing.Point(179' 116);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxWorldFile.Size = new System.Drawing.Size(67' 17);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxWorldFile.Size = new System.Drawing.Size(67' 17);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxWorldFile.TabIndex = 6;
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxRoutes.Location = new System.Drawing.Point(7' 116);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxRoutes.Location = new System.Drawing.Point(7' 116);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxRoutes.Size = new System.Drawing.Size(147' 17);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxRoutes.Size = new System.Drawing.Size(147' 17);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxRoutes.TabIndex = 7;
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxKMZ.Location = new System.Drawing.Point(300' 116);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxKMZ.Location = new System.Drawing.Point(300' 116);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxKMZ.Size = new System.Drawing.Size(49' 17);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxKMZ.Size = new System.Drawing.Size(49' 17);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxKMZ.TabIndex = 8;
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(457' 140);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(457' 140);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.Margin = new System.Windows.Forms.Padding(2);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(16' 164);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(16' 164);
Magic Number,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,InitializeComponent,The following statement contains a magic number: this.Padding = new System.Windows.Forms.Padding(4);
Magic Number,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,PingNetwork,The following statement contains a magic number: using(Ping p = new Ping())           {              byte[] buffer = Encoding.ASCII.GetBytes("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");              int timeout = 4444; // 4s                try              {                 PingReply reply = p.Send(hostNameOrAddress' timeout' buffer);                 pingStatus = (reply.Status == IPStatus.Success);              }              catch(Exception)              {                 pingStatus = false;              }           }
Magic Number,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetVilniusTransportData,The following statement contains a magic number: string url = string.Format(CultureInfo.InvariantCulture' "http://www.troleibusai.lt/eismas/get_gps.php?allowed=true&more=1&bus={0}&rand={1}"' type == TransportType.Bus ? 2 : 1' r.NextDouble());
Magic Number,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetVilniusTransportData,The following statement contains a magic number: {              HttpWebRequest request = (HttpWebRequest) WebRequest.Create(url);                request.UserAgent = GMapProvider.UserAgent;              request.Timeout = GMapProvider.TimeoutMs;              request.ReadWriteTimeout = GMapProvider.TimeoutMs * 6;              request.Accept = "*/*";              request.KeepAlive = true;                using(HttpWebResponse response = request.GetResponse() as HttpWebResponse)              {                 using(Stream responseStream = response.GetResponseStream())                 {                    using(StreamReader read = new StreamReader(responseStream' Encoding.UTF8))                    {                       xml = read.ReadToEnd();                    }                 }  #if PocketPC                 request.Abort();  #endif                 response.Close();              }           }
Magic Number,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetVilniusTransportData,The following statement contains a magic number: if(!string.IsNullOrEmpty(xml))           {              var items = xml.Split('&');                foreach(var it in items)              {                 var sit = it.Split(';');                 if(sit.Length == 8)                 {                    VehicleData d = new VehicleData();                    {                       d.Id = int.Parse(sit[2]);                       d.Lat = double.Parse(sit[0]' CultureInfo.InvariantCulture);                       d.Lng = double.Parse(sit[1]' CultureInfo.InvariantCulture);                       d.Line = sit[3];                       if(!string.IsNullOrEmpty(sit[4]))                       {                          d.Bearing = double.Parse(sit[4]' CultureInfo.InvariantCulture);                       }                         if(!string.IsNullOrEmpty(sit[5]))                       {                          d.Time = sit[5];                            var t = DateTime.Parse(d.Time);                          if(DateTime.Now - t > TimeSpan.FromMinutes(5))                          {                             continue;                          }                            d.Time = t.ToLongTimeString();                       }                         d.TrackType = sit[6];                    }                      //if(d.Id == 1262760)                    //if(d.Line == "13")                    {                       ret.Add(d);                    }                 }              }           }
Magic Number,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetVilniusTransportData,The following statement contains a magic number: if(!string.IsNullOrEmpty(xml))           {              var items = xml.Split('&');                foreach(var it in items)              {                 var sit = it.Split(';');                 if(sit.Length == 8)                 {                    VehicleData d = new VehicleData();                    {                       d.Id = int.Parse(sit[2]);                       d.Lat = double.Parse(sit[0]' CultureInfo.InvariantCulture);                       d.Lng = double.Parse(sit[1]' CultureInfo.InvariantCulture);                       d.Line = sit[3];                       if(!string.IsNullOrEmpty(sit[4]))                       {                          d.Bearing = double.Parse(sit[4]' CultureInfo.InvariantCulture);                       }                         if(!string.IsNullOrEmpty(sit[5]))                       {                          d.Time = sit[5];                            var t = DateTime.Parse(d.Time);                          if(DateTime.Now - t > TimeSpan.FromMinutes(5))                          {                             continue;                          }                            d.Time = t.ToLongTimeString();                       }                         d.TrackType = sit[6];                    }                      //if(d.Id == 1262760)                    //if(d.Line == "13")                    {                       ret.Add(d);                    }                 }              }           }
Magic Number,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetVilniusTransportData,The following statement contains a magic number: if(!string.IsNullOrEmpty(xml))           {              var items = xml.Split('&');                foreach(var it in items)              {                 var sit = it.Split(';');                 if(sit.Length == 8)                 {                    VehicleData d = new VehicleData();                    {                       d.Id = int.Parse(sit[2]);                       d.Lat = double.Parse(sit[0]' CultureInfo.InvariantCulture);                       d.Lng = double.Parse(sit[1]' CultureInfo.InvariantCulture);                       d.Line = sit[3];                       if(!string.IsNullOrEmpty(sit[4]))                       {                          d.Bearing = double.Parse(sit[4]' CultureInfo.InvariantCulture);                       }                         if(!string.IsNullOrEmpty(sit[5]))                       {                          d.Time = sit[5];                            var t = DateTime.Parse(d.Time);                          if(DateTime.Now - t > TimeSpan.FromMinutes(5))                          {                             continue;                          }                            d.Time = t.ToLongTimeString();                       }                         d.TrackType = sit[6];                    }                      //if(d.Id == 1262760)                    //if(d.Line == "13")                    {                       ret.Add(d);                    }                 }              }           }
Magic Number,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetVilniusTransportData,The following statement contains a magic number: if(!string.IsNullOrEmpty(xml))           {              var items = xml.Split('&');                foreach(var it in items)              {                 var sit = it.Split(';');                 if(sit.Length == 8)                 {                    VehicleData d = new VehicleData();                    {                       d.Id = int.Parse(sit[2]);                       d.Lat = double.Parse(sit[0]' CultureInfo.InvariantCulture);                       d.Lng = double.Parse(sit[1]' CultureInfo.InvariantCulture);                       d.Line = sit[3];                       if(!string.IsNullOrEmpty(sit[4]))                       {                          d.Bearing = double.Parse(sit[4]' CultureInfo.InvariantCulture);                       }                         if(!string.IsNullOrEmpty(sit[5]))                       {                          d.Time = sit[5];                            var t = DateTime.Parse(d.Time);                          if(DateTime.Now - t > TimeSpan.FromMinutes(5))                          {                             continue;                          }                            d.Time = t.ToLongTimeString();                       }                         d.TrackType = sit[6];                    }                      //if(d.Id == 1262760)                    //if(d.Line == "13")                    {                       ret.Add(d);                    }                 }              }           }
Magic Number,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetVilniusTransportData,The following statement contains a magic number: if(!string.IsNullOrEmpty(xml))           {              var items = xml.Split('&');                foreach(var it in items)              {                 var sit = it.Split(';');                 if(sit.Length == 8)                 {                    VehicleData d = new VehicleData();                    {                       d.Id = int.Parse(sit[2]);                       d.Lat = double.Parse(sit[0]' CultureInfo.InvariantCulture);                       d.Lng = double.Parse(sit[1]' CultureInfo.InvariantCulture);                       d.Line = sit[3];                       if(!string.IsNullOrEmpty(sit[4]))                       {                          d.Bearing = double.Parse(sit[4]' CultureInfo.InvariantCulture);                       }                         if(!string.IsNullOrEmpty(sit[5]))                       {                          d.Time = sit[5];                            var t = DateTime.Parse(d.Time);                          if(DateTime.Now - t > TimeSpan.FromMinutes(5))                          {                             continue;                          }                            d.Time = t.ToLongTimeString();                       }                         d.TrackType = sit[6];                    }                      //if(d.Id == 1262760)                    //if(d.Line == "13")                    {                       ret.Add(d);                    }                 }              }           }
Magic Number,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetVilniusTransportData,The following statement contains a magic number: if(!string.IsNullOrEmpty(xml))           {              var items = xml.Split('&');                foreach(var it in items)              {                 var sit = it.Split(';');                 if(sit.Length == 8)                 {                    VehicleData d = new VehicleData();                    {                       d.Id = int.Parse(sit[2]);                       d.Lat = double.Parse(sit[0]' CultureInfo.InvariantCulture);                       d.Lng = double.Parse(sit[1]' CultureInfo.InvariantCulture);                       d.Line = sit[3];                       if(!string.IsNullOrEmpty(sit[4]))                       {                          d.Bearing = double.Parse(sit[4]' CultureInfo.InvariantCulture);                       }                         if(!string.IsNullOrEmpty(sit[5]))                       {                          d.Time = sit[5];                            var t = DateTime.Parse(d.Time);                          if(DateTime.Now - t > TimeSpan.FromMinutes(5))                          {                             continue;                          }                            d.Time = t.ToLongTimeString();                       }                         d.TrackType = sit[6];                    }                      //if(d.Id == 1262760)                    //if(d.Line == "13")                    {                       ret.Add(d);                    }                 }              }           }
Magic Number,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetVilniusTransportData,The following statement contains a magic number: if(!string.IsNullOrEmpty(xml))           {              var items = xml.Split('&');                foreach(var it in items)              {                 var sit = it.Split(';');                 if(sit.Length == 8)                 {                    VehicleData d = new VehicleData();                    {                       d.Id = int.Parse(sit[2]);                       d.Lat = double.Parse(sit[0]' CultureInfo.InvariantCulture);                       d.Lng = double.Parse(sit[1]' CultureInfo.InvariantCulture);                       d.Line = sit[3];                       if(!string.IsNullOrEmpty(sit[4]))                       {                          d.Bearing = double.Parse(sit[4]' CultureInfo.InvariantCulture);                       }                         if(!string.IsNullOrEmpty(sit[5]))                       {                          d.Time = sit[5];                            var t = DateTime.Parse(d.Time);                          if(DateTime.Now - t > TimeSpan.FromMinutes(5))                          {                             continue;                          }                            d.Time = t.ToLongTimeString();                       }                         d.TrackType = sit[6];                    }                      //if(d.Id == 1262760)                    //if(d.Line == "13")                    {                       ret.Add(d);                    }                 }              }           }
Magic Number,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetVilniusTransportData,The following statement contains a magic number: if(!string.IsNullOrEmpty(xml))           {              var items = xml.Split('&');                foreach(var it in items)              {                 var sit = it.Split(';');                 if(sit.Length == 8)                 {                    VehicleData d = new VehicleData();                    {                       d.Id = int.Parse(sit[2]);                       d.Lat = double.Parse(sit[0]' CultureInfo.InvariantCulture);                       d.Lng = double.Parse(sit[1]' CultureInfo.InvariantCulture);                       d.Line = sit[3];                       if(!string.IsNullOrEmpty(sit[4]))                       {                          d.Bearing = double.Parse(sit[4]' CultureInfo.InvariantCulture);                       }                         if(!string.IsNullOrEmpty(sit[5]))                       {                          d.Time = sit[5];                            var t = DateTime.Parse(d.Time);                          if(DateTime.Now - t > TimeSpan.FromMinutes(5))                          {                             continue;                          }                            d.Time = t.ToLongTimeString();                       }                         d.TrackType = sit[6];                    }                      //if(d.Id == 1262760)                    //if(d.Line == "13")                    {                       ret.Add(d);                    }                 }              }           }
Magic Number,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetVilniusTransportData,The following statement contains a magic number: if(!string.IsNullOrEmpty(xml))           {              var items = xml.Split('&');                foreach(var it in items)              {                 var sit = it.Split(';');                 if(sit.Length == 8)                 {                    VehicleData d = new VehicleData();                    {                       d.Id = int.Parse(sit[2]);                       d.Lat = double.Parse(sit[0]' CultureInfo.InvariantCulture);                       d.Lng = double.Parse(sit[1]' CultureInfo.InvariantCulture);                       d.Line = sit[3];                       if(!string.IsNullOrEmpty(sit[4]))                       {                          d.Bearing = double.Parse(sit[4]' CultureInfo.InvariantCulture);                       }                         if(!string.IsNullOrEmpty(sit[5]))                       {                          d.Time = sit[5];                            var t = DateTime.Parse(d.Time);                          if(DateTime.Now - t > TimeSpan.FromMinutes(5))                          {                             continue;                          }                            d.Time = t.ToLongTimeString();                       }                         d.TrackType = sit[6];                    }                      //if(d.Id == 1262760)                    //if(d.Line == "13")                    {                       ret.Add(d);                    }                 }              }           }
Magic Number,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetFlightRadarData,The following statement contains a magic number: {              //var response = GetFlightRadarContentUsingHttp("http://arn.data.fr24.com/zones/fcgi/feed.js?bounds=63.056845879294244'55.95299968262111'5.99853515625'28.54248046875&faa=1&mlat=1&flarm=1&adsb=1&gnd=1&air=1&vehicles=1&estimated=1&maxage=900&gliders=1&stats=1&"' location' zoom' sessionId);              var response = GetFlightRadarContentUsingHttp(string.Format(CultureInfo.InvariantCulture' "http://arn.data.fr24.com/zones/fcgi/feed.js?bounds={0}'{1}'{2}'{3}&faa=1&mlat=1&flarm=1&adsb=1&gnd=1&air=1&vehicles=1&estimated=1&maxage=900&gliders=1&stats=1&"' bounds.Top' bounds.Bottom' bounds.Left' bounds.Right));                var items = response.Split(new string[] { "\n'" }' StringSplitOptions.RemoveEmptyEntries);                                        //int i = 0;              foreach(var it in items)              {                 if(it.Length > 11 && !it.Contains("full_count") && !it.Contains("stats"))                 {                    var d = it.TrimEnd(']').Replace(":["' "'").Replace("\""' string.Empty);                      //Debug.WriteLine(++i + " -> " + d);                      // BAW576":["400803"'48.9923'1.8083'"144"'"36950"'"462"'"0512"'"LFPO"'"A319"'"G-EUPC"                    var par = d.Split(''');                    if(par.Length >= 9)                    {                       var id = Convert.ToInt32(par[0]' 16);                       var name = par[8] + "|" + par[9] + "|" + par[10];                       var lat = par[2];                       var lng = par[3];                       var bearing = par[4];                       var altitude = (int) (int.Parse(par[5]) * 0.3048) + "m";                       var speed = (int) (int.Parse(par[6]) * 1.852) + "km/h";                         FlightRadarData fd = new FlightRadarData();                       fd.name = name;                       fd.bearing = int.Parse(bearing);                       fd.altitude = altitude;                       fd.speed = speed;                       fd.point = new PointLatLng(double.Parse(lat' CultureInfo.InvariantCulture)' double.Parse(lng' CultureInfo.InvariantCulture));                       fd.Id = id;                         ret.Add(fd);                         //Debug.WriteLine("name: " + name);                       //Debug.WriteLine("hex: " + hex);                       //Debug.WriteLine("point: " + fd.point);                       //Debug.WriteLine("bearing: " + bearing);                       //Debug.WriteLine("altitude: " + altitude);                       //Debug.WriteLine("speed: " + speed);                    }                    else                    {  #if DEBUG                       if(Debugger.IsAttached)                       {                          Debugger.Break();                       }  #endif                    }                    //Debug.WriteLine("--------------");                 }              }           }
Magic Number,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetFlightRadarData,The following statement contains a magic number: {              //var response = GetFlightRadarContentUsingHttp("http://arn.data.fr24.com/zones/fcgi/feed.js?bounds=63.056845879294244'55.95299968262111'5.99853515625'28.54248046875&faa=1&mlat=1&flarm=1&adsb=1&gnd=1&air=1&vehicles=1&estimated=1&maxage=900&gliders=1&stats=1&"' location' zoom' sessionId);              var response = GetFlightRadarContentUsingHttp(string.Format(CultureInfo.InvariantCulture' "http://arn.data.fr24.com/zones/fcgi/feed.js?bounds={0}'{1}'{2}'{3}&faa=1&mlat=1&flarm=1&adsb=1&gnd=1&air=1&vehicles=1&estimated=1&maxage=900&gliders=1&stats=1&"' bounds.Top' bounds.Bottom' bounds.Left' bounds.Right));                var items = response.Split(new string[] { "\n'" }' StringSplitOptions.RemoveEmptyEntries);                                        //int i = 0;              foreach(var it in items)              {                 if(it.Length > 11 && !it.Contains("full_count") && !it.Contains("stats"))                 {                    var d = it.TrimEnd(']').Replace(":["' "'").Replace("\""' string.Empty);                      //Debug.WriteLine(++i + " -> " + d);                      // BAW576":["400803"'48.9923'1.8083'"144"'"36950"'"462"'"0512"'"LFPO"'"A319"'"G-EUPC"                    var par = d.Split(''');                    if(par.Length >= 9)                    {                       var id = Convert.ToInt32(par[0]' 16);                       var name = par[8] + "|" + par[9] + "|" + par[10];                       var lat = par[2];                       var lng = par[3];                       var bearing = par[4];                       var altitude = (int) (int.Parse(par[5]) * 0.3048) + "m";                       var speed = (int) (int.Parse(par[6]) * 1.852) + "km/h";                         FlightRadarData fd = new FlightRadarData();                       fd.name = name;                       fd.bearing = int.Parse(bearing);                       fd.altitude = altitude;                       fd.speed = speed;                       fd.point = new PointLatLng(double.Parse(lat' CultureInfo.InvariantCulture)' double.Parse(lng' CultureInfo.InvariantCulture));                       fd.Id = id;                         ret.Add(fd);                         //Debug.WriteLine("name: " + name);                       //Debug.WriteLine("hex: " + hex);                       //Debug.WriteLine("point: " + fd.point);                       //Debug.WriteLine("bearing: " + bearing);                       //Debug.WriteLine("altitude: " + altitude);                       //Debug.WriteLine("speed: " + speed);                    }                    else                    {  #if DEBUG                       if(Debugger.IsAttached)                       {                          Debugger.Break();                       }  #endif                    }                    //Debug.WriteLine("--------------");                 }              }           }
Magic Number,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetFlightRadarData,The following statement contains a magic number: {              //var response = GetFlightRadarContentUsingHttp("http://arn.data.fr24.com/zones/fcgi/feed.js?bounds=63.056845879294244'55.95299968262111'5.99853515625'28.54248046875&faa=1&mlat=1&flarm=1&adsb=1&gnd=1&air=1&vehicles=1&estimated=1&maxage=900&gliders=1&stats=1&"' location' zoom' sessionId);              var response = GetFlightRadarContentUsingHttp(string.Format(CultureInfo.InvariantCulture' "http://arn.data.fr24.com/zones/fcgi/feed.js?bounds={0}'{1}'{2}'{3}&faa=1&mlat=1&flarm=1&adsb=1&gnd=1&air=1&vehicles=1&estimated=1&maxage=900&gliders=1&stats=1&"' bounds.Top' bounds.Bottom' bounds.Left' bounds.Right));                var items = response.Split(new string[] { "\n'" }' StringSplitOptions.RemoveEmptyEntries);                                        //int i = 0;              foreach(var it in items)              {                 if(it.Length > 11 && !it.Contains("full_count") && !it.Contains("stats"))                 {                    var d = it.TrimEnd(']').Replace(":["' "'").Replace("\""' string.Empty);                      //Debug.WriteLine(++i + " -> " + d);                      // BAW576":["400803"'48.9923'1.8083'"144"'"36950"'"462"'"0512"'"LFPO"'"A319"'"G-EUPC"                    var par = d.Split(''');                    if(par.Length >= 9)                    {                       var id = Convert.ToInt32(par[0]' 16);                       var name = par[8] + "|" + par[9] + "|" + par[10];                       var lat = par[2];                       var lng = par[3];                       var bearing = par[4];                       var altitude = (int) (int.Parse(par[5]) * 0.3048) + "m";                       var speed = (int) (int.Parse(par[6]) * 1.852) + "km/h";                         FlightRadarData fd = new FlightRadarData();                       fd.name = name;                       fd.bearing = int.Parse(bearing);                       fd.altitude = altitude;                       fd.speed = speed;                       fd.point = new PointLatLng(double.Parse(lat' CultureInfo.InvariantCulture)' double.Parse(lng' CultureInfo.InvariantCulture));                       fd.Id = id;                         ret.Add(fd);                         //Debug.WriteLine("name: " + name);                       //Debug.WriteLine("hex: " + hex);                       //Debug.WriteLine("point: " + fd.point);                       //Debug.WriteLine("bearing: " + bearing);                       //Debug.WriteLine("altitude: " + altitude);                       //Debug.WriteLine("speed: " + speed);                    }                    else                    {  #if DEBUG                       if(Debugger.IsAttached)                       {                          Debugger.Break();                       }  #endif                    }                    //Debug.WriteLine("--------------");                 }              }           }
Magic Number,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetFlightRadarData,The following statement contains a magic number: {              //var response = GetFlightRadarContentUsingHttp("http://arn.data.fr24.com/zones/fcgi/feed.js?bounds=63.056845879294244'55.95299968262111'5.99853515625'28.54248046875&faa=1&mlat=1&flarm=1&adsb=1&gnd=1&air=1&vehicles=1&estimated=1&maxage=900&gliders=1&stats=1&"' location' zoom' sessionId);              var response = GetFlightRadarContentUsingHttp(string.Format(CultureInfo.InvariantCulture' "http://arn.data.fr24.com/zones/fcgi/feed.js?bounds={0}'{1}'{2}'{3}&faa=1&mlat=1&flarm=1&adsb=1&gnd=1&air=1&vehicles=1&estimated=1&maxage=900&gliders=1&stats=1&"' bounds.Top' bounds.Bottom' bounds.Left' bounds.Right));                var items = response.Split(new string[] { "\n'" }' StringSplitOptions.RemoveEmptyEntries);                                        //int i = 0;              foreach(var it in items)              {                 if(it.Length > 11 && !it.Contains("full_count") && !it.Contains("stats"))                 {                    var d = it.TrimEnd(']').Replace(":["' "'").Replace("\""' string.Empty);                      //Debug.WriteLine(++i + " -> " + d);                      // BAW576":["400803"'48.9923'1.8083'"144"'"36950"'"462"'"0512"'"LFPO"'"A319"'"G-EUPC"                    var par = d.Split(''');                    if(par.Length >= 9)                    {                       var id = Convert.ToInt32(par[0]' 16);                       var name = par[8] + "|" + par[9] + "|" + par[10];                       var lat = par[2];                       var lng = par[3];                       var bearing = par[4];                       var altitude = (int) (int.Parse(par[5]) * 0.3048) + "m";                       var speed = (int) (int.Parse(par[6]) * 1.852) + "km/h";                         FlightRadarData fd = new FlightRadarData();                       fd.name = name;                       fd.bearing = int.Parse(bearing);                       fd.altitude = altitude;                       fd.speed = speed;                       fd.point = new PointLatLng(double.Parse(lat' CultureInfo.InvariantCulture)' double.Parse(lng' CultureInfo.InvariantCulture));                       fd.Id = id;                         ret.Add(fd);                         //Debug.WriteLine("name: " + name);                       //Debug.WriteLine("hex: " + hex);                       //Debug.WriteLine("point: " + fd.point);                       //Debug.WriteLine("bearing: " + bearing);                       //Debug.WriteLine("altitude: " + altitude);                       //Debug.WriteLine("speed: " + speed);                    }                    else                    {  #if DEBUG                       if(Debugger.IsAttached)                       {                          Debugger.Break();                       }  #endif                    }                    //Debug.WriteLine("--------------");                 }              }           }
Magic Number,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetFlightRadarData,The following statement contains a magic number: {              //var response = GetFlightRadarContentUsingHttp("http://arn.data.fr24.com/zones/fcgi/feed.js?bounds=63.056845879294244'55.95299968262111'5.99853515625'28.54248046875&faa=1&mlat=1&flarm=1&adsb=1&gnd=1&air=1&vehicles=1&estimated=1&maxage=900&gliders=1&stats=1&"' location' zoom' sessionId);              var response = GetFlightRadarContentUsingHttp(string.Format(CultureInfo.InvariantCulture' "http://arn.data.fr24.com/zones/fcgi/feed.js?bounds={0}'{1}'{2}'{3}&faa=1&mlat=1&flarm=1&adsb=1&gnd=1&air=1&vehicles=1&estimated=1&maxage=900&gliders=1&stats=1&"' bounds.Top' bounds.Bottom' bounds.Left' bounds.Right));                var items = response.Split(new string[] { "\n'" }' StringSplitOptions.RemoveEmptyEntries);                                        //int i = 0;              foreach(var it in items)              {                 if(it.Length > 11 && !it.Contains("full_count") && !it.Contains("stats"))                 {                    var d = it.TrimEnd(']').Replace(":["' "'").Replace("\""' string.Empty);                      //Debug.WriteLine(++i + " -> " + d);                      // BAW576":["400803"'48.9923'1.8083'"144"'"36950"'"462"'"0512"'"LFPO"'"A319"'"G-EUPC"                    var par = d.Split(''');                    if(par.Length >= 9)                    {                       var id = Convert.ToInt32(par[0]' 16);                       var name = par[8] + "|" + par[9] + "|" + par[10];                       var lat = par[2];                       var lng = par[3];                       var bearing = par[4];                       var altitude = (int) (int.Parse(par[5]) * 0.3048) + "m";                       var speed = (int) (int.Parse(par[6]) * 1.852) + "km/h";                         FlightRadarData fd = new FlightRadarData();                       fd.name = name;                       fd.bearing = int.Parse(bearing);                       fd.altitude = altitude;                       fd.speed = speed;                       fd.point = new PointLatLng(double.Parse(lat' CultureInfo.InvariantCulture)' double.Parse(lng' CultureInfo.InvariantCulture));                       fd.Id = id;                         ret.Add(fd);                         //Debug.WriteLine("name: " + name);                       //Debug.WriteLine("hex: " + hex);                       //Debug.WriteLine("point: " + fd.point);                       //Debug.WriteLine("bearing: " + bearing);                       //Debug.WriteLine("altitude: " + altitude);                       //Debug.WriteLine("speed: " + speed);                    }                    else                    {  #if DEBUG                       if(Debugger.IsAttached)                       {                          Debugger.Break();                       }  #endif                    }                    //Debug.WriteLine("--------------");                 }              }           }
Magic Number,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetFlightRadarData,The following statement contains a magic number: {              //var response = GetFlightRadarContentUsingHttp("http://arn.data.fr24.com/zones/fcgi/feed.js?bounds=63.056845879294244'55.95299968262111'5.99853515625'28.54248046875&faa=1&mlat=1&flarm=1&adsb=1&gnd=1&air=1&vehicles=1&estimated=1&maxage=900&gliders=1&stats=1&"' location' zoom' sessionId);              var response = GetFlightRadarContentUsingHttp(string.Format(CultureInfo.InvariantCulture' "http://arn.data.fr24.com/zones/fcgi/feed.js?bounds={0}'{1}'{2}'{3}&faa=1&mlat=1&flarm=1&adsb=1&gnd=1&air=1&vehicles=1&estimated=1&maxage=900&gliders=1&stats=1&"' bounds.Top' bounds.Bottom' bounds.Left' bounds.Right));                var items = response.Split(new string[] { "\n'" }' StringSplitOptions.RemoveEmptyEntries);                                        //int i = 0;              foreach(var it in items)              {                 if(it.Length > 11 && !it.Contains("full_count") && !it.Contains("stats"))                 {                    var d = it.TrimEnd(']').Replace(":["' "'").Replace("\""' string.Empty);                      //Debug.WriteLine(++i + " -> " + d);                      // BAW576":["400803"'48.9923'1.8083'"144"'"36950"'"462"'"0512"'"LFPO"'"A319"'"G-EUPC"                    var par = d.Split(''');                    if(par.Length >= 9)                    {                       var id = Convert.ToInt32(par[0]' 16);                       var name = par[8] + "|" + par[9] + "|" + par[10];                       var lat = par[2];                       var lng = par[3];                       var bearing = par[4];                       var altitude = (int) (int.Parse(par[5]) * 0.3048) + "m";                       var speed = (int) (int.Parse(par[6]) * 1.852) + "km/h";                         FlightRadarData fd = new FlightRadarData();                       fd.name = name;                       fd.bearing = int.Parse(bearing);                       fd.altitude = altitude;                       fd.speed = speed;                       fd.point = new PointLatLng(double.Parse(lat' CultureInfo.InvariantCulture)' double.Parse(lng' CultureInfo.InvariantCulture));                       fd.Id = id;                         ret.Add(fd);                         //Debug.WriteLine("name: " + name);                       //Debug.WriteLine("hex: " + hex);                       //Debug.WriteLine("point: " + fd.point);                       //Debug.WriteLine("bearing: " + bearing);                       //Debug.WriteLine("altitude: " + altitude);                       //Debug.WriteLine("speed: " + speed);                    }                    else                    {  #if DEBUG                       if(Debugger.IsAttached)                       {                          Debugger.Break();                       }  #endif                    }                    //Debug.WriteLine("--------------");                 }              }           }
Magic Number,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetFlightRadarData,The following statement contains a magic number: {              //var response = GetFlightRadarContentUsingHttp("http://arn.data.fr24.com/zones/fcgi/feed.js?bounds=63.056845879294244'55.95299968262111'5.99853515625'28.54248046875&faa=1&mlat=1&flarm=1&adsb=1&gnd=1&air=1&vehicles=1&estimated=1&maxage=900&gliders=1&stats=1&"' location' zoom' sessionId);              var response = GetFlightRadarContentUsingHttp(string.Format(CultureInfo.InvariantCulture' "http://arn.data.fr24.com/zones/fcgi/feed.js?bounds={0}'{1}'{2}'{3}&faa=1&mlat=1&flarm=1&adsb=1&gnd=1&air=1&vehicles=1&estimated=1&maxage=900&gliders=1&stats=1&"' bounds.Top' bounds.Bottom' bounds.Left' bounds.Right));                var items = response.Split(new string[] { "\n'" }' StringSplitOptions.RemoveEmptyEntries);                                        //int i = 0;              foreach(var it in items)              {                 if(it.Length > 11 && !it.Contains("full_count") && !it.Contains("stats"))                 {                    var d = it.TrimEnd(']').Replace(":["' "'").Replace("\""' string.Empty);                      //Debug.WriteLine(++i + " -> " + d);                      // BAW576":["400803"'48.9923'1.8083'"144"'"36950"'"462"'"0512"'"LFPO"'"A319"'"G-EUPC"                    var par = d.Split(''');                    if(par.Length >= 9)                    {                       var id = Convert.ToInt32(par[0]' 16);                       var name = par[8] + "|" + par[9] + "|" + par[10];                       var lat = par[2];                       var lng = par[3];                       var bearing = par[4];                       var altitude = (int) (int.Parse(par[5]) * 0.3048) + "m";                       var speed = (int) (int.Parse(par[6]) * 1.852) + "km/h";                         FlightRadarData fd = new FlightRadarData();                       fd.name = name;                       fd.bearing = int.Parse(bearing);                       fd.altitude = altitude;                       fd.speed = speed;                       fd.point = new PointLatLng(double.Parse(lat' CultureInfo.InvariantCulture)' double.Parse(lng' CultureInfo.InvariantCulture));                       fd.Id = id;                         ret.Add(fd);                         //Debug.WriteLine("name: " + name);                       //Debug.WriteLine("hex: " + hex);                       //Debug.WriteLine("point: " + fd.point);                       //Debug.WriteLine("bearing: " + bearing);                       //Debug.WriteLine("altitude: " + altitude);                       //Debug.WriteLine("speed: " + speed);                    }                    else                    {  #if DEBUG                       if(Debugger.IsAttached)                       {                          Debugger.Break();                       }  #endif                    }                    //Debug.WriteLine("--------------");                 }              }           }
Magic Number,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetFlightRadarData,The following statement contains a magic number: {              //var response = GetFlightRadarContentUsingHttp("http://arn.data.fr24.com/zones/fcgi/feed.js?bounds=63.056845879294244'55.95299968262111'5.99853515625'28.54248046875&faa=1&mlat=1&flarm=1&adsb=1&gnd=1&air=1&vehicles=1&estimated=1&maxage=900&gliders=1&stats=1&"' location' zoom' sessionId);              var response = GetFlightRadarContentUsingHttp(string.Format(CultureInfo.InvariantCulture' "http://arn.data.fr24.com/zones/fcgi/feed.js?bounds={0}'{1}'{2}'{3}&faa=1&mlat=1&flarm=1&adsb=1&gnd=1&air=1&vehicles=1&estimated=1&maxage=900&gliders=1&stats=1&"' bounds.Top' bounds.Bottom' bounds.Left' bounds.Right));                var items = response.Split(new string[] { "\n'" }' StringSplitOptions.RemoveEmptyEntries);                                        //int i = 0;              foreach(var it in items)              {                 if(it.Length > 11 && !it.Contains("full_count") && !it.Contains("stats"))                 {                    var d = it.TrimEnd(']').Replace(":["' "'").Replace("\""' string.Empty);                      //Debug.WriteLine(++i + " -> " + d);                      // BAW576":["400803"'48.9923'1.8083'"144"'"36950"'"462"'"0512"'"LFPO"'"A319"'"G-EUPC"                    var par = d.Split(''');                    if(par.Length >= 9)                    {                       var id = Convert.ToInt32(par[0]' 16);                       var name = par[8] + "|" + par[9] + "|" + par[10];                       var lat = par[2];                       var lng = par[3];                       var bearing = par[4];                       var altitude = (int) (int.Parse(par[5]) * 0.3048) + "m";                       var speed = (int) (int.Parse(par[6]) * 1.852) + "km/h";                         FlightRadarData fd = new FlightRadarData();                       fd.name = name;                       fd.bearing = int.Parse(bearing);                       fd.altitude = altitude;                       fd.speed = speed;                       fd.point = new PointLatLng(double.Parse(lat' CultureInfo.InvariantCulture)' double.Parse(lng' CultureInfo.InvariantCulture));                       fd.Id = id;                         ret.Add(fd);                         //Debug.WriteLine("name: " + name);                       //Debug.WriteLine("hex: " + hex);                       //Debug.WriteLine("point: " + fd.point);                       //Debug.WriteLine("bearing: " + bearing);                       //Debug.WriteLine("altitude: " + altitude);                       //Debug.WriteLine("speed: " + speed);                    }                    else                    {  #if DEBUG                       if(Debugger.IsAttached)                       {                          Debugger.Break();                       }  #endif                    }                    //Debug.WriteLine("--------------");                 }              }           }
Magic Number,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetFlightRadarData,The following statement contains a magic number: {              //var response = GetFlightRadarContentUsingHttp("http://arn.data.fr24.com/zones/fcgi/feed.js?bounds=63.056845879294244'55.95299968262111'5.99853515625'28.54248046875&faa=1&mlat=1&flarm=1&adsb=1&gnd=1&air=1&vehicles=1&estimated=1&maxage=900&gliders=1&stats=1&"' location' zoom' sessionId);              var response = GetFlightRadarContentUsingHttp(string.Format(CultureInfo.InvariantCulture' "http://arn.data.fr24.com/zones/fcgi/feed.js?bounds={0}'{1}'{2}'{3}&faa=1&mlat=1&flarm=1&adsb=1&gnd=1&air=1&vehicles=1&estimated=1&maxage=900&gliders=1&stats=1&"' bounds.Top' bounds.Bottom' bounds.Left' bounds.Right));                var items = response.Split(new string[] { "\n'" }' StringSplitOptions.RemoveEmptyEntries);                                        //int i = 0;              foreach(var it in items)              {                 if(it.Length > 11 && !it.Contains("full_count") && !it.Contains("stats"))                 {                    var d = it.TrimEnd(']').Replace(":["' "'").Replace("\""' string.Empty);                      //Debug.WriteLine(++i + " -> " + d);                      // BAW576":["400803"'48.9923'1.8083'"144"'"36950"'"462"'"0512"'"LFPO"'"A319"'"G-EUPC"                    var par = d.Split(''');                    if(par.Length >= 9)                    {                       var id = Convert.ToInt32(par[0]' 16);                       var name = par[8] + "|" + par[9] + "|" + par[10];                       var lat = par[2];                       var lng = par[3];                       var bearing = par[4];                       var altitude = (int) (int.Parse(par[5]) * 0.3048) + "m";                       var speed = (int) (int.Parse(par[6]) * 1.852) + "km/h";                         FlightRadarData fd = new FlightRadarData();                       fd.name = name;                       fd.bearing = int.Parse(bearing);                       fd.altitude = altitude;                       fd.speed = speed;                       fd.point = new PointLatLng(double.Parse(lat' CultureInfo.InvariantCulture)' double.Parse(lng' CultureInfo.InvariantCulture));                       fd.Id = id;                         ret.Add(fd);                         //Debug.WriteLine("name: " + name);                       //Debug.WriteLine("hex: " + hex);                       //Debug.WriteLine("point: " + fd.point);                       //Debug.WriteLine("bearing: " + bearing);                       //Debug.WriteLine("altitude: " + altitude);                       //Debug.WriteLine("speed: " + speed);                    }                    else                    {  #if DEBUG                       if(Debugger.IsAttached)                       {                          Debugger.Break();                       }  #endif                    }                    //Debug.WriteLine("--------------");                 }              }           }
Magic Number,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetFlightRadarData,The following statement contains a magic number: {              //var response = GetFlightRadarContentUsingHttp("http://arn.data.fr24.com/zones/fcgi/feed.js?bounds=63.056845879294244'55.95299968262111'5.99853515625'28.54248046875&faa=1&mlat=1&flarm=1&adsb=1&gnd=1&air=1&vehicles=1&estimated=1&maxage=900&gliders=1&stats=1&"' location' zoom' sessionId);              var response = GetFlightRadarContentUsingHttp(string.Format(CultureInfo.InvariantCulture' "http://arn.data.fr24.com/zones/fcgi/feed.js?bounds={0}'{1}'{2}'{3}&faa=1&mlat=1&flarm=1&adsb=1&gnd=1&air=1&vehicles=1&estimated=1&maxage=900&gliders=1&stats=1&"' bounds.Top' bounds.Bottom' bounds.Left' bounds.Right));                var items = response.Split(new string[] { "\n'" }' StringSplitOptions.RemoveEmptyEntries);                                        //int i = 0;              foreach(var it in items)              {                 if(it.Length > 11 && !it.Contains("full_count") && !it.Contains("stats"))                 {                    var d = it.TrimEnd(']').Replace(":["' "'").Replace("\""' string.Empty);                      //Debug.WriteLine(++i + " -> " + d);                      // BAW576":["400803"'48.9923'1.8083'"144"'"36950"'"462"'"0512"'"LFPO"'"A319"'"G-EUPC"                    var par = d.Split(''');                    if(par.Length >= 9)                    {                       var id = Convert.ToInt32(par[0]' 16);                       var name = par[8] + "|" + par[9] + "|" + par[10];                       var lat = par[2];                       var lng = par[3];                       var bearing = par[4];                       var altitude = (int) (int.Parse(par[5]) * 0.3048) + "m";                       var speed = (int) (int.Parse(par[6]) * 1.852) + "km/h";                         FlightRadarData fd = new FlightRadarData();                       fd.name = name;                       fd.bearing = int.Parse(bearing);                       fd.altitude = altitude;                       fd.speed = speed;                       fd.point = new PointLatLng(double.Parse(lat' CultureInfo.InvariantCulture)' double.Parse(lng' CultureInfo.InvariantCulture));                       fd.Id = id;                         ret.Add(fd);                         //Debug.WriteLine("name: " + name);                       //Debug.WriteLine("hex: " + hex);                       //Debug.WriteLine("point: " + fd.point);                       //Debug.WriteLine("bearing: " + bearing);                       //Debug.WriteLine("altitude: " + altitude);                       //Debug.WriteLine("speed: " + speed);                    }                    else                    {  #if DEBUG                       if(Debugger.IsAttached)                       {                          Debugger.Break();                       }  #endif                    }                    //Debug.WriteLine("--------------");                 }              }           }
Magic Number,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetFlightRadarData,The following statement contains a magic number: {              //var response = GetFlightRadarContentUsingHttp("http://arn.data.fr24.com/zones/fcgi/feed.js?bounds=63.056845879294244'55.95299968262111'5.99853515625'28.54248046875&faa=1&mlat=1&flarm=1&adsb=1&gnd=1&air=1&vehicles=1&estimated=1&maxage=900&gliders=1&stats=1&"' location' zoom' sessionId);              var response = GetFlightRadarContentUsingHttp(string.Format(CultureInfo.InvariantCulture' "http://arn.data.fr24.com/zones/fcgi/feed.js?bounds={0}'{1}'{2}'{3}&faa=1&mlat=1&flarm=1&adsb=1&gnd=1&air=1&vehicles=1&estimated=1&maxage=900&gliders=1&stats=1&"' bounds.Top' bounds.Bottom' bounds.Left' bounds.Right));                var items = response.Split(new string[] { "\n'" }' StringSplitOptions.RemoveEmptyEntries);                                        //int i = 0;              foreach(var it in items)              {                 if(it.Length > 11 && !it.Contains("full_count") && !it.Contains("stats"))                 {                    var d = it.TrimEnd(']').Replace(":["' "'").Replace("\""' string.Empty);                      //Debug.WriteLine(++i + " -> " + d);                      // BAW576":["400803"'48.9923'1.8083'"144"'"36950"'"462"'"0512"'"LFPO"'"A319"'"G-EUPC"                    var par = d.Split(''');                    if(par.Length >= 9)                    {                       var id = Convert.ToInt32(par[0]' 16);                       var name = par[8] + "|" + par[9] + "|" + par[10];                       var lat = par[2];                       var lng = par[3];                       var bearing = par[4];                       var altitude = (int) (int.Parse(par[5]) * 0.3048) + "m";                       var speed = (int) (int.Parse(par[6]) * 1.852) + "km/h";                         FlightRadarData fd = new FlightRadarData();                       fd.name = name;                       fd.bearing = int.Parse(bearing);                       fd.altitude = altitude;                       fd.speed = speed;                       fd.point = new PointLatLng(double.Parse(lat' CultureInfo.InvariantCulture)' double.Parse(lng' CultureInfo.InvariantCulture));                       fd.Id = id;                         ret.Add(fd);                         //Debug.WriteLine("name: " + name);                       //Debug.WriteLine("hex: " + hex);                       //Debug.WriteLine("point: " + fd.point);                       //Debug.WriteLine("bearing: " + bearing);                       //Debug.WriteLine("altitude: " + altitude);                       //Debug.WriteLine("speed: " + speed);                    }                    else                    {  #if DEBUG                       if(Debugger.IsAttached)                       {                          Debugger.Break();                       }  #endif                    }                    //Debug.WriteLine("--------------");                 }              }           }
Magic Number,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetFlightRadarData,The following statement contains a magic number: {              //var response = GetFlightRadarContentUsingHttp("http://arn.data.fr24.com/zones/fcgi/feed.js?bounds=63.056845879294244'55.95299968262111'5.99853515625'28.54248046875&faa=1&mlat=1&flarm=1&adsb=1&gnd=1&air=1&vehicles=1&estimated=1&maxage=900&gliders=1&stats=1&"' location' zoom' sessionId);              var response = GetFlightRadarContentUsingHttp(string.Format(CultureInfo.InvariantCulture' "http://arn.data.fr24.com/zones/fcgi/feed.js?bounds={0}'{1}'{2}'{3}&faa=1&mlat=1&flarm=1&adsb=1&gnd=1&air=1&vehicles=1&estimated=1&maxage=900&gliders=1&stats=1&"' bounds.Top' bounds.Bottom' bounds.Left' bounds.Right));                var items = response.Split(new string[] { "\n'" }' StringSplitOptions.RemoveEmptyEntries);                                        //int i = 0;              foreach(var it in items)              {                 if(it.Length > 11 && !it.Contains("full_count") && !it.Contains("stats"))                 {                    var d = it.TrimEnd(']').Replace(":["' "'").Replace("\""' string.Empty);                      //Debug.WriteLine(++i + " -> " + d);                      // BAW576":["400803"'48.9923'1.8083'"144"'"36950"'"462"'"0512"'"LFPO"'"A319"'"G-EUPC"                    var par = d.Split(''');                    if(par.Length >= 9)                    {                       var id = Convert.ToInt32(par[0]' 16);                       var name = par[8] + "|" + par[9] + "|" + par[10];                       var lat = par[2];                       var lng = par[3];                       var bearing = par[4];                       var altitude = (int) (int.Parse(par[5]) * 0.3048) + "m";                       var speed = (int) (int.Parse(par[6]) * 1.852) + "km/h";                         FlightRadarData fd = new FlightRadarData();                       fd.name = name;                       fd.bearing = int.Parse(bearing);                       fd.altitude = altitude;                       fd.speed = speed;                       fd.point = new PointLatLng(double.Parse(lat' CultureInfo.InvariantCulture)' double.Parse(lng' CultureInfo.InvariantCulture));                       fd.Id = id;                         ret.Add(fd);                         //Debug.WriteLine("name: " + name);                       //Debug.WriteLine("hex: " + hex);                       //Debug.WriteLine("point: " + fd.point);                       //Debug.WriteLine("bearing: " + bearing);                       //Debug.WriteLine("altitude: " + altitude);                       //Debug.WriteLine("speed: " + speed);                    }                    else                    {  #if DEBUG                       if(Debugger.IsAttached)                       {                          Debugger.Break();                       }  #endif                    }                    //Debug.WriteLine("--------------");                 }              }           }
Magic Number,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetFlightRadarData,The following statement contains a magic number: {              //var response = GetFlightRadarContentUsingHttp("http://arn.data.fr24.com/zones/fcgi/feed.js?bounds=63.056845879294244'55.95299968262111'5.99853515625'28.54248046875&faa=1&mlat=1&flarm=1&adsb=1&gnd=1&air=1&vehicles=1&estimated=1&maxage=900&gliders=1&stats=1&"' location' zoom' sessionId);              var response = GetFlightRadarContentUsingHttp(string.Format(CultureInfo.InvariantCulture' "http://arn.data.fr24.com/zones/fcgi/feed.js?bounds={0}'{1}'{2}'{3}&faa=1&mlat=1&flarm=1&adsb=1&gnd=1&air=1&vehicles=1&estimated=1&maxage=900&gliders=1&stats=1&"' bounds.Top' bounds.Bottom' bounds.Left' bounds.Right));                var items = response.Split(new string[] { "\n'" }' StringSplitOptions.RemoveEmptyEntries);                                        //int i = 0;              foreach(var it in items)              {                 if(it.Length > 11 && !it.Contains("full_count") && !it.Contains("stats"))                 {                    var d = it.TrimEnd(']').Replace(":["' "'").Replace("\""' string.Empty);                      //Debug.WriteLine(++i + " -> " + d);                      // BAW576":["400803"'48.9923'1.8083'"144"'"36950"'"462"'"0512"'"LFPO"'"A319"'"G-EUPC"                    var par = d.Split(''');                    if(par.Length >= 9)                    {                       var id = Convert.ToInt32(par[0]' 16);                       var name = par[8] + "|" + par[9] + "|" + par[10];                       var lat = par[2];                       var lng = par[3];                       var bearing = par[4];                       var altitude = (int) (int.Parse(par[5]) * 0.3048) + "m";                       var speed = (int) (int.Parse(par[6]) * 1.852) + "km/h";                         FlightRadarData fd = new FlightRadarData();                       fd.name = name;                       fd.bearing = int.Parse(bearing);                       fd.altitude = altitude;                       fd.speed = speed;                       fd.point = new PointLatLng(double.Parse(lat' CultureInfo.InvariantCulture)' double.Parse(lng' CultureInfo.InvariantCulture));                       fd.Id = id;                         ret.Add(fd);                         //Debug.WriteLine("name: " + name);                       //Debug.WriteLine("hex: " + hex);                       //Debug.WriteLine("point: " + fd.point);                       //Debug.WriteLine("bearing: " + bearing);                       //Debug.WriteLine("altitude: " + altitude);                       //Debug.WriteLine("speed: " + speed);                    }                    else                    {  #if DEBUG                       if(Debugger.IsAttached)                       {                          Debugger.Break();                       }  #endif                    }                    //Debug.WriteLine("--------------");                 }              }           }
Magic Number,Demo.WindowsForms,Stuff,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\DemoStuff.cs,GetFlightRadarContentUsingHttp,The following statement contains a magic number: request.ReadWriteTimeout = GMapProvider.TimeoutMs * 6;
Magic Number,Demo.WindowsForms,Map,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\Map.cs,OnPaintOverlays,The following statement contains a magic number: g.DrawString(string.Format(CultureInfo.InvariantCulture' "{0:0.0}"' Zoom) + "z' " + MapProvider + "' refresh: " + counter++ + "' load: " + ElapsedMilliseconds + "ms' render: " + delta + "ms"' DebugFont' Brushes.Blue' DebugFont.Height' DebugFont.Height + 20);
Magic Number,Demo.WindowsForms,TcpRow,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\Program.cs,TcpRow,The following statement contains a magic number: int localPort = (tcpRow.localPort1 << 8) + (tcpRow.localPort2) + (tcpRow.localPort3 << 24) + (tcpRow.localPort4 << 16);
Magic Number,Demo.WindowsForms,TcpRow,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\Program.cs,TcpRow,The following statement contains a magic number: int localPort = (tcpRow.localPort1 << 8) + (tcpRow.localPort2) + (tcpRow.localPort3 << 24) + (tcpRow.localPort4 << 16);
Magic Number,Demo.WindowsForms,TcpRow,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\Program.cs,TcpRow,The following statement contains a magic number: int localPort = (tcpRow.localPort1 << 8) + (tcpRow.localPort2) + (tcpRow.localPort3 << 24) + (tcpRow.localPort4 << 16);
Magic Number,Demo.WindowsForms,TcpRow,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\Program.cs,TcpRow,The following statement contains a magic number: int remotePort = (tcpRow.remotePort1 << 8) + (tcpRow.remotePort2) + (tcpRow.remotePort3 << 24) + (tcpRow.remotePort4 << 16);
Magic Number,Demo.WindowsForms,TcpRow,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\Program.cs,TcpRow,The following statement contains a magic number: int remotePort = (tcpRow.remotePort1 << 8) + (tcpRow.remotePort2) + (tcpRow.remotePort3 << 24) + (tcpRow.remotePort4 << 16);
Magic Number,Demo.WindowsForms,TcpRow,C:\repos\radioman_greatmaps\Demo.WindowsForms\Source\Program.cs,TcpRow,The following statement contains a magic number: int remotePort = (tcpRow.remotePort1 << 8) + (tcpRow.remotePort2) + (tcpRow.remotePort3 << 24) + (tcpRow.remotePort4 << 16);
Magic Number,Demo.WindowsForms.Forms,Message,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\Message.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(346' 414);
Magic Number,Demo.WindowsForms.Forms,Message,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\Message.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(346' 414);
Magic Number,Demo.WindowsForms.Forms,Message,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\Message.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(268' 67);
Magic Number,Demo.WindowsForms.Forms,Message,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\Message.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(268' 67);
Magic Number,Demo.WindowsForms.Forms,Message,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\Message.cs,InitializeComponent,The following statement contains a magic number: this.button2.Location = new System.Drawing.Point(8' 414);
Magic Number,Demo.WindowsForms.Forms,Message,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\Message.cs,InitializeComponent,The following statement contains a magic number: this.button2.Location = new System.Drawing.Point(8' 414);
Magic Number,Demo.WindowsForms.Forms,Message,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\Message.cs,InitializeComponent,The following statement contains a magic number: this.button2.Size = new System.Drawing.Size(111' 67);
Magic Number,Demo.WindowsForms.Forms,Message,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\Message.cs,InitializeComponent,The following statement contains a magic number: this.button2.Size = new System.Drawing.Size(111' 67);
Magic Number,Demo.WindowsForms.Forms,Message,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\Message.cs,InitializeComponent,The following statement contains a magic number: this.button2.TabIndex = 2;
Magic Number,Demo.WindowsForms.Forms,Message,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\Message.cs,InitializeComponent,The following statement contains a magic number: this.richTextBox1.Location = new System.Drawing.Point(5' 5);
Magic Number,Demo.WindowsForms.Forms,Message,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\Message.cs,InitializeComponent,The following statement contains a magic number: this.richTextBox1.Location = new System.Drawing.Point(5' 5);
Magic Number,Demo.WindowsForms.Forms,Message,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\Message.cs,InitializeComponent,The following statement contains a magic number: this.richTextBox1.Size = new System.Drawing.Size(609' 394);
Magic Number,Demo.WindowsForms.Forms,Message,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\Message.cs,InitializeComponent,The following statement contains a magic number: this.richTextBox1.Size = new System.Drawing.Size(609' 394);
Magic Number,Demo.WindowsForms.Forms,Message,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\Message.cs,InitializeComponent,The following statement contains a magic number: this.richTextBox1.TabIndex = 3;
Magic Number,Demo.WindowsForms.Forms,Message,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\Message.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(619' 489);
Magic Number,Demo.WindowsForms.Forms,Message,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\Message.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(619' 489);
Magic Number,Demo.WindowsForms.Forms,Message,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\Message.cs,InitializeComponent,The following statement contains a magic number: this.Padding = new System.Windows.Forms.Padding(5);
Duplicate Code,BSE.Windows.Forms,XPanderPanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\XPanderPanel.cs,DrawBorders,The method contains a code clone-set at the following line numbers (starting from the method definition): ((53' 87)' (87' 121))
Duplicate Code,Demo.WindowsForms,StaticImage,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\StaticImage.cs,bg_DoWork,The method contains a code clone-set at the following line numbers (starting from the method definition): ((72' 99)' (110' 137))
Missing Default,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,OnPanelStyleChanged,The following switch statement is missing a default case: switch(panelStyle)           {              case PanelStyle.Default:              m_panelColors = new PanelColors(this);              break;              case PanelStyle.Office2007:              m_panelColors = new PanelColorsOffice2007Blue(this);              break;           }
Missing Default,BSE.Windows.Forms,BasePanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\BasePanel.cs,DrawImagesAndText,The following switch statement is missing a default case: switch(dockStyle)           {              case DockStyle.Left:              case DockStyle.Right:              if(bIsExpanded == true)              {                 DrawImagesAndText(                     graphics'                     captionRectangle'                     iSpacing'                     imageRectangle'                     image'                     rightToLeft'                     true'                     bShowCloseIcon'                     imageClosePanel'                     foreColorCloseIcon'                     ref rectangleImageClosePanel'                     bShowExpandIcon'                     imageExandPanel'                     foreColorExpandPanel'                     ref rectangleImageExandPanel'                     fontCaption'                     captionForeColor'                     strCaptionText);              }              else              {                 rectangleImageClosePanel = Rectangle.Empty;                 DrawVerticalImagesAndText(                     graphics'              captionRectangle'              panelRectangle'                     imageRectangle'              dockStyle'              image'              rightToLeft'                     imageExandPanel'                     foreColorExpandPanel'                     ref rectangleImageExandPanel'              fontCaption'                     collapsedForeColor'              strCaptionText);              }              break;              case DockStyle.Top:              case DockStyle.Bottom:              DrawImagesAndText(                  graphics'                  captionRectangle'                  iSpacing'                  imageRectangle'                  image'                  rightToLeft'                  true'                  bShowCloseIcon'                  imageClosePanel'                  foreColorCloseIcon'                  ref rectangleImageClosePanel'                  bShowExpandIcon'                  imageExandPanel'                  foreColorExpandPanel'                  ref rectangleImageExandPanel'                  fontCaption'                  captionForeColor'                  strCaptionText);              break;           }
Missing Default,BSE.Windows.Forms,Panel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\Panel.cs,OnPaint,The following switch statement is missing a default case: switch(panelStyle)                 {                    case BSE.Windows.Forms.PanelStyle.Default:                    case PanelStyle.Office2007:                    DrawStyleDefault(graphics'                captionRectangle'                colorGradientBegin'                colorGradientEnd'                colorGradientMiddle);                    break;                 }
Missing Default,BSE.Windows.Forms,XPanderPanel,C:\repos\radioman_greatmaps\Demo.WindowsForms\BSE.Windows.Forms\XPander\XPanderPanel.cs,OnPaint,The following switch statement is missing a default case: switch(this.PanelStyle)                 {                    case PanelStyle.Default:                    case PanelStyle.Office2007:                    DrawCaptionbar(graphics' bExpand' bShowBorder' this.PanelStyle);                    CalculatePanelHeights();                    DrawBorders(graphics' this);                    break;                 }
Missing Default,Demo.WindowsForms,MainForm,C:\repos\radioman_greatmaps\Demo.WindowsForms\Forms\MainForm.cs,GridConnections_CellValueNeeded,The following switch statement is missing a default case: switch(GridConnections.Columns[e.ColumnIndex].Name)           {              case "CountryName":              e.Value = val.CountryName;              break;                case "ConnectionsCount":              e.Value = val.ConnectionsCount;              break;           }
