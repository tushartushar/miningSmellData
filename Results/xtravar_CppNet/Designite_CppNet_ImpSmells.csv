Implementation smell,Namespace,Class,File,Method,Description
Long Method,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,token,The method has 226 lines of code.
Long Method,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,macro,The method has 154 lines of code.
Long Method,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,define,The method has 135 lines of code.
Long Method,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,has_feature,The method has 370 lines of code.
Long Method,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr,The method has 158 lines of code.
Long Method,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,_token,The method has 311 lines of code.
Complex Method,CppNet,JoinReader,C:\repos\xtravar_CppNet\JoinReader.cs,_read,Cyclomatic complexity of the method is 11
Complex Method,CppNet,JoinReader,C:\repos\xtravar_CppNet\JoinReader.cs,read,Cyclomatic complexity of the method is 19
Complex Method,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,digit,Cyclomatic complexity of the method is 12
Complex Method,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,isLineSeparator,Cyclomatic complexity of the method is 8
Complex Method,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,read,Cyclomatic complexity of the method is 27
Complex Method,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,unread,Cyclomatic complexity of the method is 12
Complex Method,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,escape,Cyclomatic complexity of the method is 42
Complex Method,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,character,Cyclomatic complexity of the method is 9
Complex Method,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,_number,Cyclomatic complexity of the method is 8
Complex Method,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,token,Cyclomatic complexity of the method is 117
Complex Method,CppNet,MacroTokenSource,C:\repos\xtravar_CppNet\MacroTokenSource.cs,escape,Cyclomatic complexity of the method is 17
Complex Method,CppNet,MacroTokenSource,C:\repos\xtravar_CppNet\MacroTokenSource.cs,paste,Cyclomatic complexity of the method is 16
Complex Method,CppNet,MacroTokenSource,C:\repos\xtravar_CppNet\MacroTokenSource.cs,token,Cyclomatic complexity of the method is 13
Complex Method,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,source_token,Cyclomatic complexity of the method is 8
Complex Method,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,macro,Cyclomatic complexity of the method is 57
Complex Method,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expand,Cyclomatic complexity of the method is 14
Complex Method,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,define,Cyclomatic complexity of the method is 73
Complex Method,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,include,Cyclomatic complexity of the method is 9
Complex Method,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,has_feature,Cyclomatic complexity of the method is 128
Complex Method,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,has_include,Cyclomatic complexity of the method is 13
Complex Method,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,include,Cyclomatic complexity of the method is 13
Complex Method,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,pragma,Cyclomatic complexity of the method is 27
Complex Method,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,error,Cyclomatic complexity of the method is 8
Complex Method,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_token,Cyclomatic complexity of the method is 9
Complex Method,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,Cyclomatic complexity of the method is 20
Complex Method,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr,Cyclomatic complexity of the method is 98
Complex Method,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,toWhitespace,Cyclomatic complexity of the method is 18
Complex Method,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,_token,Cyclomatic complexity of the method is 98
Complex Method,CppNet,Source,C:\repos\xtravar_CppNet\Source.cs,skipline,Cyclomatic complexity of the method is 12
Long Parameter List,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,include,The method has 6 parameters.
Long Parameter List,CppNet,Token,C:\repos\xtravar_CppNet\Token.cs,Token,The method has 5 parameters.
Long Statement,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,isIdentifierIgnorable,The length of the statement  "	return c >= 0 && c <= 8 || c >= 0xE && c <= 0x1B || c >= 0x7F && c <= 0x9F || char.GetUnicodeCategory ((char)c) == System.Globalization.UnicodeCategory.Format; " is 159.
Long Statement,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_token,The length of the statement  "			else if (la.getText () == "__has_include_next" || la.getText () == "__has_include" || la.getText () == "__has_feature") { " is 121.
Long Statement,CppNet,Source,C:\repos\xtravar_CppNet\Source.cs,skipline,The length of the statement  "                         * At least' in any skipline context. *//* XXX Are we sure about this? */warning (tok.getLine ()' tok.getColumn ()' "No newline before end of file"); " is 148.
Magic Number,CppNet,JoinReader,C:\repos\xtravar_CppNet\JoinReader.cs,JoinReader,The following statement contains a magic number: this.unget = new int[2];  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,isIdentifierIgnorable,The following statement contains a magic number: return c >= 0 && c <= 8 || c >= 0xE && c <= 0x1B || c >= 0x7F && c <= 0x9F || char.GetUnicodeCategory ((char)c) == System.Globalization.UnicodeCategory.Format;  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,digit,The following statement contains a magic number: switch (radix) {  case 8:  	alphabet = "012345678";  	break;  case 10:  	alphabet = "0123456789";  	break;  case 16:  	ch = char.ToLower (ch);  	alphabet = "0123456789abcdef";  	break;  default:  	throw new NotSupportedException ();  }  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,digit,The following statement contains a magic number: switch (radix) {  case 8:  	alphabet = "012345678";  	break;  case 10:  	alphabet = "0123456789";  	break;  case 16:  	ch = char.ToLower (ch);  	alphabet = "0123456789abcdef";  	break;  default:  	throw new NotSupportedException ();  }  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,digit,The following statement contains a magic number: switch (radix) {  case 8:  	alphabet = "012345678";  	break;  case 10:  	alphabet = "0123456789";  	break;  case 16:  	ch = char.ToLower (ch);  	alphabet = "0123456789abcdef";  	break;  default:  	throw new NotSupportedException ();  }  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,read,The following statement contains a magic number: System.Diagnostics.Debug.Assert (ucount <= 2' "Illegal ucount: " + ucount);  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,read,The following statement contains a magic number: switch (ucount) {  case 2:  	ucount = 1;  	return u1;  case 1:  	ucount = 0;  	return u0;  }  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,unread,The following statement contains a magic number: if (c != -1) {  	if (isLineSeparator (c)) {  		line--;  		column = lastcolumn;  		cr = false;  	}  	else {  		column--;  	}  	switch (ucount) {  	case 0:  		u0 = c;  		ucount = 1;  		break;  	case 1:  		u1 = c;  		ucount = 2;  		break;  	default:  		throw new InvalidOperationException ("Cannot unget another character!");  	}  	// reader.unread(c);  }  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,unread,The following statement contains a magic number: switch (ucount) {  case 0:  	u0 = c;  	ucount = 1;  	break;  case 1:  	u1 = c;  	ucount = 2;  	break;  default:  	throw new InvalidOperationException ("Cannot unget another character!");  }  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,unread,The following statement contains a magic number: ucount = 2;  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,escape,The following statement contains a magic number: switch (d) {  case 'a':  	text.Append ('a');  	return 0x07;  case 'b':  	text.Append ('b');  	return '\b';  case 'f':  	text.Append ('f');  	return '\f';  case 'n':  	text.Append ('n');  	return '\n';  case 'r':  	text.Append ('r');  	return '\r';  case 't':  	text.Append ('t');  	return '\t';  case 'v':  	text.Append ('v');  	return 0x0b;  case '\\':  	text.Append ('\\');  	return '\\';  case '0':  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  	int len = 0;  	int val = 0;  	do {  		val = (val << 3) + digit ((char)d' 8);  		text.Append ((char)d);  		d = read ();  	}  	while (++len < 3 && digit ((char)d' 8) != -1);  	unread (d);  	return val;  case 'x':  	len = 0;  	val = 0;  	do {  		val = (val << 4) + digit ((char)d' 16);  		text.Append ((char)d);  		d = read ();  	}  	while (++len < 2 && digit ((char)d' 16) != -1);  	unread (d);  	return val;  /* Exclude two cases from the warning. */case '"':  	text.Append ('"');  	return '"';  case '\'':  	text.Append ('\'');  	return '\'';  default:  	warning ("Unnecessary escape character " + (char)d);  	text.Append ((char)d);  	return d;  }  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,escape,The following statement contains a magic number: switch (d) {  case 'a':  	text.Append ('a');  	return 0x07;  case 'b':  	text.Append ('b');  	return '\b';  case 'f':  	text.Append ('f');  	return '\f';  case 'n':  	text.Append ('n');  	return '\n';  case 'r':  	text.Append ('r');  	return '\r';  case 't':  	text.Append ('t');  	return '\t';  case 'v':  	text.Append ('v');  	return 0x0b;  case '\\':  	text.Append ('\\');  	return '\\';  case '0':  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  	int len = 0;  	int val = 0;  	do {  		val = (val << 3) + digit ((char)d' 8);  		text.Append ((char)d);  		d = read ();  	}  	while (++len < 3 && digit ((char)d' 8) != -1);  	unread (d);  	return val;  case 'x':  	len = 0;  	val = 0;  	do {  		val = (val << 4) + digit ((char)d' 16);  		text.Append ((char)d);  		d = read ();  	}  	while (++len < 2 && digit ((char)d' 16) != -1);  	unread (d);  	return val;  /* Exclude two cases from the warning. */case '"':  	text.Append ('"');  	return '"';  case '\'':  	text.Append ('\'');  	return '\'';  default:  	warning ("Unnecessary escape character " + (char)d);  	text.Append ((char)d);  	return d;  }  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,escape,The following statement contains a magic number: switch (d) {  case 'a':  	text.Append ('a');  	return 0x07;  case 'b':  	text.Append ('b');  	return '\b';  case 'f':  	text.Append ('f');  	return '\f';  case 'n':  	text.Append ('n');  	return '\n';  case 'r':  	text.Append ('r');  	return '\r';  case 't':  	text.Append ('t');  	return '\t';  case 'v':  	text.Append ('v');  	return 0x0b;  case '\\':  	text.Append ('\\');  	return '\\';  case '0':  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  	int len = 0;  	int val = 0;  	do {  		val = (val << 3) + digit ((char)d' 8);  		text.Append ((char)d);  		d = read ();  	}  	while (++len < 3 && digit ((char)d' 8) != -1);  	unread (d);  	return val;  case 'x':  	len = 0;  	val = 0;  	do {  		val = (val << 4) + digit ((char)d' 16);  		text.Append ((char)d);  		d = read ();  	}  	while (++len < 2 && digit ((char)d' 16) != -1);  	unread (d);  	return val;  /* Exclude two cases from the warning. */case '"':  	text.Append ('"');  	return '"';  case '\'':  	text.Append ('\'');  	return '\'';  default:  	warning ("Unnecessary escape character " + (char)d);  	text.Append ((char)d);  	return d;  }  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,escape,The following statement contains a magic number: switch (d) {  case 'a':  	text.Append ('a');  	return 0x07;  case 'b':  	text.Append ('b');  	return '\b';  case 'f':  	text.Append ('f');  	return '\f';  case 'n':  	text.Append ('n');  	return '\n';  case 'r':  	text.Append ('r');  	return '\r';  case 't':  	text.Append ('t');  	return '\t';  case 'v':  	text.Append ('v');  	return 0x0b;  case '\\':  	text.Append ('\\');  	return '\\';  case '0':  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  	int len = 0;  	int val = 0;  	do {  		val = (val << 3) + digit ((char)d' 8);  		text.Append ((char)d);  		d = read ();  	}  	while (++len < 3 && digit ((char)d' 8) != -1);  	unread (d);  	return val;  case 'x':  	len = 0;  	val = 0;  	do {  		val = (val << 4) + digit ((char)d' 16);  		text.Append ((char)d);  		d = read ();  	}  	while (++len < 2 && digit ((char)d' 16) != -1);  	unread (d);  	return val;  /* Exclude two cases from the warning. */case '"':  	text.Append ('"');  	return '"';  case '\'':  	text.Append ('\'');  	return '\'';  default:  	warning ("Unnecessary escape character " + (char)d);  	text.Append ((char)d);  	return d;  }  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,escape,The following statement contains a magic number: switch (d) {  case 'a':  	text.Append ('a');  	return 0x07;  case 'b':  	text.Append ('b');  	return '\b';  case 'f':  	text.Append ('f');  	return '\f';  case 'n':  	text.Append ('n');  	return '\n';  case 'r':  	text.Append ('r');  	return '\r';  case 't':  	text.Append ('t');  	return '\t';  case 'v':  	text.Append ('v');  	return 0x0b;  case '\\':  	text.Append ('\\');  	return '\\';  case '0':  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  	int len = 0;  	int val = 0;  	do {  		val = (val << 3) + digit ((char)d' 8);  		text.Append ((char)d);  		d = read ();  	}  	while (++len < 3 && digit ((char)d' 8) != -1);  	unread (d);  	return val;  case 'x':  	len = 0;  	val = 0;  	do {  		val = (val << 4) + digit ((char)d' 16);  		text.Append ((char)d);  		d = read ();  	}  	while (++len < 2 && digit ((char)d' 16) != -1);  	unread (d);  	return val;  /* Exclude two cases from the warning. */case '"':  	text.Append ('"');  	return '"';  case '\'':  	text.Append ('\'');  	return '\'';  default:  	warning ("Unnecessary escape character " + (char)d);  	text.Append ((char)d);  	return d;  }  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,escape,The following statement contains a magic number: switch (d) {  case 'a':  	text.Append ('a');  	return 0x07;  case 'b':  	text.Append ('b');  	return '\b';  case 'f':  	text.Append ('f');  	return '\f';  case 'n':  	text.Append ('n');  	return '\n';  case 'r':  	text.Append ('r');  	return '\r';  case 't':  	text.Append ('t');  	return '\t';  case 'v':  	text.Append ('v');  	return 0x0b;  case '\\':  	text.Append ('\\');  	return '\\';  case '0':  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  	int len = 0;  	int val = 0;  	do {  		val = (val << 3) + digit ((char)d' 8);  		text.Append ((char)d);  		d = read ();  	}  	while (++len < 3 && digit ((char)d' 8) != -1);  	unread (d);  	return val;  case 'x':  	len = 0;  	val = 0;  	do {  		val = (val << 4) + digit ((char)d' 16);  		text.Append ((char)d);  		d = read ();  	}  	while (++len < 2 && digit ((char)d' 16) != -1);  	unread (d);  	return val;  /* Exclude two cases from the warning. */case '"':  	text.Append ('"');  	return '"';  case '\'':  	text.Append ('\'');  	return '\'';  default:  	warning ("Unnecessary escape character " + (char)d);  	text.Append ((char)d);  	return d;  }  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,escape,The following statement contains a magic number: switch (d) {  case 'a':  	text.Append ('a');  	return 0x07;  case 'b':  	text.Append ('b');  	return '\b';  case 'f':  	text.Append ('f');  	return '\f';  case 'n':  	text.Append ('n');  	return '\n';  case 'r':  	text.Append ('r');  	return '\r';  case 't':  	text.Append ('t');  	return '\t';  case 'v':  	text.Append ('v');  	return 0x0b;  case '\\':  	text.Append ('\\');  	return '\\';  case '0':  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  	int len = 0;  	int val = 0;  	do {  		val = (val << 3) + digit ((char)d' 8);  		text.Append ((char)d);  		d = read ();  	}  	while (++len < 3 && digit ((char)d' 8) != -1);  	unread (d);  	return val;  case 'x':  	len = 0;  	val = 0;  	do {  		val = (val << 4) + digit ((char)d' 16);  		text.Append ((char)d);  		d = read ();  	}  	while (++len < 2 && digit ((char)d' 16) != -1);  	unread (d);  	return val;  /* Exclude two cases from the warning. */case '"':  	text.Append ('"');  	return '"';  case '\'':  	text.Append ('\'');  	return '\'';  default:  	warning ("Unnecessary escape character " + (char)d);  	text.Append ((char)d);  	return d;  }  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,escape,The following statement contains a magic number: switch (d) {  case 'a':  	text.Append ('a');  	return 0x07;  case 'b':  	text.Append ('b');  	return '\b';  case 'f':  	text.Append ('f');  	return '\f';  case 'n':  	text.Append ('n');  	return '\n';  case 'r':  	text.Append ('r');  	return '\r';  case 't':  	text.Append ('t');  	return '\t';  case 'v':  	text.Append ('v');  	return 0x0b;  case '\\':  	text.Append ('\\');  	return '\\';  case '0':  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  	int len = 0;  	int val = 0;  	do {  		val = (val << 3) + digit ((char)d' 8);  		text.Append ((char)d);  		d = read ();  	}  	while (++len < 3 && digit ((char)d' 8) != -1);  	unread (d);  	return val;  case 'x':  	len = 0;  	val = 0;  	do {  		val = (val << 4) + digit ((char)d' 16);  		text.Append ((char)d);  		d = read ();  	}  	while (++len < 2 && digit ((char)d' 16) != -1);  	unread (d);  	return val;  /* Exclude two cases from the warning. */case '"':  	text.Append ('"');  	return '"';  case '\'':  	text.Append ('\'');  	return '\'';  default:  	warning ("Unnecessary escape character " + (char)d);  	text.Append ((char)d);  	return d;  }  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,escape,The following statement contains a magic number: do {  	val = (val << 3) + digit ((char)d' 8);  	text.Append ((char)d);  	d = read ();  }  while (++len < 3 && digit ((char)d' 8) != -1);  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,escape,The following statement contains a magic number: do {  	val = (val << 3) + digit ((char)d' 8);  	text.Append ((char)d);  	d = read ();  }  while (++len < 3 && digit ((char)d' 8) != -1);  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,escape,The following statement contains a magic number: do {  	val = (val << 3) + digit ((char)d' 8);  	text.Append ((char)d);  	d = read ();  }  while (++len < 3 && digit ((char)d' 8) != -1);  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,escape,The following statement contains a magic number: do {  	val = (val << 3) + digit ((char)d' 8);  	text.Append ((char)d);  	d = read ();  }  while (++len < 3 && digit ((char)d' 8) != -1);  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,escape,The following statement contains a magic number: val = (val << 3) + digit ((char)d' 8);  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,escape,The following statement contains a magic number: val = (val << 3) + digit ((char)d' 8);  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,escape,The following statement contains a magic number: do {  	val = (val << 4) + digit ((char)d' 16);  	text.Append ((char)d);  	d = read ();  }  while (++len < 2 && digit ((char)d' 16) != -1);  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,escape,The following statement contains a magic number: do {  	val = (val << 4) + digit ((char)d' 16);  	text.Append ((char)d);  	d = read ();  }  while (++len < 2 && digit ((char)d' 16) != -1);  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,escape,The following statement contains a magic number: do {  	val = (val << 4) + digit ((char)d' 16);  	text.Append ((char)d);  	d = read ();  }  while (++len < 2 && digit ((char)d' 16) != -1);  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,escape,The following statement contains a magic number: do {  	val = (val << 4) + digit ((char)d' 16);  	text.Append ((char)d);  	d = read ();  }  while (++len < 2 && digit ((char)d' 16) != -1);  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,escape,The following statement contains a magic number: val = (val << 4) + digit ((char)d' 16);  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,escape,The following statement contains a magic number: val = (val << 4) + digit ((char)d' 16);  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,_number,The following statement contains a magic number: for (; ;) {  	/* XXX Error check duplicate bits. */if (d == 'U' || d == 'u') {  		bits |= 1;  		text.Append ((char)d);  		d = read ();  	}  	else if (d == 'L' || d == 'l') {  		if ((bits & 4) != 0)  			/* XXX warn */;  		bits |= 2;  		text.Append ((char)d);  		d = read ();  	}  	else if (d == 'I' || d == 'i') {  		if ((bits & 2) != 0)  			/* XXX warn */;  		bits |= 4;  		text.Append ((char)d);  		d = read ();  	}  	else if (char.IsLetter ((char)d)) {  		unread (d);  		return new Token (Token.INVALID' text.ToString ()' "Invalid suffix \"" + (char)d + "\" on numeric constant");  	}  	else {  		unread (d);  		return new Token (Token.INTEGER' text.ToString ()' (long)val);  	}  }  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,_number,The following statement contains a magic number: for (; ;) {  	/* XXX Error check duplicate bits. */if (d == 'U' || d == 'u') {  		bits |= 1;  		text.Append ((char)d);  		d = read ();  	}  	else if (d == 'L' || d == 'l') {  		if ((bits & 4) != 0)  			/* XXX warn */;  		bits |= 2;  		text.Append ((char)d);  		d = read ();  	}  	else if (d == 'I' || d == 'i') {  		if ((bits & 2) != 0)  			/* XXX warn */;  		bits |= 4;  		text.Append ((char)d);  		d = read ();  	}  	else if (char.IsLetter ((char)d)) {  		unread (d);  		return new Token (Token.INVALID' text.ToString ()' "Invalid suffix \"" + (char)d + "\" on numeric constant");  	}  	else {  		unread (d);  		return new Token (Token.INTEGER' text.ToString ()' (long)val);  	}  }  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,_number,The following statement contains a magic number: for (; ;) {  	/* XXX Error check duplicate bits. */if (d == 'U' || d == 'u') {  		bits |= 1;  		text.Append ((char)d);  		d = read ();  	}  	else if (d == 'L' || d == 'l') {  		if ((bits & 4) != 0)  			/* XXX warn */;  		bits |= 2;  		text.Append ((char)d);  		d = read ();  	}  	else if (d == 'I' || d == 'i') {  		if ((bits & 2) != 0)  			/* XXX warn */;  		bits |= 4;  		text.Append ((char)d);  		d = read ();  	}  	else if (char.IsLetter ((char)d)) {  		unread (d);  		return new Token (Token.INVALID' text.ToString ()' "Invalid suffix \"" + (char)d + "\" on numeric constant");  	}  	else {  		unread (d);  		return new Token (Token.INTEGER' text.ToString ()' (long)val);  	}  }  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,_number,The following statement contains a magic number: for (; ;) {  	/* XXX Error check duplicate bits. */if (d == 'U' || d == 'u') {  		bits |= 1;  		text.Append ((char)d);  		d = read ();  	}  	else if (d == 'L' || d == 'l') {  		if ((bits & 4) != 0)  			/* XXX warn */;  		bits |= 2;  		text.Append ((char)d);  		d = read ();  	}  	else if (d == 'I' || d == 'i') {  		if ((bits & 2) != 0)  			/* XXX warn */;  		bits |= 4;  		text.Append ((char)d);  		d = read ();  	}  	else if (char.IsLetter ((char)d)) {  		unread (d);  		return new Token (Token.INVALID' text.ToString ()' "Invalid suffix \"" + (char)d + "\" on numeric constant");  	}  	else {  		unread (d);  		return new Token (Token.INTEGER' text.ToString ()' (long)val);  	}  }  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,_number,The following statement contains a magic number: if (d == 'U' || d == 'u') {  	bits |= 1;  	text.Append ((char)d);  	d = read ();  }  else if (d == 'L' || d == 'l') {  	if ((bits & 4) != 0)  		/* XXX warn */;  	bits |= 2;  	text.Append ((char)d);  	d = read ();  }  else if (d == 'I' || d == 'i') {  	if ((bits & 2) != 0)  		/* XXX warn */;  	bits |= 4;  	text.Append ((char)d);  	d = read ();  }  else if (char.IsLetter ((char)d)) {  	unread (d);  	return new Token (Token.INVALID' text.ToString ()' "Invalid suffix \"" + (char)d + "\" on numeric constant");  }  else {  	unread (d);  	return new Token (Token.INTEGER' text.ToString ()' (long)val);  }  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,_number,The following statement contains a magic number: if (d == 'U' || d == 'u') {  	bits |= 1;  	text.Append ((char)d);  	d = read ();  }  else if (d == 'L' || d == 'l') {  	if ((bits & 4) != 0)  		/* XXX warn */;  	bits |= 2;  	text.Append ((char)d);  	d = read ();  }  else if (d == 'I' || d == 'i') {  	if ((bits & 2) != 0)  		/* XXX warn */;  	bits |= 4;  	text.Append ((char)d);  	d = read ();  }  else if (char.IsLetter ((char)d)) {  	unread (d);  	return new Token (Token.INVALID' text.ToString ()' "Invalid suffix \"" + (char)d + "\" on numeric constant");  }  else {  	unread (d);  	return new Token (Token.INTEGER' text.ToString ()' (long)val);  }  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,_number,The following statement contains a magic number: if (d == 'U' || d == 'u') {  	bits |= 1;  	text.Append ((char)d);  	d = read ();  }  else if (d == 'L' || d == 'l') {  	if ((bits & 4) != 0)  		/* XXX warn */;  	bits |= 2;  	text.Append ((char)d);  	d = read ();  }  else if (d == 'I' || d == 'i') {  	if ((bits & 2) != 0)  		/* XXX warn */;  	bits |= 4;  	text.Append ((char)d);  	d = read ();  }  else if (char.IsLetter ((char)d)) {  	unread (d);  	return new Token (Token.INVALID' text.ToString ()' "Invalid suffix \"" + (char)d + "\" on numeric constant");  }  else {  	unread (d);  	return new Token (Token.INTEGER' text.ToString ()' (long)val);  }  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,_number,The following statement contains a magic number: if (d == 'U' || d == 'u') {  	bits |= 1;  	text.Append ((char)d);  	d = read ();  }  else if (d == 'L' || d == 'l') {  	if ((bits & 4) != 0)  		/* XXX warn */;  	bits |= 2;  	text.Append ((char)d);  	d = read ();  }  else if (d == 'I' || d == 'i') {  	if ((bits & 2) != 0)  		/* XXX warn */;  	bits |= 4;  	text.Append ((char)d);  	d = read ();  }  else if (char.IsLetter ((char)d)) {  	unread (d);  	return new Token (Token.INVALID' text.ToString ()' "Invalid suffix \"" + (char)d + "\" on numeric constant");  }  else {  	unread (d);  	return new Token (Token.INTEGER' text.ToString ()' (long)val);  }  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,_number,The following statement contains a magic number: if (d == 'L' || d == 'l') {  	if ((bits & 4) != 0)  		/* XXX warn */;  	bits |= 2;  	text.Append ((char)d);  	d = read ();  }  else if (d == 'I' || d == 'i') {  	if ((bits & 2) != 0)  		/* XXX warn */;  	bits |= 4;  	text.Append ((char)d);  	d = read ();  }  else if (char.IsLetter ((char)d)) {  	unread (d);  	return new Token (Token.INVALID' text.ToString ()' "Invalid suffix \"" + (char)d + "\" on numeric constant");  }  else {  	unread (d);  	return new Token (Token.INTEGER' text.ToString ()' (long)val);  }  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,_number,The following statement contains a magic number: if (d == 'L' || d == 'l') {  	if ((bits & 4) != 0)  		/* XXX warn */;  	bits |= 2;  	text.Append ((char)d);  	d = read ();  }  else if (d == 'I' || d == 'i') {  	if ((bits & 2) != 0)  		/* XXX warn */;  	bits |= 4;  	text.Append ((char)d);  	d = read ();  }  else if (char.IsLetter ((char)d)) {  	unread (d);  	return new Token (Token.INVALID' text.ToString ()' "Invalid suffix \"" + (char)d + "\" on numeric constant");  }  else {  	unread (d);  	return new Token (Token.INTEGER' text.ToString ()' (long)val);  }  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,_number,The following statement contains a magic number: if (d == 'L' || d == 'l') {  	if ((bits & 4) != 0)  		/* XXX warn */;  	bits |= 2;  	text.Append ((char)d);  	d = read ();  }  else if (d == 'I' || d == 'i') {  	if ((bits & 2) != 0)  		/* XXX warn */;  	bits |= 4;  	text.Append ((char)d);  	d = read ();  }  else if (char.IsLetter ((char)d)) {  	unread (d);  	return new Token (Token.INVALID' text.ToString ()' "Invalid suffix \"" + (char)d + "\" on numeric constant");  }  else {  	unread (d);  	return new Token (Token.INTEGER' text.ToString ()' (long)val);  }  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,_number,The following statement contains a magic number: if (d == 'L' || d == 'l') {  	if ((bits & 4) != 0)  		/* XXX warn */;  	bits |= 2;  	text.Append ((char)d);  	d = read ();  }  else if (d == 'I' || d == 'i') {  	if ((bits & 2) != 0)  		/* XXX warn */;  	bits |= 4;  	text.Append ((char)d);  	d = read ();  }  else if (char.IsLetter ((char)d)) {  	unread (d);  	return new Token (Token.INVALID' text.ToString ()' "Invalid suffix \"" + (char)d + "\" on numeric constant");  }  else {  	unread (d);  	return new Token (Token.INTEGER' text.ToString ()' (long)val);  }  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,_number,The following statement contains a magic number: if ((bits & 4) != 0)  	/* XXX warn */;  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,_number,The following statement contains a magic number: bits |= 2;  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,_number,The following statement contains a magic number: if (d == 'I' || d == 'i') {  	if ((bits & 2) != 0)  		/* XXX warn */;  	bits |= 4;  	text.Append ((char)d);  	d = read ();  }  else if (char.IsLetter ((char)d)) {  	unread (d);  	return new Token (Token.INVALID' text.ToString ()' "Invalid suffix \"" + (char)d + "\" on numeric constant");  }  else {  	unread (d);  	return new Token (Token.INTEGER' text.ToString ()' (long)val);  }  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,_number,The following statement contains a magic number: if (d == 'I' || d == 'i') {  	if ((bits & 2) != 0)  		/* XXX warn */;  	bits |= 4;  	text.Append ((char)d);  	d = read ();  }  else if (char.IsLetter ((char)d)) {  	unread (d);  	return new Token (Token.INVALID' text.ToString ()' "Invalid suffix \"" + (char)d + "\" on numeric constant");  }  else {  	unread (d);  	return new Token (Token.INTEGER' text.ToString ()' (long)val);  }  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,_number,The following statement contains a magic number: if ((bits & 2) != 0)  	/* XXX warn */;  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,_number,The following statement contains a magic number: bits |= 4;  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,number_octal,The following statement contains a magic number: while (digit ((char)d' 8) != -1) {  	val = (val << 3) + digit ((char)d' 8);  	text.Append ((char)d);  	d = read ();  }  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,number_octal,The following statement contains a magic number: while (digit ((char)d' 8) != -1) {  	val = (val << 3) + digit ((char)d' 8);  	text.Append ((char)d);  	d = read ();  }  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,number_octal,The following statement contains a magic number: while (digit ((char)d' 8) != -1) {  	val = (val << 3) + digit ((char)d' 8);  	text.Append ((char)d);  	d = read ();  }  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,number_octal,The following statement contains a magic number: val = (val << 3) + digit ((char)d' 8);  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,number_octal,The following statement contains a magic number: val = (val << 3) + digit ((char)d' 8);  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,number_hex,The following statement contains a magic number: if (digit ((char)d' 16) == -1) {  	unread (d);  	// error("Illegal hexadecimal constant " + (char)d);  	return new Token (Token.INVALID' text.ToString ()' "Illegal hexadecimal digit " + (char)d + " after " + text);  }  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,number_hex,The following statement contains a magic number: do {  	val = (val << 4) + digit ((char)d' 16);  	text.Append ((char)d);  	d = read ();  }  while (digit ((char)d' 16) != -1);  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,number_hex,The following statement contains a magic number: do {  	val = (val << 4) + digit ((char)d' 16);  	text.Append ((char)d);  	d = read ();  }  while (digit ((char)d' 16) != -1);  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,number_hex,The following statement contains a magic number: do {  	val = (val << 4) + digit ((char)d' 16);  	text.Append ((char)d);  	d = read ();  }  while (digit ((char)d' 16) != -1);  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,number_hex,The following statement contains a magic number: val = (val << 4) + digit ((char)d' 16);  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,number_hex,The following statement contains a magic number: val = (val << 4) + digit ((char)d' 16);  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,number_decimal,The following statement contains a magic number: do {  	val = val * 10 + digit ((char)d' 10);  	text.Append ((char)d);  	d = read ();  }  while (digit ((char)d' 10) != -1);  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,number_decimal,The following statement contains a magic number: do {  	val = val * 10 + digit ((char)d' 10);  	text.Append ((char)d);  	d = read ();  }  while (digit ((char)d' 10) != -1);  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,number_decimal,The following statement contains a magic number: do {  	val = val * 10 + digit ((char)d' 10);  	text.Append ((char)d);  	d = read ();  }  while (digit ((char)d' 10) != -1);  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,number_decimal,The following statement contains a magic number: val = val * 10 + digit ((char)d' 10);  
Magic Number,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,number_decimal,The following statement contains a magic number: val = val * 10 + digit ((char)d' 10);  
Magic Number,CppNet,MacroTokenSource,C:\repos\xtravar_CppNet\MacroTokenSource.cs,paste,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	if (!tokens.hasNext ()) {  		/* XXX This one really should throw. */error (ptok.getLine ()' ptok.getColumn ()' "Paste at end of expansion");  		buf.append (' ').append (ptok.getText ());  		break;  	}  	Token tok = tokens.next ();  	// System.out.println("Paste " + tok);  	switch (tok.getType ()) {  	case Token.M_PASTE:  		/* One extra to paste' plus one because the 					 * paste token didn't count. */count += 2;  		ptok = tok;  		break;  	case Token.M_ARG:  		int idx = (int)tok.getValue ();  		concat (buf' args.get (idx));  		break;  	/* XXX Test this. */case Token.CCOMMENT:  	case Token.CPPCOMMENT:  		break;  	default:  		buf.append (tok.getText ());  		break;  	}  }  
Magic Number,CppNet,MacroTokenSource,C:\repos\xtravar_CppNet\MacroTokenSource.cs,paste,The following statement contains a magic number: switch (tok.getType ()) {  case Token.M_PASTE:  	/* One extra to paste' plus one because the 					 * paste token didn't count. */count += 2;  	ptok = tok;  	break;  case Token.M_ARG:  	int idx = (int)tok.getValue ();  	concat (buf' args.get (idx));  	break;  /* XXX Test this. */case Token.CCOMMENT:  case Token.CPPCOMMENT:  	break;  default:  	buf.append (tok.getText ());  	break;  }  
Magic Number,CppNet,MacroTokenSource,C:\repos\xtravar_CppNet\MacroTokenSource.cs,paste,The following statement contains a magic number: count += 2;  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,includeFramework,The following statement contains a magic number: if (framework.Length < 2) {  	return false;  }  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: switch (op.getType ()) {  case '/':  	return 11;  case '%':  	return 11;  case '*':  	return 11;  case '+':  	return 10;  case '-':  	return 10;  case Token.LSH:  	return 9;  case Token.RSH:  	return 9;  case '<':  	return 8;  case '>':  	return 8;  case Token.LE:  	return 8;  case Token.GE:  	return 8;  case Token.EQ:  	return 7;  case Token.NE:  	return 7;  case '&':  	return 6;  case '^':  	return 5;  case '|':  	return 4;  case Token.LAND:  	return 3;  case Token.LOR:  	return 2;  case '?':  	return 1;  default:  	// System.out.println("Unrecognised operator " + op);  	return 0;  }  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: switch (op.getType ()) {  case '/':  	return 11;  case '%':  	return 11;  case '*':  	return 11;  case '+':  	return 10;  case '-':  	return 10;  case Token.LSH:  	return 9;  case Token.RSH:  	return 9;  case '<':  	return 8;  case '>':  	return 8;  case Token.LE:  	return 8;  case Token.GE:  	return 8;  case Token.EQ:  	return 7;  case Token.NE:  	return 7;  case '&':  	return 6;  case '^':  	return 5;  case '|':  	return 4;  case Token.LAND:  	return 3;  case Token.LOR:  	return 2;  case '?':  	return 1;  default:  	// System.out.println("Unrecognised operator " + op);  	return 0;  }  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: switch (op.getType ()) {  case '/':  	return 11;  case '%':  	return 11;  case '*':  	return 11;  case '+':  	return 10;  case '-':  	return 10;  case Token.LSH:  	return 9;  case Token.RSH:  	return 9;  case '<':  	return 8;  case '>':  	return 8;  case Token.LE:  	return 8;  case Token.GE:  	return 8;  case Token.EQ:  	return 7;  case Token.NE:  	return 7;  case '&':  	return 6;  case '^':  	return 5;  case '|':  	return 4;  case Token.LAND:  	return 3;  case Token.LOR:  	return 2;  case '?':  	return 1;  default:  	// System.out.println("Unrecognised operator " + op);  	return 0;  }  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: switch (op.getType ()) {  case '/':  	return 11;  case '%':  	return 11;  case '*':  	return 11;  case '+':  	return 10;  case '-':  	return 10;  case Token.LSH:  	return 9;  case Token.RSH:  	return 9;  case '<':  	return 8;  case '>':  	return 8;  case Token.LE:  	return 8;  case Token.GE:  	return 8;  case Token.EQ:  	return 7;  case Token.NE:  	return 7;  case '&':  	return 6;  case '^':  	return 5;  case '|':  	return 4;  case Token.LAND:  	return 3;  case Token.LOR:  	return 2;  case '?':  	return 1;  default:  	// System.out.println("Unrecognised operator " + op);  	return 0;  }  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: switch (op.getType ()) {  case '/':  	return 11;  case '%':  	return 11;  case '*':  	return 11;  case '+':  	return 10;  case '-':  	return 10;  case Token.LSH:  	return 9;  case Token.RSH:  	return 9;  case '<':  	return 8;  case '>':  	return 8;  case Token.LE:  	return 8;  case Token.GE:  	return 8;  case Token.EQ:  	return 7;  case Token.NE:  	return 7;  case '&':  	return 6;  case '^':  	return 5;  case '|':  	return 4;  case Token.LAND:  	return 3;  case Token.LOR:  	return 2;  case '?':  	return 1;  default:  	// System.out.println("Unrecognised operator " + op);  	return 0;  }  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: switch (op.getType ()) {  case '/':  	return 11;  case '%':  	return 11;  case '*':  	return 11;  case '+':  	return 10;  case '-':  	return 10;  case Token.LSH:  	return 9;  case Token.RSH:  	return 9;  case '<':  	return 8;  case '>':  	return 8;  case Token.LE:  	return 8;  case Token.GE:  	return 8;  case Token.EQ:  	return 7;  case Token.NE:  	return 7;  case '&':  	return 6;  case '^':  	return 5;  case '|':  	return 4;  case Token.LAND:  	return 3;  case Token.LOR:  	return 2;  case '?':  	return 1;  default:  	// System.out.println("Unrecognised operator " + op);  	return 0;  }  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: switch (op.getType ()) {  case '/':  	return 11;  case '%':  	return 11;  case '*':  	return 11;  case '+':  	return 10;  case '-':  	return 10;  case Token.LSH:  	return 9;  case Token.RSH:  	return 9;  case '<':  	return 8;  case '>':  	return 8;  case Token.LE:  	return 8;  case Token.GE:  	return 8;  case Token.EQ:  	return 7;  case Token.NE:  	return 7;  case '&':  	return 6;  case '^':  	return 5;  case '|':  	return 4;  case Token.LAND:  	return 3;  case Token.LOR:  	return 2;  case '?':  	return 1;  default:  	// System.out.println("Unrecognised operator " + op);  	return 0;  }  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: switch (op.getType ()) {  case '/':  	return 11;  case '%':  	return 11;  case '*':  	return 11;  case '+':  	return 10;  case '-':  	return 10;  case Token.LSH:  	return 9;  case Token.RSH:  	return 9;  case '<':  	return 8;  case '>':  	return 8;  case Token.LE:  	return 8;  case Token.GE:  	return 8;  case Token.EQ:  	return 7;  case Token.NE:  	return 7;  case '&':  	return 6;  case '^':  	return 5;  case '|':  	return 4;  case Token.LAND:  	return 3;  case Token.LOR:  	return 2;  case '?':  	return 1;  default:  	// System.out.println("Unrecognised operator " + op);  	return 0;  }  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: switch (op.getType ()) {  case '/':  	return 11;  case '%':  	return 11;  case '*':  	return 11;  case '+':  	return 10;  case '-':  	return 10;  case Token.LSH:  	return 9;  case Token.RSH:  	return 9;  case '<':  	return 8;  case '>':  	return 8;  case Token.LE:  	return 8;  case Token.GE:  	return 8;  case Token.EQ:  	return 7;  case Token.NE:  	return 7;  case '&':  	return 6;  case '^':  	return 5;  case '|':  	return 4;  case Token.LAND:  	return 3;  case Token.LOR:  	return 2;  case '?':  	return 1;  default:  	// System.out.println("Unrecognised operator " + op);  	return 0;  }  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: switch (op.getType ()) {  case '/':  	return 11;  case '%':  	return 11;  case '*':  	return 11;  case '+':  	return 10;  case '-':  	return 10;  case Token.LSH:  	return 9;  case Token.RSH:  	return 9;  case '<':  	return 8;  case '>':  	return 8;  case Token.LE:  	return 8;  case Token.GE:  	return 8;  case Token.EQ:  	return 7;  case Token.NE:  	return 7;  case '&':  	return 6;  case '^':  	return 5;  case '|':  	return 4;  case Token.LAND:  	return 3;  case Token.LOR:  	return 2;  case '?':  	return 1;  default:  	// System.out.println("Unrecognised operator " + op);  	return 0;  }  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: switch (op.getType ()) {  case '/':  	return 11;  case '%':  	return 11;  case '*':  	return 11;  case '+':  	return 10;  case '-':  	return 10;  case Token.LSH:  	return 9;  case Token.RSH:  	return 9;  case '<':  	return 8;  case '>':  	return 8;  case Token.LE:  	return 8;  case Token.GE:  	return 8;  case Token.EQ:  	return 7;  case Token.NE:  	return 7;  case '&':  	return 6;  case '^':  	return 5;  case '|':  	return 4;  case Token.LAND:  	return 3;  case Token.LOR:  	return 2;  case '?':  	return 1;  default:  	// System.out.println("Unrecognised operator " + op);  	return 0;  }  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: switch (op.getType ()) {  case '/':  	return 11;  case '%':  	return 11;  case '*':  	return 11;  case '+':  	return 10;  case '-':  	return 10;  case Token.LSH:  	return 9;  case Token.RSH:  	return 9;  case '<':  	return 8;  case '>':  	return 8;  case Token.LE:  	return 8;  case Token.GE:  	return 8;  case Token.EQ:  	return 7;  case Token.NE:  	return 7;  case '&':  	return 6;  case '^':  	return 5;  case '|':  	return 4;  case Token.LAND:  	return 3;  case Token.LOR:  	return 2;  case '?':  	return 1;  default:  	// System.out.println("Unrecognised operator " + op);  	return 0;  }  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: switch (op.getType ()) {  case '/':  	return 11;  case '%':  	return 11;  case '*':  	return 11;  case '+':  	return 10;  case '-':  	return 10;  case Token.LSH:  	return 9;  case Token.RSH:  	return 9;  case '<':  	return 8;  case '>':  	return 8;  case Token.LE:  	return 8;  case Token.GE:  	return 8;  case Token.EQ:  	return 7;  case Token.NE:  	return 7;  case '&':  	return 6;  case '^':  	return 5;  case '|':  	return 4;  case Token.LAND:  	return 3;  case Token.LOR:  	return 2;  case '?':  	return 1;  default:  	// System.out.println("Unrecognised operator " + op);  	return 0;  }  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: switch (op.getType ()) {  case '/':  	return 11;  case '%':  	return 11;  case '*':  	return 11;  case '+':  	return 10;  case '-':  	return 10;  case Token.LSH:  	return 9;  case Token.RSH:  	return 9;  case '<':  	return 8;  case '>':  	return 8;  case Token.LE:  	return 8;  case Token.GE:  	return 8;  case Token.EQ:  	return 7;  case Token.NE:  	return 7;  case '&':  	return 6;  case '^':  	return 5;  case '|':  	return 4;  case Token.LAND:  	return 3;  case Token.LOR:  	return 2;  case '?':  	return 1;  default:  	// System.out.println("Unrecognised operator " + op);  	return 0;  }  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: switch (op.getType ()) {  case '/':  	return 11;  case '%':  	return 11;  case '*':  	return 11;  case '+':  	return 10;  case '-':  	return 10;  case Token.LSH:  	return 9;  case Token.RSH:  	return 9;  case '<':  	return 8;  case '>':  	return 8;  case Token.LE:  	return 8;  case Token.GE:  	return 8;  case Token.EQ:  	return 7;  case Token.NE:  	return 7;  case '&':  	return 6;  case '^':  	return 5;  case '|':  	return 4;  case Token.LAND:  	return 3;  case Token.LOR:  	return 2;  case '?':  	return 1;  default:  	// System.out.println("Unrecognised operator " + op);  	return 0;  }  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: switch (op.getType ()) {  case '/':  	return 11;  case '%':  	return 11;  case '*':  	return 11;  case '+':  	return 10;  case '-':  	return 10;  case Token.LSH:  	return 9;  case Token.RSH:  	return 9;  case '<':  	return 8;  case '>':  	return 8;  case Token.LE:  	return 8;  case Token.GE:  	return 8;  case Token.EQ:  	return 7;  case Token.NE:  	return 7;  case '&':  	return 6;  case '^':  	return 5;  case '|':  	return 4;  case Token.LAND:  	return 3;  case Token.LOR:  	return 2;  case '?':  	return 1;  default:  	// System.out.println("Unrecognised operator " + op);  	return 0;  }  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: switch (op.getType ()) {  case '/':  	return 11;  case '%':  	return 11;  case '*':  	return 11;  case '+':  	return 10;  case '-':  	return 10;  case Token.LSH:  	return 9;  case Token.RSH:  	return 9;  case '<':  	return 8;  case '>':  	return 8;  case Token.LE:  	return 8;  case Token.GE:  	return 8;  case Token.EQ:  	return 7;  case Token.NE:  	return 7;  case '&':  	return 6;  case '^':  	return 5;  case '|':  	return 4;  case Token.LAND:  	return 3;  case Token.LOR:  	return 2;  case '?':  	return 1;  default:  	// System.out.println("Unrecognised operator " + op);  	return 0;  }  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: switch (op.getType ()) {  case '/':  	return 11;  case '%':  	return 11;  case '*':  	return 11;  case '+':  	return 10;  case '-':  	return 10;  case Token.LSH:  	return 9;  case Token.RSH:  	return 9;  case '<':  	return 8;  case '>':  	return 8;  case Token.LE:  	return 8;  case Token.GE:  	return 8;  case Token.EQ:  	return 7;  case Token.NE:  	return 7;  case '&':  	return 6;  case '^':  	return 5;  case '|':  	return 4;  case Token.LAND:  	return 3;  case Token.LOR:  	return 2;  case '?':  	return 1;  default:  	// System.out.println("Unrecognised operator " + op);  	return 0;  }  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: return 11;  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: return 11;  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: return 11;  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: return 10;  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: return 10;  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: return 9;  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: return 9;  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: return 8;  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: return 8;  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: return 8;  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: return 8;  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: return 7;  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: return 7;  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: return 6;  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: return 5;  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: return 4;  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: return 3;  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr_priority,The following statement contains a magic number: return 2;  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr,The following statement contains a magic number: switch (tok.getType ()) {  case '(':  	lhs = expr (0);  	tok = expr_token ();  	if (tok.getType () != ')') {  		expr_untoken (tok);  		error (tok' "missing ) in expression");  		return 0;  	}  	break;  case '~':  	lhs = ~expr (11);  	break;  case '!':  	lhs = expr (11) == 0 ? 1 : 0;  	break;  case '-':  	lhs = -expr (11);  	break;  case Token.INTEGER:  	lhs = Convert.ToInt64 (tok.getValue ());  	break;  case Token.CHARACTER:  	lhs = (long)((char)tok.getValue ());  	break;  case Token.IDENTIFIER:  	if (tok.getText () == "__has_include_next") {  		lhs = has_include (true) ? 1 : 0;  	}  	else if (tok.getText () == "__has_include") {  		lhs = has_include (false) ? 1 : 0;  	}  	else if (tok.getText () == "__has_feature") {  		lhs = has_feature () ? 1 : 0;  	}  	else {  		if (warnings.HasFlag (Warning.UNDEF)) {  			warning (tok' "Undefined token '" + tok.getText () + "' encountered in conditional.");  		}  		lhs = 0;  	}  	break;  default:  	expr_untoken (tok);  	error (tok' "Bad token in expression: " + tok.getText ());  	return 0;  }  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr,The following statement contains a magic number: switch (tok.getType ()) {  case '(':  	lhs = expr (0);  	tok = expr_token ();  	if (tok.getType () != ')') {  		expr_untoken (tok);  		error (tok' "missing ) in expression");  		return 0;  	}  	break;  case '~':  	lhs = ~expr (11);  	break;  case '!':  	lhs = expr (11) == 0 ? 1 : 0;  	break;  case '-':  	lhs = -expr (11);  	break;  case Token.INTEGER:  	lhs = Convert.ToInt64 (tok.getValue ());  	break;  case Token.CHARACTER:  	lhs = (long)((char)tok.getValue ());  	break;  case Token.IDENTIFIER:  	if (tok.getText () == "__has_include_next") {  		lhs = has_include (true) ? 1 : 0;  	}  	else if (tok.getText () == "__has_include") {  		lhs = has_include (false) ? 1 : 0;  	}  	else if (tok.getText () == "__has_feature") {  		lhs = has_feature () ? 1 : 0;  	}  	else {  		if (warnings.HasFlag (Warning.UNDEF)) {  			warning (tok' "Undefined token '" + tok.getText () + "' encountered in conditional.");  		}  		lhs = 0;  	}  	break;  default:  	expr_untoken (tok);  	error (tok' "Bad token in expression: " + tok.getText ());  	return 0;  }  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr,The following statement contains a magic number: switch (tok.getType ()) {  case '(':  	lhs = expr (0);  	tok = expr_token ();  	if (tok.getType () != ')') {  		expr_untoken (tok);  		error (tok' "missing ) in expression");  		return 0;  	}  	break;  case '~':  	lhs = ~expr (11);  	break;  case '!':  	lhs = expr (11) == 0 ? 1 : 0;  	break;  case '-':  	lhs = -expr (11);  	break;  case Token.INTEGER:  	lhs = Convert.ToInt64 (tok.getValue ());  	break;  case Token.CHARACTER:  	lhs = (long)((char)tok.getValue ());  	break;  case Token.IDENTIFIER:  	if (tok.getText () == "__has_include_next") {  		lhs = has_include (true) ? 1 : 0;  	}  	else if (tok.getText () == "__has_include") {  		lhs = has_include (false) ? 1 : 0;  	}  	else if (tok.getText () == "__has_feature") {  		lhs = has_feature () ? 1 : 0;  	}  	else {  		if (warnings.HasFlag (Warning.UNDEF)) {  			warning (tok' "Undefined token '" + tok.getText () + "' encountered in conditional.");  		}  		lhs = 0;  	}  	break;  default:  	expr_untoken (tok);  	error (tok' "Bad token in expression: " + tok.getText ());  	return 0;  }  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr,The following statement contains a magic number: lhs = ~expr (11);  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr,The following statement contains a magic number: lhs = expr (11) == 0 ? 1 : 0;  
Magic Number,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,expr,The following statement contains a magic number: lhs = -expr (11);  
Magic Number,CppNet,Token,C:\repos\xtravar_CppNet\Token.cs,ToString,The following statement contains a magic number: if (text != null)  	buf.Append ('"').Append (text).Append ('"');  else if (type > 3 && type < 256)  	buf.Append ((char)type);  else  	buf.Append ('<').Append (type).Append ('>');  
Magic Number,CppNet,Token,C:\repos\xtravar_CppNet\Token.cs,ToString,The following statement contains a magic number: if (text != null)  	buf.Append ('"').Append (text).Append ('"');  else if (type > 3 && type < 256)  	buf.Append ((char)type);  else  	buf.Append ('<').Append (type).Append ('>');  
Magic Number,CppNet,Token,C:\repos\xtravar_CppNet\Token.cs,ToString,The following statement contains a magic number: if (type > 3 && type < 256)  	buf.Append ((char)type);  else  	buf.Append ('<').Append (type).Append ('>');  
Magic Number,CppNet,Token,C:\repos\xtravar_CppNet\Token.cs,ToString,The following statement contains a magic number: if (type > 3 && type < 256)  	buf.Append ((char)type);  else  	buf.Append ('<').Append (type).Append ('>');  
Magic Number,CppNet,Token,C:\repos\xtravar_CppNet\Token.cs,Token,The following statement contains a magic number: for (int i = 0; i < 255; i++) {  	texts [i] = ((char)i).ToString ();  	names [i] = texts [i];  }  
Missing Default,CppNet,JoinReader,C:\repos\xtravar_CppNet\JoinReader.cs,_read,The following switch statement is missing a default case: switch (e) {  case '(':  	return trigraph ('('' '[');  case ')':  	return trigraph (')'' ']');  case '<':  	return trigraph ('<'' '{');  case '>':  	return trigraph ('>'' '}');  case '=':  	return trigraph ('='' '#');  case '/':  	return trigraph ('/'' '\\');  case '\'':  	return trigraph ('\''' '^');  case '!':  	return trigraph ('!'' '|');  case '-':  	return trigraph ('-'' '~');  }  
Missing Default,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,read,The following switch statement is missing a default case: switch (ucount) {  case 2:  	ucount = 1;  	return u1;  case 1:  	ucount = 0;  	return u0;  }  
Missing Default,CppNet,LexerSource,C:\repos\xtravar_CppNet\LexerSource.cs,token,The following switch statement is missing a default case: switch (c) {  case '\n':  	if (ppvalid) {  		bol = true;  		if (include) {  			tok = new Token (Token.NL' _l' _c' "\n");  		}  		else {  			int nls = 0;  			do {  				nls++;  				d = read ();  			}  			while (d == '\n');  			unread (d);  			char[] text = new char[nls];  			for (int i = 0; i < text.Length; i++)  				text [i] = '\n';  			// Skip the bol = false below.  			tok = new Token (Token.NL' _l' _c' new String (text));  		}  		if (DEBUG)  			System.Console.Error.WriteLine ("lx: Returning NL: " + tok);  		return tok;  	}  	/* Let it be handled as whitespace. */break;  case '!':  	tok = cond ('='' Token.NE' '!');  	break;  case '#':  	if (bol)  		tok = new Token (Token.HASH);  	else  		tok = cond ('#'' Token.PASTE' '#');  	break;  case '+':  	d = read ();  	if (d == '+')  		tok = new Token (Token.INC);  	else if (d == '=')  		tok = new Token (Token.PLUS_EQ);  	else  		unread (d);  	break;  case '-':  	d = read ();  	if (d == '-')  		tok = new Token (Token.DEC);  	else if (d == '=')  		tok = new Token (Token.SUB_EQ);  	else if (d == '>')  		tok = new Token (Token.ARROW);  	else  		unread (d);  	break;  case '*':  	tok = cond ('='' Token.MULT_EQ' '*');  	break;  case '/':  	d = read ();  	if (d == '*')  		tok = ccomment ();  	else if (d == '/')  		tok = cppcomment ();  	else if (d == '=')  		tok = new Token (Token.DIV_EQ);  	else  		unread (d);  	break;  case '%':  	d = read ();  	if (d == '=')  		tok = new Token (Token.MOD_EQ);  	else if (digraphs && d == '>')  		tok = new Token ('}');  	// digraph  	else if (digraphs && d == ':') {  		bool paste = true;  		d = read ();  		if (d != '%') {  			unread (d);  			tok = new Token ('#');  			// digraph  			paste = false;  		}  		d = read ();  		if (d != ':') {  			unread (d);  			// Unread 2 chars here.  			unread ('%');  			tok = new Token ('#');  			// digraph  			paste = false;  		}  		if (paste) {  			tok = new Token (Token.PASTE);  			// digraph  		}  	}  	else  		unread (d);  	break;  case ':':  	/* :: */d = read ();  	if (digraphs && d == '>')  		tok = new Token (']');  	// digraph  	else  		unread (d);  	break;  case '<':  	if (include) {  		tok = String ('<'' '>');  	}  	else {  		d = read ();  		if (d == '=')  			tok = new Token (Token.LE);  		else if (d == '<')  			tok = cond ('='' Token.LSH_EQ' Token.LSH);  		else if (digraphs && d == ':')  			tok = new Token ('[');  		// digraph  		else if (digraphs && d == '%')  			tok = new Token ('{');  		// digraph  		else  			unread (d);  	}  	break;  case '=':  	tok = cond ('='' Token.EQ' '=');  	break;  case '>':  	d = read ();  	if (d == '=')  		tok = new Token (Token.GE);  	else if (d == '>')  		tok = cond ('='' Token.RSH_EQ' Token.RSH);  	else  		unread (d);  	break;  case '^':  	tok = cond ('='' Token.XOR_EQ' '^');  	break;  case '|':  	d = read ();  	if (d == '=')  		tok = new Token (Token.OR_EQ);  	else if (d == '|')  		tok = cond ('='' Token.LOR_EQ' Token.LOR);  	else  		unread (d);  	break;  case '&':  	d = read ();  	if (d == '&')  		tok = cond ('='' Token.LAND_EQ' Token.LAND);  	else if (d == '=')  		tok = new Token (Token.AND_EQ);  	else  		unread (d);  	break;  case '.':  	d = read ();  	if (d == '.')  		tok = cond ('.'' Token.ELLIPSIS' Token.RANGE);  	else  		unread (d);  	/* XXX decimal fraction */break;  case '0':  	/* octal or hex */d = read ();  	if (d == 'x' || d == 'X')  		tok = number_hex ((char)d);  	else {  		unread (d);  		tok = number_octal ();  	}  	break;  case '\'':  	tok = character ();  	break;  case '"':  	tok = String ('"'' '"');  	break;  case -1:  	close ();  	tok = new Token (Token.EOF' _l' _c' "<eof>");  	break;  }  
Missing Default,CppNet,Preprocessor,C:\repos\xtravar_CppNet\Preprocessor.cs,toWhitespace,The following switch statement is missing a default case: switch (c) {  case '\r':  	cr = true;  	nls++;  	break;  case '\n':  	if (cr) {  		cr = false;  		break;  	}  	goto case '\u2028';  /* fallthrough */case '\u2028':  case '\u2029':  case '\u000B':  case '\u000C':  case '\u0085':  	cr = false;  	nls++;  	break;  }  
