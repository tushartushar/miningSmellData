Implementation smell,Namespace,Class,File,Method,Description
Long Statement,BlobGettingStarted,Program,F:\newReposMay17\Azure_azure-storage-net\Samples\GettingStarted\EncryptionSamples\BlobGettingStarted\Program.cs,Main,The length of the statement  "	// How to create a storage connection string - https://azure.microsoft.com/en-us/documentation/articles/storage-configure-connection-string/ " is 140.
Long Statement,EncryptionShared,Utility,F:\newReposMay17\Azure_azure-storage-net\Samples\GettingStarted\EncryptionSamples\BlobGettingStarted\..\shared\Utility.cs,CreateStorageAccountFromConnectionString,The length of the statement  "		Console.WriteLine ("Invalid storage account information provided. Please confirm the AccountName and AccountKey are valid in the app.config file - then restart the sample."); " is 174.
Long Statement,EncryptionShared,Utility,F:\newReposMay17\Azure_azure-storage-net\Samples\GettingStarted\EncryptionSamples\BlobGettingStarted\..\shared\Utility.cs,CreateStorageAccountFromConnectionString,The length of the statement  "		Console.WriteLine ("Invalid storage account information provided. Please confirm the AccountName and AccountKey are valid in the app.config file - then restart the sample."); " is 174.
Magic Number,BlobGettingStarted,Program,F:\newReposMay17\Azure_azure-storage-net\Samples\GettingStarted\EncryptionSamples\BlobGettingStarted\Program.cs,Main,The following statement contains a magic number: try {  	container.Create ();  	int size = 5 * 1024 * 1024;  	byte[] buffer = new byte[size];  	Random rand = new Random ();  	rand.NextBytes (buffer);  	CloudBlockBlob blob = container.GetBlockBlobReference ("blockblob");  	// Create the IKey used for encryption.  	RsaKey key = new RsaKey ("private:key1");  	// Create the encryption policy to be used for upload.  	BlobEncryptionPolicy uploadPolicy = new BlobEncryptionPolicy (key' null);  	// Set the encryption policy on the request options.  	BlobRequestOptions uploadOptions = new BlobRequestOptions () {  		EncryptionPolicy = uploadPolicy  	};  	Console.WriteLine ("Uploading the encrypted blob.");  	// Upload the encrypted contents to the blob.  	using (MemoryStream stream = new MemoryStream (buffer)) {  		blob.UploadFromStream (stream' size' null' uploadOptions' null);  	}  	// Download the encrypted blob.  	// For downloads' a resolver can be set up that will help pick the key based on the key id.  	LocalResolver resolver = new LocalResolver ();  	resolver.Add (key);  	BlobEncryptionPolicy downloadPolicy = new BlobEncryptionPolicy (null' resolver);  	// Set the decryption policy on the request options.  	BlobRequestOptions downloadOptions = new BlobRequestOptions () {  		EncryptionPolicy = downloadPolicy  	};  	Console.WriteLine ("Downloading the encrypted blob.");  	// Download and decrypt the encrypted contents from the blob.  	using (MemoryStream outputStream = new MemoryStream ()) {  		blob.DownloadToStream (outputStream' null' downloadOptions' null);  	}  	Console.WriteLine ("Press enter key to exit");  	Console.ReadLine ();  } finally {  	container.DeleteIfExists ();  }  
Magic Number,BlobGettingStarted,Program,F:\newReposMay17\Azure_azure-storage-net\Samples\GettingStarted\EncryptionSamples\BlobGettingStarted\Program.cs,Main,The following statement contains a magic number: try {  	container.Create ();  	int size = 5 * 1024 * 1024;  	byte[] buffer = new byte[size];  	Random rand = new Random ();  	rand.NextBytes (buffer);  	CloudBlockBlob blob = container.GetBlockBlobReference ("blockblob");  	// Create the IKey used for encryption.  	RsaKey key = new RsaKey ("private:key1");  	// Create the encryption policy to be used for upload.  	BlobEncryptionPolicy uploadPolicy = new BlobEncryptionPolicy (key' null);  	// Set the encryption policy on the request options.  	BlobRequestOptions uploadOptions = new BlobRequestOptions () {  		EncryptionPolicy = uploadPolicy  	};  	Console.WriteLine ("Uploading the encrypted blob.");  	// Upload the encrypted contents to the blob.  	using (MemoryStream stream = new MemoryStream (buffer)) {  		blob.UploadFromStream (stream' size' null' uploadOptions' null);  	}  	// Download the encrypted blob.  	// For downloads' a resolver can be set up that will help pick the key based on the key id.  	LocalResolver resolver = new LocalResolver ();  	resolver.Add (key);  	BlobEncryptionPolicy downloadPolicy = new BlobEncryptionPolicy (null' resolver);  	// Set the decryption policy on the request options.  	BlobRequestOptions downloadOptions = new BlobRequestOptions () {  		EncryptionPolicy = downloadPolicy  	};  	Console.WriteLine ("Downloading the encrypted blob.");  	// Download and decrypt the encrypted contents from the blob.  	using (MemoryStream outputStream = new MemoryStream ()) {  		blob.DownloadToStream (outputStream' null' downloadOptions' null);  	}  	Console.WriteLine ("Press enter key to exit");  	Console.ReadLine ();  } finally {  	container.DeleteIfExists ();  }  
Magic Number,BlobGettingStarted,Program,F:\newReposMay17\Azure_azure-storage-net\Samples\GettingStarted\EncryptionSamples\BlobGettingStarted\Program.cs,Main,The following statement contains a magic number: try {  	container.Create ();  	int size = 5 * 1024 * 1024;  	byte[] buffer = new byte[size];  	Random rand = new Random ();  	rand.NextBytes (buffer);  	CloudBlockBlob blob = container.GetBlockBlobReference ("blockblob");  	// Create the IKey used for encryption.  	RsaKey key = new RsaKey ("private:key1");  	// Create the encryption policy to be used for upload.  	BlobEncryptionPolicy uploadPolicy = new BlobEncryptionPolicy (key' null);  	// Set the encryption policy on the request options.  	BlobRequestOptions uploadOptions = new BlobRequestOptions () {  		EncryptionPolicy = uploadPolicy  	};  	Console.WriteLine ("Uploading the encrypted blob.");  	// Upload the encrypted contents to the blob.  	using (MemoryStream stream = new MemoryStream (buffer)) {  		blob.UploadFromStream (stream' size' null' uploadOptions' null);  	}  	// Download the encrypted blob.  	// For downloads' a resolver can be set up that will help pick the key based on the key id.  	LocalResolver resolver = new LocalResolver ();  	resolver.Add (key);  	BlobEncryptionPolicy downloadPolicy = new BlobEncryptionPolicy (null' resolver);  	// Set the decryption policy on the request options.  	BlobRequestOptions downloadOptions = new BlobRequestOptions () {  		EncryptionPolicy = downloadPolicy  	};  	Console.WriteLine ("Downloading the encrypted blob.");  	// Download and decrypt the encrypted contents from the blob.  	using (MemoryStream outputStream = new MemoryStream ()) {  		blob.DownloadToStream (outputStream' null' downloadOptions' null);  	}  	Console.WriteLine ("Press enter key to exit");  	Console.ReadLine ();  } finally {  	container.DeleteIfExists ();  }  
