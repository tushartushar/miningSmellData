Implementation smell,Namespace,Class,File,Method,Description
Long Statement,TableGettingStartedUsingResolver,Program,F:\newReposMay17\Azure_azure-storage-net\Samples\GettingStarted\EncryptionSamples\TableGettingStarted\Program.cs,Main,The length of the statement  "	// How to create a storage connection string - https://azure.microsoft.com/en-us/documentation/articles/storage-configure-connection-string/ " is 140.
Long Statement,EncryptionShared,Utility,F:\newReposMay17\Azure_azure-storage-net\Samples\GettingStarted\EncryptionSamples\TableGettingStarted\..\shared\Utility.cs,CreateStorageAccountFromConnectionString,The length of the statement  "		Console.WriteLine ("Invalid storage account information provided. Please confirm the AccountName and AccountKey are valid in the app.config file - then restart the sample."); " is 174.
Long Statement,EncryptionShared,Utility,F:\newReposMay17\Azure_azure-storage-net\Samples\GettingStarted\EncryptionSamples\TableGettingStarted\..\shared\Utility.cs,CreateStorageAccountFromConnectionString,The length of the statement  "		Console.WriteLine ("Invalid storage account information provided. Please confirm the AccountName and AccountKey are valid in the app.config file - then restart the sample."); " is 174.
Magic Number,TableGettingStartedUsingResolver,Program,F:\newReposMay17\Azure_azure-storage-net\Samples\GettingStarted\EncryptionSamples\TableGettingStarted\Program.cs,Main,The following statement contains a magic number: try {  	table.Create ();  	// Create the IKey used for encryption.  	RsaKey key = new RsaKey ("private:key1");  	DynamicTableEntity ent = new DynamicTableEntity () {  		PartitionKey = Guid.NewGuid ().ToString ()'  		RowKey = DateTime.Now.Ticks.ToString ()  	};  	ent.Properties.Add ("EncryptedProp1"' new EntityProperty (string.Empty));  	ent.Properties.Add ("EncryptedProp2"' new EntityProperty ("bar"));  	ent.Properties.Add ("NotEncryptedProp"' new EntityProperty (1234));  	// This is used to indicate whether a property should be encrypted or not given the partition key' row key'   	// and the property name.  	Func<string' string' string' bool> encryptionResolver = (pk' rk' propName) => {  		if (propName.StartsWith ("EncryptedProp")) {  			return true;  		}  		return false;  	};  	TableRequestOptions insertOptions = new TableRequestOptions () {  		EncryptionPolicy = new TableEncryptionPolicy (key' null)'  		EncryptionResolver = encryptionResolver  	};  	// Insert Entity  	Console.WriteLine ("Inserting the encrypted entity.");  	table.Execute (TableOperation.Insert (ent)' insertOptions' null);  	// For retrieves' a resolver can be set up that will help pick the key based on the key id.  	LocalResolver resolver = new LocalResolver ();  	resolver.Add (key);  	TableRequestOptions retrieveOptions = new TableRequestOptions () {  		EncryptionPolicy = new TableEncryptionPolicy (null' resolver)  	};  	// Retrieve Entity  	Console.WriteLine ("Retrieving the encrypted entity.");  	TableOperation operation = TableOperation.Retrieve (ent.PartitionKey' ent.RowKey);  	TableResult result = table.Execute (operation' retrieveOptions' null);  	Console.WriteLine ("Press enter key to exit");  	Console.ReadLine ();  } finally {  	table.DeleteIfExists ();  }  
Magic Number,TableGettingStartedUsingResolver,Program,F:\newReposMay17\Azure_azure-storage-net\Samples\GettingStarted\EncryptionSamples\TableGettingStarted\Program.cs,Main,The following statement contains a magic number: ent.Properties.Add ("NotEncryptedProp"' new EntityProperty (1234));  
