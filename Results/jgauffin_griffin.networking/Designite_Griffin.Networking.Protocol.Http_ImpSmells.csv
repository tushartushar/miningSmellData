Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Griffin.Networking.Protocol.Http,NameValueParser,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\NameValueParser.cs,Parse,Cyclomatic complexity of the method is 12
Complex Method,Griffin.Networking.Protocol.Http.Implementation.Infrastructure,UrlDecoder,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Implementation\Infrastructure\UrlDecoder.cs,Parse,Cyclomatic complexity of the method is 13
Complex Method,Griffin.Networking.Protocol.Http.Services.BodyDecoders,MultipartDecoder,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\MultipartDecoder.cs,Decode,Cyclomatic complexity of the method is 9
Complex Method,Griffin.Networking.Protocol.Http.Services.BodyDecoders.Mono,HttpMultipart,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\Mono\MultiPartParser.cs,MoveToNextBoundary,Cyclomatic complexity of the method is 13
Long Parameter List,Griffin.Networking.Protocol.Http.Services.Authentication,DigestAuthenticator,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\Authentication\DigestAuthenticator.cs,Encrypt,The method has 9 parameters.
Long Parameter List,Griffin.Networking.Protocol.Http.Services.Authentication,DigestAuthenticator,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\Authentication\DigestAuthenticator.cs,Encrypt,The method has 6 parameters.
Long Statement,Griffin.Networking.Protocol.Http.Implementation,ByteRangeStream,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Implementation\ByteRangeStream.cs,Read,The length of the statement  "		throw new ArgumentOutOfRangeException ("count"' offset + count' string.Format ("Offset+Count larger than the buffer size ({0} bytes)."' buffer.Length)); " is 152.
Long Statement,Griffin.Networking.Protocol.Http.Implementation,ByteRangeStream,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Implementation\ByteRangeStream.cs,Read,The length of the statement  "		throw new ArgumentOutOfRangeException ("count"' count' string.Format ("Trying to read more then is left in the ranges ({0} bytes)."' (_ranges.TotalLength - _bytesRead))); " is 170.
Long Statement,Griffin.Networking.Protocol.Http.Implementation,RangeCollection,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Implementation\RangeCollection.cs,Parse,The length of the statement  "			throw new ArgumentException (string.Format ("Inner stream is just {0} bytes long' while we should send {1} bytes."' streamLength' TotalLength)); " is 144.
Long Statement,Griffin.Networking.Protocol.Http.Implementation,HttpHeaderSerializer,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Implementation\HttpHeaderSerializer.cs,SerializeCookies,The length of the statement  "	//Set-Cookie: <name>=<value>[; <name>=<value>][; expires=<date>][; domain=<domain_name>][; path=<some_path>][; secure][; httponly] " is 130.
Long Statement,Griffin.Networking.Protocol.Http.Implementation,HttpRequest,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Implementation\HttpRequest.cs,AddHeader,The length of the statement  "		Uri = value.StartsWith ("http"' StringComparison.OrdinalIgnoreCase) ? new Uri (string.Format ("{0}{1}"' value' _pathAndQuery)) : new Uri (string.Format ("http://{0}{1}"' value' _pathAndQuery)); " is 193.
Long Statement,Griffin.Networking.Protocol.Http.Pipeline.Handlers,BodyDecoder,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Pipeline\Handlers\BodyDecoder.cs,HandleUpstream,The length of the statement  "			var response = httpmsg.HttpRequest.CreateResponse (HttpStatusCode.RequestEntityTooLarge' string.Format ("Max body size is {0} bytes."' _sizeLimit)); " is 148.
Long Statement,Griffin.Networking.Protocol.Http.Pipeline.Handlers,BodyDecoder,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Pipeline\Handlers\BodyDecoder.cs,HandleUpstream,The length of the statement  "			throw new InvalidOperationException ("Current message is not set. We have no way of knowing when to stop decoding the body."); " is 126.
Long Statement,Griffin.Networking.Protocol.Http.Pipeline.Handlers,BodyDecoder,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Pipeline\Handlers\BodyDecoder.cs,ParseBody,The length of the statement  "			_currentMessage.Body = new FileStream (Path.Combine (Path.GetTempPath ()' "http." + Guid.NewGuid ().ToString ("N") + ".tmp")' FileMode.CreateNew); " is 146.
Long Statement,Griffin.Networking.Protocol.Http.Pipeline.Handlers,PipelineFailureHandler,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Pipeline\Handlers\PipelineFailureHandler.cs,HandleUpstream,The length of the statement  "		var response = new HttpResponse ("HTTP/1.1"' HttpStatusCode.NotFound' "Failed to find " + requestMsg.HttpRequest.Uri.AbsolutePath); " is 131.
Long Statement,Griffin.Networking.Protocol.Http.Services.Authentication,BasicAuthentication,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\Authentication\BasicAuthentication.cs,Authenticate,The length of the statement  "                encoded string in the credentials.*/var decoded = Encoding.UTF8.GetString (Convert.FromBase64String (authHeader.Value)); " is 120.
Long Statement,Griffin.Networking.Protocol.Http.Services.Authentication,DigestAuthenticator,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\Authentication\DigestAuthenticator.cs,Authenticate,The length of the statement  "	var ha1 = string.IsNullOrEmpty (user.HA1) ? GetHa1 (_realmRepository.GetRealm (request)' username' user.Password) : user.HA1; " is 125.
Long Statement,Griffin.Networking.Protocol.Http.Services.Authentication,DigestAuthenticator,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\Authentication\DigestAuthenticator.cs,Authenticate,The length of the statement  "	var hashedDigest = Encrypt (ha1' ha2' parameters ["qop"]' parameters ["nonce"]' parameters ["nc"]' parameters ["cnonce"]); " is 122.
Long Statement,Griffin.Networking.Protocol.Http.Services.Authentication.Digest,NonceService,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\Authentication\Digest\NonceService.cs,Sweep,The length of the statement  "	_items.Where (kvp => (DateTime.Now - kvp.Value.LastUpdate) > _expiresTimeout).Select (kvp => kvp.Key).ToList ().ForEach (key => { " is 129.
Long Statement,Griffin.Networking.Protocol.Http.Services.BodyDecoders,MultipartDecoder,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\MultipartDecoder.cs,Decode,The length of the statement  "			var path = string.IsNullOrEmpty (internetCache) ? Path.Combine ("var"' "tmp") : Path.Combine (internetCache.Replace ("\\\\"' "\\")' "tmp"); " is 139.
Empty Catch Block,Griffin.Networking.Protocol.Http.Services.BodyDecoders.Mono,HttpMultipart,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\Mono\MultiPartParser.cs,ReadBoundary,The method has an empty catch block.
Magic Number,Griffin.Networking.Protocol.Http,HttpMessageFactory,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\HttpMessageFactory.cs,HttpMessageFactory,The following statement contains a magic number: _stack = new BufferSliceStack (100' 65535);  
Magic Number,Griffin.Networking.Protocol.Http,HttpMessageFactory,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\HttpMessageFactory.cs,HttpMessageFactory,The following statement contains a magic number: _stack = new BufferSliceStack (100' 65535);  
Magic Number,Griffin.Networking.Protocol.Http.Implementation,HttpHeaderParser,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Implementation\HttpHeaderParser.cs,FirstLine,The following statement contains a magic number: if (ch == '\n') {  	var line = _headerName.ToString ().Split (' ');  	if (line.Length != 3)  		throw new BadRequestException ("First line is not a valid REQUEST/RESPONSE line: " + _headerName);  	if (line [2].ToLower ().StartsWith ("http"))  		RequestLineParsed (this' new RequestLineEventArgs (line [0]' line [1]' line [2]));  	else {  		throw new NotSupportedException ("Not supporting response parsing yet.");  	}  	_headerName.Clear ();  	_parserMethod = Name_StripWhiteSpacesBefore;  	return;  }  
Magic Number,Griffin.Networking.Protocol.Http.Implementation,HttpHeaderParser,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Implementation\HttpHeaderParser.cs,FirstLine,The following statement contains a magic number: if (ch == '\n') {  	var line = _headerName.ToString ().Split (' ');  	if (line.Length != 3)  		throw new BadRequestException ("First line is not a valid REQUEST/RESPONSE line: " + _headerName);  	if (line [2].ToLower ().StartsWith ("http"))  		RequestLineParsed (this' new RequestLineEventArgs (line [0]' line [1]' line [2]));  	else {  		throw new NotSupportedException ("Not supporting response parsing yet.");  	}  	_headerName.Clear ();  	_parserMethod = Name_StripWhiteSpacesBefore;  	return;  }  
Magic Number,Griffin.Networking.Protocol.Http.Implementation,HttpHeaderParser,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Implementation\HttpHeaderParser.cs,FirstLine,The following statement contains a magic number: if (ch == '\n') {  	var line = _headerName.ToString ().Split (' ');  	if (line.Length != 3)  		throw new BadRequestException ("First line is not a valid REQUEST/RESPONSE line: " + _headerName);  	if (line [2].ToLower ().StartsWith ("http"))  		RequestLineParsed (this' new RequestLineEventArgs (line [0]' line [1]' line [2]));  	else {  		throw new NotSupportedException ("Not supporting response parsing yet.");  	}  	_headerName.Clear ();  	_parserMethod = Name_StripWhiteSpacesBefore;  	return;  }  
Magic Number,Griffin.Networking.Protocol.Http.Implementation,HttpHeaderParser,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Implementation\HttpHeaderParser.cs,FirstLine,The following statement contains a magic number: if (line.Length != 3)  	throw new BadRequestException ("First line is not a valid REQUEST/RESPONSE line: " + _headerName);  
Magic Number,Griffin.Networking.Protocol.Http.Implementation,HttpHeaderParser,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Implementation\HttpHeaderParser.cs,FirstLine,The following statement contains a magic number: if (line [2].ToLower ().StartsWith ("http"))  	RequestLineParsed (this' new RequestLineEventArgs (line [0]' line [1]' line [2]));  else {  	throw new NotSupportedException ("Not supporting response parsing yet.");  }  
Magic Number,Griffin.Networking.Protocol.Http.Implementation,HttpHeaderParser,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Implementation\HttpHeaderParser.cs,FirstLine,The following statement contains a magic number: if (line [2].ToLower ().StartsWith ("http"))  	RequestLineParsed (this' new RequestLineEventArgs (line [0]' line [1]' line [2]));  else {  	throw new NotSupportedException ("Not supporting response parsing yet.");  }  
Magic Number,Griffin.Networking.Protocol.Http.Implementation,HttpHeaderParser,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Implementation\HttpHeaderParser.cs,FirstLine,The following statement contains a magic number: RequestLineParsed (this' new RequestLineEventArgs (line [0]' line [1]' line [2]));  
Magic Number,Griffin.Networking.Protocol.Http.Implementation,HttpMessage,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Implementation\HttpMessage.cs,ParseContentEncoding,The following statement contains a magic number: if (pos != -1) {  	pos += 8;  	var endPos = value.IndexOf (";"' pos + 1);  	var encoding = endPos == -1 ? value.Substring (pos) : value.Substring (pos' endPos - pos);  	encoding = encoding.ToUpper ();  	ContentEncoding = Encoding.GetEncoding (encoding.ToUpper ());  }  
Magic Number,Griffin.Networking.Protocol.Http.Implementation,HttpMessage,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Implementation\HttpMessage.cs,ParseContentEncoding,The following statement contains a magic number: pos += 8;  
Magic Number,Griffin.Networking.Protocol.Http.Pipeline.Handlers,BodyDecoder,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Pipeline\Handlers\BodyDecoder.cs,BodyDecoder,The following statement contains a magic number: _bufferPool = new BufferSliceStack (1000' bufferSize);  
Magic Number,Griffin.Networking.Protocol.Http.Services.Authentication,BasicAuthentication,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\Authentication\BasicAuthentication.cs,CreateChallenge,The following statement contains a magic number: response.StatusCode = 401;  
Magic Number,Griffin.Networking.Protocol.Http.Services.Authentication,DigestAuthenticator,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\Authentication\DigestAuthenticator.cs,CreateChallenge,The following statement contains a magic number: response.StatusCode = 401;  
Magic Number,Griffin.Networking.Protocol.Http.Services.Authentication.Digest,Nonce,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\Authentication\Digest\Nonce.cs,Validate,The following statement contains a magic number: if (_counts.Count <= 5 || value > 5)  	return false;  
Magic Number,Griffin.Networking.Protocol.Http.Services.Authentication.Digest,Nonce,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\Authentication\Digest\Nonce.cs,Validate,The following statement contains a magic number: if (_counts.Count <= 5 || value > 5)  	return false;  
Magic Number,Griffin.Networking.Protocol.Http.Services.BodyDecoders.Mono,HttpMultipart,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\Mono\MultiPartParser.cs,HttpMultipart,The following statement contains a magic number: buffer = new byte[boundary_bytes.Length + 2];  
Magic Number,Griffin.Networking.Protocol.Http.Services.BodyDecoders.Mono,HttpMultipart,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\Mono\MultiPartParser.cs,MoveToNextBoundary,The following statement contains a magic number: while (true) {  	if (c == -1)  		return -1;  	if (state == 0 && c == LF) {  		retval = data.Position - 1;  		if (got_cr)  			retval--;  		state = 1;  		c = data.ReadByte ();  	} else if (state == 0) {  		got_cr = (c == CR);  		c = data.ReadByte ();  	} else if (state == 1 && c == '-') {  		c = data.ReadByte ();  		if (c == -1)  			return -1;  		if (c != '-') {  			state = 0;  			got_cr = false;  			continue;  			// no ReadByte() here  		}  		var nread = data.Read (buffer' 0' buffer.Length);  		var bl = buffer.Length;  		if (nread != bl)  			return -1;  		if (!CompareBytes (boundary_bytes' buffer)) {  			state = 0;  			data.Position = retval + 2;  			if (got_cr) {  				data.Position++;  				got_cr = false;  			}  			c = data.ReadByte ();  			continue;  		}  		if (buffer [bl - 2] == '-' && buffer [bl - 1] == '-') {  			_atEof = true;  		} else if (buffer [bl - 2] != CR || buffer [bl - 1] != LF) {  			state = 0;  			data.Position = retval + 2;  			if (got_cr) {  				data.Position++;  				got_cr = false;  			}  			c = data.ReadByte ();  			continue;  		}  		data.Position = retval + 2;  		if (got_cr)  			data.Position++;  		break;  	} else {  		// state == 1  		state = 0;  		// no ReadByte() here  	}  }  
Magic Number,Griffin.Networking.Protocol.Http.Services.BodyDecoders.Mono,HttpMultipart,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\Mono\MultiPartParser.cs,MoveToNextBoundary,The following statement contains a magic number: while (true) {  	if (c == -1)  		return -1;  	if (state == 0 && c == LF) {  		retval = data.Position - 1;  		if (got_cr)  			retval--;  		state = 1;  		c = data.ReadByte ();  	} else if (state == 0) {  		got_cr = (c == CR);  		c = data.ReadByte ();  	} else if (state == 1 && c == '-') {  		c = data.ReadByte ();  		if (c == -1)  			return -1;  		if (c != '-') {  			state = 0;  			got_cr = false;  			continue;  			// no ReadByte() here  		}  		var nread = data.Read (buffer' 0' buffer.Length);  		var bl = buffer.Length;  		if (nread != bl)  			return -1;  		if (!CompareBytes (boundary_bytes' buffer)) {  			state = 0;  			data.Position = retval + 2;  			if (got_cr) {  				data.Position++;  				got_cr = false;  			}  			c = data.ReadByte ();  			continue;  		}  		if (buffer [bl - 2] == '-' && buffer [bl - 1] == '-') {  			_atEof = true;  		} else if (buffer [bl - 2] != CR || buffer [bl - 1] != LF) {  			state = 0;  			data.Position = retval + 2;  			if (got_cr) {  				data.Position++;  				got_cr = false;  			}  			c = data.ReadByte ();  			continue;  		}  		data.Position = retval + 2;  		if (got_cr)  			data.Position++;  		break;  	} else {  		// state == 1  		state = 0;  		// no ReadByte() here  	}  }  
Magic Number,Griffin.Networking.Protocol.Http.Services.BodyDecoders.Mono,HttpMultipart,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\Mono\MultiPartParser.cs,MoveToNextBoundary,The following statement contains a magic number: while (true) {  	if (c == -1)  		return -1;  	if (state == 0 && c == LF) {  		retval = data.Position - 1;  		if (got_cr)  			retval--;  		state = 1;  		c = data.ReadByte ();  	} else if (state == 0) {  		got_cr = (c == CR);  		c = data.ReadByte ();  	} else if (state == 1 && c == '-') {  		c = data.ReadByte ();  		if (c == -1)  			return -1;  		if (c != '-') {  			state = 0;  			got_cr = false;  			continue;  			// no ReadByte() here  		}  		var nread = data.Read (buffer' 0' buffer.Length);  		var bl = buffer.Length;  		if (nread != bl)  			return -1;  		if (!CompareBytes (boundary_bytes' buffer)) {  			state = 0;  			data.Position = retval + 2;  			if (got_cr) {  				data.Position++;  				got_cr = false;  			}  			c = data.ReadByte ();  			continue;  		}  		if (buffer [bl - 2] == '-' && buffer [bl - 1] == '-') {  			_atEof = true;  		} else if (buffer [bl - 2] != CR || buffer [bl - 1] != LF) {  			state = 0;  			data.Position = retval + 2;  			if (got_cr) {  				data.Position++;  				got_cr = false;  			}  			c = data.ReadByte ();  			continue;  		}  		data.Position = retval + 2;  		if (got_cr)  			data.Position++;  		break;  	} else {  		// state == 1  		state = 0;  		// no ReadByte() here  	}  }  
Magic Number,Griffin.Networking.Protocol.Http.Services.BodyDecoders.Mono,HttpMultipart,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\Mono\MultiPartParser.cs,MoveToNextBoundary,The following statement contains a magic number: while (true) {  	if (c == -1)  		return -1;  	if (state == 0 && c == LF) {  		retval = data.Position - 1;  		if (got_cr)  			retval--;  		state = 1;  		c = data.ReadByte ();  	} else if (state == 0) {  		got_cr = (c == CR);  		c = data.ReadByte ();  	} else if (state == 1 && c == '-') {  		c = data.ReadByte ();  		if (c == -1)  			return -1;  		if (c != '-') {  			state = 0;  			got_cr = false;  			continue;  			// no ReadByte() here  		}  		var nread = data.Read (buffer' 0' buffer.Length);  		var bl = buffer.Length;  		if (nread != bl)  			return -1;  		if (!CompareBytes (boundary_bytes' buffer)) {  			state = 0;  			data.Position = retval + 2;  			if (got_cr) {  				data.Position++;  				got_cr = false;  			}  			c = data.ReadByte ();  			continue;  		}  		if (buffer [bl - 2] == '-' && buffer [bl - 1] == '-') {  			_atEof = true;  		} else if (buffer [bl - 2] != CR || buffer [bl - 1] != LF) {  			state = 0;  			data.Position = retval + 2;  			if (got_cr) {  				data.Position++;  				got_cr = false;  			}  			c = data.ReadByte ();  			continue;  		}  		data.Position = retval + 2;  		if (got_cr)  			data.Position++;  		break;  	} else {  		// state == 1  		state = 0;  		// no ReadByte() here  	}  }  
Magic Number,Griffin.Networking.Protocol.Http.Services.BodyDecoders.Mono,HttpMultipart,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\Mono\MultiPartParser.cs,MoveToNextBoundary,The following statement contains a magic number: while (true) {  	if (c == -1)  		return -1;  	if (state == 0 && c == LF) {  		retval = data.Position - 1;  		if (got_cr)  			retval--;  		state = 1;  		c = data.ReadByte ();  	} else if (state == 0) {  		got_cr = (c == CR);  		c = data.ReadByte ();  	} else if (state == 1 && c == '-') {  		c = data.ReadByte ();  		if (c == -1)  			return -1;  		if (c != '-') {  			state = 0;  			got_cr = false;  			continue;  			// no ReadByte() here  		}  		var nread = data.Read (buffer' 0' buffer.Length);  		var bl = buffer.Length;  		if (nread != bl)  			return -1;  		if (!CompareBytes (boundary_bytes' buffer)) {  			state = 0;  			data.Position = retval + 2;  			if (got_cr) {  				data.Position++;  				got_cr = false;  			}  			c = data.ReadByte ();  			continue;  		}  		if (buffer [bl - 2] == '-' && buffer [bl - 1] == '-') {  			_atEof = true;  		} else if (buffer [bl - 2] != CR || buffer [bl - 1] != LF) {  			state = 0;  			data.Position = retval + 2;  			if (got_cr) {  				data.Position++;  				got_cr = false;  			}  			c = data.ReadByte ();  			continue;  		}  		data.Position = retval + 2;  		if (got_cr)  			data.Position++;  		break;  	} else {  		// state == 1  		state = 0;  		// no ReadByte() here  	}  }  
Magic Number,Griffin.Networking.Protocol.Http.Services.BodyDecoders.Mono,HttpMultipart,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\Mono\MultiPartParser.cs,MoveToNextBoundary,The following statement contains a magic number: if (state == 0 && c == LF) {  	retval = data.Position - 1;  	if (got_cr)  		retval--;  	state = 1;  	c = data.ReadByte ();  } else if (state == 0) {  	got_cr = (c == CR);  	c = data.ReadByte ();  } else if (state == 1 && c == '-') {  	c = data.ReadByte ();  	if (c == -1)  		return -1;  	if (c != '-') {  		state = 0;  		got_cr = false;  		continue;  		// no ReadByte() here  	}  	var nread = data.Read (buffer' 0' buffer.Length);  	var bl = buffer.Length;  	if (nread != bl)  		return -1;  	if (!CompareBytes (boundary_bytes' buffer)) {  		state = 0;  		data.Position = retval + 2;  		if (got_cr) {  			data.Position++;  			got_cr = false;  		}  		c = data.ReadByte ();  		continue;  	}  	if (buffer [bl - 2] == '-' && buffer [bl - 1] == '-') {  		_atEof = true;  	} else if (buffer [bl - 2] != CR || buffer [bl - 1] != LF) {  		state = 0;  		data.Position = retval + 2;  		if (got_cr) {  			data.Position++;  			got_cr = false;  		}  		c = data.ReadByte ();  		continue;  	}  	data.Position = retval + 2;  	if (got_cr)  		data.Position++;  	break;  } else {  	// state == 1  	state = 0;  	// no ReadByte() here  }  
Magic Number,Griffin.Networking.Protocol.Http.Services.BodyDecoders.Mono,HttpMultipart,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\Mono\MultiPartParser.cs,MoveToNextBoundary,The following statement contains a magic number: if (state == 0 && c == LF) {  	retval = data.Position - 1;  	if (got_cr)  		retval--;  	state = 1;  	c = data.ReadByte ();  } else if (state == 0) {  	got_cr = (c == CR);  	c = data.ReadByte ();  } else if (state == 1 && c == '-') {  	c = data.ReadByte ();  	if (c == -1)  		return -1;  	if (c != '-') {  		state = 0;  		got_cr = false;  		continue;  		// no ReadByte() here  	}  	var nread = data.Read (buffer' 0' buffer.Length);  	var bl = buffer.Length;  	if (nread != bl)  		return -1;  	if (!CompareBytes (boundary_bytes' buffer)) {  		state = 0;  		data.Position = retval + 2;  		if (got_cr) {  			data.Position++;  			got_cr = false;  		}  		c = data.ReadByte ();  		continue;  	}  	if (buffer [bl - 2] == '-' && buffer [bl - 1] == '-') {  		_atEof = true;  	} else if (buffer [bl - 2] != CR || buffer [bl - 1] != LF) {  		state = 0;  		data.Position = retval + 2;  		if (got_cr) {  			data.Position++;  			got_cr = false;  		}  		c = data.ReadByte ();  		continue;  	}  	data.Position = retval + 2;  	if (got_cr)  		data.Position++;  	break;  } else {  	// state == 1  	state = 0;  	// no ReadByte() here  }  
Magic Number,Griffin.Networking.Protocol.Http.Services.BodyDecoders.Mono,HttpMultipart,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\Mono\MultiPartParser.cs,MoveToNextBoundary,The following statement contains a magic number: if (state == 0 && c == LF) {  	retval = data.Position - 1;  	if (got_cr)  		retval--;  	state = 1;  	c = data.ReadByte ();  } else if (state == 0) {  	got_cr = (c == CR);  	c = data.ReadByte ();  } else if (state == 1 && c == '-') {  	c = data.ReadByte ();  	if (c == -1)  		return -1;  	if (c != '-') {  		state = 0;  		got_cr = false;  		continue;  		// no ReadByte() here  	}  	var nread = data.Read (buffer' 0' buffer.Length);  	var bl = buffer.Length;  	if (nread != bl)  		return -1;  	if (!CompareBytes (boundary_bytes' buffer)) {  		state = 0;  		data.Position = retval + 2;  		if (got_cr) {  			data.Position++;  			got_cr = false;  		}  		c = data.ReadByte ();  		continue;  	}  	if (buffer [bl - 2] == '-' && buffer [bl - 1] == '-') {  		_atEof = true;  	} else if (buffer [bl - 2] != CR || buffer [bl - 1] != LF) {  		state = 0;  		data.Position = retval + 2;  		if (got_cr) {  			data.Position++;  			got_cr = false;  		}  		c = data.ReadByte ();  		continue;  	}  	data.Position = retval + 2;  	if (got_cr)  		data.Position++;  	break;  } else {  	// state == 1  	state = 0;  	// no ReadByte() here  }  
Magic Number,Griffin.Networking.Protocol.Http.Services.BodyDecoders.Mono,HttpMultipart,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\Mono\MultiPartParser.cs,MoveToNextBoundary,The following statement contains a magic number: if (state == 0 && c == LF) {  	retval = data.Position - 1;  	if (got_cr)  		retval--;  	state = 1;  	c = data.ReadByte ();  } else if (state == 0) {  	got_cr = (c == CR);  	c = data.ReadByte ();  } else if (state == 1 && c == '-') {  	c = data.ReadByte ();  	if (c == -1)  		return -1;  	if (c != '-') {  		state = 0;  		got_cr = false;  		continue;  		// no ReadByte() here  	}  	var nread = data.Read (buffer' 0' buffer.Length);  	var bl = buffer.Length;  	if (nread != bl)  		return -1;  	if (!CompareBytes (boundary_bytes' buffer)) {  		state = 0;  		data.Position = retval + 2;  		if (got_cr) {  			data.Position++;  			got_cr = false;  		}  		c = data.ReadByte ();  		continue;  	}  	if (buffer [bl - 2] == '-' && buffer [bl - 1] == '-') {  		_atEof = true;  	} else if (buffer [bl - 2] != CR || buffer [bl - 1] != LF) {  		state = 0;  		data.Position = retval + 2;  		if (got_cr) {  			data.Position++;  			got_cr = false;  		}  		c = data.ReadByte ();  		continue;  	}  	data.Position = retval + 2;  	if (got_cr)  		data.Position++;  	break;  } else {  	// state == 1  	state = 0;  	// no ReadByte() here  }  
Magic Number,Griffin.Networking.Protocol.Http.Services.BodyDecoders.Mono,HttpMultipart,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\Mono\MultiPartParser.cs,MoveToNextBoundary,The following statement contains a magic number: if (state == 0 && c == LF) {  	retval = data.Position - 1;  	if (got_cr)  		retval--;  	state = 1;  	c = data.ReadByte ();  } else if (state == 0) {  	got_cr = (c == CR);  	c = data.ReadByte ();  } else if (state == 1 && c == '-') {  	c = data.ReadByte ();  	if (c == -1)  		return -1;  	if (c != '-') {  		state = 0;  		got_cr = false;  		continue;  		// no ReadByte() here  	}  	var nread = data.Read (buffer' 0' buffer.Length);  	var bl = buffer.Length;  	if (nread != bl)  		return -1;  	if (!CompareBytes (boundary_bytes' buffer)) {  		state = 0;  		data.Position = retval + 2;  		if (got_cr) {  			data.Position++;  			got_cr = false;  		}  		c = data.ReadByte ();  		continue;  	}  	if (buffer [bl - 2] == '-' && buffer [bl - 1] == '-') {  		_atEof = true;  	} else if (buffer [bl - 2] != CR || buffer [bl - 1] != LF) {  		state = 0;  		data.Position = retval + 2;  		if (got_cr) {  			data.Position++;  			got_cr = false;  		}  		c = data.ReadByte ();  		continue;  	}  	data.Position = retval + 2;  	if (got_cr)  		data.Position++;  	break;  } else {  	// state == 1  	state = 0;  	// no ReadByte() here  }  
Magic Number,Griffin.Networking.Protocol.Http.Services.BodyDecoders.Mono,HttpMultipart,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\Mono\MultiPartParser.cs,MoveToNextBoundary,The following statement contains a magic number: if (state == 0) {  	got_cr = (c == CR);  	c = data.ReadByte ();  } else if (state == 1 && c == '-') {  	c = data.ReadByte ();  	if (c == -1)  		return -1;  	if (c != '-') {  		state = 0;  		got_cr = false;  		continue;  		// no ReadByte() here  	}  	var nread = data.Read (buffer' 0' buffer.Length);  	var bl = buffer.Length;  	if (nread != bl)  		return -1;  	if (!CompareBytes (boundary_bytes' buffer)) {  		state = 0;  		data.Position = retval + 2;  		if (got_cr) {  			data.Position++;  			got_cr = false;  		}  		c = data.ReadByte ();  		continue;  	}  	if (buffer [bl - 2] == '-' && buffer [bl - 1] == '-') {  		_atEof = true;  	} else if (buffer [bl - 2] != CR || buffer [bl - 1] != LF) {  		state = 0;  		data.Position = retval + 2;  		if (got_cr) {  			data.Position++;  			got_cr = false;  		}  		c = data.ReadByte ();  		continue;  	}  	data.Position = retval + 2;  	if (got_cr)  		data.Position++;  	break;  } else {  	// state == 1  	state = 0;  	// no ReadByte() here  }  
Magic Number,Griffin.Networking.Protocol.Http.Services.BodyDecoders.Mono,HttpMultipart,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\Mono\MultiPartParser.cs,MoveToNextBoundary,The following statement contains a magic number: if (state == 0) {  	got_cr = (c == CR);  	c = data.ReadByte ();  } else if (state == 1 && c == '-') {  	c = data.ReadByte ();  	if (c == -1)  		return -1;  	if (c != '-') {  		state = 0;  		got_cr = false;  		continue;  		// no ReadByte() here  	}  	var nread = data.Read (buffer' 0' buffer.Length);  	var bl = buffer.Length;  	if (nread != bl)  		return -1;  	if (!CompareBytes (boundary_bytes' buffer)) {  		state = 0;  		data.Position = retval + 2;  		if (got_cr) {  			data.Position++;  			got_cr = false;  		}  		c = data.ReadByte ();  		continue;  	}  	if (buffer [bl - 2] == '-' && buffer [bl - 1] == '-') {  		_atEof = true;  	} else if (buffer [bl - 2] != CR || buffer [bl - 1] != LF) {  		state = 0;  		data.Position = retval + 2;  		if (got_cr) {  			data.Position++;  			got_cr = false;  		}  		c = data.ReadByte ();  		continue;  	}  	data.Position = retval + 2;  	if (got_cr)  		data.Position++;  	break;  } else {  	// state == 1  	state = 0;  	// no ReadByte() here  }  
Magic Number,Griffin.Networking.Protocol.Http.Services.BodyDecoders.Mono,HttpMultipart,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\Mono\MultiPartParser.cs,MoveToNextBoundary,The following statement contains a magic number: if (state == 0) {  	got_cr = (c == CR);  	c = data.ReadByte ();  } else if (state == 1 && c == '-') {  	c = data.ReadByte ();  	if (c == -1)  		return -1;  	if (c != '-') {  		state = 0;  		got_cr = false;  		continue;  		// no ReadByte() here  	}  	var nread = data.Read (buffer' 0' buffer.Length);  	var bl = buffer.Length;  	if (nread != bl)  		return -1;  	if (!CompareBytes (boundary_bytes' buffer)) {  		state = 0;  		data.Position = retval + 2;  		if (got_cr) {  			data.Position++;  			got_cr = false;  		}  		c = data.ReadByte ();  		continue;  	}  	if (buffer [bl - 2] == '-' && buffer [bl - 1] == '-') {  		_atEof = true;  	} else if (buffer [bl - 2] != CR || buffer [bl - 1] != LF) {  		state = 0;  		data.Position = retval + 2;  		if (got_cr) {  			data.Position++;  			got_cr = false;  		}  		c = data.ReadByte ();  		continue;  	}  	data.Position = retval + 2;  	if (got_cr)  		data.Position++;  	break;  } else {  	// state == 1  	state = 0;  	// no ReadByte() here  }  
Magic Number,Griffin.Networking.Protocol.Http.Services.BodyDecoders.Mono,HttpMultipart,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\Mono\MultiPartParser.cs,MoveToNextBoundary,The following statement contains a magic number: if (state == 0) {  	got_cr = (c == CR);  	c = data.ReadByte ();  } else if (state == 1 && c == '-') {  	c = data.ReadByte ();  	if (c == -1)  		return -1;  	if (c != '-') {  		state = 0;  		got_cr = false;  		continue;  		// no ReadByte() here  	}  	var nread = data.Read (buffer' 0' buffer.Length);  	var bl = buffer.Length;  	if (nread != bl)  		return -1;  	if (!CompareBytes (boundary_bytes' buffer)) {  		state = 0;  		data.Position = retval + 2;  		if (got_cr) {  			data.Position++;  			got_cr = false;  		}  		c = data.ReadByte ();  		continue;  	}  	if (buffer [bl - 2] == '-' && buffer [bl - 1] == '-') {  		_atEof = true;  	} else if (buffer [bl - 2] != CR || buffer [bl - 1] != LF) {  		state = 0;  		data.Position = retval + 2;  		if (got_cr) {  			data.Position++;  			got_cr = false;  		}  		c = data.ReadByte ();  		continue;  	}  	data.Position = retval + 2;  	if (got_cr)  		data.Position++;  	break;  } else {  	// state == 1  	state = 0;  	// no ReadByte() here  }  
Magic Number,Griffin.Networking.Protocol.Http.Services.BodyDecoders.Mono,HttpMultipart,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\Mono\MultiPartParser.cs,MoveToNextBoundary,The following statement contains a magic number: if (state == 0) {  	got_cr = (c == CR);  	c = data.ReadByte ();  } else if (state == 1 && c == '-') {  	c = data.ReadByte ();  	if (c == -1)  		return -1;  	if (c != '-') {  		state = 0;  		got_cr = false;  		continue;  		// no ReadByte() here  	}  	var nread = data.Read (buffer' 0' buffer.Length);  	var bl = buffer.Length;  	if (nread != bl)  		return -1;  	if (!CompareBytes (boundary_bytes' buffer)) {  		state = 0;  		data.Position = retval + 2;  		if (got_cr) {  			data.Position++;  			got_cr = false;  		}  		c = data.ReadByte ();  		continue;  	}  	if (buffer [bl - 2] == '-' && buffer [bl - 1] == '-') {  		_atEof = true;  	} else if (buffer [bl - 2] != CR || buffer [bl - 1] != LF) {  		state = 0;  		data.Position = retval + 2;  		if (got_cr) {  			data.Position++;  			got_cr = false;  		}  		c = data.ReadByte ();  		continue;  	}  	data.Position = retval + 2;  	if (got_cr)  		data.Position++;  	break;  } else {  	// state == 1  	state = 0;  	// no ReadByte() here  }  
Magic Number,Griffin.Networking.Protocol.Http.Services.BodyDecoders.Mono,HttpMultipart,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\Mono\MultiPartParser.cs,MoveToNextBoundary,The following statement contains a magic number: if (state == 1 && c == '-') {  	c = data.ReadByte ();  	if (c == -1)  		return -1;  	if (c != '-') {  		state = 0;  		got_cr = false;  		continue;  		// no ReadByte() here  	}  	var nread = data.Read (buffer' 0' buffer.Length);  	var bl = buffer.Length;  	if (nread != bl)  		return -1;  	if (!CompareBytes (boundary_bytes' buffer)) {  		state = 0;  		data.Position = retval + 2;  		if (got_cr) {  			data.Position++;  			got_cr = false;  		}  		c = data.ReadByte ();  		continue;  	}  	if (buffer [bl - 2] == '-' && buffer [bl - 1] == '-') {  		_atEof = true;  	} else if (buffer [bl - 2] != CR || buffer [bl - 1] != LF) {  		state = 0;  		data.Position = retval + 2;  		if (got_cr) {  			data.Position++;  			got_cr = false;  		}  		c = data.ReadByte ();  		continue;  	}  	data.Position = retval + 2;  	if (got_cr)  		data.Position++;  	break;  } else {  	// state == 1  	state = 0;  	// no ReadByte() here  }  
Magic Number,Griffin.Networking.Protocol.Http.Services.BodyDecoders.Mono,HttpMultipart,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\Mono\MultiPartParser.cs,MoveToNextBoundary,The following statement contains a magic number: if (state == 1 && c == '-') {  	c = data.ReadByte ();  	if (c == -1)  		return -1;  	if (c != '-') {  		state = 0;  		got_cr = false;  		continue;  		// no ReadByte() here  	}  	var nread = data.Read (buffer' 0' buffer.Length);  	var bl = buffer.Length;  	if (nread != bl)  		return -1;  	if (!CompareBytes (boundary_bytes' buffer)) {  		state = 0;  		data.Position = retval + 2;  		if (got_cr) {  			data.Position++;  			got_cr = false;  		}  		c = data.ReadByte ();  		continue;  	}  	if (buffer [bl - 2] == '-' && buffer [bl - 1] == '-') {  		_atEof = true;  	} else if (buffer [bl - 2] != CR || buffer [bl - 1] != LF) {  		state = 0;  		data.Position = retval + 2;  		if (got_cr) {  			data.Position++;  			got_cr = false;  		}  		c = data.ReadByte ();  		continue;  	}  	data.Position = retval + 2;  	if (got_cr)  		data.Position++;  	break;  } else {  	// state == 1  	state = 0;  	// no ReadByte() here  }  
Magic Number,Griffin.Networking.Protocol.Http.Services.BodyDecoders.Mono,HttpMultipart,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\Mono\MultiPartParser.cs,MoveToNextBoundary,The following statement contains a magic number: if (state == 1 && c == '-') {  	c = data.ReadByte ();  	if (c == -1)  		return -1;  	if (c != '-') {  		state = 0;  		got_cr = false;  		continue;  		// no ReadByte() here  	}  	var nread = data.Read (buffer' 0' buffer.Length);  	var bl = buffer.Length;  	if (nread != bl)  		return -1;  	if (!CompareBytes (boundary_bytes' buffer)) {  		state = 0;  		data.Position = retval + 2;  		if (got_cr) {  			data.Position++;  			got_cr = false;  		}  		c = data.ReadByte ();  		continue;  	}  	if (buffer [bl - 2] == '-' && buffer [bl - 1] == '-') {  		_atEof = true;  	} else if (buffer [bl - 2] != CR || buffer [bl - 1] != LF) {  		state = 0;  		data.Position = retval + 2;  		if (got_cr) {  			data.Position++;  			got_cr = false;  		}  		c = data.ReadByte ();  		continue;  	}  	data.Position = retval + 2;  	if (got_cr)  		data.Position++;  	break;  } else {  	// state == 1  	state = 0;  	// no ReadByte() here  }  
Magic Number,Griffin.Networking.Protocol.Http.Services.BodyDecoders.Mono,HttpMultipart,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\Mono\MultiPartParser.cs,MoveToNextBoundary,The following statement contains a magic number: if (state == 1 && c == '-') {  	c = data.ReadByte ();  	if (c == -1)  		return -1;  	if (c != '-') {  		state = 0;  		got_cr = false;  		continue;  		// no ReadByte() here  	}  	var nread = data.Read (buffer' 0' buffer.Length);  	var bl = buffer.Length;  	if (nread != bl)  		return -1;  	if (!CompareBytes (boundary_bytes' buffer)) {  		state = 0;  		data.Position = retval + 2;  		if (got_cr) {  			data.Position++;  			got_cr = false;  		}  		c = data.ReadByte ();  		continue;  	}  	if (buffer [bl - 2] == '-' && buffer [bl - 1] == '-') {  		_atEof = true;  	} else if (buffer [bl - 2] != CR || buffer [bl - 1] != LF) {  		state = 0;  		data.Position = retval + 2;  		if (got_cr) {  			data.Position++;  			got_cr = false;  		}  		c = data.ReadByte ();  		continue;  	}  	data.Position = retval + 2;  	if (got_cr)  		data.Position++;  	break;  } else {  	// state == 1  	state = 0;  	// no ReadByte() here  }  
Magic Number,Griffin.Networking.Protocol.Http.Services.BodyDecoders.Mono,HttpMultipart,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\Mono\MultiPartParser.cs,MoveToNextBoundary,The following statement contains a magic number: if (state == 1 && c == '-') {  	c = data.ReadByte ();  	if (c == -1)  		return -1;  	if (c != '-') {  		state = 0;  		got_cr = false;  		continue;  		// no ReadByte() here  	}  	var nread = data.Read (buffer' 0' buffer.Length);  	var bl = buffer.Length;  	if (nread != bl)  		return -1;  	if (!CompareBytes (boundary_bytes' buffer)) {  		state = 0;  		data.Position = retval + 2;  		if (got_cr) {  			data.Position++;  			got_cr = false;  		}  		c = data.ReadByte ();  		continue;  	}  	if (buffer [bl - 2] == '-' && buffer [bl - 1] == '-') {  		_atEof = true;  	} else if (buffer [bl - 2] != CR || buffer [bl - 1] != LF) {  		state = 0;  		data.Position = retval + 2;  		if (got_cr) {  			data.Position++;  			got_cr = false;  		}  		c = data.ReadByte ();  		continue;  	}  	data.Position = retval + 2;  	if (got_cr)  		data.Position++;  	break;  } else {  	// state == 1  	state = 0;  	// no ReadByte() here  }  
Magic Number,Griffin.Networking.Protocol.Http.Services.BodyDecoders.Mono,HttpMultipart,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\Mono\MultiPartParser.cs,MoveToNextBoundary,The following statement contains a magic number: if (!CompareBytes (boundary_bytes' buffer)) {  	state = 0;  	data.Position = retval + 2;  	if (got_cr) {  		data.Position++;  		got_cr = false;  	}  	c = data.ReadByte ();  	continue;  }  
Magic Number,Griffin.Networking.Protocol.Http.Services.BodyDecoders.Mono,HttpMultipart,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\Mono\MultiPartParser.cs,MoveToNextBoundary,The following statement contains a magic number: data.Position = retval + 2;  
Magic Number,Griffin.Networking.Protocol.Http.Services.BodyDecoders.Mono,HttpMultipart,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\Mono\MultiPartParser.cs,MoveToNextBoundary,The following statement contains a magic number: if (buffer [bl - 2] == '-' && buffer [bl - 1] == '-') {  	_atEof = true;  } else if (buffer [bl - 2] != CR || buffer [bl - 1] != LF) {  	state = 0;  	data.Position = retval + 2;  	if (got_cr) {  		data.Position++;  		got_cr = false;  	}  	c = data.ReadByte ();  	continue;  }  
Magic Number,Griffin.Networking.Protocol.Http.Services.BodyDecoders.Mono,HttpMultipart,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\Mono\MultiPartParser.cs,MoveToNextBoundary,The following statement contains a magic number: if (buffer [bl - 2] == '-' && buffer [bl - 1] == '-') {  	_atEof = true;  } else if (buffer [bl - 2] != CR || buffer [bl - 1] != LF) {  	state = 0;  	data.Position = retval + 2;  	if (got_cr) {  		data.Position++;  		got_cr = false;  	}  	c = data.ReadByte ();  	continue;  }  
Magic Number,Griffin.Networking.Protocol.Http.Services.BodyDecoders.Mono,HttpMultipart,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\Mono\MultiPartParser.cs,MoveToNextBoundary,The following statement contains a magic number: if (buffer [bl - 2] == '-' && buffer [bl - 1] == '-') {  	_atEof = true;  } else if (buffer [bl - 2] != CR || buffer [bl - 1] != LF) {  	state = 0;  	data.Position = retval + 2;  	if (got_cr) {  		data.Position++;  		got_cr = false;  	}  	c = data.ReadByte ();  	continue;  }  
Magic Number,Griffin.Networking.Protocol.Http.Services.BodyDecoders.Mono,HttpMultipart,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\Mono\MultiPartParser.cs,MoveToNextBoundary,The following statement contains a magic number: if (buffer [bl - 2] != CR || buffer [bl - 1] != LF) {  	state = 0;  	data.Position = retval + 2;  	if (got_cr) {  		data.Position++;  		got_cr = false;  	}  	c = data.ReadByte ();  	continue;  }  
Magic Number,Griffin.Networking.Protocol.Http.Services.BodyDecoders.Mono,HttpMultipart,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\Mono\MultiPartParser.cs,MoveToNextBoundary,The following statement contains a magic number: if (buffer [bl - 2] != CR || buffer [bl - 1] != LF) {  	state = 0;  	data.Position = retval + 2;  	if (got_cr) {  		data.Position++;  		got_cr = false;  	}  	c = data.ReadByte ();  	continue;  }  
Magic Number,Griffin.Networking.Protocol.Http.Services.BodyDecoders.Mono,HttpMultipart,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\Mono\MultiPartParser.cs,MoveToNextBoundary,The following statement contains a magic number: data.Position = retval + 2;  
Magic Number,Griffin.Networking.Protocol.Http.Services.BodyDecoders.Mono,HttpMultipart,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Services\BodyDecoders\Mono\MultiPartParser.cs,MoveToNextBoundary,The following statement contains a magic number: data.Position = retval + 2;  
Missing Default,Griffin.Networking.Protocol.Http,NameValueParser,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\NameValueParser.cs,Parse,The following switch statement is missing a default case: switch (ch) {  case '=':  	if (lastCh != '\\') {  		name = value.Substring (oldPos' index - oldPos).Trim (' ');  		oldPos = index + 1;  	}  	break;  case ''':  	if (lastCh != '\\') {  		target.Add (name' value.Substring (oldPos' index - oldPos).Trim (' '' '"'));  		name = "";  		oldPos = index + 1;  	}  	break;  }  
Missing Default,Griffin.Networking.Protocol.Http.Implementation.Infrastructure,UrlDecoder,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\Http\Griffin.Networking.Protocol.Http\Implementation\Infrastructure\UrlDecoder.cs,Parse,The following switch statement is missing a default case: switch (result.Delimiter) {  case '&':  	parameters.Add (name' string.Empty);  	break;  case '=':  	result = reader.ReadToEnd ("&");  	parameters.Add (name' Uri.UnescapeDataString (result.Value));  	break;  case char.MinValue:  	// EOF = no delimiter && no value  	if (!string.IsNullOrEmpty (name))  		parameters.Add (name' string.Empty);  	break;  }  
