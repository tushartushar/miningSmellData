Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Griffin.Networking.JsonRpc.Remoting,RpcServiceInvoker,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\JsonRpc\Griffin.Networking.Protocol.JsonRpc\Remoting\RpcServiceInvoker.cs,Invoke,The length of the statement  "		return CreateErrorResponse (request.Id' RpcErrorCode.MethodNotFound' string.Format ("Failed to find method named '{0}'."' request.Method)); " is 139.
Long Statement,Griffin.Networking.JsonRpc.Remoting,RpcServiceInvoker,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\JsonRpc\Griffin.Networking.Protocol.JsonRpc\Remoting\RpcServiceInvoker.cs,Invoke,The length of the statement  "			return CreateErrorResponse (request.Id' RpcErrorCode.InvalidParameters' "Expected '" + methodParameters.Length + "' number of parameters."); " is 140.
Long Statement,Griffin.Networking.JsonRpc.Remoting,RpcServiceInvoker,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\JsonRpc\Griffin.Networking.Protocol.JsonRpc\Remoting\RpcServiceInvoker.cs,Map,The length of the statement  "		var attr = methodInfo.GetCustomAttributes (typeof(OperationContractAttribute)' true).Cast<OperationContractAttribute> ().FirstOrDefault (); " is 139.
Long Statement,Griffin.Networking.JsonRpc.Remoting,RpcServiceInvoker,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\JsonRpc\Griffin.Networking.Protocol.JsonRpc\Remoting\RpcServiceInvoker.cs,ConvertToObjectArray,The length of the statement  "			errorResponse = CreateErrorResponse (request.Id' RpcErrorCode.InvalidParameters' "Failed to find a parameter named '" + methodParameter.Name + "' in the RPC request (which the service requires)."); " is 197.
Long Statement,Griffin.Networking.JsonRpc.Remoting,RpcServiceInvoker,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\JsonRpc\Griffin.Networking.Protocol.JsonRpc\Remoting\RpcServiceInvoker.cs,ConvertParameters,The length of the statement  "				error = CreateErrorResponse (request.Id' RpcErrorCode.InvalidParameters' string.Format ("Parameter '{0}' is a '{1}' while the service expected a '{2}'"' i' parameter.GetType ().Name' methodParameter.ParameterType.Name)); " is 220.
Empty Catch Block,Griffin.Networking.JsonRpc.Remoting,DotNetValueConverter,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\JsonRpc\Griffin.Networking.Protocol.JsonRpc\Remoting\DotNetValueConverter.cs,TryConvert,The method has an empty catch block.
Magic Number,Griffin.Networking.JsonRpc.Handlers,HeaderDecoder,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\JsonRpc\Griffin.Networking.Protocol.JsonRpc\Handlers\HeaderDecoder.cs,HandleUpstream,The following statement contains a magic number: _bytesLeft = 5;  
Magic Number,Griffin.Networking.JsonRpc.Handlers,BodyDecoder,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\JsonRpc\Griffin.Networking.Protocol.JsonRpc\Handlers\BodyDecoder.cs,HandleUpstream,The following statement contains a magic number: if (headerMsg != null) {  	_header = headerMsg.Header;  	if (_header.Length > 65535) {  		var error = new ErrorResponse ("-9999"' new RpcError {  			Code = RpcErrorCode.InvalidRequest'  			Message = "Support requests which is at most 655355 bytes."'  		});  		context.SendDownstream (new SendResponse (error));  	}  	return;  }  
Magic Number,Griffin.Networking.JsonRpc.Handlers,BodyDecoder,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\JsonRpc\Griffin.Networking.Protocol.JsonRpc\Handlers\BodyDecoder.cs,HandleUpstream,The following statement contains a magic number: if (_header.Length > 65535) {  	var error = new ErrorResponse ("-9999"' new RpcError {  		Code = RpcErrorCode.InvalidRequest'  		Message = "Support requests which is at most 655355 bytes."'  	});  	context.SendDownstream (new SendResponse (error));  }  
Magic Number,Griffin.Networking.JsonRpc.Handlers,ResponseEncoder,F:\newReposMay17\jgauffin_griffin.networking\Source\Protocols\JsonRpc\Griffin.Networking.Protocol.JsonRpc\Handlers\ResponseEncoder.cs,HandleDownstream,The following statement contains a magic number: context.SendDownstream (new SendBuffer (header' 0' 5));  
