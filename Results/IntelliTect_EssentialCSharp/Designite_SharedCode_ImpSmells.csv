Implementation smell,Namespace,Class,File,Method,Description
Long Method,SharedCode,ProgramHelper,C:\repos\IntelliTect_EssentialCSharp\src\SharedCode\ProgramHelper.cs,LaunchMain,The method has 101 lines of code.
Complex Method,AddisonWesley.Michaelis.EssentialCSharp.Shared,InternalPiDigitCalculator,C:\repos\IntelliTect_EssentialCSharp\src\SharedCode\PiCalculator+InternalPiDigitCalculator.cs,ComputeSection,Cyclomatic complexity of the method is 10
Long Statement,SharedCode,ProgramHelper,C:\repos\IntelliTect_EssentialCSharp\src\SharedCode\ProgramHelper.cs,LaunchMain,The length of the statement  "                Console.WriteLine(string.Format("Error' could not run the Listing '{0}'' please make sure it is a valid listing and in the correct format"' listing)); " is 150.
Long Statement,SharedCode,ProgramHelper,C:\repos\IntelliTect_EssentialCSharp\src\SharedCode\ProgramHelper.cs,GetArguments,The length of the statement  "                "Listing uses arguments for main method provided by user. Please see the listing and enter arguments or hit enter to pass in null: "); " is 134.
Long Statement,SharedCode,ProgramHelper,C:\repos\IntelliTect_EssentialCSharp\src\SharedCode\ProgramHelper.cs,ParseListingName,The length of the statement  "                if (index == startPosition && string.IsNullOrEmpty(chapterName)) chapterName = "Chapter" + chapterListing[index].PadLeft(2' '0'); " is 129.
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Shared,PiCalculator,C:\repos\IntelliTect_EssentialCSharp\src\SharedCode\PiCalculator+InternalPiDigitCalculator.cs,CalculatePi,The following statement contains a magic number: if(startingAt == 0)              {                  pi = new StringBuilder("3."' digits + 2);              }              else              {                  pi = new StringBuilder();              }
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Shared,PiCalculator,C:\repos\IntelliTect_EssentialCSharp\src\SharedCode\PiCalculator+InternalPiDigitCalculator.cs,CalculatePi,The following statement contains a magic number: if(digits > 0)              {                  for(int i = 0; i < digits; i += 9)                  {                        // Calculate next i decimal places                      int nextDigit = InternalPiDigitCalculator.ComputeSection(                          startingAt + i + 1);                      int digitCount = Math.Min(digits - i' 9);                      string ds = string.Format("{0:D9}"' nextDigit);                      pi.Append(ds.Substring(0' digitCount));                        // Show current progress  #if BackgroundWorkerThread                      calculationWorker.ReportProgress(                          0' ds.Substring(0' digitCount));  #endif    #if BackgroundWorkerThread                      // Check for cancellation                      if (calculationWorker.CancellationPending)                      {                          // Need to set Cancel if you need to                            // distinguish how a worker thread completed                          // ie by checking                           // RunWorkerCompletedEventArgs.Cancelled                          eventArgs.Cancel = true;                          break;                      }  #endif                  }              }
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Shared,PiCalculator,C:\repos\IntelliTect_EssentialCSharp\src\SharedCode\PiCalculator+InternalPiDigitCalculator.cs,CalculatePi,The following statement contains a magic number: if(digits > 0)              {                  for(int i = 0; i < digits; i += 9)                  {                        // Calculate next i decimal places                      int nextDigit = InternalPiDigitCalculator.ComputeSection(                          startingAt + i + 1);                      int digitCount = Math.Min(digits - i' 9);                      string ds = string.Format("{0:D9}"' nextDigit);                      pi.Append(ds.Substring(0' digitCount));                        // Show current progress  #if BackgroundWorkerThread                      calculationWorker.ReportProgress(                          0' ds.Substring(0' digitCount));  #endif    #if BackgroundWorkerThread                      // Check for cancellation                      if (calculationWorker.CancellationPending)                      {                          // Need to set Cancel if you need to                            // distinguish how a worker thread completed                          // ie by checking                           // RunWorkerCompletedEventArgs.Cancelled                          eventArgs.Cancel = true;                          break;                      }  #endif                  }              }
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Shared,InternalPiDigitCalculator,C:\repos\IntelliTect_EssentialCSharp\src\SharedCode\PiCalculator+InternalPiDigitCalculator.cs,IsPrime,The following statement contains a magic number: if ((num % 2) == 0) return false;
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Shared,InternalPiDigitCalculator,C:\repos\IntelliTect_EssentialCSharp\src\SharedCode\PiCalculator+InternalPiDigitCalculator.cs,IsPrime,The following statement contains a magic number: for (int i = 3; i <= max; i += 2)                  {                      if ((num % i) == 0) return false;                  }
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Shared,InternalPiDigitCalculator,C:\repos\IntelliTect_EssentialCSharp\src\SharedCode\PiCalculator+InternalPiDigitCalculator.cs,IsPrime,The following statement contains a magic number: for (int i = 3; i <= max; i += 2)                  {                      if ((num % i) == 0) return false;                  }
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Shared,InternalPiDigitCalculator,C:\repos\IntelliTect_EssentialCSharp\src\SharedCode\PiCalculator+InternalPiDigitCalculator.cs,ComputeSection,The following statement contains a magic number: int N = (int)((startingDigit + 20) * Math.Log(10) / Math.Log(2));
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Shared,InternalPiDigitCalculator,C:\repos\IntelliTect_EssentialCSharp\src\SharedCode\PiCalculator+InternalPiDigitCalculator.cs,ComputeSection,The following statement contains a magic number: int N = (int)((startingDigit + 20) * Math.Log(10) / Math.Log(2));
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Shared,InternalPiDigitCalculator,C:\repos\IntelliTect_EssentialCSharp\src\SharedCode\PiCalculator+InternalPiDigitCalculator.cs,ComputeSection,The following statement contains a magic number: int N = (int)((startingDigit + 20) * Math.Log(10) / Math.Log(2));
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Shared,InternalPiDigitCalculator,C:\repos\IntelliTect_EssentialCSharp\src\SharedCode\PiCalculator+InternalPiDigitCalculator.cs,ComputeSection,The following statement contains a magic number: for (int a = 3; a <= (2 * N); a = NextPrime(a))                  {                      vmax = (int)(Math.Log(2 * N) / Math.Log(a));                      av = 1;                        for (int i = 0; i < vmax; ++i) av = av * a;                        s = 0;                      num = 1;                      den = 1;                      v = 0;                      kq = 1;                      kq2 = 1;                        for (int k = 1; k <= N; ++k)                      {                          t = k;                          if (kq >= a)                          {                              do                              {                                  t = t / a;                                  --v;                              }                              while ((t % a) == 0);                                kq = 0;                          }                            ++kq;                          num = MultiplyModulus(num' t' av);                            t = (2 * k - 1);                          if (kq2 >= a)                          {                              if (kq2 == a)                              {                                  do                                  {                                      t = t / a;                                      ++v;                                  }                                  while ((t % a) == 0);                              }                                kq2 -= a;                          }                            den = MultiplyModulus(den' t' av);                          kq2 += 2;                            if (v > 0)                          {                              t = InverseModulus(den' av);                              t = MultiplyModulus(t' num' av);                              t = MultiplyModulus(t' k' av);                                for (int i = v; i < vmax; ++i)                              {                                  t = MultiplyModulus(t' a' av);                              }                              s += t;                              if (s >= av) s -= av;                          }                      }                        t = PowerModulus(10' startingDigit - 1' av);                      s = MultiplyModulus(s' t' av);                      sum = (sum + (double)s / (double)av) % 1.0;                  }
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Shared,InternalPiDigitCalculator,C:\repos\IntelliTect_EssentialCSharp\src\SharedCode\PiCalculator+InternalPiDigitCalculator.cs,ComputeSection,The following statement contains a magic number: for (int a = 3; a <= (2 * N); a = NextPrime(a))                  {                      vmax = (int)(Math.Log(2 * N) / Math.Log(a));                      av = 1;                        for (int i = 0; i < vmax; ++i) av = av * a;                        s = 0;                      num = 1;                      den = 1;                      v = 0;                      kq = 1;                      kq2 = 1;                        for (int k = 1; k <= N; ++k)                      {                          t = k;                          if (kq >= a)                          {                              do                              {                                  t = t / a;                                  --v;                              }                              while ((t % a) == 0);                                kq = 0;                          }                            ++kq;                          num = MultiplyModulus(num' t' av);                            t = (2 * k - 1);                          if (kq2 >= a)                          {                              if (kq2 == a)                              {                                  do                                  {                                      t = t / a;                                      ++v;                                  }                                  while ((t % a) == 0);                              }                                kq2 -= a;                          }                            den = MultiplyModulus(den' t' av);                          kq2 += 2;                            if (v > 0)                          {                              t = InverseModulus(den' av);                              t = MultiplyModulus(t' num' av);                              t = MultiplyModulus(t' k' av);                                for (int i = v; i < vmax; ++i)                              {                                  t = MultiplyModulus(t' a' av);                              }                              s += t;                              if (s >= av) s -= av;                          }                      }                        t = PowerModulus(10' startingDigit - 1' av);                      s = MultiplyModulus(s' t' av);                      sum = (sum + (double)s / (double)av) % 1.0;                  }
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Shared,InternalPiDigitCalculator,C:\repos\IntelliTect_EssentialCSharp\src\SharedCode\PiCalculator+InternalPiDigitCalculator.cs,ComputeSection,The following statement contains a magic number: for (int a = 3; a <= (2 * N); a = NextPrime(a))                  {                      vmax = (int)(Math.Log(2 * N) / Math.Log(a));                      av = 1;                        for (int i = 0; i < vmax; ++i) av = av * a;                        s = 0;                      num = 1;                      den = 1;                      v = 0;                      kq = 1;                      kq2 = 1;                        for (int k = 1; k <= N; ++k)                      {                          t = k;                          if (kq >= a)                          {                              do                              {                                  t = t / a;                                  --v;                              }                              while ((t % a) == 0);                                kq = 0;                          }                            ++kq;                          num = MultiplyModulus(num' t' av);                            t = (2 * k - 1);                          if (kq2 >= a)                          {                              if (kq2 == a)                              {                                  do                                  {                                      t = t / a;                                      ++v;                                  }                                  while ((t % a) == 0);                              }                                kq2 -= a;                          }                            den = MultiplyModulus(den' t' av);                          kq2 += 2;                            if (v > 0)                          {                              t = InverseModulus(den' av);                              t = MultiplyModulus(t' num' av);                              t = MultiplyModulus(t' k' av);                                for (int i = v; i < vmax; ++i)                              {                                  t = MultiplyModulus(t' a' av);                              }                              s += t;                              if (s >= av) s -= av;                          }                      }                        t = PowerModulus(10' startingDigit - 1' av);                      s = MultiplyModulus(s' t' av);                      sum = (sum + (double)s / (double)av) % 1.0;                  }
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Shared,InternalPiDigitCalculator,C:\repos\IntelliTect_EssentialCSharp\src\SharedCode\PiCalculator+InternalPiDigitCalculator.cs,ComputeSection,The following statement contains a magic number: for (int a = 3; a <= (2 * N); a = NextPrime(a))                  {                      vmax = (int)(Math.Log(2 * N) / Math.Log(a));                      av = 1;                        for (int i = 0; i < vmax; ++i) av = av * a;                        s = 0;                      num = 1;                      den = 1;                      v = 0;                      kq = 1;                      kq2 = 1;                        for (int k = 1; k <= N; ++k)                      {                          t = k;                          if (kq >= a)                          {                              do                              {                                  t = t / a;                                  --v;                              }                              while ((t % a) == 0);                                kq = 0;                          }                            ++kq;                          num = MultiplyModulus(num' t' av);                            t = (2 * k - 1);                          if (kq2 >= a)                          {                              if (kq2 == a)                              {                                  do                                  {                                      t = t / a;                                      ++v;                                  }                                  while ((t % a) == 0);                              }                                kq2 -= a;                          }                            den = MultiplyModulus(den' t' av);                          kq2 += 2;                            if (v > 0)                          {                              t = InverseModulus(den' av);                              t = MultiplyModulus(t' num' av);                              t = MultiplyModulus(t' k' av);                                for (int i = v; i < vmax; ++i)                              {                                  t = MultiplyModulus(t' a' av);                              }                              s += t;                              if (s >= av) s -= av;                          }                      }                        t = PowerModulus(10' startingDigit - 1' av);                      s = MultiplyModulus(s' t' av);                      sum = (sum + (double)s / (double)av) % 1.0;                  }
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Shared,InternalPiDigitCalculator,C:\repos\IntelliTect_EssentialCSharp\src\SharedCode\PiCalculator+InternalPiDigitCalculator.cs,ComputeSection,The following statement contains a magic number: for (int a = 3; a <= (2 * N); a = NextPrime(a))                  {                      vmax = (int)(Math.Log(2 * N) / Math.Log(a));                      av = 1;                        for (int i = 0; i < vmax; ++i) av = av * a;                        s = 0;                      num = 1;                      den = 1;                      v = 0;                      kq = 1;                      kq2 = 1;                        for (int k = 1; k <= N; ++k)                      {                          t = k;                          if (kq >= a)                          {                              do                              {                                  t = t / a;                                  --v;                              }                              while ((t % a) == 0);                                kq = 0;                          }                            ++kq;                          num = MultiplyModulus(num' t' av);                            t = (2 * k - 1);                          if (kq2 >= a)                          {                              if (kq2 == a)                              {                                  do                                  {                                      t = t / a;                                      ++v;                                  }                                  while ((t % a) == 0);                              }                                kq2 -= a;                          }                            den = MultiplyModulus(den' t' av);                          kq2 += 2;                            if (v > 0)                          {                              t = InverseModulus(den' av);                              t = MultiplyModulus(t' num' av);                              t = MultiplyModulus(t' k' av);                                for (int i = v; i < vmax; ++i)                              {                                  t = MultiplyModulus(t' a' av);                              }                              s += t;                              if (s >= av) s -= av;                          }                      }                        t = PowerModulus(10' startingDigit - 1' av);                      s = MultiplyModulus(s' t' av);                      sum = (sum + (double)s / (double)av) % 1.0;                  }
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Shared,InternalPiDigitCalculator,C:\repos\IntelliTect_EssentialCSharp\src\SharedCode\PiCalculator+InternalPiDigitCalculator.cs,ComputeSection,The following statement contains a magic number: for (int a = 3; a <= (2 * N); a = NextPrime(a))                  {                      vmax = (int)(Math.Log(2 * N) / Math.Log(a));                      av = 1;                        for (int i = 0; i < vmax; ++i) av = av * a;                        s = 0;                      num = 1;                      den = 1;                      v = 0;                      kq = 1;                      kq2 = 1;                        for (int k = 1; k <= N; ++k)                      {                          t = k;                          if (kq >= a)                          {                              do                              {                                  t = t / a;                                  --v;                              }                              while ((t % a) == 0);                                kq = 0;                          }                            ++kq;                          num = MultiplyModulus(num' t' av);                            t = (2 * k - 1);                          if (kq2 >= a)                          {                              if (kq2 == a)                              {                                  do                                  {                                      t = t / a;                                      ++v;                                  }                                  while ((t % a) == 0);                              }                                kq2 -= a;                          }                            den = MultiplyModulus(den' t' av);                          kq2 += 2;                            if (v > 0)                          {                              t = InverseModulus(den' av);                              t = MultiplyModulus(t' num' av);                              t = MultiplyModulus(t' k' av);                                for (int i = v; i < vmax; ++i)                              {                                  t = MultiplyModulus(t' a' av);                              }                              s += t;                              if (s >= av) s -= av;                          }                      }                        t = PowerModulus(10' startingDigit - 1' av);                      s = MultiplyModulus(s' t' av);                      sum = (sum + (double)s / (double)av) % 1.0;                  }
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Shared,InternalPiDigitCalculator,C:\repos\IntelliTect_EssentialCSharp\src\SharedCode\PiCalculator+InternalPiDigitCalculator.cs,ComputeSection,The following statement contains a magic number: return (int)(sum * 1e9);
Magic Number,SharedCode,ProgramHelper,C:\repos\IntelliTect_EssentialCSharp\src\SharedCode\ProgramHelper.cs,ParseListingName,The following statement contains a magic number: for (int index = startPosition; index < chapterListing.Length; index++)              {                  if (index == startPosition && string.IsNullOrEmpty(chapterName)) chapterName = "Chapter" + chapterListing[index].PadLeft(2' '0');                  listing += chapterListing[index].PadLeft(2' '0') + ".";              }
Magic Number,SharedCode,ProgramHelper,C:\repos\IntelliTect_EssentialCSharp\src\SharedCode\ProgramHelper.cs,ParseListingName,The following statement contains a magic number: for (int index = startPosition; index < chapterListing.Length; index++)              {                  if (index == startPosition && string.IsNullOrEmpty(chapterName)) chapterName = "Chapter" + chapterListing[index].PadLeft(2' '0');                  listing += chapterListing[index].PadLeft(2' '0') + ".";              }
