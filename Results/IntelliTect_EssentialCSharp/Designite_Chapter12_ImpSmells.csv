Implementation smell,Namespace,Class,File,Method,Description
Long Method,AddisonWesley.Michaelis.EssentialCSharp.Shared,Program,D:\research\architectureSmells\repos\IntelliTect_EssentialCSharp\src\Shared\Program.cs,Main,The method has 117 lines of code.
Long Statement,AddisonWesley.Michaelis.EssentialCSharp.Shared,Program,D:\research\architectureSmells\repos\IntelliTect_EssentialCSharp\src\Shared\Program.cs,Main,The length of the statement  "                Console.Write($"Enter the listing number to execute (e.g. For Listing {chapterNumber}.1 enter \"{chapterNumber}.1\"): "); " is 121.
Long Statement,AddisonWesley.Michaelis.EssentialCSharp.Shared,Program,D:\research\architectureSmells\repos\IntelliTect_EssentialCSharp\src\Shared\Program.cs,Main,The length of the statement  "                Console.WriteLine(string.Format("Error' could not run the Listing '{0}'' please make sure it is a valid listing and in the correct format"' listing)); " is 150.
Long Statement,AddisonWesley.Michaelis.EssentialCSharp.Shared,Program,D:\research\architectureSmells\repos\IntelliTect_EssentialCSharp\src\Shared\Program.cs,GetArguments,The length of the statement  "                "Listing uses arguments for main method provided by user. Please see the listing and enter arguments or hit enter to pass in null: "); " is 134.
Long Statement,AddisonWesley.Michaelis.EssentialCSharp.Shared,Program,D:\research\architectureSmells\repos\IntelliTect_EssentialCSharp\src\Shared\Program.cs,ParseListingName,The length of the statement  "                if (index == startPosition && string.IsNullOrEmpty(chapterName)) chapterName = "Chapter" + chapterListing[index].PadLeft(2' '0'); " is 129.
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter12.Listing12_02,Program,D:\research\architectureSmells\repos\IntelliTect_EssentialCSharp\src\Chapter12\Listing12.02.SupportingUndoInEtchASketchGame.cs,Sketch,The following statement contains a magic number: currentPosition = new Cell(Console.WindowWidth / 2' Console.WindowHeight / 2);
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter12.Listing12_02,Program,D:\research\architectureSmells\repos\IntelliTect_EssentialCSharp\src\Chapter12\Listing12.02.SupportingUndoInEtchASketchGame.cs,Sketch,The following statement contains a magic number: currentPosition = new Cell(Console.WindowWidth / 2' Console.WindowHeight / 2);
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter12.Listing12_02,Program,D:\research\architectureSmells\repos\IntelliTect_EssentialCSharp\src\Chapter12\Listing12.02.SupportingUndoInEtchASketchGame.cs,Sketch,The following statement contains a magic number: switch(key.Key)                  {                      case ConsoleKey.Z:                          // Undo the previous Move                          if(path.Count >= 1)                          {                              currentPosition = (Cell)path.Pop();                              Console.SetCursorPosition(                                  currentPosition.X' currentPosition.Y);                              FillCell(currentPosition' ConsoleColor.Black);                              Undo();                          }                          break;                      case ConsoleKey.DownArrow:                          if(Console.CursorTop < Console.WindowHeight - 2)                          {                              currentPosition = new Cell(                                  Console.CursorLeft' Console.CursorTop + 1);                          }                          path.Push(currentPosition);                          FillCell(currentPosition);                          break;                      case ConsoleKey.UpArrow:                          if(Console.CursorTop > 1)                          {                              currentPosition = new Cell(                                  Console.CursorLeft' Console.CursorTop - 1);                          }                          path.Push(currentPosition);                          FillCell(currentPosition);                          break;                      case ConsoleKey.LeftArrow:                          if(Console.CursorLeft > 1)                          {                              currentPosition = new Cell(                                  Console.CursorLeft - 1' Console.CursorTop);                          }                          path.Push(currentPosition);                          FillCell(currentPosition);                          break;                      case ConsoleKey.RightArrow:                          // SaveState()                          if(Console.CursorLeft < Console.WindowWidth - 2)                          {                              currentPosition = new Cell(                                  Console.CursorLeft + 1' Console.CursorTop);                          }                          path.Push(currentPosition);                          FillCell(currentPosition);                          break;                        default:                          Console.Beep();  // Added in C# 2.0                          break;                  }
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter12.Listing12_02,Program,D:\research\architectureSmells\repos\IntelliTect_EssentialCSharp\src\Chapter12\Listing12.02.SupportingUndoInEtchASketchGame.cs,Sketch,The following statement contains a magic number: switch(key.Key)                  {                      case ConsoleKey.Z:                          // Undo the previous Move                          if(path.Count >= 1)                          {                              currentPosition = (Cell)path.Pop();                              Console.SetCursorPosition(                                  currentPosition.X' currentPosition.Y);                              FillCell(currentPosition' ConsoleColor.Black);                              Undo();                          }                          break;                      case ConsoleKey.DownArrow:                          if(Console.CursorTop < Console.WindowHeight - 2)                          {                              currentPosition = new Cell(                                  Console.CursorLeft' Console.CursorTop + 1);                          }                          path.Push(currentPosition);                          FillCell(currentPosition);                          break;                      case ConsoleKey.UpArrow:                          if(Console.CursorTop > 1)                          {                              currentPosition = new Cell(                                  Console.CursorLeft' Console.CursorTop - 1);                          }                          path.Push(currentPosition);                          FillCell(currentPosition);                          break;                      case ConsoleKey.LeftArrow:                          if(Console.CursorLeft > 1)                          {                              currentPosition = new Cell(                                  Console.CursorLeft - 1' Console.CursorTop);                          }                          path.Push(currentPosition);                          FillCell(currentPosition);                          break;                      case ConsoleKey.RightArrow:                          // SaveState()                          if(Console.CursorLeft < Console.WindowWidth - 2)                          {                              currentPosition = new Cell(                                  Console.CursorLeft + 1' Console.CursorTop);                          }                          path.Push(currentPosition);                          FillCell(currentPosition);                          break;                        default:                          Console.Beep();  // Added in C# 2.0                          break;                  }
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter12.Listing12_06,Program,D:\research\architectureSmells\repos\IntelliTect_EssentialCSharp\src\Chapter12\Listing12.06.ImplementingUndoWithAGenericStackClass.cs,Sketch,The following statement contains a magic number: currentPosition = new Cell(Console.WindowWidth / 2' Console.WindowHeight / 2);
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter12.Listing12_06,Program,D:\research\architectureSmells\repos\IntelliTect_EssentialCSharp\src\Chapter12\Listing12.06.ImplementingUndoWithAGenericStackClass.cs,Sketch,The following statement contains a magic number: currentPosition = new Cell(Console.WindowWidth / 2' Console.WindowHeight / 2);
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter12.Listing12_06,Program,D:\research\architectureSmells\repos\IntelliTect_EssentialCSharp\src\Chapter12\Listing12.06.ImplementingUndoWithAGenericStackClass.cs,Sketch,The following statement contains a magic number: switch(key.Key)                  {                      case ConsoleKey.Z:                          // Undo the previous Move                          if(path.Count >= 1)                          {                              // No cast required                              currentPosition = path.Pop();                              Console.SetCursorPosition(                                  currentPosition.X' currentPosition.Y);                              FillCell(currentPosition' ConsoleColor.Black);                              Undo();                          }                          break;                      case ConsoleKey.DownArrow:                          if(Console.CursorTop < Console.WindowHeight - 2)                          {                              currentPosition = new Cell(                                  Console.CursorLeft' Console.CursorTop + 1);                          }                          // Only type Cell allowed in call to Push()                          path.Push(currentPosition);                          FillCell(currentPosition);                          break;                      case ConsoleKey.UpArrow:                          if(Console.CursorTop > 1)                          {                              currentPosition = new Cell(                                  Console.CursorLeft' Console.CursorTop - 1);                          }                          // Only type Cell allowed in call to Push()                          path.Push(currentPosition);                          FillCell(currentPosition);                          break;                      case ConsoleKey.LeftArrow:                          if(Console.CursorLeft > 1)                          {                              currentPosition = new Cell(                                  Console.CursorLeft - 1' Console.CursorTop);                          }                          // Only type Cell allowed in call to Push()                          path.Push(currentPosition);                          FillCell(currentPosition);                          break;                      case ConsoleKey.RightArrow:                          // SaveState()                          if(Console.CursorLeft < Console.WindowWidth - 2)                          {                              currentPosition = new Cell(                                  Console.CursorLeft + 1' Console.CursorTop);                          }                          // Only type Cell allowed in call to Push()                          path.Push(currentPosition);                          FillCell(currentPosition);                          break;                        default:                          Console.Beep();  // Added in C# 2.0                          break;                  }
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter12.Listing12_06,Program,D:\research\architectureSmells\repos\IntelliTect_EssentialCSharp\src\Chapter12\Listing12.06.ImplementingUndoWithAGenericStackClass.cs,Sketch,The following statement contains a magic number: switch(key.Key)                  {                      case ConsoleKey.Z:                          // Undo the previous Move                          if(path.Count >= 1)                          {                              // No cast required                              currentPosition = path.Pop();                              Console.SetCursorPosition(                                  currentPosition.X' currentPosition.Y);                              FillCell(currentPosition' ConsoleColor.Black);                              Undo();                          }                          break;                      case ConsoleKey.DownArrow:                          if(Console.CursorTop < Console.WindowHeight - 2)                          {                              currentPosition = new Cell(                                  Console.CursorLeft' Console.CursorTop + 1);                          }                          // Only type Cell allowed in call to Push()                          path.Push(currentPosition);                          FillCell(currentPosition);                          break;                      case ConsoleKey.UpArrow:                          if(Console.CursorTop > 1)                          {                              currentPosition = new Cell(                                  Console.CursorLeft' Console.CursorTop - 1);                          }                          // Only type Cell allowed in call to Push()                          path.Push(currentPosition);                          FillCell(currentPosition);                          break;                      case ConsoleKey.LeftArrow:                          if(Console.CursorLeft > 1)                          {                              currentPosition = new Cell(                                  Console.CursorLeft - 1' Console.CursorTop);                          }                          // Only type Cell allowed in call to Push()                          path.Push(currentPosition);                          FillCell(currentPosition);                          break;                      case ConsoleKey.RightArrow:                          // SaveState()                          if(Console.CursorLeft < Console.WindowWidth - 2)                          {                              currentPosition = new Cell(                                  Console.CursorLeft + 1' Console.CursorTop);                          }                          // Only type Cell allowed in call to Push()                          path.Push(currentPosition);                          FillCell(currentPosition);                          break;                        default:                          Console.Beep();  // Added in C# 2.0                          break;                  }
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter12.Listing12_15,Program,D:\research\architectureSmells\repos\IntelliTect_EssentialCSharp\src\Chapter12\Listing12.15.UsingATypewithMultipleTypeParameters.cs,Main,The following statement contains a magic number: Pair<int' string> historicalEvent =                  new Pair<int' string>(1914'                      "Shackleton leaves for South Pole on ship Endurance");
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter12.Listing12_36,Program,D:\research\architectureSmells\repos\IntelliTect_EssentialCSharp\src\Chapter12\Listing12.36.SpecifyingTheTypeParameterExplicitly.cs,Main,The following statement contains a magic number: Console.WriteLine(                  MathEx.Max<int>(7' 490));
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter12.Listing12_36,Program,D:\research\architectureSmells\repos\IntelliTect_EssentialCSharp\src\Chapter12\Listing12.36.SpecifyingTheTypeParameterExplicitly.cs,Main,The following statement contains a magic number: Console.WriteLine(                  MathEx.Max<int>(7' 490));
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter12.Listing12_37,Program,D:\research\architectureSmells\repos\IntelliTect_EssentialCSharp\src\Chapter12\Listing12.37.InferringTheTypeParameter.cs,Main,The following statement contains a magic number: Console.WriteLine(                  MathEx.Max(7' 490));
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter12.Listing12_37,Program,D:\research\architectureSmells\repos\IntelliTect_EssentialCSharp\src\Chapter12\Listing12.37.InferringTheTypeParameter.cs,Main,The following statement contains a magic number: Console.WriteLine(                  MathEx.Max(7' 490));
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter12.Listing12_38,ConsoleTreeControl,D:\research\architectureSmells\repos\IntelliTect_EssentialCSharp\src\Chapter12\Listing12.38.SpecifyingConstraintsOnGenericMethods.cs,Show,The following statement contains a magic number: Console.WriteLine("\n{0}{1}"'                  "+ --".PadLeft(5 * indent' ' ')'                  tree.Item.ToString());
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Shared,Program,D:\research\architectureSmells\repos\IntelliTect_EssentialCSharp\src\Shared\Program.cs,ParseListingName,The following statement contains a magic number: chapterName = "Chapter" + chapterListing[index].PadLeft(2' '0');
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Shared,Program,D:\research\architectureSmells\repos\IntelliTect_EssentialCSharp\src\Shared\Program.cs,ParseListingName,The following statement contains a magic number: listing += chapterListing[index].PadLeft(2' '0')                              + ((index+1 != chapterListing.Length) ? "." : "");
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Shared,Program,D:\research\architectureSmells\repos\IntelliTect_EssentialCSharp\src\Shared\Program.cs,ParseListingName,The following statement contains a magic number: listing = $"{parts[0]}.{parts[1]}To{string.Join('.'' parts.Skip(3))}";
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Shared,Program,D:\research\architectureSmells\repos\IntelliTect_EssentialCSharp\src\Shared\Program.cs,ParseListingName,The following statement contains a magic number: parts.Length > 2
