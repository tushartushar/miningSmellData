Implementation smell,Namespace,Class,File,Method,Description
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter17.Listing17_03,CommandLineHandler,C:\repos\IntelliTect_EssentialCSharp\src\Chapter17\Listing17.03.DynamicallyInvokingAMember.cs,TryParse,The following statement contains a magic number: foreach(string arg in args)              {                  string option;                  if(arg[0] == '/' || arg[0] == '-')                  {                      string[] optionParts = arg.Split(                          new char[] { ':' }' 2);                        // Remove the slash|dash                      option = optionParts[0].Remove(0' 1);                      PropertyInfo property =                          commandLine.GetType().GetProperty(option'                              BindingFlags.IgnoreCase |                              BindingFlags.Instance |                              BindingFlags.Public);                      if(property != null)                      {                          if(property.PropertyType == typeof(bool))                          {                              // Last parameters for handling indexers                              property.SetValue(                                  commandLine' true' null);                              success = true;                          }                          else if(                              property.PropertyType == typeof(string))                          {                              property.SetValue(                                  commandLine' optionParts[1]' null);                              success = true;                          }                          else if(property.PropertyType.GetTypeInfo().IsEnum)                          {                              try                              {                                  property.SetValue(commandLine'                                      Enum.Parse(                                          typeof(ProcessPriorityClass)'                                          optionParts[1]' true)'                                      null);                                  success = true;                              }                              catch(ArgumentException)                              {                                  success = false;                                  errorMessage =                                      $@"The option '{                                          optionParts[1]                                          }' is invalid for '{                                           option }'";                              }                          }                          else                          {                              success = false;                              errorMessage =                                   $@"Data type '{                                      property.PropertyType.ToString()                                      }' on {                                      commandLine.GetType().ToString()                                      } is not supported.";                          }                      }                      else                      {                          success = false;                          errorMessage =                              $"Option '{ option }' is not supported.";                      }                  }              }
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter17.Listing17_16,CommandLineHandler,C:\repos\IntelliTect_EssentialCSharp\src\Chapter17\Listing17.17.UpdatingCommandLineHandler.TryParseToHandleAliases.cs,TryParse,The following statement contains a magic number: foreach(string arg in args)              {                  PropertyInfo property;                  string option;                  if(arg[0] == '/' || arg[0] == '-')                  {                      string[] optionParts = arg.Split(                          new char[] { ':' }' 2);                      option = optionParts[0].Remove(0' 1).ToLower();                        if(options.TryGetValue(option' out property))                      {                          success = SetOption(                              commandLine' property'                              optionParts' ref errorMessage);                      }                      else                      {                          success = false;                          errorMessage =                               $"Option '{option}' is not supported.";                      }                  }              }
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter17.Listing17_16,CommandLineHandler,C:\repos\IntelliTect_EssentialCSharp\src\Chapter17\Listing17.17.UpdatingCommandLineHandler.TryParseToHandleAliases.cs,SetOption,The following statement contains a magic number: if(property.PropertyType == typeof(bool))              {                  // Last parameters for handling indexers                  property.SetValue(                      commandLine' true' null);                  success = true;              }              else              {                    if((optionParts.Length < 2)                      || optionParts[1] == ""                      || optionParts[1] == ":")                  {                      // No setting was provided for the switch.                      success = false;                      errorMessage = string.Format(                          "You must specify the value for the {0} option."'                          property.Name);                  }                  else if(                      property.PropertyType == typeof(string))                  {                      property.SetValue(                          commandLine' optionParts[1]' null);                      success = true;                  }                  else if(property.PropertyType.GetTypeInfo().IsEnum)                  {                      success = TryParseEnumSwitch(                          commandLine' optionParts'                          property' ref errorMessage);                  }                  else                  {                      success = false;                      errorMessage = string.Format(                          "Data type '{0}' on {1} is not supported."'                          property.PropertyType.ToString()'                          commandLine.GetType().ToString());                  }              }
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter17.Listing17_29,Program,C:\repos\IntelliTect_EssentialCSharp\src\Chapter17\Listing17.30.DynamicProgrammingUsingReflection.cs,ChapterMain,The following statement contains a magic number: data = data * 3.5 + 28.6;
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter17.Listing17_29,Program,C:\repos\IntelliTect_EssentialCSharp\src\Chapter17\Listing17.30.DynamicProgrammingUsingReflection.cs,ChapterMain,The following statement contains a magic number: data = data * 3.5 + 28.6;
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter17.Listing17_29,Program,C:\repos\IntelliTect_EssentialCSharp\src\Chapter17\Listing17.30.DynamicProgrammingUsingReflection.cs,ChapterMain,The following statement contains a magic number: if(data == 2.4 + 112 + 26.2)              {                  Console.WriteLine(                      $"{data} makes for a long triathlon.");              }              else              {                  data.NonExistentMethodCallStillCompiles();              }
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter17.Listing17_29,Program,C:\repos\IntelliTect_EssentialCSharp\src\Chapter17\Listing17.30.DynamicProgrammingUsingReflection.cs,ChapterMain,The following statement contains a magic number: if(data == 2.4 + 112 + 26.2)              {                  Console.WriteLine(                      $"{data} makes for a long triathlon.");              }              else              {                  data.NonExistentMethodCallStillCompiles();              }
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter17.Listing17_29,Program,C:\repos\IntelliTect_EssentialCSharp\src\Chapter17\Listing17.30.DynamicProgrammingUsingReflection.cs,ChapterMain,The following statement contains a magic number: if(data == 2.4 + 112 + 26.2)              {                  Console.WriteLine(                      $"{data} makes for a long triathlon.");              }              else              {                  data.NonExistentMethodCallStillCompiles();              }
