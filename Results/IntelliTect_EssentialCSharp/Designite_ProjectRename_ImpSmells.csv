Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ProjectRename,Program,F:\newReposMay17\IntelliTect_EssentialCSharp\Utilities\ProjectRename\ProjectRename\Program.cs,Main,Cyclomatic complexity of the method is 9
Long Statement,ProjectRename,Program,F:\newReposMay17\IntelliTect_EssentialCSharp\Utilities\ProjectRename\ProjectRename\Program.cs,Main,The length of the statement  "		root = Path.Combine (Path.GetDirectoryName (System.Reflection.Assembly.GetEntryAssembly ().Location)' @"..\..\..\..\..\ChapterListings\"); " is 138.
Long Statement,ProjectRename,Program,F:\newReposMay17\IntelliTect_EssentialCSharp\Utilities\ProjectRename\ProjectRename\Program.cs,Main,The length of the statement  "			throw new ArgumentException (string.Format ("The chapter folder' \"{0}\"' could not be found."' rootDirectory.FullName)); " is 121.
Long Statement,ProjectRename,Program,F:\newReposMay17\IntelliTect_EssentialCSharp\Utilities\ProjectRename\ProjectRename\Program.cs,Main,The length of the statement  "			throw new ArgumentException (string.Format ("The chapter folder' \"{0}\"' could not be found."' PathEx.Combine (rootDirectory.FullName' fromChapterFolder' toProjectName))); " is 172.
Long Statement,ProjectRename,Program,F:\newReposMay17\IntelliTect_EssentialCSharp\Utilities\ProjectRename\ProjectRename\Program.cs,Main,The length of the statement  "			FileSystem.RenameDirectory (PathEx.Combine (rootDirectory.FullName' fromChapterFolder' fromProjectName)' PathEx.Combine (rootDirectory.FullName' toChapterFolder' toProjectName)); " is 178.
Long Statement,ProjectRename,Program,F:\newReposMay17\IntelliTect_EssentialCSharp\Utilities\ProjectRename\ProjectRename\Program.cs,Main,The length of the statement  "			toProjectDirectory = new DirectoryInfo (PathEx.Combine (rootDirectory.FullName' fromChapterFolder' fromProjectName)).Copy (PathEx.Combine (rootDirectory.FullName' toChapterFolder' toProjectName)); " is 196.
Long Statement,ProjectRename,Program,F:\newReposMay17\IntelliTect_EssentialCSharp\Utilities\ProjectRename\ProjectRename\Program.cs,Main,The length of the statement  "			string targetName = file.FullName.Replace (fromProjectName' toProjectName).Replace (fromChapterFolder' toChapterFolder); " is 120.
Long Statement,ProjectRename,Program,F:\newReposMay17\IntelliTect_EssentialCSharp\Utilities\ProjectRename\ProjectRename\Program.cs,ValidateFromListing,The length of the statement  "		throw new ApplicationException (string.Format ("The fromListing ({0}) should only be the listing numbers' not also the chapter numbers."' fromListing)); " is 152.
Magic Number,ProjectRename,Program,F:\newReposMay17\IntelliTect_EssentialCSharp\Utilities\ProjectRename\ProjectRename\Program.cs,Main,The following statement contains a magic number: try {  	ValidateNumberOfParameters (args);  	string root = null;  	root = Path.Combine (Path.GetDirectoryName (System.Reflection.Assembly.GetEntryAssembly ().Location)' @"..\..\..\..\..\ChapterListings\");  	if (args.Length == 6) {  		root = args [5];  	}  	rootDirectory = new DirectoryInfo (root);  	if (!rootDirectory.Exists) {  		throw new ArgumentException (string.Format ("The chapter folder' \"{0}\"' could not be found."' rootDirectory.FullName));  	}  	string fromChapter = args [0].TrimStart ('0');  	string toChapter = args [1].TrimStart ('0');  	string fromListing = args [2];  	ValidateFromListing (fromListing);  	string toListing = args [3];  	bool rename = false;  	if (args.Length >= 5) {  		rename = (args [4].ToLower () == "/rename");  	}  	string fromChapterFolder = "Chapter" + fromChapter.PadLeft (2' '0');  	string toChapterFolder = "Chapter" + toChapter.PadLeft (2' '0');  	string fromProjectName = string.Format ("Listing{0}_{1}"' fromChapter' fromListing);  	string toProjectName = string.Format ("Listing{0}_{1}"' toChapter' toListing);  	DirectoryInfo toProjectDirectory;  	// Check to make sure the source directory is available  	if (!Directory.Exists (Path.Combine (rootDirectory.FullName' fromChapterFolder))) {  		throw new ArgumentException (string.Format ("The chapter folder' \"{0}\"' could not be found."' PathEx.Combine (rootDirectory.FullName' fromChapterFolder' toProjectName)));  	}  	if (rename) {  		FileSystem.RenameDirectory (PathEx.Combine (rootDirectory.FullName' fromChapterFolder' fromProjectName)' PathEx.Combine (rootDirectory.FullName' toChapterFolder' toProjectName));  		toProjectDirectory = new DirectoryInfo (PathEx.Combine (rootDirectory.FullName' toChapterFolder' toProjectName));  	} else {  		toProjectDirectory = new DirectoryInfo (PathEx.Combine (rootDirectory.FullName' fromChapterFolder' fromProjectName)).Copy (PathEx.Combine (rootDirectory.FullName' toChapterFolder' toProjectName));  	}  	//System.Diagnostics.Debugger.Break();  	foreach (FileInfo file in toProjectDirectory.GetFiles ("*.cs*"' SearchOption.AllDirectories)) {  		// Get ready to rename the files to match the new project hierarchy  		string targetName = file.FullName.Replace (fromProjectName' toProjectName).Replace (fromChapterFolder' toChapterFolder);  		//                    targetName =  targetName.Replace();  		Console.WriteLine ("{0}\t=>\t{1}"' file.FullName' targetName);  		file.IsReadOnly = false;  		if (file.FullName != targetName) {  			// Rename the file  			file.MoveTo (targetName);  		}  		ReplaceInFile (file' fromProjectName' toProjectName);  		ReplaceInFile (file' fromProjectName.Replace ("-"' "To")' toProjectName.Replace ("-"' "To"));  		ReplaceInFile (file' fromChapterFolder' toChapterFolder);  		//ReplaceInFile(file' fromListing' toListing);  	}  } catch (Exception exception) {  	Console.Error.WriteLine ("ERROR:" + exception.Message);  	Console.WriteLine (exception.ToString ());  	return -1;  }  
Magic Number,ProjectRename,Program,F:\newReposMay17\IntelliTect_EssentialCSharp\Utilities\ProjectRename\ProjectRename\Program.cs,Main,The following statement contains a magic number: try {  	ValidateNumberOfParameters (args);  	string root = null;  	root = Path.Combine (Path.GetDirectoryName (System.Reflection.Assembly.GetEntryAssembly ().Location)' @"..\..\..\..\..\ChapterListings\");  	if (args.Length == 6) {  		root = args [5];  	}  	rootDirectory = new DirectoryInfo (root);  	if (!rootDirectory.Exists) {  		throw new ArgumentException (string.Format ("The chapter folder' \"{0}\"' could not be found."' rootDirectory.FullName));  	}  	string fromChapter = args [0].TrimStart ('0');  	string toChapter = args [1].TrimStart ('0');  	string fromListing = args [2];  	ValidateFromListing (fromListing);  	string toListing = args [3];  	bool rename = false;  	if (args.Length >= 5) {  		rename = (args [4].ToLower () == "/rename");  	}  	string fromChapterFolder = "Chapter" + fromChapter.PadLeft (2' '0');  	string toChapterFolder = "Chapter" + toChapter.PadLeft (2' '0');  	string fromProjectName = string.Format ("Listing{0}_{1}"' fromChapter' fromListing);  	string toProjectName = string.Format ("Listing{0}_{1}"' toChapter' toListing);  	DirectoryInfo toProjectDirectory;  	// Check to make sure the source directory is available  	if (!Directory.Exists (Path.Combine (rootDirectory.FullName' fromChapterFolder))) {  		throw new ArgumentException (string.Format ("The chapter folder' \"{0}\"' could not be found."' PathEx.Combine (rootDirectory.FullName' fromChapterFolder' toProjectName)));  	}  	if (rename) {  		FileSystem.RenameDirectory (PathEx.Combine (rootDirectory.FullName' fromChapterFolder' fromProjectName)' PathEx.Combine (rootDirectory.FullName' toChapterFolder' toProjectName));  		toProjectDirectory = new DirectoryInfo (PathEx.Combine (rootDirectory.FullName' toChapterFolder' toProjectName));  	} else {  		toProjectDirectory = new DirectoryInfo (PathEx.Combine (rootDirectory.FullName' fromChapterFolder' fromProjectName)).Copy (PathEx.Combine (rootDirectory.FullName' toChapterFolder' toProjectName));  	}  	//System.Diagnostics.Debugger.Break();  	foreach (FileInfo file in toProjectDirectory.GetFiles ("*.cs*"' SearchOption.AllDirectories)) {  		// Get ready to rename the files to match the new project hierarchy  		string targetName = file.FullName.Replace (fromProjectName' toProjectName).Replace (fromChapterFolder' toChapterFolder);  		//                    targetName =  targetName.Replace();  		Console.WriteLine ("{0}\t=>\t{1}"' file.FullName' targetName);  		file.IsReadOnly = false;  		if (file.FullName != targetName) {  			// Rename the file  			file.MoveTo (targetName);  		}  		ReplaceInFile (file' fromProjectName' toProjectName);  		ReplaceInFile (file' fromProjectName.Replace ("-"' "To")' toProjectName.Replace ("-"' "To"));  		ReplaceInFile (file' fromChapterFolder' toChapterFolder);  		//ReplaceInFile(file' fromListing' toListing);  	}  } catch (Exception exception) {  	Console.Error.WriteLine ("ERROR:" + exception.Message);  	Console.WriteLine (exception.ToString ());  	return -1;  }  
Magic Number,ProjectRename,Program,F:\newReposMay17\IntelliTect_EssentialCSharp\Utilities\ProjectRename\ProjectRename\Program.cs,Main,The following statement contains a magic number: try {  	ValidateNumberOfParameters (args);  	string root = null;  	root = Path.Combine (Path.GetDirectoryName (System.Reflection.Assembly.GetEntryAssembly ().Location)' @"..\..\..\..\..\ChapterListings\");  	if (args.Length == 6) {  		root = args [5];  	}  	rootDirectory = new DirectoryInfo (root);  	if (!rootDirectory.Exists) {  		throw new ArgumentException (string.Format ("The chapter folder' \"{0}\"' could not be found."' rootDirectory.FullName));  	}  	string fromChapter = args [0].TrimStart ('0');  	string toChapter = args [1].TrimStart ('0');  	string fromListing = args [2];  	ValidateFromListing (fromListing);  	string toListing = args [3];  	bool rename = false;  	if (args.Length >= 5) {  		rename = (args [4].ToLower () == "/rename");  	}  	string fromChapterFolder = "Chapter" + fromChapter.PadLeft (2' '0');  	string toChapterFolder = "Chapter" + toChapter.PadLeft (2' '0');  	string fromProjectName = string.Format ("Listing{0}_{1}"' fromChapter' fromListing);  	string toProjectName = string.Format ("Listing{0}_{1}"' toChapter' toListing);  	DirectoryInfo toProjectDirectory;  	// Check to make sure the source directory is available  	if (!Directory.Exists (Path.Combine (rootDirectory.FullName' fromChapterFolder))) {  		throw new ArgumentException (string.Format ("The chapter folder' \"{0}\"' could not be found."' PathEx.Combine (rootDirectory.FullName' fromChapterFolder' toProjectName)));  	}  	if (rename) {  		FileSystem.RenameDirectory (PathEx.Combine (rootDirectory.FullName' fromChapterFolder' fromProjectName)' PathEx.Combine (rootDirectory.FullName' toChapterFolder' toProjectName));  		toProjectDirectory = new DirectoryInfo (PathEx.Combine (rootDirectory.FullName' toChapterFolder' toProjectName));  	} else {  		toProjectDirectory = new DirectoryInfo (PathEx.Combine (rootDirectory.FullName' fromChapterFolder' fromProjectName)).Copy (PathEx.Combine (rootDirectory.FullName' toChapterFolder' toProjectName));  	}  	//System.Diagnostics.Debugger.Break();  	foreach (FileInfo file in toProjectDirectory.GetFiles ("*.cs*"' SearchOption.AllDirectories)) {  		// Get ready to rename the files to match the new project hierarchy  		string targetName = file.FullName.Replace (fromProjectName' toProjectName).Replace (fromChapterFolder' toChapterFolder);  		//                    targetName =  targetName.Replace();  		Console.WriteLine ("{0}\t=>\t{1}"' file.FullName' targetName);  		file.IsReadOnly = false;  		if (file.FullName != targetName) {  			// Rename the file  			file.MoveTo (targetName);  		}  		ReplaceInFile (file' fromProjectName' toProjectName);  		ReplaceInFile (file' fromProjectName.Replace ("-"' "To")' toProjectName.Replace ("-"' "To"));  		ReplaceInFile (file' fromChapterFolder' toChapterFolder);  		//ReplaceInFile(file' fromListing' toListing);  	}  } catch (Exception exception) {  	Console.Error.WriteLine ("ERROR:" + exception.Message);  	Console.WriteLine (exception.ToString ());  	return -1;  }  
Magic Number,ProjectRename,Program,F:\newReposMay17\IntelliTect_EssentialCSharp\Utilities\ProjectRename\ProjectRename\Program.cs,Main,The following statement contains a magic number: try {  	ValidateNumberOfParameters (args);  	string root = null;  	root = Path.Combine (Path.GetDirectoryName (System.Reflection.Assembly.GetEntryAssembly ().Location)' @"..\..\..\..\..\ChapterListings\");  	if (args.Length == 6) {  		root = args [5];  	}  	rootDirectory = new DirectoryInfo (root);  	if (!rootDirectory.Exists) {  		throw new ArgumentException (string.Format ("The chapter folder' \"{0}\"' could not be found."' rootDirectory.FullName));  	}  	string fromChapter = args [0].TrimStart ('0');  	string toChapter = args [1].TrimStart ('0');  	string fromListing = args [2];  	ValidateFromListing (fromListing);  	string toListing = args [3];  	bool rename = false;  	if (args.Length >= 5) {  		rename = (args [4].ToLower () == "/rename");  	}  	string fromChapterFolder = "Chapter" + fromChapter.PadLeft (2' '0');  	string toChapterFolder = "Chapter" + toChapter.PadLeft (2' '0');  	string fromProjectName = string.Format ("Listing{0}_{1}"' fromChapter' fromListing);  	string toProjectName = string.Format ("Listing{0}_{1}"' toChapter' toListing);  	DirectoryInfo toProjectDirectory;  	// Check to make sure the source directory is available  	if (!Directory.Exists (Path.Combine (rootDirectory.FullName' fromChapterFolder))) {  		throw new ArgumentException (string.Format ("The chapter folder' \"{0}\"' could not be found."' PathEx.Combine (rootDirectory.FullName' fromChapterFolder' toProjectName)));  	}  	if (rename) {  		FileSystem.RenameDirectory (PathEx.Combine (rootDirectory.FullName' fromChapterFolder' fromProjectName)' PathEx.Combine (rootDirectory.FullName' toChapterFolder' toProjectName));  		toProjectDirectory = new DirectoryInfo (PathEx.Combine (rootDirectory.FullName' toChapterFolder' toProjectName));  	} else {  		toProjectDirectory = new DirectoryInfo (PathEx.Combine (rootDirectory.FullName' fromChapterFolder' fromProjectName)).Copy (PathEx.Combine (rootDirectory.FullName' toChapterFolder' toProjectName));  	}  	//System.Diagnostics.Debugger.Break();  	foreach (FileInfo file in toProjectDirectory.GetFiles ("*.cs*"' SearchOption.AllDirectories)) {  		// Get ready to rename the files to match the new project hierarchy  		string targetName = file.FullName.Replace (fromProjectName' toProjectName).Replace (fromChapterFolder' toChapterFolder);  		//                    targetName =  targetName.Replace();  		Console.WriteLine ("{0}\t=>\t{1}"' file.FullName' targetName);  		file.IsReadOnly = false;  		if (file.FullName != targetName) {  			// Rename the file  			file.MoveTo (targetName);  		}  		ReplaceInFile (file' fromProjectName' toProjectName);  		ReplaceInFile (file' fromProjectName.Replace ("-"' "To")' toProjectName.Replace ("-"' "To"));  		ReplaceInFile (file' fromChapterFolder' toChapterFolder);  		//ReplaceInFile(file' fromListing' toListing);  	}  } catch (Exception exception) {  	Console.Error.WriteLine ("ERROR:" + exception.Message);  	Console.WriteLine (exception.ToString ());  	return -1;  }  
Magic Number,ProjectRename,Program,F:\newReposMay17\IntelliTect_EssentialCSharp\Utilities\ProjectRename\ProjectRename\Program.cs,Main,The following statement contains a magic number: try {  	ValidateNumberOfParameters (args);  	string root = null;  	root = Path.Combine (Path.GetDirectoryName (System.Reflection.Assembly.GetEntryAssembly ().Location)' @"..\..\..\..\..\ChapterListings\");  	if (args.Length == 6) {  		root = args [5];  	}  	rootDirectory = new DirectoryInfo (root);  	if (!rootDirectory.Exists) {  		throw new ArgumentException (string.Format ("The chapter folder' \"{0}\"' could not be found."' rootDirectory.FullName));  	}  	string fromChapter = args [0].TrimStart ('0');  	string toChapter = args [1].TrimStart ('0');  	string fromListing = args [2];  	ValidateFromListing (fromListing);  	string toListing = args [3];  	bool rename = false;  	if (args.Length >= 5) {  		rename = (args [4].ToLower () == "/rename");  	}  	string fromChapterFolder = "Chapter" + fromChapter.PadLeft (2' '0');  	string toChapterFolder = "Chapter" + toChapter.PadLeft (2' '0');  	string fromProjectName = string.Format ("Listing{0}_{1}"' fromChapter' fromListing);  	string toProjectName = string.Format ("Listing{0}_{1}"' toChapter' toListing);  	DirectoryInfo toProjectDirectory;  	// Check to make sure the source directory is available  	if (!Directory.Exists (Path.Combine (rootDirectory.FullName' fromChapterFolder))) {  		throw new ArgumentException (string.Format ("The chapter folder' \"{0}\"' could not be found."' PathEx.Combine (rootDirectory.FullName' fromChapterFolder' toProjectName)));  	}  	if (rename) {  		FileSystem.RenameDirectory (PathEx.Combine (rootDirectory.FullName' fromChapterFolder' fromProjectName)' PathEx.Combine (rootDirectory.FullName' toChapterFolder' toProjectName));  		toProjectDirectory = new DirectoryInfo (PathEx.Combine (rootDirectory.FullName' toChapterFolder' toProjectName));  	} else {  		toProjectDirectory = new DirectoryInfo (PathEx.Combine (rootDirectory.FullName' fromChapterFolder' fromProjectName)).Copy (PathEx.Combine (rootDirectory.FullName' toChapterFolder' toProjectName));  	}  	//System.Diagnostics.Debugger.Break();  	foreach (FileInfo file in toProjectDirectory.GetFiles ("*.cs*"' SearchOption.AllDirectories)) {  		// Get ready to rename the files to match the new project hierarchy  		string targetName = file.FullName.Replace (fromProjectName' toProjectName).Replace (fromChapterFolder' toChapterFolder);  		//                    targetName =  targetName.Replace();  		Console.WriteLine ("{0}\t=>\t{1}"' file.FullName' targetName);  		file.IsReadOnly = false;  		if (file.FullName != targetName) {  			// Rename the file  			file.MoveTo (targetName);  		}  		ReplaceInFile (file' fromProjectName' toProjectName);  		ReplaceInFile (file' fromProjectName.Replace ("-"' "To")' toProjectName.Replace ("-"' "To"));  		ReplaceInFile (file' fromChapterFolder' toChapterFolder);  		//ReplaceInFile(file' fromListing' toListing);  	}  } catch (Exception exception) {  	Console.Error.WriteLine ("ERROR:" + exception.Message);  	Console.WriteLine (exception.ToString ());  	return -1;  }  
Magic Number,ProjectRename,Program,F:\newReposMay17\IntelliTect_EssentialCSharp\Utilities\ProjectRename\ProjectRename\Program.cs,Main,The following statement contains a magic number: try {  	ValidateNumberOfParameters (args);  	string root = null;  	root = Path.Combine (Path.GetDirectoryName (System.Reflection.Assembly.GetEntryAssembly ().Location)' @"..\..\..\..\..\ChapterListings\");  	if (args.Length == 6) {  		root = args [5];  	}  	rootDirectory = new DirectoryInfo (root);  	if (!rootDirectory.Exists) {  		throw new ArgumentException (string.Format ("The chapter folder' \"{0}\"' could not be found."' rootDirectory.FullName));  	}  	string fromChapter = args [0].TrimStart ('0');  	string toChapter = args [1].TrimStart ('0');  	string fromListing = args [2];  	ValidateFromListing (fromListing);  	string toListing = args [3];  	bool rename = false;  	if (args.Length >= 5) {  		rename = (args [4].ToLower () == "/rename");  	}  	string fromChapterFolder = "Chapter" + fromChapter.PadLeft (2' '0');  	string toChapterFolder = "Chapter" + toChapter.PadLeft (2' '0');  	string fromProjectName = string.Format ("Listing{0}_{1}"' fromChapter' fromListing);  	string toProjectName = string.Format ("Listing{0}_{1}"' toChapter' toListing);  	DirectoryInfo toProjectDirectory;  	// Check to make sure the source directory is available  	if (!Directory.Exists (Path.Combine (rootDirectory.FullName' fromChapterFolder))) {  		throw new ArgumentException (string.Format ("The chapter folder' \"{0}\"' could not be found."' PathEx.Combine (rootDirectory.FullName' fromChapterFolder' toProjectName)));  	}  	if (rename) {  		FileSystem.RenameDirectory (PathEx.Combine (rootDirectory.FullName' fromChapterFolder' fromProjectName)' PathEx.Combine (rootDirectory.FullName' toChapterFolder' toProjectName));  		toProjectDirectory = new DirectoryInfo (PathEx.Combine (rootDirectory.FullName' toChapterFolder' toProjectName));  	} else {  		toProjectDirectory = new DirectoryInfo (PathEx.Combine (rootDirectory.FullName' fromChapterFolder' fromProjectName)).Copy (PathEx.Combine (rootDirectory.FullName' toChapterFolder' toProjectName));  	}  	//System.Diagnostics.Debugger.Break();  	foreach (FileInfo file in toProjectDirectory.GetFiles ("*.cs*"' SearchOption.AllDirectories)) {  		// Get ready to rename the files to match the new project hierarchy  		string targetName = file.FullName.Replace (fromProjectName' toProjectName).Replace (fromChapterFolder' toChapterFolder);  		//                    targetName =  targetName.Replace();  		Console.WriteLine ("{0}\t=>\t{1}"' file.FullName' targetName);  		file.IsReadOnly = false;  		if (file.FullName != targetName) {  			// Rename the file  			file.MoveTo (targetName);  		}  		ReplaceInFile (file' fromProjectName' toProjectName);  		ReplaceInFile (file' fromProjectName.Replace ("-"' "To")' toProjectName.Replace ("-"' "To"));  		ReplaceInFile (file' fromChapterFolder' toChapterFolder);  		//ReplaceInFile(file' fromListing' toListing);  	}  } catch (Exception exception) {  	Console.Error.WriteLine ("ERROR:" + exception.Message);  	Console.WriteLine (exception.ToString ());  	return -1;  }  
Magic Number,ProjectRename,Program,F:\newReposMay17\IntelliTect_EssentialCSharp\Utilities\ProjectRename\ProjectRename\Program.cs,Main,The following statement contains a magic number: try {  	ValidateNumberOfParameters (args);  	string root = null;  	root = Path.Combine (Path.GetDirectoryName (System.Reflection.Assembly.GetEntryAssembly ().Location)' @"..\..\..\..\..\ChapterListings\");  	if (args.Length == 6) {  		root = args [5];  	}  	rootDirectory = new DirectoryInfo (root);  	if (!rootDirectory.Exists) {  		throw new ArgumentException (string.Format ("The chapter folder' \"{0}\"' could not be found."' rootDirectory.FullName));  	}  	string fromChapter = args [0].TrimStart ('0');  	string toChapter = args [1].TrimStart ('0');  	string fromListing = args [2];  	ValidateFromListing (fromListing);  	string toListing = args [3];  	bool rename = false;  	if (args.Length >= 5) {  		rename = (args [4].ToLower () == "/rename");  	}  	string fromChapterFolder = "Chapter" + fromChapter.PadLeft (2' '0');  	string toChapterFolder = "Chapter" + toChapter.PadLeft (2' '0');  	string fromProjectName = string.Format ("Listing{0}_{1}"' fromChapter' fromListing);  	string toProjectName = string.Format ("Listing{0}_{1}"' toChapter' toListing);  	DirectoryInfo toProjectDirectory;  	// Check to make sure the source directory is available  	if (!Directory.Exists (Path.Combine (rootDirectory.FullName' fromChapterFolder))) {  		throw new ArgumentException (string.Format ("The chapter folder' \"{0}\"' could not be found."' PathEx.Combine (rootDirectory.FullName' fromChapterFolder' toProjectName)));  	}  	if (rename) {  		FileSystem.RenameDirectory (PathEx.Combine (rootDirectory.FullName' fromChapterFolder' fromProjectName)' PathEx.Combine (rootDirectory.FullName' toChapterFolder' toProjectName));  		toProjectDirectory = new DirectoryInfo (PathEx.Combine (rootDirectory.FullName' toChapterFolder' toProjectName));  	} else {  		toProjectDirectory = new DirectoryInfo (PathEx.Combine (rootDirectory.FullName' fromChapterFolder' fromProjectName)).Copy (PathEx.Combine (rootDirectory.FullName' toChapterFolder' toProjectName));  	}  	//System.Diagnostics.Debugger.Break();  	foreach (FileInfo file in toProjectDirectory.GetFiles ("*.cs*"' SearchOption.AllDirectories)) {  		// Get ready to rename the files to match the new project hierarchy  		string targetName = file.FullName.Replace (fromProjectName' toProjectName).Replace (fromChapterFolder' toChapterFolder);  		//                    targetName =  targetName.Replace();  		Console.WriteLine ("{0}\t=>\t{1}"' file.FullName' targetName);  		file.IsReadOnly = false;  		if (file.FullName != targetName) {  			// Rename the file  			file.MoveTo (targetName);  		}  		ReplaceInFile (file' fromProjectName' toProjectName);  		ReplaceInFile (file' fromProjectName.Replace ("-"' "To")' toProjectName.Replace ("-"' "To"));  		ReplaceInFile (file' fromChapterFolder' toChapterFolder);  		//ReplaceInFile(file' fromListing' toListing);  	}  } catch (Exception exception) {  	Console.Error.WriteLine ("ERROR:" + exception.Message);  	Console.WriteLine (exception.ToString ());  	return -1;  }  
Magic Number,ProjectRename,Program,F:\newReposMay17\IntelliTect_EssentialCSharp\Utilities\ProjectRename\ProjectRename\Program.cs,Main,The following statement contains a magic number: try {  	ValidateNumberOfParameters (args);  	string root = null;  	root = Path.Combine (Path.GetDirectoryName (System.Reflection.Assembly.GetEntryAssembly ().Location)' @"..\..\..\..\..\ChapterListings\");  	if (args.Length == 6) {  		root = args [5];  	}  	rootDirectory = new DirectoryInfo (root);  	if (!rootDirectory.Exists) {  		throw new ArgumentException (string.Format ("The chapter folder' \"{0}\"' could not be found."' rootDirectory.FullName));  	}  	string fromChapter = args [0].TrimStart ('0');  	string toChapter = args [1].TrimStart ('0');  	string fromListing = args [2];  	ValidateFromListing (fromListing);  	string toListing = args [3];  	bool rename = false;  	if (args.Length >= 5) {  		rename = (args [4].ToLower () == "/rename");  	}  	string fromChapterFolder = "Chapter" + fromChapter.PadLeft (2' '0');  	string toChapterFolder = "Chapter" + toChapter.PadLeft (2' '0');  	string fromProjectName = string.Format ("Listing{0}_{1}"' fromChapter' fromListing);  	string toProjectName = string.Format ("Listing{0}_{1}"' toChapter' toListing);  	DirectoryInfo toProjectDirectory;  	// Check to make sure the source directory is available  	if (!Directory.Exists (Path.Combine (rootDirectory.FullName' fromChapterFolder))) {  		throw new ArgumentException (string.Format ("The chapter folder' \"{0}\"' could not be found."' PathEx.Combine (rootDirectory.FullName' fromChapterFolder' toProjectName)));  	}  	if (rename) {  		FileSystem.RenameDirectory (PathEx.Combine (rootDirectory.FullName' fromChapterFolder' fromProjectName)' PathEx.Combine (rootDirectory.FullName' toChapterFolder' toProjectName));  		toProjectDirectory = new DirectoryInfo (PathEx.Combine (rootDirectory.FullName' toChapterFolder' toProjectName));  	} else {  		toProjectDirectory = new DirectoryInfo (PathEx.Combine (rootDirectory.FullName' fromChapterFolder' fromProjectName)).Copy (PathEx.Combine (rootDirectory.FullName' toChapterFolder' toProjectName));  	}  	//System.Diagnostics.Debugger.Break();  	foreach (FileInfo file in toProjectDirectory.GetFiles ("*.cs*"' SearchOption.AllDirectories)) {  		// Get ready to rename the files to match the new project hierarchy  		string targetName = file.FullName.Replace (fromProjectName' toProjectName).Replace (fromChapterFolder' toChapterFolder);  		//                    targetName =  targetName.Replace();  		Console.WriteLine ("{0}\t=>\t{1}"' file.FullName' targetName);  		file.IsReadOnly = false;  		if (file.FullName != targetName) {  			// Rename the file  			file.MoveTo (targetName);  		}  		ReplaceInFile (file' fromProjectName' toProjectName);  		ReplaceInFile (file' fromProjectName.Replace ("-"' "To")' toProjectName.Replace ("-"' "To"));  		ReplaceInFile (file' fromChapterFolder' toChapterFolder);  		//ReplaceInFile(file' fromListing' toListing);  	}  } catch (Exception exception) {  	Console.Error.WriteLine ("ERROR:" + exception.Message);  	Console.WriteLine (exception.ToString ());  	return -1;  }  
Magic Number,ProjectRename,Program,F:\newReposMay17\IntelliTect_EssentialCSharp\Utilities\ProjectRename\ProjectRename\Program.cs,Main,The following statement contains a magic number: if (args.Length == 6) {  	root = args [5];  }  
Magic Number,ProjectRename,Program,F:\newReposMay17\IntelliTect_EssentialCSharp\Utilities\ProjectRename\ProjectRename\Program.cs,Main,The following statement contains a magic number: if (args.Length == 6) {  	root = args [5];  }  
Magic Number,ProjectRename,Program,F:\newReposMay17\IntelliTect_EssentialCSharp\Utilities\ProjectRename\ProjectRename\Program.cs,Main,The following statement contains a magic number: root = args [5];  
Magic Number,ProjectRename,Program,F:\newReposMay17\IntelliTect_EssentialCSharp\Utilities\ProjectRename\ProjectRename\Program.cs,Main,The following statement contains a magic number: if (args.Length >= 5) {  	rename = (args [4].ToLower () == "/rename");  }  
Magic Number,ProjectRename,Program,F:\newReposMay17\IntelliTect_EssentialCSharp\Utilities\ProjectRename\ProjectRename\Program.cs,Main,The following statement contains a magic number: if (args.Length >= 5) {  	rename = (args [4].ToLower () == "/rename");  }  
Magic Number,ProjectRename,Program,F:\newReposMay17\IntelliTect_EssentialCSharp\Utilities\ProjectRename\ProjectRename\Program.cs,Main,The following statement contains a magic number: rename = (args [4].ToLower () == "/rename");  
Magic Number,ProjectRename,Program,F:\newReposMay17\IntelliTect_EssentialCSharp\Utilities\ProjectRename\ProjectRename\Program.cs,ValidateNumberOfParameters,The following statement contains a magic number: if (args.Length < 4) {  	throw new ApplicationException ("The command line parameters were invalid.");  }  
