Implementation smell,Namespace,Class,File,Method,Description
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter11.Listing11_02,Program,C:\repos\IntelliTect_EssentialCSharp\src\Chapter11\Listing11.02.SupportingUndoInEtchASketchGame.cs,Sketch,The following statement contains a magic number: for(int i = 2; i < Console.WindowHeight; i++)              {                  Console.WriteLine();              }
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter11.Listing11_02,Program,C:\repos\IntelliTect_EssentialCSharp\src\Chapter11\Listing11.02.SupportingUndoInEtchASketchGame.cs,Sketch,The following statement contains a magic number: currentPosition = new Cell(Console.WindowWidth / 2' Console.WindowHeight / 2);
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter11.Listing11_02,Program,C:\repos\IntelliTect_EssentialCSharp\src\Chapter11\Listing11.02.SupportingUndoInEtchASketchGame.cs,Sketch,The following statement contains a magic number: currentPosition = new Cell(Console.WindowWidth / 2' Console.WindowHeight / 2);
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter11.Listing11_02,Program,C:\repos\IntelliTect_EssentialCSharp\src\Chapter11\Listing11.02.SupportingUndoInEtchASketchGame.cs,Sketch,The following statement contains a magic number: do              {                  // Etch in the direction indicated by the                  // arrow keys that the user enters                  key = Move();                    switch(key.Key)                  {                      case ConsoleKey.Z:                          // Undo the previous Move                          if(path.Count >= 1)                          {                              currentPosition = (Cell)path.Pop();                              Console.SetCursorPosition(                                  currentPosition.X' currentPosition.Y);                              FillCell(currentPosition' ConsoleColor.Black);                              Undo();                          }                          break;                      case ConsoleKey.DownArrow:                          if(Console.CursorTop < Console.WindowHeight - 2)                          {                              currentPosition = new Cell(                                  Console.CursorLeft' Console.CursorTop + 1);                          }                          path.Push(currentPosition);                          FillCell(currentPosition);                          break;                      case ConsoleKey.UpArrow:                          if(Console.CursorTop > 1)                          {                              currentPosition = new Cell(                                  Console.CursorLeft' Console.CursorTop - 1);                          }                          path.Push(currentPosition);                          FillCell(currentPosition);                          break;                      case ConsoleKey.LeftArrow:                          if(Console.CursorLeft > 1)                          {                              currentPosition = new Cell(                                  Console.CursorLeft - 1' Console.CursorTop);                          }                          path.Push(currentPosition);                          FillCell(currentPosition);                          break;                      case ConsoleKey.RightArrow:                          // SaveState()                          if(Console.CursorLeft < Console.WindowWidth - 2)                          {                              currentPosition = new Cell(                                  Console.CursorLeft + 1' Console.CursorTop);                          }                          path.Push(currentPosition);                          FillCell(currentPosition);                          break;                        default:                          Console.Beep();  // Added in C# 2.0                          break;                  }                }              while(key.Key != ConsoleKey.X);
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter11.Listing11_02,Program,C:\repos\IntelliTect_EssentialCSharp\src\Chapter11\Listing11.02.SupportingUndoInEtchASketchGame.cs,Sketch,The following statement contains a magic number: do              {                  // Etch in the direction indicated by the                  // arrow keys that the user enters                  key = Move();                    switch(key.Key)                  {                      case ConsoleKey.Z:                          // Undo the previous Move                          if(path.Count >= 1)                          {                              currentPosition = (Cell)path.Pop();                              Console.SetCursorPosition(                                  currentPosition.X' currentPosition.Y);                              FillCell(currentPosition' ConsoleColor.Black);                              Undo();                          }                          break;                      case ConsoleKey.DownArrow:                          if(Console.CursorTop < Console.WindowHeight - 2)                          {                              currentPosition = new Cell(                                  Console.CursorLeft' Console.CursorTop + 1);                          }                          path.Push(currentPosition);                          FillCell(currentPosition);                          break;                      case ConsoleKey.UpArrow:                          if(Console.CursorTop > 1)                          {                              currentPosition = new Cell(                                  Console.CursorLeft' Console.CursorTop - 1);                          }                          path.Push(currentPosition);                          FillCell(currentPosition);                          break;                      case ConsoleKey.LeftArrow:                          if(Console.CursorLeft > 1)                          {                              currentPosition = new Cell(                                  Console.CursorLeft - 1' Console.CursorTop);                          }                          path.Push(currentPosition);                          FillCell(currentPosition);                          break;                      case ConsoleKey.RightArrow:                          // SaveState()                          if(Console.CursorLeft < Console.WindowWidth - 2)                          {                              currentPosition = new Cell(                                  Console.CursorLeft + 1' Console.CursorTop);                          }                          path.Push(currentPosition);                          FillCell(currentPosition);                          break;                        default:                          Console.Beep();  // Added in C# 2.0                          break;                  }                }              while(key.Key != ConsoleKey.X);
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter11.Listing11_06,Program,C:\repos\IntelliTect_EssentialCSharp\src\Chapter11\Listing11.06.ImplementingUndoWithAGenericStackClass.cs,Sketch,The following statement contains a magic number: for(int i = 2; i < Console.WindowHeight; i++)              {                  Console.WriteLine();              }
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter11.Listing11_06,Program,C:\repos\IntelliTect_EssentialCSharp\src\Chapter11\Listing11.06.ImplementingUndoWithAGenericStackClass.cs,Sketch,The following statement contains a magic number: currentPosition = new Cell(Console.WindowWidth / 2' Console.WindowHeight / 2);
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter11.Listing11_06,Program,C:\repos\IntelliTect_EssentialCSharp\src\Chapter11\Listing11.06.ImplementingUndoWithAGenericStackClass.cs,Sketch,The following statement contains a magic number: currentPosition = new Cell(Console.WindowWidth / 2' Console.WindowHeight / 2);
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter11.Listing11_06,Program,C:\repos\IntelliTect_EssentialCSharp\src\Chapter11\Listing11.06.ImplementingUndoWithAGenericStackClass.cs,Sketch,The following statement contains a magic number: do              {                  // Etch in the direction indicated by the                  // arrow keys that the user enters.                  key = Move();                    switch(key.Key)                  {                      case ConsoleKey.Z:                          // Undo the previous Move.                          if(path.Count >= 1)                          {                              // No cast required                              currentPosition = path.Pop();                              Console.SetCursorPosition(                                  currentPosition.X' currentPosition.Y);                              FillCell(currentPosition' ConsoleColor.Black);                              Undo();                          }                          break;                      case ConsoleKey.DownArrow:                          if(Console.CursorTop < Console.WindowHeight - 2)                          {                              currentPosition = new Cell(                                  Console.CursorLeft' Console.CursorTop + 1);                          }                          // Only type Cell allowed in call to Push().                          path.Push(currentPosition);                          FillCell(currentPosition);                          break;                      case ConsoleKey.UpArrow:                          if(Console.CursorTop > 1)                          {                              currentPosition = new Cell(                                  Console.CursorLeft' Console.CursorTop - 1);                          }                          // Only type Cell allowed in call to Push().                          path.Push(currentPosition);                          FillCell(currentPosition);                          break;                      case ConsoleKey.LeftArrow:                          if(Console.CursorLeft > 1)                          {                              currentPosition = new Cell(                                  Console.CursorLeft - 1' Console.CursorTop);                          }                          // Only type Cell allowed in call to Push().                          path.Push(currentPosition);                          FillCell(currentPosition);                          break;                      case ConsoleKey.RightArrow:                          // SaveState()                          if(Console.CursorLeft < Console.WindowWidth - 2)                          {                              currentPosition = new Cell(                                  Console.CursorLeft + 1' Console.CursorTop);                          }                          // Only type Cell allowed in call to Push().                          path.Push(currentPosition);                          FillCell(currentPosition);                          break;                        default:                          Console.Beep();  // Added in C# 2.0                          break;                  }                }              while(key.Key != ConsoleKey.X);
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter11.Listing11_06,Program,C:\repos\IntelliTect_EssentialCSharp\src\Chapter11\Listing11.06.ImplementingUndoWithAGenericStackClass.cs,Sketch,The following statement contains a magic number: do              {                  // Etch in the direction indicated by the                  // arrow keys that the user enters.                  key = Move();                    switch(key.Key)                  {                      case ConsoleKey.Z:                          // Undo the previous Move.                          if(path.Count >= 1)                          {                              // No cast required                              currentPosition = path.Pop();                              Console.SetCursorPosition(                                  currentPosition.X' currentPosition.Y);                              FillCell(currentPosition' ConsoleColor.Black);                              Undo();                          }                          break;                      case ConsoleKey.DownArrow:                          if(Console.CursorTop < Console.WindowHeight - 2)                          {                              currentPosition = new Cell(                                  Console.CursorLeft' Console.CursorTop + 1);                          }                          // Only type Cell allowed in call to Push().                          path.Push(currentPosition);                          FillCell(currentPosition);                          break;                      case ConsoleKey.UpArrow:                          if(Console.CursorTop > 1)                          {                              currentPosition = new Cell(                                  Console.CursorLeft' Console.CursorTop - 1);                          }                          // Only type Cell allowed in call to Push().                          path.Push(currentPosition);                          FillCell(currentPosition);                          break;                      case ConsoleKey.LeftArrow:                          if(Console.CursorLeft > 1)                          {                              currentPosition = new Cell(                                  Console.CursorLeft - 1' Console.CursorTop);                          }                          // Only type Cell allowed in call to Push().                          path.Push(currentPosition);                          FillCell(currentPosition);                          break;                      case ConsoleKey.RightArrow:                          // SaveState()                          if(Console.CursorLeft < Console.WindowWidth - 2)                          {                              currentPosition = new Cell(                                  Console.CursorLeft + 1' Console.CursorTop);                          }                          // Only type Cell allowed in call to Push().                          path.Push(currentPosition);                          FillCell(currentPosition);                          break;                        default:                          Console.Beep();  // Added in C# 2.0                          break;                  }                }              while(key.Key != ConsoleKey.X);
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter11.Listing11_15,Program,C:\repos\IntelliTect_EssentialCSharp\src\Chapter11\Listing11.15.UsingATypewithMultipleTypeParameters.cs,ChapterMain,The following statement contains a magic number: Pair<int' string> historicalEvent =                  new Pair<int' string>(1914'                      "Shackleton leaves for South Pole on ship Endurance");
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter11.Listing11_36,Program,C:\repos\IntelliTect_EssentialCSharp\src\Chapter11\Listing11.36.SpecifyingTheTypeParameterExplicitly.cs,ChapterMain,The following statement contains a magic number: Console.WriteLine(                  MathEx.Max<int>(7' 490));
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter11.Listing11_36,Program,C:\repos\IntelliTect_EssentialCSharp\src\Chapter11\Listing11.36.SpecifyingTheTypeParameterExplicitly.cs,ChapterMain,The following statement contains a magic number: Console.WriteLine(                  MathEx.Max<int>(7' 490));
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter11.Listing11_37,Program,C:\repos\IntelliTect_EssentialCSharp\src\Chapter11\Listing11.37.InferringTheTypeParameter.cs,ChapterMain,The following statement contains a magic number: Console.WriteLine(                  MathEx.Max(7' 490));
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter11.Listing11_37,Program,C:\repos\IntelliTect_EssentialCSharp\src\Chapter11\Listing11.37.InferringTheTypeParameter.cs,ChapterMain,The following statement contains a magic number: Console.WriteLine(                  MathEx.Max(7' 490));
Magic Number,AddisonWesley.Michaelis.EssentialCSharp.Chapter11.Listing11_38,ConsoleTreeControl,C:\repos\IntelliTect_EssentialCSharp\src\Chapter11\Listing11.38.SpecifyingConstraintsOnGenericMethods.cs,Show,The following statement contains a magic number: Console.WriteLine("\n{0}{1}"'                  "+ --".PadLeft(5 * indent' ' ')'                  tree.Item.ToString());
