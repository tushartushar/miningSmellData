Implementation smell,Namespace,Class,File,Method,Description
Long Method,EssentialsPlugin.ChatHandlers,HandleAdminConceal,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminConceal\HandleAdminConceal.cs,HandleCommand,The method has 94 lines of code.
Long Method,EssentialsPlugin.ChatHandlers,HandleAdminDeleteInactive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteInactive.cs,HandleCommand,The method has 77 lines of code.
Long Method,EssentialsPlugin.ChatHandlers,HandleAdminPlayer,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminPlayer\HandleAdminPlayer.cs,HandleCommand,The method has 79 lines of code.
Long Method,EssentialsPlugin.ChatHandlers,HandleAdminMovePlayerPosition,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMovePlayerPosition.cs,HandleCommand,The method has 70 lines of code.
Long Method,EssentialsPlugin.ChatHandlers,HandleDockUndock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockUndock.cs,HandleCommand,The method has 155 lines of code.
Long Method,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The method has 161 lines of code.
Long Method,EssentialsPlugin.ChatHandlers,HandleAdminScanInactive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanInactive.cs,HandleCommand,The method has 70 lines of code.
Long Method,EssentialsPlugin.ChatHandlers,HandleAdminTurrets,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Admin\HandleAdminTurrets.cs,HandleCommand,The method has 99 lines of code.
Long Method,EssentialsPlugin.ChatHandlers,HandleAdminTest,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Admin\HandleAdminTest.cs,HandleCommand,The method has 97 lines of code.
Long Method,EssentialsPlugin.ChatHandlers,HandleWaypointFactionAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionAdd.cs,HandleCommand,The method has 81 lines of code.
Long Method,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,HandleCommand,The method has 69 lines of code.
Long Method,EssentialsPlugin.ChatHandlers,HandleUtilityGridsList,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Utility\HandleUtilityGridsList.cs,HandleCommand,The method has 64 lines of code.
Long Method,EssentialsPlugin.ChatHandlers,HandleUtilityExportServer,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Utility\HandleUtilityExportServer.cs,HandleCommand,The method has 65 lines of code.
Long Method,EssentialsPlugin,ControlForm,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ControlForm.cs,InitializeComponent,The method has 76 lines of code.
Long Method,EssentialsPlugin,Essentials,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Core.cs,DoInit,The method has 120 lines of code.
Long Method,EssentialsPlugin,Essentials,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Core.cs,HandleHelpCommand,The method has 70 lines of code.
Long Method,EssentialsPlugin,PluginSettings,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Settings\PluginSettings.cs,ReflectObject,The method has 67 lines of code.
Long Method,EssentialsPlugin.EntityManagers,TurretManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\TurretManagement.cs,DoesGridHaveTarget,The method has 170 lines of code.
Long Method,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,CheckAndConcealEntities,The method has 99 lines of code.
Long Method,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,CheckConcealBlockRules,The method has 116 lines of code.
Long Method,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,ConcealEntity,The method has 66 lines of code.
Long Method,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,CheckAndRevealEntities,The method has 60 lines of code.
Long Method,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,CheckRevealBlockRules,The method has 109 lines of code.
Long Method,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,RevealEntity,The method has 63 lines of code.
Long Method,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,ToggleMedbayGrids,The method has 72 lines of code.
Long Method,EssentialsPlugin.ProcessHandler,ProcessBlockEnforcement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessBlockEnforcement.cs,ScanForBlockItems,The method has 71 lines of code.
Long Method,EssentialsPlugin.ProcessHandler,ProcessDockingZone,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessDockingZone.cs,CheckPlayerInDockingZone,The method has 60 lines of code.
Long Method,EssentialsPlugin.ProcessHandler,ProcessSpawnShipTracking,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessSpawnShipTracking.cs,Handle,The method has 60 lines of code.
Long Method,EssentialsPlugin.ProcessHandler,ProcessNewUserTransport,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessNewUserTransport.cs,Handle,The method has 132 lines of code.
Long Method,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,Handle,The method has 68 lines of code.
Long Method,EssentialsPlugin.UtilityClasses,OrientedBoundingBox,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,Intersects,The method has 70 lines of code.
Long Method,EssentialsPlugin.UtilityClasses,OrientedBoundingBox,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,ContainsRelativeBox,The method has 124 lines of code.
Long Method,EssentialsPlugin.UtilityClasses,OrientedBoundingBoxD,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,Intersects,The method has 70 lines of code.
Long Method,EssentialsPlugin.UtilityClasses,OrientedBoundingBoxD,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,ContainsRelativeBox,The method has 124 lines of code.
Long Method,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,GetGridsUnconnected,The method has 68 lines of code.
Long Method,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanCleanup,The method has 202 lines of code.
Long Method,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The method has 505 lines of code.
Long Method,EssentialsPlugin.Utility,DockingZone,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\DockingZone.cs,FindByName,The method has 66 lines of code.
Complex Method,EssentialsPlugin.ChatHandlers,HandleAdminConceal,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminConceal\HandleAdminConceal.cs,HandleCommand,Cyclomatic complexity of the method is 20
Complex Method,EssentialsPlugin.ChatHandlers,HandleAdminDeleteInactive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteInactive.cs,HandleCommand,Cyclomatic complexity of the method is 20
Complex Method,EssentialsPlugin.ChatHandlers,HandleAdminMoveGridTo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveGridTo.cs,HandleCommand,Cyclomatic complexity of the method is 7
Complex Method,EssentialsPlugin.ChatHandlers,HandleAdminPlayer,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminPlayer\HandleAdminPlayer.cs,HandleCommand,Cyclomatic complexity of the method is 11
Complex Method,EssentialsPlugin.ChatHandlers,HandleAdminScanOverlimit,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanOverlimit.cs,HandleCommand,Cyclomatic complexity of the method is 12
Complex Method,EssentialsPlugin.ChatHandlers,HandleAdminDeleteNoBeacon,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteNoBeacon.cs,HandleCommand,Cyclomatic complexity of the method is 9
Complex Method,EssentialsPlugin.ChatHandlers,HandleAdminMovePlayerTo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMovePlayerTo.cs,HandleCommand,Cyclomatic complexity of the method is 7
Complex Method,EssentialsPlugin.ChatHandlers,HandleDockUndock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockUndock.cs,HandleCommand,Cyclomatic complexity of the method is 15
Complex Method,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,Cyclomatic complexity of the method is 22
Complex Method,EssentialsPlugin.ChatHandlers,HandleDockList,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockList.cs,HandleCommand,Cyclomatic complexity of the method is 9
Complex Method,EssentialsPlugin.ChatHandlers,HandleDockValidate,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockValidate.cs,HandleCommand,Cyclomatic complexity of the method is 8
Complex Method,EssentialsPlugin.ChatHandlers,HandleAdminScanInactive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanInactive.cs,HandleCommand,Cyclomatic complexity of the method is 18
Complex Method,EssentialsPlugin.ChatHandlers,HandleAdminTurrets,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Admin\HandleAdminTurrets.cs,HandleCommand,Cyclomatic complexity of the method is 24
Complex Method,EssentialsPlugin.ChatHandlers,HandleAdminScanNoBeacon,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanNoBeacon.cs,HandleCommand,Cyclomatic complexity of the method is 9
Complex Method,EssentialsPlugin.ChatHandlers,HandleWaypointFactionRemove,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionRemove.cs,HandleCommand,Cyclomatic complexity of the method is 9
Complex Method,EssentialsPlugin.ChatHandlers,HandleWaypointFactionAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionAdd.cs,HandleCommand,Cyclomatic complexity of the method is 16
Complex Method,EssentialsPlugin.ChatHandlers,HandleWaypointGroupRemove,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointGroupRemove.cs,HandleCommand,Cyclomatic complexity of the method is 8
Complex Method,EssentialsPlugin.ChatHandlers,HandleWaypointGroupAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointGroupAdd.cs,HandleCommand,Cyclomatic complexity of the method is 8
Complex Method,EssentialsPlugin.ChatHandlers,HandleWaypointList,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointList.cs,HandleCommand,Cyclomatic complexity of the method is 10
Complex Method,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,HandleCommand,Cyclomatic complexity of the method is 12
Complex Method,EssentialsPlugin.ChatHandlers,HandleInfo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\HandleInfo.cs,HandleCommand,Cyclomatic complexity of the method is 7
Complex Method,EssentialsPlugin.ChatHandlers,HandleUtilityGridsList,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Utility\HandleUtilityGridsList.cs,HandleCommand,Cyclomatic complexity of the method is 16
Complex Method,EssentialsPlugin.ChatHandlers,HandleUtilityExportServer,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Utility\HandleUtilityExportServer.cs,HandleCommand,Cyclomatic complexity of the method is 16
Complex Method,EssentialsPlugin,Essentials,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Core.cs,HandleChatMessage,Cyclomatic complexity of the method is 7
Complex Method,EssentialsPlugin,Essentials,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Core.cs,HandleHelpCommand,Cyclomatic complexity of the method is 20
Complex Method,EssentialsPlugin,Essentials,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Core.cs,DisplayAvailableCommands,Cyclomatic complexity of the method is 9
Complex Method,EssentialsPlugin,PluginSettings,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Settings\PluginSettings.cs,GetOrSetSettings,Cyclomatic complexity of the method is 8
Complex Method,EssentialsPlugin,PluginSettings,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Settings\PluginSettings.cs,ReflectObject,Cyclomatic complexity of the method is 20
Complex Method,EssentialsPlugin,PluginSettings,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Settings\PluginSettings.cs,ReflectArray,Cyclomatic complexity of the method is 13
Complex Method,EssentialsPlugin,PluginSettings,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Settings\PluginSettings.cs,ReflectGenericList,Cyclomatic complexity of the method is 10
Complex Method,EssentialsPlugin.EntityManagers,BlockManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\BlockManagement.cs,CheckAndDisableBlocks,Cyclomatic complexity of the method is 12
Complex Method,EssentialsPlugin.EntityManagers,BlockManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\BlockManagement.cs,DisableGrid,Cyclomatic complexity of the method is 8
Complex Method,EssentialsPlugin.EntityManagers,BlockManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\BlockManagement.cs,CheckAndEnableBlocks,Cyclomatic complexity of the method is 13
Complex Method,EssentialsPlugin.EntityManagers,TurretManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\TurretManagement.cs,CheckAndDisableTurrets,Cyclomatic complexity of the method is 7
Complex Method,EssentialsPlugin.EntityManagers,TurretManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\TurretManagement.cs,DisableTurretsWithoutTargets,Cyclomatic complexity of the method is 9
Complex Method,EssentialsPlugin.EntityManagers,TurretManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\TurretManagement.cs,CheckAndEnableTurrets,Cyclomatic complexity of the method is 7
Complex Method,EssentialsPlugin.EntityManagers,TurretManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\TurretManagement.cs,EnableTurretsWithTargets,Cyclomatic complexity of the method is 9
Complex Method,EssentialsPlugin.EntityManagers,TurretManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\TurretManagement.cs,DoesGridHaveTarget,Cyclomatic complexity of the method is 32
Complex Method,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,CheckAndConcealEntities,Cyclomatic complexity of the method is 25
Complex Method,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,CheckConcealBlockRules,Cyclomatic complexity of the method is 20
Complex Method,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,ConcealEntity,Cyclomatic complexity of the method is 7
Complex Method,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,CheckAndRevealEntities,Cyclomatic complexity of the method is 14
Complex Method,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,CheckRevealBlockRules,Cyclomatic complexity of the method is 19
Complex Method,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,ToggleMedbayGrids,Cyclomatic complexity of the method is 17
Complex Method,EssentialsPlugin.GameModes,Conquest,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\GameModes\Conquest.cs,Process,Cyclomatic complexity of the method is 15
Complex Method,EssentialsPlugin.GameModes,Conquest,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\GameModes\Conquest.cs,ProcessAsteroidOwnership,Cyclomatic complexity of the method is 11
Complex Method,EssentialsPlugin.ProcessHandler,ProcessBlockEnforcement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessBlockEnforcement.cs,ScanForBlockItems,Cyclomatic complexity of the method is 17
Complex Method,EssentialsPlugin.ProcessHandler,ProcessCleanup,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessCleanup.cs,ProcessTimedItem,Cyclomatic complexity of the method is 7
Complex Method,EssentialsPlugin.ProcessHandler,ProcessCleanup,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessCleanup.cs,ProcessTriggerItem,Cyclomatic complexity of the method is 9
Complex Method,EssentialsPlugin.ProcessHandler,ProcessDockingZone,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessDockingZone.cs,CheckPlayerInDockingZone,Cyclomatic complexity of the method is 11
Complex Method,EssentialsPlugin.ProcessHandler,ProcessSpawnShipTracking,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessSpawnShipTracking.cs,Handle,Cyclomatic complexity of the method is 13
Complex Method,EssentialsPlugin.ProcessHandler,ProcessCommunication,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessCommunication.cs,AddGlobalRelay,Cyclomatic complexity of the method is 11
Complex Method,EssentialsPlugin.ProcessHandler,ProcessNewUserTransport,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessNewUserTransport.cs,TransportPlayer,Cyclomatic complexity of the method is 8
Complex Method,EssentialsPlugin.ProcessHandler,ProcessNewUserTransport,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessNewUserTransport.cs,MoveEntity,Cyclomatic complexity of the method is 9
Complex Method,EssentialsPlugin.ProcessHandler,ProcessInfo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessInfo.cs,Handle,Cyclomatic complexity of the method is 11
Complex Method,EssentialsPlugin.ProcessHandler,ProcessBackup,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessBackup.cs,Handle,Cyclomatic complexity of the method is 9
Complex Method,EssentialsPlugin.ProcessHandler,ProcessRestart,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessRestart.cs,Handle,Cyclomatic complexity of the method is 9
Complex Method,EssentialsPlugin.UtilityClasses,OrientedBoundingBox,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,Intersects,Cyclomatic complexity of the method is 13
Complex Method,EssentialsPlugin.UtilityClasses,OrientedBoundingBoxD,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,Intersects,Cyclomatic complexity of the method is 13
Complex Method,EssentialsPlugin.Utility,Backup,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Backup.cs,Create,Cyclomatic complexity of the method is 13
Complex Method,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,GetGridsUnconnected,Cyclomatic complexity of the method is 20
Complex Method,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanCleanup,Cyclomatic complexity of the method is 51
Complex Method,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,Cyclomatic complexity of the method is 131
Complex Method,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,IsFullOwner,Cyclomatic complexity of the method is 8
Complex Method,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,GetAllConnectedBlocks,Cyclomatic complexity of the method is 9
Complex Method,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,GetConnectedGridList,Cyclomatic complexity of the method is 15
Complex Method,EssentialsPlugin.Utility,DockingZone,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\DockingZone.cs,GetZonesInGrid,Cyclomatic complexity of the method is 9
Complex Method,EssentialsPlugin.Utility,DockingZone,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\DockingZone.cs,FindByName,Cyclomatic complexity of the method is 13
Complex Method,EssentialsPlugin.Utility,Player,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Player.cs,Move,Cyclomatic complexity of the method is 9
Complex Method,EssentialsPlugin.Utility,Player,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Player.cs,GetEntityMethod,Cyclomatic complexity of the method is 8
Complex Method,EssentialsPlugin.Utility,Player,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Player.cs,GetEntityMethod,Cyclomatic complexity of the method is 8
Complex Method,EssentialsPlugin.Utility,Waypoints,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Waypoints.cs,SendClientWaypoints,Cyclomatic complexity of the method is 12
Complex Method,EssentialsPlugin.Utility,Wrapper,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Wrapper.cs,GetStaticMethod,Cyclomatic complexity of the method is 7
Complex Method,EssentialsPlugin.Utility,Wrapper,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Wrapper.cs,GetStaticMethod,Cyclomatic complexity of the method is 7
Complex Method,EssentialsPlugin.Utility,Wrapper,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Wrapper.cs,GetEntityMethod,Cyclomatic complexity of the method is 8
Complex Method,EssentialsPlugin.Utility,Wrapper,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Wrapper.cs,GetEntityMethod,Cyclomatic complexity of the method is 8
Long Parameter List,EssentialsPlugin,PluginSettings,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Settings\PluginSettings.cs,ReflectObject,The method has 5 parameters.
Long Parameter List,EssentialsPlugin,PluginSettings,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Settings\PluginSettings.cs,ReflectArray,The method has 6 parameters.
Long Parameter List,EssentialsPlugin,PluginSettings,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Settings\PluginSettings.cs,ReflectGenericList,The method has 6 parameters.
Long Parameter List,EssentialsPlugin.Utility,Backup,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Backup.cs,Create,The method has 4 parameters.
Long Parameter List,EssentialsPlugin.Utility,Communication,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Communication.cs,Notification,The method has 4 parameters.
Long Parameter List,EssentialsPlugin.Utility,Communication,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Communication.cs,DisplayDialog,The method has 5 parameters.
Long Parameter List,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,RemoveGridsInSphere,The method has 4 parameters.
Long Parameter List,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,GetAllConnectedBlocks,The method has 4 parameters.
Long Parameter List,EssentialsPlugin.Utility,DockingZone,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\DockingZone.cs,FindByName,The method has 4 parameters.
Long Parameter List,EssentialsPlugin.Utility,Player,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Player.cs,InvokeEntityMethod,The method has 4 parameters.
Long Parameter List,EssentialsPlugin.Utility,Wrapper,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Wrapper.cs,InvokeEntityMethod,The method has 4 parameters.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminReveal,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminConceal\HandleAdminReveal.cs,GetHelp,The length of the statement  "	return "This command allows you to reveal concealed grids.  Usage: /admin reveal (force) - This command without 'force' only shows you how many would be revealed."; " is 164.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminReveal,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminConceal\HandleAdminReveal.cs,HandleCommand,The length of the statement  "			Logging.WriteLineAndConsole ("Conceal"' string.Format ("Force Revealing - Id: {0} -> {4} Display: {1} OwnerId: {2} OwnerName: {3}"' entity.EntityId' entity.DisplayName.Replace ("\r"' "").Replace ("\n"' "")' ownerId' ownerName' builder.EntityId)); " is 246.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminReveal,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminConceal\HandleAdminReveal.cs,HandleCommand,The length of the statement  "		Logging.WriteLineAndConsole (string.Format ("Command would Reveal {0} grids.  Type /admin reveal force to reveal them."' count)); " is 129.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminConceal,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminConceal\HandleAdminConceal.cs,HandleCommand,The length of the statement  "			Communication.SendPrivateInformation (userId' string.Format ("Id: {0} Display: {1} OwnerId: {2} OwnerName: {3} Position: {4}"' entity.EntityId' entity.DisplayName' ownerId' ownerName' General.Vector3DToString (entity.GetPosition ()))); " is 235.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminConceal,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminConceal\HandleAdminConceal.cs,HandleCommand,The length of the statement  "			Communication.SendPrivateInformation (userId' string.Format ("Id: {0} Display: {1} OwnerId: {2} OwnerName: {3} Position: {4} BlockCount: {5}"' entity.EntityId' entity.DisplayName' ownerId' ownerName' General.Vector3DToString (entity.GetPosition ())' slimBlocks.Count)); " is 269.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminConceal,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminConceal\HandleAdminConceal.cs,HandleCommand,The length of the statement  "		Console.WriteLine ("Here: {0} : {1} {2}"' connectedFound.Intersect (entitiesFound).Count ()' entitiesFound.Count' connectedFound.Count); " is 136.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminConceal,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminConceal\HandleAdminConceal.cs,HandleCommand,The length of the statement  "			Communication.SendPrivateInformation (userId' string.Format ("Id: {0} Display: {1} OwnerId: {2} OwnerName: {3} Position: {4} BlockCount: {5} Connections: {6}"' entity.EntityId' entity.DisplayName' ownerId' ownerName' General.Vector3DToString (entity.GetPosition ())' slimBlocks.Count' CubeGrids.GetRecursiveGridList (grid).Count)); " is 331.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminConceal,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminConceal\HandleAdminConceal.cs,HandleCommand,The length of the statement  "			//Communication.SendPrivateInformation(userId' string.Format("Id: {0} Display: {1} OwnerId: {2} OwnerName: {3} Position: {4} BlockCount: {5} Connections: {6}"' entity.EntityId' entity.DisplayName' ownerId' ownerName' General.Vector3DToString(entity.GetPosition())' slimBlocks.Count)); " is 284.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminDeleteInactive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteInactive.cs,GetHelp,The length of the statement  "	return "This command allows you to delete all grids owned by players that are inactive.  Usage: /admin delete inactive [days]"; " is 127.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminDeleteInactive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteInactive.cs,HandleCommand,The length of the statement  "		Communication.SendPrivateInformation (userId' string.Format ("Invalid argument.  Days argument must be an integer that is 0 or greater.")); " is 139.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminDeleteInactive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteInactive.cs,HandleCommand,The length of the statement  "	Communication.SendPrivateInformation (userId' string.Format ("Scanning for grids with owners that haven't logged in {0} days.  (Must Have Login Info={1})"' days' removeNoLoginInformation)); " is 189.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminDeleteInactive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteInactive.cs,HandleCommand,The length of the statement  "		if (PluginSettings.Instance.LoginEntityWhitelist.Length > 0 && PluginSettings.Instance.LoginEntityWhitelist.Contains (grid.EntityId.ToString ())) " is 145.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminDeleteInactive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteInactive.cs,HandleCommand,The length of the statement  "			Communication.SendPrivateInformation (userId' string.Format ("Found entity '{0}' ({1}) not owned by anyone."' gridEntity.Name' entity.EntityId)); " is 145.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminDeleteInactive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteInactive.cs,HandleCommand,The length of the statement  "			if (PluginSettings.Instance.LoginPlayerIdWhitelist.Length > 0 && PluginSettings.Instance.LoginPlayerIdWhitelist.Contains (player.ToString ())) " is 142.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminDeleteInactive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteInactive.cs,HandleCommand,The length of the statement  "				Communication.SendPrivateInformation (userId' string.Format ("Found entity '{0}' ({1}) owned by dead player - ID: {2}"' gridEntity.Name' entity.EntityId' player)); " is 163.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminDeleteInactive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteInactive.cs,HandleCommand,The length of the statement  "					Communication.SendPrivateInformation (userId' string.Format ("Found entity '{0}' ({1}) owned by a player with no login info: {2}"' gridEntity.Name' entity.EntityId' checkItem.Name)); " is 182.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminDeleteInactive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteInactive.cs,HandleCommand,The length of the statement  "				Communication.SendPrivateInformation (userId' string.Format ("Found entity '{0}' ({1}) owned by inactive player: {2}"' gridEntity.Name' entity.EntityId' PlayerMap.Instance.GetPlayerItemFromPlayerId (player).Name)); " is 214.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminDeleteInactive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteInactive.cs,HandleCommand,The length of the statement  "	Communication.SendPrivateInformation (userId' string.Format ("Found {0} grids owned by inactive users"' entitiesFound.Count)); " is 126.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminDeleteInactive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteInactive.cs,HandleCommand,The length of the statement  "	Communication.SendPrivateInformation (userId' string.Format ("Removed {0} grids owned by inactive users"' entitiesFound.Count)); " is 128.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminDeleteCleanup,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteCleanup.cs,GetHelp,The length of the statement  "	return "This command allows you to scan for grids that are considered trash and delete them.  A trash item contains no function or terminal blocks.  Adding function or terminal to the command allows you to omit those search parameters.  Usage: /admin delete cleanup [functional] [terminal]"; " is 291.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminDeleteCleanup,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteCleanup.cs,HandleCommand,The length of the statement  "		Logging.WriteLineAndConsole ("Cleanup"' string.Format ("Cleanup Removed Grid - Id: {0} Display: {1} OwnerId: {2} OwnerName: {3}"' entity.EntityId' entity.DisplayName' ownerId' ownerName)); " is 188.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminDeleteGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteGrids.cs,HandleCommand,The length of the statement  "			Logging.WriteLineAndConsole ("Cleanup"' string.Format ("Cleanup Removed Grid - Id: {0} Display: {1} OwnerId: {2} OwnerName: {3}"' entity.EntityId' entity.DisplayName' ownerId' ownerName)); " is 188.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminMoveGridTo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveGridTo.cs,GetHelp,The length of the statement  "	return "This command allows you to move a grid to a location near another player or grid.  Usage: /admin move grid to [SOURCE_SHIP|STATION] [TARGET_USERNAME] (DISTANCE)"; " is 170.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminMoveGridTo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveGridTo.cs,HandleCommand,The length of the statement  "	Communication.SendPrivateInformation (userId' string.Format ("Moving {0} to within {1}m of {2}.  This may take about 20 seconds."' sourceName' distance' targetName)); " is 166.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminMoveGridTo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveGridTo.cs,HandleCommand,The length of the statement  "	CharacterEntity charEntity = SectorObjectManager.Instance.GetTypedInternalData<CharacterEntity> ().FirstOrDefault (x => x.DisplayName.ToLower () == targetName.ToLower () && x.Health > 0); " is 187.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminMoveGridTo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveGridTo.cs,HandleCommand,The length of the statement  "		CubeGridEntity gridEntity = SectorObjectManager.Instance.GetTypedInternalData<CubeGridEntity> ().FirstOrDefault (x => (x.DisplayName.ToLower ().Contains (targetName.ToLower ()) || x.Name.ToLower ().Contains (targetName.ToLower ())) && !x.IsDisposed); " is 250.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminMoveGridTo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveGridTo.cs,HandleCommand,The length of the statement  "			Communication.SendPrivateInformation (userId' string.Format ("Can not find user or grid with the name: {0}"' targetName)); " is 122.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminMoveGridTo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveGridTo.cs,HandleCommand,The length of the statement  "	CubeGridEntity gridToMove = SectorObjectManager.Instance.GetTypedInternalData<CubeGridEntity> ().FirstOrDefault (x => (x.DisplayName.ToLower ().Contains (sourceName.ToLower ()) || x.Name.ToLower ().Contains (sourceName.ToLower ())) && !x.IsDisposed); " is 250.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminMoveGridTo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveGridTo.cs,HandleCommand,The length of the statement  "		Logging.WriteLineAndConsole (string.Format ("Moving '{0}' from {1} to {2}"' gridToMove.DisplayName' gridToMove.Position' startPosition)); " is 137.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminMoveGridTo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveGridTo.cs,HandleCommand,The length of the statement  "		gridBuilder.PositionAndOrientation = new MyPositionAndOrientation (startPosition' gridBuilder.PositionAndOrientation.Value.Forward' gridBuilder.PositionAndOrientation.Value.Up); " is 177.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminMoveGridTo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveGridTo.cs,HandleCommand,The length of the statement  "	Communication.SendPrivateInformation (userId' string.Format ("Moved {0} to within {1}m of {2}"' sourceName' (int)Math.Round (Vector3D.Distance (startPosition' position))' targetName)); " is 184.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminPlayerCleanup,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminPlayer\HandleAdminPlayerCleanup.cs,HandleCommand,The length of the statement  "	Communication.SendPrivateInformation (userId' string.Format ("Total Players: {0}  Total Owners: {1}"' players.Count' owners.Count)); " is 132.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminPlayer,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminPlayer\HandleAdminPlayer.cs,HandleCommand,The length of the statement  "	Communication.SendPrivateInformation (userId' string.Format ("Users not logged in the last 20 days: {0}"' badPlayers.Count)); " is 125.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminPlayerListInactive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminPlayer\HandleAdminPlayerListInactive.cs,HandleCommand,The length of the statement  "		Communication.SendPrivateInformation (userId' string.Format ("Invalid argument.  Days argument must be an integer that is 0 or greater.")); " is 139.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminPlayerListInactive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminPlayer\HandleAdminPlayerListInactive.cs,HandleCommand,The length of the statement  "	List<PlayerItem> players = Players.Instance.GetPlayers (x => x.LastLogin < DateTime.Now.AddDays (days * -1) && PlayerMap.Instance.GetPlayerIdsFromSteamId (x.SteamId).FirstOrDefault () > 0); " is 189.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminPlayerListInactive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminPlayer\HandleAdminPlayerListInactive.cs,HandleCommand,The length of the statement  "				Communication.SendPrivateInformation (userId' string.Format ("{0} ({1}) last logged in {2}"' item.Name' item.PlayerId' player.LastLogin.ToString ("g"))); " is 153.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminPlayerListInactive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminPlayer\HandleAdminPlayerListInactive.cs,HandleCommand,The length of the statement  "	Communication.SendPrivateInformation (userId' string.Format ("Found {0} players that have not logged in within the last {1} days"' players.Count' days)); " is 153.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminPlayerListActive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminPlayer\HandleAdminPlayerListActive.cs,HandleCommand,The length of the statement  "		Communication.SendPrivateInformation (userId' string.Format ("Invalid argument.  Days argument must be an integer that is 0 or greater.")); " is 139.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminPlayerListActive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminPlayer\HandleAdminPlayerListActive.cs,HandleCommand,The length of the statement  "	List<PlayerItem> players = Players.Instance.GetPlayers (x => x.LastLogin > DateTime.Now.AddDays (days * -1) && PlayerMap.Instance.GetPlayerIdsFromSteamId (x.SteamId).FirstOrDefault () > 0); " is 189.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminPlayerListActive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminPlayer\HandleAdminPlayerListActive.cs,HandleCommand,The length of the statement  "				Communication.SendPrivateInformation (userId' string.Format ("{0} ({1}) last logged in {2}"' item.Name' item.PlayerId' player.LastLogin.ToString ("g"))); " is 153.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminPlayerListActive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminPlayer\HandleAdminPlayerListActive.cs,HandleCommand,The length of the statement  "	Communication.SendPrivateInformation (userId' string.Format ("Found {0} players that have logged in within the last {1} days"' players.Count' days)); " is 149.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminScanEntityId,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanEntityId.cs,GetHelp,The length of the statement  "	return "This command allows you to scan a grid by EntityId and get it's display name and Extender name.  Usage: /admin scan entityid <entityId>"; " is 145.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminScanEntityId,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanEntityId.cs,HandleCommand,The length of the statement  "	Communication.SendPrivateInformation (userId' string.Format ("Entity {0} DisplayName: {1} FullName: {2}"' entityId' entity.DisplayName' entity.Name)); " is 150.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminScanOverlimit,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanOverlimit.cs,HandleCommand,The length of the statement  "	Communication.SendPrivateInformation (userId' string.Format ("Looking for grids that contain more than {0} of type {1}"' blockCount' blockType)); " is 145.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminScanOverlimit,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanOverlimit.cs,HandleCommand,The length of the statement  "			Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) owned by '{5}' which has more than {3} blocks of type {4}.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count' blockCount' blockType' grid.BigOwners.Count > 0 ? PlayerMap.Instance.GetPlayerItemFromPlayerId (grid.BigOwners.First ()).Name : "No one")); " is 411.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminScanOverlimit,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanOverlimit.cs,HandleCommand,The length of the statement  "			 */Communication.SendPrivateInformation (userId' string.Format ("Found {0} grids considered to be overlimit"' entitiesFound.Count)); " is 131.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminDeleteNoBeacon,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteNoBeacon.cs,GetHelp,The length of the statement  "	return "This command allows you to delete all stations from an area defined by x' y' z' and radius.  Usage: /admin delete ships area [X] [Y] [Z] [RADIUS]"; " is 155.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminDeleteNoBeacon,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteNoBeacon.cs,HandleCommand,The length of the statement  "		Communication.SendPrivateInformation (userId' string.Format ("Found entity '{0}' ({1}) at {2} with no beacon."' gridEntity.Name' entity.EntityId' General.Vector3DToString (entity.GetPosition ()))); " is 197.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminDeleteNoBeacon,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteNoBeacon.cs,HandleCommand,The length of the statement  "	Communication.SendPrivateInformation (userId' string.Format ("Removed {0} grids with no beacons"' entitiesFound.Count)); " is 120.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminDeleteStationsArea,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteStationsArea.cs,GetHelp,The length of the statement  "	return "This command allows you to delete all stations from an area defined by x' y' z' and radius.  Usage: /admin delete ships area [X] [Y] [Z] [RADIUS]"; " is 155.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminDeleteStationsArea,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteStationsArea.cs,HandleCommand,The length of the statement  "			Communication.SendPrivateInformation (userId' string.Format ("The value at position {0} - '{1}' is invalid.  Please try the command again."' r + 1' words [r])); " is 160.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminDeleteShipsArea,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteShipsArea.cs,GetHelp,The length of the statement  "	return "This command allows you to delete all ships from an area defined by x' y' z' and radius.  Usage: /admin delete ships area [X] [Y] [Z] [RADIUS]"; " is 152.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminDeleteShipsArea,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteShipsArea.cs,HandleCommand,The length of the statement  "			Communication.SendPrivateInformation (userId' string.Format ("The value at position {0} - '{1}' is invalid.  Please try the command again."' r + 1' words [r])); " is 160.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminMovePlayerTo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMovePlayerTo.cs,GetHelp,The length of the statement  "	return "This command allows you to move a player to a location near another player.  Usage: /admin move player to [SOURCE_USERNAME] [TARGET_USERNAME|TARGET_SHIPNAME] (DISTANCE)"; " is 178.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminMovePlayerTo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMovePlayerTo.cs,HandleCommand,The length of the statement  "			Communication.SendPrivateInformation (userId' string.Format ("Can not find user or grid with the name: {0}"' targetName)); " is 122.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminMovePlayerTo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMovePlayerTo.cs,HandleCommand,The length of the statement  "	Communication.SendPrivateInformation (userId' string.Format ("Trying to move {0} to within {1}m of {2}.  This may take about 20 seconds."' sourceName' distance' targetName)); " is 174.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminMovePlayerTo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMovePlayerTo.cs,HandleCommand,The length of the statement  "		Communication.SendPrivateInformation (userId' string.Format ("Can not move user: {0} (Is user in a cockpit or not in game?)"' sourceName)); " is 139.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminMovePlayerTo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMovePlayerTo.cs,HandleCommand,The length of the statement  "	Communication.SendPrivateInformation (userId' string.Format ("Moved {0} to within {1}m of {2}"' sourceName' (int)Math.Round (Vector3D.Distance (startPosition' position))' targetName)); " is 184.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminMovePlayerPosition,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMovePlayerPosition.cs,GetHelp,The length of the statement  "	return "This command allows you to move a player to another location.  Usage: /admin move player position [USERNAME] [X] [Y] [Z]"; " is 130.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminMovePlayerPosition,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMovePlayerPosition.cs,HandleCommand,The length of the statement  "			Communication.SendPrivateInformation (userId' string.Format ("The value at position {0} - '{1}' is invalid.  Please try the command again."' r + 1' words [r])); " is 160.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminMovePlayerPosition,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMovePlayerPosition.cs,HandleCommand,The length of the statement  "			CharacterEntity charEntity = SectorObjectManager.Instance.GetTypedInternalData<CharacterEntity>().Where(x => x.DisplayName.ToLower() == userName.ToLower() && x.Health > 0).First();" is 180.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminMovePlayerPosition,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMovePlayerPosition.cs,HandleCommand,The length of the statement  "				Type someManager = SandboxGameAssemblyWrapper.Instance.GetAssemblyType(SectorObjectManager.EntityBaseNetManagerNamespace' SectorObjectManager.EntityBaseNetManagerClass);" is 169.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminMovePlayerPosition,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMovePlayerPosition.cs,HandleCommand,The length of the statement  "				Wrapper.InvokeStaticMethod(someManager' SectorObjectManager.EntityBaseNetManagerSendEntity' new object[] { entity.GetObjectBuilder() });" is 136.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminMoveAreaTowards,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveAreaTowards.cs,GetHelp,The length of the statement  "	return "This command allows you to move ships and stations from one area towards another area.  Usage: /admin move area towards [SX] [SY] [SZ] [TX] [TY] [TZ] [DISTANCE] [RADIUS] where S is source and T is the target area you want to move towards.  Distance is the amount of meters you'd like to move towards the target point."; " is 327.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminMoveAreaTowards,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveAreaTowards.cs,HandleCommand,The length of the statement  "			Communication.SendPrivateInformation (userId' string.Format ("The value at position {0} - '{1}' is invalid.  Please try the command again."' r + 1' words [r])); " is 160.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminMoveAreaTowards,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveAreaTowards.cs,HandleCommand,The length of the statement  "	Communication.SendPrivateInformation (userId' string.Format ("Moving all grids in a radius of {0} near {1} towards {2} by {3} meters"' radius' General.Vector3DToString (startPosition)' General.Vector3DToString (targetPosition)' distance)); " is 239.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminMoveAreaTowards,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveAreaTowards.cs,HandleCommand,The length of the statement  "			Communication.SendPrivateInformation (userId' string.Format ("Moving '{0}' from {1} to {2}"' entity.DisplayName' General.Vector3DToString (entity.GetPosition ())' General.Vector3DToString (entity.GetPosition () + finalPosition))); " is 230.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminMoveAreaTowards,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveAreaTowards.cs,HandleCommand,The length of the statement  "			grid.PositionAndOrientation = new MyPositionAndOrientation (grid.PositionAndOrientation.Value.Position + finalPosition' grid.PositionAndOrientation.Value.Forward' grid.PositionAndOrientation.Value.Up); " is 201.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminScanAreaTowards,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanAreaTowards.cs,GetHelp,The length of the statement  "	return "This command allows you to scan a section of space for grids in relation to another spot in space.  It will start at (SX' SY' SZ) and move towards (TX' TY' TZ) at a set distance of (DISTANCE) and then scan a radius of (RADIUS).  Usage: /admin scan area towards [SX] [SY] [SZ] [TX] [TY] [TZ] [DISTANCE] [RADIUS]"; " is 320.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminScanAreaTowards,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanAreaTowards.cs,HandleCommand,The length of the statement  "			Communication.SendPrivateInformation (userId' string.Format ("The value at position {0} - '{1}' is invalid.  Please try the command again."' r + 1' words [r])); " is 160.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminScanAreaTowards,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanAreaTowards.cs,HandleCommand,The length of the statement  "	Communication.SendPrivateInformation (userId' string.Format ("Scanning {0} meters around {1}"' radius' General.Vector3DToString (finalPosition))); " is 146.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminScanAreaTowards,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanAreaTowards.cs,HandleCommand,The length of the statement  "			Communication.SendPrivateInformation (userId' string.Format ("Found ship {0} at {1}"' entity.DisplayName' General.Vector3DToString (entity.GetPosition ()))); " is 157.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminUndockAll,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleAdminUndockAll.cs,GetHelp,The length of the statement  "	return "This command allows you to undock all ships from all docks.  It tries to find a safe spot for the ship.  Usage: /admin undock all"; " is 139.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminUndockAll,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleAdminUndockAll.cs,HandleCommand,The length of the statement  "			string dockedShipFileName = Essentials.PluginPath + String.Format ("\\Docking\\docked_{0}_{1}_{2}.sbc"' dockingItem.PlayerId' dockingItem.TargetEntityId' dockingItem.DockedEntityId); " is 182.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminUndockAll,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleAdminUndockAll.cs,HandleCommand,The length of the statement  "				Logging.WriteLineAndConsole (string.Format ("Unable to find parent '{0}' for '{1}' - '{2}'"' dockingItem.TargetEntityId' dockingItem.DockedEntityId' dockingItem.DockedName)); " is 174.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminUndockAll,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleAdminUndockAll.cs,HandleCommand,The length of the statement  "			MyObjectBuilder_CubeGrid cubeGrid = BaseObjectManager.ReadSpaceEngineersFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer> (dockedShipFileName); " is 160.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminUndockAll,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleAdminUndockAll.cs,HandleCommand,The length of the statement  "				cubeGrid.PositionAndOrientation = new MyPositionAndOrientation (Matrix.CreateFromQuaternion (Quaternion.CreateFromRotationMatrix (entity.Physics.GetWorldMatrix ().GetOrientation ()) * dockingItem.SaveQuat).GetOrientation ()); " is 225.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminUndockAll,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleAdminUndockAll.cs,HandleCommand,The length of the statement  "				cubeGrid.PositionAndOrientation = new MyPositionAndOrientation (MathUtility.RandomPositionFromPoint (entity.GetPosition ()' 250f)' cubeGrid.PositionAndOrientation.Value.Forward' cubeGrid.PositionAndOrientation.Value.Up); " is 220.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminUndockAll,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleAdminUndockAll.cs,HandleCommand,The length of the statement  "				cubeGrid.PositionAndOrientation = new MyPositionAndOrientation (MathUtility.RandomPositionFromPoint (cubeGrid.PositionAndOrientation.Value.Position' 500f)' cubeGrid.PositionAndOrientation.Value.Forward' cubeGrid.PositionAndOrientation.Value.Up); " is 245.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminUndockAll,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleAdminUndockAll.cs,HandleCommand,The length of the statement  "			Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' has been undocked from docking zone"' dockingItem.DockedName)); " is 140.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockUndock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockUndock.cs,HandleCommand,The length of the statement  "					Communication.SendPrivateInformation (userId' string.Format ("You do not have permission to use '{0}'.  You must either own all the beacons or they must be shared with faction."' pylonName)); " is 191.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockUndock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockUndock.cs,HandleCommand,The length of the statement  "			List<DockingItem> dockingItems = Docking.Instance.Find (d => d.PlayerId == ownerId && d.TargetEntityId == parent.EntityId && d.DockingBeaconIds.Intersect (beaconListIds).Count () == 4); " is 185.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockUndock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockUndock.cs,HandleCommand,The length of the statement  "				Communication.SendPrivateInformation (userId' string.Format ("You have no ships docked in docking zone '{0}'."' pylonName)); " is 124.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockUndock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockUndock.cs,HandleCommand,The length of the statement  "							Communication.SendPrivateInformation (userId' string.Format ("Carrier ship has a pilot.  The carrier should be unpiloted and fully stopped before undocking.  (Sometimes this can lag a bit.  Wait 10 seconds and try again)"' pylonName)); " is 235.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockUndock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockUndock.cs,HandleCommand,The length of the statement  "			String dockedShipFileName = Essentials.PluginPath + String.Format ("\\Docking\\docked_{0}_{1}_{2}.sbc"' ownerId' dockingItem.TargetEntityId' dockingItem.DockedEntityId); " is 169.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockUndock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockUndock.cs,HandleCommand,The length of the statement  "			MyObjectBuilder_CubeGrid cubeGrid = BaseObjectManager.ReadSpaceEngineersFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer> (dockedShipFileName); " is 160.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockUndock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockUndock.cs,HandleCommand,The length of the statement  "			cubeGrid.PositionAndOrientation = new MyPositionAndOrientation (Matrix.CreateFromQuaternion (Quaternion.CreateFromRotationMatrix (parent.Physics.GetWorldMatrix ().GetOrientation ()) * dockingItem.SaveQuat).GetOrientation ()); " is 225.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockUndock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockUndock.cs,HandleCommand,The length of the statement  "			cubeGrid.PositionAndOrientation = new MyPositionAndOrientation (rotatedPos + parent.GetPosition ()' cubeGrid.PositionAndOrientation.Value.Forward' cubeGrid.PositionAndOrientation.Value.Up); " is 189.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockUndock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockUndock.cs,HandleCommand,The length of the statement  "			Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' has been undocked from docking zone '{1}'"' dockingItem.DockedName' pylonName)); " is 157.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockUndock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockUndock.cs,HandleCommand,The length of the statement  "					// We need to update again' as this doesn't seem to sync properly?  I set world matrix' and setposition' and it doesn't go where it should' and I" is 145.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockUndock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockUndock.cs,HandleCommand,The length of the statement  "					Communication.SendPrivateInformation(userId' string.Format("The ship '{0}' has been undocked from docking zone '{1}'"' gridEntity.DisplayName' pylonName));" is 155.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockUndock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockUndock.cs,HandleCommand,The length of the statement  "			Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName)); " is 213.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockUndock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockUndock.cs,HandleCommand,The length of the statement  "			Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'.  There must be 4 beacons with the name '{0}' to create a docking zone.  Beacons must be fully built!"' pylonName)); " is 212.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The length of the statement  "					Communication.Message(String.Format("The docking zone '{0}' is on cooldown.  Please wait a {1} seconds before trying to dock/undock again."' pylonName' Math.Max(0' timeLeft)));" is 176.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The length of the statement  "					Communication.SendPrivateInformation (userId' string.Format ("You do not have permission to use '{0}'.  You must either own all the beacons or they must be shared with faction."' pylonName)); " is 191.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The length of the statement  "				Communication.SendPrivateInformation (userId' string.Format ("The docking zone '{0}' intersects with docking zone '{1}'.  Make sure you place your docking zones so they don't overlap."' pylonName' testList.ElementAt (intersectElement).Key)); " is 241.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The length of the statement  "			List<DockingItem> checkItems = Docking.Instance.Find (d => d.PlayerId == ownerId && d.TargetEntityId == parent.EntityId && d.DockingBeaconIds.Intersect (beaconListIds).Count () == 4); " is 183.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The length of the statement  "				Communication.SendPrivateInformation (userId' string.Format ("Docking zone already '{0}' already contains the maximum capacity of ships."' pylonName)); " is 151.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The length of the statement  "					Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is too large for it's carrier.  The ship's bounding box must fit inside the docking zone bounding box!"' dockingEntity.DisplayName)); " is 210.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The length of the statement  "					Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is not fully inside the docking zone '{1}'.  Make sure the ship is fully contained inside the docking zone"' dockingEntity.DisplayName' pylonName)); " is 225.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The length of the statement  "					Communication.SendPrivateInformation (userId' string.Format ("The ship you're trying to dock is too heavy for it's carrier.  The ship mass must be less than half the large ship / stations mass! (DM={0}kg CM={1}kg)"' dockingMass' parentMass)); " is 242.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The length of the statement  "				dockingEntity.GetBlocks (blocks' x => x.FatBlock != null && x.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_Cockpit)); " is 130.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The length of the statement  "						Communication.SendPrivateInformation (userId' string.Format ("Ship in docking zone '{0}' has a pilot!  Please exit the ship before trying to dock.  (Sometimes this can lag a bit.  Wait 10 seconds and try again)"' pylonName)); " is 225.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The length of the statement  "				Vector3D savePos = Vector3D.Transform (dockingEntity.GetPosition () - parent.GetPosition ()' Quaternion.Inverse (saveQuat)); " is 124.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The length of the statement  "				saveQuat = Quaternion.Inverse (saveQuat) * Quaternion.CreateFromRotationMatrix (dockingEntity.WorldMatrix.GetOrientation ()); " is 125.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The length of the statement  "				FileInfo info = new FileInfo (Essentials.PluginPath + String.Format ("\\Docking\\docked_{0}_{1}_{2}.sbc"' ownerId' parent.EntityId' dockingEntity.EntityId)); " is 157.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The length of the statement  "				//CubeGridEntity dockingGrid = new CubeGridEntity((MyObjectBuilder_CubeGrid)dockingEntity.GetObjectBuilder()' dockingEntity); " is 125.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The length of the statement  "					Communication.SendPrivateInformation (userId' string.Format ("Failed to load entity for export: {0}"' dockingEntity.DisplayName)); " is 130.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The length of the statement  "				BaseObjectManager.WriteSpaceEngineersFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer> (gridBuilder' info.FullName); " is 133.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The length of the statement  "				Communication.SendPrivateInformation (userId' string.Format ("Docked ship '{0}' in docking zone '{1}'."' dockItem.DockedName' pylonName)); " is 138.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The length of the statement  "			Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName)); " is 213.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The length of the statement  "			Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'.  There must be 4 beacons with the name '{0}' to create a docking zone.  Beacons must be fully built!"' pylonName)); " is 212.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockList,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockList.cs,HandleCommand,The length of the statement  "				Communication.SendPrivateInformation (userId' string.Format ("You do not have permission to use '{0}'.  You must either own all the beacons or they must be shared with faction."' pylonName)); " is 191.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockList,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockList.cs,HandleCommand,The length of the statement  "		List<DockingItem> dockingItems = Docking.Instance.Find (d => d.PlayerId == ownerId && d.TargetEntityId == parent.EntityId && d.DockingBeaconIds.Intersect (beaconListIds).Count () == 4); " is 185.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockList,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockList.cs,HandleCommand,The length of the statement  "			Communication.SendPrivateInformation (userId' string.Format ("You have {1} ship(s) docked in docking zone '{0}':"' pylonName' dockingItems.Count)); " is 147.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockList,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockList.cs,HandleCommand,The length of the statement  "				Communication.SendPrivateInformation (userId' string.Format ("Docked ship: {0} ({1})"' item.DockedName' item.DockedEntityId)); " is 126.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockList,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockList.cs,HandleCommand,The length of the statement  "		Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName)); " is 213.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockValidate,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockValidate.cs,HandleCommand,The length of the statement  "				Communication.SendPrivateInformation (userId' string.Format ("You do not have permission to use '{0}'.  You must either own all the beacons or they must be shared with faction."' pylonName)); " is 191.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockValidate,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockValidate.cs,HandleCommand,The length of the statement  "			Communication.SendPrivateInformation (userId' string.Format ("The docking zone '{0}' intersects with docking zone '{1}'.  Make sure you place your docking zones so they don't overlap."' pylonName' testList.ElementAt (intersectElement).Key)); " is 241.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockValidate,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockValidate.cs,HandleCommand,The length of the statement  "		Communication.SendPrivateInformation (userId' string.Format ("The docking zone '{0}' appears to be a valid docking zone."' pylonName)); " is 135.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockValidate,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockValidate.cs,HandleCommand,The length of the statement  "		Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName)); " is 213.
Long Statement,EssentialsPlugin.ChatHandlers,HandleDockValidate,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockValidate.cs,HandleCommand,The length of the statement  "		Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'.  There must be 4 beacons with the name '{0}' to create a docking zone.  Beacons must be fully built!"' pylonName)); " is 212.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminBackup,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Admin\HandleAdminBackup.cs,HandleCommand,The length of the statement  "	Backup.Create (PluginSettings.Instance.BackupBaseDirectory' PluginSettings.Instance.BackupCreateSubDirectories' PluginSettings.Instance.BackupAsteroids' PluginSettings.Instance.BackupEssentials); " is 195.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminOwnershipChange,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Admin\HandleAdminOwnershipChange.cs,GetHelp,The length of the statement  "	return "This command allows you to change the ownership of a ship.  Usage: /admin ownership change <entityId> <PlayerName>"; " is 124.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminOwnershipChange,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Admin\HandleAdminOwnershipChange.cs,HandleCommand,The length of the statement  "	long playerId = PlayerMap.Instance.GetPlayerIdsFromSteamId (PlayerMap.Instance.GetSteamIdFromPlayerName (name' true)).First (); " is 127.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminScanInactive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanInactive.cs,GetHelp,The length of the statement  "	return "This command allows you to scan for grids owned by inactive players.  Usage: /admin scan inactive [days] (ignorenologin) (ignoreownerless)"; " is 148.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminScanInactive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanInactive.cs,HandleCommand,The length of the statement  "		Communication.SendPrivateInformation (userId' string.Format ("Invalid argument.  Days argument must be an integer that is 0 or greater.")); " is 139.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminScanInactive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanInactive.cs,HandleCommand,The length of the statement  "	Communication.SendPrivateInformation (userId' string.Format ("Scanning for grids with owners that haven't logged in {0} days.  (Must Have Login Info={1})"' days' removeNoLoginInformation)); " is 189.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminScanInactive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanInactive.cs,HandleCommand,The length of the statement  "		if (PluginSettings.Instance.LoginEntityWhitelist.Length > 0 && PluginSettings.Instance.LoginEntityWhitelist.Contains (grid.EntityId.ToString ())) " is 145.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminScanInactive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanInactive.cs,HandleCommand,The length of the statement  "			Communication.SendPrivateInformation (userId' string.Format ("Found entity '{0}' ({1}) not owned by anyone."' gridEntity.Name' entity.EntityId)); " is 145.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminScanInactive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanInactive.cs,HandleCommand,The length of the statement  "			if (PluginSettings.Instance.LoginPlayerIdWhitelist.Length > 0 && PluginSettings.Instance.LoginPlayerIdWhitelist.Contains (player.ToString ())) " is 142.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminScanInactive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanInactive.cs,HandleCommand,The length of the statement  "				Communication.SendPrivateInformation (userId' string.Format ("Found entity '{0}' ({1}) owned by dead player - ID: {2}"' gridEntity.Name' entity.EntityId' player)); " is 163.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminScanInactive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanInactive.cs,HandleCommand,The length of the statement  "					Communication.SendPrivateInformation (userId' string.Format ("Found entity '{0}' ({1}) owned by a player with no login info: {2}"' gridEntity.Name' entity.EntityId' checkItem.Name)); " is 182.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminScanInactive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanInactive.cs,HandleCommand,The length of the statement  "				Communication.SendPrivateInformation (userId' string.Format ("Found entity '{0}' ({1}) owned by inactive player: {2}"' gridEntity.Name' entity.EntityId' PlayerMap.Instance.GetPlayerItemFromPlayerId (player).Name)); " is 214.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminScanInactive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanInactive.cs,HandleCommand,The length of the statement  "	Communication.SendPrivateInformation (userId' string.Format ("Found {0} grids owned by inactive users"' entitiesFound.Count)); " is 126.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminRestart,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Admin\HandleAdminRestart.cs,HandleCommand,The length of the statement  "	Communication.SendPublicInformation (string.Format ("[NOTICE]: The administrator is forcing a restart to occur in {0} minute(s)."' minutes)); " is 141.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminMemory,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Admin\HandleAdminMemory.cs,HandleCommand,The length of the statement  "	Communication.SendPrivateInformation (userId' string.Format ("Essential Memory Usage: {0}"' GC.GetTotalMemory (false))); " is 120.
Long Statement,EssentialsPlugin.ChatHandlers,HandleLastSeen,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\HandleLastSeen.cs,HandleCommand,The length of the statement  "		Communication.SendPrivateInformation (userId' string.Format ("Player '{0}' last seen: {1}"' PlayerMap.Instance.GetPlayerItemFromPlayerId (playerId).Name' item.LastLogin.ToString ("g"))); " is 186.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminTurrets,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Admin\HandleAdminTurrets.cs,HandleCommand,The length of the statement  "			if (block.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_InteriorTurret) || block.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_LargeGatlingTurret) || block.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_LargeMissileTurret)) { " is 260.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminTurrets,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Admin\HandleAdminTurrets.cs,HandleCommand,The length of the statement  "								if (block.FatBlock.GetUserRelationToOwner (owner) == Sandbox.Common.MyRelationsBetweenPlayerAndBlock.Enemies || block.FatBlock.GetUserRelationToOwner (owner) == Sandbox.Common.MyRelationsBetweenPlayerAndBlock.Neutral) { " is 219.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminTurrets,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Admin\HandleAdminTurrets.cs,HandleCommand,The length of the statement  "								if (block.FatBlock.GetUserRelationToOwner (playerId) == Sandbox.Common.MyRelationsBetweenPlayerAndBlock.Enemies || block.FatBlock.GetUserRelationToOwner (playerId) == Sandbox.Common.MyRelationsBetweenPlayerAndBlock.Neutral) { " is 225.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminTurrets,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Admin\HandleAdminTurrets.cs,HandleCommand,The length of the statement  "	Communication.SendPrivateInformation (userId' string.Format ("{0} turrets.  {1} on' {2} off.  {3} keepon ({4} ms)"' count' enabled' disabled' keepOn' (DateTime.Now - start).TotalMilliseconds)); " is 193.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminNotify,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Admin\HandleAdminNotify.cs,HandleCommand,The length of the statement  "		Communication.SendPrivateInformation (userId' string.Format ("Invalid colour value entered.  {0} is nto a valid value.  Please enter one of the following: {1}"' colour' GetFontList ())); " is 186.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminNotify,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Admin\HandleAdminNotify.cs,HandleCommand,The length of the statement  "		Communication.SendPrivateInformation (userId' string.Format ("Invalid time value entered.  {0} is not a valid value.  Please enter a value above 0")); " is 150.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminDeleteGridsArea,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteGridsArea.cs,GetHelp,The length of the statement  "	return "This command allows you to delete all grids from an area defined by x' y' z' and radius.  Usage: /admin delete grids area [X] [Y] [Z] [RADIUS]"; " is 152.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminDeleteGridsArea,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteGridsArea.cs,HandleCommand,The length of the statement  "			Communication.SendPrivateInformation (userId' string.Format ("The value at position {0} - '{1}' is invalid.  Please try the command again."' r + 1' words [r])); " is 160.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminScanNoBeacon,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanNoBeacon.cs,GetHelp,The length of the statement  "	return "This command allows you to scan all grids that do not have beacons.  Takes into account if a grid is connected to other grids.  Usage: /admin scan nobeacon"; " is 165.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminScanNoBeacon,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanNoBeacon.cs,HandleCommand,The length of the statement  "			Communication.SendPrivateInformation (userId' string.Format ("Found entity '{0}' ({1}) at {2} with no beacon."' gridEntity.Name' gridEntity.EntityId' General.Vector3DToString (entity.GetPosition ()))); " is 201.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminScanAreaAt,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanAreaAt.cs,GetHelp,The length of the statement  "	return "This command allows you to scan a section of space for grids.  Usage: /admin scan area at [X] [Y] [Z] [RADIUS]"; " is 120.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminScanAreaAt,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanAreaAt.cs,HandleCommand,The length of the statement  "			Communication.SendPrivateInformation (userId' string.Format ("The value at position {0} - '{1}' is invalid.  Please try the command again."' r + 1' words [r])); " is 160.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminScanAreaAt,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanAreaAt.cs,HandleCommand,The length of the statement  "			Communication.SendPrivateInformation (userId' string.Format ("Found ship '{0}' ({1}) at {2}"' entity.DisplayName' entity.EntityId' General.Vector3DToString (entity.GetPosition ()))); " is 182.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminMoveAreaToPosition,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveAreaToPosition.cs,GetHelp,The length of the statement  "	return "This command allows you to move ships and stations from one area to another.  Usage: /admin move area to position [SX] [SY] [SZ] [MX] [MY] [MZ] [RADIUS] where S is source and M is move amount which can positive or negative."; " is 233.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminMoveAreaToPosition,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveAreaToPosition.cs,HandleCommand,The length of the statement  "			Communication.SendPrivateInformation (userId' string.Format ("The value at position {0} - '{1}' is invalid.  Please try the command again."' r + 1' words [r])); " is 160.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminMoveAreaToPosition,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveAreaToPosition.cs,HandleCommand,The length of the statement  "	Communication.SendPrivateInformation (userId' string.Format ("Moving all grids in a radius of {0} near {1} to {2}"' radius' General.Vector3DToString (startPosition)' General.Vector3DToString (movePosition))); " is 208.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminMoveAreaToPosition,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveAreaToPosition.cs,HandleCommand,The length of the statement  "		Communication.SendPrivateInformation (userId' string.Format ("Moving '{0}' from {1} to {2}"' entity.DisplayName' General.Vector3DToString (entity.GetPosition ())' General.Vector3DToString (entity.GetPosition () + difference))); " is 227.
Long Statement,EssentialsPlugin.ChatHandlers,HandleAdminMoveAreaToPosition,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveAreaToPosition.cs,HandleCommand,The length of the statement  "			grid.PositionAndOrientation = new MyPositionAndOrientation (grid.PositionAndOrientation.Value.Position + difference' grid.PositionAndOrientation.Value.Forward' grid.PositionAndOrientation.Value.Up); " is 198.
Long Statement,EssentialsPlugin.ChatHandlers,HandleMotd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\HandleMotd.cs,HandleCommand,The length of the statement  "	Communication.SendClientMessage (userId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText)); " is 350.
Long Statement,EssentialsPlugin.ChatHandlers,HandleUtilityGridsCompare,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Utility\HandleUtilityGridsCompare.cs,HandleCommand,The length of the statement  "	Communication.SendClientMessage (userId' string.Format ("/conceal {0}"' string.Join ("'"' entityList.Select (x => x.ToString ()).ToArray ()))); " is 143.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointFactionRemove,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionRemove.cs,GetHelp,The length of the statement  "	return "Removes a faction waypoint.  If a leader created the waypoint' only a leader can remove it.  Usage: /waypoint factionremove \"name\""; " is 142.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointFactionRemove,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionRemove.cs,HandleCommand,The length of the statement  "		Communication.SendPrivateInformation (userId' string.Format ("Unable to find your faction information.  You must be in a faction to use this.")); " is 145.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointFactionRemove,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionRemove.cs,HandleCommand,The length of the statement  "		Communication.SendPrivateInformation (userId' string.Format ("You do not have a faction waypoint with the name: {0}"' splits [0])); " is 131.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointFactionRemove,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionRemove.cs,HandleCommand,The length of the statement  "		Communication.SendPrivateInformation (userId' string.Format ("You must be a faction leader to remove the waypoint: {0}"' splits [0])); " is 134.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointFactionRemove,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionRemove.cs,HandleCommand,The length of the statement  "	Communication.SendFactionClientMessage (userId' string.Format ("/message Server {0} has removed the waypoint: {1}"' playerName' remove)); " is 137.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointFactionAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionAdd.cs,GetHelp,The length of the statement  "	return "Creates a faction waypoint.  Only your faction can see it.\r\nUsage: /waypoint factionadd \"waypoint name\" \"waypoint text\" Neutral | Allied | Enemy X Y Z (group name)\r\nExampleA: /waypoint factionadd MyWayPoint MyWaypoint Neutral 1000 1000 1000\r\nExampleB: /waypoint factionadd target\r\nExampleC: /waypoint factionadd Target1 Target1 Enemy 1000 1000 1000 Targets"; " is 378.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointFactionAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionAdd.cs,HandleCommand,The length of the statement  "		Communication.SendPrivateInformation (userId' string.Format ("Unable to find your faction information.  You must be in a faction to use this.")); " is 145.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointFactionAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionAdd.cs,HandleCommand,The length of the statement  "	if (PluginSettings.Instance.WaypointsMaxPerFaction > 0 && items.Count >= PluginSettings.Instance.WaypointsMaxPerFaction) { " is 122.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointFactionAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionAdd.cs,HandleCommand,The length of the statement  "		Communication.SendPrivateInformation (userId' string.Format ("Waypoint limit has been reached.  You may only have {0} faction waypoints at a time on this server.  Please remove some waypoints in order to add new ones."' PluginSettings.Instance.WaypointsMaxPerPlayer)); " is 268.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointFactionAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionAdd.cs,HandleCommand,The length of the statement  "				Communication.SendClientMessage (steamId' string.Format ("/waypoint add \"{0}\" \"{0}\" Neutral {1} {2} {3}"' name' Math.Floor (pos.X)' Math.Floor (pos.Y)' Math.Floor (pos.Z))); " is 177.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointFactionAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionAdd.cs,HandleCommand,The length of the statement  "		Communication.SendFactionClientMessage (userId' string.Format ("/message Server {2} has added the waypoint: {0} at {1} by {2}"' item.Name' General.Vector3DToString (item.Position)' playerName)); " is 194.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointFactionAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionAdd.cs,HandleCommand,The length of the statement  "				Communication.SendPrivateInformation (userId' string.Format ("Invalid position information: {0} is invalid"' splits [r])); " is 122.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointFactionAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionAdd.cs,HandleCommand,The length of the statement  "		Communication.SendFactionClientMessage (userId' string.Format ("/message Server {2} has added the waypoint: {0} at {1} by {2}"' item.Name' General.Vector3DToString (item.Position)' playerName)); " is 194.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointGroupRemove,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointGroupRemove.cs,GetHelp,The length of the statement  "	return "Removes a waypoint to a waypoint group.  Usage: /waypoint groupremove [existing waypoint name].  Example: /waypoint groupremove Target1"; " is 145.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointGroupRemove,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointGroupRemove.cs,HandleCommand,The length of the statement  "				Communication.SendFactionClientMessage (userId' string.Format ("/message Server {0} removed the waypoint '{1}' from it's group"' playerName' name)); " is 148.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointGroupRemove,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointGroupRemove.cs,HandleCommand,The length of the statement  "				Communication.SendPrivateInformation (userId' string.Format ("Failed to remove faction waypoint '{0}' from it's group"' name)); " is 127.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointGroupAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointGroupAdd.cs,GetHelp,The length of the statement  "	return "Adds a waypoint to a waypoint group.  Waypoint groups can be toggled on and off together with the toggle command.  Usage: /waypoint groupadd [group name] [existing waypoint name].  Example: /waypoint groupadd Targets Target1"; " is 234.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointGroupAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointGroupAdd.cs,HandleCommand,The length of the statement  "			Communication.SendPrivateInformation (userId' string.Format ("Failed to add waypoint '{0}' to the group '{1}'"' name' group)); " is 126.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointGroupAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointGroupAdd.cs,HandleCommand,The length of the statement  "				Communication.SendFactionClientMessage (userId' string.Format ("/message Server {0} added the waypoint '{1}' to the group '{2}'"' playerName' name' group)); " is 156.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointGroupAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointGroupAdd.cs,HandleCommand,The length of the statement  "				Communication.SendPrivateInformation (userId' string.Format ("Failed to add faction waypoint '{0}' to the group '{1}'"' name' group)); " is 134.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointToggle,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointToggle.cs,GetHelp,The length of the statement  "	return "Toggles waypoints off or on.  Specifying a group name hides only that group.  Specifying a waypoint name only toggles that waypoint.  Usage: /waypoint toggle (optional: group name or waypoint name).  Example: /waypoint toggle Targets"; " is 243.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointToggle,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointToggle.cs,HandleCommand,The length of the statement  "		Communication.SendPrivateInformation (userId' string.Format ("Group '{0}' does not exist.  You can only toggle a valid group"' splits [0])); " is 140.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointList,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointList.cs,HandleCommand,The length of the statement  "			waypoints += string.Format ("Group {3} - {0}: '{1}' : ({2})"' item.Name' item.Text' General.Vector3DToString (item.Position)' item.Group); " is 138.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointList,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointList.cs,HandleCommand,The length of the statement  "				waypoints += string.Format ("F: Group {3} - {0}: '{1}' : ({2})"' item.Name' item.Text' General.Vector3DToString (item.Position)' item.Group); " is 141.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointList,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointList.cs,HandleCommand,The length of the statement  "	Communication.DisplayDialog (userId' "Waypoints"' string.Format ("Your defined waypoints: {0} personal' {1} faction"' personalCount' factionCount)' waypoints); " is 159.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointRemove,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointRemove.cs,HandleCommand,The length of the statement  "		Communication.SendPrivateInformation (userId' string.Format ("You do not have a waypoint with the name: {0}"' splits [0])); " is 123.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,GetHelp,The length of the statement  "	return "Creates a personal waypoint.  Only you can see it.  Usage: /waypoint add \"waypoint name\" \"waypoint text\" Neutral | Allied | Enemy X Y Z.  Example: /waypoint add MyWayPoint MyWaypoint Neutral 1000 1000 1000"; " is 219.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,HandleCommand,The length of the statement  "	if (PluginSettings.Instance.WaypointsMaxPerPlayer > 0 && items.Count >= PluginSettings.Instance.WaypointsMaxPerPlayer) { " is 120.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,HandleCommand,The length of the statement  "		Communication.SendPrivateInformation (userId' string.Format ("Waypoint limit has been reached.  You may only have {0} waypoints at a time on this server.  Please remove some waypoints in order to add new ones."' PluginSettings.Instance.WaypointsMaxPerPlayer)); " is 260.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,HandleCommand,The length of the statement  "		Communication.SendClientMessage (userId' string.Format ("/waypoint add \"{0}\" \"{0}\" Neutral {1} {2} {3}"' name' Math.Floor (pos.X)' Math.Floor (pos.Y)' Math.Floor (pos.Z))); " is 176.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,HandleCommand,The length of the statement  "		Communication.SendPrivateInformation (userId' string.Format ("Waypoint added: {0} at {1}"' item.Name' General.Vector3DToString (item.Position))); " is 145.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,HandleCommand,The length of the statement  "				Communication.SendPrivateInformation (userId' string.Format ("Invalid position information: {0} is invalid"' splits [r])); " is 122.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,HandleCommand,The length of the statement  "		item.Position = new Vector3D (double.Parse (splits [diff + 2])' double.Parse (splits [diff + 3])' double.Parse (splits [diff + 4])); " is 132.
Long Statement,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,HandleCommand,The length of the statement  "		Communication.SendPrivateInformation (userId' string.Format ("Waypoint added: {0} at {1}"' item.Name' General.Vector3DToString (item.Position))); " is 145.
Long Statement,EssentialsPlugin.ChatHandlers,HandleFactionF,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\HandleFactionF.cs,HandleCommand,The length of the statement  "	Communication.SendFactionClientMessage (userId' string.Format ("/message F:{0} {1}"' userName' string.Join (" "' words))); " is 122.
Long Statement,EssentialsPlugin.ChatHandlers,HandleFaction,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\HandleFaction.cs,HandleCommand,The length of the statement  "	Communication.SendFactionClientMessage (userId' string.Format ("/message F:{0} {1}"' userName' string.Join (" "' words))); " is 122.
Long Statement,EssentialsPlugin.ChatHandlers,HandlePos,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\HandlePos.cs,HandleCommand,The length of the statement  "	Communication.SendPrivateInformation (userId' string.Format ("Position - X:{0:F2} Y:{1:F2} Z:{2:F2}"' position.X' position.Y' position.Z)); " is 139.
Long Statement,EssentialsPlugin.ChatHandlers,HandleMsg,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\HandleMsg.cs,HandleCommand,The length of the statement  "	Communication.SendClientMessage (steamId' string.Format ("/message P:{0} {1}"' userName' string.Join (" "' words.Skip (1).ToArray ()))); " is 136.
Long Statement,EssentialsPlugin.ChatHandlers,HandleMsg,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\HandleMsg.cs,HandleCommand,The length of the statement  "	Communication.SendClientMessage (userId' string.Format ("/message Server Sent private message to: {0}"' PlayerMap.Instance.GetPlayerNameFromSteamId (steamId))); " is 160.
Long Statement,EssentialsPlugin.ChatHandlers,HandleTimeleft,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\HandleTimeleft.cs,HandleCommand,The length of the statement  "	Communication.SendPrivateInformation (userId' string.Format ("Time remaining until restart: {0}"' General.TimeSpanToString (GetNextRestartTime ().Value - DateTime.Now))); " is 170.
Long Statement,EssentialsPlugin.ChatHandlers,HandleInfo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\HandleInfo.cs,ShowTopicList,The length of the statement  "	Communication.SendPrivateInformation (userId' "Type /info followed by: " + noticeList + " for more info.  For example: '/info motd' to view MOTD."); " is 148.
Long Statement,EssentialsPlugin.ChatHandlers,HandleUtilityGridsList,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Utility\HandleUtilityGridsList.cs,HandleCommand,The length of the statement  "				result += string.Format ("{0} - {1} - {2}bl - {3}"' grid.DisplayName' ShowCoordinates (grid.GetPosition ())' gridBuilder.CubeBlocks.Count' gridBuilder.GridSizeEnum); " is 165.
Long Statement,EssentialsPlugin.ChatHandlers,HandleUtilityGridsList,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Utility\HandleUtilityGridsList.cs,HandleCommand,The length of the statement  "		Communication.SendClientMessage (userId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' "User Grid List"' "Ships / Stations you "' "own:"' result.Replace ("\r\n"' "|")' "OK")); " is 195.
Long Statement,EssentialsPlugin.ChatHandlers,HandleUtilityGridsList,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Utility\HandleUtilityGridsList.cs,HandleCommand,The length of the statement  "	Communication.SendPrivateInformation (userId' string.Format ("Displaying page {0} of {1} - {2} grids"' page' pages' count)); " is 124.
Long Statement,EssentialsPlugin.ChatHandlers,HandleUtilityExportServer,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Utility\HandleUtilityExportServer.cs,HandleCommand,The length of the statement  "		Communication.SendPrivateInformation (userId' string.Format ("More than one ship was detected to have the name '{0}'.  Only the first one found will be exported.  Please name your ships uniquely before exporting."' shipName)); " is 226.
Long Statement,EssentialsPlugin.ChatHandlers,HandleUtilityExportServer,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Utility\HandleUtilityExportServer.cs,HandleCommand,The length of the statement  "				BaseObjectManager.SaveContentFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer> ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()' new FileInfo (string.Format ("{0}\\{1}.sbc"' userExportPath' cleanShipName))); " is 229.
Long Statement,EssentialsPlugin.ChatHandlers,HandleUtilityExportServer,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Utility\HandleUtilityExportServer.cs,HandleCommand,The length of the statement  "				Communication.SendPrivateInformation (userId' string.Format ("Exported the ship '{0}' to a file on the server."' shipName)); " is 124.
Long Statement,EssentialsPlugin.ChatHandlers,HandleUtilityExportServer,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Utility\HandleUtilityExportServer.cs,HandleCommand,The length of the statement  "		Communication.SendPrivateInformation (userId' string.Format ("Unable to find a ship by the name '{0}' that exists or belongs to you!"' shipName)); " is 146.
Long Statement,EssentialsPlugin,Essentials,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Core.cs,PluginProcessing,The length of the statement  "							Logging.WriteLineAndConsole (String.Format ("Handler Problems: {0} - {1}"' handler.GetUpdateResolution ()' ex.ToString ())); " is 124.
Long Statement,EssentialsPlugin,Essentials,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Core.cs,PluginProcessing,The length of the statement  "									Logging.WriteLineAndConsole(String.Format("Handler Problems: {0} - {1}"' handler.GetUpdateResolution()' ex.ToString()));" is 120.
Long Statement,EssentialsPlugin,Essentials,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Core.cs,HandleHelpCommand,The length of the statement  "				if (!commands.Contains (commandBase) && (!handler.IsClientOnly ()) && (!handler.IsAdminCommand () || (handler.IsAdminCommand () && (PlayerManager.Instance.IsUserAdmin (remoteUserId) || remoteUserId == 0)))) { " is 208.
Long Statement,EssentialsPlugin,Essentials,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Core.cs,HandleHelpCommand,The length of the statement  "					if (!commands.Contains (commandBase) && (!handler.IsClientOnly ()) && (!handler.IsAdminCommand () || (handler.IsAdminCommand () && (PlayerManager.Instance.IsUserAdmin (remoteUserId) || remoteUserId == 0)))) { " is 208.
Long Statement,EssentialsPlugin,Essentials,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Core.cs,HandleHelpCommand,The length of the statement  "					if (handler.GetCommandText ().ToLower ().StartsWith (helpTarget.ToLower ()) && ((!handler.IsAdminCommand ()) || (handler.IsAdminCommand () && (PlayerManager.Instance.IsUserAdmin (remoteUserId) || remoteUserId == 0)))) { " is 219.
Long Statement,EssentialsPlugin,Essentials,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Core.cs,HandleHelpCommand,The length of the statement  "						if (cmd.ToLower ().StartsWith (helpTarget.ToLower ()) && ((!handler.IsAdminCommand ()) || (handler.IsAdminCommand () && (PlayerManager.Instance.IsUserAdmin (remoteUserId) || remoteUserId == 0)))) { " is 197.
Long Statement,EssentialsPlugin,Essentials,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Core.cs,HandleHelpCommand,The length of the statement  "				Communication.SendPrivateInformation (remoteUserId' string.Format ("Help topics for command '{0}': {1}"' helpTarget.ToLower ()' string.Join ("'"' helpTopics.ToArray ()))); " is 171.
Long Statement,EssentialsPlugin,Essentials,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Core.cs,DisplayAvailableCommands,The length of the statement  "		Communication.SendPrivateInformation (remoteUserId' string.Format ("Available subcommands for '{0}' command: {1}"' message' string.Join ("' "' availableCommands.ToArray ()))); " is 175.
Long Statement,EssentialsPlugin,PluginSettings,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Settings\PluginSettings.cs,ReflectGenericList,The length of the statement  "			String value = string.Format ("{0} : {1}"' r' ReflectObject (itemToReflect' recurseName' listToReflect.GetType ().GetProperty ("Item")' so' newValue)); " is 151.
Long Statement,EssentialsPlugin.EntityManagers,BlockManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\BlockManagement.cs,CheckAndDisableBlocks,The length of the statement  "			Logging.WriteLineAndConsole (string.Format ("Disable: Block Management disabled {0} grids ({1} blocks diabled) - ({0} ms)"' disableSet.Count' m_enableCount' (DateTime.Now - start).TotalMilliseconds)); " is 200.
Long Statement,EssentialsPlugin.EntityManagers,BlockManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\BlockManagement.cs,DisableGrid,The length of the statement  "		if (cubeBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_Reactor) || cubeBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_Thrust) || cubeBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_Battery) || cubeBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_SolarPanel) || cubeBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_Gyro) || cubeBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_MedicalRoom)) { " is 432.
Long Statement,EssentialsPlugin.EntityManagers,BlockManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\BlockManagement.cs,CheckAndEnableBlocks,The length of the statement  "			Logging.WriteLineAndConsole (string.Format ("Enable: Block Management enabled {0} grids ({1} blocks enabled) - ({0} ms)"' enableSet.Count' m_enableCount' (DateTime.Now - start).TotalMilliseconds)); " is 197.
Long Statement,EssentialsPlugin.EntityManagers,TurretManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\TurretManagement.cs,CheckAndDisableTurrets,The length of the statement  "			Logging.WriteLineAndConsole (string.Format ("Disable: {0} turrets enabled.  {1} turrets diabled.  {2} turrets toggled. ({3} ms)"' m_turretsEnabled' m_turretsDisabled' m_turretsToggled' (DateTime.Now - start).TotalMilliseconds)); " is 228.
Long Statement,EssentialsPlugin.EntityManagers,TurretManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\TurretManagement.cs,DisableTurretsWithoutTargets,The length of the statement  "		if (block.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_InteriorTurret) || block.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_LargeGatlingTurret) || block.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_LargeMissileTurret)) { " is 260.
Long Statement,EssentialsPlugin.EntityManagers,TurretManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\TurretManagement.cs,CheckAndEnableTurrets,The length of the statement  "			Logging.WriteLineAndConsole (string.Format ("Enable: {0} turrets enabled.  {1} turrets diabled.  {2} turrets toggled. ({3} ms)"' m_turretsEnabled' m_turretsDisabled' m_turretsToggled' (DateTime.Now - start).TotalMilliseconds)); " is 227.
Long Statement,EssentialsPlugin.EntityManagers,TurretManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\TurretManagement.cs,EnableTurretsWithTargets,The length of the statement  "		if (block.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_InteriorTurret) || block.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_LargeGatlingTurret) || block.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_LargeMissileTurret)) { " is 260.
Long Statement,EssentialsPlugin.EntityManagers,TurretManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\TurretManagement.cs,DoesGridHaveTarget,The length of the statement  "		BoundingSphereD sphere = new BoundingSphereD (grid.GetPosition ()' PluginSettings.Instance.DynamicTurretTargetDistance); " is 120.
Long Statement,EssentialsPlugin.EntityManagers,TurretManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\TurretManagement.cs,DoesGridHaveTarget,The length of the statement  "						if (block.FatBlock.GetUserRelationToOwner(cubeBlock.OwnerId) == Sandbox.Common.MyRelationsBetweenPlayerAndBlock.Enemies ||" is 122.
Long Statement,EssentialsPlugin.EntityManagers,TurretManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\TurretManagement.cs,DoesGridHaveTarget,The length of the statement  "							Console.WriteLine("Block: Enemy or Neutral: {0} {1} {2}"' cubeBlock.OwnerId' cubeBlock.Parent.DisplayName' cubeBlock.BlockDefinition);" is 134.
Long Statement,EssentialsPlugin.EntityManagers,TurretManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\TurretManagement.cs,DoesGridHaveTarget,The length of the statement  "						if (block.FatBlock.GetUserRelationToOwner(cubeBlock.OwnerId) == Sandbox.Common.MyRelationsBetweenPlayerAndBlock.Enemies)" is 120.
Long Statement,EssentialsPlugin.EntityManagers,TurretManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\TurretManagement.cs,DoesGridHaveTarget,The length of the statement  "//							Console.WriteLine("Block: Enemy: {0} {1} {2}"' cubeBlock.OwnerId' cubeBlock.Parent.DisplayName' cubeBlock.BlockDefinition);" is 132.
Long Statement,EssentialsPlugin.EntityManagers,TurretManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\TurretManagement.cs,DoesGridHaveTarget,The length of the statement  "					if (block.FatBlock.GetUserRelationToOwner (owner) == Sandbox.Common.MyRelationsBetweenPlayerAndBlock.Enemies || block.FatBlock.GetUserRelationToOwner (owner) == Sandbox.Common.MyRelationsBetweenPlayerAndBlock.Neutral) { " is 219.
Long Statement,EssentialsPlugin.EntityManagers,TurretManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\TurretManagement.cs,DoesGridHaveTarget,The length of the statement  "						//Console.WriteLine("{3} Target: Grid - Enemy: {0} - {1} ({2})"' block.FatBlock.OwnerId' owner' testEntity.DisplayName' ((IMyTerminalBlock)block.FatBlock).Parent.DisplayName); " is 175.
Long Statement,EssentialsPlugin.EntityManagers,TurretManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\TurretManagement.cs,DoesGridHaveTarget,The length of the statement  "					if (block.FatBlock.GetUserRelationToOwner (owner) == Sandbox.Common.MyRelationsBetweenPlayerAndBlock.Enemies || block.FatBlock.GetUserRelationToOwner (owner) == Sandbox.Common.MyRelationsBetweenPlayerAndBlock.Neutral) { " is 219.
Long Statement,EssentialsPlugin.EntityManagers,TurretManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\TurretManagement.cs,DoesGridHaveTarget,The length of the statement  "								//player = players.FirstOrDefault(x => x.Controller != null && x.Controller.ControlledEntity != null && x.Controller.ControlledEntity.Entity != null && x.Controller.ControlledEntity.Entity.EntityId == testEntity.EntityId);" is 222.
Long Statement,EssentialsPlugin.EntityManagers,TurretManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\TurretManagement.cs,DoesGridHaveTarget,The length of the statement  "					//Console.WriteLine("{3} Target: Character - Unknown: {0} - {1} ({2})"' block.FatBlock.OwnerId' testEntity.EntityId' testEntity.DisplayName' ((IMyTerminalBlock)block.FatBlock).Parent.DisplayName); " is 196.
Long Statement,EssentialsPlugin.EntityManagers,TurretManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\TurretManagement.cs,DoesGridHaveTarget,The length of the statement  "					//Console.WriteLine("{3} Target: Character - Unknown2: {0} - {1} ({2})"' block.FatBlock.OwnerId' testEntity.EntityId' testEntity.DisplayName' ((IMyTerminalBlock)block.FatBlock).Parent.DisplayName); " is 197.
Long Statement,EssentialsPlugin.EntityManagers,TurretManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\TurretManagement.cs,DoesGridHaveTarget,The length of the statement  "				if (PluginSettings.Instance.DynamicTurretManagementType == DynamicTurretManagementTypes.AllButOwner && block.FatBlock.GetUserRelationToOwner (playerId) != Sandbox.Common.MyRelationsBetweenPlayerAndBlock.Owner) { " is 211.
Long Statement,EssentialsPlugin.EntityManagers,TurretManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\TurretManagement.cs,DoesGridHaveTarget,The length of the statement  "					if (block.FatBlock.GetUserRelationToOwner (playerId) == Sandbox.Common.MyRelationsBetweenPlayerAndBlock.Enemies || block.FatBlock.GetUserRelationToOwner (playerId) == Sandbox.Common.MyRelationsBetweenPlayerAndBlock.Neutral) { " is 225.
Long Statement,EssentialsPlugin.EntityManagers,TurretManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\TurretManagement.cs,DoesGridHaveTarget,The length of the statement  "						//Console.WriteLine("{3} Target: Character - Enemy: {0} - {1} ({2})"' block.FatBlock.OwnerId' playerId' testEntity.DisplayName' ((IMyTerminalBlock)block.FatBlock).Parent.DisplayName); " is 183.
Long Statement,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,CheckAndConcealEntities,The length of the statement  "			Logging.WriteLineAndConsole (string.Format ("Error getting players list.  Check and Conceal failed: {0}"' ex.ToString ())); " is 123.
Long Statement,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,CheckAndConcealEntities,The length of the statement  "			Logging.WriteLineAndConsole (string.Format ("Completed Conceal Check: {0}ms (gg: {3}' dc: {2} ms' br: {1}ms' co: {4}ms)"' (DateTime.Now - start).TotalMilliseconds' blockRules' distCheck' getGrids' co)); " is 202.
Long Statement,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,CheckConcealBlockRules,The length of the statement  "			//					Console.WriteLine("Found: {0} {1} {2}"' beacon.BroadcastRadius' terminalBlock.IsWorking' terminalBlock.IsFunctional); " is 124.
Long Statement,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,CheckConcealBlockRules,The length of the statement  "						if (functionalBlock.OwnerId == playerId || (functionalBlock.GetUserRelationToOwner (playerId) == Sandbox.Common.MyRelationsBetweenPlayerAndBlock.FactionShare))//if (functionalBlock.Owner == playerId || (functionalBlock.ShareMode == MyOwnershipShareModeEnum.Faction && Player.CheckPlayerSameFaction(functionalBlock.Owner' playerId))) " is 332.
Long Statement,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,CheckConcealBlockRules,The length of the statement  "							//if (medical.Owner == playerId || (medical.ShareMode == MyOwnershipShareModeEnum.Faction && Player.CheckPlayerSameFaction(medical.Owner' playerId)))" is 149.
Long Statement,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,CheckConcealBlockRules,The length of the statement  "		if (cubeBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_Refinery) || cubeBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_Assembler)) { " is 148.
Long Statement,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,CheckConcealForce,The length of the statement  "			if (medical.Owner == playerId || (medical.ShareMode == MyOwnershipShareModeEnum.Faction && Player.CheckPlayerSameFaction (medical.Owner' playerId))) { " is 150.
Long Statement,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,ConcealEntity,The length of the statement  "			Logging.WriteLineAndConsole ("Conceal"' string.Format ("Concealing - Id: {0} DUPE FOUND - Display: {1} OwnerId: {2} OwnerName: {3}"' entity.EntityId' entity.DisplayName' ownerId' ownerName' builder.EntityId)); " is 209.
Long Statement,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,ConcealEntity,The length of the statement  "				Logging.WriteLineAndConsole ("Conceal"' string.Format ("Start Concealing - Id: {0} -> {4} Display: {1} OwnerId: {2} OwnerName: {3}"' entity.EntityId' entity.DisplayName' ownerId' ownerName' newEntity.EntityId)); " is 211.
Long Statement,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,ConcealEntity,The length of the statement  "					Logging.WriteLineAndConsole ("Conceal"' string.Format ("Issue - CreateFromObjectBuilder failed: {0}"' newEntity.EntityId)); " is 123.
Long Statement,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,ConcealEntity,The length of the statement  "				Logging.WriteLineAndConsole ("Conceal"' string.Format ("End Concealing - Id: {0} -> {4} Display: {1} OwnerId: {2} OwnerName: {3}"' entity.EntityId' entity.DisplayName' ownerId' ownerName' newEntity.EntityId)); " is 209.
Long Statement,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,ConcealEntity,The length of the statement  "				Logging.WriteLineAndConsole ("Conceal"' string.Format ("Start Concealing - Id: {0} -> {4} Display: {1} OwnerId: {2} OwnerName: {3}"' entity.EntityId' entity.DisplayName' ownerId' ownerName' builder.EntityId)); " is 209.
Long Statement,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,ConcealEntity,The length of the statement  "				Logging.WriteLineAndConsole ("Conceal"' string.Format ("End Concealing - Id: {0} -> {4} Display: {1} OwnerId: {2} OwnerName: {3}"' entity.EntityId' entity.DisplayName' ownerId' ownerName' builder.EntityId)); " is 207.
Long Statement,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,CheckAndRevealEntities,The length of the statement  "			Logging.WriteLineAndConsole (string.Format ("Completed Reveal Check: {0}ms (br: {1}ms' re: {2}ms)"' (DateTime.Now - start).TotalMilliseconds' br' re)); " is 151.
Long Statement,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,CheckRevealBlockRules,The length of the statement  "			//Console.WriteLine("Beacon: {0} {1} {2}"' beacon.BroadcastRadius' terminalBlock.IsWorking' terminalBlock.IsFunctional); " is 120.
Long Statement,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,CheckRevealBlockRules,The length of the statement  "						//if (medical.Owner == playerId || (medical.ShareMode == MyOwnershipShareModeEnum.Faction && Player.CheckPlayerSameFaction(medical.Owner' playerId))) " is 149.
Long Statement,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,CheckRevealBlockRules,The length of the statement  "						if (functionalBlock.GetUserRelationToOwner (playerId) == Sandbox.Common.MyRelationsBetweenPlayerAndBlock.FactionShare) { " is 120.
Long Statement,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,CheckRevealBlockRules,The length of the statement  "							//if (medical.Owner == playerId || (medical.ShareMode == MyOwnershipShareModeEnum.Faction && Player.CheckPlayerSameFaction(medical.Owner' playerId)))" is 149.
Long Statement,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,CheckRevealBlockRules,The length of the statement  "							//if (functionalBlock.OwnerId == playerId || (functionalBlock.GetUserRelationToOwner(playerId) == Sandbox.Common.MyRelationsBetweenPlayerAndBlock.FactionShare))" is 160.
Long Statement,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,CheckRevealMedbay,The length of the statement  "			//if (medical.Owner == playerId || (medical.ShareMode == MyOwnershipShareModeEnum.Faction && Player.CheckPlayerSameFaction(medical.Owner' playerId))) " is 149.
Long Statement,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,RevealEntity,The length of the statement  "		Logging.WriteLineAndConsole ("Conceal"' string.Format ("Revealing - Id: {0} DUPE FOUND Display: {1} OwnerId: {2} OwnerName: {3}  Reason: {4}"' entity.EntityId' entity.DisplayName.Replace ("\r"' "").Replace ("\n"' "")' ownerId' ownerName' reason)); " is 247.
Long Statement,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,RevealEntity,The length of the statement  "			Logging.WriteLineAndConsole ("Conceal"' string.Format ("Start Revealing - Id: {0} -> {4} Display: {1} OwnerId: {2} OwnerName: {3}  Reason: {5}"' entity.EntityId' entity.DisplayName.Replace ("\r"' "").Replace ("\n"' "")' ownerId' ownerName' newEntity.EntityId' reason)); " is 269.
Long Statement,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,RevealEntity,The length of the statement  "				Logging.WriteLineAndConsole ("Conceal"' string.Format ("Issue - CreateFromObjectBuilder failed: {0}"' newEntity.EntityId)); " is 123.
Long Statement,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,RevealEntity,The length of the statement  "			Logging.WriteLineAndConsole ("Conceal"' string.Format ("End Revealing - Id: {0} -> {4} Display: {1} OwnerId: {2} OwnerName: {3}  Reason: {5}"' entity.EntityId' entity.DisplayName.Replace ("\r"' "").Replace ("\n"' "")' ownerId' ownerName' newEntity.EntityId' reason)); " is 267.
Long Statement,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,RevealEntity,The length of the statement  "			Logging.WriteLineAndConsole ("Conceal"' string.Format ("Start Revealing - Id: {0} -> {4} Display: {1} OwnerId: {2} OwnerName: {3}  Reason: {4}"' entity.EntityId' entity.DisplayName.Replace ("\r"' "").Replace ("\n"' "")' ownerId' ownerName' reason)); " is 249.
Long Statement,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,RevealEntity,The length of the statement  "						*/Logging.WriteLineAndConsole ("Conceal"' string.Format ("End Revealing - Id: {0} -> {4} Display: {1} OwnerId: {2} OwnerName: {3}  Reason: {4}"' entity.EntityId' entity.DisplayName.Replace ("\r"' "").Replace ("\n"' "")' ownerId' ownerName' reason)); " is 249.
Long Statement,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,RevealAll,The length of the statement  "			Logging.WriteLineAndConsole ("Conceal"' string.Format ("Force Revealing - Id: {0} -> {4} Display: {1} OwnerId: {2} OwnerName: {3}"' entity.EntityId' entity.DisplayName.Replace ("\r"' "").Replace ("\n"' "")' ownerId' ownerName' builder.EntityId)); " is 246.
Long Statement,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,RevealAll,The length of the statement  "				Logging.WriteLineAndConsole ("Conceal"' string.Format ("Issue - CreateFromObjectBuilder failed: {0}"' newEntity.EntityId)); " is 123.
Long Statement,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,ToggleMedbayGrids,The length of the statement  "			Communication.SendClientMessage (steamId' string.Format ("/conceal {0}"' string.Join ("'"' entitiesToConceal.Select (x => x.EntityId.ToString () + ":" + ((MyObjectBuilder_CubeGrid)x.GetObjectBuilder ()).CubeBlocks.Count.ToString () + ":" + x.DisplayName).ToArray ()))); " is 269.
Long Statement,EssentialsPlugin.GameModes,Conquest,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\GameModes\Conquest.cs,Process,The length of the statement  "			Communication.SendPublicInformation (string.Format ("[CONQUEST]: Multiple asteroids have been conquered.  {0} asteroids have been claimed or changed ownership."' count)); " is 170.
Long Statement,EssentialsPlugin.GameModes,Conquest,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\GameModes\Conquest.cs,ProcessAsteroidOwnership,The length of the statement  "		long asteroidOwner = asteroidScore.OrderBy (x => x.Value).Where (x => x.Value > 4).Select (x => x.Key).FirstOrDefault (); " is 121.
Long Statement,EssentialsPlugin.GameModes,Conquest,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\GameModes\Conquest.cs,ProcessAsteroidOwnership,The length of the statement  "			//Console.WriteLine(string.Format("Owner of asteroid at: {0} is {1}"' General.Vector3DToString(entity.GetPosition())' item.Name)); " is 130.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessBlockEnforcement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessBlockEnforcement.cs,Handle,The length of the statement  "				Logging.WriteLineAndConsole (string.Format ("Block Enforce Scan Time Elapsed: {0}ms"' (DateTime.Now - start).TotalMilliseconds)); " is 129.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessBlockEnforcement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessBlockEnforcement.cs,ScanForBlockItems,The length of the statement  "		Sandbox.ModAPI.Ingame.IMyGridTerminalSystem gridTerminal = MyAPIGateway.TerminalActionsHelper.GetTerminalSystemForGrid (grid); " is 126.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessBlockEnforcement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessBlockEnforcement.cs,ScanForBlockItems,The length of the statement  "						//Communication.SendPrivateInformation(steamId' string.Format("You have exceeded the max block count of {0} on the ship '{1}'.  We are removing {2} blocks to enforce this block limit."' item.BlockType' gridBuilder.DisplayName' blocks[item.BlockType] - item.MaxPerGrid)); " is 270.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessBlockEnforcement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessBlockEnforcement.cs,ScanForBlockItems,The length of the statement  "						Communication.SendPrivateInformation (steamId' string.Format ("You have exceeded the max block count of {0} on the ship '{1}'.  We are removing {2} blocks to enforce this block limit."' item.BlockType' grid.DisplayName' blocks [item.BlockType] - item.MaxPerGrid)); " is 264.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessBlockEnforcement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessBlockEnforcement.cs,DeleteReverse,The length of the statement  "	Sandbox.ModAPI.Ingame.IMyGridTerminalSystem gridTerminal = MyAPIGateway.TerminalActionsHelper.GetTerminalSystemForGrid (grid); " is 126.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessCleanup,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessCleanup.cs,ProcessTimedItem,The length of the statement  "		Communication.SendPublicInformation (string.Format ("[NOTICE]: Timed cleanup has run.  {0} entities removed.  Have a nice day."' entities.Count)); " is 146.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessCleanup,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessCleanup.cs,ProcessTriggerItem,The length of the statement  "				Communication.SendPublicInformation (string.Format ("[NOTICE]: Cleanup triggered.  ({0} of {1}) triggered grids found.  Cleanup will run in {2} minutes.  Reason: {3}"' entities.Count' item.MaxCapacity' item.MinutesAfterCapacity' item.Reason)); " is 243.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessCleanup,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessCleanup.cs,ProcessTriggerItem,The length of the statement  "			Communication.SendPublicInformation (string.Format ("[NOTICE]: Triggered cleanup has run.  {0} entities removed.  Have a nice day."' entities.Count)); " is 150.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessDockingZone,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessDockingZone.cs,CheckPlayerInDockingZone,The length of the statement  "	if (player.Controller == null || player.Controller.ControlledEntity == null || player.Controller.ControlledEntity.Entity == null) " is 129.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessDockingZone,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessDockingZone.cs,CheckPlayerInDockingZone,The length of the statement  "						Communication.Notification (steamId' MyFontEnum.Green' 7' string.Format ("You are inside a valid docking zone: {0}"' p.Key)); " is 125.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessWaypoints,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessWaypoints.cs,Handle,The length of the statement  "			IMyPlayer player = players.FirstOrDefault (x => x.SteamUserId == steamId && x.Controller != null && x.Controller.ControlledEntity != null); " is 139.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessProtection,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessProtection.cs,ProtectedEntity,The length of the statement  "				if (block.IntegrityPercent != item.IntegrityIncrease || block.BuildPercent != item.IntegrityIncrease || block.BoneDamage > 0f)" is 126.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessCommunication,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessCommunication.cs,Handle,The length of the statement  "		MyAPIGateway.Entities.GetEntities (entities' x => x is IMyCubeGrid && x.DisplayName.StartsWith ("CommRelay") && !x.DisplayName.StartsWith ("CommRelayGlobal") && !x.DisplayName.StartsWith ("CommRelay0") && !x.DisplayName.StartsWith ("CommRelayOutput") && !x.DisplayName.StartsWith ("CommRelayBroadcast")); " is 304.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessCommunication,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessCommunication.cs,AddGlobalRelay,The length of the statement  "	entity.PositionAndOrientation = new MyPositionAndOrientation (MathUtility.GenerateRandomEdgeVector ()' Vector3.Forward' Vector3.Up); " is 132.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessRespawn,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessRespawn.cs,Handle,The length of the statement  "		if (player.Controller != null && player.Controller.ControlledEntity != null && player.Controller.ControlledEntity.Entity != null) { " is 131.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessRespawn,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessRespawn.cs,Handle,The length of the statement  "				} else if (character.Health < 1 && m_deathTracker.ContainsKey (entity.EntityId) && !m_respawnShown.Contains (entity.EntityId) && (DateTime.Now - m_deathTracker [entity.EntityId]).TotalSeconds > 3) { " is 198.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessNewUserTransport,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessNewUserTransport.cs,Init,The length of the statement  "					Logging.WriteLineAndConsole(string.Format("Starting Voxel Caching .. This might take awhile: {0} voxels"' voxels.Count));" is 121.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessNewUserTransport,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessNewUserTransport.cs,Init,The length of the statement  "						Logging.WriteLineAndConsole(string.Format("Caching Voxel: {0} - {1} (Took: {2}s)"' voxel.Name' voxelMaterialCount' (DateTime.Now - start).TotalSeconds));" is 153.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessNewUserTransport,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessNewUserTransport.cs,Init,The length of the statement  "					Logging.WriteLineAndConsole(string.Format("Caching Voxel: {0} - {1} (Took: {2}s)"' voxel.Name' voxelMaterialCount' (DateTime.Now - start).TotalSeconds));" is 153.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessNewUserTransport,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessNewUserTransport.cs,Handle,The length of the statement  "					IMyPlayer player = players.FirstOrDefault(x => x.SteamUserId == steamId && x.Controller != null && x.Controller.ControlledEntity != null);" is 138.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessNewUserTransport,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessNewUserTransport.cs,Handle,The length of the statement  "						*///Communication.SendPrivateInformation(steamId' string.Format("Welcome {0}.  We are moving you closer to an asteroid ... please stand by ..."' PlayerMap.Instance.GetPlayerNameFromSteamId(steamId))); " is 200.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessNewUserTransport,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessNewUserTransport.cs,Handle,The length of the statement  "						//Communication.SendPrivateInformation(steamId' string.Format("You have been moved!  You should be within {0} meters of an asteroid."' PluginSettings.Instance.NewUserTransportDistance));" is 186.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessNewUserTransport,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessNewUserTransport.cs,OnPlayerJoined,The length of the statement  "	if (PlayerMap.Instance.GetPlayerIdsFromSteamId (remoteUserId).Count () > 0 && !PluginSettings.Instance.NewUserTransportMoveAllSpawnShips) " is 137.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessNewUserTransport,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessNewUserTransport.cs,MoveEntity,The length of the statement  "	//Logging.WriteLineAndConsole(string.Format("Attempting to move a character to: {0}"' General.Vector3DToString(validPosition))); " is 128.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessNewUserTransport,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessNewUserTransport.cs,MoveEntity,The length of the statement  "		if (player.Controller == null || player.Controller.ControlledEntity == null || player.Controller.ControlledEntity.Entity == null) " is 129.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessNewUserTransport,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessNewUserTransport.cs,MoveEntity,The length of the statement  "	if (PlayerMap.Instance.GetPlayerIdsFromSteamId (targetPlayer.SteamUserId).Count () > 0 && !PluginSettings.Instance.NewUserTransportMoveAllSpawnShips) { " is 151.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessNewUserTransport,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessNewUserTransport.cs,MoveEntity,The length of the statement  "	Communication.SendClientMessage (targetPlayer.SteamUserId' string.Format ("/move normal {0} {1} {2}"' validPosition.X' validPosition.Y' validPosition.Z)); " is 154.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessNewUserTransport,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessNewUserTransport.cs,FindViableAsteroid,The length of the statement  "		if (PluginSettings.Instance.NewUserTransportAsteroidDistance > 0 && Vector3D.Distance (voxelMap.Position' Vector3D.Zero) > PluginSettings.Instance.NewUserTransportAsteroidDistance) " is 180.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessNewUserTransport,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessNewUserTransport.cs,FindViableAsteroid,The length of the statement  "		Logging.WriteLineAndConsole (string.Format ("Found asteroid with viable materials: {0} - {1}"' voxelMap.Name' voxelMap.Materials.Count ())); " is 140.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessNewUserTransport,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessNewUserTransport.cs,FindViableAsteroid,The length of the statement  "		validPosition = MathUtility.RandomPositionFromPoint (asteroidPosition' PluginSettings.Instance.NewUserTransportDistance); " is 121.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessNewUserTransport,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessNewUserTransport.cs,FindViableAsteroid,The length of the statement  "					Logging.WriteLineAndConsole(string.Format("Found asteroid with viable materials: {0} - {1}"' voxelMap.Name' voxelMap.Materials.Count()));" is 137.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessNewUserTransport,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessNewUserTransport.cs,FindViableAsteroid,The length of the statement  "					validPosition = MathUtility.RandomPositionFromPoint(asteroidPosition' PluginSettings.Instance.NewUserTransportDistance);" is 120.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,Handle,The length of the statement  "					IMyPlayer player = players.FirstOrDefault (x => x.SteamUserId == item.SteamId && x.Controller != null && x.Controller.ControlledEntity != null); " is 144.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,Handle,The length of the statement  "								Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText)); " is 356.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,Handle,The length of the statement  "								Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText)); " is 356.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessBackup,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessBackup.cs,Handle,The length of the statement  "						Backup.Create (PluginSettings.Instance.BackupBaseDirectory' PluginSettings.Instance.BackupCreateSubDirectories' PluginSettings.Instance.BackupAsteroids' PluginSettings.Instance.BackupEssentials); " is 195.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessBackup,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessBackup.cs,Handle,The length of the statement  "						Backup.Create (PluginSettings.Instance.BackupBaseDirectory' PluginSettings.Instance.BackupCreateSubDirectories' PluginSettings.Instance.BackupAsteroids' PluginSettings.Instance.BackupEssentials); " is 195.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessRestart,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessRestart.cs,DoRestart,The length of the statement  "		restartText += System.IO.Path.GetFileName (Application.ExecutablePath) + " " + Server.Instance.CommandLineArgs.Args + "\r\n"; " is 125.
Long Statement,EssentialsPlugin.ProcessHandler,ProcessRestart,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessRestart.cs,CheckResponse,The length of the statement  "			Logging.WriteLineAndConsole (string.Format ("Warning: Server Response Time: {0}ms"' (DateTime.Now - start).TotalMilliseconds)); " is 127.
Long Statement,EssentialsPlugin.UtilityClasses,MTObservableCollection,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\MTObservableCollection.cs,OnCollectionChanged,The length of the statement  "					dispatcher.BeginInvoke ((Action)(() => nh.Invoke (this' new NotifyCollectionChangedEventArgs (NotifyCollectionChangedAction.Reset)))' DispatcherPriority.DataBind); " is 163.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBox,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,Transform,The length of the statement  "	return new OrientedBoundingBox (Vector3.Transform (Center' rotation) + translation' HalfExtent' Orientation * rotation); " is 120.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBox,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,Transform,The length of the statement  "	return new OrientedBoundingBox (Vector3.Transform (Center * scale' rotation) + translation' HalfExtent * scale' Orientation * rotation); " is 136.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBox,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,ToString,The length of the statement  "	return "{Center:" + Center.ToString () + " Extents:" + HalfExtent.ToString () + " Orientation:" + Orientation.ToString () + "}"; " is 128.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBox,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,Contains,The length of the statement  "	return Math.Abs (plocal.X) <= HalfExtent.X && Math.Abs (plocal.Y) <= HalfExtent.Y && Math.Abs (plocal.Z) <= HalfExtent.Z; " is 121.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBox,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,Intersects,The length of the statement  "	float r = Math.Abs (HalfExtent.X * localNormal.X) + Math.Abs (HalfExtent.Y * localNormal.Y) + Math.Abs (HalfExtent.Z * localNormal.Z); " is 134.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBox,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,ContainsRelativeBox,The length of the statement  "	if (Math.Abs (Vector3.Dot (mB_T' bX)) >= Math.Abs (hA.X * bX.X) + Math.Abs (hA.Y * bX.Y) + Math.Abs (hA.Z * bX.Z) + hB.X) " is 121.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBox,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,ContainsRelativeBox,The length of the statement  "	if (Math.Abs (Vector3.Dot (mB_T' bY)) >= Math.Abs (hA.X * bY.X) + Math.Abs (hA.Y * bY.Y) + Math.Abs (hA.Z * bY.Z) + hB.Y) " is 121.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBox,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,ContainsRelativeBox,The length of the statement  "	if (Math.Abs (Vector3.Dot (mB_T' bZ)) >= Math.Abs (hA.X * bZ.X) + Math.Abs (hA.Y * bZ.Y) + Math.Abs (hA.Z * bZ.Z) + hB.Z) " is 121.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBox,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,ContainsRelativeBox,The length of the statement  "			if (Math.Abs(Vector3.Dot(mB_T' axis)) >= Math.Abs(hA.Y * axis.Y) + Math.Abs(hA.Z * axis.Z) + Math.Abs(Vector3.Dot(axis' hy_B)) + Math.Abs(Vector3.Dot(axis' hz_B)))" is 163.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBox,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,ContainsRelativeBox,The length of the statement  "			if (Math.Abs(Vector3.Dot(mB_T' axis)) >= Math.Abs(hA.Y * axis.Y) + Math.Abs(hA.Z * axis.Z) + Math.Abs(Vector3.Dot(axis' hz_B)) + Math.Abs(Vector3.Dot(axis' hx_B)))" is 163.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBox,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,ContainsRelativeBox,The length of the statement  "			if (Math.Abs(Vector3.Dot(mB_T' axis)) >= Math.Abs(hA.Y * axis.Y) + Math.Abs(hA.Z * axis.Z) + Math.Abs(Vector3.Dot(axis' hx_B)) + Math.Abs(Vector3.Dot(axis' hy_B)))" is 163.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBox,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,ContainsRelativeBox,The length of the statement  "			if (Math.Abs(Vector3.Dot(mB_T' axis)) >= Math.Abs(hA.Z * axis.Z) + Math.Abs(hA.X * axis.X) + Math.Abs(Vector3.Dot(axis' hy_B)) + Math.Abs(Vector3.Dot(axis' hz_B)))" is 163.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBox,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,ContainsRelativeBox,The length of the statement  "			if (Math.Abs(Vector3.Dot(mB_T' axis)) >= Math.Abs(hA.Z * axis.Z) + Math.Abs(hA.X * axis.X) + Math.Abs(Vector3.Dot(axis' hz_B)) + Math.Abs(Vector3.Dot(axis' hx_B)))" is 163.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBox,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,ContainsRelativeBox,The length of the statement  "			if (Math.Abs(Vector3.Dot(mB_T' axis)) >= Math.Abs(hA.Z * axis.Z) + Math.Abs(hA.X * axis.X) + Math.Abs(Vector3.Dot(axis' hx_B)) + Math.Abs(Vector3.Dot(axis' hy_B)))" is 163.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBox,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,ContainsRelativeBox,The length of the statement  "			if (Math.Abs(Vector3.Dot(mB_T' axis)) >= Math.Abs(hA.X * axis.X) + Math.Abs(hA.Y * axis.Y) + Math.Abs(Vector3.Dot(axis' hy_B)) + Math.Abs(Vector3.Dot(axis' hz_B)))" is 163.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBox,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,ContainsRelativeBox,The length of the statement  "			if (Math.Abs(Vector3.Dot(mB_T' axis)) >= Math.Abs(hA.X * axis.X) + Math.Abs(hA.Y * axis.Y) + Math.Abs(Vector3.Dot(axis' hz_B)) + Math.Abs(Vector3.Dot(axis' hx_B)))" is 163.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBox,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,ContainsRelativeBox,The length of the statement  "			if (Math.Abs(Vector3.Dot(mB_T' axis)) >= Math.Abs(hA.X * axis.X) + Math.Abs(hA.Y * axis.Y) + Math.Abs(Vector3.Dot(axis' hx_B)) + Math.Abs(Vector3.Dot(axis' hy_B)))" is 163.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBoxD,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,Transform,The length of the statement  "	return new OrientedBoundingBoxD (Vector3.Transform (Center' rotation) + translation' HalfExtent' Orientation * rotation); " is 121.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBoxD,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,Transform,The length of the statement  "	return new OrientedBoundingBoxD (Vector3D.Transform (Center * scale' rotation) + translation' HalfExtent * scale' Orientation * rotation); " is 138.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBoxD,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,ToString,The length of the statement  "	return "{Center:" + Center.ToString () + " Extents:" + HalfExtent.ToString () + " Orientation:" + Orientation.ToString () + "}"; " is 128.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBoxD,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,Contains,The length of the statement  "	return Math.Abs (plocal.X) <= HalfExtent.X && Math.Abs (plocal.Y) <= HalfExtent.Y && Math.Abs (plocal.Z) <= HalfExtent.Z; " is 121.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBoxD,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,Intersects,The length of the statement  "	double r = Math.Abs (HalfExtent.X * localNormal.X) + Math.Abs (HalfExtent.Y * localNormal.Y) + Math.Abs (HalfExtent.Z * localNormal.Z); " is 135.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBoxD,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,ContainsRelativeBox,The length of the statement  "	if (Math.Abs (Vector3.Dot (mB_T' bX)) >= Math.Abs (hA.X * bX.X) + Math.Abs (hA.Y * bX.Y) + Math.Abs (hA.Z * bX.Z) + hB.X) " is 121.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBoxD,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,ContainsRelativeBox,The length of the statement  "	if (Math.Abs (Vector3.Dot (mB_T' bY)) >= Math.Abs (hA.X * bY.X) + Math.Abs (hA.Y * bY.Y) + Math.Abs (hA.Z * bY.Z) + hB.Y) " is 121.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBoxD,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,ContainsRelativeBox,The length of the statement  "	if (Math.Abs (Vector3.Dot (mB_T' bZ)) >= Math.Abs (hA.X * bZ.X) + Math.Abs (hA.Y * bZ.Y) + Math.Abs (hA.Z * bZ.Z) + hB.Z) " is 121.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBoxD,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,ContainsRelativeBox,The length of the statement  "			if (Math.Abs(Vector3.Dot(mB_T' axis)) >= Math.Abs(hA.Y * axis.Y) + Math.Abs(hA.Z * axis.Z) + Math.Abs(Vector3.Dot(axis' hy_B)) + Math.Abs(Vector3.Dot(axis' hz_B)))" is 163.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBoxD,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,ContainsRelativeBox,The length of the statement  "			if (Math.Abs(Vector3.Dot(mB_T' axis)) >= Math.Abs(hA.Y * axis.Y) + Math.Abs(hA.Z * axis.Z) + Math.Abs(Vector3.Dot(axis' hz_B)) + Math.Abs(Vector3.Dot(axis' hx_B)))" is 163.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBoxD,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,ContainsRelativeBox,The length of the statement  "			if (Math.Abs(Vector3.Dot(mB_T' axis)) >= Math.Abs(hA.Y * axis.Y) + Math.Abs(hA.Z * axis.Z) + Math.Abs(Vector3.Dot(axis' hx_B)) + Math.Abs(Vector3.Dot(axis' hy_B)))" is 163.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBoxD,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,ContainsRelativeBox,The length of the statement  "			if (Math.Abs(Vector3.Dot(mB_T' axis)) >= Math.Abs(hA.Z * axis.Z) + Math.Abs(hA.X * axis.X) + Math.Abs(Vector3.Dot(axis' hy_B)) + Math.Abs(Vector3.Dot(axis' hz_B)))" is 163.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBoxD,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,ContainsRelativeBox,The length of the statement  "			if (Math.Abs(Vector3.Dot(mB_T' axis)) >= Math.Abs(hA.Z * axis.Z) + Math.Abs(hA.X * axis.X) + Math.Abs(Vector3.Dot(axis' hz_B)) + Math.Abs(Vector3.Dot(axis' hx_B)))" is 163.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBoxD,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,ContainsRelativeBox,The length of the statement  "			if (Math.Abs(Vector3.Dot(mB_T' axis)) >= Math.Abs(hA.Z * axis.Z) + Math.Abs(hA.X * axis.X) + Math.Abs(Vector3.Dot(axis' hx_B)) + Math.Abs(Vector3.Dot(axis' hy_B)))" is 163.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBoxD,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,ContainsRelativeBox,The length of the statement  "			if (Math.Abs(Vector3.Dot(mB_T' axis)) >= Math.Abs(hA.X * axis.X) + Math.Abs(hA.Y * axis.Y) + Math.Abs(Vector3.Dot(axis' hy_B)) + Math.Abs(Vector3.Dot(axis' hz_B)))" is 163.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBoxD,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,ContainsRelativeBox,The length of the statement  "			if (Math.Abs(Vector3.Dot(mB_T' axis)) >= Math.Abs(hA.X * axis.X) + Math.Abs(hA.Y * axis.Y) + Math.Abs(Vector3.Dot(axis' hz_B)) + Math.Abs(Vector3.Dot(axis' hx_B)))" is 163.
Long Statement,EssentialsPlugin.UtilityClasses,OrientedBoundingBoxD,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\UtilityClasses\OrientedBoundingBox.cs,ContainsRelativeBox,The length of the statement  "			if (Math.Abs(Vector3.Dot(mB_T' axis)) >= Math.Abs(hA.X * axis.X) + Math.Abs(hA.Y * axis.Y) + Math.Abs(Vector3.Dot(axis' hx_B)) + Math.Abs(Vector3.Dot(axis' hy_B)))" is 163.
Long Statement,EssentialsPlugin.Utility,Backup,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Backup.cs,Create,The length of the statement  "	ZipFile.CreateFromDirectory (tempDirectory' finalDirectory + "\\" + string.Format ("Backup-{0}"' DateTime.Now.ToString ("d-M-yyyy-HH-mm")) + ".zip"); " is 149.
Long Statement,EssentialsPlugin.Utility,Backup,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Backup.cs,Create,The length of the statement  "	Logging.WriteLineAndConsole (string.Format ("Backup created: {0}"' finalDirectory + "\\" + string.Format ("Backup-{0}"' DateTime.Now.ToString ("d-M-yyyy-hh-mm")) + ".zip")); " is 173.
Long Statement,EssentialsPlugin.Utility,Communication,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Communication.cs,SendClientMessage,The length of the statement  "	entity.DisplayName = string.Format ("CommRelayOutput{0}"' PlayerMap.Instance.GetPlayerIdsFromSteamId (steamId).First ()); " is 121.
Long Statement,EssentialsPlugin.Utility,Communication,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Communication.cs,SendClientMessage,The length of the statement  "	entity.PositionAndOrientation = new MyPositionAndOrientation (MathUtility.GenerateRandomEdgeVector ()' Vector3.Forward' Vector3.Up); " is 132.
Long Statement,EssentialsPlugin.Utility,Communication,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Communication.cs,DisplayDialog,The length of the statement  "	SendClientMessage (steamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' header' subheader' " "' content.Replace ("\r\n"' "|")' buttonText)); " is 162.
Long Statement,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,RemoveGridsInSphere,The length of the statement  "			Communication.SendPrivateInformation (userId' string.Format ("Deleting entity '{0}' at {1}"' entity.DisplayName' General.Vector3DToString (entity.GetPosition ()))); " is 164.
Long Statement,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanCleanup,The length of the statement  "	Communication.SendPrivateInformation (userId' string.Format ("Scanning for ships with options: {0}"' GetOptionsText (options))); " is 128.
Long Statement,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanCleanup,The length of the statement  "		if (PluginSettings.Instance.LoginEntityWhitelist.Contains (entity.EntityId.ToString ()) || PluginSettings.Instance.LoginEntityWhitelist.Contains (entity.DisplayName)) " is 166.
Long Statement,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanCleanup,The length of the statement  "						Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which has a functional block.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count)); " is 244.
Long Statement,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanCleanup,The length of the statement  "						Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which has a terminal block.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count)); " is 242.
Long Statement,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanCleanup,The length of the statement  "						Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which has power.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count)); " is 231.
Long Statement,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanCleanup,The length of the statement  "								Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which contains at least {4} of block type {3} ({5}).  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count' p.Key' s.Value' p.Value)); " is 292.
Long Statement,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanCleanup,The length of the statement  "							Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which is over limit of block type {3} at {4}.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count' s.Key' p.Value)); " is 276.
Long Statement,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanCleanup,The length of the statement  "		Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which has unconnected and has parameters specified.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count)); " is 266.
Long Statement,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanCleanup,The length of the statement  "	Communication.SendPrivateInformation (userId' string.Format ("Found {0} grids considered to be trash"' entitiesFound.Count)); " is 125.
Long Statement,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The length of the statement  "		Communication.SendPrivateInformation (userId' "Possible problem with your parameters (options provided is larger than options found).  Not returning any results in case of error"); " is 180.
Long Statement,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The length of the statement  "		Communication.SendPrivateInformation (userId' string.Format ("Scanning for ships with options: {0}"' GetOptionsText (options))); " is 128.
Long Statement,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The length of the statement  "		if (PluginSettings.Instance.LoginEntityWhitelist.Contains (entity.EntityId.ToString ()) || PluginSettings.Instance.LoginEntityWhitelist.Contains (entity.DisplayName)) " is 166.
Long Statement,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The length of the statement  "					//								Communication.SendPrivateInformation(userId' string.Format("Found grid '{0}' ({1}) which has a functional block.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder()).CubeBlocks.Count)); " is 251.
Long Statement,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The length of the statement  "					//	Communication.SendPrivateInformation(userId' string.Format("Found grid '{0}' ({1}) which has a terminal block.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder()).CubeBlocks.Count)); " is 242.
Long Statement,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The length of the statement  "					//	Communication.SendPrivateInformation(userId' string.Format("Found grid '{0}' ({1}) which has power.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder()).CubeBlocks.Count)); " is 231.
Long Statement,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The length of the statement  "								Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which contains at least {4} of block type {3} ({5}).  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count' pairBlockTypesInGrid.Key' pairBlockTypesFilter.Value' pairBlockTypesInGrid.Value)); " is 349.
Long Statement,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The length of the statement  "					Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which does not contain block type.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count)); " is 249.
Long Statement,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The length of the statement  "								Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which contains at least {4} of block type {3} ({5}).  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count' pairBlockTypesInGrid.Key' pairBlockTypesFilter.Value' pairBlockTypesInGrid.Value)); " is 349.
Long Statement,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The length of the statement  "					Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which does not contain block type.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count)); " is 249.
Long Statement,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The length of the statement  "								Communication.SendPrivateInformation (userId' string.Format ("Exclusion: Found grid '{0}' ({1}) which excludes block type of {3} at {4}.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count' pairBlockTypesFilter.Key' pairBlockTypesInGrid.Value)); " is 320.
Long Statement,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The length of the statement  "								Communication.SendPrivateInformation (userId' string.Format ("Exclusion: Found grid '{0}' ({1}) which excludes block type of {3} at {4}.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count' pairBlockTypesFilter.Key' pairBlockTypesInGrid.Value)); " is 320.
Long Statement,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The length of the statement  "		if (isBlockSize && found && blockSize == 2 && (grid.GridSizeEnum != MyCubeSize.Large || grid.GridSizeEnum == MyCubeSize.Large && !grid.IsStatic)) { " is 147.
Long Statement,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The length of the statement  "		if (isBlockSize && found && blockSize == 2 && (grid.GridSizeEnum != MyCubeSize.Large || grid.GridSizeEnum == MyCubeSize.Large && grid.IsStatic)) { " is 146.
Long Statement,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The length of the statement  "			Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) (Owner: {2}) which has specified parameters.  BlockCount={3}"' entity.DisplayName' entity.EntityId' ownerName' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count)); " is 270.
Long Statement,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,DeleteGrids,The length of the statement  "			Logging.WriteLineAndConsole ("Cleanup"' string.Format ("Cleanup Removed Grid - Id: {0} Display: {1} OwnerId: {2} OwnerName: {3}"' entity.EntityId' entity.DisplayName' ownerId' ownerName)); " is 188.
Long Statement,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,IsFullOwner,The length of the statement  "			if (functional.Owner != 0 && (relation == MyRelationsBetweenPlayerAndBlock.Owner || relation == MyRelationsBetweenPlayerAndBlock.FactionShare)) { " is 145.
Long Statement,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,IsFullOwner,The length of the statement  "			} else if (functional.Owner != 0 && relation != MyRelationsBetweenPlayerAndBlock.FactionShare && relation != MyRelationsBetweenPlayerAndBlock.FactionShare) { " is 157.
Long Statement,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,GetConnectedGridList,The length of the statement  "				MyObjectBuilder_MotorAdvancedStator stator = (MyObjectBuilder_MotorAdvancedStator)cubeBlock.GetObjectBuilderCubeBlock (); " is 121.
Long Statement,EssentialsPlugin.Utility,Entity,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Entity.cs,GetBoundingBox,The length of the statement  "	return new OrientedBoundingBoxD (bb.Center' bb.HalfExtents' Quaternion.CreateFromRotationMatrix (entity.WorldMatrix.GetOrientation ())); " is 136.
Long Statement,EssentialsPlugin.Utility,Entity,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Entity.cs,GetBoundingBox,The length of the statement  "	Vector3D expandedSize = new Vector3D (Math.Max (size.X' smallestNotZero) * 2.5f' Math.Max (size.Y' smallestNotZero) * 2.5f' Math.Max (size.Z' smallestNotZero) * 2.5f); " is 167.
Long Statement,EssentialsPlugin.Utility,Entity,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Entity.cs,GetBoundingBox,The length of the statement  "	return new OrientedBoundingBoxD (bb.Center' bb.HalfExtents' Quaternion.CreateFromRotationMatrix (parent.WorldMatrix.GetOrientation ())); " is 136.
Long Statement,EssentialsPlugin.Utility,Entity,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Entity.cs,GetDistanceBetweenGridAndPlayer,The length of the statement  "		if (player.Controller == null || player.Controller.ControlledEntity == null || player.Controller.ControlledEntity.Entity == null) " is 129.
Long Statement,EssentialsPlugin.Utility,Entity,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Entity.cs,GetDistanceBetweenPointAndPlayer,The length of the statement  "		if (player.Controller == null || player.Controller.ControlledEntity == null || player.Controller.ControlledEntity.Entity == null) " is 129.
Long Statement,EssentialsPlugin.Utility,MathUtility,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\MathUtility.cs,RandomPositionFromPoint,The length of the statement  "	Vector3 randomPoint = new Vector3 (m_random.Next (-100000' 100000)' m_random.Next (-100000' 100000)' m_random.Next (-100000' 100000)); " is 134.
Long Statement,EssentialsPlugin.Utility,MathUtility,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\MathUtility.cs,GenerateRandomEdgeVector,The length of the statement  "	return new Vector3 (MathUtility.GenerateRandomCoord (halfExtent)' MathUtility.GenerateRandomCoord (halfExtent)' GenerateRandomCoord (halfExtent)); " is 146.
Long Statement,EssentialsPlugin.Utility,Player,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Player.cs,FindCharacter,The length of the statement  "				if (player.Controller != null && player.Controller.ControlledEntity != null && player.DisplayName.ToLower () == userName.ToLower () && player.Controller.ControlledEntity.Entity.GetTopMostParent () == entity.GetTopMostParent ()) { " is 229.
Long Statement,EssentialsPlugin.Utility,Player,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Player.cs,FindControlledEntity,The length of the statement  "		if (player.DisplayName.ToLower ().Contains (userName) && player.Controller != null && player.Controller.ControlledEntity != null && player.Controller.ControlledEntity.Entity != null) { " is 184.
Long Statement,EssentialsPlugin.Utility,Player,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Player.cs,FindControlledEntity,The length of the statement  "	if (player.Controller != null && player.Controller.ControlledEntity != null && player.Controller.ControlledEntity.Entity != null) { " is 131.
Long Statement,EssentialsPlugin.Utility,Player,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Player.cs,Move,The length of the statement  "	//CharacterEntity charEntity = SectorObjectManager.Instance.GetTypedInternalData<CharacterEntity>().FirstOrDefault(x => x.DisplayName.ToLower() == userName.ToLower() && x.Health > 0); " is 183.
Long Statement,EssentialsPlugin.Utility,Player,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Player.cs,Move,The length of the statement  "		Type someManager = SandboxGameAssemblyWrapper.Instance.GetAssemblyType (SectorObjectManager.EntityBaseNetManagerNamespace' SectorObjectManager.EntityBaseNetManagerClass); " is 170.
Long Statement,EssentialsPlugin.Utility,Player,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Player.cs,CheckPlayerSameFaction,The length of the statement  "	MyObjectBuilder_FactionCollection m_factionCollection = (MyObjectBuilder_FactionCollection)InvokeEntityMethod (FactionsManager.Instance.BackingObject' FactionsManager.FactionManagerGetFactionCollectionMethod); " is 209.
Long Statement,EssentialsPlugin.Utility,Player,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Player.cs,CheckPlayerSameFaction,The length of the statement  "	MyObjectBuilder_Faction faction = m_factionCollection.Factions.FirstOrDefault (f => f.Members.FirstOrDefault (m => m.PlayerId == playerId).PlayerId != 0); " is 154.
Long Statement,EssentialsPlugin.Utility,Player,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Player.cs,InvokeEntityMethod,The length of the statement  "		LogManager.APILog.WriteLine ("Failed to invoke entity method '" + methodName + "' on type '" + gameEntity.GetType ().FullName + "': " + ex.Message); " is 148.
Long Statement,EssentialsPlugin.Utility,Player,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Player.cs,GetEntityMethod,The length of the statement  "				method = type.GetMethod (methodName' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static | BindingFlags.FlattenHierarchy); " is 161.
Long Statement,EssentialsPlugin.Utility,Player,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Player.cs,GetEntityMethod,The length of the statement  "				method = type.GetMethod (methodName' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static | BindingFlags.FlattenHierarchy' Type.DefaultBinder' argTypes' null); " is 197.
Long Statement,EssentialsPlugin.Utility,Players,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Player.cs,ProcessServerLogsForLogins,The length of the statement  "			Logging.WriteLineAndConsole (string.Format ("Completed checking logs in {0}s: {2} ({1}) steamIds"' (DateTime.Now - start).TotalSeconds' playerItems.Count' Players.Instance.PlayerLogins.Count)); " is 193.
Long Statement,EssentialsPlugin.Utility,General,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Utility.cs,InheritsOrImplements,The length of the statement  "		currentChild = currentChild.BaseType != null && currentChild.BaseType.IsGenericType ? currentChild.BaseType.GetGenericTypeDefinition () : currentChild.BaseType; " is 160.
Long Statement,EssentialsPlugin.Utility,Waypoints,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Waypoints.cs,GroupExists,The length of the statement  "			item = waypointItems.FirstOrDefault (x => x.SteamId == (ulong)faction.FactionId && x.Group.ToLower () == group.ToLower ()); " is 123.
Long Statement,EssentialsPlugin.Utility,Waypoints,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Waypoints.cs,SendClientWaypoints,The length of the statement  "			waypoints += string.Format ("/waypoint add \"{0}\" \"{1}\" {2} {3} {4} {5}"' item.Name' item.Text' item.WaypointType' Math.Floor (item.Position.X)' Math.Floor (item.Position.Y)' Math.Floor (item.Position.Z)); " is 208.
Long Statement,EssentialsPlugin.Utility,Waypoints,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Waypoints.cs,SendClientWaypoints,The length of the statement  "				waypoints += string.Format ("/waypoint add \"{0}\" \"{1}\" {2} {3} {4} {5}"' item.Name' item.Text' item.WaypointType' Math.Floor (item.Position.X)' Math.Floor (item.Position.Y)' Math.Floor (item.Position.Z)); " is 208.
Long Statement,EssentialsPlugin.Utility,Wrapper,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Wrapper.cs,GetStaticField,The length of the statement  "		FieldInfo field = objectType.GetField (fieldName' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.FlattenHierarchy); " is 150.
Long Statement,EssentialsPlugin.Utility,Wrapper,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Wrapper.cs,GetStaticField,The length of the statement  "			field = objectType.BaseType.GetField (fieldName' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.FlattenHierarchy); " is 149.
Long Statement,EssentialsPlugin.Utility,Wrapper,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Wrapper.cs,GetEntityField,The length of the statement  "				field = type.GetField (fieldName' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static | BindingFlags.FlattenHierarchy); " is 158.
Long Statement,EssentialsPlugin.Utility,Wrapper,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Wrapper.cs,GetStaticMethod,The length of the statement  "		MethodInfo method = objectType.GetMethod (methodName' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.FlattenHierarchy); " is 154.
Long Statement,EssentialsPlugin.Utility,Wrapper,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Wrapper.cs,GetStaticMethod,The length of the statement  "				method = type.GetMethod (methodName' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.FlattenHierarchy); " is 137.
Long Statement,EssentialsPlugin.Utility,Wrapper,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Wrapper.cs,GetStaticMethod,The length of the statement  "		MethodInfo method = objectType.GetMethod (methodName' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.FlattenHierarchy' Type.DefaultBinder' argTypes' null); " is 190.
Long Statement,EssentialsPlugin.Utility,Wrapper,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Wrapper.cs,GetStaticMethod,The length of the statement  "				method = type.GetMethod (methodName' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.FlattenHierarchy' Type.DefaultBinder' argTypes' null); " is 173.
Long Statement,EssentialsPlugin.Utility,Wrapper,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Wrapper.cs,GetEntityMethod,The length of the statement  "				method = type.GetMethod (methodName' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static | BindingFlags.FlattenHierarchy); " is 161.
Long Statement,EssentialsPlugin.Utility,Wrapper,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Wrapper.cs,GetEntityMethod,The length of the statement  "				method = type.GetMethod (methodName' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static | BindingFlags.FlattenHierarchy' Type.DefaultBinder' argTypes' null); " is 197.
Long Statement,EssentialsPlugin.Utility,Wrapper,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Wrapper.cs,InvokeEntityMethod,The length of the statement  "		LogManager.APILog.WriteLine ("Failed to invoke entity method '" + methodName + "' on type '" + gameEntity.GetType ().FullName + "': " + ex.Message); " is 148.
Long Statement,EssentialsPlugin.Utility,Wrapper,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Wrapper.cs,GetEntityProperty,The length of the statement  "		PropertyInfo property = gameEntity.GetType ().GetProperty (propertyName' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static | BindingFlags.FlattenHierarchy); " is 197.
Long Statement,EssentialsPlugin.Utility,Wrapper,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Wrapper.cs,GetEntityProperty,The length of the statement  "			property = gameEntity.GetType ().BaseType.GetProperty (propertyName' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static | BindingFlags.FlattenHierarchy); " is 193.
Complex Conditional,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,HandleCommand,The conditional expression  "splits.Length != 6 && splits.Length != 7 && splits.Length != 5 && splits.Length != 1"  is complex.
Complex Conditional,EssentialsPlugin,Essentials,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Core.cs,HandleHelpCommand,The conditional expression  "!commands.Contains (commandBase) && (!handler.IsClientOnly ()) && (!handler.IsAdminCommand () || (handler.IsAdminCommand () && (PlayerManager.Instance.IsUserAdmin (remoteUserId) || remoteUserId == 0)))"  is complex.
Complex Conditional,EssentialsPlugin,Essentials,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Core.cs,HandleHelpCommand,The conditional expression  "!commands.Contains (commandBase) && (!handler.IsClientOnly ()) && (!handler.IsAdminCommand () || (handler.IsAdminCommand () && (PlayerManager.Instance.IsUserAdmin (remoteUserId) || remoteUserId == 0)))"  is complex.
Complex Conditional,EssentialsPlugin,Essentials,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Core.cs,HandleHelpCommand,The conditional expression  "handler.GetCommandText ().ToLower ().StartsWith (helpTarget.ToLower ()) && ((!handler.IsAdminCommand ()) || (handler.IsAdminCommand () && (PlayerManager.Instance.IsUserAdmin (remoteUserId) || remoteUserId == 0)))"  is complex.
Complex Conditional,EssentialsPlugin,Essentials,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Core.cs,HandleHelpCommand,The conditional expression  "cmd.ToLower ().StartsWith (helpTarget.ToLower ()) && ((!handler.IsAdminCommand ()) || (handler.IsAdminCommand () && (PlayerManager.Instance.IsUserAdmin (remoteUserId) || remoteUserId == 0)))"  is complex.
Complex Conditional,EssentialsPlugin.EntityManagers,BlockManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\BlockManagement.cs,DisableGrid,The conditional expression  "cubeBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_Reactor) || cubeBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_Thrust) || cubeBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_Battery) || cubeBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_SolarPanel) || cubeBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_Gyro) || cubeBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_MedicalRoom)"  is complex.
Complex Conditional,EssentialsPlugin.ProcessHandler,ProcessRespawn,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessRespawn.cs,Handle,The conditional expression  "character.Health < 1 && m_deathTracker.ContainsKey (entity.EntityId) && !m_respawnShown.Contains (entity.EntityId) && (DateTime.Now - m_deathTracker [entity.EntityId]).TotalSeconds > 3"  is complex.
Complex Conditional,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The conditional expression  "isBlockSize && found && blockSize == 0 && grid.GridSizeEnum != MyCubeSize.Small"  is complex.
Complex Conditional,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The conditional expression  "isBlockSize && found && blockSize == 1 && grid.GridSizeEnum != MyCubeSize.Large"  is complex.
Complex Conditional,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The conditional expression  "isBlockSize && found && blockSize == 2 && (grid.GridSizeEnum != MyCubeSize.Large || grid.GridSizeEnum == MyCubeSize.Large && !grid.IsStatic)"  is complex.
Complex Conditional,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The conditional expression  "isBlockSize && found && blockSize == 2 && (grid.GridSizeEnum != MyCubeSize.Large || grid.GridSizeEnum == MyCubeSize.Large && grid.IsStatic)"  is complex.
Complex Conditional,EssentialsPlugin.Utility,Player,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Player.cs,FindCharacter,The conditional expression  "player.Controller != null && player.Controller.ControlledEntity != null && player.DisplayName.ToLower () == userName.ToLower () && player.Controller.ControlledEntity.Entity.GetTopMostParent () == entity.GetTopMostParent ()"  is complex.
Complex Conditional,EssentialsPlugin.Utility,Player,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Player.cs,FindControlledEntity,The conditional expression  "player.DisplayName.ToLower ().Contains (userName) && player.Controller != null && player.Controller.ControlledEntity != null && player.Controller.ControlledEntity.Entity != null"  is complex.
Empty Catch Block,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,SafeGetObjectBuilder,The method has an empty catch block.
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminConceal,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminConceal\HandleAdminConceal.cs,HandleCommand,The following statement contains a magic number: if (showConcealed) {  	HashSet<IMyEntity> entities = new HashSet<IMyEntity> ();  	Wrapper.GameAction (() => {  		MyAPIGateway.Entities.GetEntities (entities);  	});  	Communication.SendPrivateInformation (userId' "==== Concealed Entities ===");  	int count = 0;  	foreach (IMyEntity entity in entities) {  		if (!(entity is IMyCubeGrid))  			continue;  		if (entity.InScene)  			continue;  		IMyCubeGrid grid = (IMyCubeGrid)entity;  		long ownerId = 0;  		string ownerName = "";  		if (grid.BigOwners.Count > 0) {  			ownerId = grid.BigOwners.First ();  			ownerName = PlayerMap.Instance.GetPlayerItemFromPlayerId (ownerId).Name;  		}  		if (ownerName == "")  			ownerName = "No one";  		Communication.SendPrivateInformation (userId' string.Format ("Id: {0} Display: {1} OwnerId: {2} OwnerName: {3} Position: {4}"' entity.EntityId' entity.DisplayName' ownerId' ownerName' General.Vector3DToString (entity.GetPosition ())));  		count++;  	}  	Communication.SendPrivateInformation (userId' string.Format ("Total concealed entities: {0}"' count));  } else {  	HashSet<IMyEntity> entities = new HashSet<IMyEntity> ();  	Wrapper.GameAction (() => {  		MyAPIGateway.Entities.GetEntities (entities);  	});  	Communication.SendPrivateInformation (userId' "==== Revealed Entities ===");  	Communication.SendPrivateInformation (userId' "==== Unconnected Entities ===");  	HashSet<IMyEntity> entitiesFound = new HashSet<IMyEntity> ();  	CubeGrids.GetGridsUnconnected (entitiesFound' entities);  	int count = 0;  	List<IMySlimBlock> slimBlocks = new List<IMySlimBlock> ();  	foreach (IMyEntity entity in entitiesFound) {  		if (!(entity is IMyCubeGrid))  			continue;  		if (!entity.InScene)  			continue;  		IMyCubeGrid grid = (IMyCubeGrid)entity;  		long ownerId = 0;  		string ownerName = "";  		if (grid.BigOwners.Count > 0) {  			ownerId = grid.BigOwners.First ();  			ownerName = PlayerMap.Instance.GetPlayerItemFromPlayerId (ownerId).Name;  		}  		if (ownerName == "")  			ownerName = "No one";  		grid.GetBlocks (slimBlocks' null);  		Communication.SendPrivateInformation (userId' string.Format ("Id: {0} Display: {1} OwnerId: {2} OwnerName: {3} Position: {4} BlockCount: {5}"' entity.EntityId' entity.DisplayName' ownerId' ownerName' General.Vector3DToString (entity.GetPosition ())' slimBlocks.Count));  		slimBlocks.Clear ();  		count++;  	}  	Communication.SendPrivateInformation (userId' string.Format ("Total unconnected revealed entities: {0}"' count));  	Communication.SendPrivateInformation (userId' "==== Connected Entities ===");  	HashSet<IMyEntity> connectedFound = new HashSet<IMyEntity> ();  	CubeGrids.GetConnectedGrids (connectedFound);  	Console.WriteLine ("Here: {0} : {1} {2}"' connectedFound.Intersect (entitiesFound).Count ()' entitiesFound.Count' connectedFound.Count);  	count = 0;  	slimBlocks.Clear ();  	foreach (IMyEntity entity in connectedFound) {  		if (!(entity is IMyCubeGrid))  			continue;  		if (entitiesFound.Contains (entity))  			continue;  		if (!entity.InScene)  			continue;  		if (CubeGrids.GetRecursiveGridList ((IMyCubeGrid)entity).Count < 2)  			continue;  		IMyCubeGrid grid = (IMyCubeGrid)entity;  		long ownerId = 0;  		string ownerName = "";  		if (grid.BigOwners.Count > 0) {  			ownerId = grid.BigOwners.First ();  			ownerName = PlayerMap.Instance.GetPlayerItemFromPlayerId (ownerId).Name;  		}  		if (ownerName == "")  			ownerName = "No one";  		grid.GetBlocks (slimBlocks' null);  		Communication.SendPrivateInformation (userId' string.Format ("Id: {0} Display: {1} OwnerId: {2} OwnerName: {3} Position: {4} BlockCount: {5} Connections: {6}"' entity.EntityId' entity.DisplayName' ownerId' ownerName' General.Vector3DToString (entity.GetPosition ())' slimBlocks.Count' CubeGrids.GetRecursiveGridList (grid).Count));  		//Communication.SendPrivateInformation(userId' string.Format("Id: {0} Display: {1} OwnerId: {2} OwnerName: {3} Position: {4} BlockCount: {5} Connections: {6}"' entity.EntityId' entity.DisplayName' ownerId' ownerName' General.Vector3DToString(entity.GetPosition())' slimBlocks.Count));  		slimBlocks.Clear ();  		count++;  	}  	Communication.SendPrivateInformation (userId' string.Format ("Total connected revealed entities: {0}"' count));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminConceal,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminConceal\HandleAdminConceal.cs,HandleCommand,The following statement contains a magic number: foreach (IMyEntity entity in connectedFound) {  	if (!(entity is IMyCubeGrid))  		continue;  	if (entitiesFound.Contains (entity))  		continue;  	if (!entity.InScene)  		continue;  	if (CubeGrids.GetRecursiveGridList ((IMyCubeGrid)entity).Count < 2)  		continue;  	IMyCubeGrid grid = (IMyCubeGrid)entity;  	long ownerId = 0;  	string ownerName = "";  	if (grid.BigOwners.Count > 0) {  		ownerId = grid.BigOwners.First ();  		ownerName = PlayerMap.Instance.GetPlayerItemFromPlayerId (ownerId).Name;  	}  	if (ownerName == "")  		ownerName = "No one";  	grid.GetBlocks (slimBlocks' null);  	Communication.SendPrivateInformation (userId' string.Format ("Id: {0} Display: {1} OwnerId: {2} OwnerName: {3} Position: {4} BlockCount: {5} Connections: {6}"' entity.EntityId' entity.DisplayName' ownerId' ownerName' General.Vector3DToString (entity.GetPosition ())' slimBlocks.Count' CubeGrids.GetRecursiveGridList (grid).Count));  	//Communication.SendPrivateInformation(userId' string.Format("Id: {0} Display: {1} OwnerId: {2} OwnerName: {3} Position: {4} BlockCount: {5} Connections: {6}"' entity.EntityId' entity.DisplayName' ownerId' ownerName' General.Vector3DToString(entity.GetPosition())' slimBlocks.Count));  	slimBlocks.Clear ();  	count++;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminConceal,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminConceal\HandleAdminConceal.cs,HandleCommand,The following statement contains a magic number: if (CubeGrids.GetRecursiveGridList ((IMyCubeGrid)entity).Count < 2)  	continue;  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminDeleteInactive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteInactive.cs,HandleCommand,The following statement contains a magic number: if (words.Count () > 3)  	return false;  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminMoveGridTo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveGridTo.cs,HandleCommand,The following statement contains a magic number: if (words.Count () < 2) {  	Communication.SendPrivateInformation (userId' GetHelp ());  	return true;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminMoveGridTo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveGridTo.cs,HandleCommand,The following statement contains a magic number: if (words.Count () > 2) {  	parse = float.TryParse (words [words.Count () - 1]' out distance);  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminMoveGridTo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveGridTo.cs,HandleCommand,The following statement contains a magic number: if (parse)  	targetName = string.Join (" "' words.Skip (1).Take (words.Count () - 2).ToArray ());  else  	targetName = string.Join (" "' words.Skip (1).ToArray ());  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminMoveGridTo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveGridTo.cs,HandleCommand,The following statement contains a magic number: targetName = string.Join (" "' words.Skip (1).Take (words.Count () - 2).ToArray ());  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminMoveGridTo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveGridTo.cs,HandleCommand,The following statement contains a magic number: Thread.Sleep (5000);  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminMoveGridTo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveGridTo.cs,HandleCommand,The following statement contains a magic number: Thread.Sleep (10000);  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminPlayer,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminPlayer\HandleAdminPlayer.cs,HandleCommand,The following statement contains a magic number: foreach (long owner in playerOwners) {  	MyObjectBuilder_Checkpoint.PlayerItem item = PlayerMap.Instance.GetPlayerItemFromPlayerId (owner);  	if (item.SteamId == 0)  		continue;  	PlayerItem playerItem;  	if (!Players.Instance.PlayerLogins.ContainsKey (item.SteamId)) {  		Communication.SendPrivateInformation (userId' string.Format ("No login information: {0}"' item.Name));  		noLogin.Add (owner);  		continue;  	}  	playerItem = Players.Instance.PlayerLogins [item.SteamId];  	if (DateTime.Now - playerItem.LastLogin > TimeSpan.FromDays (20)) {  		Communication.SendPrivateInformation (userId' string.Format ("Player hasn't logged in 20 days: {0}"' item.Name));  		badPlayers.Add (owner);  	}  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminPlayer,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminPlayer\HandleAdminPlayer.cs,HandleCommand,The following statement contains a magic number: if (DateTime.Now - playerItem.LastLogin > TimeSpan.FromDays (20)) {  	Communication.SendPrivateInformation (userId' string.Format ("Player hasn't logged in 20 days: {0}"' item.Name));  	badPlayers.Add (owner);  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminScanOverlimit,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanOverlimit.cs,HandleCommand,The following statement contains a magic number: if (words.Count () != 2) {  	Communication.SendPrivateInformation (userId' GetHelp ());  	return true;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminDeleteStationsArea,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteStationsArea.cs,HandleCommand,The following statement contains a magic number: if (words.Count () != 4 && words.Count () != 0)  	return false;  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminDeleteStationsArea,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteStationsArea.cs,HandleCommand,The following statement contains a magic number: for (int r = 0; r < 4; r++) {  	if (!float.TryParse (words [r]' out test)) {  		Communication.SendPrivateInformation (userId' string.Format ("The value at position {0} - '{1}' is invalid.  Please try the command again."' r + 1' words [r]));  		return true;  	}  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminDeleteShipsArea,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteShipsArea.cs,HandleCommand,The following statement contains a magic number: if (words.Count () != 4 && words.Count () != 0)  	return false;  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminDeleteShipsArea,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteShipsArea.cs,HandleCommand,The following statement contains a magic number: if (words.Count () != 4) {  	Communication.SendPrivateInformation (userId' GetHelp ());  	return true;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminDeleteShipsArea,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteShipsArea.cs,HandleCommand,The following statement contains a magic number: for (int r = 0; r < 4; r++) {  	if (!float.TryParse (words [r]' out test)) {  		Communication.SendPrivateInformation (userId' string.Format ("The value at position {0} - '{1}' is invalid.  Please try the command again."' r + 1' words [r]));  		return true;  	}  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminMovePlayerTo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMovePlayerTo.cs,HandleCommand,The following statement contains a magic number: if (words.Count () < 2) {  	Communication.SendPrivateInformation (userId' GetHelp ());  	return true;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminMovePlayerTo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMovePlayerTo.cs,HandleCommand,The following statement contains a magic number: if (words.Count () > 2) {  	parse = float.TryParse (words [words.Count () - 1]' out distance);  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminMovePlayerTo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMovePlayerTo.cs,HandleCommand,The following statement contains a magic number: if (parse)  	targetName = string.Join (" "' words.Skip (1).Take (words.Count () - 2).ToArray ());  else  	targetName = string.Join (" "' words.Skip (1).ToArray ());  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminMovePlayerTo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMovePlayerTo.cs,HandleCommand,The following statement contains a magic number: targetName = string.Join (" "' words.Skip (1).Take (words.Count () - 2).ToArray ());  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminMovePlayerPosition,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMovePlayerPosition.cs,HandleCommand,The following statement contains a magic number: if (words.Count () != 4 && words.Count () != 0)  	return false;  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminMovePlayerPosition,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMovePlayerPosition.cs,HandleCommand,The following statement contains a magic number: if (words.Count () != 4) {  	Communication.SendPrivateInformation (userId' GetHelp ());  	return true;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminMovePlayerPosition,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMovePlayerPosition.cs,HandleCommand,The following statement contains a magic number: for (int r = 1; r < 4; r++) {  	if (!float.TryParse (words [r]' out test)) {  		Communication.SendPrivateInformation (userId' string.Format ("The value at position {0} - '{1}' is invalid.  Please try the command again."' r + 1' words [r]));  		return true;  	}  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminMoveAreaTowards,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveAreaTowards.cs,HandleCommand,The following statement contains a magic number: if (words.Count () != 8 && words.Count () != 0)  	return false;  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminMoveAreaTowards,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveAreaTowards.cs,HandleCommand,The following statement contains a magic number: if (words.Count () != 8) {  	Communication.SendPrivateInformation (userId' GetHelp ());  	return true;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminMoveAreaTowards,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveAreaTowards.cs,HandleCommand,The following statement contains a magic number: for (int r = 0; r < 7; r++) {  	if (!float.TryParse (words [r]' out test)) {  		Communication.SendPrivateInformation (userId' string.Format ("The value at position {0} - '{1}' is invalid.  Please try the command again."' r + 1' words [r]));  		return true;  	}  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminMoveAreaTowards,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveAreaTowards.cs,HandleCommand,The following statement contains a magic number: Thread.Sleep (5000);  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminMoveAreaTowards,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveAreaTowards.cs,HandleCommand,The following statement contains a magic number: Thread.Sleep (10000);  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminScanAreaTowards,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanAreaTowards.cs,HandleCommand,The following statement contains a magic number: if (words.Count () != 8 && words.Count () != 0)  	return false;  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminScanAreaTowards,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanAreaTowards.cs,HandleCommand,The following statement contains a magic number: if (words.Count () != 8) {  	Communication.SendPrivateInformation (userId' GetHelp ());  	return true;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminScanAreaTowards,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanAreaTowards.cs,HandleCommand,The following statement contains a magic number: for (int r = 0; r < 8; r++) {  	if (!float.TryParse (words [r]' out test)) {  		Communication.SendPrivateInformation (userId' string.Format ("The value at position {0} - '{1}' is invalid.  Please try the command again."' r + 1' words [r]));  		return true;  	}  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockUndock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockUndock.cs,HandleCommand,The following statement contains a magic number: try {  	String pylonName = String.Join (" "' words);  	if (PlayerMap.Instance.GetPlayerIdsFromSteamId (userId).Count < 1) {  		Communication.SendPrivateInformation (userId' string.Format ("Unable to find player Id: {0}"' userId));  		return true;  	}  	long playerId = PlayerMap.Instance.GetPlayerIdsFromSteamId (userId).First ();  	Dictionary<String' List<IMyCubeBlock>> testList;  	List<IMyCubeBlock> beaconList;  	DockingZone.FindByName (pylonName' out testList' out beaconList' playerId);  	if (beaconList.Count == 4) {  		foreach (IMyCubeBlock entity in beaconList) {  			if (!Entity.CheckOwnership (entity' playerId)) {  				Communication.SendPrivateInformation (userId' string.Format ("You do not have permission to use '{0}'.  You must either own all the beacons or they must be shared with faction."' pylonName));  				return true;  			}  		}  		IMyCubeBlock e = beaconList.First ();  		IMyCubeGrid parent = (IMyCubeGrid)e.Parent;  		long[] beaconListIds = beaconList.Select (p => p.EntityId).ToArray ();  		long ownerId = beaconList.First ().OwnerId;  		List<DockingItem> dockingItems = Docking.Instance.Find (d => d.PlayerId == ownerId && d.TargetEntityId == parent.EntityId && d.DockingBeaconIds.Intersect (beaconListIds).Count () == 4);  		if (dockingItems.Count < 1) {  			Communication.SendPrivateInformation (userId' string.Format ("You have no ships docked in docking zone '{0}'."' pylonName));  			return true;  		}  		DockingItem dockingItem = dockingItems.First ();  		// Figure out center of docking area' and other distance information  		double maxDistance = 99;  		Vector3D vPos = new Vector3D (0' 0' 0);  		foreach (IMyCubeBlock b in beaconList) {  			Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  			vPos += beaconPos;  		}  		vPos = vPos / 4;  		foreach (IMyCubeBlock b in beaconList) {  			Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  			maxDistance = Math.Min (maxDistance' Vector3D.Distance (vPos' beaconPos));  		}  		List<IMySlimBlock> blocks = new List<IMySlimBlock> ();  		parent.GetBlocks (blocks);  		foreach (IMySlimBlock slim_cbe in blocks) {  			if (slim_cbe is IMyCubeBlock) {  				IMyCubeBlock cbe = slim_cbe.FatBlock;  				if (cbe.GetObjectBuilderCubeBlock () is MyObjectBuilder_Cockpit) {  					MyObjectBuilder_Cockpit c = (MyObjectBuilder_Cockpit)cbe.GetObjectBuilderCubeBlock ();  					if (c.Pilot != null) {  						Communication.SendPrivateInformation (userId' string.Format ("Carrier ship has a pilot.  The carrier should be unpiloted and fully stopped before undocking.  (Sometimes this can lag a bit.  Wait 10 seconds and try again)"' pylonName));  						return true;  					}  				}  			}  		}  		String dockedShipFileName = Essentials.PluginPath + String.Format ("\\Docking\\docked_{0}_{1}_{2}.sbc"' ownerId' dockingItem.TargetEntityId' dockingItem.DockedEntityId);  		// Load Entity From File and add to game  		FileInfo fileInfo = new FileInfo (dockedShipFileName);  		//CubeGridEntity cubeGrid = new CubeGridEntity(fileInfo);  		MyObjectBuilder_CubeGrid cubeGrid = BaseObjectManager.ReadSpaceEngineersFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer> (dockedShipFileName);  		// Rotate our ship relative to our saved rotation and the new carrier rotation                  		cubeGrid.PositionAndOrientation = new MyPositionAndOrientation (Matrix.CreateFromQuaternion (Quaternion.CreateFromRotationMatrix (parent.Physics.GetWorldMatrix ().GetOrientation ()) * dockingItem.SaveQuat).GetOrientation ());  		// Move our ship relative to the new carrier position and orientation  		Quaternion newQuat = Quaternion.CreateFromRotationMatrix (parent.Physics.GetWorldMatrix ().GetOrientation ());  		Vector3D rotatedPos = Vector3D.Transform (dockingItem.SavePos' newQuat);  		//cubeGrid.Position = rotatedPos + parent.GetPosition();				  		cubeGrid.PositionAndOrientation = new MyPositionAndOrientation (rotatedPos + parent.GetPosition ()' cubeGrid.PositionAndOrientation.Value.Forward' cubeGrid.PositionAndOrientation.Value.Up);  		// Add object to world  		cubeGrid.EntityId = BaseEntity.GenerateEntityId ();  		cubeGrid.LinearVelocity = Vector3.Zero;  		cubeGrid.AngularVelocity = Vector3.Zero;  		bool undock = false;  		Wrapper.GameAction (() => {  			try {  				MyAPIGateway.Entities.CreateFromObjectBuilderAndAdd (cubeGrid);  				List<MyObjectBuilder_EntityBase> addList = new List<MyObjectBuilder_EntityBase> ();  				addList.Add (cubeGrid);  				MyAPIGateway.Multiplayer.SendEntitiesCreated (addList);  				undock = true;  			} catch (Exception Ex) {  				Logging.WriteLineAndConsole (string.Format ("Error undocking ship: {0}"' Ex.ToString ()));  				Communication.SendPrivateInformation (userId' string.Format ("Unable to undock ship due to error."));  			}  		});  		if (!undock)  			return true;  		//SectorObjectManager.Instance.AddEntity(cubeGrid);  		// Remove the docking file  		File.Delete (dockedShipFileName);  		Docking.Instance.Remove (dockingItem);  		Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' has been undocked from docking zone '{1}'"' dockingItem.DockedName' pylonName));  		/* 					// Queue for cooldown 					DockingCooldownItem cItem = new DockingCooldownItem(); 					cItem.Name = pylonName; 					cItem.startTime = DateTime.Now;  					lock (m_cooldownList) 						m_cooldownList.Add(cItem);  					IMyEntity gridEntity = MyAPIGateway.Entities.GetEntityById(dockingItem.DockedEntityId); 					IMyCubeGrid cubeGrid = (IMyCubeGrid)gridEntity;  					Quaternion q = Quaternion.CreateFromRotationMatrix(parent.WorldMatrix.GetOrientation()) * dockingItem.SaveQuat; 					Quaternion newQuat = Quaternion.CreateFromRotationMatrix(parent.WorldMatrix.GetOrientation()); 					Vector3 parentPosition = parent.GetPosition(); 					Vector3 rotatedPos = Vector3.Transform(dockingItem.savePos' newQuat); 					Vector3 position = rotatedPos + parentPosition; 					Matrix positionMatrix = Matrix.CreateFromQuaternion(q);  					cubeGrid.ChangeGridOwnership(playerId' MyOwnershipShareModeEnum.None); 					gridEntity.SetPosition(dockingItem.savePos);  					gridEntity.WorldMatrix = positionMatrix; 					gridEntity.SetPosition(position);  					// We need to update again' as this doesn't seem to sync properly?  I set world matrix' and setposition' and it doesn't go where it should' and I 					// have to bump into it for it to show up' it's mega weird.  					if (PluginDocking.Settings.DockingItems == null) 						throw new Exception("DockingItems is null");  					// Remove from docked items 					PluginDocking.Settings.DockingItems.Remove(dockingItem);  					// Notify user 					Communication.SendPrivateInformation(userId' string.Format("The ship '{0}' has been undocked from docking zone '{1}'"' gridEntity.DisplayName' pylonName)); 					*/// Queue for cooldown  		/* 					DockingCooldownItem cItem = new DockingCooldownItem(); 					cItem.name = pylonName; 					cItem.startTime = DateTime.Now; 					PluginDocking.CooldownList.Add(cItem); 					 */} else if (beaconList.Count > 4)// Too many beacons' must be 4  	 {  		Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName));  	} else// Can't find docking zone  	 {  		Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'.  There must be 4 beacons with the name '{0}' to create a docking zone.  Beacons must be fully built!"' pylonName));  	}  } finally {  	m_undocking = false;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockUndock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockUndock.cs,HandleCommand,The following statement contains a magic number: try {  	String pylonName = String.Join (" "' words);  	if (PlayerMap.Instance.GetPlayerIdsFromSteamId (userId).Count < 1) {  		Communication.SendPrivateInformation (userId' string.Format ("Unable to find player Id: {0}"' userId));  		return true;  	}  	long playerId = PlayerMap.Instance.GetPlayerIdsFromSteamId (userId).First ();  	Dictionary<String' List<IMyCubeBlock>> testList;  	List<IMyCubeBlock> beaconList;  	DockingZone.FindByName (pylonName' out testList' out beaconList' playerId);  	if (beaconList.Count == 4) {  		foreach (IMyCubeBlock entity in beaconList) {  			if (!Entity.CheckOwnership (entity' playerId)) {  				Communication.SendPrivateInformation (userId' string.Format ("You do not have permission to use '{0}'.  You must either own all the beacons or they must be shared with faction."' pylonName));  				return true;  			}  		}  		IMyCubeBlock e = beaconList.First ();  		IMyCubeGrid parent = (IMyCubeGrid)e.Parent;  		long[] beaconListIds = beaconList.Select (p => p.EntityId).ToArray ();  		long ownerId = beaconList.First ().OwnerId;  		List<DockingItem> dockingItems = Docking.Instance.Find (d => d.PlayerId == ownerId && d.TargetEntityId == parent.EntityId && d.DockingBeaconIds.Intersect (beaconListIds).Count () == 4);  		if (dockingItems.Count < 1) {  			Communication.SendPrivateInformation (userId' string.Format ("You have no ships docked in docking zone '{0}'."' pylonName));  			return true;  		}  		DockingItem dockingItem = dockingItems.First ();  		// Figure out center of docking area' and other distance information  		double maxDistance = 99;  		Vector3D vPos = new Vector3D (0' 0' 0);  		foreach (IMyCubeBlock b in beaconList) {  			Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  			vPos += beaconPos;  		}  		vPos = vPos / 4;  		foreach (IMyCubeBlock b in beaconList) {  			Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  			maxDistance = Math.Min (maxDistance' Vector3D.Distance (vPos' beaconPos));  		}  		List<IMySlimBlock> blocks = new List<IMySlimBlock> ();  		parent.GetBlocks (blocks);  		foreach (IMySlimBlock slim_cbe in blocks) {  			if (slim_cbe is IMyCubeBlock) {  				IMyCubeBlock cbe = slim_cbe.FatBlock;  				if (cbe.GetObjectBuilderCubeBlock () is MyObjectBuilder_Cockpit) {  					MyObjectBuilder_Cockpit c = (MyObjectBuilder_Cockpit)cbe.GetObjectBuilderCubeBlock ();  					if (c.Pilot != null) {  						Communication.SendPrivateInformation (userId' string.Format ("Carrier ship has a pilot.  The carrier should be unpiloted and fully stopped before undocking.  (Sometimes this can lag a bit.  Wait 10 seconds and try again)"' pylonName));  						return true;  					}  				}  			}  		}  		String dockedShipFileName = Essentials.PluginPath + String.Format ("\\Docking\\docked_{0}_{1}_{2}.sbc"' ownerId' dockingItem.TargetEntityId' dockingItem.DockedEntityId);  		// Load Entity From File and add to game  		FileInfo fileInfo = new FileInfo (dockedShipFileName);  		//CubeGridEntity cubeGrid = new CubeGridEntity(fileInfo);  		MyObjectBuilder_CubeGrid cubeGrid = BaseObjectManager.ReadSpaceEngineersFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer> (dockedShipFileName);  		// Rotate our ship relative to our saved rotation and the new carrier rotation                  		cubeGrid.PositionAndOrientation = new MyPositionAndOrientation (Matrix.CreateFromQuaternion (Quaternion.CreateFromRotationMatrix (parent.Physics.GetWorldMatrix ().GetOrientation ()) * dockingItem.SaveQuat).GetOrientation ());  		// Move our ship relative to the new carrier position and orientation  		Quaternion newQuat = Quaternion.CreateFromRotationMatrix (parent.Physics.GetWorldMatrix ().GetOrientation ());  		Vector3D rotatedPos = Vector3D.Transform (dockingItem.SavePos' newQuat);  		//cubeGrid.Position = rotatedPos + parent.GetPosition();				  		cubeGrid.PositionAndOrientation = new MyPositionAndOrientation (rotatedPos + parent.GetPosition ()' cubeGrid.PositionAndOrientation.Value.Forward' cubeGrid.PositionAndOrientation.Value.Up);  		// Add object to world  		cubeGrid.EntityId = BaseEntity.GenerateEntityId ();  		cubeGrid.LinearVelocity = Vector3.Zero;  		cubeGrid.AngularVelocity = Vector3.Zero;  		bool undock = false;  		Wrapper.GameAction (() => {  			try {  				MyAPIGateway.Entities.CreateFromObjectBuilderAndAdd (cubeGrid);  				List<MyObjectBuilder_EntityBase> addList = new List<MyObjectBuilder_EntityBase> ();  				addList.Add (cubeGrid);  				MyAPIGateway.Multiplayer.SendEntitiesCreated (addList);  				undock = true;  			} catch (Exception Ex) {  				Logging.WriteLineAndConsole (string.Format ("Error undocking ship: {0}"' Ex.ToString ()));  				Communication.SendPrivateInformation (userId' string.Format ("Unable to undock ship due to error."));  			}  		});  		if (!undock)  			return true;  		//SectorObjectManager.Instance.AddEntity(cubeGrid);  		// Remove the docking file  		File.Delete (dockedShipFileName);  		Docking.Instance.Remove (dockingItem);  		Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' has been undocked from docking zone '{1}'"' dockingItem.DockedName' pylonName));  		/* 					// Queue for cooldown 					DockingCooldownItem cItem = new DockingCooldownItem(); 					cItem.Name = pylonName; 					cItem.startTime = DateTime.Now;  					lock (m_cooldownList) 						m_cooldownList.Add(cItem);  					IMyEntity gridEntity = MyAPIGateway.Entities.GetEntityById(dockingItem.DockedEntityId); 					IMyCubeGrid cubeGrid = (IMyCubeGrid)gridEntity;  					Quaternion q = Quaternion.CreateFromRotationMatrix(parent.WorldMatrix.GetOrientation()) * dockingItem.SaveQuat; 					Quaternion newQuat = Quaternion.CreateFromRotationMatrix(parent.WorldMatrix.GetOrientation()); 					Vector3 parentPosition = parent.GetPosition(); 					Vector3 rotatedPos = Vector3.Transform(dockingItem.savePos' newQuat); 					Vector3 position = rotatedPos + parentPosition; 					Matrix positionMatrix = Matrix.CreateFromQuaternion(q);  					cubeGrid.ChangeGridOwnership(playerId' MyOwnershipShareModeEnum.None); 					gridEntity.SetPosition(dockingItem.savePos);  					gridEntity.WorldMatrix = positionMatrix; 					gridEntity.SetPosition(position);  					// We need to update again' as this doesn't seem to sync properly?  I set world matrix' and setposition' and it doesn't go where it should' and I 					// have to bump into it for it to show up' it's mega weird.  					if (PluginDocking.Settings.DockingItems == null) 						throw new Exception("DockingItems is null");  					// Remove from docked items 					PluginDocking.Settings.DockingItems.Remove(dockingItem);  					// Notify user 					Communication.SendPrivateInformation(userId' string.Format("The ship '{0}' has been undocked from docking zone '{1}'"' gridEntity.DisplayName' pylonName)); 					*/// Queue for cooldown  		/* 					DockingCooldownItem cItem = new DockingCooldownItem(); 					cItem.name = pylonName; 					cItem.startTime = DateTime.Now; 					PluginDocking.CooldownList.Add(cItem); 					 */} else if (beaconList.Count > 4)// Too many beacons' must be 4  	 {  		Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName));  	} else// Can't find docking zone  	 {  		Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'.  There must be 4 beacons with the name '{0}' to create a docking zone.  Beacons must be fully built!"' pylonName));  	}  } finally {  	m_undocking = false;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockUndock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockUndock.cs,HandleCommand,The following statement contains a magic number: try {  	String pylonName = String.Join (" "' words);  	if (PlayerMap.Instance.GetPlayerIdsFromSteamId (userId).Count < 1) {  		Communication.SendPrivateInformation (userId' string.Format ("Unable to find player Id: {0}"' userId));  		return true;  	}  	long playerId = PlayerMap.Instance.GetPlayerIdsFromSteamId (userId).First ();  	Dictionary<String' List<IMyCubeBlock>> testList;  	List<IMyCubeBlock> beaconList;  	DockingZone.FindByName (pylonName' out testList' out beaconList' playerId);  	if (beaconList.Count == 4) {  		foreach (IMyCubeBlock entity in beaconList) {  			if (!Entity.CheckOwnership (entity' playerId)) {  				Communication.SendPrivateInformation (userId' string.Format ("You do not have permission to use '{0}'.  You must either own all the beacons or they must be shared with faction."' pylonName));  				return true;  			}  		}  		IMyCubeBlock e = beaconList.First ();  		IMyCubeGrid parent = (IMyCubeGrid)e.Parent;  		long[] beaconListIds = beaconList.Select (p => p.EntityId).ToArray ();  		long ownerId = beaconList.First ().OwnerId;  		List<DockingItem> dockingItems = Docking.Instance.Find (d => d.PlayerId == ownerId && d.TargetEntityId == parent.EntityId && d.DockingBeaconIds.Intersect (beaconListIds).Count () == 4);  		if (dockingItems.Count < 1) {  			Communication.SendPrivateInformation (userId' string.Format ("You have no ships docked in docking zone '{0}'."' pylonName));  			return true;  		}  		DockingItem dockingItem = dockingItems.First ();  		// Figure out center of docking area' and other distance information  		double maxDistance = 99;  		Vector3D vPos = new Vector3D (0' 0' 0);  		foreach (IMyCubeBlock b in beaconList) {  			Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  			vPos += beaconPos;  		}  		vPos = vPos / 4;  		foreach (IMyCubeBlock b in beaconList) {  			Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  			maxDistance = Math.Min (maxDistance' Vector3D.Distance (vPos' beaconPos));  		}  		List<IMySlimBlock> blocks = new List<IMySlimBlock> ();  		parent.GetBlocks (blocks);  		foreach (IMySlimBlock slim_cbe in blocks) {  			if (slim_cbe is IMyCubeBlock) {  				IMyCubeBlock cbe = slim_cbe.FatBlock;  				if (cbe.GetObjectBuilderCubeBlock () is MyObjectBuilder_Cockpit) {  					MyObjectBuilder_Cockpit c = (MyObjectBuilder_Cockpit)cbe.GetObjectBuilderCubeBlock ();  					if (c.Pilot != null) {  						Communication.SendPrivateInformation (userId' string.Format ("Carrier ship has a pilot.  The carrier should be unpiloted and fully stopped before undocking.  (Sometimes this can lag a bit.  Wait 10 seconds and try again)"' pylonName));  						return true;  					}  				}  			}  		}  		String dockedShipFileName = Essentials.PluginPath + String.Format ("\\Docking\\docked_{0}_{1}_{2}.sbc"' ownerId' dockingItem.TargetEntityId' dockingItem.DockedEntityId);  		// Load Entity From File and add to game  		FileInfo fileInfo = new FileInfo (dockedShipFileName);  		//CubeGridEntity cubeGrid = new CubeGridEntity(fileInfo);  		MyObjectBuilder_CubeGrid cubeGrid = BaseObjectManager.ReadSpaceEngineersFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer> (dockedShipFileName);  		// Rotate our ship relative to our saved rotation and the new carrier rotation                  		cubeGrid.PositionAndOrientation = new MyPositionAndOrientation (Matrix.CreateFromQuaternion (Quaternion.CreateFromRotationMatrix (parent.Physics.GetWorldMatrix ().GetOrientation ()) * dockingItem.SaveQuat).GetOrientation ());  		// Move our ship relative to the new carrier position and orientation  		Quaternion newQuat = Quaternion.CreateFromRotationMatrix (parent.Physics.GetWorldMatrix ().GetOrientation ());  		Vector3D rotatedPos = Vector3D.Transform (dockingItem.SavePos' newQuat);  		//cubeGrid.Position = rotatedPos + parent.GetPosition();				  		cubeGrid.PositionAndOrientation = new MyPositionAndOrientation (rotatedPos + parent.GetPosition ()' cubeGrid.PositionAndOrientation.Value.Forward' cubeGrid.PositionAndOrientation.Value.Up);  		// Add object to world  		cubeGrid.EntityId = BaseEntity.GenerateEntityId ();  		cubeGrid.LinearVelocity = Vector3.Zero;  		cubeGrid.AngularVelocity = Vector3.Zero;  		bool undock = false;  		Wrapper.GameAction (() => {  			try {  				MyAPIGateway.Entities.CreateFromObjectBuilderAndAdd (cubeGrid);  				List<MyObjectBuilder_EntityBase> addList = new List<MyObjectBuilder_EntityBase> ();  				addList.Add (cubeGrid);  				MyAPIGateway.Multiplayer.SendEntitiesCreated (addList);  				undock = true;  			} catch (Exception Ex) {  				Logging.WriteLineAndConsole (string.Format ("Error undocking ship: {0}"' Ex.ToString ()));  				Communication.SendPrivateInformation (userId' string.Format ("Unable to undock ship due to error."));  			}  		});  		if (!undock)  			return true;  		//SectorObjectManager.Instance.AddEntity(cubeGrid);  		// Remove the docking file  		File.Delete (dockedShipFileName);  		Docking.Instance.Remove (dockingItem);  		Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' has been undocked from docking zone '{1}'"' dockingItem.DockedName' pylonName));  		/* 					// Queue for cooldown 					DockingCooldownItem cItem = new DockingCooldownItem(); 					cItem.Name = pylonName; 					cItem.startTime = DateTime.Now;  					lock (m_cooldownList) 						m_cooldownList.Add(cItem);  					IMyEntity gridEntity = MyAPIGateway.Entities.GetEntityById(dockingItem.DockedEntityId); 					IMyCubeGrid cubeGrid = (IMyCubeGrid)gridEntity;  					Quaternion q = Quaternion.CreateFromRotationMatrix(parent.WorldMatrix.GetOrientation()) * dockingItem.SaveQuat; 					Quaternion newQuat = Quaternion.CreateFromRotationMatrix(parent.WorldMatrix.GetOrientation()); 					Vector3 parentPosition = parent.GetPosition(); 					Vector3 rotatedPos = Vector3.Transform(dockingItem.savePos' newQuat); 					Vector3 position = rotatedPos + parentPosition; 					Matrix positionMatrix = Matrix.CreateFromQuaternion(q);  					cubeGrid.ChangeGridOwnership(playerId' MyOwnershipShareModeEnum.None); 					gridEntity.SetPosition(dockingItem.savePos);  					gridEntity.WorldMatrix = positionMatrix; 					gridEntity.SetPosition(position);  					// We need to update again' as this doesn't seem to sync properly?  I set world matrix' and setposition' and it doesn't go where it should' and I 					// have to bump into it for it to show up' it's mega weird.  					if (PluginDocking.Settings.DockingItems == null) 						throw new Exception("DockingItems is null");  					// Remove from docked items 					PluginDocking.Settings.DockingItems.Remove(dockingItem);  					// Notify user 					Communication.SendPrivateInformation(userId' string.Format("The ship '{0}' has been undocked from docking zone '{1}'"' gridEntity.DisplayName' pylonName)); 					*/// Queue for cooldown  		/* 					DockingCooldownItem cItem = new DockingCooldownItem(); 					cItem.name = pylonName; 					cItem.startTime = DateTime.Now; 					PluginDocking.CooldownList.Add(cItem); 					 */} else if (beaconList.Count > 4)// Too many beacons' must be 4  	 {  		Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName));  	} else// Can't find docking zone  	 {  		Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'.  There must be 4 beacons with the name '{0}' to create a docking zone.  Beacons must be fully built!"' pylonName));  	}  } finally {  	m_undocking = false;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockUndock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockUndock.cs,HandleCommand,The following statement contains a magic number: try {  	String pylonName = String.Join (" "' words);  	if (PlayerMap.Instance.GetPlayerIdsFromSteamId (userId).Count < 1) {  		Communication.SendPrivateInformation (userId' string.Format ("Unable to find player Id: {0}"' userId));  		return true;  	}  	long playerId = PlayerMap.Instance.GetPlayerIdsFromSteamId (userId).First ();  	Dictionary<String' List<IMyCubeBlock>> testList;  	List<IMyCubeBlock> beaconList;  	DockingZone.FindByName (pylonName' out testList' out beaconList' playerId);  	if (beaconList.Count == 4) {  		foreach (IMyCubeBlock entity in beaconList) {  			if (!Entity.CheckOwnership (entity' playerId)) {  				Communication.SendPrivateInformation (userId' string.Format ("You do not have permission to use '{0}'.  You must either own all the beacons or they must be shared with faction."' pylonName));  				return true;  			}  		}  		IMyCubeBlock e = beaconList.First ();  		IMyCubeGrid parent = (IMyCubeGrid)e.Parent;  		long[] beaconListIds = beaconList.Select (p => p.EntityId).ToArray ();  		long ownerId = beaconList.First ().OwnerId;  		List<DockingItem> dockingItems = Docking.Instance.Find (d => d.PlayerId == ownerId && d.TargetEntityId == parent.EntityId && d.DockingBeaconIds.Intersect (beaconListIds).Count () == 4);  		if (dockingItems.Count < 1) {  			Communication.SendPrivateInformation (userId' string.Format ("You have no ships docked in docking zone '{0}'."' pylonName));  			return true;  		}  		DockingItem dockingItem = dockingItems.First ();  		// Figure out center of docking area' and other distance information  		double maxDistance = 99;  		Vector3D vPos = new Vector3D (0' 0' 0);  		foreach (IMyCubeBlock b in beaconList) {  			Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  			vPos += beaconPos;  		}  		vPos = vPos / 4;  		foreach (IMyCubeBlock b in beaconList) {  			Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  			maxDistance = Math.Min (maxDistance' Vector3D.Distance (vPos' beaconPos));  		}  		List<IMySlimBlock> blocks = new List<IMySlimBlock> ();  		parent.GetBlocks (blocks);  		foreach (IMySlimBlock slim_cbe in blocks) {  			if (slim_cbe is IMyCubeBlock) {  				IMyCubeBlock cbe = slim_cbe.FatBlock;  				if (cbe.GetObjectBuilderCubeBlock () is MyObjectBuilder_Cockpit) {  					MyObjectBuilder_Cockpit c = (MyObjectBuilder_Cockpit)cbe.GetObjectBuilderCubeBlock ();  					if (c.Pilot != null) {  						Communication.SendPrivateInformation (userId' string.Format ("Carrier ship has a pilot.  The carrier should be unpiloted and fully stopped before undocking.  (Sometimes this can lag a bit.  Wait 10 seconds and try again)"' pylonName));  						return true;  					}  				}  			}  		}  		String dockedShipFileName = Essentials.PluginPath + String.Format ("\\Docking\\docked_{0}_{1}_{2}.sbc"' ownerId' dockingItem.TargetEntityId' dockingItem.DockedEntityId);  		// Load Entity From File and add to game  		FileInfo fileInfo = new FileInfo (dockedShipFileName);  		//CubeGridEntity cubeGrid = new CubeGridEntity(fileInfo);  		MyObjectBuilder_CubeGrid cubeGrid = BaseObjectManager.ReadSpaceEngineersFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer> (dockedShipFileName);  		// Rotate our ship relative to our saved rotation and the new carrier rotation                  		cubeGrid.PositionAndOrientation = new MyPositionAndOrientation (Matrix.CreateFromQuaternion (Quaternion.CreateFromRotationMatrix (parent.Physics.GetWorldMatrix ().GetOrientation ()) * dockingItem.SaveQuat).GetOrientation ());  		// Move our ship relative to the new carrier position and orientation  		Quaternion newQuat = Quaternion.CreateFromRotationMatrix (parent.Physics.GetWorldMatrix ().GetOrientation ());  		Vector3D rotatedPos = Vector3D.Transform (dockingItem.SavePos' newQuat);  		//cubeGrid.Position = rotatedPos + parent.GetPosition();				  		cubeGrid.PositionAndOrientation = new MyPositionAndOrientation (rotatedPos + parent.GetPosition ()' cubeGrid.PositionAndOrientation.Value.Forward' cubeGrid.PositionAndOrientation.Value.Up);  		// Add object to world  		cubeGrid.EntityId = BaseEntity.GenerateEntityId ();  		cubeGrid.LinearVelocity = Vector3.Zero;  		cubeGrid.AngularVelocity = Vector3.Zero;  		bool undock = false;  		Wrapper.GameAction (() => {  			try {  				MyAPIGateway.Entities.CreateFromObjectBuilderAndAdd (cubeGrid);  				List<MyObjectBuilder_EntityBase> addList = new List<MyObjectBuilder_EntityBase> ();  				addList.Add (cubeGrid);  				MyAPIGateway.Multiplayer.SendEntitiesCreated (addList);  				undock = true;  			} catch (Exception Ex) {  				Logging.WriteLineAndConsole (string.Format ("Error undocking ship: {0}"' Ex.ToString ()));  				Communication.SendPrivateInformation (userId' string.Format ("Unable to undock ship due to error."));  			}  		});  		if (!undock)  			return true;  		//SectorObjectManager.Instance.AddEntity(cubeGrid);  		// Remove the docking file  		File.Delete (dockedShipFileName);  		Docking.Instance.Remove (dockingItem);  		Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' has been undocked from docking zone '{1}'"' dockingItem.DockedName' pylonName));  		/* 					// Queue for cooldown 					DockingCooldownItem cItem = new DockingCooldownItem(); 					cItem.Name = pylonName; 					cItem.startTime = DateTime.Now;  					lock (m_cooldownList) 						m_cooldownList.Add(cItem);  					IMyEntity gridEntity = MyAPIGateway.Entities.GetEntityById(dockingItem.DockedEntityId); 					IMyCubeGrid cubeGrid = (IMyCubeGrid)gridEntity;  					Quaternion q = Quaternion.CreateFromRotationMatrix(parent.WorldMatrix.GetOrientation()) * dockingItem.SaveQuat; 					Quaternion newQuat = Quaternion.CreateFromRotationMatrix(parent.WorldMatrix.GetOrientation()); 					Vector3 parentPosition = parent.GetPosition(); 					Vector3 rotatedPos = Vector3.Transform(dockingItem.savePos' newQuat); 					Vector3 position = rotatedPos + parentPosition; 					Matrix positionMatrix = Matrix.CreateFromQuaternion(q);  					cubeGrid.ChangeGridOwnership(playerId' MyOwnershipShareModeEnum.None); 					gridEntity.SetPosition(dockingItem.savePos);  					gridEntity.WorldMatrix = positionMatrix; 					gridEntity.SetPosition(position);  					// We need to update again' as this doesn't seem to sync properly?  I set world matrix' and setposition' and it doesn't go where it should' and I 					// have to bump into it for it to show up' it's mega weird.  					if (PluginDocking.Settings.DockingItems == null) 						throw new Exception("DockingItems is null");  					// Remove from docked items 					PluginDocking.Settings.DockingItems.Remove(dockingItem);  					// Notify user 					Communication.SendPrivateInformation(userId' string.Format("The ship '{0}' has been undocked from docking zone '{1}'"' gridEntity.DisplayName' pylonName)); 					*/// Queue for cooldown  		/* 					DockingCooldownItem cItem = new DockingCooldownItem(); 					cItem.name = pylonName; 					cItem.startTime = DateTime.Now; 					PluginDocking.CooldownList.Add(cItem); 					 */} else if (beaconList.Count > 4)// Too many beacons' must be 4  	 {  		Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName));  	} else// Can't find docking zone  	 {  		Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'.  There must be 4 beacons with the name '{0}' to create a docking zone.  Beacons must be fully built!"' pylonName));  	}  } finally {  	m_undocking = false;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockUndock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockUndock.cs,HandleCommand,The following statement contains a magic number: try {  	String pylonName = String.Join (" "' words);  	if (PlayerMap.Instance.GetPlayerIdsFromSteamId (userId).Count < 1) {  		Communication.SendPrivateInformation (userId' string.Format ("Unable to find player Id: {0}"' userId));  		return true;  	}  	long playerId = PlayerMap.Instance.GetPlayerIdsFromSteamId (userId).First ();  	Dictionary<String' List<IMyCubeBlock>> testList;  	List<IMyCubeBlock> beaconList;  	DockingZone.FindByName (pylonName' out testList' out beaconList' playerId);  	if (beaconList.Count == 4) {  		foreach (IMyCubeBlock entity in beaconList) {  			if (!Entity.CheckOwnership (entity' playerId)) {  				Communication.SendPrivateInformation (userId' string.Format ("You do not have permission to use '{0}'.  You must either own all the beacons or they must be shared with faction."' pylonName));  				return true;  			}  		}  		IMyCubeBlock e = beaconList.First ();  		IMyCubeGrid parent = (IMyCubeGrid)e.Parent;  		long[] beaconListIds = beaconList.Select (p => p.EntityId).ToArray ();  		long ownerId = beaconList.First ().OwnerId;  		List<DockingItem> dockingItems = Docking.Instance.Find (d => d.PlayerId == ownerId && d.TargetEntityId == parent.EntityId && d.DockingBeaconIds.Intersect (beaconListIds).Count () == 4);  		if (dockingItems.Count < 1) {  			Communication.SendPrivateInformation (userId' string.Format ("You have no ships docked in docking zone '{0}'."' pylonName));  			return true;  		}  		DockingItem dockingItem = dockingItems.First ();  		// Figure out center of docking area' and other distance information  		double maxDistance = 99;  		Vector3D vPos = new Vector3D (0' 0' 0);  		foreach (IMyCubeBlock b in beaconList) {  			Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  			vPos += beaconPos;  		}  		vPos = vPos / 4;  		foreach (IMyCubeBlock b in beaconList) {  			Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  			maxDistance = Math.Min (maxDistance' Vector3D.Distance (vPos' beaconPos));  		}  		List<IMySlimBlock> blocks = new List<IMySlimBlock> ();  		parent.GetBlocks (blocks);  		foreach (IMySlimBlock slim_cbe in blocks) {  			if (slim_cbe is IMyCubeBlock) {  				IMyCubeBlock cbe = slim_cbe.FatBlock;  				if (cbe.GetObjectBuilderCubeBlock () is MyObjectBuilder_Cockpit) {  					MyObjectBuilder_Cockpit c = (MyObjectBuilder_Cockpit)cbe.GetObjectBuilderCubeBlock ();  					if (c.Pilot != null) {  						Communication.SendPrivateInformation (userId' string.Format ("Carrier ship has a pilot.  The carrier should be unpiloted and fully stopped before undocking.  (Sometimes this can lag a bit.  Wait 10 seconds and try again)"' pylonName));  						return true;  					}  				}  			}  		}  		String dockedShipFileName = Essentials.PluginPath + String.Format ("\\Docking\\docked_{0}_{1}_{2}.sbc"' ownerId' dockingItem.TargetEntityId' dockingItem.DockedEntityId);  		// Load Entity From File and add to game  		FileInfo fileInfo = new FileInfo (dockedShipFileName);  		//CubeGridEntity cubeGrid = new CubeGridEntity(fileInfo);  		MyObjectBuilder_CubeGrid cubeGrid = BaseObjectManager.ReadSpaceEngineersFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer> (dockedShipFileName);  		// Rotate our ship relative to our saved rotation and the new carrier rotation                  		cubeGrid.PositionAndOrientation = new MyPositionAndOrientation (Matrix.CreateFromQuaternion (Quaternion.CreateFromRotationMatrix (parent.Physics.GetWorldMatrix ().GetOrientation ()) * dockingItem.SaveQuat).GetOrientation ());  		// Move our ship relative to the new carrier position and orientation  		Quaternion newQuat = Quaternion.CreateFromRotationMatrix (parent.Physics.GetWorldMatrix ().GetOrientation ());  		Vector3D rotatedPos = Vector3D.Transform (dockingItem.SavePos' newQuat);  		//cubeGrid.Position = rotatedPos + parent.GetPosition();				  		cubeGrid.PositionAndOrientation = new MyPositionAndOrientation (rotatedPos + parent.GetPosition ()' cubeGrid.PositionAndOrientation.Value.Forward' cubeGrid.PositionAndOrientation.Value.Up);  		// Add object to world  		cubeGrid.EntityId = BaseEntity.GenerateEntityId ();  		cubeGrid.LinearVelocity = Vector3.Zero;  		cubeGrid.AngularVelocity = Vector3.Zero;  		bool undock = false;  		Wrapper.GameAction (() => {  			try {  				MyAPIGateway.Entities.CreateFromObjectBuilderAndAdd (cubeGrid);  				List<MyObjectBuilder_EntityBase> addList = new List<MyObjectBuilder_EntityBase> ();  				addList.Add (cubeGrid);  				MyAPIGateway.Multiplayer.SendEntitiesCreated (addList);  				undock = true;  			} catch (Exception Ex) {  				Logging.WriteLineAndConsole (string.Format ("Error undocking ship: {0}"' Ex.ToString ()));  				Communication.SendPrivateInformation (userId' string.Format ("Unable to undock ship due to error."));  			}  		});  		if (!undock)  			return true;  		//SectorObjectManager.Instance.AddEntity(cubeGrid);  		// Remove the docking file  		File.Delete (dockedShipFileName);  		Docking.Instance.Remove (dockingItem);  		Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' has been undocked from docking zone '{1}'"' dockingItem.DockedName' pylonName));  		/* 					// Queue for cooldown 					DockingCooldownItem cItem = new DockingCooldownItem(); 					cItem.Name = pylonName; 					cItem.startTime = DateTime.Now;  					lock (m_cooldownList) 						m_cooldownList.Add(cItem);  					IMyEntity gridEntity = MyAPIGateway.Entities.GetEntityById(dockingItem.DockedEntityId); 					IMyCubeGrid cubeGrid = (IMyCubeGrid)gridEntity;  					Quaternion q = Quaternion.CreateFromRotationMatrix(parent.WorldMatrix.GetOrientation()) * dockingItem.SaveQuat; 					Quaternion newQuat = Quaternion.CreateFromRotationMatrix(parent.WorldMatrix.GetOrientation()); 					Vector3 parentPosition = parent.GetPosition(); 					Vector3 rotatedPos = Vector3.Transform(dockingItem.savePos' newQuat); 					Vector3 position = rotatedPos + parentPosition; 					Matrix positionMatrix = Matrix.CreateFromQuaternion(q);  					cubeGrid.ChangeGridOwnership(playerId' MyOwnershipShareModeEnum.None); 					gridEntity.SetPosition(dockingItem.savePos);  					gridEntity.WorldMatrix = positionMatrix; 					gridEntity.SetPosition(position);  					// We need to update again' as this doesn't seem to sync properly?  I set world matrix' and setposition' and it doesn't go where it should' and I 					// have to bump into it for it to show up' it's mega weird.  					if (PluginDocking.Settings.DockingItems == null) 						throw new Exception("DockingItems is null");  					// Remove from docked items 					PluginDocking.Settings.DockingItems.Remove(dockingItem);  					// Notify user 					Communication.SendPrivateInformation(userId' string.Format("The ship '{0}' has been undocked from docking zone '{1}'"' gridEntity.DisplayName' pylonName)); 					*/// Queue for cooldown  		/* 					DockingCooldownItem cItem = new DockingCooldownItem(); 					cItem.name = pylonName; 					cItem.startTime = DateTime.Now; 					PluginDocking.CooldownList.Add(cItem); 					 */} else if (beaconList.Count > 4)// Too many beacons' must be 4  	 {  		Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName));  	} else// Can't find docking zone  	 {  		Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'.  There must be 4 beacons with the name '{0}' to create a docking zone.  Beacons must be fully built!"' pylonName));  	}  } finally {  	m_undocking = false;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockUndock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockUndock.cs,HandleCommand,The following statement contains a magic number: if (beaconList.Count == 4) {  	foreach (IMyCubeBlock entity in beaconList) {  		if (!Entity.CheckOwnership (entity' playerId)) {  			Communication.SendPrivateInformation (userId' string.Format ("You do not have permission to use '{0}'.  You must either own all the beacons or they must be shared with faction."' pylonName));  			return true;  		}  	}  	IMyCubeBlock e = beaconList.First ();  	IMyCubeGrid parent = (IMyCubeGrid)e.Parent;  	long[] beaconListIds = beaconList.Select (p => p.EntityId).ToArray ();  	long ownerId = beaconList.First ().OwnerId;  	List<DockingItem> dockingItems = Docking.Instance.Find (d => d.PlayerId == ownerId && d.TargetEntityId == parent.EntityId && d.DockingBeaconIds.Intersect (beaconListIds).Count () == 4);  	if (dockingItems.Count < 1) {  		Communication.SendPrivateInformation (userId' string.Format ("You have no ships docked in docking zone '{0}'."' pylonName));  		return true;  	}  	DockingItem dockingItem = dockingItems.First ();  	// Figure out center of docking area' and other distance information  	double maxDistance = 99;  	Vector3D vPos = new Vector3D (0' 0' 0);  	foreach (IMyCubeBlock b in beaconList) {  		Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  		vPos += beaconPos;  	}  	vPos = vPos / 4;  	foreach (IMyCubeBlock b in beaconList) {  		Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  		maxDistance = Math.Min (maxDistance' Vector3D.Distance (vPos' beaconPos));  	}  	List<IMySlimBlock> blocks = new List<IMySlimBlock> ();  	parent.GetBlocks (blocks);  	foreach (IMySlimBlock slim_cbe in blocks) {  		if (slim_cbe is IMyCubeBlock) {  			IMyCubeBlock cbe = slim_cbe.FatBlock;  			if (cbe.GetObjectBuilderCubeBlock () is MyObjectBuilder_Cockpit) {  				MyObjectBuilder_Cockpit c = (MyObjectBuilder_Cockpit)cbe.GetObjectBuilderCubeBlock ();  				if (c.Pilot != null) {  					Communication.SendPrivateInformation (userId' string.Format ("Carrier ship has a pilot.  The carrier should be unpiloted and fully stopped before undocking.  (Sometimes this can lag a bit.  Wait 10 seconds and try again)"' pylonName));  					return true;  				}  			}  		}  	}  	String dockedShipFileName = Essentials.PluginPath + String.Format ("\\Docking\\docked_{0}_{1}_{2}.sbc"' ownerId' dockingItem.TargetEntityId' dockingItem.DockedEntityId);  	// Load Entity From File and add to game  	FileInfo fileInfo = new FileInfo (dockedShipFileName);  	//CubeGridEntity cubeGrid = new CubeGridEntity(fileInfo);  	MyObjectBuilder_CubeGrid cubeGrid = BaseObjectManager.ReadSpaceEngineersFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer> (dockedShipFileName);  	// Rotate our ship relative to our saved rotation and the new carrier rotation                  	cubeGrid.PositionAndOrientation = new MyPositionAndOrientation (Matrix.CreateFromQuaternion (Quaternion.CreateFromRotationMatrix (parent.Physics.GetWorldMatrix ().GetOrientation ()) * dockingItem.SaveQuat).GetOrientation ());  	// Move our ship relative to the new carrier position and orientation  	Quaternion newQuat = Quaternion.CreateFromRotationMatrix (parent.Physics.GetWorldMatrix ().GetOrientation ());  	Vector3D rotatedPos = Vector3D.Transform (dockingItem.SavePos' newQuat);  	//cubeGrid.Position = rotatedPos + parent.GetPosition();				  	cubeGrid.PositionAndOrientation = new MyPositionAndOrientation (rotatedPos + parent.GetPosition ()' cubeGrid.PositionAndOrientation.Value.Forward' cubeGrid.PositionAndOrientation.Value.Up);  	// Add object to world  	cubeGrid.EntityId = BaseEntity.GenerateEntityId ();  	cubeGrid.LinearVelocity = Vector3.Zero;  	cubeGrid.AngularVelocity = Vector3.Zero;  	bool undock = false;  	Wrapper.GameAction (() => {  		try {  			MyAPIGateway.Entities.CreateFromObjectBuilderAndAdd (cubeGrid);  			List<MyObjectBuilder_EntityBase> addList = new List<MyObjectBuilder_EntityBase> ();  			addList.Add (cubeGrid);  			MyAPIGateway.Multiplayer.SendEntitiesCreated (addList);  			undock = true;  		} catch (Exception Ex) {  			Logging.WriteLineAndConsole (string.Format ("Error undocking ship: {0}"' Ex.ToString ()));  			Communication.SendPrivateInformation (userId' string.Format ("Unable to undock ship due to error."));  		}  	});  	if (!undock)  		return true;  	//SectorObjectManager.Instance.AddEntity(cubeGrid);  	// Remove the docking file  	File.Delete (dockedShipFileName);  	Docking.Instance.Remove (dockingItem);  	Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' has been undocked from docking zone '{1}'"' dockingItem.DockedName' pylonName));  	/* 					// Queue for cooldown 					DockingCooldownItem cItem = new DockingCooldownItem(); 					cItem.Name = pylonName; 					cItem.startTime = DateTime.Now;  					lock (m_cooldownList) 						m_cooldownList.Add(cItem);  					IMyEntity gridEntity = MyAPIGateway.Entities.GetEntityById(dockingItem.DockedEntityId); 					IMyCubeGrid cubeGrid = (IMyCubeGrid)gridEntity;  					Quaternion q = Quaternion.CreateFromRotationMatrix(parent.WorldMatrix.GetOrientation()) * dockingItem.SaveQuat; 					Quaternion newQuat = Quaternion.CreateFromRotationMatrix(parent.WorldMatrix.GetOrientation()); 					Vector3 parentPosition = parent.GetPosition(); 					Vector3 rotatedPos = Vector3.Transform(dockingItem.savePos' newQuat); 					Vector3 position = rotatedPos + parentPosition; 					Matrix positionMatrix = Matrix.CreateFromQuaternion(q);  					cubeGrid.ChangeGridOwnership(playerId' MyOwnershipShareModeEnum.None); 					gridEntity.SetPosition(dockingItem.savePos);  					gridEntity.WorldMatrix = positionMatrix; 					gridEntity.SetPosition(position);  					// We need to update again' as this doesn't seem to sync properly?  I set world matrix' and setposition' and it doesn't go where it should' and I 					// have to bump into it for it to show up' it's mega weird.  					if (PluginDocking.Settings.DockingItems == null) 						throw new Exception("DockingItems is null");  					// Remove from docked items 					PluginDocking.Settings.DockingItems.Remove(dockingItem);  					// Notify user 					Communication.SendPrivateInformation(userId' string.Format("The ship '{0}' has been undocked from docking zone '{1}'"' gridEntity.DisplayName' pylonName)); 					*/// Queue for cooldown  	/* 					DockingCooldownItem cItem = new DockingCooldownItem(); 					cItem.name = pylonName; 					cItem.startTime = DateTime.Now; 					PluginDocking.CooldownList.Add(cItem); 					 */} else if (beaconList.Count > 4)// Too many beacons' must be 4   {  	Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName));  } else// Can't find docking zone   {  	Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'.  There must be 4 beacons with the name '{0}' to create a docking zone.  Beacons must be fully built!"' pylonName));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockUndock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockUndock.cs,HandleCommand,The following statement contains a magic number: if (beaconList.Count == 4) {  	foreach (IMyCubeBlock entity in beaconList) {  		if (!Entity.CheckOwnership (entity' playerId)) {  			Communication.SendPrivateInformation (userId' string.Format ("You do not have permission to use '{0}'.  You must either own all the beacons or they must be shared with faction."' pylonName));  			return true;  		}  	}  	IMyCubeBlock e = beaconList.First ();  	IMyCubeGrid parent = (IMyCubeGrid)e.Parent;  	long[] beaconListIds = beaconList.Select (p => p.EntityId).ToArray ();  	long ownerId = beaconList.First ().OwnerId;  	List<DockingItem> dockingItems = Docking.Instance.Find (d => d.PlayerId == ownerId && d.TargetEntityId == parent.EntityId && d.DockingBeaconIds.Intersect (beaconListIds).Count () == 4);  	if (dockingItems.Count < 1) {  		Communication.SendPrivateInformation (userId' string.Format ("You have no ships docked in docking zone '{0}'."' pylonName));  		return true;  	}  	DockingItem dockingItem = dockingItems.First ();  	// Figure out center of docking area' and other distance information  	double maxDistance = 99;  	Vector3D vPos = new Vector3D (0' 0' 0);  	foreach (IMyCubeBlock b in beaconList) {  		Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  		vPos += beaconPos;  	}  	vPos = vPos / 4;  	foreach (IMyCubeBlock b in beaconList) {  		Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  		maxDistance = Math.Min (maxDistance' Vector3D.Distance (vPos' beaconPos));  	}  	List<IMySlimBlock> blocks = new List<IMySlimBlock> ();  	parent.GetBlocks (blocks);  	foreach (IMySlimBlock slim_cbe in blocks) {  		if (slim_cbe is IMyCubeBlock) {  			IMyCubeBlock cbe = slim_cbe.FatBlock;  			if (cbe.GetObjectBuilderCubeBlock () is MyObjectBuilder_Cockpit) {  				MyObjectBuilder_Cockpit c = (MyObjectBuilder_Cockpit)cbe.GetObjectBuilderCubeBlock ();  				if (c.Pilot != null) {  					Communication.SendPrivateInformation (userId' string.Format ("Carrier ship has a pilot.  The carrier should be unpiloted and fully stopped before undocking.  (Sometimes this can lag a bit.  Wait 10 seconds and try again)"' pylonName));  					return true;  				}  			}  		}  	}  	String dockedShipFileName = Essentials.PluginPath + String.Format ("\\Docking\\docked_{0}_{1}_{2}.sbc"' ownerId' dockingItem.TargetEntityId' dockingItem.DockedEntityId);  	// Load Entity From File and add to game  	FileInfo fileInfo = new FileInfo (dockedShipFileName);  	//CubeGridEntity cubeGrid = new CubeGridEntity(fileInfo);  	MyObjectBuilder_CubeGrid cubeGrid = BaseObjectManager.ReadSpaceEngineersFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer> (dockedShipFileName);  	// Rotate our ship relative to our saved rotation and the new carrier rotation                  	cubeGrid.PositionAndOrientation = new MyPositionAndOrientation (Matrix.CreateFromQuaternion (Quaternion.CreateFromRotationMatrix (parent.Physics.GetWorldMatrix ().GetOrientation ()) * dockingItem.SaveQuat).GetOrientation ());  	// Move our ship relative to the new carrier position and orientation  	Quaternion newQuat = Quaternion.CreateFromRotationMatrix (parent.Physics.GetWorldMatrix ().GetOrientation ());  	Vector3D rotatedPos = Vector3D.Transform (dockingItem.SavePos' newQuat);  	//cubeGrid.Position = rotatedPos + parent.GetPosition();				  	cubeGrid.PositionAndOrientation = new MyPositionAndOrientation (rotatedPos + parent.GetPosition ()' cubeGrid.PositionAndOrientation.Value.Forward' cubeGrid.PositionAndOrientation.Value.Up);  	// Add object to world  	cubeGrid.EntityId = BaseEntity.GenerateEntityId ();  	cubeGrid.LinearVelocity = Vector3.Zero;  	cubeGrid.AngularVelocity = Vector3.Zero;  	bool undock = false;  	Wrapper.GameAction (() => {  		try {  			MyAPIGateway.Entities.CreateFromObjectBuilderAndAdd (cubeGrid);  			List<MyObjectBuilder_EntityBase> addList = new List<MyObjectBuilder_EntityBase> ();  			addList.Add (cubeGrid);  			MyAPIGateway.Multiplayer.SendEntitiesCreated (addList);  			undock = true;  		} catch (Exception Ex) {  			Logging.WriteLineAndConsole (string.Format ("Error undocking ship: {0}"' Ex.ToString ()));  			Communication.SendPrivateInformation (userId' string.Format ("Unable to undock ship due to error."));  		}  	});  	if (!undock)  		return true;  	//SectorObjectManager.Instance.AddEntity(cubeGrid);  	// Remove the docking file  	File.Delete (dockedShipFileName);  	Docking.Instance.Remove (dockingItem);  	Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' has been undocked from docking zone '{1}'"' dockingItem.DockedName' pylonName));  	/* 					// Queue for cooldown 					DockingCooldownItem cItem = new DockingCooldownItem(); 					cItem.Name = pylonName; 					cItem.startTime = DateTime.Now;  					lock (m_cooldownList) 						m_cooldownList.Add(cItem);  					IMyEntity gridEntity = MyAPIGateway.Entities.GetEntityById(dockingItem.DockedEntityId); 					IMyCubeGrid cubeGrid = (IMyCubeGrid)gridEntity;  					Quaternion q = Quaternion.CreateFromRotationMatrix(parent.WorldMatrix.GetOrientation()) * dockingItem.SaveQuat; 					Quaternion newQuat = Quaternion.CreateFromRotationMatrix(parent.WorldMatrix.GetOrientation()); 					Vector3 parentPosition = parent.GetPosition(); 					Vector3 rotatedPos = Vector3.Transform(dockingItem.savePos' newQuat); 					Vector3 position = rotatedPos + parentPosition; 					Matrix positionMatrix = Matrix.CreateFromQuaternion(q);  					cubeGrid.ChangeGridOwnership(playerId' MyOwnershipShareModeEnum.None); 					gridEntity.SetPosition(dockingItem.savePos);  					gridEntity.WorldMatrix = positionMatrix; 					gridEntity.SetPosition(position);  					// We need to update again' as this doesn't seem to sync properly?  I set world matrix' and setposition' and it doesn't go where it should' and I 					// have to bump into it for it to show up' it's mega weird.  					if (PluginDocking.Settings.DockingItems == null) 						throw new Exception("DockingItems is null");  					// Remove from docked items 					PluginDocking.Settings.DockingItems.Remove(dockingItem);  					// Notify user 					Communication.SendPrivateInformation(userId' string.Format("The ship '{0}' has been undocked from docking zone '{1}'"' gridEntity.DisplayName' pylonName)); 					*/// Queue for cooldown  	/* 					DockingCooldownItem cItem = new DockingCooldownItem(); 					cItem.name = pylonName; 					cItem.startTime = DateTime.Now; 					PluginDocking.CooldownList.Add(cItem); 					 */} else if (beaconList.Count > 4)// Too many beacons' must be 4   {  	Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName));  } else// Can't find docking zone   {  	Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'.  There must be 4 beacons with the name '{0}' to create a docking zone.  Beacons must be fully built!"' pylonName));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockUndock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockUndock.cs,HandleCommand,The following statement contains a magic number: if (beaconList.Count == 4) {  	foreach (IMyCubeBlock entity in beaconList) {  		if (!Entity.CheckOwnership (entity' playerId)) {  			Communication.SendPrivateInformation (userId' string.Format ("You do not have permission to use '{0}'.  You must either own all the beacons or they must be shared with faction."' pylonName));  			return true;  		}  	}  	IMyCubeBlock e = beaconList.First ();  	IMyCubeGrid parent = (IMyCubeGrid)e.Parent;  	long[] beaconListIds = beaconList.Select (p => p.EntityId).ToArray ();  	long ownerId = beaconList.First ().OwnerId;  	List<DockingItem> dockingItems = Docking.Instance.Find (d => d.PlayerId == ownerId && d.TargetEntityId == parent.EntityId && d.DockingBeaconIds.Intersect (beaconListIds).Count () == 4);  	if (dockingItems.Count < 1) {  		Communication.SendPrivateInformation (userId' string.Format ("You have no ships docked in docking zone '{0}'."' pylonName));  		return true;  	}  	DockingItem dockingItem = dockingItems.First ();  	// Figure out center of docking area' and other distance information  	double maxDistance = 99;  	Vector3D vPos = new Vector3D (0' 0' 0);  	foreach (IMyCubeBlock b in beaconList) {  		Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  		vPos += beaconPos;  	}  	vPos = vPos / 4;  	foreach (IMyCubeBlock b in beaconList) {  		Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  		maxDistance = Math.Min (maxDistance' Vector3D.Distance (vPos' beaconPos));  	}  	List<IMySlimBlock> blocks = new List<IMySlimBlock> ();  	parent.GetBlocks (blocks);  	foreach (IMySlimBlock slim_cbe in blocks) {  		if (slim_cbe is IMyCubeBlock) {  			IMyCubeBlock cbe = slim_cbe.FatBlock;  			if (cbe.GetObjectBuilderCubeBlock () is MyObjectBuilder_Cockpit) {  				MyObjectBuilder_Cockpit c = (MyObjectBuilder_Cockpit)cbe.GetObjectBuilderCubeBlock ();  				if (c.Pilot != null) {  					Communication.SendPrivateInformation (userId' string.Format ("Carrier ship has a pilot.  The carrier should be unpiloted and fully stopped before undocking.  (Sometimes this can lag a bit.  Wait 10 seconds and try again)"' pylonName));  					return true;  				}  			}  		}  	}  	String dockedShipFileName = Essentials.PluginPath + String.Format ("\\Docking\\docked_{0}_{1}_{2}.sbc"' ownerId' dockingItem.TargetEntityId' dockingItem.DockedEntityId);  	// Load Entity From File and add to game  	FileInfo fileInfo = new FileInfo (dockedShipFileName);  	//CubeGridEntity cubeGrid = new CubeGridEntity(fileInfo);  	MyObjectBuilder_CubeGrid cubeGrid = BaseObjectManager.ReadSpaceEngineersFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer> (dockedShipFileName);  	// Rotate our ship relative to our saved rotation and the new carrier rotation                  	cubeGrid.PositionAndOrientation = new MyPositionAndOrientation (Matrix.CreateFromQuaternion (Quaternion.CreateFromRotationMatrix (parent.Physics.GetWorldMatrix ().GetOrientation ()) * dockingItem.SaveQuat).GetOrientation ());  	// Move our ship relative to the new carrier position and orientation  	Quaternion newQuat = Quaternion.CreateFromRotationMatrix (parent.Physics.GetWorldMatrix ().GetOrientation ());  	Vector3D rotatedPos = Vector3D.Transform (dockingItem.SavePos' newQuat);  	//cubeGrid.Position = rotatedPos + parent.GetPosition();				  	cubeGrid.PositionAndOrientation = new MyPositionAndOrientation (rotatedPos + parent.GetPosition ()' cubeGrid.PositionAndOrientation.Value.Forward' cubeGrid.PositionAndOrientation.Value.Up);  	// Add object to world  	cubeGrid.EntityId = BaseEntity.GenerateEntityId ();  	cubeGrid.LinearVelocity = Vector3.Zero;  	cubeGrid.AngularVelocity = Vector3.Zero;  	bool undock = false;  	Wrapper.GameAction (() => {  		try {  			MyAPIGateway.Entities.CreateFromObjectBuilderAndAdd (cubeGrid);  			List<MyObjectBuilder_EntityBase> addList = new List<MyObjectBuilder_EntityBase> ();  			addList.Add (cubeGrid);  			MyAPIGateway.Multiplayer.SendEntitiesCreated (addList);  			undock = true;  		} catch (Exception Ex) {  			Logging.WriteLineAndConsole (string.Format ("Error undocking ship: {0}"' Ex.ToString ()));  			Communication.SendPrivateInformation (userId' string.Format ("Unable to undock ship due to error."));  		}  	});  	if (!undock)  		return true;  	//SectorObjectManager.Instance.AddEntity(cubeGrid);  	// Remove the docking file  	File.Delete (dockedShipFileName);  	Docking.Instance.Remove (dockingItem);  	Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' has been undocked from docking zone '{1}'"' dockingItem.DockedName' pylonName));  	/* 					// Queue for cooldown 					DockingCooldownItem cItem = new DockingCooldownItem(); 					cItem.Name = pylonName; 					cItem.startTime = DateTime.Now;  					lock (m_cooldownList) 						m_cooldownList.Add(cItem);  					IMyEntity gridEntity = MyAPIGateway.Entities.GetEntityById(dockingItem.DockedEntityId); 					IMyCubeGrid cubeGrid = (IMyCubeGrid)gridEntity;  					Quaternion q = Quaternion.CreateFromRotationMatrix(parent.WorldMatrix.GetOrientation()) * dockingItem.SaveQuat; 					Quaternion newQuat = Quaternion.CreateFromRotationMatrix(parent.WorldMatrix.GetOrientation()); 					Vector3 parentPosition = parent.GetPosition(); 					Vector3 rotatedPos = Vector3.Transform(dockingItem.savePos' newQuat); 					Vector3 position = rotatedPos + parentPosition; 					Matrix positionMatrix = Matrix.CreateFromQuaternion(q);  					cubeGrid.ChangeGridOwnership(playerId' MyOwnershipShareModeEnum.None); 					gridEntity.SetPosition(dockingItem.savePos);  					gridEntity.WorldMatrix = positionMatrix; 					gridEntity.SetPosition(position);  					// We need to update again' as this doesn't seem to sync properly?  I set world matrix' and setposition' and it doesn't go where it should' and I 					// have to bump into it for it to show up' it's mega weird.  					if (PluginDocking.Settings.DockingItems == null) 						throw new Exception("DockingItems is null");  					// Remove from docked items 					PluginDocking.Settings.DockingItems.Remove(dockingItem);  					// Notify user 					Communication.SendPrivateInformation(userId' string.Format("The ship '{0}' has been undocked from docking zone '{1}'"' gridEntity.DisplayName' pylonName)); 					*/// Queue for cooldown  	/* 					DockingCooldownItem cItem = new DockingCooldownItem(); 					cItem.name = pylonName; 					cItem.startTime = DateTime.Now; 					PluginDocking.CooldownList.Add(cItem); 					 */} else if (beaconList.Count > 4)// Too many beacons' must be 4   {  	Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName));  } else// Can't find docking zone   {  	Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'.  There must be 4 beacons with the name '{0}' to create a docking zone.  Beacons must be fully built!"' pylonName));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockUndock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockUndock.cs,HandleCommand,The following statement contains a magic number: if (beaconList.Count == 4) {  	foreach (IMyCubeBlock entity in beaconList) {  		if (!Entity.CheckOwnership (entity' playerId)) {  			Communication.SendPrivateInformation (userId' string.Format ("You do not have permission to use '{0}'.  You must either own all the beacons or they must be shared with faction."' pylonName));  			return true;  		}  	}  	IMyCubeBlock e = beaconList.First ();  	IMyCubeGrid parent = (IMyCubeGrid)e.Parent;  	long[] beaconListIds = beaconList.Select (p => p.EntityId).ToArray ();  	long ownerId = beaconList.First ().OwnerId;  	List<DockingItem> dockingItems = Docking.Instance.Find (d => d.PlayerId == ownerId && d.TargetEntityId == parent.EntityId && d.DockingBeaconIds.Intersect (beaconListIds).Count () == 4);  	if (dockingItems.Count < 1) {  		Communication.SendPrivateInformation (userId' string.Format ("You have no ships docked in docking zone '{0}'."' pylonName));  		return true;  	}  	DockingItem dockingItem = dockingItems.First ();  	// Figure out center of docking area' and other distance information  	double maxDistance = 99;  	Vector3D vPos = new Vector3D (0' 0' 0);  	foreach (IMyCubeBlock b in beaconList) {  		Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  		vPos += beaconPos;  	}  	vPos = vPos / 4;  	foreach (IMyCubeBlock b in beaconList) {  		Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  		maxDistance = Math.Min (maxDistance' Vector3D.Distance (vPos' beaconPos));  	}  	List<IMySlimBlock> blocks = new List<IMySlimBlock> ();  	parent.GetBlocks (blocks);  	foreach (IMySlimBlock slim_cbe in blocks) {  		if (slim_cbe is IMyCubeBlock) {  			IMyCubeBlock cbe = slim_cbe.FatBlock;  			if (cbe.GetObjectBuilderCubeBlock () is MyObjectBuilder_Cockpit) {  				MyObjectBuilder_Cockpit c = (MyObjectBuilder_Cockpit)cbe.GetObjectBuilderCubeBlock ();  				if (c.Pilot != null) {  					Communication.SendPrivateInformation (userId' string.Format ("Carrier ship has a pilot.  The carrier should be unpiloted and fully stopped before undocking.  (Sometimes this can lag a bit.  Wait 10 seconds and try again)"' pylonName));  					return true;  				}  			}  		}  	}  	String dockedShipFileName = Essentials.PluginPath + String.Format ("\\Docking\\docked_{0}_{1}_{2}.sbc"' ownerId' dockingItem.TargetEntityId' dockingItem.DockedEntityId);  	// Load Entity From File and add to game  	FileInfo fileInfo = new FileInfo (dockedShipFileName);  	//CubeGridEntity cubeGrid = new CubeGridEntity(fileInfo);  	MyObjectBuilder_CubeGrid cubeGrid = BaseObjectManager.ReadSpaceEngineersFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer> (dockedShipFileName);  	// Rotate our ship relative to our saved rotation and the new carrier rotation                  	cubeGrid.PositionAndOrientation = new MyPositionAndOrientation (Matrix.CreateFromQuaternion (Quaternion.CreateFromRotationMatrix (parent.Physics.GetWorldMatrix ().GetOrientation ()) * dockingItem.SaveQuat).GetOrientation ());  	// Move our ship relative to the new carrier position and orientation  	Quaternion newQuat = Quaternion.CreateFromRotationMatrix (parent.Physics.GetWorldMatrix ().GetOrientation ());  	Vector3D rotatedPos = Vector3D.Transform (dockingItem.SavePos' newQuat);  	//cubeGrid.Position = rotatedPos + parent.GetPosition();				  	cubeGrid.PositionAndOrientation = new MyPositionAndOrientation (rotatedPos + parent.GetPosition ()' cubeGrid.PositionAndOrientation.Value.Forward' cubeGrid.PositionAndOrientation.Value.Up);  	// Add object to world  	cubeGrid.EntityId = BaseEntity.GenerateEntityId ();  	cubeGrid.LinearVelocity = Vector3.Zero;  	cubeGrid.AngularVelocity = Vector3.Zero;  	bool undock = false;  	Wrapper.GameAction (() => {  		try {  			MyAPIGateway.Entities.CreateFromObjectBuilderAndAdd (cubeGrid);  			List<MyObjectBuilder_EntityBase> addList = new List<MyObjectBuilder_EntityBase> ();  			addList.Add (cubeGrid);  			MyAPIGateway.Multiplayer.SendEntitiesCreated (addList);  			undock = true;  		} catch (Exception Ex) {  			Logging.WriteLineAndConsole (string.Format ("Error undocking ship: {0}"' Ex.ToString ()));  			Communication.SendPrivateInformation (userId' string.Format ("Unable to undock ship due to error."));  		}  	});  	if (!undock)  		return true;  	//SectorObjectManager.Instance.AddEntity(cubeGrid);  	// Remove the docking file  	File.Delete (dockedShipFileName);  	Docking.Instance.Remove (dockingItem);  	Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' has been undocked from docking zone '{1}'"' dockingItem.DockedName' pylonName));  	/* 					// Queue for cooldown 					DockingCooldownItem cItem = new DockingCooldownItem(); 					cItem.Name = pylonName; 					cItem.startTime = DateTime.Now;  					lock (m_cooldownList) 						m_cooldownList.Add(cItem);  					IMyEntity gridEntity = MyAPIGateway.Entities.GetEntityById(dockingItem.DockedEntityId); 					IMyCubeGrid cubeGrid = (IMyCubeGrid)gridEntity;  					Quaternion q = Quaternion.CreateFromRotationMatrix(parent.WorldMatrix.GetOrientation()) * dockingItem.SaveQuat; 					Quaternion newQuat = Quaternion.CreateFromRotationMatrix(parent.WorldMatrix.GetOrientation()); 					Vector3 parentPosition = parent.GetPosition(); 					Vector3 rotatedPos = Vector3.Transform(dockingItem.savePos' newQuat); 					Vector3 position = rotatedPos + parentPosition; 					Matrix positionMatrix = Matrix.CreateFromQuaternion(q);  					cubeGrid.ChangeGridOwnership(playerId' MyOwnershipShareModeEnum.None); 					gridEntity.SetPosition(dockingItem.savePos);  					gridEntity.WorldMatrix = positionMatrix; 					gridEntity.SetPosition(position);  					// We need to update again' as this doesn't seem to sync properly?  I set world matrix' and setposition' and it doesn't go where it should' and I 					// have to bump into it for it to show up' it's mega weird.  					if (PluginDocking.Settings.DockingItems == null) 						throw new Exception("DockingItems is null");  					// Remove from docked items 					PluginDocking.Settings.DockingItems.Remove(dockingItem);  					// Notify user 					Communication.SendPrivateInformation(userId' string.Format("The ship '{0}' has been undocked from docking zone '{1}'"' gridEntity.DisplayName' pylonName)); 					*/// Queue for cooldown  	/* 					DockingCooldownItem cItem = new DockingCooldownItem(); 					cItem.name = pylonName; 					cItem.startTime = DateTime.Now; 					PluginDocking.CooldownList.Add(cItem); 					 */} else if (beaconList.Count > 4)// Too many beacons' must be 4   {  	Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName));  } else// Can't find docking zone   {  	Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'.  There must be 4 beacons with the name '{0}' to create a docking zone.  Beacons must be fully built!"' pylonName));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockUndock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockUndock.cs,HandleCommand,The following statement contains a magic number: if (beaconList.Count == 4) {  	foreach (IMyCubeBlock entity in beaconList) {  		if (!Entity.CheckOwnership (entity' playerId)) {  			Communication.SendPrivateInformation (userId' string.Format ("You do not have permission to use '{0}'.  You must either own all the beacons or they must be shared with faction."' pylonName));  			return true;  		}  	}  	IMyCubeBlock e = beaconList.First ();  	IMyCubeGrid parent = (IMyCubeGrid)e.Parent;  	long[] beaconListIds = beaconList.Select (p => p.EntityId).ToArray ();  	long ownerId = beaconList.First ().OwnerId;  	List<DockingItem> dockingItems = Docking.Instance.Find (d => d.PlayerId == ownerId && d.TargetEntityId == parent.EntityId && d.DockingBeaconIds.Intersect (beaconListIds).Count () == 4);  	if (dockingItems.Count < 1) {  		Communication.SendPrivateInformation (userId' string.Format ("You have no ships docked in docking zone '{0}'."' pylonName));  		return true;  	}  	DockingItem dockingItem = dockingItems.First ();  	// Figure out center of docking area' and other distance information  	double maxDistance = 99;  	Vector3D vPos = new Vector3D (0' 0' 0);  	foreach (IMyCubeBlock b in beaconList) {  		Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  		vPos += beaconPos;  	}  	vPos = vPos / 4;  	foreach (IMyCubeBlock b in beaconList) {  		Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  		maxDistance = Math.Min (maxDistance' Vector3D.Distance (vPos' beaconPos));  	}  	List<IMySlimBlock> blocks = new List<IMySlimBlock> ();  	parent.GetBlocks (blocks);  	foreach (IMySlimBlock slim_cbe in blocks) {  		if (slim_cbe is IMyCubeBlock) {  			IMyCubeBlock cbe = slim_cbe.FatBlock;  			if (cbe.GetObjectBuilderCubeBlock () is MyObjectBuilder_Cockpit) {  				MyObjectBuilder_Cockpit c = (MyObjectBuilder_Cockpit)cbe.GetObjectBuilderCubeBlock ();  				if (c.Pilot != null) {  					Communication.SendPrivateInformation (userId' string.Format ("Carrier ship has a pilot.  The carrier should be unpiloted and fully stopped before undocking.  (Sometimes this can lag a bit.  Wait 10 seconds and try again)"' pylonName));  					return true;  				}  			}  		}  	}  	String dockedShipFileName = Essentials.PluginPath + String.Format ("\\Docking\\docked_{0}_{1}_{2}.sbc"' ownerId' dockingItem.TargetEntityId' dockingItem.DockedEntityId);  	// Load Entity From File and add to game  	FileInfo fileInfo = new FileInfo (dockedShipFileName);  	//CubeGridEntity cubeGrid = new CubeGridEntity(fileInfo);  	MyObjectBuilder_CubeGrid cubeGrid = BaseObjectManager.ReadSpaceEngineersFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer> (dockedShipFileName);  	// Rotate our ship relative to our saved rotation and the new carrier rotation                  	cubeGrid.PositionAndOrientation = new MyPositionAndOrientation (Matrix.CreateFromQuaternion (Quaternion.CreateFromRotationMatrix (parent.Physics.GetWorldMatrix ().GetOrientation ()) * dockingItem.SaveQuat).GetOrientation ());  	// Move our ship relative to the new carrier position and orientation  	Quaternion newQuat = Quaternion.CreateFromRotationMatrix (parent.Physics.GetWorldMatrix ().GetOrientation ());  	Vector3D rotatedPos = Vector3D.Transform (dockingItem.SavePos' newQuat);  	//cubeGrid.Position = rotatedPos + parent.GetPosition();				  	cubeGrid.PositionAndOrientation = new MyPositionAndOrientation (rotatedPos + parent.GetPosition ()' cubeGrid.PositionAndOrientation.Value.Forward' cubeGrid.PositionAndOrientation.Value.Up);  	// Add object to world  	cubeGrid.EntityId = BaseEntity.GenerateEntityId ();  	cubeGrid.LinearVelocity = Vector3.Zero;  	cubeGrid.AngularVelocity = Vector3.Zero;  	bool undock = false;  	Wrapper.GameAction (() => {  		try {  			MyAPIGateway.Entities.CreateFromObjectBuilderAndAdd (cubeGrid);  			List<MyObjectBuilder_EntityBase> addList = new List<MyObjectBuilder_EntityBase> ();  			addList.Add (cubeGrid);  			MyAPIGateway.Multiplayer.SendEntitiesCreated (addList);  			undock = true;  		} catch (Exception Ex) {  			Logging.WriteLineAndConsole (string.Format ("Error undocking ship: {0}"' Ex.ToString ()));  			Communication.SendPrivateInformation (userId' string.Format ("Unable to undock ship due to error."));  		}  	});  	if (!undock)  		return true;  	//SectorObjectManager.Instance.AddEntity(cubeGrid);  	// Remove the docking file  	File.Delete (dockedShipFileName);  	Docking.Instance.Remove (dockingItem);  	Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' has been undocked from docking zone '{1}'"' dockingItem.DockedName' pylonName));  	/* 					// Queue for cooldown 					DockingCooldownItem cItem = new DockingCooldownItem(); 					cItem.Name = pylonName; 					cItem.startTime = DateTime.Now;  					lock (m_cooldownList) 						m_cooldownList.Add(cItem);  					IMyEntity gridEntity = MyAPIGateway.Entities.GetEntityById(dockingItem.DockedEntityId); 					IMyCubeGrid cubeGrid = (IMyCubeGrid)gridEntity;  					Quaternion q = Quaternion.CreateFromRotationMatrix(parent.WorldMatrix.GetOrientation()) * dockingItem.SaveQuat; 					Quaternion newQuat = Quaternion.CreateFromRotationMatrix(parent.WorldMatrix.GetOrientation()); 					Vector3 parentPosition = parent.GetPosition(); 					Vector3 rotatedPos = Vector3.Transform(dockingItem.savePos' newQuat); 					Vector3 position = rotatedPos + parentPosition; 					Matrix positionMatrix = Matrix.CreateFromQuaternion(q);  					cubeGrid.ChangeGridOwnership(playerId' MyOwnershipShareModeEnum.None); 					gridEntity.SetPosition(dockingItem.savePos);  					gridEntity.WorldMatrix = positionMatrix; 					gridEntity.SetPosition(position);  					// We need to update again' as this doesn't seem to sync properly?  I set world matrix' and setposition' and it doesn't go where it should' and I 					// have to bump into it for it to show up' it's mega weird.  					if (PluginDocking.Settings.DockingItems == null) 						throw new Exception("DockingItems is null");  					// Remove from docked items 					PluginDocking.Settings.DockingItems.Remove(dockingItem);  					// Notify user 					Communication.SendPrivateInformation(userId' string.Format("The ship '{0}' has been undocked from docking zone '{1}'"' gridEntity.DisplayName' pylonName)); 					*/// Queue for cooldown  	/* 					DockingCooldownItem cItem = new DockingCooldownItem(); 					cItem.name = pylonName; 					cItem.startTime = DateTime.Now; 					PluginDocking.CooldownList.Add(cItem); 					 */} else if (beaconList.Count > 4)// Too many beacons' must be 4   {  	Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName));  } else// Can't find docking zone   {  	Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'.  There must be 4 beacons with the name '{0}' to create a docking zone.  Beacons must be fully built!"' pylonName));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockUndock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockUndock.cs,HandleCommand,The following statement contains a magic number: vPos = vPos / 4;  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockUndock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockUndock.cs,HandleCommand,The following statement contains a magic number: if (beaconList.Count > 4)// Too many beacons' must be 4   {  	Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName));  } else// Can't find docking zone   {  	Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'.  There must be 4 beacons with the name '{0}' to create a docking zone.  Beacons must be fully built!"' pylonName));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The following statement contains a magic number: try {  	String pylonName = String.Join (" "' words);  	/* 				int timeLeft; 				if (Entity.CheckCoolDown(pylonName' out timeLeft)) 				{ 					Communication.Message(String.Format("The docking zone '{0}' is on cooldown.  Please wait a {1} seconds before trying to dock/undock again."' pylonName' Math.Max(0' timeLeft))); 					return; 				} 				*/if (PlayerMap.Instance.GetPlayerIdsFromSteamId (userId).Count < 1) {  		Communication.SendPrivateInformation (userId' string.Format ("Unable to find player Id: {0}"' userId));  		return true;  	}  	long playerId = PlayerMap.Instance.GetPlayerIdsFromSteamId (userId).First ();  	Dictionary<String' List<IMyCubeBlock>> testList;  	List<IMyCubeBlock> beaconList;  	DockingZone.FindByName (pylonName' out testList' out beaconList' playerId);  	if (beaconList.Count == 4) {  		// Check ownership  		foreach (IMyCubeBlock entityBlock in beaconList) {  			IMyTerminalBlock terminal = (IMyTerminalBlock)entityBlock;  			if (!terminal.HasPlayerAccess (playerId)) {  				Communication.SendPrivateInformation (userId' string.Format ("You do not have permission to use '{0}'.  You must either own all the beacons or they must be shared with faction."' pylonName));  				return true;  			}  		}  		// Check for bounding box intsection of other docking zones  		int intersectElement = 0;  		if (Entity.CheckForIntersection (testList' beaconList' out intersectElement)) {  			Communication.SendPrivateInformation (userId' string.Format ("The docking zone '{0}' intersects with docking zone '{1}'.  Make sure you place your docking zones so they don't overlap."' pylonName' testList.ElementAt (intersectElement).Key));  			return true;  		}  		// Check if ship already docked in this zone  		IMyCubeBlock e = beaconList [0];  		IMyCubeGrid parent = (IMyCubeGrid)e.Parent;  		long[] beaconListIds = beaconList.Select (b => b.EntityId).ToArray ();  		long ownerId = beaconList.First ().OwnerId;  		List<DockingItem> checkItems = Docking.Instance.Find (d => d.PlayerId == ownerId && d.TargetEntityId == parent.EntityId && d.DockingBeaconIds.Intersect (beaconListIds).Count () == 4);  		if (checkItems.Count >= PluginSettings.Instance.DockingShipsPerZone) {  			Communication.SendPrivateInformation (userId' string.Format ("Docking zone already '{0}' already contains the maximum capacity of ships."' pylonName));  			return true;  		}  		// Figure out center of docking area' and other distance information  		double maxDistance = 99;  		Vector3D vPos = new Vector3D (0' 0' 0);  		foreach (IMyCubeBlock b in beaconList) {  			Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  			vPos += beaconPos;  		}  		vPos = vPos / 4;  		foreach (IMyCubeBlock b in beaconList) {  			Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  			maxDistance = Math.Min (maxDistance' Vector3D.Distance (vPos' beaconPos));  		}  		// Find ship in docking area  		IMyCubeGrid dockingEntity = null;  		HashSet<IMyEntity> cubeGrids = new HashSet<IMyEntity> ();  		MyAPIGateway.Entities.GetEntities (cubeGrids' f => f is IMyCubeGrid);  		foreach (IMyCubeGrid gridCheck in cubeGrids) {  			if (gridCheck.IsStatic || gridCheck == parent)  				continue;  			double distance = Vector3D.Distance (gridCheck.GetPosition ()' vPos);  			if (distance < maxDistance) {  				dockingEntity = gridCheck;  				break;  			}  		}  		// Figure out if the ship fits in docking area' and then save ship      		if (dockingEntity != null) {  			// Get bounding box of both the docking zone and docking ship  			OrientedBoundingBoxD targetBounding = Entity.GetBoundingBox (beaconList);  			OrientedBoundingBoxD dockingBounding = Entity.GetBoundingBox (dockingEntity);  			// Make sure the docking zone contains the docking ship.  If they intersect or are disjointed' then fail  			if (!Entity.GreaterThan (dockingBounding.HalfExtent * 2' targetBounding.HalfExtent * 2)) {  				Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is too large for it's carrier.  The ship's bounding box must fit inside the docking zone bounding box!"' dockingEntity.DisplayName));  				return true;  			}  			if (targetBounding.Contains (ref dockingBounding) != ContainmentType.Contains) {  				Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is not fully inside the docking zone '{1}'.  Make sure the ship is fully contained inside the docking zone"' dockingEntity.DisplayName' pylonName));  				return true;  			}  			// Calculate the mass and ensure the docking ship is less than half the mass of the dock  			float parentMass = Entity.CalculateMass (parent);  			float dockingMass = Entity.CalculateMass (dockingEntity);  			if (dockingMass > parentMass) {  				Communication.SendPrivateInformation (userId' string.Format ("The ship you're trying to dock is too heavy for it's carrier.  The ship mass must be less than half the large ship / stations mass! (DM={0}kg CM={1}kg)"' dockingMass' parentMass));  				return true;  			}  			// Check to see if the ship is piloted' if it is' error out.    			// TODO: Check to see if we can get a real time copy of this entity?  			List<IMySlimBlock> blocks = new List<IMySlimBlock> ();  			dockingEntity.GetBlocks (blocks' x => x.FatBlock != null && x.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_Cockpit));  			foreach (IMySlimBlock slim_cbe in blocks) {  				MyObjectBuilder_Cockpit c = (MyObjectBuilder_Cockpit)slim_cbe.FatBlock.GetObjectBuilderCubeBlock ();  				if (c.Pilot != null) {  					Communication.SendPrivateInformation (userId' string.Format ("Ship in docking zone '{0}' has a pilot!  Please exit the ship before trying to dock.  (Sometimes this can lag a bit.  Wait 10 seconds and try again)"' pylonName));  					return true;  				}  			}  			// Save position and rotation information.  Some fun stuff here.  			// Get our dock rotation as a quaternion  			Quaternion saveQuat = Quaternion.CreateFromRotationMatrix (parent.WorldMatrix.GetOrientation ());  			// Transform docked ship's local position by inverse of the the parent (unwinds parent) and save it for when we undock  			Vector3D savePos = Vector3D.Transform (dockingEntity.GetPosition () - parent.GetPosition ()' Quaternion.Inverse (saveQuat));  			// Get local rotation of dock ship' and save it for when we undock  			saveQuat = Quaternion.Inverse (saveQuat) * Quaternion.CreateFromRotationMatrix (dockingEntity.WorldMatrix.GetOrientation ());  			// Save ship to file and remove  			FileInfo info = new FileInfo (Essentials.PluginPath + String.Format ("\\Docking\\docked_{0}_{1}_{2}.sbc"' ownerId' parent.EntityId' dockingEntity.EntityId));  			//CubeGridEntity dockingGrid = new CubeGridEntity((MyObjectBuilder_CubeGrid)dockingEntity.GetObjectBuilder()' dockingEntity);  			MyObjectBuilder_CubeGrid gridBuilder = CubeGrids.SafeGetObjectBuilder (dockingEntity);  			if (gridBuilder == null) {  				Communication.SendPrivateInformation (userId' string.Format ("Failed to load entity for export: {0}"' dockingEntity.DisplayName));  				return true;  			}  			// Save item  			DockingItem dockItem = new DockingItem ();  			dockItem.DockedEntityId = dockingEntity.EntityId;  			dockItem.TargetEntityId = parent.EntityId;  			dockItem.PlayerId = ownerId;  			dockItem.DockingBeaconIds = beaconList.Select (s => s.EntityId).ToArray ();  			dockItem.DockedName = dockingEntity.DisplayName;  			dockItem.SavePos = savePos;  			dockItem.SaveQuat = saveQuat;  			Docking.Instance.Add (dockItem);  			// Serialize and save ship to file  			BaseObjectManager.WriteSpaceEngineersFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer> (gridBuilder' info.FullName);  			//BaseObjectManager.SaveContentFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer>(gridBuilder' info);  			BaseEntityNetworkManager.BroadcastRemoveEntity (dockingEntity);  			//dockingEntity.Close();  			Communication.SendPrivateInformation (userId' string.Format ("Docked ship '{0}' in docking zone '{1}'."' dockItem.DockedName' pylonName));  			/* 						// Add a cool down 						DockingCooldownItem cItem = new DockingCooldownItem(); 						cItem.name = pylonName; 						cItem.startTime = DateTime.Now; 						PluginDocking.CooldownList.Add(cItem); 						 */} else {  			Communication.SendPrivateInformation (userId' string.Format ("No ships in docking zone '{0}'."' pylonName));  		}  	} else if (beaconList.Count > 4) {  		Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName));  	} else {  		Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'.  There must be 4 beacons with the name '{0}' to create a docking zone.  Beacons must be fully built!"' pylonName));  	}  	return true;  } finally {  	m_docking = false;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The following statement contains a magic number: try {  	String pylonName = String.Join (" "' words);  	/* 				int timeLeft; 				if (Entity.CheckCoolDown(pylonName' out timeLeft)) 				{ 					Communication.Message(String.Format("The docking zone '{0}' is on cooldown.  Please wait a {1} seconds before trying to dock/undock again."' pylonName' Math.Max(0' timeLeft))); 					return; 				} 				*/if (PlayerMap.Instance.GetPlayerIdsFromSteamId (userId).Count < 1) {  		Communication.SendPrivateInformation (userId' string.Format ("Unable to find player Id: {0}"' userId));  		return true;  	}  	long playerId = PlayerMap.Instance.GetPlayerIdsFromSteamId (userId).First ();  	Dictionary<String' List<IMyCubeBlock>> testList;  	List<IMyCubeBlock> beaconList;  	DockingZone.FindByName (pylonName' out testList' out beaconList' playerId);  	if (beaconList.Count == 4) {  		// Check ownership  		foreach (IMyCubeBlock entityBlock in beaconList) {  			IMyTerminalBlock terminal = (IMyTerminalBlock)entityBlock;  			if (!terminal.HasPlayerAccess (playerId)) {  				Communication.SendPrivateInformation (userId' string.Format ("You do not have permission to use '{0}'.  You must either own all the beacons or they must be shared with faction."' pylonName));  				return true;  			}  		}  		// Check for bounding box intsection of other docking zones  		int intersectElement = 0;  		if (Entity.CheckForIntersection (testList' beaconList' out intersectElement)) {  			Communication.SendPrivateInformation (userId' string.Format ("The docking zone '{0}' intersects with docking zone '{1}'.  Make sure you place your docking zones so they don't overlap."' pylonName' testList.ElementAt (intersectElement).Key));  			return true;  		}  		// Check if ship already docked in this zone  		IMyCubeBlock e = beaconList [0];  		IMyCubeGrid parent = (IMyCubeGrid)e.Parent;  		long[] beaconListIds = beaconList.Select (b => b.EntityId).ToArray ();  		long ownerId = beaconList.First ().OwnerId;  		List<DockingItem> checkItems = Docking.Instance.Find (d => d.PlayerId == ownerId && d.TargetEntityId == parent.EntityId && d.DockingBeaconIds.Intersect (beaconListIds).Count () == 4);  		if (checkItems.Count >= PluginSettings.Instance.DockingShipsPerZone) {  			Communication.SendPrivateInformation (userId' string.Format ("Docking zone already '{0}' already contains the maximum capacity of ships."' pylonName));  			return true;  		}  		// Figure out center of docking area' and other distance information  		double maxDistance = 99;  		Vector3D vPos = new Vector3D (0' 0' 0);  		foreach (IMyCubeBlock b in beaconList) {  			Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  			vPos += beaconPos;  		}  		vPos = vPos / 4;  		foreach (IMyCubeBlock b in beaconList) {  			Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  			maxDistance = Math.Min (maxDistance' Vector3D.Distance (vPos' beaconPos));  		}  		// Find ship in docking area  		IMyCubeGrid dockingEntity = null;  		HashSet<IMyEntity> cubeGrids = new HashSet<IMyEntity> ();  		MyAPIGateway.Entities.GetEntities (cubeGrids' f => f is IMyCubeGrid);  		foreach (IMyCubeGrid gridCheck in cubeGrids) {  			if (gridCheck.IsStatic || gridCheck == parent)  				continue;  			double distance = Vector3D.Distance (gridCheck.GetPosition ()' vPos);  			if (distance < maxDistance) {  				dockingEntity = gridCheck;  				break;  			}  		}  		// Figure out if the ship fits in docking area' and then save ship      		if (dockingEntity != null) {  			// Get bounding box of both the docking zone and docking ship  			OrientedBoundingBoxD targetBounding = Entity.GetBoundingBox (beaconList);  			OrientedBoundingBoxD dockingBounding = Entity.GetBoundingBox (dockingEntity);  			// Make sure the docking zone contains the docking ship.  If they intersect or are disjointed' then fail  			if (!Entity.GreaterThan (dockingBounding.HalfExtent * 2' targetBounding.HalfExtent * 2)) {  				Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is too large for it's carrier.  The ship's bounding box must fit inside the docking zone bounding box!"' dockingEntity.DisplayName));  				return true;  			}  			if (targetBounding.Contains (ref dockingBounding) != ContainmentType.Contains) {  				Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is not fully inside the docking zone '{1}'.  Make sure the ship is fully contained inside the docking zone"' dockingEntity.DisplayName' pylonName));  				return true;  			}  			// Calculate the mass and ensure the docking ship is less than half the mass of the dock  			float parentMass = Entity.CalculateMass (parent);  			float dockingMass = Entity.CalculateMass (dockingEntity);  			if (dockingMass > parentMass) {  				Communication.SendPrivateInformation (userId' string.Format ("The ship you're trying to dock is too heavy for it's carrier.  The ship mass must be less than half the large ship / stations mass! (DM={0}kg CM={1}kg)"' dockingMass' parentMass));  				return true;  			}  			// Check to see if the ship is piloted' if it is' error out.    			// TODO: Check to see if we can get a real time copy of this entity?  			List<IMySlimBlock> blocks = new List<IMySlimBlock> ();  			dockingEntity.GetBlocks (blocks' x => x.FatBlock != null && x.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_Cockpit));  			foreach (IMySlimBlock slim_cbe in blocks) {  				MyObjectBuilder_Cockpit c = (MyObjectBuilder_Cockpit)slim_cbe.FatBlock.GetObjectBuilderCubeBlock ();  				if (c.Pilot != null) {  					Communication.SendPrivateInformation (userId' string.Format ("Ship in docking zone '{0}' has a pilot!  Please exit the ship before trying to dock.  (Sometimes this can lag a bit.  Wait 10 seconds and try again)"' pylonName));  					return true;  				}  			}  			// Save position and rotation information.  Some fun stuff here.  			// Get our dock rotation as a quaternion  			Quaternion saveQuat = Quaternion.CreateFromRotationMatrix (parent.WorldMatrix.GetOrientation ());  			// Transform docked ship's local position by inverse of the the parent (unwinds parent) and save it for when we undock  			Vector3D savePos = Vector3D.Transform (dockingEntity.GetPosition () - parent.GetPosition ()' Quaternion.Inverse (saveQuat));  			// Get local rotation of dock ship' and save it for when we undock  			saveQuat = Quaternion.Inverse (saveQuat) * Quaternion.CreateFromRotationMatrix (dockingEntity.WorldMatrix.GetOrientation ());  			// Save ship to file and remove  			FileInfo info = new FileInfo (Essentials.PluginPath + String.Format ("\\Docking\\docked_{0}_{1}_{2}.sbc"' ownerId' parent.EntityId' dockingEntity.EntityId));  			//CubeGridEntity dockingGrid = new CubeGridEntity((MyObjectBuilder_CubeGrid)dockingEntity.GetObjectBuilder()' dockingEntity);  			MyObjectBuilder_CubeGrid gridBuilder = CubeGrids.SafeGetObjectBuilder (dockingEntity);  			if (gridBuilder == null) {  				Communication.SendPrivateInformation (userId' string.Format ("Failed to load entity for export: {0}"' dockingEntity.DisplayName));  				return true;  			}  			// Save item  			DockingItem dockItem = new DockingItem ();  			dockItem.DockedEntityId = dockingEntity.EntityId;  			dockItem.TargetEntityId = parent.EntityId;  			dockItem.PlayerId = ownerId;  			dockItem.DockingBeaconIds = beaconList.Select (s => s.EntityId).ToArray ();  			dockItem.DockedName = dockingEntity.DisplayName;  			dockItem.SavePos = savePos;  			dockItem.SaveQuat = saveQuat;  			Docking.Instance.Add (dockItem);  			// Serialize and save ship to file  			BaseObjectManager.WriteSpaceEngineersFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer> (gridBuilder' info.FullName);  			//BaseObjectManager.SaveContentFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer>(gridBuilder' info);  			BaseEntityNetworkManager.BroadcastRemoveEntity (dockingEntity);  			//dockingEntity.Close();  			Communication.SendPrivateInformation (userId' string.Format ("Docked ship '{0}' in docking zone '{1}'."' dockItem.DockedName' pylonName));  			/* 						// Add a cool down 						DockingCooldownItem cItem = new DockingCooldownItem(); 						cItem.name = pylonName; 						cItem.startTime = DateTime.Now; 						PluginDocking.CooldownList.Add(cItem); 						 */} else {  			Communication.SendPrivateInformation (userId' string.Format ("No ships in docking zone '{0}'."' pylonName));  		}  	} else if (beaconList.Count > 4) {  		Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName));  	} else {  		Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'.  There must be 4 beacons with the name '{0}' to create a docking zone.  Beacons must be fully built!"' pylonName));  	}  	return true;  } finally {  	m_docking = false;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The following statement contains a magic number: try {  	String pylonName = String.Join (" "' words);  	/* 				int timeLeft; 				if (Entity.CheckCoolDown(pylonName' out timeLeft)) 				{ 					Communication.Message(String.Format("The docking zone '{0}' is on cooldown.  Please wait a {1} seconds before trying to dock/undock again."' pylonName' Math.Max(0' timeLeft))); 					return; 				} 				*/if (PlayerMap.Instance.GetPlayerIdsFromSteamId (userId).Count < 1) {  		Communication.SendPrivateInformation (userId' string.Format ("Unable to find player Id: {0}"' userId));  		return true;  	}  	long playerId = PlayerMap.Instance.GetPlayerIdsFromSteamId (userId).First ();  	Dictionary<String' List<IMyCubeBlock>> testList;  	List<IMyCubeBlock> beaconList;  	DockingZone.FindByName (pylonName' out testList' out beaconList' playerId);  	if (beaconList.Count == 4) {  		// Check ownership  		foreach (IMyCubeBlock entityBlock in beaconList) {  			IMyTerminalBlock terminal = (IMyTerminalBlock)entityBlock;  			if (!terminal.HasPlayerAccess (playerId)) {  				Communication.SendPrivateInformation (userId' string.Format ("You do not have permission to use '{0}'.  You must either own all the beacons or they must be shared with faction."' pylonName));  				return true;  			}  		}  		// Check for bounding box intsection of other docking zones  		int intersectElement = 0;  		if (Entity.CheckForIntersection (testList' beaconList' out intersectElement)) {  			Communication.SendPrivateInformation (userId' string.Format ("The docking zone '{0}' intersects with docking zone '{1}'.  Make sure you place your docking zones so they don't overlap."' pylonName' testList.ElementAt (intersectElement).Key));  			return true;  		}  		// Check if ship already docked in this zone  		IMyCubeBlock e = beaconList [0];  		IMyCubeGrid parent = (IMyCubeGrid)e.Parent;  		long[] beaconListIds = beaconList.Select (b => b.EntityId).ToArray ();  		long ownerId = beaconList.First ().OwnerId;  		List<DockingItem> checkItems = Docking.Instance.Find (d => d.PlayerId == ownerId && d.TargetEntityId == parent.EntityId && d.DockingBeaconIds.Intersect (beaconListIds).Count () == 4);  		if (checkItems.Count >= PluginSettings.Instance.DockingShipsPerZone) {  			Communication.SendPrivateInformation (userId' string.Format ("Docking zone already '{0}' already contains the maximum capacity of ships."' pylonName));  			return true;  		}  		// Figure out center of docking area' and other distance information  		double maxDistance = 99;  		Vector3D vPos = new Vector3D (0' 0' 0);  		foreach (IMyCubeBlock b in beaconList) {  			Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  			vPos += beaconPos;  		}  		vPos = vPos / 4;  		foreach (IMyCubeBlock b in beaconList) {  			Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  			maxDistance = Math.Min (maxDistance' Vector3D.Distance (vPos' beaconPos));  		}  		// Find ship in docking area  		IMyCubeGrid dockingEntity = null;  		HashSet<IMyEntity> cubeGrids = new HashSet<IMyEntity> ();  		MyAPIGateway.Entities.GetEntities (cubeGrids' f => f is IMyCubeGrid);  		foreach (IMyCubeGrid gridCheck in cubeGrids) {  			if (gridCheck.IsStatic || gridCheck == parent)  				continue;  			double distance = Vector3D.Distance (gridCheck.GetPosition ()' vPos);  			if (distance < maxDistance) {  				dockingEntity = gridCheck;  				break;  			}  		}  		// Figure out if the ship fits in docking area' and then save ship      		if (dockingEntity != null) {  			// Get bounding box of both the docking zone and docking ship  			OrientedBoundingBoxD targetBounding = Entity.GetBoundingBox (beaconList);  			OrientedBoundingBoxD dockingBounding = Entity.GetBoundingBox (dockingEntity);  			// Make sure the docking zone contains the docking ship.  If they intersect or are disjointed' then fail  			if (!Entity.GreaterThan (dockingBounding.HalfExtent * 2' targetBounding.HalfExtent * 2)) {  				Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is too large for it's carrier.  The ship's bounding box must fit inside the docking zone bounding box!"' dockingEntity.DisplayName));  				return true;  			}  			if (targetBounding.Contains (ref dockingBounding) != ContainmentType.Contains) {  				Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is not fully inside the docking zone '{1}'.  Make sure the ship is fully contained inside the docking zone"' dockingEntity.DisplayName' pylonName));  				return true;  			}  			// Calculate the mass and ensure the docking ship is less than half the mass of the dock  			float parentMass = Entity.CalculateMass (parent);  			float dockingMass = Entity.CalculateMass (dockingEntity);  			if (dockingMass > parentMass) {  				Communication.SendPrivateInformation (userId' string.Format ("The ship you're trying to dock is too heavy for it's carrier.  The ship mass must be less than half the large ship / stations mass! (DM={0}kg CM={1}kg)"' dockingMass' parentMass));  				return true;  			}  			// Check to see if the ship is piloted' if it is' error out.    			// TODO: Check to see if we can get a real time copy of this entity?  			List<IMySlimBlock> blocks = new List<IMySlimBlock> ();  			dockingEntity.GetBlocks (blocks' x => x.FatBlock != null && x.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_Cockpit));  			foreach (IMySlimBlock slim_cbe in blocks) {  				MyObjectBuilder_Cockpit c = (MyObjectBuilder_Cockpit)slim_cbe.FatBlock.GetObjectBuilderCubeBlock ();  				if (c.Pilot != null) {  					Communication.SendPrivateInformation (userId' string.Format ("Ship in docking zone '{0}' has a pilot!  Please exit the ship before trying to dock.  (Sometimes this can lag a bit.  Wait 10 seconds and try again)"' pylonName));  					return true;  				}  			}  			// Save position and rotation information.  Some fun stuff here.  			// Get our dock rotation as a quaternion  			Quaternion saveQuat = Quaternion.CreateFromRotationMatrix (parent.WorldMatrix.GetOrientation ());  			// Transform docked ship's local position by inverse of the the parent (unwinds parent) and save it for when we undock  			Vector3D savePos = Vector3D.Transform (dockingEntity.GetPosition () - parent.GetPosition ()' Quaternion.Inverse (saveQuat));  			// Get local rotation of dock ship' and save it for when we undock  			saveQuat = Quaternion.Inverse (saveQuat) * Quaternion.CreateFromRotationMatrix (dockingEntity.WorldMatrix.GetOrientation ());  			// Save ship to file and remove  			FileInfo info = new FileInfo (Essentials.PluginPath + String.Format ("\\Docking\\docked_{0}_{1}_{2}.sbc"' ownerId' parent.EntityId' dockingEntity.EntityId));  			//CubeGridEntity dockingGrid = new CubeGridEntity((MyObjectBuilder_CubeGrid)dockingEntity.GetObjectBuilder()' dockingEntity);  			MyObjectBuilder_CubeGrid gridBuilder = CubeGrids.SafeGetObjectBuilder (dockingEntity);  			if (gridBuilder == null) {  				Communication.SendPrivateInformation (userId' string.Format ("Failed to load entity for export: {0}"' dockingEntity.DisplayName));  				return true;  			}  			// Save item  			DockingItem dockItem = new DockingItem ();  			dockItem.DockedEntityId = dockingEntity.EntityId;  			dockItem.TargetEntityId = parent.EntityId;  			dockItem.PlayerId = ownerId;  			dockItem.DockingBeaconIds = beaconList.Select (s => s.EntityId).ToArray ();  			dockItem.DockedName = dockingEntity.DisplayName;  			dockItem.SavePos = savePos;  			dockItem.SaveQuat = saveQuat;  			Docking.Instance.Add (dockItem);  			// Serialize and save ship to file  			BaseObjectManager.WriteSpaceEngineersFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer> (gridBuilder' info.FullName);  			//BaseObjectManager.SaveContentFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer>(gridBuilder' info);  			BaseEntityNetworkManager.BroadcastRemoveEntity (dockingEntity);  			//dockingEntity.Close();  			Communication.SendPrivateInformation (userId' string.Format ("Docked ship '{0}' in docking zone '{1}'."' dockItem.DockedName' pylonName));  			/* 						// Add a cool down 						DockingCooldownItem cItem = new DockingCooldownItem(); 						cItem.name = pylonName; 						cItem.startTime = DateTime.Now; 						PluginDocking.CooldownList.Add(cItem); 						 */} else {  			Communication.SendPrivateInformation (userId' string.Format ("No ships in docking zone '{0}'."' pylonName));  		}  	} else if (beaconList.Count > 4) {  		Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName));  	} else {  		Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'.  There must be 4 beacons with the name '{0}' to create a docking zone.  Beacons must be fully built!"' pylonName));  	}  	return true;  } finally {  	m_docking = false;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The following statement contains a magic number: try {  	String pylonName = String.Join (" "' words);  	/* 				int timeLeft; 				if (Entity.CheckCoolDown(pylonName' out timeLeft)) 				{ 					Communication.Message(String.Format("The docking zone '{0}' is on cooldown.  Please wait a {1} seconds before trying to dock/undock again."' pylonName' Math.Max(0' timeLeft))); 					return; 				} 				*/if (PlayerMap.Instance.GetPlayerIdsFromSteamId (userId).Count < 1) {  		Communication.SendPrivateInformation (userId' string.Format ("Unable to find player Id: {0}"' userId));  		return true;  	}  	long playerId = PlayerMap.Instance.GetPlayerIdsFromSteamId (userId).First ();  	Dictionary<String' List<IMyCubeBlock>> testList;  	List<IMyCubeBlock> beaconList;  	DockingZone.FindByName (pylonName' out testList' out beaconList' playerId);  	if (beaconList.Count == 4) {  		// Check ownership  		foreach (IMyCubeBlock entityBlock in beaconList) {  			IMyTerminalBlock terminal = (IMyTerminalBlock)entityBlock;  			if (!terminal.HasPlayerAccess (playerId)) {  				Communication.SendPrivateInformation (userId' string.Format ("You do not have permission to use '{0}'.  You must either own all the beacons or they must be shared with faction."' pylonName));  				return true;  			}  		}  		// Check for bounding box intsection of other docking zones  		int intersectElement = 0;  		if (Entity.CheckForIntersection (testList' beaconList' out intersectElement)) {  			Communication.SendPrivateInformation (userId' string.Format ("The docking zone '{0}' intersects with docking zone '{1}'.  Make sure you place your docking zones so they don't overlap."' pylonName' testList.ElementAt (intersectElement).Key));  			return true;  		}  		// Check if ship already docked in this zone  		IMyCubeBlock e = beaconList [0];  		IMyCubeGrid parent = (IMyCubeGrid)e.Parent;  		long[] beaconListIds = beaconList.Select (b => b.EntityId).ToArray ();  		long ownerId = beaconList.First ().OwnerId;  		List<DockingItem> checkItems = Docking.Instance.Find (d => d.PlayerId == ownerId && d.TargetEntityId == parent.EntityId && d.DockingBeaconIds.Intersect (beaconListIds).Count () == 4);  		if (checkItems.Count >= PluginSettings.Instance.DockingShipsPerZone) {  			Communication.SendPrivateInformation (userId' string.Format ("Docking zone already '{0}' already contains the maximum capacity of ships."' pylonName));  			return true;  		}  		// Figure out center of docking area' and other distance information  		double maxDistance = 99;  		Vector3D vPos = new Vector3D (0' 0' 0);  		foreach (IMyCubeBlock b in beaconList) {  			Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  			vPos += beaconPos;  		}  		vPos = vPos / 4;  		foreach (IMyCubeBlock b in beaconList) {  			Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  			maxDistance = Math.Min (maxDistance' Vector3D.Distance (vPos' beaconPos));  		}  		// Find ship in docking area  		IMyCubeGrid dockingEntity = null;  		HashSet<IMyEntity> cubeGrids = new HashSet<IMyEntity> ();  		MyAPIGateway.Entities.GetEntities (cubeGrids' f => f is IMyCubeGrid);  		foreach (IMyCubeGrid gridCheck in cubeGrids) {  			if (gridCheck.IsStatic || gridCheck == parent)  				continue;  			double distance = Vector3D.Distance (gridCheck.GetPosition ()' vPos);  			if (distance < maxDistance) {  				dockingEntity = gridCheck;  				break;  			}  		}  		// Figure out if the ship fits in docking area' and then save ship      		if (dockingEntity != null) {  			// Get bounding box of both the docking zone and docking ship  			OrientedBoundingBoxD targetBounding = Entity.GetBoundingBox (beaconList);  			OrientedBoundingBoxD dockingBounding = Entity.GetBoundingBox (dockingEntity);  			// Make sure the docking zone contains the docking ship.  If they intersect or are disjointed' then fail  			if (!Entity.GreaterThan (dockingBounding.HalfExtent * 2' targetBounding.HalfExtent * 2)) {  				Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is too large for it's carrier.  The ship's bounding box must fit inside the docking zone bounding box!"' dockingEntity.DisplayName));  				return true;  			}  			if (targetBounding.Contains (ref dockingBounding) != ContainmentType.Contains) {  				Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is not fully inside the docking zone '{1}'.  Make sure the ship is fully contained inside the docking zone"' dockingEntity.DisplayName' pylonName));  				return true;  			}  			// Calculate the mass and ensure the docking ship is less than half the mass of the dock  			float parentMass = Entity.CalculateMass (parent);  			float dockingMass = Entity.CalculateMass (dockingEntity);  			if (dockingMass > parentMass) {  				Communication.SendPrivateInformation (userId' string.Format ("The ship you're trying to dock is too heavy for it's carrier.  The ship mass must be less than half the large ship / stations mass! (DM={0}kg CM={1}kg)"' dockingMass' parentMass));  				return true;  			}  			// Check to see if the ship is piloted' if it is' error out.    			// TODO: Check to see if we can get a real time copy of this entity?  			List<IMySlimBlock> blocks = new List<IMySlimBlock> ();  			dockingEntity.GetBlocks (blocks' x => x.FatBlock != null && x.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_Cockpit));  			foreach (IMySlimBlock slim_cbe in blocks) {  				MyObjectBuilder_Cockpit c = (MyObjectBuilder_Cockpit)slim_cbe.FatBlock.GetObjectBuilderCubeBlock ();  				if (c.Pilot != null) {  					Communication.SendPrivateInformation (userId' string.Format ("Ship in docking zone '{0}' has a pilot!  Please exit the ship before trying to dock.  (Sometimes this can lag a bit.  Wait 10 seconds and try again)"' pylonName));  					return true;  				}  			}  			// Save position and rotation information.  Some fun stuff here.  			// Get our dock rotation as a quaternion  			Quaternion saveQuat = Quaternion.CreateFromRotationMatrix (parent.WorldMatrix.GetOrientation ());  			// Transform docked ship's local position by inverse of the the parent (unwinds parent) and save it for when we undock  			Vector3D savePos = Vector3D.Transform (dockingEntity.GetPosition () - parent.GetPosition ()' Quaternion.Inverse (saveQuat));  			// Get local rotation of dock ship' and save it for when we undock  			saveQuat = Quaternion.Inverse (saveQuat) * Quaternion.CreateFromRotationMatrix (dockingEntity.WorldMatrix.GetOrientation ());  			// Save ship to file and remove  			FileInfo info = new FileInfo (Essentials.PluginPath + String.Format ("\\Docking\\docked_{0}_{1}_{2}.sbc"' ownerId' parent.EntityId' dockingEntity.EntityId));  			//CubeGridEntity dockingGrid = new CubeGridEntity((MyObjectBuilder_CubeGrid)dockingEntity.GetObjectBuilder()' dockingEntity);  			MyObjectBuilder_CubeGrid gridBuilder = CubeGrids.SafeGetObjectBuilder (dockingEntity);  			if (gridBuilder == null) {  				Communication.SendPrivateInformation (userId' string.Format ("Failed to load entity for export: {0}"' dockingEntity.DisplayName));  				return true;  			}  			// Save item  			DockingItem dockItem = new DockingItem ();  			dockItem.DockedEntityId = dockingEntity.EntityId;  			dockItem.TargetEntityId = parent.EntityId;  			dockItem.PlayerId = ownerId;  			dockItem.DockingBeaconIds = beaconList.Select (s => s.EntityId).ToArray ();  			dockItem.DockedName = dockingEntity.DisplayName;  			dockItem.SavePos = savePos;  			dockItem.SaveQuat = saveQuat;  			Docking.Instance.Add (dockItem);  			// Serialize and save ship to file  			BaseObjectManager.WriteSpaceEngineersFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer> (gridBuilder' info.FullName);  			//BaseObjectManager.SaveContentFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer>(gridBuilder' info);  			BaseEntityNetworkManager.BroadcastRemoveEntity (dockingEntity);  			//dockingEntity.Close();  			Communication.SendPrivateInformation (userId' string.Format ("Docked ship '{0}' in docking zone '{1}'."' dockItem.DockedName' pylonName));  			/* 						// Add a cool down 						DockingCooldownItem cItem = new DockingCooldownItem(); 						cItem.name = pylonName; 						cItem.startTime = DateTime.Now; 						PluginDocking.CooldownList.Add(cItem); 						 */} else {  			Communication.SendPrivateInformation (userId' string.Format ("No ships in docking zone '{0}'."' pylonName));  		}  	} else if (beaconList.Count > 4) {  		Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName));  	} else {  		Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'.  There must be 4 beacons with the name '{0}' to create a docking zone.  Beacons must be fully built!"' pylonName));  	}  	return true;  } finally {  	m_docking = false;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The following statement contains a magic number: try {  	String pylonName = String.Join (" "' words);  	/* 				int timeLeft; 				if (Entity.CheckCoolDown(pylonName' out timeLeft)) 				{ 					Communication.Message(String.Format("The docking zone '{0}' is on cooldown.  Please wait a {1} seconds before trying to dock/undock again."' pylonName' Math.Max(0' timeLeft))); 					return; 				} 				*/if (PlayerMap.Instance.GetPlayerIdsFromSteamId (userId).Count < 1) {  		Communication.SendPrivateInformation (userId' string.Format ("Unable to find player Id: {0}"' userId));  		return true;  	}  	long playerId = PlayerMap.Instance.GetPlayerIdsFromSteamId (userId).First ();  	Dictionary<String' List<IMyCubeBlock>> testList;  	List<IMyCubeBlock> beaconList;  	DockingZone.FindByName (pylonName' out testList' out beaconList' playerId);  	if (beaconList.Count == 4) {  		// Check ownership  		foreach (IMyCubeBlock entityBlock in beaconList) {  			IMyTerminalBlock terminal = (IMyTerminalBlock)entityBlock;  			if (!terminal.HasPlayerAccess (playerId)) {  				Communication.SendPrivateInformation (userId' string.Format ("You do not have permission to use '{0}'.  You must either own all the beacons or they must be shared with faction."' pylonName));  				return true;  			}  		}  		// Check for bounding box intsection of other docking zones  		int intersectElement = 0;  		if (Entity.CheckForIntersection (testList' beaconList' out intersectElement)) {  			Communication.SendPrivateInformation (userId' string.Format ("The docking zone '{0}' intersects with docking zone '{1}'.  Make sure you place your docking zones so they don't overlap."' pylonName' testList.ElementAt (intersectElement).Key));  			return true;  		}  		// Check if ship already docked in this zone  		IMyCubeBlock e = beaconList [0];  		IMyCubeGrid parent = (IMyCubeGrid)e.Parent;  		long[] beaconListIds = beaconList.Select (b => b.EntityId).ToArray ();  		long ownerId = beaconList.First ().OwnerId;  		List<DockingItem> checkItems = Docking.Instance.Find (d => d.PlayerId == ownerId && d.TargetEntityId == parent.EntityId && d.DockingBeaconIds.Intersect (beaconListIds).Count () == 4);  		if (checkItems.Count >= PluginSettings.Instance.DockingShipsPerZone) {  			Communication.SendPrivateInformation (userId' string.Format ("Docking zone already '{0}' already contains the maximum capacity of ships."' pylonName));  			return true;  		}  		// Figure out center of docking area' and other distance information  		double maxDistance = 99;  		Vector3D vPos = new Vector3D (0' 0' 0);  		foreach (IMyCubeBlock b in beaconList) {  			Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  			vPos += beaconPos;  		}  		vPos = vPos / 4;  		foreach (IMyCubeBlock b in beaconList) {  			Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  			maxDistance = Math.Min (maxDistance' Vector3D.Distance (vPos' beaconPos));  		}  		// Find ship in docking area  		IMyCubeGrid dockingEntity = null;  		HashSet<IMyEntity> cubeGrids = new HashSet<IMyEntity> ();  		MyAPIGateway.Entities.GetEntities (cubeGrids' f => f is IMyCubeGrid);  		foreach (IMyCubeGrid gridCheck in cubeGrids) {  			if (gridCheck.IsStatic || gridCheck == parent)  				continue;  			double distance = Vector3D.Distance (gridCheck.GetPosition ()' vPos);  			if (distance < maxDistance) {  				dockingEntity = gridCheck;  				break;  			}  		}  		// Figure out if the ship fits in docking area' and then save ship      		if (dockingEntity != null) {  			// Get bounding box of both the docking zone and docking ship  			OrientedBoundingBoxD targetBounding = Entity.GetBoundingBox (beaconList);  			OrientedBoundingBoxD dockingBounding = Entity.GetBoundingBox (dockingEntity);  			// Make sure the docking zone contains the docking ship.  If they intersect or are disjointed' then fail  			if (!Entity.GreaterThan (dockingBounding.HalfExtent * 2' targetBounding.HalfExtent * 2)) {  				Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is too large for it's carrier.  The ship's bounding box must fit inside the docking zone bounding box!"' dockingEntity.DisplayName));  				return true;  			}  			if (targetBounding.Contains (ref dockingBounding) != ContainmentType.Contains) {  				Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is not fully inside the docking zone '{1}'.  Make sure the ship is fully contained inside the docking zone"' dockingEntity.DisplayName' pylonName));  				return true;  			}  			// Calculate the mass and ensure the docking ship is less than half the mass of the dock  			float parentMass = Entity.CalculateMass (parent);  			float dockingMass = Entity.CalculateMass (dockingEntity);  			if (dockingMass > parentMass) {  				Communication.SendPrivateInformation (userId' string.Format ("The ship you're trying to dock is too heavy for it's carrier.  The ship mass must be less than half the large ship / stations mass! (DM={0}kg CM={1}kg)"' dockingMass' parentMass));  				return true;  			}  			// Check to see if the ship is piloted' if it is' error out.    			// TODO: Check to see if we can get a real time copy of this entity?  			List<IMySlimBlock> blocks = new List<IMySlimBlock> ();  			dockingEntity.GetBlocks (blocks' x => x.FatBlock != null && x.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_Cockpit));  			foreach (IMySlimBlock slim_cbe in blocks) {  				MyObjectBuilder_Cockpit c = (MyObjectBuilder_Cockpit)slim_cbe.FatBlock.GetObjectBuilderCubeBlock ();  				if (c.Pilot != null) {  					Communication.SendPrivateInformation (userId' string.Format ("Ship in docking zone '{0}' has a pilot!  Please exit the ship before trying to dock.  (Sometimes this can lag a bit.  Wait 10 seconds and try again)"' pylonName));  					return true;  				}  			}  			// Save position and rotation information.  Some fun stuff here.  			// Get our dock rotation as a quaternion  			Quaternion saveQuat = Quaternion.CreateFromRotationMatrix (parent.WorldMatrix.GetOrientation ());  			// Transform docked ship's local position by inverse of the the parent (unwinds parent) and save it for when we undock  			Vector3D savePos = Vector3D.Transform (dockingEntity.GetPosition () - parent.GetPosition ()' Quaternion.Inverse (saveQuat));  			// Get local rotation of dock ship' and save it for when we undock  			saveQuat = Quaternion.Inverse (saveQuat) * Quaternion.CreateFromRotationMatrix (dockingEntity.WorldMatrix.GetOrientation ());  			// Save ship to file and remove  			FileInfo info = new FileInfo (Essentials.PluginPath + String.Format ("\\Docking\\docked_{0}_{1}_{2}.sbc"' ownerId' parent.EntityId' dockingEntity.EntityId));  			//CubeGridEntity dockingGrid = new CubeGridEntity((MyObjectBuilder_CubeGrid)dockingEntity.GetObjectBuilder()' dockingEntity);  			MyObjectBuilder_CubeGrid gridBuilder = CubeGrids.SafeGetObjectBuilder (dockingEntity);  			if (gridBuilder == null) {  				Communication.SendPrivateInformation (userId' string.Format ("Failed to load entity for export: {0}"' dockingEntity.DisplayName));  				return true;  			}  			// Save item  			DockingItem dockItem = new DockingItem ();  			dockItem.DockedEntityId = dockingEntity.EntityId;  			dockItem.TargetEntityId = parent.EntityId;  			dockItem.PlayerId = ownerId;  			dockItem.DockingBeaconIds = beaconList.Select (s => s.EntityId).ToArray ();  			dockItem.DockedName = dockingEntity.DisplayName;  			dockItem.SavePos = savePos;  			dockItem.SaveQuat = saveQuat;  			Docking.Instance.Add (dockItem);  			// Serialize and save ship to file  			BaseObjectManager.WriteSpaceEngineersFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer> (gridBuilder' info.FullName);  			//BaseObjectManager.SaveContentFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer>(gridBuilder' info);  			BaseEntityNetworkManager.BroadcastRemoveEntity (dockingEntity);  			//dockingEntity.Close();  			Communication.SendPrivateInformation (userId' string.Format ("Docked ship '{0}' in docking zone '{1}'."' dockItem.DockedName' pylonName));  			/* 						// Add a cool down 						DockingCooldownItem cItem = new DockingCooldownItem(); 						cItem.name = pylonName; 						cItem.startTime = DateTime.Now; 						PluginDocking.CooldownList.Add(cItem); 						 */} else {  			Communication.SendPrivateInformation (userId' string.Format ("No ships in docking zone '{0}'."' pylonName));  		}  	} else if (beaconList.Count > 4) {  		Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName));  	} else {  		Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'.  There must be 4 beacons with the name '{0}' to create a docking zone.  Beacons must be fully built!"' pylonName));  	}  	return true;  } finally {  	m_docking = false;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The following statement contains a magic number: try {  	String pylonName = String.Join (" "' words);  	/* 				int timeLeft; 				if (Entity.CheckCoolDown(pylonName' out timeLeft)) 				{ 					Communication.Message(String.Format("The docking zone '{0}' is on cooldown.  Please wait a {1} seconds before trying to dock/undock again."' pylonName' Math.Max(0' timeLeft))); 					return; 				} 				*/if (PlayerMap.Instance.GetPlayerIdsFromSteamId (userId).Count < 1) {  		Communication.SendPrivateInformation (userId' string.Format ("Unable to find player Id: {0}"' userId));  		return true;  	}  	long playerId = PlayerMap.Instance.GetPlayerIdsFromSteamId (userId).First ();  	Dictionary<String' List<IMyCubeBlock>> testList;  	List<IMyCubeBlock> beaconList;  	DockingZone.FindByName (pylonName' out testList' out beaconList' playerId);  	if (beaconList.Count == 4) {  		// Check ownership  		foreach (IMyCubeBlock entityBlock in beaconList) {  			IMyTerminalBlock terminal = (IMyTerminalBlock)entityBlock;  			if (!terminal.HasPlayerAccess (playerId)) {  				Communication.SendPrivateInformation (userId' string.Format ("You do not have permission to use '{0}'.  You must either own all the beacons or they must be shared with faction."' pylonName));  				return true;  			}  		}  		// Check for bounding box intsection of other docking zones  		int intersectElement = 0;  		if (Entity.CheckForIntersection (testList' beaconList' out intersectElement)) {  			Communication.SendPrivateInformation (userId' string.Format ("The docking zone '{0}' intersects with docking zone '{1}'.  Make sure you place your docking zones so they don't overlap."' pylonName' testList.ElementAt (intersectElement).Key));  			return true;  		}  		// Check if ship already docked in this zone  		IMyCubeBlock e = beaconList [0];  		IMyCubeGrid parent = (IMyCubeGrid)e.Parent;  		long[] beaconListIds = beaconList.Select (b => b.EntityId).ToArray ();  		long ownerId = beaconList.First ().OwnerId;  		List<DockingItem> checkItems = Docking.Instance.Find (d => d.PlayerId == ownerId && d.TargetEntityId == parent.EntityId && d.DockingBeaconIds.Intersect (beaconListIds).Count () == 4);  		if (checkItems.Count >= PluginSettings.Instance.DockingShipsPerZone) {  			Communication.SendPrivateInformation (userId' string.Format ("Docking zone already '{0}' already contains the maximum capacity of ships."' pylonName));  			return true;  		}  		// Figure out center of docking area' and other distance information  		double maxDistance = 99;  		Vector3D vPos = new Vector3D (0' 0' 0);  		foreach (IMyCubeBlock b in beaconList) {  			Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  			vPos += beaconPos;  		}  		vPos = vPos / 4;  		foreach (IMyCubeBlock b in beaconList) {  			Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  			maxDistance = Math.Min (maxDistance' Vector3D.Distance (vPos' beaconPos));  		}  		// Find ship in docking area  		IMyCubeGrid dockingEntity = null;  		HashSet<IMyEntity> cubeGrids = new HashSet<IMyEntity> ();  		MyAPIGateway.Entities.GetEntities (cubeGrids' f => f is IMyCubeGrid);  		foreach (IMyCubeGrid gridCheck in cubeGrids) {  			if (gridCheck.IsStatic || gridCheck == parent)  				continue;  			double distance = Vector3D.Distance (gridCheck.GetPosition ()' vPos);  			if (distance < maxDistance) {  				dockingEntity = gridCheck;  				break;  			}  		}  		// Figure out if the ship fits in docking area' and then save ship      		if (dockingEntity != null) {  			// Get bounding box of both the docking zone and docking ship  			OrientedBoundingBoxD targetBounding = Entity.GetBoundingBox (beaconList);  			OrientedBoundingBoxD dockingBounding = Entity.GetBoundingBox (dockingEntity);  			// Make sure the docking zone contains the docking ship.  If they intersect or are disjointed' then fail  			if (!Entity.GreaterThan (dockingBounding.HalfExtent * 2' targetBounding.HalfExtent * 2)) {  				Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is too large for it's carrier.  The ship's bounding box must fit inside the docking zone bounding box!"' dockingEntity.DisplayName));  				return true;  			}  			if (targetBounding.Contains (ref dockingBounding) != ContainmentType.Contains) {  				Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is not fully inside the docking zone '{1}'.  Make sure the ship is fully contained inside the docking zone"' dockingEntity.DisplayName' pylonName));  				return true;  			}  			// Calculate the mass and ensure the docking ship is less than half the mass of the dock  			float parentMass = Entity.CalculateMass (parent);  			float dockingMass = Entity.CalculateMass (dockingEntity);  			if (dockingMass > parentMass) {  				Communication.SendPrivateInformation (userId' string.Format ("The ship you're trying to dock is too heavy for it's carrier.  The ship mass must be less than half the large ship / stations mass! (DM={0}kg CM={1}kg)"' dockingMass' parentMass));  				return true;  			}  			// Check to see if the ship is piloted' if it is' error out.    			// TODO: Check to see if we can get a real time copy of this entity?  			List<IMySlimBlock> blocks = new List<IMySlimBlock> ();  			dockingEntity.GetBlocks (blocks' x => x.FatBlock != null && x.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_Cockpit));  			foreach (IMySlimBlock slim_cbe in blocks) {  				MyObjectBuilder_Cockpit c = (MyObjectBuilder_Cockpit)slim_cbe.FatBlock.GetObjectBuilderCubeBlock ();  				if (c.Pilot != null) {  					Communication.SendPrivateInformation (userId' string.Format ("Ship in docking zone '{0}' has a pilot!  Please exit the ship before trying to dock.  (Sometimes this can lag a bit.  Wait 10 seconds and try again)"' pylonName));  					return true;  				}  			}  			// Save position and rotation information.  Some fun stuff here.  			// Get our dock rotation as a quaternion  			Quaternion saveQuat = Quaternion.CreateFromRotationMatrix (parent.WorldMatrix.GetOrientation ());  			// Transform docked ship's local position by inverse of the the parent (unwinds parent) and save it for when we undock  			Vector3D savePos = Vector3D.Transform (dockingEntity.GetPosition () - parent.GetPosition ()' Quaternion.Inverse (saveQuat));  			// Get local rotation of dock ship' and save it for when we undock  			saveQuat = Quaternion.Inverse (saveQuat) * Quaternion.CreateFromRotationMatrix (dockingEntity.WorldMatrix.GetOrientation ());  			// Save ship to file and remove  			FileInfo info = new FileInfo (Essentials.PluginPath + String.Format ("\\Docking\\docked_{0}_{1}_{2}.sbc"' ownerId' parent.EntityId' dockingEntity.EntityId));  			//CubeGridEntity dockingGrid = new CubeGridEntity((MyObjectBuilder_CubeGrid)dockingEntity.GetObjectBuilder()' dockingEntity);  			MyObjectBuilder_CubeGrid gridBuilder = CubeGrids.SafeGetObjectBuilder (dockingEntity);  			if (gridBuilder == null) {  				Communication.SendPrivateInformation (userId' string.Format ("Failed to load entity for export: {0}"' dockingEntity.DisplayName));  				return true;  			}  			// Save item  			DockingItem dockItem = new DockingItem ();  			dockItem.DockedEntityId = dockingEntity.EntityId;  			dockItem.TargetEntityId = parent.EntityId;  			dockItem.PlayerId = ownerId;  			dockItem.DockingBeaconIds = beaconList.Select (s => s.EntityId).ToArray ();  			dockItem.DockedName = dockingEntity.DisplayName;  			dockItem.SavePos = savePos;  			dockItem.SaveQuat = saveQuat;  			Docking.Instance.Add (dockItem);  			// Serialize and save ship to file  			BaseObjectManager.WriteSpaceEngineersFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer> (gridBuilder' info.FullName);  			//BaseObjectManager.SaveContentFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer>(gridBuilder' info);  			BaseEntityNetworkManager.BroadcastRemoveEntity (dockingEntity);  			//dockingEntity.Close();  			Communication.SendPrivateInformation (userId' string.Format ("Docked ship '{0}' in docking zone '{1}'."' dockItem.DockedName' pylonName));  			/* 						// Add a cool down 						DockingCooldownItem cItem = new DockingCooldownItem(); 						cItem.name = pylonName; 						cItem.startTime = DateTime.Now; 						PluginDocking.CooldownList.Add(cItem); 						 */} else {  			Communication.SendPrivateInformation (userId' string.Format ("No ships in docking zone '{0}'."' pylonName));  		}  	} else if (beaconList.Count > 4) {  		Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName));  	} else {  		Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'.  There must be 4 beacons with the name '{0}' to create a docking zone.  Beacons must be fully built!"' pylonName));  	}  	return true;  } finally {  	m_docking = false;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The following statement contains a magic number: try {  	String pylonName = String.Join (" "' words);  	/* 				int timeLeft; 				if (Entity.CheckCoolDown(pylonName' out timeLeft)) 				{ 					Communication.Message(String.Format("The docking zone '{0}' is on cooldown.  Please wait a {1} seconds before trying to dock/undock again."' pylonName' Math.Max(0' timeLeft))); 					return; 				} 				*/if (PlayerMap.Instance.GetPlayerIdsFromSteamId (userId).Count < 1) {  		Communication.SendPrivateInformation (userId' string.Format ("Unable to find player Id: {0}"' userId));  		return true;  	}  	long playerId = PlayerMap.Instance.GetPlayerIdsFromSteamId (userId).First ();  	Dictionary<String' List<IMyCubeBlock>> testList;  	List<IMyCubeBlock> beaconList;  	DockingZone.FindByName (pylonName' out testList' out beaconList' playerId);  	if (beaconList.Count == 4) {  		// Check ownership  		foreach (IMyCubeBlock entityBlock in beaconList) {  			IMyTerminalBlock terminal = (IMyTerminalBlock)entityBlock;  			if (!terminal.HasPlayerAccess (playerId)) {  				Communication.SendPrivateInformation (userId' string.Format ("You do not have permission to use '{0}'.  You must either own all the beacons or they must be shared with faction."' pylonName));  				return true;  			}  		}  		// Check for bounding box intsection of other docking zones  		int intersectElement = 0;  		if (Entity.CheckForIntersection (testList' beaconList' out intersectElement)) {  			Communication.SendPrivateInformation (userId' string.Format ("The docking zone '{0}' intersects with docking zone '{1}'.  Make sure you place your docking zones so they don't overlap."' pylonName' testList.ElementAt (intersectElement).Key));  			return true;  		}  		// Check if ship already docked in this zone  		IMyCubeBlock e = beaconList [0];  		IMyCubeGrid parent = (IMyCubeGrid)e.Parent;  		long[] beaconListIds = beaconList.Select (b => b.EntityId).ToArray ();  		long ownerId = beaconList.First ().OwnerId;  		List<DockingItem> checkItems = Docking.Instance.Find (d => d.PlayerId == ownerId && d.TargetEntityId == parent.EntityId && d.DockingBeaconIds.Intersect (beaconListIds).Count () == 4);  		if (checkItems.Count >= PluginSettings.Instance.DockingShipsPerZone) {  			Communication.SendPrivateInformation (userId' string.Format ("Docking zone already '{0}' already contains the maximum capacity of ships."' pylonName));  			return true;  		}  		// Figure out center of docking area' and other distance information  		double maxDistance = 99;  		Vector3D vPos = new Vector3D (0' 0' 0);  		foreach (IMyCubeBlock b in beaconList) {  			Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  			vPos += beaconPos;  		}  		vPos = vPos / 4;  		foreach (IMyCubeBlock b in beaconList) {  			Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  			maxDistance = Math.Min (maxDistance' Vector3D.Distance (vPos' beaconPos));  		}  		// Find ship in docking area  		IMyCubeGrid dockingEntity = null;  		HashSet<IMyEntity> cubeGrids = new HashSet<IMyEntity> ();  		MyAPIGateway.Entities.GetEntities (cubeGrids' f => f is IMyCubeGrid);  		foreach (IMyCubeGrid gridCheck in cubeGrids) {  			if (gridCheck.IsStatic || gridCheck == parent)  				continue;  			double distance = Vector3D.Distance (gridCheck.GetPosition ()' vPos);  			if (distance < maxDistance) {  				dockingEntity = gridCheck;  				break;  			}  		}  		// Figure out if the ship fits in docking area' and then save ship      		if (dockingEntity != null) {  			// Get bounding box of both the docking zone and docking ship  			OrientedBoundingBoxD targetBounding = Entity.GetBoundingBox (beaconList);  			OrientedBoundingBoxD dockingBounding = Entity.GetBoundingBox (dockingEntity);  			// Make sure the docking zone contains the docking ship.  If they intersect or are disjointed' then fail  			if (!Entity.GreaterThan (dockingBounding.HalfExtent * 2' targetBounding.HalfExtent * 2)) {  				Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is too large for it's carrier.  The ship's bounding box must fit inside the docking zone bounding box!"' dockingEntity.DisplayName));  				return true;  			}  			if (targetBounding.Contains (ref dockingBounding) != ContainmentType.Contains) {  				Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is not fully inside the docking zone '{1}'.  Make sure the ship is fully contained inside the docking zone"' dockingEntity.DisplayName' pylonName));  				return true;  			}  			// Calculate the mass and ensure the docking ship is less than half the mass of the dock  			float parentMass = Entity.CalculateMass (parent);  			float dockingMass = Entity.CalculateMass (dockingEntity);  			if (dockingMass > parentMass) {  				Communication.SendPrivateInformation (userId' string.Format ("The ship you're trying to dock is too heavy for it's carrier.  The ship mass must be less than half the large ship / stations mass! (DM={0}kg CM={1}kg)"' dockingMass' parentMass));  				return true;  			}  			// Check to see if the ship is piloted' if it is' error out.    			// TODO: Check to see if we can get a real time copy of this entity?  			List<IMySlimBlock> blocks = new List<IMySlimBlock> ();  			dockingEntity.GetBlocks (blocks' x => x.FatBlock != null && x.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_Cockpit));  			foreach (IMySlimBlock slim_cbe in blocks) {  				MyObjectBuilder_Cockpit c = (MyObjectBuilder_Cockpit)slim_cbe.FatBlock.GetObjectBuilderCubeBlock ();  				if (c.Pilot != null) {  					Communication.SendPrivateInformation (userId' string.Format ("Ship in docking zone '{0}' has a pilot!  Please exit the ship before trying to dock.  (Sometimes this can lag a bit.  Wait 10 seconds and try again)"' pylonName));  					return true;  				}  			}  			// Save position and rotation information.  Some fun stuff here.  			// Get our dock rotation as a quaternion  			Quaternion saveQuat = Quaternion.CreateFromRotationMatrix (parent.WorldMatrix.GetOrientation ());  			// Transform docked ship's local position by inverse of the the parent (unwinds parent) and save it for when we undock  			Vector3D savePos = Vector3D.Transform (dockingEntity.GetPosition () - parent.GetPosition ()' Quaternion.Inverse (saveQuat));  			// Get local rotation of dock ship' and save it for when we undock  			saveQuat = Quaternion.Inverse (saveQuat) * Quaternion.CreateFromRotationMatrix (dockingEntity.WorldMatrix.GetOrientation ());  			// Save ship to file and remove  			FileInfo info = new FileInfo (Essentials.PluginPath + String.Format ("\\Docking\\docked_{0}_{1}_{2}.sbc"' ownerId' parent.EntityId' dockingEntity.EntityId));  			//CubeGridEntity dockingGrid = new CubeGridEntity((MyObjectBuilder_CubeGrid)dockingEntity.GetObjectBuilder()' dockingEntity);  			MyObjectBuilder_CubeGrid gridBuilder = CubeGrids.SafeGetObjectBuilder (dockingEntity);  			if (gridBuilder == null) {  				Communication.SendPrivateInformation (userId' string.Format ("Failed to load entity for export: {0}"' dockingEntity.DisplayName));  				return true;  			}  			// Save item  			DockingItem dockItem = new DockingItem ();  			dockItem.DockedEntityId = dockingEntity.EntityId;  			dockItem.TargetEntityId = parent.EntityId;  			dockItem.PlayerId = ownerId;  			dockItem.DockingBeaconIds = beaconList.Select (s => s.EntityId).ToArray ();  			dockItem.DockedName = dockingEntity.DisplayName;  			dockItem.SavePos = savePos;  			dockItem.SaveQuat = saveQuat;  			Docking.Instance.Add (dockItem);  			// Serialize and save ship to file  			BaseObjectManager.WriteSpaceEngineersFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer> (gridBuilder' info.FullName);  			//BaseObjectManager.SaveContentFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer>(gridBuilder' info);  			BaseEntityNetworkManager.BroadcastRemoveEntity (dockingEntity);  			//dockingEntity.Close();  			Communication.SendPrivateInformation (userId' string.Format ("Docked ship '{0}' in docking zone '{1}'."' dockItem.DockedName' pylonName));  			/* 						// Add a cool down 						DockingCooldownItem cItem = new DockingCooldownItem(); 						cItem.name = pylonName; 						cItem.startTime = DateTime.Now; 						PluginDocking.CooldownList.Add(cItem); 						 */} else {  			Communication.SendPrivateInformation (userId' string.Format ("No ships in docking zone '{0}'."' pylonName));  		}  	} else if (beaconList.Count > 4) {  		Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName));  	} else {  		Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'.  There must be 4 beacons with the name '{0}' to create a docking zone.  Beacons must be fully built!"' pylonName));  	}  	return true;  } finally {  	m_docking = false;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The following statement contains a magic number: if (beaconList.Count == 4) {  	// Check ownership  	foreach (IMyCubeBlock entityBlock in beaconList) {  		IMyTerminalBlock terminal = (IMyTerminalBlock)entityBlock;  		if (!terminal.HasPlayerAccess (playerId)) {  			Communication.SendPrivateInformation (userId' string.Format ("You do not have permission to use '{0}'.  You must either own all the beacons or they must be shared with faction."' pylonName));  			return true;  		}  	}  	// Check for bounding box intsection of other docking zones  	int intersectElement = 0;  	if (Entity.CheckForIntersection (testList' beaconList' out intersectElement)) {  		Communication.SendPrivateInformation (userId' string.Format ("The docking zone '{0}' intersects with docking zone '{1}'.  Make sure you place your docking zones so they don't overlap."' pylonName' testList.ElementAt (intersectElement).Key));  		return true;  	}  	// Check if ship already docked in this zone  	IMyCubeBlock e = beaconList [0];  	IMyCubeGrid parent = (IMyCubeGrid)e.Parent;  	long[] beaconListIds = beaconList.Select (b => b.EntityId).ToArray ();  	long ownerId = beaconList.First ().OwnerId;  	List<DockingItem> checkItems = Docking.Instance.Find (d => d.PlayerId == ownerId && d.TargetEntityId == parent.EntityId && d.DockingBeaconIds.Intersect (beaconListIds).Count () == 4);  	if (checkItems.Count >= PluginSettings.Instance.DockingShipsPerZone) {  		Communication.SendPrivateInformation (userId' string.Format ("Docking zone already '{0}' already contains the maximum capacity of ships."' pylonName));  		return true;  	}  	// Figure out center of docking area' and other distance information  	double maxDistance = 99;  	Vector3D vPos = new Vector3D (0' 0' 0);  	foreach (IMyCubeBlock b in beaconList) {  		Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  		vPos += beaconPos;  	}  	vPos = vPos / 4;  	foreach (IMyCubeBlock b in beaconList) {  		Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  		maxDistance = Math.Min (maxDistance' Vector3D.Distance (vPos' beaconPos));  	}  	// Find ship in docking area  	IMyCubeGrid dockingEntity = null;  	HashSet<IMyEntity> cubeGrids = new HashSet<IMyEntity> ();  	MyAPIGateway.Entities.GetEntities (cubeGrids' f => f is IMyCubeGrid);  	foreach (IMyCubeGrid gridCheck in cubeGrids) {  		if (gridCheck.IsStatic || gridCheck == parent)  			continue;  		double distance = Vector3D.Distance (gridCheck.GetPosition ()' vPos);  		if (distance < maxDistance) {  			dockingEntity = gridCheck;  			break;  		}  	}  	// Figure out if the ship fits in docking area' and then save ship      	if (dockingEntity != null) {  		// Get bounding box of both the docking zone and docking ship  		OrientedBoundingBoxD targetBounding = Entity.GetBoundingBox (beaconList);  		OrientedBoundingBoxD dockingBounding = Entity.GetBoundingBox (dockingEntity);  		// Make sure the docking zone contains the docking ship.  If they intersect or are disjointed' then fail  		if (!Entity.GreaterThan (dockingBounding.HalfExtent * 2' targetBounding.HalfExtent * 2)) {  			Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is too large for it's carrier.  The ship's bounding box must fit inside the docking zone bounding box!"' dockingEntity.DisplayName));  			return true;  		}  		if (targetBounding.Contains (ref dockingBounding) != ContainmentType.Contains) {  			Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is not fully inside the docking zone '{1}'.  Make sure the ship is fully contained inside the docking zone"' dockingEntity.DisplayName' pylonName));  			return true;  		}  		// Calculate the mass and ensure the docking ship is less than half the mass of the dock  		float parentMass = Entity.CalculateMass (parent);  		float dockingMass = Entity.CalculateMass (dockingEntity);  		if (dockingMass > parentMass) {  			Communication.SendPrivateInformation (userId' string.Format ("The ship you're trying to dock is too heavy for it's carrier.  The ship mass must be less than half the large ship / stations mass! (DM={0}kg CM={1}kg)"' dockingMass' parentMass));  			return true;  		}  		// Check to see if the ship is piloted' if it is' error out.    		// TODO: Check to see if we can get a real time copy of this entity?  		List<IMySlimBlock> blocks = new List<IMySlimBlock> ();  		dockingEntity.GetBlocks (blocks' x => x.FatBlock != null && x.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_Cockpit));  		foreach (IMySlimBlock slim_cbe in blocks) {  			MyObjectBuilder_Cockpit c = (MyObjectBuilder_Cockpit)slim_cbe.FatBlock.GetObjectBuilderCubeBlock ();  			if (c.Pilot != null) {  				Communication.SendPrivateInformation (userId' string.Format ("Ship in docking zone '{0}' has a pilot!  Please exit the ship before trying to dock.  (Sometimes this can lag a bit.  Wait 10 seconds and try again)"' pylonName));  				return true;  			}  		}  		// Save position and rotation information.  Some fun stuff here.  		// Get our dock rotation as a quaternion  		Quaternion saveQuat = Quaternion.CreateFromRotationMatrix (parent.WorldMatrix.GetOrientation ());  		// Transform docked ship's local position by inverse of the the parent (unwinds parent) and save it for when we undock  		Vector3D savePos = Vector3D.Transform (dockingEntity.GetPosition () - parent.GetPosition ()' Quaternion.Inverse (saveQuat));  		// Get local rotation of dock ship' and save it for when we undock  		saveQuat = Quaternion.Inverse (saveQuat) * Quaternion.CreateFromRotationMatrix (dockingEntity.WorldMatrix.GetOrientation ());  		// Save ship to file and remove  		FileInfo info = new FileInfo (Essentials.PluginPath + String.Format ("\\Docking\\docked_{0}_{1}_{2}.sbc"' ownerId' parent.EntityId' dockingEntity.EntityId));  		//CubeGridEntity dockingGrid = new CubeGridEntity((MyObjectBuilder_CubeGrid)dockingEntity.GetObjectBuilder()' dockingEntity);  		MyObjectBuilder_CubeGrid gridBuilder = CubeGrids.SafeGetObjectBuilder (dockingEntity);  		if (gridBuilder == null) {  			Communication.SendPrivateInformation (userId' string.Format ("Failed to load entity for export: {0}"' dockingEntity.DisplayName));  			return true;  		}  		// Save item  		DockingItem dockItem = new DockingItem ();  		dockItem.DockedEntityId = dockingEntity.EntityId;  		dockItem.TargetEntityId = parent.EntityId;  		dockItem.PlayerId = ownerId;  		dockItem.DockingBeaconIds = beaconList.Select (s => s.EntityId).ToArray ();  		dockItem.DockedName = dockingEntity.DisplayName;  		dockItem.SavePos = savePos;  		dockItem.SaveQuat = saveQuat;  		Docking.Instance.Add (dockItem);  		// Serialize and save ship to file  		BaseObjectManager.WriteSpaceEngineersFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer> (gridBuilder' info.FullName);  		//BaseObjectManager.SaveContentFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer>(gridBuilder' info);  		BaseEntityNetworkManager.BroadcastRemoveEntity (dockingEntity);  		//dockingEntity.Close();  		Communication.SendPrivateInformation (userId' string.Format ("Docked ship '{0}' in docking zone '{1}'."' dockItem.DockedName' pylonName));  		/* 						// Add a cool down 						DockingCooldownItem cItem = new DockingCooldownItem(); 						cItem.name = pylonName; 						cItem.startTime = DateTime.Now; 						PluginDocking.CooldownList.Add(cItem); 						 */} else {  		Communication.SendPrivateInformation (userId' string.Format ("No ships in docking zone '{0}'."' pylonName));  	}  } else if (beaconList.Count > 4) {  	Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName));  } else {  	Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'.  There must be 4 beacons with the name '{0}' to create a docking zone.  Beacons must be fully built!"' pylonName));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The following statement contains a magic number: if (beaconList.Count == 4) {  	// Check ownership  	foreach (IMyCubeBlock entityBlock in beaconList) {  		IMyTerminalBlock terminal = (IMyTerminalBlock)entityBlock;  		if (!terminal.HasPlayerAccess (playerId)) {  			Communication.SendPrivateInformation (userId' string.Format ("You do not have permission to use '{0}'.  You must either own all the beacons or they must be shared with faction."' pylonName));  			return true;  		}  	}  	// Check for bounding box intsection of other docking zones  	int intersectElement = 0;  	if (Entity.CheckForIntersection (testList' beaconList' out intersectElement)) {  		Communication.SendPrivateInformation (userId' string.Format ("The docking zone '{0}' intersects with docking zone '{1}'.  Make sure you place your docking zones so they don't overlap."' pylonName' testList.ElementAt (intersectElement).Key));  		return true;  	}  	// Check if ship already docked in this zone  	IMyCubeBlock e = beaconList [0];  	IMyCubeGrid parent = (IMyCubeGrid)e.Parent;  	long[] beaconListIds = beaconList.Select (b => b.EntityId).ToArray ();  	long ownerId = beaconList.First ().OwnerId;  	List<DockingItem> checkItems = Docking.Instance.Find (d => d.PlayerId == ownerId && d.TargetEntityId == parent.EntityId && d.DockingBeaconIds.Intersect (beaconListIds).Count () == 4);  	if (checkItems.Count >= PluginSettings.Instance.DockingShipsPerZone) {  		Communication.SendPrivateInformation (userId' string.Format ("Docking zone already '{0}' already contains the maximum capacity of ships."' pylonName));  		return true;  	}  	// Figure out center of docking area' and other distance information  	double maxDistance = 99;  	Vector3D vPos = new Vector3D (0' 0' 0);  	foreach (IMyCubeBlock b in beaconList) {  		Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  		vPos += beaconPos;  	}  	vPos = vPos / 4;  	foreach (IMyCubeBlock b in beaconList) {  		Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  		maxDistance = Math.Min (maxDistance' Vector3D.Distance (vPos' beaconPos));  	}  	// Find ship in docking area  	IMyCubeGrid dockingEntity = null;  	HashSet<IMyEntity> cubeGrids = new HashSet<IMyEntity> ();  	MyAPIGateway.Entities.GetEntities (cubeGrids' f => f is IMyCubeGrid);  	foreach (IMyCubeGrid gridCheck in cubeGrids) {  		if (gridCheck.IsStatic || gridCheck == parent)  			continue;  		double distance = Vector3D.Distance (gridCheck.GetPosition ()' vPos);  		if (distance < maxDistance) {  			dockingEntity = gridCheck;  			break;  		}  	}  	// Figure out if the ship fits in docking area' and then save ship      	if (dockingEntity != null) {  		// Get bounding box of both the docking zone and docking ship  		OrientedBoundingBoxD targetBounding = Entity.GetBoundingBox (beaconList);  		OrientedBoundingBoxD dockingBounding = Entity.GetBoundingBox (dockingEntity);  		// Make sure the docking zone contains the docking ship.  If they intersect or are disjointed' then fail  		if (!Entity.GreaterThan (dockingBounding.HalfExtent * 2' targetBounding.HalfExtent * 2)) {  			Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is too large for it's carrier.  The ship's bounding box must fit inside the docking zone bounding box!"' dockingEntity.DisplayName));  			return true;  		}  		if (targetBounding.Contains (ref dockingBounding) != ContainmentType.Contains) {  			Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is not fully inside the docking zone '{1}'.  Make sure the ship is fully contained inside the docking zone"' dockingEntity.DisplayName' pylonName));  			return true;  		}  		// Calculate the mass and ensure the docking ship is less than half the mass of the dock  		float parentMass = Entity.CalculateMass (parent);  		float dockingMass = Entity.CalculateMass (dockingEntity);  		if (dockingMass > parentMass) {  			Communication.SendPrivateInformation (userId' string.Format ("The ship you're trying to dock is too heavy for it's carrier.  The ship mass must be less than half the large ship / stations mass! (DM={0}kg CM={1}kg)"' dockingMass' parentMass));  			return true;  		}  		// Check to see if the ship is piloted' if it is' error out.    		// TODO: Check to see if we can get a real time copy of this entity?  		List<IMySlimBlock> blocks = new List<IMySlimBlock> ();  		dockingEntity.GetBlocks (blocks' x => x.FatBlock != null && x.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_Cockpit));  		foreach (IMySlimBlock slim_cbe in blocks) {  			MyObjectBuilder_Cockpit c = (MyObjectBuilder_Cockpit)slim_cbe.FatBlock.GetObjectBuilderCubeBlock ();  			if (c.Pilot != null) {  				Communication.SendPrivateInformation (userId' string.Format ("Ship in docking zone '{0}' has a pilot!  Please exit the ship before trying to dock.  (Sometimes this can lag a bit.  Wait 10 seconds and try again)"' pylonName));  				return true;  			}  		}  		// Save position and rotation information.  Some fun stuff here.  		// Get our dock rotation as a quaternion  		Quaternion saveQuat = Quaternion.CreateFromRotationMatrix (parent.WorldMatrix.GetOrientation ());  		// Transform docked ship's local position by inverse of the the parent (unwinds parent) and save it for when we undock  		Vector3D savePos = Vector3D.Transform (dockingEntity.GetPosition () - parent.GetPosition ()' Quaternion.Inverse (saveQuat));  		// Get local rotation of dock ship' and save it for when we undock  		saveQuat = Quaternion.Inverse (saveQuat) * Quaternion.CreateFromRotationMatrix (dockingEntity.WorldMatrix.GetOrientation ());  		// Save ship to file and remove  		FileInfo info = new FileInfo (Essentials.PluginPath + String.Format ("\\Docking\\docked_{0}_{1}_{2}.sbc"' ownerId' parent.EntityId' dockingEntity.EntityId));  		//CubeGridEntity dockingGrid = new CubeGridEntity((MyObjectBuilder_CubeGrid)dockingEntity.GetObjectBuilder()' dockingEntity);  		MyObjectBuilder_CubeGrid gridBuilder = CubeGrids.SafeGetObjectBuilder (dockingEntity);  		if (gridBuilder == null) {  			Communication.SendPrivateInformation (userId' string.Format ("Failed to load entity for export: {0}"' dockingEntity.DisplayName));  			return true;  		}  		// Save item  		DockingItem dockItem = new DockingItem ();  		dockItem.DockedEntityId = dockingEntity.EntityId;  		dockItem.TargetEntityId = parent.EntityId;  		dockItem.PlayerId = ownerId;  		dockItem.DockingBeaconIds = beaconList.Select (s => s.EntityId).ToArray ();  		dockItem.DockedName = dockingEntity.DisplayName;  		dockItem.SavePos = savePos;  		dockItem.SaveQuat = saveQuat;  		Docking.Instance.Add (dockItem);  		// Serialize and save ship to file  		BaseObjectManager.WriteSpaceEngineersFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer> (gridBuilder' info.FullName);  		//BaseObjectManager.SaveContentFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer>(gridBuilder' info);  		BaseEntityNetworkManager.BroadcastRemoveEntity (dockingEntity);  		//dockingEntity.Close();  		Communication.SendPrivateInformation (userId' string.Format ("Docked ship '{0}' in docking zone '{1}'."' dockItem.DockedName' pylonName));  		/* 						// Add a cool down 						DockingCooldownItem cItem = new DockingCooldownItem(); 						cItem.name = pylonName; 						cItem.startTime = DateTime.Now; 						PluginDocking.CooldownList.Add(cItem); 						 */} else {  		Communication.SendPrivateInformation (userId' string.Format ("No ships in docking zone '{0}'."' pylonName));  	}  } else if (beaconList.Count > 4) {  	Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName));  } else {  	Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'.  There must be 4 beacons with the name '{0}' to create a docking zone.  Beacons must be fully built!"' pylonName));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The following statement contains a magic number: if (beaconList.Count == 4) {  	// Check ownership  	foreach (IMyCubeBlock entityBlock in beaconList) {  		IMyTerminalBlock terminal = (IMyTerminalBlock)entityBlock;  		if (!terminal.HasPlayerAccess (playerId)) {  			Communication.SendPrivateInformation (userId' string.Format ("You do not have permission to use '{0}'.  You must either own all the beacons or they must be shared with faction."' pylonName));  			return true;  		}  	}  	// Check for bounding box intsection of other docking zones  	int intersectElement = 0;  	if (Entity.CheckForIntersection (testList' beaconList' out intersectElement)) {  		Communication.SendPrivateInformation (userId' string.Format ("The docking zone '{0}' intersects with docking zone '{1}'.  Make sure you place your docking zones so they don't overlap."' pylonName' testList.ElementAt (intersectElement).Key));  		return true;  	}  	// Check if ship already docked in this zone  	IMyCubeBlock e = beaconList [0];  	IMyCubeGrid parent = (IMyCubeGrid)e.Parent;  	long[] beaconListIds = beaconList.Select (b => b.EntityId).ToArray ();  	long ownerId = beaconList.First ().OwnerId;  	List<DockingItem> checkItems = Docking.Instance.Find (d => d.PlayerId == ownerId && d.TargetEntityId == parent.EntityId && d.DockingBeaconIds.Intersect (beaconListIds).Count () == 4);  	if (checkItems.Count >= PluginSettings.Instance.DockingShipsPerZone) {  		Communication.SendPrivateInformation (userId' string.Format ("Docking zone already '{0}' already contains the maximum capacity of ships."' pylonName));  		return true;  	}  	// Figure out center of docking area' and other distance information  	double maxDistance = 99;  	Vector3D vPos = new Vector3D (0' 0' 0);  	foreach (IMyCubeBlock b in beaconList) {  		Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  		vPos += beaconPos;  	}  	vPos = vPos / 4;  	foreach (IMyCubeBlock b in beaconList) {  		Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  		maxDistance = Math.Min (maxDistance' Vector3D.Distance (vPos' beaconPos));  	}  	// Find ship in docking area  	IMyCubeGrid dockingEntity = null;  	HashSet<IMyEntity> cubeGrids = new HashSet<IMyEntity> ();  	MyAPIGateway.Entities.GetEntities (cubeGrids' f => f is IMyCubeGrid);  	foreach (IMyCubeGrid gridCheck in cubeGrids) {  		if (gridCheck.IsStatic || gridCheck == parent)  			continue;  		double distance = Vector3D.Distance (gridCheck.GetPosition ()' vPos);  		if (distance < maxDistance) {  			dockingEntity = gridCheck;  			break;  		}  	}  	// Figure out if the ship fits in docking area' and then save ship      	if (dockingEntity != null) {  		// Get bounding box of both the docking zone and docking ship  		OrientedBoundingBoxD targetBounding = Entity.GetBoundingBox (beaconList);  		OrientedBoundingBoxD dockingBounding = Entity.GetBoundingBox (dockingEntity);  		// Make sure the docking zone contains the docking ship.  If they intersect or are disjointed' then fail  		if (!Entity.GreaterThan (dockingBounding.HalfExtent * 2' targetBounding.HalfExtent * 2)) {  			Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is too large for it's carrier.  The ship's bounding box must fit inside the docking zone bounding box!"' dockingEntity.DisplayName));  			return true;  		}  		if (targetBounding.Contains (ref dockingBounding) != ContainmentType.Contains) {  			Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is not fully inside the docking zone '{1}'.  Make sure the ship is fully contained inside the docking zone"' dockingEntity.DisplayName' pylonName));  			return true;  		}  		// Calculate the mass and ensure the docking ship is less than half the mass of the dock  		float parentMass = Entity.CalculateMass (parent);  		float dockingMass = Entity.CalculateMass (dockingEntity);  		if (dockingMass > parentMass) {  			Communication.SendPrivateInformation (userId' string.Format ("The ship you're trying to dock is too heavy for it's carrier.  The ship mass must be less than half the large ship / stations mass! (DM={0}kg CM={1}kg)"' dockingMass' parentMass));  			return true;  		}  		// Check to see if the ship is piloted' if it is' error out.    		// TODO: Check to see if we can get a real time copy of this entity?  		List<IMySlimBlock> blocks = new List<IMySlimBlock> ();  		dockingEntity.GetBlocks (blocks' x => x.FatBlock != null && x.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_Cockpit));  		foreach (IMySlimBlock slim_cbe in blocks) {  			MyObjectBuilder_Cockpit c = (MyObjectBuilder_Cockpit)slim_cbe.FatBlock.GetObjectBuilderCubeBlock ();  			if (c.Pilot != null) {  				Communication.SendPrivateInformation (userId' string.Format ("Ship in docking zone '{0}' has a pilot!  Please exit the ship before trying to dock.  (Sometimes this can lag a bit.  Wait 10 seconds and try again)"' pylonName));  				return true;  			}  		}  		// Save position and rotation information.  Some fun stuff here.  		// Get our dock rotation as a quaternion  		Quaternion saveQuat = Quaternion.CreateFromRotationMatrix (parent.WorldMatrix.GetOrientation ());  		// Transform docked ship's local position by inverse of the the parent (unwinds parent) and save it for when we undock  		Vector3D savePos = Vector3D.Transform (dockingEntity.GetPosition () - parent.GetPosition ()' Quaternion.Inverse (saveQuat));  		// Get local rotation of dock ship' and save it for when we undock  		saveQuat = Quaternion.Inverse (saveQuat) * Quaternion.CreateFromRotationMatrix (dockingEntity.WorldMatrix.GetOrientation ());  		// Save ship to file and remove  		FileInfo info = new FileInfo (Essentials.PluginPath + String.Format ("\\Docking\\docked_{0}_{1}_{2}.sbc"' ownerId' parent.EntityId' dockingEntity.EntityId));  		//CubeGridEntity dockingGrid = new CubeGridEntity((MyObjectBuilder_CubeGrid)dockingEntity.GetObjectBuilder()' dockingEntity);  		MyObjectBuilder_CubeGrid gridBuilder = CubeGrids.SafeGetObjectBuilder (dockingEntity);  		if (gridBuilder == null) {  			Communication.SendPrivateInformation (userId' string.Format ("Failed to load entity for export: {0}"' dockingEntity.DisplayName));  			return true;  		}  		// Save item  		DockingItem dockItem = new DockingItem ();  		dockItem.DockedEntityId = dockingEntity.EntityId;  		dockItem.TargetEntityId = parent.EntityId;  		dockItem.PlayerId = ownerId;  		dockItem.DockingBeaconIds = beaconList.Select (s => s.EntityId).ToArray ();  		dockItem.DockedName = dockingEntity.DisplayName;  		dockItem.SavePos = savePos;  		dockItem.SaveQuat = saveQuat;  		Docking.Instance.Add (dockItem);  		// Serialize and save ship to file  		BaseObjectManager.WriteSpaceEngineersFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer> (gridBuilder' info.FullName);  		//BaseObjectManager.SaveContentFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer>(gridBuilder' info);  		BaseEntityNetworkManager.BroadcastRemoveEntity (dockingEntity);  		//dockingEntity.Close();  		Communication.SendPrivateInformation (userId' string.Format ("Docked ship '{0}' in docking zone '{1}'."' dockItem.DockedName' pylonName));  		/* 						// Add a cool down 						DockingCooldownItem cItem = new DockingCooldownItem(); 						cItem.name = pylonName; 						cItem.startTime = DateTime.Now; 						PluginDocking.CooldownList.Add(cItem); 						 */} else {  		Communication.SendPrivateInformation (userId' string.Format ("No ships in docking zone '{0}'."' pylonName));  	}  } else if (beaconList.Count > 4) {  	Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName));  } else {  	Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'.  There must be 4 beacons with the name '{0}' to create a docking zone.  Beacons must be fully built!"' pylonName));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The following statement contains a magic number: if (beaconList.Count == 4) {  	// Check ownership  	foreach (IMyCubeBlock entityBlock in beaconList) {  		IMyTerminalBlock terminal = (IMyTerminalBlock)entityBlock;  		if (!terminal.HasPlayerAccess (playerId)) {  			Communication.SendPrivateInformation (userId' string.Format ("You do not have permission to use '{0}'.  You must either own all the beacons or they must be shared with faction."' pylonName));  			return true;  		}  	}  	// Check for bounding box intsection of other docking zones  	int intersectElement = 0;  	if (Entity.CheckForIntersection (testList' beaconList' out intersectElement)) {  		Communication.SendPrivateInformation (userId' string.Format ("The docking zone '{0}' intersects with docking zone '{1}'.  Make sure you place your docking zones so they don't overlap."' pylonName' testList.ElementAt (intersectElement).Key));  		return true;  	}  	// Check if ship already docked in this zone  	IMyCubeBlock e = beaconList [0];  	IMyCubeGrid parent = (IMyCubeGrid)e.Parent;  	long[] beaconListIds = beaconList.Select (b => b.EntityId).ToArray ();  	long ownerId = beaconList.First ().OwnerId;  	List<DockingItem> checkItems = Docking.Instance.Find (d => d.PlayerId == ownerId && d.TargetEntityId == parent.EntityId && d.DockingBeaconIds.Intersect (beaconListIds).Count () == 4);  	if (checkItems.Count >= PluginSettings.Instance.DockingShipsPerZone) {  		Communication.SendPrivateInformation (userId' string.Format ("Docking zone already '{0}' already contains the maximum capacity of ships."' pylonName));  		return true;  	}  	// Figure out center of docking area' and other distance information  	double maxDistance = 99;  	Vector3D vPos = new Vector3D (0' 0' 0);  	foreach (IMyCubeBlock b in beaconList) {  		Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  		vPos += beaconPos;  	}  	vPos = vPos / 4;  	foreach (IMyCubeBlock b in beaconList) {  		Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  		maxDistance = Math.Min (maxDistance' Vector3D.Distance (vPos' beaconPos));  	}  	// Find ship in docking area  	IMyCubeGrid dockingEntity = null;  	HashSet<IMyEntity> cubeGrids = new HashSet<IMyEntity> ();  	MyAPIGateway.Entities.GetEntities (cubeGrids' f => f is IMyCubeGrid);  	foreach (IMyCubeGrid gridCheck in cubeGrids) {  		if (gridCheck.IsStatic || gridCheck == parent)  			continue;  		double distance = Vector3D.Distance (gridCheck.GetPosition ()' vPos);  		if (distance < maxDistance) {  			dockingEntity = gridCheck;  			break;  		}  	}  	// Figure out if the ship fits in docking area' and then save ship      	if (dockingEntity != null) {  		// Get bounding box of both the docking zone and docking ship  		OrientedBoundingBoxD targetBounding = Entity.GetBoundingBox (beaconList);  		OrientedBoundingBoxD dockingBounding = Entity.GetBoundingBox (dockingEntity);  		// Make sure the docking zone contains the docking ship.  If they intersect or are disjointed' then fail  		if (!Entity.GreaterThan (dockingBounding.HalfExtent * 2' targetBounding.HalfExtent * 2)) {  			Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is too large for it's carrier.  The ship's bounding box must fit inside the docking zone bounding box!"' dockingEntity.DisplayName));  			return true;  		}  		if (targetBounding.Contains (ref dockingBounding) != ContainmentType.Contains) {  			Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is not fully inside the docking zone '{1}'.  Make sure the ship is fully contained inside the docking zone"' dockingEntity.DisplayName' pylonName));  			return true;  		}  		// Calculate the mass and ensure the docking ship is less than half the mass of the dock  		float parentMass = Entity.CalculateMass (parent);  		float dockingMass = Entity.CalculateMass (dockingEntity);  		if (dockingMass > parentMass) {  			Communication.SendPrivateInformation (userId' string.Format ("The ship you're trying to dock is too heavy for it's carrier.  The ship mass must be less than half the large ship / stations mass! (DM={0}kg CM={1}kg)"' dockingMass' parentMass));  			return true;  		}  		// Check to see if the ship is piloted' if it is' error out.    		// TODO: Check to see if we can get a real time copy of this entity?  		List<IMySlimBlock> blocks = new List<IMySlimBlock> ();  		dockingEntity.GetBlocks (blocks' x => x.FatBlock != null && x.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_Cockpit));  		foreach (IMySlimBlock slim_cbe in blocks) {  			MyObjectBuilder_Cockpit c = (MyObjectBuilder_Cockpit)slim_cbe.FatBlock.GetObjectBuilderCubeBlock ();  			if (c.Pilot != null) {  				Communication.SendPrivateInformation (userId' string.Format ("Ship in docking zone '{0}' has a pilot!  Please exit the ship before trying to dock.  (Sometimes this can lag a bit.  Wait 10 seconds and try again)"' pylonName));  				return true;  			}  		}  		// Save position and rotation information.  Some fun stuff here.  		// Get our dock rotation as a quaternion  		Quaternion saveQuat = Quaternion.CreateFromRotationMatrix (parent.WorldMatrix.GetOrientation ());  		// Transform docked ship's local position by inverse of the the parent (unwinds parent) and save it for when we undock  		Vector3D savePos = Vector3D.Transform (dockingEntity.GetPosition () - parent.GetPosition ()' Quaternion.Inverse (saveQuat));  		// Get local rotation of dock ship' and save it for when we undock  		saveQuat = Quaternion.Inverse (saveQuat) * Quaternion.CreateFromRotationMatrix (dockingEntity.WorldMatrix.GetOrientation ());  		// Save ship to file and remove  		FileInfo info = new FileInfo (Essentials.PluginPath + String.Format ("\\Docking\\docked_{0}_{1}_{2}.sbc"' ownerId' parent.EntityId' dockingEntity.EntityId));  		//CubeGridEntity dockingGrid = new CubeGridEntity((MyObjectBuilder_CubeGrid)dockingEntity.GetObjectBuilder()' dockingEntity);  		MyObjectBuilder_CubeGrid gridBuilder = CubeGrids.SafeGetObjectBuilder (dockingEntity);  		if (gridBuilder == null) {  			Communication.SendPrivateInformation (userId' string.Format ("Failed to load entity for export: {0}"' dockingEntity.DisplayName));  			return true;  		}  		// Save item  		DockingItem dockItem = new DockingItem ();  		dockItem.DockedEntityId = dockingEntity.EntityId;  		dockItem.TargetEntityId = parent.EntityId;  		dockItem.PlayerId = ownerId;  		dockItem.DockingBeaconIds = beaconList.Select (s => s.EntityId).ToArray ();  		dockItem.DockedName = dockingEntity.DisplayName;  		dockItem.SavePos = savePos;  		dockItem.SaveQuat = saveQuat;  		Docking.Instance.Add (dockItem);  		// Serialize and save ship to file  		BaseObjectManager.WriteSpaceEngineersFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer> (gridBuilder' info.FullName);  		//BaseObjectManager.SaveContentFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer>(gridBuilder' info);  		BaseEntityNetworkManager.BroadcastRemoveEntity (dockingEntity);  		//dockingEntity.Close();  		Communication.SendPrivateInformation (userId' string.Format ("Docked ship '{0}' in docking zone '{1}'."' dockItem.DockedName' pylonName));  		/* 						// Add a cool down 						DockingCooldownItem cItem = new DockingCooldownItem(); 						cItem.name = pylonName; 						cItem.startTime = DateTime.Now; 						PluginDocking.CooldownList.Add(cItem); 						 */} else {  		Communication.SendPrivateInformation (userId' string.Format ("No ships in docking zone '{0}'."' pylonName));  	}  } else if (beaconList.Count > 4) {  	Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName));  } else {  	Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'.  There must be 4 beacons with the name '{0}' to create a docking zone.  Beacons must be fully built!"' pylonName));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The following statement contains a magic number: if (beaconList.Count == 4) {  	// Check ownership  	foreach (IMyCubeBlock entityBlock in beaconList) {  		IMyTerminalBlock terminal = (IMyTerminalBlock)entityBlock;  		if (!terminal.HasPlayerAccess (playerId)) {  			Communication.SendPrivateInformation (userId' string.Format ("You do not have permission to use '{0}'.  You must either own all the beacons or they must be shared with faction."' pylonName));  			return true;  		}  	}  	// Check for bounding box intsection of other docking zones  	int intersectElement = 0;  	if (Entity.CheckForIntersection (testList' beaconList' out intersectElement)) {  		Communication.SendPrivateInformation (userId' string.Format ("The docking zone '{0}' intersects with docking zone '{1}'.  Make sure you place your docking zones so they don't overlap."' pylonName' testList.ElementAt (intersectElement).Key));  		return true;  	}  	// Check if ship already docked in this zone  	IMyCubeBlock e = beaconList [0];  	IMyCubeGrid parent = (IMyCubeGrid)e.Parent;  	long[] beaconListIds = beaconList.Select (b => b.EntityId).ToArray ();  	long ownerId = beaconList.First ().OwnerId;  	List<DockingItem> checkItems = Docking.Instance.Find (d => d.PlayerId == ownerId && d.TargetEntityId == parent.EntityId && d.DockingBeaconIds.Intersect (beaconListIds).Count () == 4);  	if (checkItems.Count >= PluginSettings.Instance.DockingShipsPerZone) {  		Communication.SendPrivateInformation (userId' string.Format ("Docking zone already '{0}' already contains the maximum capacity of ships."' pylonName));  		return true;  	}  	// Figure out center of docking area' and other distance information  	double maxDistance = 99;  	Vector3D vPos = new Vector3D (0' 0' 0);  	foreach (IMyCubeBlock b in beaconList) {  		Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  		vPos += beaconPos;  	}  	vPos = vPos / 4;  	foreach (IMyCubeBlock b in beaconList) {  		Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  		maxDistance = Math.Min (maxDistance' Vector3D.Distance (vPos' beaconPos));  	}  	// Find ship in docking area  	IMyCubeGrid dockingEntity = null;  	HashSet<IMyEntity> cubeGrids = new HashSet<IMyEntity> ();  	MyAPIGateway.Entities.GetEntities (cubeGrids' f => f is IMyCubeGrid);  	foreach (IMyCubeGrid gridCheck in cubeGrids) {  		if (gridCheck.IsStatic || gridCheck == parent)  			continue;  		double distance = Vector3D.Distance (gridCheck.GetPosition ()' vPos);  		if (distance < maxDistance) {  			dockingEntity = gridCheck;  			break;  		}  	}  	// Figure out if the ship fits in docking area' and then save ship      	if (dockingEntity != null) {  		// Get bounding box of both the docking zone and docking ship  		OrientedBoundingBoxD targetBounding = Entity.GetBoundingBox (beaconList);  		OrientedBoundingBoxD dockingBounding = Entity.GetBoundingBox (dockingEntity);  		// Make sure the docking zone contains the docking ship.  If they intersect or are disjointed' then fail  		if (!Entity.GreaterThan (dockingBounding.HalfExtent * 2' targetBounding.HalfExtent * 2)) {  			Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is too large for it's carrier.  The ship's bounding box must fit inside the docking zone bounding box!"' dockingEntity.DisplayName));  			return true;  		}  		if (targetBounding.Contains (ref dockingBounding) != ContainmentType.Contains) {  			Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is not fully inside the docking zone '{1}'.  Make sure the ship is fully contained inside the docking zone"' dockingEntity.DisplayName' pylonName));  			return true;  		}  		// Calculate the mass and ensure the docking ship is less than half the mass of the dock  		float parentMass = Entity.CalculateMass (parent);  		float dockingMass = Entity.CalculateMass (dockingEntity);  		if (dockingMass > parentMass) {  			Communication.SendPrivateInformation (userId' string.Format ("The ship you're trying to dock is too heavy for it's carrier.  The ship mass must be less than half the large ship / stations mass! (DM={0}kg CM={1}kg)"' dockingMass' parentMass));  			return true;  		}  		// Check to see if the ship is piloted' if it is' error out.    		// TODO: Check to see if we can get a real time copy of this entity?  		List<IMySlimBlock> blocks = new List<IMySlimBlock> ();  		dockingEntity.GetBlocks (blocks' x => x.FatBlock != null && x.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_Cockpit));  		foreach (IMySlimBlock slim_cbe in blocks) {  			MyObjectBuilder_Cockpit c = (MyObjectBuilder_Cockpit)slim_cbe.FatBlock.GetObjectBuilderCubeBlock ();  			if (c.Pilot != null) {  				Communication.SendPrivateInformation (userId' string.Format ("Ship in docking zone '{0}' has a pilot!  Please exit the ship before trying to dock.  (Sometimes this can lag a bit.  Wait 10 seconds and try again)"' pylonName));  				return true;  			}  		}  		// Save position and rotation information.  Some fun stuff here.  		// Get our dock rotation as a quaternion  		Quaternion saveQuat = Quaternion.CreateFromRotationMatrix (parent.WorldMatrix.GetOrientation ());  		// Transform docked ship's local position by inverse of the the parent (unwinds parent) and save it for when we undock  		Vector3D savePos = Vector3D.Transform (dockingEntity.GetPosition () - parent.GetPosition ()' Quaternion.Inverse (saveQuat));  		// Get local rotation of dock ship' and save it for when we undock  		saveQuat = Quaternion.Inverse (saveQuat) * Quaternion.CreateFromRotationMatrix (dockingEntity.WorldMatrix.GetOrientation ());  		// Save ship to file and remove  		FileInfo info = new FileInfo (Essentials.PluginPath + String.Format ("\\Docking\\docked_{0}_{1}_{2}.sbc"' ownerId' parent.EntityId' dockingEntity.EntityId));  		//CubeGridEntity dockingGrid = new CubeGridEntity((MyObjectBuilder_CubeGrid)dockingEntity.GetObjectBuilder()' dockingEntity);  		MyObjectBuilder_CubeGrid gridBuilder = CubeGrids.SafeGetObjectBuilder (dockingEntity);  		if (gridBuilder == null) {  			Communication.SendPrivateInformation (userId' string.Format ("Failed to load entity for export: {0}"' dockingEntity.DisplayName));  			return true;  		}  		// Save item  		DockingItem dockItem = new DockingItem ();  		dockItem.DockedEntityId = dockingEntity.EntityId;  		dockItem.TargetEntityId = parent.EntityId;  		dockItem.PlayerId = ownerId;  		dockItem.DockingBeaconIds = beaconList.Select (s => s.EntityId).ToArray ();  		dockItem.DockedName = dockingEntity.DisplayName;  		dockItem.SavePos = savePos;  		dockItem.SaveQuat = saveQuat;  		Docking.Instance.Add (dockItem);  		// Serialize and save ship to file  		BaseObjectManager.WriteSpaceEngineersFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer> (gridBuilder' info.FullName);  		//BaseObjectManager.SaveContentFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer>(gridBuilder' info);  		BaseEntityNetworkManager.BroadcastRemoveEntity (dockingEntity);  		//dockingEntity.Close();  		Communication.SendPrivateInformation (userId' string.Format ("Docked ship '{0}' in docking zone '{1}'."' dockItem.DockedName' pylonName));  		/* 						// Add a cool down 						DockingCooldownItem cItem = new DockingCooldownItem(); 						cItem.name = pylonName; 						cItem.startTime = DateTime.Now; 						PluginDocking.CooldownList.Add(cItem); 						 */} else {  		Communication.SendPrivateInformation (userId' string.Format ("No ships in docking zone '{0}'."' pylonName));  	}  } else if (beaconList.Count > 4) {  	Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName));  } else {  	Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'.  There must be 4 beacons with the name '{0}' to create a docking zone.  Beacons must be fully built!"' pylonName));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The following statement contains a magic number: if (beaconList.Count == 4) {  	// Check ownership  	foreach (IMyCubeBlock entityBlock in beaconList) {  		IMyTerminalBlock terminal = (IMyTerminalBlock)entityBlock;  		if (!terminal.HasPlayerAccess (playerId)) {  			Communication.SendPrivateInformation (userId' string.Format ("You do not have permission to use '{0}'.  You must either own all the beacons or they must be shared with faction."' pylonName));  			return true;  		}  	}  	// Check for bounding box intsection of other docking zones  	int intersectElement = 0;  	if (Entity.CheckForIntersection (testList' beaconList' out intersectElement)) {  		Communication.SendPrivateInformation (userId' string.Format ("The docking zone '{0}' intersects with docking zone '{1}'.  Make sure you place your docking zones so they don't overlap."' pylonName' testList.ElementAt (intersectElement).Key));  		return true;  	}  	// Check if ship already docked in this zone  	IMyCubeBlock e = beaconList [0];  	IMyCubeGrid parent = (IMyCubeGrid)e.Parent;  	long[] beaconListIds = beaconList.Select (b => b.EntityId).ToArray ();  	long ownerId = beaconList.First ().OwnerId;  	List<DockingItem> checkItems = Docking.Instance.Find (d => d.PlayerId == ownerId && d.TargetEntityId == parent.EntityId && d.DockingBeaconIds.Intersect (beaconListIds).Count () == 4);  	if (checkItems.Count >= PluginSettings.Instance.DockingShipsPerZone) {  		Communication.SendPrivateInformation (userId' string.Format ("Docking zone already '{0}' already contains the maximum capacity of ships."' pylonName));  		return true;  	}  	// Figure out center of docking area' and other distance information  	double maxDistance = 99;  	Vector3D vPos = new Vector3D (0' 0' 0);  	foreach (IMyCubeBlock b in beaconList) {  		Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  		vPos += beaconPos;  	}  	vPos = vPos / 4;  	foreach (IMyCubeBlock b in beaconList) {  		Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  		maxDistance = Math.Min (maxDistance' Vector3D.Distance (vPos' beaconPos));  	}  	// Find ship in docking area  	IMyCubeGrid dockingEntity = null;  	HashSet<IMyEntity> cubeGrids = new HashSet<IMyEntity> ();  	MyAPIGateway.Entities.GetEntities (cubeGrids' f => f is IMyCubeGrid);  	foreach (IMyCubeGrid gridCheck in cubeGrids) {  		if (gridCheck.IsStatic || gridCheck == parent)  			continue;  		double distance = Vector3D.Distance (gridCheck.GetPosition ()' vPos);  		if (distance < maxDistance) {  			dockingEntity = gridCheck;  			break;  		}  	}  	// Figure out if the ship fits in docking area' and then save ship      	if (dockingEntity != null) {  		// Get bounding box of both the docking zone and docking ship  		OrientedBoundingBoxD targetBounding = Entity.GetBoundingBox (beaconList);  		OrientedBoundingBoxD dockingBounding = Entity.GetBoundingBox (dockingEntity);  		// Make sure the docking zone contains the docking ship.  If they intersect or are disjointed' then fail  		if (!Entity.GreaterThan (dockingBounding.HalfExtent * 2' targetBounding.HalfExtent * 2)) {  			Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is too large for it's carrier.  The ship's bounding box must fit inside the docking zone bounding box!"' dockingEntity.DisplayName));  			return true;  		}  		if (targetBounding.Contains (ref dockingBounding) != ContainmentType.Contains) {  			Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is not fully inside the docking zone '{1}'.  Make sure the ship is fully contained inside the docking zone"' dockingEntity.DisplayName' pylonName));  			return true;  		}  		// Calculate the mass and ensure the docking ship is less than half the mass of the dock  		float parentMass = Entity.CalculateMass (parent);  		float dockingMass = Entity.CalculateMass (dockingEntity);  		if (dockingMass > parentMass) {  			Communication.SendPrivateInformation (userId' string.Format ("The ship you're trying to dock is too heavy for it's carrier.  The ship mass must be less than half the large ship / stations mass! (DM={0}kg CM={1}kg)"' dockingMass' parentMass));  			return true;  		}  		// Check to see if the ship is piloted' if it is' error out.    		// TODO: Check to see if we can get a real time copy of this entity?  		List<IMySlimBlock> blocks = new List<IMySlimBlock> ();  		dockingEntity.GetBlocks (blocks' x => x.FatBlock != null && x.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_Cockpit));  		foreach (IMySlimBlock slim_cbe in blocks) {  			MyObjectBuilder_Cockpit c = (MyObjectBuilder_Cockpit)slim_cbe.FatBlock.GetObjectBuilderCubeBlock ();  			if (c.Pilot != null) {  				Communication.SendPrivateInformation (userId' string.Format ("Ship in docking zone '{0}' has a pilot!  Please exit the ship before trying to dock.  (Sometimes this can lag a bit.  Wait 10 seconds and try again)"' pylonName));  				return true;  			}  		}  		// Save position and rotation information.  Some fun stuff here.  		// Get our dock rotation as a quaternion  		Quaternion saveQuat = Quaternion.CreateFromRotationMatrix (parent.WorldMatrix.GetOrientation ());  		// Transform docked ship's local position by inverse of the the parent (unwinds parent) and save it for when we undock  		Vector3D savePos = Vector3D.Transform (dockingEntity.GetPosition () - parent.GetPosition ()' Quaternion.Inverse (saveQuat));  		// Get local rotation of dock ship' and save it for when we undock  		saveQuat = Quaternion.Inverse (saveQuat) * Quaternion.CreateFromRotationMatrix (dockingEntity.WorldMatrix.GetOrientation ());  		// Save ship to file and remove  		FileInfo info = new FileInfo (Essentials.PluginPath + String.Format ("\\Docking\\docked_{0}_{1}_{2}.sbc"' ownerId' parent.EntityId' dockingEntity.EntityId));  		//CubeGridEntity dockingGrid = new CubeGridEntity((MyObjectBuilder_CubeGrid)dockingEntity.GetObjectBuilder()' dockingEntity);  		MyObjectBuilder_CubeGrid gridBuilder = CubeGrids.SafeGetObjectBuilder (dockingEntity);  		if (gridBuilder == null) {  			Communication.SendPrivateInformation (userId' string.Format ("Failed to load entity for export: {0}"' dockingEntity.DisplayName));  			return true;  		}  		// Save item  		DockingItem dockItem = new DockingItem ();  		dockItem.DockedEntityId = dockingEntity.EntityId;  		dockItem.TargetEntityId = parent.EntityId;  		dockItem.PlayerId = ownerId;  		dockItem.DockingBeaconIds = beaconList.Select (s => s.EntityId).ToArray ();  		dockItem.DockedName = dockingEntity.DisplayName;  		dockItem.SavePos = savePos;  		dockItem.SaveQuat = saveQuat;  		Docking.Instance.Add (dockItem);  		// Serialize and save ship to file  		BaseObjectManager.WriteSpaceEngineersFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer> (gridBuilder' info.FullName);  		//BaseObjectManager.SaveContentFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer>(gridBuilder' info);  		BaseEntityNetworkManager.BroadcastRemoveEntity (dockingEntity);  		//dockingEntity.Close();  		Communication.SendPrivateInformation (userId' string.Format ("Docked ship '{0}' in docking zone '{1}'."' dockItem.DockedName' pylonName));  		/* 						// Add a cool down 						DockingCooldownItem cItem = new DockingCooldownItem(); 						cItem.name = pylonName; 						cItem.startTime = DateTime.Now; 						PluginDocking.CooldownList.Add(cItem); 						 */} else {  		Communication.SendPrivateInformation (userId' string.Format ("No ships in docking zone '{0}'."' pylonName));  	}  } else if (beaconList.Count > 4) {  	Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName));  } else {  	Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'.  There must be 4 beacons with the name '{0}' to create a docking zone.  Beacons must be fully built!"' pylonName));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The following statement contains a magic number: if (beaconList.Count == 4) {  	// Check ownership  	foreach (IMyCubeBlock entityBlock in beaconList) {  		IMyTerminalBlock terminal = (IMyTerminalBlock)entityBlock;  		if (!terminal.HasPlayerAccess (playerId)) {  			Communication.SendPrivateInformation (userId' string.Format ("You do not have permission to use '{0}'.  You must either own all the beacons or they must be shared with faction."' pylonName));  			return true;  		}  	}  	// Check for bounding box intsection of other docking zones  	int intersectElement = 0;  	if (Entity.CheckForIntersection (testList' beaconList' out intersectElement)) {  		Communication.SendPrivateInformation (userId' string.Format ("The docking zone '{0}' intersects with docking zone '{1}'.  Make sure you place your docking zones so they don't overlap."' pylonName' testList.ElementAt (intersectElement).Key));  		return true;  	}  	// Check if ship already docked in this zone  	IMyCubeBlock e = beaconList [0];  	IMyCubeGrid parent = (IMyCubeGrid)e.Parent;  	long[] beaconListIds = beaconList.Select (b => b.EntityId).ToArray ();  	long ownerId = beaconList.First ().OwnerId;  	List<DockingItem> checkItems = Docking.Instance.Find (d => d.PlayerId == ownerId && d.TargetEntityId == parent.EntityId && d.DockingBeaconIds.Intersect (beaconListIds).Count () == 4);  	if (checkItems.Count >= PluginSettings.Instance.DockingShipsPerZone) {  		Communication.SendPrivateInformation (userId' string.Format ("Docking zone already '{0}' already contains the maximum capacity of ships."' pylonName));  		return true;  	}  	// Figure out center of docking area' and other distance information  	double maxDistance = 99;  	Vector3D vPos = new Vector3D (0' 0' 0);  	foreach (IMyCubeBlock b in beaconList) {  		Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  		vPos += beaconPos;  	}  	vPos = vPos / 4;  	foreach (IMyCubeBlock b in beaconList) {  		Vector3D beaconPos = Entity.GetBlockEntityPosition (b);  		maxDistance = Math.Min (maxDistance' Vector3D.Distance (vPos' beaconPos));  	}  	// Find ship in docking area  	IMyCubeGrid dockingEntity = null;  	HashSet<IMyEntity> cubeGrids = new HashSet<IMyEntity> ();  	MyAPIGateway.Entities.GetEntities (cubeGrids' f => f is IMyCubeGrid);  	foreach (IMyCubeGrid gridCheck in cubeGrids) {  		if (gridCheck.IsStatic || gridCheck == parent)  			continue;  		double distance = Vector3D.Distance (gridCheck.GetPosition ()' vPos);  		if (distance < maxDistance) {  			dockingEntity = gridCheck;  			break;  		}  	}  	// Figure out if the ship fits in docking area' and then save ship      	if (dockingEntity != null) {  		// Get bounding box of both the docking zone and docking ship  		OrientedBoundingBoxD targetBounding = Entity.GetBoundingBox (beaconList);  		OrientedBoundingBoxD dockingBounding = Entity.GetBoundingBox (dockingEntity);  		// Make sure the docking zone contains the docking ship.  If they intersect or are disjointed' then fail  		if (!Entity.GreaterThan (dockingBounding.HalfExtent * 2' targetBounding.HalfExtent * 2)) {  			Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is too large for it's carrier.  The ship's bounding box must fit inside the docking zone bounding box!"' dockingEntity.DisplayName));  			return true;  		}  		if (targetBounding.Contains (ref dockingBounding) != ContainmentType.Contains) {  			Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is not fully inside the docking zone '{1}'.  Make sure the ship is fully contained inside the docking zone"' dockingEntity.DisplayName' pylonName));  			return true;  		}  		// Calculate the mass and ensure the docking ship is less than half the mass of the dock  		float parentMass = Entity.CalculateMass (parent);  		float dockingMass = Entity.CalculateMass (dockingEntity);  		if (dockingMass > parentMass) {  			Communication.SendPrivateInformation (userId' string.Format ("The ship you're trying to dock is too heavy for it's carrier.  The ship mass must be less than half the large ship / stations mass! (DM={0}kg CM={1}kg)"' dockingMass' parentMass));  			return true;  		}  		// Check to see if the ship is piloted' if it is' error out.    		// TODO: Check to see if we can get a real time copy of this entity?  		List<IMySlimBlock> blocks = new List<IMySlimBlock> ();  		dockingEntity.GetBlocks (blocks' x => x.FatBlock != null && x.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_Cockpit));  		foreach (IMySlimBlock slim_cbe in blocks) {  			MyObjectBuilder_Cockpit c = (MyObjectBuilder_Cockpit)slim_cbe.FatBlock.GetObjectBuilderCubeBlock ();  			if (c.Pilot != null) {  				Communication.SendPrivateInformation (userId' string.Format ("Ship in docking zone '{0}' has a pilot!  Please exit the ship before trying to dock.  (Sometimes this can lag a bit.  Wait 10 seconds and try again)"' pylonName));  				return true;  			}  		}  		// Save position and rotation information.  Some fun stuff here.  		// Get our dock rotation as a quaternion  		Quaternion saveQuat = Quaternion.CreateFromRotationMatrix (parent.WorldMatrix.GetOrientation ());  		// Transform docked ship's local position by inverse of the the parent (unwinds parent) and save it for when we undock  		Vector3D savePos = Vector3D.Transform (dockingEntity.GetPosition () - parent.GetPosition ()' Quaternion.Inverse (saveQuat));  		// Get local rotation of dock ship' and save it for when we undock  		saveQuat = Quaternion.Inverse (saveQuat) * Quaternion.CreateFromRotationMatrix (dockingEntity.WorldMatrix.GetOrientation ());  		// Save ship to file and remove  		FileInfo info = new FileInfo (Essentials.PluginPath + String.Format ("\\Docking\\docked_{0}_{1}_{2}.sbc"' ownerId' parent.EntityId' dockingEntity.EntityId));  		//CubeGridEntity dockingGrid = new CubeGridEntity((MyObjectBuilder_CubeGrid)dockingEntity.GetObjectBuilder()' dockingEntity);  		MyObjectBuilder_CubeGrid gridBuilder = CubeGrids.SafeGetObjectBuilder (dockingEntity);  		if (gridBuilder == null) {  			Communication.SendPrivateInformation (userId' string.Format ("Failed to load entity for export: {0}"' dockingEntity.DisplayName));  			return true;  		}  		// Save item  		DockingItem dockItem = new DockingItem ();  		dockItem.DockedEntityId = dockingEntity.EntityId;  		dockItem.TargetEntityId = parent.EntityId;  		dockItem.PlayerId = ownerId;  		dockItem.DockingBeaconIds = beaconList.Select (s => s.EntityId).ToArray ();  		dockItem.DockedName = dockingEntity.DisplayName;  		dockItem.SavePos = savePos;  		dockItem.SaveQuat = saveQuat;  		Docking.Instance.Add (dockItem);  		// Serialize and save ship to file  		BaseObjectManager.WriteSpaceEngineersFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer> (gridBuilder' info.FullName);  		//BaseObjectManager.SaveContentFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer>(gridBuilder' info);  		BaseEntityNetworkManager.BroadcastRemoveEntity (dockingEntity);  		//dockingEntity.Close();  		Communication.SendPrivateInformation (userId' string.Format ("Docked ship '{0}' in docking zone '{1}'."' dockItem.DockedName' pylonName));  		/* 						// Add a cool down 						DockingCooldownItem cItem = new DockingCooldownItem(); 						cItem.name = pylonName; 						cItem.startTime = DateTime.Now; 						PluginDocking.CooldownList.Add(cItem); 						 */} else {  		Communication.SendPrivateInformation (userId' string.Format ("No ships in docking zone '{0}'."' pylonName));  	}  } else if (beaconList.Count > 4) {  	Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName));  } else {  	Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'.  There must be 4 beacons with the name '{0}' to create a docking zone.  Beacons must be fully built!"' pylonName));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The following statement contains a magic number: vPos = vPos / 4;  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The following statement contains a magic number: if (dockingEntity != null) {  	// Get bounding box of both the docking zone and docking ship  	OrientedBoundingBoxD targetBounding = Entity.GetBoundingBox (beaconList);  	OrientedBoundingBoxD dockingBounding = Entity.GetBoundingBox (dockingEntity);  	// Make sure the docking zone contains the docking ship.  If they intersect or are disjointed' then fail  	if (!Entity.GreaterThan (dockingBounding.HalfExtent * 2' targetBounding.HalfExtent * 2)) {  		Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is too large for it's carrier.  The ship's bounding box must fit inside the docking zone bounding box!"' dockingEntity.DisplayName));  		return true;  	}  	if (targetBounding.Contains (ref dockingBounding) != ContainmentType.Contains) {  		Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is not fully inside the docking zone '{1}'.  Make sure the ship is fully contained inside the docking zone"' dockingEntity.DisplayName' pylonName));  		return true;  	}  	// Calculate the mass and ensure the docking ship is less than half the mass of the dock  	float parentMass = Entity.CalculateMass (parent);  	float dockingMass = Entity.CalculateMass (dockingEntity);  	if (dockingMass > parentMass) {  		Communication.SendPrivateInformation (userId' string.Format ("The ship you're trying to dock is too heavy for it's carrier.  The ship mass must be less than half the large ship / stations mass! (DM={0}kg CM={1}kg)"' dockingMass' parentMass));  		return true;  	}  	// Check to see if the ship is piloted' if it is' error out.    	// TODO: Check to see if we can get a real time copy of this entity?  	List<IMySlimBlock> blocks = new List<IMySlimBlock> ();  	dockingEntity.GetBlocks (blocks' x => x.FatBlock != null && x.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_Cockpit));  	foreach (IMySlimBlock slim_cbe in blocks) {  		MyObjectBuilder_Cockpit c = (MyObjectBuilder_Cockpit)slim_cbe.FatBlock.GetObjectBuilderCubeBlock ();  		if (c.Pilot != null) {  			Communication.SendPrivateInformation (userId' string.Format ("Ship in docking zone '{0}' has a pilot!  Please exit the ship before trying to dock.  (Sometimes this can lag a bit.  Wait 10 seconds and try again)"' pylonName));  			return true;  		}  	}  	// Save position and rotation information.  Some fun stuff here.  	// Get our dock rotation as a quaternion  	Quaternion saveQuat = Quaternion.CreateFromRotationMatrix (parent.WorldMatrix.GetOrientation ());  	// Transform docked ship's local position by inverse of the the parent (unwinds parent) and save it for when we undock  	Vector3D savePos = Vector3D.Transform (dockingEntity.GetPosition () - parent.GetPosition ()' Quaternion.Inverse (saveQuat));  	// Get local rotation of dock ship' and save it for when we undock  	saveQuat = Quaternion.Inverse (saveQuat) * Quaternion.CreateFromRotationMatrix (dockingEntity.WorldMatrix.GetOrientation ());  	// Save ship to file and remove  	FileInfo info = new FileInfo (Essentials.PluginPath + String.Format ("\\Docking\\docked_{0}_{1}_{2}.sbc"' ownerId' parent.EntityId' dockingEntity.EntityId));  	//CubeGridEntity dockingGrid = new CubeGridEntity((MyObjectBuilder_CubeGrid)dockingEntity.GetObjectBuilder()' dockingEntity);  	MyObjectBuilder_CubeGrid gridBuilder = CubeGrids.SafeGetObjectBuilder (dockingEntity);  	if (gridBuilder == null) {  		Communication.SendPrivateInformation (userId' string.Format ("Failed to load entity for export: {0}"' dockingEntity.DisplayName));  		return true;  	}  	// Save item  	DockingItem dockItem = new DockingItem ();  	dockItem.DockedEntityId = dockingEntity.EntityId;  	dockItem.TargetEntityId = parent.EntityId;  	dockItem.PlayerId = ownerId;  	dockItem.DockingBeaconIds = beaconList.Select (s => s.EntityId).ToArray ();  	dockItem.DockedName = dockingEntity.DisplayName;  	dockItem.SavePos = savePos;  	dockItem.SaveQuat = saveQuat;  	Docking.Instance.Add (dockItem);  	// Serialize and save ship to file  	BaseObjectManager.WriteSpaceEngineersFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer> (gridBuilder' info.FullName);  	//BaseObjectManager.SaveContentFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer>(gridBuilder' info);  	BaseEntityNetworkManager.BroadcastRemoveEntity (dockingEntity);  	//dockingEntity.Close();  	Communication.SendPrivateInformation (userId' string.Format ("Docked ship '{0}' in docking zone '{1}'."' dockItem.DockedName' pylonName));  	/* 						// Add a cool down 						DockingCooldownItem cItem = new DockingCooldownItem(); 						cItem.name = pylonName; 						cItem.startTime = DateTime.Now; 						PluginDocking.CooldownList.Add(cItem); 						 */} else {  	Communication.SendPrivateInformation (userId' string.Format ("No ships in docking zone '{0}'."' pylonName));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The following statement contains a magic number: if (dockingEntity != null) {  	// Get bounding box of both the docking zone and docking ship  	OrientedBoundingBoxD targetBounding = Entity.GetBoundingBox (beaconList);  	OrientedBoundingBoxD dockingBounding = Entity.GetBoundingBox (dockingEntity);  	// Make sure the docking zone contains the docking ship.  If they intersect or are disjointed' then fail  	if (!Entity.GreaterThan (dockingBounding.HalfExtent * 2' targetBounding.HalfExtent * 2)) {  		Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is too large for it's carrier.  The ship's bounding box must fit inside the docking zone bounding box!"' dockingEntity.DisplayName));  		return true;  	}  	if (targetBounding.Contains (ref dockingBounding) != ContainmentType.Contains) {  		Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is not fully inside the docking zone '{1}'.  Make sure the ship is fully contained inside the docking zone"' dockingEntity.DisplayName' pylonName));  		return true;  	}  	// Calculate the mass and ensure the docking ship is less than half the mass of the dock  	float parentMass = Entity.CalculateMass (parent);  	float dockingMass = Entity.CalculateMass (dockingEntity);  	if (dockingMass > parentMass) {  		Communication.SendPrivateInformation (userId' string.Format ("The ship you're trying to dock is too heavy for it's carrier.  The ship mass must be less than half the large ship / stations mass! (DM={0}kg CM={1}kg)"' dockingMass' parentMass));  		return true;  	}  	// Check to see if the ship is piloted' if it is' error out.    	// TODO: Check to see if we can get a real time copy of this entity?  	List<IMySlimBlock> blocks = new List<IMySlimBlock> ();  	dockingEntity.GetBlocks (blocks' x => x.FatBlock != null && x.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_Cockpit));  	foreach (IMySlimBlock slim_cbe in blocks) {  		MyObjectBuilder_Cockpit c = (MyObjectBuilder_Cockpit)slim_cbe.FatBlock.GetObjectBuilderCubeBlock ();  		if (c.Pilot != null) {  			Communication.SendPrivateInformation (userId' string.Format ("Ship in docking zone '{0}' has a pilot!  Please exit the ship before trying to dock.  (Sometimes this can lag a bit.  Wait 10 seconds and try again)"' pylonName));  			return true;  		}  	}  	// Save position and rotation information.  Some fun stuff here.  	// Get our dock rotation as a quaternion  	Quaternion saveQuat = Quaternion.CreateFromRotationMatrix (parent.WorldMatrix.GetOrientation ());  	// Transform docked ship's local position by inverse of the the parent (unwinds parent) and save it for when we undock  	Vector3D savePos = Vector3D.Transform (dockingEntity.GetPosition () - parent.GetPosition ()' Quaternion.Inverse (saveQuat));  	// Get local rotation of dock ship' and save it for when we undock  	saveQuat = Quaternion.Inverse (saveQuat) * Quaternion.CreateFromRotationMatrix (dockingEntity.WorldMatrix.GetOrientation ());  	// Save ship to file and remove  	FileInfo info = new FileInfo (Essentials.PluginPath + String.Format ("\\Docking\\docked_{0}_{1}_{2}.sbc"' ownerId' parent.EntityId' dockingEntity.EntityId));  	//CubeGridEntity dockingGrid = new CubeGridEntity((MyObjectBuilder_CubeGrid)dockingEntity.GetObjectBuilder()' dockingEntity);  	MyObjectBuilder_CubeGrid gridBuilder = CubeGrids.SafeGetObjectBuilder (dockingEntity);  	if (gridBuilder == null) {  		Communication.SendPrivateInformation (userId' string.Format ("Failed to load entity for export: {0}"' dockingEntity.DisplayName));  		return true;  	}  	// Save item  	DockingItem dockItem = new DockingItem ();  	dockItem.DockedEntityId = dockingEntity.EntityId;  	dockItem.TargetEntityId = parent.EntityId;  	dockItem.PlayerId = ownerId;  	dockItem.DockingBeaconIds = beaconList.Select (s => s.EntityId).ToArray ();  	dockItem.DockedName = dockingEntity.DisplayName;  	dockItem.SavePos = savePos;  	dockItem.SaveQuat = saveQuat;  	Docking.Instance.Add (dockItem);  	// Serialize and save ship to file  	BaseObjectManager.WriteSpaceEngineersFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer> (gridBuilder' info.FullName);  	//BaseObjectManager.SaveContentFile<MyObjectBuilder_CubeGrid' MyObjectBuilder_CubeGridSerializer>(gridBuilder' info);  	BaseEntityNetworkManager.BroadcastRemoveEntity (dockingEntity);  	//dockingEntity.Close();  	Communication.SendPrivateInformation (userId' string.Format ("Docked ship '{0}' in docking zone '{1}'."' dockItem.DockedName' pylonName));  	/* 						// Add a cool down 						DockingCooldownItem cItem = new DockingCooldownItem(); 						cItem.name = pylonName; 						cItem.startTime = DateTime.Now; 						PluginDocking.CooldownList.Add(cItem); 						 */} else {  	Communication.SendPrivateInformation (userId' string.Format ("No ships in docking zone '{0}'."' pylonName));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The following statement contains a magic number: if (!Entity.GreaterThan (dockingBounding.HalfExtent * 2' targetBounding.HalfExtent * 2)) {  	Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is too large for it's carrier.  The ship's bounding box must fit inside the docking zone bounding box!"' dockingEntity.DisplayName));  	return true;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The following statement contains a magic number: if (!Entity.GreaterThan (dockingBounding.HalfExtent * 2' targetBounding.HalfExtent * 2)) {  	Communication.SendPrivateInformation (userId' string.Format ("The ship '{0}' is too large for it's carrier.  The ship's bounding box must fit inside the docking zone bounding box!"' dockingEntity.DisplayName));  	return true;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockDock,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockDock.cs,HandleCommand,The following statement contains a magic number: if (beaconList.Count > 4) {  	Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName));  } else {  	Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'.  There must be 4 beacons with the name '{0}' to create a docking zone.  Beacons must be fully built!"' pylonName));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockList,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockList.cs,HandleCommand,The following statement contains a magic number: if (beaconList.Count == 4) {  	foreach (IMyCubeBlock entity in beaconList) {  		if (!Entity.CheckOwnership (entity' playerId)) {  			Communication.SendPrivateInformation (userId' string.Format ("You do not have permission to use '{0}'.  You must either own all the beacons or they must be shared with faction."' pylonName));  			return true;  		}  	}  	IMyCubeBlock e = beaconList.First ();  	IMyCubeGrid parent = (IMyCubeGrid)e.Parent;  	long[] beaconListIds = beaconList.Select (p => p.EntityId).ToArray ();  	long ownerId = beaconList.First ().OwnerId;  	List<DockingItem> dockingItems = Docking.Instance.Find (d => d.PlayerId == ownerId && d.TargetEntityId == parent.EntityId && d.DockingBeaconIds.Intersect (beaconListIds).Count () == 4);  	if (dockingItems.Count > 0) {  		Communication.SendPrivateInformation (userId' string.Format ("You have {1} ship(s) docked in docking zone '{0}':"' pylonName' dockingItems.Count));  		foreach (DockingItem item in dockingItems) {  			Communication.SendPrivateInformation (userId' string.Format ("Docked ship: {0} ({1})"' item.DockedName' item.DockedEntityId));  		}  		return true;  	} else {  		Communication.SendPrivateInformation (userId' string.Format ("No ships are docked in docking zone '{0}'."' pylonName));  	}  } else if (beaconList.Count > 4) {  	Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName));  } else {  	Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'"' pylonName));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockList,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockList.cs,HandleCommand,The following statement contains a magic number: if (beaconList.Count == 4) {  	foreach (IMyCubeBlock entity in beaconList) {  		if (!Entity.CheckOwnership (entity' playerId)) {  			Communication.SendPrivateInformation (userId' string.Format ("You do not have permission to use '{0}'.  You must either own all the beacons or they must be shared with faction."' pylonName));  			return true;  		}  	}  	IMyCubeBlock e = beaconList.First ();  	IMyCubeGrid parent = (IMyCubeGrid)e.Parent;  	long[] beaconListIds = beaconList.Select (p => p.EntityId).ToArray ();  	long ownerId = beaconList.First ().OwnerId;  	List<DockingItem> dockingItems = Docking.Instance.Find (d => d.PlayerId == ownerId && d.TargetEntityId == parent.EntityId && d.DockingBeaconIds.Intersect (beaconListIds).Count () == 4);  	if (dockingItems.Count > 0) {  		Communication.SendPrivateInformation (userId' string.Format ("You have {1} ship(s) docked in docking zone '{0}':"' pylonName' dockingItems.Count));  		foreach (DockingItem item in dockingItems) {  			Communication.SendPrivateInformation (userId' string.Format ("Docked ship: {0} ({1})"' item.DockedName' item.DockedEntityId));  		}  		return true;  	} else {  		Communication.SendPrivateInformation (userId' string.Format ("No ships are docked in docking zone '{0}'."' pylonName));  	}  } else if (beaconList.Count > 4) {  	Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName));  } else {  	Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'"' pylonName));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockList,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockList.cs,HandleCommand,The following statement contains a magic number: if (beaconList.Count == 4) {  	foreach (IMyCubeBlock entity in beaconList) {  		if (!Entity.CheckOwnership (entity' playerId)) {  			Communication.SendPrivateInformation (userId' string.Format ("You do not have permission to use '{0}'.  You must either own all the beacons or they must be shared with faction."' pylonName));  			return true;  		}  	}  	IMyCubeBlock e = beaconList.First ();  	IMyCubeGrid parent = (IMyCubeGrid)e.Parent;  	long[] beaconListIds = beaconList.Select (p => p.EntityId).ToArray ();  	long ownerId = beaconList.First ().OwnerId;  	List<DockingItem> dockingItems = Docking.Instance.Find (d => d.PlayerId == ownerId && d.TargetEntityId == parent.EntityId && d.DockingBeaconIds.Intersect (beaconListIds).Count () == 4);  	if (dockingItems.Count > 0) {  		Communication.SendPrivateInformation (userId' string.Format ("You have {1} ship(s) docked in docking zone '{0}':"' pylonName' dockingItems.Count));  		foreach (DockingItem item in dockingItems) {  			Communication.SendPrivateInformation (userId' string.Format ("Docked ship: {0} ({1})"' item.DockedName' item.DockedEntityId));  		}  		return true;  	} else {  		Communication.SendPrivateInformation (userId' string.Format ("No ships are docked in docking zone '{0}'."' pylonName));  	}  } else if (beaconList.Count > 4) {  	Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName));  } else {  	Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'"' pylonName));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockList,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockList.cs,HandleCommand,The following statement contains a magic number: if (beaconList.Count > 4) {  	Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName));  } else {  	Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'"' pylonName));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockValidate,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockValidate.cs,HandleCommand,The following statement contains a magic number: if (beaconList.Count == 4) {  	// Check ownership  	foreach (IMyCubeBlock entityBlock in beaconList) {  		if (!Entity.CheckOwnership (entityBlock' playerId)) {  			Communication.SendPrivateInformation (userId' string.Format ("You do not have permission to use '{0}'.  You must either own all the beacons or they must be shared with faction."' pylonName));  			return true;  		}  	}  	// Check for bounding box intsection of other docking zones  	int intersectElement = 0;  	if (Entity.CheckForIntersection (testList' beaconList' out intersectElement)) {  		Communication.SendPrivateInformation (userId' string.Format ("The docking zone '{0}' intersects with docking zone '{1}'.  Make sure you place your docking zones so they don't overlap."' pylonName' testList.ElementAt (intersectElement).Key));  		return true;  	}  	Communication.SendPrivateInformation (userId' string.Format ("The docking zone '{0}' appears to be a valid docking zone."' pylonName));  } else if (beaconList.Count > 4) {  	Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName));  } else {  	Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'.  There must be 4 beacons with the name '{0}' to create a docking zone.  Beacons must be fully built!"' pylonName));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockValidate,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockValidate.cs,HandleCommand,The following statement contains a magic number: if (beaconList.Count == 4) {  	// Check ownership  	foreach (IMyCubeBlock entityBlock in beaconList) {  		if (!Entity.CheckOwnership (entityBlock' playerId)) {  			Communication.SendPrivateInformation (userId' string.Format ("You do not have permission to use '{0}'.  You must either own all the beacons or they must be shared with faction."' pylonName));  			return true;  		}  	}  	// Check for bounding box intsection of other docking zones  	int intersectElement = 0;  	if (Entity.CheckForIntersection (testList' beaconList' out intersectElement)) {  		Communication.SendPrivateInformation (userId' string.Format ("The docking zone '{0}' intersects with docking zone '{1}'.  Make sure you place your docking zones so they don't overlap."' pylonName' testList.ElementAt (intersectElement).Key));  		return true;  	}  	Communication.SendPrivateInformation (userId' string.Format ("The docking zone '{0}' appears to be a valid docking zone."' pylonName));  } else if (beaconList.Count > 4) {  	Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName));  } else {  	Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'.  There must be 4 beacons with the name '{0}' to create a docking zone.  Beacons must be fully built!"' pylonName));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleDockValidate,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Dock\HandleDockValidate.cs,HandleCommand,The following statement contains a magic number: if (beaconList.Count > 4) {  	Communication.SendPrivateInformation (userId' string.Format ("Too many beacons with the name or another zone with the name '{0}'.  Place only 4 beacons to create a zone or try a different zone name."' pylonName));  } else {  	Communication.SendPrivateInformation (userId' string.Format ("Can not locate docking zone '{0}'.  There must be 4 beacons with the name '{0}' to create a docking zone.  Beacons must be fully built!"' pylonName));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminScanInactive,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanInactive.cs,HandleCommand,The following statement contains a magic number: if (words.Count () > 3)  	return false;  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminTurrets,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Admin\HandleAdminTurrets.cs,HandleCommand,The following statement contains a magic number: foreach (IMyEntity entity in entities) {  	if (!(entity is IMyCubeGrid))  		continue;  	if (!entity.InScene)  		continue;  	IMyCubeGrid grid = (IMyCubeGrid)entity;  	//MyObjectBuilder_CubeGrid builder = CubeGrids.SafeGetObjectBuilder((IMyCubeGrid)entity);  	//if (builder == null)  	//	continue;  	List<IMySlimBlock> blocks = new List<IMySlimBlock> ();  	grid.GetBlocks (blocks);  	foreach (IMySlimBlock block in blocks)//foreach (MyObjectBuilder_CubeBlock block in builder.CubeBlocks)  	 {  		//if (block is MyObjectBuilder_TurretBase)  		if (block.FatBlock == null)  			continue;  		if (block.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_InteriorTurret) || block.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_LargeGatlingTurret) || block.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_LargeMissileTurret)) {  			//IMyEntity turret = MyAPIGateway.Entities.GetEntityById(block.EntityId);  			IMyEntity turret = block.FatBlock;  			bool state = FunctionalBlockEntity.GetState (turret);  			if (splits [0].ToLower () == "toggle")  				FunctionalBlockEntity.SetState (turret' !state);  			count++;  			if (state)  				enabled++;  			else  				disabled++;  			if (splits [0].ToLower () == "test" && state) {  				BoundingSphereD sphere = new BoundingSphereD (grid.GetPosition ()' 2000);  				List<IMyEntity> testEntities = MyAPIGateway.Entities.GetEntitiesInSphere (ref sphere);  				bool found = false;  				foreach (IMyEntity testEntity in testEntities) {  					if (entity == testEntity)  						continue;  					if (testEntity is IMyCubeBlock)  						continue;  					if (!(testEntity is IMyControllableEntity)) {  						//Console.WriteLine("Entity: {0}"' testEntity.GetType());  						continue;  					}  					if (testEntity is IMyCubeGrid) {  						IMyCubeGrid testGrid = (IMyCubeGrid)testEntity;  						foreach (long owner in testGrid.BigOwners) {  							if (block.FatBlock.GetUserRelationToOwner (owner) == Sandbox.Common.MyRelationsBetweenPlayerAndBlock.Enemies || block.FatBlock.GetUserRelationToOwner (owner) == Sandbox.Common.MyRelationsBetweenPlayerAndBlock.Neutral) {  								found = true;  								keepOn++;  								break;  							} else {  								Console.WriteLine ("Relation: {0} - {1}"' block.FatBlock.GetUserRelationToOwner (owner)' testGrid.DisplayName);  							}  						}  						if (found)  							break;  					} else {  						var builderBase = testEntity.GetObjectBuilder ();  						if (builderBase is MyObjectBuilder_Character) {  							MyObjectBuilder_Character c = (MyObjectBuilder_Character)builderBase;  							ulong steamId = PlayerMap.Instance.GetSteamId (c.EntityId);  							if (steamId < 1)  								continue;  							long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (steamId);  							if (playerId < 1)  								continue;  							if (block.FatBlock.GetUserRelationToOwner (playerId) == Sandbox.Common.MyRelationsBetweenPlayerAndBlock.Enemies || block.FatBlock.GetUserRelationToOwner (playerId) == Sandbox.Common.MyRelationsBetweenPlayerAndBlock.Neutral) {  								found = true;  								keepOn++;  								break;  							}  							/* 										else 										{ 											Console.WriteLine("Character Relation: {0} - {1}"' block.FatBlock.GetUserRelationToOwner(playerId)' c.DisplayName); 										} */if (found)  								break;  						}  					}  				}  				//break;  			}  		}  	}  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminTurrets,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Admin\HandleAdminTurrets.cs,HandleCommand,The following statement contains a magic number: foreach (IMySlimBlock block in blocks)//foreach (MyObjectBuilder_CubeBlock block in builder.CubeBlocks)   {  	//if (block is MyObjectBuilder_TurretBase)  	if (block.FatBlock == null)  		continue;  	if (block.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_InteriorTurret) || block.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_LargeGatlingTurret) || block.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_LargeMissileTurret)) {  		//IMyEntity turret = MyAPIGateway.Entities.GetEntityById(block.EntityId);  		IMyEntity turret = block.FatBlock;  		bool state = FunctionalBlockEntity.GetState (turret);  		if (splits [0].ToLower () == "toggle")  			FunctionalBlockEntity.SetState (turret' !state);  		count++;  		if (state)  			enabled++;  		else  			disabled++;  		if (splits [0].ToLower () == "test" && state) {  			BoundingSphereD sphere = new BoundingSphereD (grid.GetPosition ()' 2000);  			List<IMyEntity> testEntities = MyAPIGateway.Entities.GetEntitiesInSphere (ref sphere);  			bool found = false;  			foreach (IMyEntity testEntity in testEntities) {  				if (entity == testEntity)  					continue;  				if (testEntity is IMyCubeBlock)  					continue;  				if (!(testEntity is IMyControllableEntity)) {  					//Console.WriteLine("Entity: {0}"' testEntity.GetType());  					continue;  				}  				if (testEntity is IMyCubeGrid) {  					IMyCubeGrid testGrid = (IMyCubeGrid)testEntity;  					foreach (long owner in testGrid.BigOwners) {  						if (block.FatBlock.GetUserRelationToOwner (owner) == Sandbox.Common.MyRelationsBetweenPlayerAndBlock.Enemies || block.FatBlock.GetUserRelationToOwner (owner) == Sandbox.Common.MyRelationsBetweenPlayerAndBlock.Neutral) {  							found = true;  							keepOn++;  							break;  						} else {  							Console.WriteLine ("Relation: {0} - {1}"' block.FatBlock.GetUserRelationToOwner (owner)' testGrid.DisplayName);  						}  					}  					if (found)  						break;  				} else {  					var builderBase = testEntity.GetObjectBuilder ();  					if (builderBase is MyObjectBuilder_Character) {  						MyObjectBuilder_Character c = (MyObjectBuilder_Character)builderBase;  						ulong steamId = PlayerMap.Instance.GetSteamId (c.EntityId);  						if (steamId < 1)  							continue;  						long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (steamId);  						if (playerId < 1)  							continue;  						if (block.FatBlock.GetUserRelationToOwner (playerId) == Sandbox.Common.MyRelationsBetweenPlayerAndBlock.Enemies || block.FatBlock.GetUserRelationToOwner (playerId) == Sandbox.Common.MyRelationsBetweenPlayerAndBlock.Neutral) {  							found = true;  							keepOn++;  							break;  						}  						/* 										else 										{ 											Console.WriteLine("Character Relation: {0} - {1}"' block.FatBlock.GetUserRelationToOwner(playerId)' c.DisplayName); 										} */if (found)  							break;  					}  				}  			}  			//break;  		}  	}  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminTurrets,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Admin\HandleAdminTurrets.cs,HandleCommand,The following statement contains a magic number: if (block.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_InteriorTurret) || block.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_LargeGatlingTurret) || block.FatBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_LargeMissileTurret)) {  	//IMyEntity turret = MyAPIGateway.Entities.GetEntityById(block.EntityId);  	IMyEntity turret = block.FatBlock;  	bool state = FunctionalBlockEntity.GetState (turret);  	if (splits [0].ToLower () == "toggle")  		FunctionalBlockEntity.SetState (turret' !state);  	count++;  	if (state)  		enabled++;  	else  		disabled++;  	if (splits [0].ToLower () == "test" && state) {  		BoundingSphereD sphere = new BoundingSphereD (grid.GetPosition ()' 2000);  		List<IMyEntity> testEntities = MyAPIGateway.Entities.GetEntitiesInSphere (ref sphere);  		bool found = false;  		foreach (IMyEntity testEntity in testEntities) {  			if (entity == testEntity)  				continue;  			if (testEntity is IMyCubeBlock)  				continue;  			if (!(testEntity is IMyControllableEntity)) {  				//Console.WriteLine("Entity: {0}"' testEntity.GetType());  				continue;  			}  			if (testEntity is IMyCubeGrid) {  				IMyCubeGrid testGrid = (IMyCubeGrid)testEntity;  				foreach (long owner in testGrid.BigOwners) {  					if (block.FatBlock.GetUserRelationToOwner (owner) == Sandbox.Common.MyRelationsBetweenPlayerAndBlock.Enemies || block.FatBlock.GetUserRelationToOwner (owner) == Sandbox.Common.MyRelationsBetweenPlayerAndBlock.Neutral) {  						found = true;  						keepOn++;  						break;  					} else {  						Console.WriteLine ("Relation: {0} - {1}"' block.FatBlock.GetUserRelationToOwner (owner)' testGrid.DisplayName);  					}  				}  				if (found)  					break;  			} else {  				var builderBase = testEntity.GetObjectBuilder ();  				if (builderBase is MyObjectBuilder_Character) {  					MyObjectBuilder_Character c = (MyObjectBuilder_Character)builderBase;  					ulong steamId = PlayerMap.Instance.GetSteamId (c.EntityId);  					if (steamId < 1)  						continue;  					long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (steamId);  					if (playerId < 1)  						continue;  					if (block.FatBlock.GetUserRelationToOwner (playerId) == Sandbox.Common.MyRelationsBetweenPlayerAndBlock.Enemies || block.FatBlock.GetUserRelationToOwner (playerId) == Sandbox.Common.MyRelationsBetweenPlayerAndBlock.Neutral) {  						found = true;  						keepOn++;  						break;  					}  					/* 										else 										{ 											Console.WriteLine("Character Relation: {0} - {1}"' block.FatBlock.GetUserRelationToOwner(playerId)' c.DisplayName); 										} */if (found)  						break;  				}  			}  		}  		//break;  	}  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminTurrets,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Admin\HandleAdminTurrets.cs,HandleCommand,The following statement contains a magic number: if (splits [0].ToLower () == "test" && state) {  	BoundingSphereD sphere = new BoundingSphereD (grid.GetPosition ()' 2000);  	List<IMyEntity> testEntities = MyAPIGateway.Entities.GetEntitiesInSphere (ref sphere);  	bool found = false;  	foreach (IMyEntity testEntity in testEntities) {  		if (entity == testEntity)  			continue;  		if (testEntity is IMyCubeBlock)  			continue;  		if (!(testEntity is IMyControllableEntity)) {  			//Console.WriteLine("Entity: {0}"' testEntity.GetType());  			continue;  		}  		if (testEntity is IMyCubeGrid) {  			IMyCubeGrid testGrid = (IMyCubeGrid)testEntity;  			foreach (long owner in testGrid.BigOwners) {  				if (block.FatBlock.GetUserRelationToOwner (owner) == Sandbox.Common.MyRelationsBetweenPlayerAndBlock.Enemies || block.FatBlock.GetUserRelationToOwner (owner) == Sandbox.Common.MyRelationsBetweenPlayerAndBlock.Neutral) {  					found = true;  					keepOn++;  					break;  				} else {  					Console.WriteLine ("Relation: {0} - {1}"' block.FatBlock.GetUserRelationToOwner (owner)' testGrid.DisplayName);  				}  			}  			if (found)  				break;  		} else {  			var builderBase = testEntity.GetObjectBuilder ();  			if (builderBase is MyObjectBuilder_Character) {  				MyObjectBuilder_Character c = (MyObjectBuilder_Character)builderBase;  				ulong steamId = PlayerMap.Instance.GetSteamId (c.EntityId);  				if (steamId < 1)  					continue;  				long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (steamId);  				if (playerId < 1)  					continue;  				if (block.FatBlock.GetUserRelationToOwner (playerId) == Sandbox.Common.MyRelationsBetweenPlayerAndBlock.Enemies || block.FatBlock.GetUserRelationToOwner (playerId) == Sandbox.Common.MyRelationsBetweenPlayerAndBlock.Neutral) {  					found = true;  					keepOn++;  					break;  				}  				/* 										else 										{ 											Console.WriteLine("Character Relation: {0} - {1}"' block.FatBlock.GetUserRelationToOwner(playerId)' c.DisplayName); 										} */if (found)  					break;  			}  		}  	}  	//break;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminNotify,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Admin\HandleAdminNotify.cs,HandleCommand,The following statement contains a magic number: if (words.Length < 3) {  	Communication.SendPrivateInformation (userId' GetHelp ());  	return true;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminDeleteGridsArea,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteGridsArea.cs,HandleCommand,The following statement contains a magic number: if (words.Count () != 4 && words.Count () != 0)  	return false;  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminDeleteGridsArea,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteGridsArea.cs,HandleCommand,The following statement contains a magic number: if (words.Count () != 4) {  	Communication.SendPrivateInformation (userId' GetHelp ());  	return true;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminDeleteGridsArea,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminDelete\HandleAdminDeleteGridsArea.cs,HandleCommand,The following statement contains a magic number: for (int r = 0; r < 4; r++) {  	if (!float.TryParse (words [r]' out test)) {  		Communication.SendPrivateInformation (userId' string.Format ("The value at position {0} - '{1}' is invalid.  Please try the command again."' r + 1' words [r]));  		return true;  	}  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminScanAreaAt,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanAreaAt.cs,HandleCommand,The following statement contains a magic number: if (words.Count () != 4 && words.Count () != 0)  	return false;  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminScanAreaAt,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminScan\HandleAdminScanAreaAt.cs,HandleCommand,The following statement contains a magic number: for (int r = 0; r < 4; r++) {  	if (!float.TryParse (words [r]' out test)) {  		Communication.SendPrivateInformation (userId' string.Format ("The value at position {0} - '{1}' is invalid.  Please try the command again."' r + 1' words [r]));  		return true;  	}  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminMoveAreaToPosition,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveAreaToPosition.cs,HandleCommand,The following statement contains a magic number: if (words.Count () != 7 && words.Count () != 0)  	return false;  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminMoveAreaToPosition,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveAreaToPosition.cs,HandleCommand,The following statement contains a magic number: if (words.Count () != 7) {  	Communication.SendPrivateInformation (userId' GetHelp ());  	return true;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminMoveAreaToPosition,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveAreaToPosition.cs,HandleCommand,The following statement contains a magic number: for (int r = 0; r < 7; r++) {  	if (!float.TryParse (words [r]' out test)) {  		Communication.SendPrivateInformation (userId' string.Format ("The value at position {0} - '{1}' is invalid.  Please try the command again."' r + 1' words [r]));  		return true;  	}  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminMoveAreaToPosition,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveAreaToPosition.cs,HandleCommand,The following statement contains a magic number: Thread.Sleep (5000);  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminMoveAreaToPosition,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveAreaToPosition.cs,HandleCommand,The following statement contains a magic number: Thread.Sleep (10000);  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminMoveAreaToPosition,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveAreaToPosition.cs,HandleCommand,The following statement contains a magic number: Wrapper.GameAction (() => {  	foreach (MyObjectBuilder_CubeGrid grid in gridsToMove) {  		grid.PositionAndOrientation = new MyPositionAndOrientation (grid.PositionAndOrientation.Value.Position + difference' grid.PositionAndOrientation.Value.Forward' grid.PositionAndOrientation.Value.Up);  		//Logging.WriteLineAndConsole(string.Format("Adding '{0}' for move"' grid.DisplayName));  		Communication.SendPrivateInformation (userId' string.Format ("Adding grid '{0}' back to world."' grid.DisplayName));  		SectorObjectManager.Instance.AddEntity (new CubeGridEntity (grid));  		Thread.Sleep (1000);  	}  });  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminMoveAreaToPosition,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveAreaToPosition.cs,HandleCommand,The following statement contains a magic number: foreach (MyObjectBuilder_CubeGrid grid in gridsToMove) {  	grid.PositionAndOrientation = new MyPositionAndOrientation (grid.PositionAndOrientation.Value.Position + difference' grid.PositionAndOrientation.Value.Forward' grid.PositionAndOrientation.Value.Up);  	//Logging.WriteLineAndConsole(string.Format("Adding '{0}' for move"' grid.DisplayName));  	Communication.SendPrivateInformation (userId' string.Format ("Adding grid '{0}' back to world."' grid.DisplayName));  	SectorObjectManager.Instance.AddEntity (new CubeGridEntity (grid));  	Thread.Sleep (1000);  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleAdminMoveAreaToPosition,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\AdminMove\HandleAdminMoveAreaToPosition.cs,HandleCommand,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointFactionAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionAdd.cs,HandleCommand,The following statement contains a magic number: if (splits.Length != 6 && splits.Length != 7 && splits.Length != 1) {  	Communication.SendPrivateInformation (userId' GetHelp ());  	return true;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointFactionAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionAdd.cs,HandleCommand,The following statement contains a magic number: if (splits.Length != 6 && splits.Length != 7 && splits.Length != 1) {  	Communication.SendPrivateInformation (userId' GetHelp ());  	return true;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointFactionAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionAdd.cs,HandleCommand,The following statement contains a magic number: if (splits.Length == 1) {  	IMyEntity playerEntity = Player.FindControlledEntity (playerId);  	if (playerEntity == null) {  		Communication.SendPrivateInformation (userId' string.Format ("Can't find your position"));  		return true;  	}  	Vector3D pos = playerEntity.GetPosition ();  	string name = splits [0];  	foreach (ulong steamId in PlayerManager.Instance.ConnectedPlayers) {  		if (Player.CheckPlayerSameFaction (userId' steamId)) {  			Communication.SendClientMessage (steamId' string.Format ("/waypoint add \"{0}\" \"{0}\" Neutral {1} {2} {3}"' name' Math.Floor (pos.X)' Math.Floor (pos.Y)' Math.Floor (pos.Z)));  		}  	}  	WaypointItem item = new WaypointItem ();  	item.SteamId = (ulong)faction.FactionId;  	item.Name = name;  	item.Text = name;  	item.Position = pos;  	item.WaypointType = WaypointTypes.Neutral;  	item.Leader = faction.IsLeader (playerId);  	Waypoints.Instance.Add (item);  	Communication.SendFactionClientMessage (userId' string.Format ("/message Server {2} has added the waypoint: {0} at {1} by {2}"' item.Name' General.Vector3DToString (item.Position)' playerName));  } else {  	for (int r = 3; r < 6; r++) {  		double test = 0d;  		if (!double.TryParse (splits [r]' out test)) {  			Communication.SendPrivateInformation (userId' string.Format ("Invalid position information: {0} is invalid"' splits [r]));  			return true;  		}  	}  	string add = "";  	foreach (string split in splits) {  		if (add == "")  			add += split.ToLower ();  		else  			add += " " + split;  	}  	foreach (ulong steamId in PlayerManager.Instance.ConnectedPlayers) {  		if (Player.CheckPlayerSameFaction (userId' steamId)) {  			Communication.SendClientMessage (steamId' string.Format ("/waypoint add {0}"' add));  		}  	}  	string group = "";  	if (splits.Length == 7)  		group = splits [7];  	WaypointItem item = new WaypointItem ();  	item.SteamId = (ulong)faction.FactionId;  	item.Name = splits [0];  	item.Text = splits [1];  	WaypointTypes type = WaypointTypes.Neutral;  	Enum.TryParse<WaypointTypes> (splits [2]' true' out type);  	item.WaypointType = type;  	item.Position = new Vector3D (double.Parse (splits [3])' double.Parse (splits [4])' double.Parse (splits [5]));  	item.Group = group;  	item.Leader = faction.IsLeader (playerId);  	Waypoints.Instance.Add (item);  	Communication.SendFactionClientMessage (userId' string.Format ("/message Server {2} has added the waypoint: {0} at {1} by {2}"' item.Name' General.Vector3DToString (item.Position)' playerName));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointFactionAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionAdd.cs,HandleCommand,The following statement contains a magic number: if (splits.Length == 1) {  	IMyEntity playerEntity = Player.FindControlledEntity (playerId);  	if (playerEntity == null) {  		Communication.SendPrivateInformation (userId' string.Format ("Can't find your position"));  		return true;  	}  	Vector3D pos = playerEntity.GetPosition ();  	string name = splits [0];  	foreach (ulong steamId in PlayerManager.Instance.ConnectedPlayers) {  		if (Player.CheckPlayerSameFaction (userId' steamId)) {  			Communication.SendClientMessage (steamId' string.Format ("/waypoint add \"{0}\" \"{0}\" Neutral {1} {2} {3}"' name' Math.Floor (pos.X)' Math.Floor (pos.Y)' Math.Floor (pos.Z)));  		}  	}  	WaypointItem item = new WaypointItem ();  	item.SteamId = (ulong)faction.FactionId;  	item.Name = name;  	item.Text = name;  	item.Position = pos;  	item.WaypointType = WaypointTypes.Neutral;  	item.Leader = faction.IsLeader (playerId);  	Waypoints.Instance.Add (item);  	Communication.SendFactionClientMessage (userId' string.Format ("/message Server {2} has added the waypoint: {0} at {1} by {2}"' item.Name' General.Vector3DToString (item.Position)' playerName));  } else {  	for (int r = 3; r < 6; r++) {  		double test = 0d;  		if (!double.TryParse (splits [r]' out test)) {  			Communication.SendPrivateInformation (userId' string.Format ("Invalid position information: {0} is invalid"' splits [r]));  			return true;  		}  	}  	string add = "";  	foreach (string split in splits) {  		if (add == "")  			add += split.ToLower ();  		else  			add += " " + split;  	}  	foreach (ulong steamId in PlayerManager.Instance.ConnectedPlayers) {  		if (Player.CheckPlayerSameFaction (userId' steamId)) {  			Communication.SendClientMessage (steamId' string.Format ("/waypoint add {0}"' add));  		}  	}  	string group = "";  	if (splits.Length == 7)  		group = splits [7];  	WaypointItem item = new WaypointItem ();  	item.SteamId = (ulong)faction.FactionId;  	item.Name = splits [0];  	item.Text = splits [1];  	WaypointTypes type = WaypointTypes.Neutral;  	Enum.TryParse<WaypointTypes> (splits [2]' true' out type);  	item.WaypointType = type;  	item.Position = new Vector3D (double.Parse (splits [3])' double.Parse (splits [4])' double.Parse (splits [5]));  	item.Group = group;  	item.Leader = faction.IsLeader (playerId);  	Waypoints.Instance.Add (item);  	Communication.SendFactionClientMessage (userId' string.Format ("/message Server {2} has added the waypoint: {0} at {1} by {2}"' item.Name' General.Vector3DToString (item.Position)' playerName));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointFactionAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionAdd.cs,HandleCommand,The following statement contains a magic number: if (splits.Length == 1) {  	IMyEntity playerEntity = Player.FindControlledEntity (playerId);  	if (playerEntity == null) {  		Communication.SendPrivateInformation (userId' string.Format ("Can't find your position"));  		return true;  	}  	Vector3D pos = playerEntity.GetPosition ();  	string name = splits [0];  	foreach (ulong steamId in PlayerManager.Instance.ConnectedPlayers) {  		if (Player.CheckPlayerSameFaction (userId' steamId)) {  			Communication.SendClientMessage (steamId' string.Format ("/waypoint add \"{0}\" \"{0}\" Neutral {1} {2} {3}"' name' Math.Floor (pos.X)' Math.Floor (pos.Y)' Math.Floor (pos.Z)));  		}  	}  	WaypointItem item = new WaypointItem ();  	item.SteamId = (ulong)faction.FactionId;  	item.Name = name;  	item.Text = name;  	item.Position = pos;  	item.WaypointType = WaypointTypes.Neutral;  	item.Leader = faction.IsLeader (playerId);  	Waypoints.Instance.Add (item);  	Communication.SendFactionClientMessage (userId' string.Format ("/message Server {2} has added the waypoint: {0} at {1} by {2}"' item.Name' General.Vector3DToString (item.Position)' playerName));  } else {  	for (int r = 3; r < 6; r++) {  		double test = 0d;  		if (!double.TryParse (splits [r]' out test)) {  			Communication.SendPrivateInformation (userId' string.Format ("Invalid position information: {0} is invalid"' splits [r]));  			return true;  		}  	}  	string add = "";  	foreach (string split in splits) {  		if (add == "")  			add += split.ToLower ();  		else  			add += " " + split;  	}  	foreach (ulong steamId in PlayerManager.Instance.ConnectedPlayers) {  		if (Player.CheckPlayerSameFaction (userId' steamId)) {  			Communication.SendClientMessage (steamId' string.Format ("/waypoint add {0}"' add));  		}  	}  	string group = "";  	if (splits.Length == 7)  		group = splits [7];  	WaypointItem item = new WaypointItem ();  	item.SteamId = (ulong)faction.FactionId;  	item.Name = splits [0];  	item.Text = splits [1];  	WaypointTypes type = WaypointTypes.Neutral;  	Enum.TryParse<WaypointTypes> (splits [2]' true' out type);  	item.WaypointType = type;  	item.Position = new Vector3D (double.Parse (splits [3])' double.Parse (splits [4])' double.Parse (splits [5]));  	item.Group = group;  	item.Leader = faction.IsLeader (playerId);  	Waypoints.Instance.Add (item);  	Communication.SendFactionClientMessage (userId' string.Format ("/message Server {2} has added the waypoint: {0} at {1} by {2}"' item.Name' General.Vector3DToString (item.Position)' playerName));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointFactionAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionAdd.cs,HandleCommand,The following statement contains a magic number: if (splits.Length == 1) {  	IMyEntity playerEntity = Player.FindControlledEntity (playerId);  	if (playerEntity == null) {  		Communication.SendPrivateInformation (userId' string.Format ("Can't find your position"));  		return true;  	}  	Vector3D pos = playerEntity.GetPosition ();  	string name = splits [0];  	foreach (ulong steamId in PlayerManager.Instance.ConnectedPlayers) {  		if (Player.CheckPlayerSameFaction (userId' steamId)) {  			Communication.SendClientMessage (steamId' string.Format ("/waypoint add \"{0}\" \"{0}\" Neutral {1} {2} {3}"' name' Math.Floor (pos.X)' Math.Floor (pos.Y)' Math.Floor (pos.Z)));  		}  	}  	WaypointItem item = new WaypointItem ();  	item.SteamId = (ulong)faction.FactionId;  	item.Name = name;  	item.Text = name;  	item.Position = pos;  	item.WaypointType = WaypointTypes.Neutral;  	item.Leader = faction.IsLeader (playerId);  	Waypoints.Instance.Add (item);  	Communication.SendFactionClientMessage (userId' string.Format ("/message Server {2} has added the waypoint: {0} at {1} by {2}"' item.Name' General.Vector3DToString (item.Position)' playerName));  } else {  	for (int r = 3; r < 6; r++) {  		double test = 0d;  		if (!double.TryParse (splits [r]' out test)) {  			Communication.SendPrivateInformation (userId' string.Format ("Invalid position information: {0} is invalid"' splits [r]));  			return true;  		}  	}  	string add = "";  	foreach (string split in splits) {  		if (add == "")  			add += split.ToLower ();  		else  			add += " " + split;  	}  	foreach (ulong steamId in PlayerManager.Instance.ConnectedPlayers) {  		if (Player.CheckPlayerSameFaction (userId' steamId)) {  			Communication.SendClientMessage (steamId' string.Format ("/waypoint add {0}"' add));  		}  	}  	string group = "";  	if (splits.Length == 7)  		group = splits [7];  	WaypointItem item = new WaypointItem ();  	item.SteamId = (ulong)faction.FactionId;  	item.Name = splits [0];  	item.Text = splits [1];  	WaypointTypes type = WaypointTypes.Neutral;  	Enum.TryParse<WaypointTypes> (splits [2]' true' out type);  	item.WaypointType = type;  	item.Position = new Vector3D (double.Parse (splits [3])' double.Parse (splits [4])' double.Parse (splits [5]));  	item.Group = group;  	item.Leader = faction.IsLeader (playerId);  	Waypoints.Instance.Add (item);  	Communication.SendFactionClientMessage (userId' string.Format ("/message Server {2} has added the waypoint: {0} at {1} by {2}"' item.Name' General.Vector3DToString (item.Position)' playerName));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointFactionAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionAdd.cs,HandleCommand,The following statement contains a magic number: if (splits.Length == 1) {  	IMyEntity playerEntity = Player.FindControlledEntity (playerId);  	if (playerEntity == null) {  		Communication.SendPrivateInformation (userId' string.Format ("Can't find your position"));  		return true;  	}  	Vector3D pos = playerEntity.GetPosition ();  	string name = splits [0];  	foreach (ulong steamId in PlayerManager.Instance.ConnectedPlayers) {  		if (Player.CheckPlayerSameFaction (userId' steamId)) {  			Communication.SendClientMessage (steamId' string.Format ("/waypoint add \"{0}\" \"{0}\" Neutral {1} {2} {3}"' name' Math.Floor (pos.X)' Math.Floor (pos.Y)' Math.Floor (pos.Z)));  		}  	}  	WaypointItem item = new WaypointItem ();  	item.SteamId = (ulong)faction.FactionId;  	item.Name = name;  	item.Text = name;  	item.Position = pos;  	item.WaypointType = WaypointTypes.Neutral;  	item.Leader = faction.IsLeader (playerId);  	Waypoints.Instance.Add (item);  	Communication.SendFactionClientMessage (userId' string.Format ("/message Server {2} has added the waypoint: {0} at {1} by {2}"' item.Name' General.Vector3DToString (item.Position)' playerName));  } else {  	for (int r = 3; r < 6; r++) {  		double test = 0d;  		if (!double.TryParse (splits [r]' out test)) {  			Communication.SendPrivateInformation (userId' string.Format ("Invalid position information: {0} is invalid"' splits [r]));  			return true;  		}  	}  	string add = "";  	foreach (string split in splits) {  		if (add == "")  			add += split.ToLower ();  		else  			add += " " + split;  	}  	foreach (ulong steamId in PlayerManager.Instance.ConnectedPlayers) {  		if (Player.CheckPlayerSameFaction (userId' steamId)) {  			Communication.SendClientMessage (steamId' string.Format ("/waypoint add {0}"' add));  		}  	}  	string group = "";  	if (splits.Length == 7)  		group = splits [7];  	WaypointItem item = new WaypointItem ();  	item.SteamId = (ulong)faction.FactionId;  	item.Name = splits [0];  	item.Text = splits [1];  	WaypointTypes type = WaypointTypes.Neutral;  	Enum.TryParse<WaypointTypes> (splits [2]' true' out type);  	item.WaypointType = type;  	item.Position = new Vector3D (double.Parse (splits [3])' double.Parse (splits [4])' double.Parse (splits [5]));  	item.Group = group;  	item.Leader = faction.IsLeader (playerId);  	Waypoints.Instance.Add (item);  	Communication.SendFactionClientMessage (userId' string.Format ("/message Server {2} has added the waypoint: {0} at {1} by {2}"' item.Name' General.Vector3DToString (item.Position)' playerName));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointFactionAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionAdd.cs,HandleCommand,The following statement contains a magic number: if (splits.Length == 1) {  	IMyEntity playerEntity = Player.FindControlledEntity (playerId);  	if (playerEntity == null) {  		Communication.SendPrivateInformation (userId' string.Format ("Can't find your position"));  		return true;  	}  	Vector3D pos = playerEntity.GetPosition ();  	string name = splits [0];  	foreach (ulong steamId in PlayerManager.Instance.ConnectedPlayers) {  		if (Player.CheckPlayerSameFaction (userId' steamId)) {  			Communication.SendClientMessage (steamId' string.Format ("/waypoint add \"{0}\" \"{0}\" Neutral {1} {2} {3}"' name' Math.Floor (pos.X)' Math.Floor (pos.Y)' Math.Floor (pos.Z)));  		}  	}  	WaypointItem item = new WaypointItem ();  	item.SteamId = (ulong)faction.FactionId;  	item.Name = name;  	item.Text = name;  	item.Position = pos;  	item.WaypointType = WaypointTypes.Neutral;  	item.Leader = faction.IsLeader (playerId);  	Waypoints.Instance.Add (item);  	Communication.SendFactionClientMessage (userId' string.Format ("/message Server {2} has added the waypoint: {0} at {1} by {2}"' item.Name' General.Vector3DToString (item.Position)' playerName));  } else {  	for (int r = 3; r < 6; r++) {  		double test = 0d;  		if (!double.TryParse (splits [r]' out test)) {  			Communication.SendPrivateInformation (userId' string.Format ("Invalid position information: {0} is invalid"' splits [r]));  			return true;  		}  	}  	string add = "";  	foreach (string split in splits) {  		if (add == "")  			add += split.ToLower ();  		else  			add += " " + split;  	}  	foreach (ulong steamId in PlayerManager.Instance.ConnectedPlayers) {  		if (Player.CheckPlayerSameFaction (userId' steamId)) {  			Communication.SendClientMessage (steamId' string.Format ("/waypoint add {0}"' add));  		}  	}  	string group = "";  	if (splits.Length == 7)  		group = splits [7];  	WaypointItem item = new WaypointItem ();  	item.SteamId = (ulong)faction.FactionId;  	item.Name = splits [0];  	item.Text = splits [1];  	WaypointTypes type = WaypointTypes.Neutral;  	Enum.TryParse<WaypointTypes> (splits [2]' true' out type);  	item.WaypointType = type;  	item.Position = new Vector3D (double.Parse (splits [3])' double.Parse (splits [4])' double.Parse (splits [5]));  	item.Group = group;  	item.Leader = faction.IsLeader (playerId);  	Waypoints.Instance.Add (item);  	Communication.SendFactionClientMessage (userId' string.Format ("/message Server {2} has added the waypoint: {0} at {1} by {2}"' item.Name' General.Vector3DToString (item.Position)' playerName));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointFactionAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionAdd.cs,HandleCommand,The following statement contains a magic number: if (splits.Length == 1) {  	IMyEntity playerEntity = Player.FindControlledEntity (playerId);  	if (playerEntity == null) {  		Communication.SendPrivateInformation (userId' string.Format ("Can't find your position"));  		return true;  	}  	Vector3D pos = playerEntity.GetPosition ();  	string name = splits [0];  	foreach (ulong steamId in PlayerManager.Instance.ConnectedPlayers) {  		if (Player.CheckPlayerSameFaction (userId' steamId)) {  			Communication.SendClientMessage (steamId' string.Format ("/waypoint add \"{0}\" \"{0}\" Neutral {1} {2} {3}"' name' Math.Floor (pos.X)' Math.Floor (pos.Y)' Math.Floor (pos.Z)));  		}  	}  	WaypointItem item = new WaypointItem ();  	item.SteamId = (ulong)faction.FactionId;  	item.Name = name;  	item.Text = name;  	item.Position = pos;  	item.WaypointType = WaypointTypes.Neutral;  	item.Leader = faction.IsLeader (playerId);  	Waypoints.Instance.Add (item);  	Communication.SendFactionClientMessage (userId' string.Format ("/message Server {2} has added the waypoint: {0} at {1} by {2}"' item.Name' General.Vector3DToString (item.Position)' playerName));  } else {  	for (int r = 3; r < 6; r++) {  		double test = 0d;  		if (!double.TryParse (splits [r]' out test)) {  			Communication.SendPrivateInformation (userId' string.Format ("Invalid position information: {0} is invalid"' splits [r]));  			return true;  		}  	}  	string add = "";  	foreach (string split in splits) {  		if (add == "")  			add += split.ToLower ();  		else  			add += " " + split;  	}  	foreach (ulong steamId in PlayerManager.Instance.ConnectedPlayers) {  		if (Player.CheckPlayerSameFaction (userId' steamId)) {  			Communication.SendClientMessage (steamId' string.Format ("/waypoint add {0}"' add));  		}  	}  	string group = "";  	if (splits.Length == 7)  		group = splits [7];  	WaypointItem item = new WaypointItem ();  	item.SteamId = (ulong)faction.FactionId;  	item.Name = splits [0];  	item.Text = splits [1];  	WaypointTypes type = WaypointTypes.Neutral;  	Enum.TryParse<WaypointTypes> (splits [2]' true' out type);  	item.WaypointType = type;  	item.Position = new Vector3D (double.Parse (splits [3])' double.Parse (splits [4])' double.Parse (splits [5]));  	item.Group = group;  	item.Leader = faction.IsLeader (playerId);  	Waypoints.Instance.Add (item);  	Communication.SendFactionClientMessage (userId' string.Format ("/message Server {2} has added the waypoint: {0} at {1} by {2}"' item.Name' General.Vector3DToString (item.Position)' playerName));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointFactionAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionAdd.cs,HandleCommand,The following statement contains a magic number: if (splits.Length == 1) {  	IMyEntity playerEntity = Player.FindControlledEntity (playerId);  	if (playerEntity == null) {  		Communication.SendPrivateInformation (userId' string.Format ("Can't find your position"));  		return true;  	}  	Vector3D pos = playerEntity.GetPosition ();  	string name = splits [0];  	foreach (ulong steamId in PlayerManager.Instance.ConnectedPlayers) {  		if (Player.CheckPlayerSameFaction (userId' steamId)) {  			Communication.SendClientMessage (steamId' string.Format ("/waypoint add \"{0}\" \"{0}\" Neutral {1} {2} {3}"' name' Math.Floor (pos.X)' Math.Floor (pos.Y)' Math.Floor (pos.Z)));  		}  	}  	WaypointItem item = new WaypointItem ();  	item.SteamId = (ulong)faction.FactionId;  	item.Name = name;  	item.Text = name;  	item.Position = pos;  	item.WaypointType = WaypointTypes.Neutral;  	item.Leader = faction.IsLeader (playerId);  	Waypoints.Instance.Add (item);  	Communication.SendFactionClientMessage (userId' string.Format ("/message Server {2} has added the waypoint: {0} at {1} by {2}"' item.Name' General.Vector3DToString (item.Position)' playerName));  } else {  	for (int r = 3; r < 6; r++) {  		double test = 0d;  		if (!double.TryParse (splits [r]' out test)) {  			Communication.SendPrivateInformation (userId' string.Format ("Invalid position information: {0} is invalid"' splits [r]));  			return true;  		}  	}  	string add = "";  	foreach (string split in splits) {  		if (add == "")  			add += split.ToLower ();  		else  			add += " " + split;  	}  	foreach (ulong steamId in PlayerManager.Instance.ConnectedPlayers) {  		if (Player.CheckPlayerSameFaction (userId' steamId)) {  			Communication.SendClientMessage (steamId' string.Format ("/waypoint add {0}"' add));  		}  	}  	string group = "";  	if (splits.Length == 7)  		group = splits [7];  	WaypointItem item = new WaypointItem ();  	item.SteamId = (ulong)faction.FactionId;  	item.Name = splits [0];  	item.Text = splits [1];  	WaypointTypes type = WaypointTypes.Neutral;  	Enum.TryParse<WaypointTypes> (splits [2]' true' out type);  	item.WaypointType = type;  	item.Position = new Vector3D (double.Parse (splits [3])' double.Parse (splits [4])' double.Parse (splits [5]));  	item.Group = group;  	item.Leader = faction.IsLeader (playerId);  	Waypoints.Instance.Add (item);  	Communication.SendFactionClientMessage (userId' string.Format ("/message Server {2} has added the waypoint: {0} at {1} by {2}"' item.Name' General.Vector3DToString (item.Position)' playerName));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointFactionAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionAdd.cs,HandleCommand,The following statement contains a magic number: for (int r = 3; r < 6; r++) {  	double test = 0d;  	if (!double.TryParse (splits [r]' out test)) {  		Communication.SendPrivateInformation (userId' string.Format ("Invalid position information: {0} is invalid"' splits [r]));  		return true;  	}  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointFactionAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionAdd.cs,HandleCommand,The following statement contains a magic number: for (int r = 3; r < 6; r++) {  	double test = 0d;  	if (!double.TryParse (splits [r]' out test)) {  		Communication.SendPrivateInformation (userId' string.Format ("Invalid position information: {0} is invalid"' splits [r]));  		return true;  	}  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointFactionAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionAdd.cs,HandleCommand,The following statement contains a magic number: if (splits.Length == 7)  	group = splits [7];  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointFactionAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionAdd.cs,HandleCommand,The following statement contains a magic number: if (splits.Length == 7)  	group = splits [7];  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointFactionAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionAdd.cs,HandleCommand,The following statement contains a magic number: group = splits [7];  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointFactionAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionAdd.cs,HandleCommand,The following statement contains a magic number: Enum.TryParse<WaypointTypes> (splits [2]' true' out type);  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointFactionAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionAdd.cs,HandleCommand,The following statement contains a magic number: item.Position = new Vector3D (double.Parse (splits [3])' double.Parse (splits [4])' double.Parse (splits [5]));  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointFactionAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionAdd.cs,HandleCommand,The following statement contains a magic number: item.Position = new Vector3D (double.Parse (splits [3])' double.Parse (splits [4])' double.Parse (splits [5]));  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointFactionAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointFactionAdd.cs,HandleCommand,The following statement contains a magic number: item.Position = new Vector3D (double.Parse (splits [3])' double.Parse (splits [4])' double.Parse (splits [5]));  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointGroupAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointGroupAdd.cs,HandleCommand,The following statement contains a magic number: if (splits.Length != 2) {  	Communication.SendPrivateInformation (userId' GetHelp ());  	return true;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,HandleCommand,The following statement contains a magic number: if (splits.Length != 6 && splits.Length != 7 && splits.Length != 5 && splits.Length != 1) {  	Communication.SendPrivateInformation (userId' GetHelp ());  	return true;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,HandleCommand,The following statement contains a magic number: if (splits.Length != 6 && splits.Length != 7 && splits.Length != 5 && splits.Length != 1) {  	Communication.SendPrivateInformation (userId' GetHelp ());  	return true;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,HandleCommand,The following statement contains a magic number: if (splits.Length != 6 && splits.Length != 7 && splits.Length != 5 && splits.Length != 1) {  	Communication.SendPrivateInformation (userId' GetHelp ());  	return true;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,HandleCommand,The following statement contains a magic number: if (splits.Length == 1) {  	long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (userId);  	IMyEntity playerEntity = Player.FindControlledEntity (playerId);  	if (playerEntity == null) {  		Communication.SendPrivateInformation (userId' string.Format ("Can't find your position"));  		return true;  	}  	Vector3D pos = playerEntity.GetPosition ();  	string name = splits [0];  	Communication.SendClientMessage (userId' string.Format ("/waypoint add \"{0}\" \"{0}\" Neutral {1} {2} {3}"' name' Math.Floor (pos.X)' Math.Floor (pos.Y)' Math.Floor (pos.Z)));  	WaypointItem item = new WaypointItem ();  	item.SteamId = userId;  	item.Name = name;  	item.Text = name;  	item.Position = pos;  	item.WaypointType = WaypointTypes.Neutral;  	Waypoints.Instance.Add (item);  	Communication.SendPrivateInformation (userId' string.Format ("Waypoint added: {0} at {1}"' item.Name' General.Vector3DToString (item.Position)));  } else {  	int len = 5;  	if (splits.Length > 5)  		len = 6;  	for (int r = len - 3; r < len; r++) {  		double test = 0d;  		if (!double.TryParse (splits [r]' out test)) {  			Communication.SendPrivateInformation (userId' string.Format ("Invalid position information: {0} is invalid"' splits [r]));  			return true;  		}  	}  	string add = "";  	foreach (string split in splits) {  		if (add == "")  			add += split.ToLower ();  		else  			add += " " + split;  	}  	Communication.SendClientMessage (userId' string.Format ("/waypoint add {0}"' add));  	string group = "";  	if (splits.Length == 7)  		group = splits [7];  	WaypointItem item = new WaypointItem ();  	item.SteamId = userId;  	item.Name = splits [0];  	int diff = splits.Length > 5 ? 1 : 0;  	item.Text = splits [diff];  	WaypointTypes type = WaypointTypes.Neutral;  	Enum.TryParse<WaypointTypes> (splits [diff + 1]' true' out type);  	item.WaypointType = type;  	item.Position = new Vector3D (double.Parse (splits [diff + 2])' double.Parse (splits [diff + 3])' double.Parse (splits [diff + 4]));  	item.Group = group;  	Waypoints.Instance.Add (item);  	Communication.SendPrivateInformation (userId' string.Format ("Waypoint added: {0} at {1}"' item.Name' General.Vector3DToString (item.Position)));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,HandleCommand,The following statement contains a magic number: if (splits.Length == 1) {  	long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (userId);  	IMyEntity playerEntity = Player.FindControlledEntity (playerId);  	if (playerEntity == null) {  		Communication.SendPrivateInformation (userId' string.Format ("Can't find your position"));  		return true;  	}  	Vector3D pos = playerEntity.GetPosition ();  	string name = splits [0];  	Communication.SendClientMessage (userId' string.Format ("/waypoint add \"{0}\" \"{0}\" Neutral {1} {2} {3}"' name' Math.Floor (pos.X)' Math.Floor (pos.Y)' Math.Floor (pos.Z)));  	WaypointItem item = new WaypointItem ();  	item.SteamId = userId;  	item.Name = name;  	item.Text = name;  	item.Position = pos;  	item.WaypointType = WaypointTypes.Neutral;  	Waypoints.Instance.Add (item);  	Communication.SendPrivateInformation (userId' string.Format ("Waypoint added: {0} at {1}"' item.Name' General.Vector3DToString (item.Position)));  } else {  	int len = 5;  	if (splits.Length > 5)  		len = 6;  	for (int r = len - 3; r < len; r++) {  		double test = 0d;  		if (!double.TryParse (splits [r]' out test)) {  			Communication.SendPrivateInformation (userId' string.Format ("Invalid position information: {0} is invalid"' splits [r]));  			return true;  		}  	}  	string add = "";  	foreach (string split in splits) {  		if (add == "")  			add += split.ToLower ();  		else  			add += " " + split;  	}  	Communication.SendClientMessage (userId' string.Format ("/waypoint add {0}"' add));  	string group = "";  	if (splits.Length == 7)  		group = splits [7];  	WaypointItem item = new WaypointItem ();  	item.SteamId = userId;  	item.Name = splits [0];  	int diff = splits.Length > 5 ? 1 : 0;  	item.Text = splits [diff];  	WaypointTypes type = WaypointTypes.Neutral;  	Enum.TryParse<WaypointTypes> (splits [diff + 1]' true' out type);  	item.WaypointType = type;  	item.Position = new Vector3D (double.Parse (splits [diff + 2])' double.Parse (splits [diff + 3])' double.Parse (splits [diff + 4]));  	item.Group = group;  	Waypoints.Instance.Add (item);  	Communication.SendPrivateInformation (userId' string.Format ("Waypoint added: {0} at {1}"' item.Name' General.Vector3DToString (item.Position)));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,HandleCommand,The following statement contains a magic number: if (splits.Length == 1) {  	long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (userId);  	IMyEntity playerEntity = Player.FindControlledEntity (playerId);  	if (playerEntity == null) {  		Communication.SendPrivateInformation (userId' string.Format ("Can't find your position"));  		return true;  	}  	Vector3D pos = playerEntity.GetPosition ();  	string name = splits [0];  	Communication.SendClientMessage (userId' string.Format ("/waypoint add \"{0}\" \"{0}\" Neutral {1} {2} {3}"' name' Math.Floor (pos.X)' Math.Floor (pos.Y)' Math.Floor (pos.Z)));  	WaypointItem item = new WaypointItem ();  	item.SteamId = userId;  	item.Name = name;  	item.Text = name;  	item.Position = pos;  	item.WaypointType = WaypointTypes.Neutral;  	Waypoints.Instance.Add (item);  	Communication.SendPrivateInformation (userId' string.Format ("Waypoint added: {0} at {1}"' item.Name' General.Vector3DToString (item.Position)));  } else {  	int len = 5;  	if (splits.Length > 5)  		len = 6;  	for (int r = len - 3; r < len; r++) {  		double test = 0d;  		if (!double.TryParse (splits [r]' out test)) {  			Communication.SendPrivateInformation (userId' string.Format ("Invalid position information: {0} is invalid"' splits [r]));  			return true;  		}  	}  	string add = "";  	foreach (string split in splits) {  		if (add == "")  			add += split.ToLower ();  		else  			add += " " + split;  	}  	Communication.SendClientMessage (userId' string.Format ("/waypoint add {0}"' add));  	string group = "";  	if (splits.Length == 7)  		group = splits [7];  	WaypointItem item = new WaypointItem ();  	item.SteamId = userId;  	item.Name = splits [0];  	int diff = splits.Length > 5 ? 1 : 0;  	item.Text = splits [diff];  	WaypointTypes type = WaypointTypes.Neutral;  	Enum.TryParse<WaypointTypes> (splits [diff + 1]' true' out type);  	item.WaypointType = type;  	item.Position = new Vector3D (double.Parse (splits [diff + 2])' double.Parse (splits [diff + 3])' double.Parse (splits [diff + 4]));  	item.Group = group;  	Waypoints.Instance.Add (item);  	Communication.SendPrivateInformation (userId' string.Format ("Waypoint added: {0} at {1}"' item.Name' General.Vector3DToString (item.Position)));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,HandleCommand,The following statement contains a magic number: if (splits.Length == 1) {  	long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (userId);  	IMyEntity playerEntity = Player.FindControlledEntity (playerId);  	if (playerEntity == null) {  		Communication.SendPrivateInformation (userId' string.Format ("Can't find your position"));  		return true;  	}  	Vector3D pos = playerEntity.GetPosition ();  	string name = splits [0];  	Communication.SendClientMessage (userId' string.Format ("/waypoint add \"{0}\" \"{0}\" Neutral {1} {2} {3}"' name' Math.Floor (pos.X)' Math.Floor (pos.Y)' Math.Floor (pos.Z)));  	WaypointItem item = new WaypointItem ();  	item.SteamId = userId;  	item.Name = name;  	item.Text = name;  	item.Position = pos;  	item.WaypointType = WaypointTypes.Neutral;  	Waypoints.Instance.Add (item);  	Communication.SendPrivateInformation (userId' string.Format ("Waypoint added: {0} at {1}"' item.Name' General.Vector3DToString (item.Position)));  } else {  	int len = 5;  	if (splits.Length > 5)  		len = 6;  	for (int r = len - 3; r < len; r++) {  		double test = 0d;  		if (!double.TryParse (splits [r]' out test)) {  			Communication.SendPrivateInformation (userId' string.Format ("Invalid position information: {0} is invalid"' splits [r]));  			return true;  		}  	}  	string add = "";  	foreach (string split in splits) {  		if (add == "")  			add += split.ToLower ();  		else  			add += " " + split;  	}  	Communication.SendClientMessage (userId' string.Format ("/waypoint add {0}"' add));  	string group = "";  	if (splits.Length == 7)  		group = splits [7];  	WaypointItem item = new WaypointItem ();  	item.SteamId = userId;  	item.Name = splits [0];  	int diff = splits.Length > 5 ? 1 : 0;  	item.Text = splits [diff];  	WaypointTypes type = WaypointTypes.Neutral;  	Enum.TryParse<WaypointTypes> (splits [diff + 1]' true' out type);  	item.WaypointType = type;  	item.Position = new Vector3D (double.Parse (splits [diff + 2])' double.Parse (splits [diff + 3])' double.Parse (splits [diff + 4]));  	item.Group = group;  	Waypoints.Instance.Add (item);  	Communication.SendPrivateInformation (userId' string.Format ("Waypoint added: {0} at {1}"' item.Name' General.Vector3DToString (item.Position)));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,HandleCommand,The following statement contains a magic number: if (splits.Length == 1) {  	long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (userId);  	IMyEntity playerEntity = Player.FindControlledEntity (playerId);  	if (playerEntity == null) {  		Communication.SendPrivateInformation (userId' string.Format ("Can't find your position"));  		return true;  	}  	Vector3D pos = playerEntity.GetPosition ();  	string name = splits [0];  	Communication.SendClientMessage (userId' string.Format ("/waypoint add \"{0}\" \"{0}\" Neutral {1} {2} {3}"' name' Math.Floor (pos.X)' Math.Floor (pos.Y)' Math.Floor (pos.Z)));  	WaypointItem item = new WaypointItem ();  	item.SteamId = userId;  	item.Name = name;  	item.Text = name;  	item.Position = pos;  	item.WaypointType = WaypointTypes.Neutral;  	Waypoints.Instance.Add (item);  	Communication.SendPrivateInformation (userId' string.Format ("Waypoint added: {0} at {1}"' item.Name' General.Vector3DToString (item.Position)));  } else {  	int len = 5;  	if (splits.Length > 5)  		len = 6;  	for (int r = len - 3; r < len; r++) {  		double test = 0d;  		if (!double.TryParse (splits [r]' out test)) {  			Communication.SendPrivateInformation (userId' string.Format ("Invalid position information: {0} is invalid"' splits [r]));  			return true;  		}  	}  	string add = "";  	foreach (string split in splits) {  		if (add == "")  			add += split.ToLower ();  		else  			add += " " + split;  	}  	Communication.SendClientMessage (userId' string.Format ("/waypoint add {0}"' add));  	string group = "";  	if (splits.Length == 7)  		group = splits [7];  	WaypointItem item = new WaypointItem ();  	item.SteamId = userId;  	item.Name = splits [0];  	int diff = splits.Length > 5 ? 1 : 0;  	item.Text = splits [diff];  	WaypointTypes type = WaypointTypes.Neutral;  	Enum.TryParse<WaypointTypes> (splits [diff + 1]' true' out type);  	item.WaypointType = type;  	item.Position = new Vector3D (double.Parse (splits [diff + 2])' double.Parse (splits [diff + 3])' double.Parse (splits [diff + 4]));  	item.Group = group;  	Waypoints.Instance.Add (item);  	Communication.SendPrivateInformation (userId' string.Format ("Waypoint added: {0} at {1}"' item.Name' General.Vector3DToString (item.Position)));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,HandleCommand,The following statement contains a magic number: if (splits.Length == 1) {  	long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (userId);  	IMyEntity playerEntity = Player.FindControlledEntity (playerId);  	if (playerEntity == null) {  		Communication.SendPrivateInformation (userId' string.Format ("Can't find your position"));  		return true;  	}  	Vector3D pos = playerEntity.GetPosition ();  	string name = splits [0];  	Communication.SendClientMessage (userId' string.Format ("/waypoint add \"{0}\" \"{0}\" Neutral {1} {2} {3}"' name' Math.Floor (pos.X)' Math.Floor (pos.Y)' Math.Floor (pos.Z)));  	WaypointItem item = new WaypointItem ();  	item.SteamId = userId;  	item.Name = name;  	item.Text = name;  	item.Position = pos;  	item.WaypointType = WaypointTypes.Neutral;  	Waypoints.Instance.Add (item);  	Communication.SendPrivateInformation (userId' string.Format ("Waypoint added: {0} at {1}"' item.Name' General.Vector3DToString (item.Position)));  } else {  	int len = 5;  	if (splits.Length > 5)  		len = 6;  	for (int r = len - 3; r < len; r++) {  		double test = 0d;  		if (!double.TryParse (splits [r]' out test)) {  			Communication.SendPrivateInformation (userId' string.Format ("Invalid position information: {0} is invalid"' splits [r]));  			return true;  		}  	}  	string add = "";  	foreach (string split in splits) {  		if (add == "")  			add += split.ToLower ();  		else  			add += " " + split;  	}  	Communication.SendClientMessage (userId' string.Format ("/waypoint add {0}"' add));  	string group = "";  	if (splits.Length == 7)  		group = splits [7];  	WaypointItem item = new WaypointItem ();  	item.SteamId = userId;  	item.Name = splits [0];  	int diff = splits.Length > 5 ? 1 : 0;  	item.Text = splits [diff];  	WaypointTypes type = WaypointTypes.Neutral;  	Enum.TryParse<WaypointTypes> (splits [diff + 1]' true' out type);  	item.WaypointType = type;  	item.Position = new Vector3D (double.Parse (splits [diff + 2])' double.Parse (splits [diff + 3])' double.Parse (splits [diff + 4]));  	item.Group = group;  	Waypoints.Instance.Add (item);  	Communication.SendPrivateInformation (userId' string.Format ("Waypoint added: {0} at {1}"' item.Name' General.Vector3DToString (item.Position)));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,HandleCommand,The following statement contains a magic number: if (splits.Length == 1) {  	long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (userId);  	IMyEntity playerEntity = Player.FindControlledEntity (playerId);  	if (playerEntity == null) {  		Communication.SendPrivateInformation (userId' string.Format ("Can't find your position"));  		return true;  	}  	Vector3D pos = playerEntity.GetPosition ();  	string name = splits [0];  	Communication.SendClientMessage (userId' string.Format ("/waypoint add \"{0}\" \"{0}\" Neutral {1} {2} {3}"' name' Math.Floor (pos.X)' Math.Floor (pos.Y)' Math.Floor (pos.Z)));  	WaypointItem item = new WaypointItem ();  	item.SteamId = userId;  	item.Name = name;  	item.Text = name;  	item.Position = pos;  	item.WaypointType = WaypointTypes.Neutral;  	Waypoints.Instance.Add (item);  	Communication.SendPrivateInformation (userId' string.Format ("Waypoint added: {0} at {1}"' item.Name' General.Vector3DToString (item.Position)));  } else {  	int len = 5;  	if (splits.Length > 5)  		len = 6;  	for (int r = len - 3; r < len; r++) {  		double test = 0d;  		if (!double.TryParse (splits [r]' out test)) {  			Communication.SendPrivateInformation (userId' string.Format ("Invalid position information: {0} is invalid"' splits [r]));  			return true;  		}  	}  	string add = "";  	foreach (string split in splits) {  		if (add == "")  			add += split.ToLower ();  		else  			add += " " + split;  	}  	Communication.SendClientMessage (userId' string.Format ("/waypoint add {0}"' add));  	string group = "";  	if (splits.Length == 7)  		group = splits [7];  	WaypointItem item = new WaypointItem ();  	item.SteamId = userId;  	item.Name = splits [0];  	int diff = splits.Length > 5 ? 1 : 0;  	item.Text = splits [diff];  	WaypointTypes type = WaypointTypes.Neutral;  	Enum.TryParse<WaypointTypes> (splits [diff + 1]' true' out type);  	item.WaypointType = type;  	item.Position = new Vector3D (double.Parse (splits [diff + 2])' double.Parse (splits [diff + 3])' double.Parse (splits [diff + 4]));  	item.Group = group;  	Waypoints.Instance.Add (item);  	Communication.SendPrivateInformation (userId' string.Format ("Waypoint added: {0} at {1}"' item.Name' General.Vector3DToString (item.Position)));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,HandleCommand,The following statement contains a magic number: if (splits.Length == 1) {  	long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (userId);  	IMyEntity playerEntity = Player.FindControlledEntity (playerId);  	if (playerEntity == null) {  		Communication.SendPrivateInformation (userId' string.Format ("Can't find your position"));  		return true;  	}  	Vector3D pos = playerEntity.GetPosition ();  	string name = splits [0];  	Communication.SendClientMessage (userId' string.Format ("/waypoint add \"{0}\" \"{0}\" Neutral {1} {2} {3}"' name' Math.Floor (pos.X)' Math.Floor (pos.Y)' Math.Floor (pos.Z)));  	WaypointItem item = new WaypointItem ();  	item.SteamId = userId;  	item.Name = name;  	item.Text = name;  	item.Position = pos;  	item.WaypointType = WaypointTypes.Neutral;  	Waypoints.Instance.Add (item);  	Communication.SendPrivateInformation (userId' string.Format ("Waypoint added: {0} at {1}"' item.Name' General.Vector3DToString (item.Position)));  } else {  	int len = 5;  	if (splits.Length > 5)  		len = 6;  	for (int r = len - 3; r < len; r++) {  		double test = 0d;  		if (!double.TryParse (splits [r]' out test)) {  			Communication.SendPrivateInformation (userId' string.Format ("Invalid position information: {0} is invalid"' splits [r]));  			return true;  		}  	}  	string add = "";  	foreach (string split in splits) {  		if (add == "")  			add += split.ToLower ();  		else  			add += " " + split;  	}  	Communication.SendClientMessage (userId' string.Format ("/waypoint add {0}"' add));  	string group = "";  	if (splits.Length == 7)  		group = splits [7];  	WaypointItem item = new WaypointItem ();  	item.SteamId = userId;  	item.Name = splits [0];  	int diff = splits.Length > 5 ? 1 : 0;  	item.Text = splits [diff];  	WaypointTypes type = WaypointTypes.Neutral;  	Enum.TryParse<WaypointTypes> (splits [diff + 1]' true' out type);  	item.WaypointType = type;  	item.Position = new Vector3D (double.Parse (splits [diff + 2])' double.Parse (splits [diff + 3])' double.Parse (splits [diff + 4]));  	item.Group = group;  	Waypoints.Instance.Add (item);  	Communication.SendPrivateInformation (userId' string.Format ("Waypoint added: {0} at {1}"' item.Name' General.Vector3DToString (item.Position)));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,HandleCommand,The following statement contains a magic number: if (splits.Length == 1) {  	long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (userId);  	IMyEntity playerEntity = Player.FindControlledEntity (playerId);  	if (playerEntity == null) {  		Communication.SendPrivateInformation (userId' string.Format ("Can't find your position"));  		return true;  	}  	Vector3D pos = playerEntity.GetPosition ();  	string name = splits [0];  	Communication.SendClientMessage (userId' string.Format ("/waypoint add \"{0}\" \"{0}\" Neutral {1} {2} {3}"' name' Math.Floor (pos.X)' Math.Floor (pos.Y)' Math.Floor (pos.Z)));  	WaypointItem item = new WaypointItem ();  	item.SteamId = userId;  	item.Name = name;  	item.Text = name;  	item.Position = pos;  	item.WaypointType = WaypointTypes.Neutral;  	Waypoints.Instance.Add (item);  	Communication.SendPrivateInformation (userId' string.Format ("Waypoint added: {0} at {1}"' item.Name' General.Vector3DToString (item.Position)));  } else {  	int len = 5;  	if (splits.Length > 5)  		len = 6;  	for (int r = len - 3; r < len; r++) {  		double test = 0d;  		if (!double.TryParse (splits [r]' out test)) {  			Communication.SendPrivateInformation (userId' string.Format ("Invalid position information: {0} is invalid"' splits [r]));  			return true;  		}  	}  	string add = "";  	foreach (string split in splits) {  		if (add == "")  			add += split.ToLower ();  		else  			add += " " + split;  	}  	Communication.SendClientMessage (userId' string.Format ("/waypoint add {0}"' add));  	string group = "";  	if (splits.Length == 7)  		group = splits [7];  	WaypointItem item = new WaypointItem ();  	item.SteamId = userId;  	item.Name = splits [0];  	int diff = splits.Length > 5 ? 1 : 0;  	item.Text = splits [diff];  	WaypointTypes type = WaypointTypes.Neutral;  	Enum.TryParse<WaypointTypes> (splits [diff + 1]' true' out type);  	item.WaypointType = type;  	item.Position = new Vector3D (double.Parse (splits [diff + 2])' double.Parse (splits [diff + 3])' double.Parse (splits [diff + 4]));  	item.Group = group;  	Waypoints.Instance.Add (item);  	Communication.SendPrivateInformation (userId' string.Format ("Waypoint added: {0} at {1}"' item.Name' General.Vector3DToString (item.Position)));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,HandleCommand,The following statement contains a magic number: if (splits.Length == 1) {  	long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (userId);  	IMyEntity playerEntity = Player.FindControlledEntity (playerId);  	if (playerEntity == null) {  		Communication.SendPrivateInformation (userId' string.Format ("Can't find your position"));  		return true;  	}  	Vector3D pos = playerEntity.GetPosition ();  	string name = splits [0];  	Communication.SendClientMessage (userId' string.Format ("/waypoint add \"{0}\" \"{0}\" Neutral {1} {2} {3}"' name' Math.Floor (pos.X)' Math.Floor (pos.Y)' Math.Floor (pos.Z)));  	WaypointItem item = new WaypointItem ();  	item.SteamId = userId;  	item.Name = name;  	item.Text = name;  	item.Position = pos;  	item.WaypointType = WaypointTypes.Neutral;  	Waypoints.Instance.Add (item);  	Communication.SendPrivateInformation (userId' string.Format ("Waypoint added: {0} at {1}"' item.Name' General.Vector3DToString (item.Position)));  } else {  	int len = 5;  	if (splits.Length > 5)  		len = 6;  	for (int r = len - 3; r < len; r++) {  		double test = 0d;  		if (!double.TryParse (splits [r]' out test)) {  			Communication.SendPrivateInformation (userId' string.Format ("Invalid position information: {0} is invalid"' splits [r]));  			return true;  		}  	}  	string add = "";  	foreach (string split in splits) {  		if (add == "")  			add += split.ToLower ();  		else  			add += " " + split;  	}  	Communication.SendClientMessage (userId' string.Format ("/waypoint add {0}"' add));  	string group = "";  	if (splits.Length == 7)  		group = splits [7];  	WaypointItem item = new WaypointItem ();  	item.SteamId = userId;  	item.Name = splits [0];  	int diff = splits.Length > 5 ? 1 : 0;  	item.Text = splits [diff];  	WaypointTypes type = WaypointTypes.Neutral;  	Enum.TryParse<WaypointTypes> (splits [diff + 1]' true' out type);  	item.WaypointType = type;  	item.Position = new Vector3D (double.Parse (splits [diff + 2])' double.Parse (splits [diff + 3])' double.Parse (splits [diff + 4]));  	item.Group = group;  	Waypoints.Instance.Add (item);  	Communication.SendPrivateInformation (userId' string.Format ("Waypoint added: {0} at {1}"' item.Name' General.Vector3DToString (item.Position)));  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,HandleCommand,The following statement contains a magic number: if (splits.Length > 5)  	len = 6;  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,HandleCommand,The following statement contains a magic number: if (splits.Length > 5)  	len = 6;  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,HandleCommand,The following statement contains a magic number: len = 6;  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,HandleCommand,The following statement contains a magic number: for (int r = len - 3; r < len; r++) {  	double test = 0d;  	if (!double.TryParse (splits [r]' out test)) {  		Communication.SendPrivateInformation (userId' string.Format ("Invalid position information: {0} is invalid"' splits [r]));  		return true;  	}  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,HandleCommand,The following statement contains a magic number: if (splits.Length == 7)  	group = splits [7];  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,HandleCommand,The following statement contains a magic number: if (splits.Length == 7)  	group = splits [7];  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,HandleCommand,The following statement contains a magic number: group = splits [7];  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,HandleCommand,The following statement contains a magic number: item.Position = new Vector3D (double.Parse (splits [diff + 2])' double.Parse (splits [diff + 3])' double.Parse (splits [diff + 4]));  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,HandleCommand,The following statement contains a magic number: item.Position = new Vector3D (double.Parse (splits [diff + 2])' double.Parse (splits [diff + 3])' double.Parse (splits [diff + 4]));  
Magic Number,EssentialsPlugin.ChatHandlers,HandleWaypointAdd,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Waypoints\HandleWaypointAdd.cs,HandleCommand,The following statement contains a magic number: item.Position = new Vector3D (double.Parse (splits [diff + 2])' double.Parse (splits [diff + 3])' double.Parse (splits [diff + 4]));  
Magic Number,EssentialsPlugin.ChatHandlers,HandleMsg,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\HandleMsg.cs,HandleCommand,The following statement contains a magic number: if (words.Count () < 2) {  	Communication.SendClientMessage (userId' "/message Server " + GetHelp ());  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleInfo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\HandleInfo.cs,HandleCommand,The following statement contains a magic number: if (PluginSettings.Instance.InformationEnabled) {  	if (words.Count () < 1) {  		ShowTopicList (userId);  	} else {  		bool found = false;  		foreach (InformationItem item in PluginSettings.Instance.InformationItems) {  			if (item.SubCommand == null || item.SubCommand == "")  				continue;  			if (item.SubCommand.ToLower () == words [0].ToLower () && item.Enabled) {  				string userName = PlayerMap.Instance.GetPlayerNameFromSteamId (userId);  				string subText = item.SubText.Replace ("%name%"' userName).Split (new string[] {  					"\n"  				}' 2' StringSplitOptions.None).First ();  				Communication.SendPrivateInformation (userId' subText);  				found = true;  				break;  			}  		}  		if (!found) {  			Communication.SendPrivateInformation (userId' "Info Error: Topic not found.");  			ShowTopicList (userId);  		}  	}  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleInfo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\HandleInfo.cs,HandleCommand,The following statement contains a magic number: if (words.Count () < 1) {  	ShowTopicList (userId);  } else {  	bool found = false;  	foreach (InformationItem item in PluginSettings.Instance.InformationItems) {  		if (item.SubCommand == null || item.SubCommand == "")  			continue;  		if (item.SubCommand.ToLower () == words [0].ToLower () && item.Enabled) {  			string userName = PlayerMap.Instance.GetPlayerNameFromSteamId (userId);  			string subText = item.SubText.Replace ("%name%"' userName).Split (new string[] {  				"\n"  			}' 2' StringSplitOptions.None).First ();  			Communication.SendPrivateInformation (userId' subText);  			found = true;  			break;  		}  	}  	if (!found) {  		Communication.SendPrivateInformation (userId' "Info Error: Topic not found.");  		ShowTopicList (userId);  	}  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleInfo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\HandleInfo.cs,HandleCommand,The following statement contains a magic number: foreach (InformationItem item in PluginSettings.Instance.InformationItems) {  	if (item.SubCommand == null || item.SubCommand == "")  		continue;  	if (item.SubCommand.ToLower () == words [0].ToLower () && item.Enabled) {  		string userName = PlayerMap.Instance.GetPlayerNameFromSteamId (userId);  		string subText = item.SubText.Replace ("%name%"' userName).Split (new string[] {  			"\n"  		}' 2' StringSplitOptions.None).First ();  		Communication.SendPrivateInformation (userId' subText);  		found = true;  		break;  	}  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleInfo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\HandleInfo.cs,HandleCommand,The following statement contains a magic number: if (item.SubCommand.ToLower () == words [0].ToLower () && item.Enabled) {  	string userName = PlayerMap.Instance.GetPlayerNameFromSteamId (userId);  	string subText = item.SubText.Replace ("%name%"' userName).Split (new string[] {  		"\n"  	}' 2' StringSplitOptions.None).First ();  	Communication.SendPrivateInformation (userId' subText);  	found = true;  	break;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleUtilityGridsList,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Utility\HandleUtilityGridsList.cs,HandleCommand,The following statement contains a magic number: for (int r = ((page - 1) * 6); r < resultLines.Length && r < ((page) * 6); r++) {  	string line = resultLines [r];  	if (output != "")  		output += "\r\n";  	output += line;  }  
Magic Number,EssentialsPlugin.ChatHandlers,HandleUtilityGridsList,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ChatHandlers\Utility\HandleUtilityGridsList.cs,HandleCommand,The following statement contains a magic number: for (int r = ((page - 1) * 6); r < resultLines.Length && r < ((page) * 6); r++) {  	string line = resultLines [r];  	if (output != "")  		output += "\r\n";  	output += line;  }  
Magic Number,EssentialsPlugin,ControlForm,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ControlForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size (588' 460);  
Magic Number,EssentialsPlugin,ControlForm,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ControlForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size (588' 460);  
Magic Number,EssentialsPlugin,ControlForm,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ControlForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size (588' 460);  
Magic Number,EssentialsPlugin,ControlForm,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ControlForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size (588' 460);  
Magic Number,EssentialsPlugin,ControlForm,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ControlForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.SplitterDistance = 196;  
Magic Number,EssentialsPlugin,ControlForm,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ControlForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer2.Size = new System.Drawing.Size (196' 460);  
Magic Number,EssentialsPlugin,ControlForm,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ControlForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer2.Size = new System.Drawing.Size (196' 460);  
Magic Number,EssentialsPlugin,ControlForm,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ControlForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer2.SplitterDistance = 236;  
Magic Number,EssentialsPlugin,ControlForm,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ControlForm.cs,InitializeComponent,The following statement contains a magic number: this.listView1.Size = new System.Drawing.Size (196' 236);  
Magic Number,EssentialsPlugin,ControlForm,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ControlForm.cs,InitializeComponent,The following statement contains a magic number: this.listView1.Size = new System.Drawing.Size (196' 236);  
Magic Number,EssentialsPlugin,ControlForm,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ControlForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (588' 460);  
Magic Number,EssentialsPlugin,ControlForm,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ControlForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (588' 460);  
Magic Number,EssentialsPlugin,Essentials,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Core.cs,PluginProcessing,The following statement contains a magic number: try {  	foreach (ProcessHandlerBase handler in m_processHandlers) {  		Thread thread = new Thread (() => {  			while (true) {  				if (handler.CanProcess ()) {  					try {  						handler.Handle ();  					} catch (Exception ex) {  						Logging.WriteLineAndConsole (String.Format ("Handler Problems: {0} - {1}"' handler.GetUpdateResolution ()' ex.ToString ()));  					}  					// Let's make sure LastUpdate is set to now otherwise we may start processing too quickly  					handler.LastUpdate = DateTime.Now;  				}  				Thread.Sleep (100);  			}  		});  		m_processThreads.Add (thread);  		thread.Start ();  	}  	foreach (Thread thread in m_processThreads)  		thread.Join ();  	/* 				while (true) 				{ 					if (DateTime.Now - m_lastProcessUpdate > TimeSpan.FromMilliseconds(100)) 					{ 						Parallel.ForEach(m_processHandlers' handler =>  						{ 							if (handler.CanProcess()) 							{ 								try 								{ 									handler.Handle(); 								} 								catch (Exception ex) 								{ 									Logging.WriteLineAndConsole(String.Format("Handler Problems: {0} - {1}"' handler.GetUpdateResolution()' ex.ToString())); 								}  								// Let's make sure LastUpdate is set to now otherwise we may start processing too quickly 								handler.LastUpdate = DateTime.Now; 							} 						});  						//foreach (ProcessHandlerBase handler in m_processHandlers) 						//{ 						//} 						m_lastProcessUpdate = DateTime.Now; 					} 					Thread.Sleep(25); 				} 				*/} catch (Exception ex) {  	Logging.WriteLineAndConsole (string.Format ("PluginProcessing(): {0}"' ex.ToString ()));  } finally {  	MyAPIGateway.Entities.OnEntityAdd -= OnEntityAdd;  	MyAPIGateway.Entities.OnEntityRemove -= OnEntityRemove;  }  
Magic Number,EssentialsPlugin,Essentials,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Core.cs,PluginProcessing,The following statement contains a magic number: foreach (ProcessHandlerBase handler in m_processHandlers) {  	Thread thread = new Thread (() => {  		while (true) {  			if (handler.CanProcess ()) {  				try {  					handler.Handle ();  				} catch (Exception ex) {  					Logging.WriteLineAndConsole (String.Format ("Handler Problems: {0} - {1}"' handler.GetUpdateResolution ()' ex.ToString ()));  				}  				// Let's make sure LastUpdate is set to now otherwise we may start processing too quickly  				handler.LastUpdate = DateTime.Now;  			}  			Thread.Sleep (100);  		}  	});  	m_processThreads.Add (thread);  	thread.Start ();  }  
Magic Number,EssentialsPlugin,Essentials,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Core.cs,PluginProcessing,The following statement contains a magic number: while (true) {  	if (handler.CanProcess ()) {  		try {  			handler.Handle ();  		} catch (Exception ex) {  			Logging.WriteLineAndConsole (String.Format ("Handler Problems: {0} - {1}"' handler.GetUpdateResolution ()' ex.ToString ()));  		}  		// Let's make sure LastUpdate is set to now otherwise we may start processing too quickly  		handler.LastUpdate = DateTime.Now;  	}  	Thread.Sleep (100);  }  
Magic Number,EssentialsPlugin,Essentials,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Core.cs,PluginProcessing,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,EssentialsPlugin,PluginSettings,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Settings\PluginSettings.cs,PluginSettings,The following statement contains a magic number: m_newUserTransportDistance = 500;  
Magic Number,EssentialsPlugin,PluginSettings,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Settings\PluginSettings.cs,PluginSettings,The following statement contains a magic number: m_dynamicConcealDistance = 8000;  
Magic Number,EssentialsPlugin,PluginSettings,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Settings\PluginSettings.cs,PluginSettings,The following statement contains a magic number: m_dynamicTurretTargetDistance = 2000;  
Magic Number,EssentialsPlugin,PluginSettings,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Settings\PluginSettings.cs,GetOrSetSettings,The following statement contains a magic number: try {  	string[] words = line.Split (new char[] {  		' '  	});  	SettingsOperators so = SettingsOperators.List;  	string newValue = "";  	string name = "";  	if (words.Length > 0)  		name = words [0];  	if (words.Length == 2) {  		if (words [1].ToLower () == "add")  			so = SettingsOperators.Add;  		else  			so = SettingsOperators.Remove;  	} else if (words.Length > 2) {  		if (words [1].ToLower () == "set") {  			so = SettingsOperators.Set;  			newValue = string.Join (" "' words.Skip (2));  		} else if (words [1].ToLower () == "remove") {  			so = SettingsOperators.Remove;  			newValue = string.Join (" "' words.Skip (2));  		}  	} else {  		result += string.Format ("Getting Value(s) For Setting: {0}\r\n"' name == "" ? "root" : name);  	}  	result += ReflectObject (m_instance' name' null' so' newValue);  } catch (Exception ex) {  	Logging.WriteLineAndConsole (string.Format ("GetSettings() Error: {0}"' ex.ToString ()));  }  
Magic Number,EssentialsPlugin,PluginSettings,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Settings\PluginSettings.cs,GetOrSetSettings,The following statement contains a magic number: try {  	string[] words = line.Split (new char[] {  		' '  	});  	SettingsOperators so = SettingsOperators.List;  	string newValue = "";  	string name = "";  	if (words.Length > 0)  		name = words [0];  	if (words.Length == 2) {  		if (words [1].ToLower () == "add")  			so = SettingsOperators.Add;  		else  			so = SettingsOperators.Remove;  	} else if (words.Length > 2) {  		if (words [1].ToLower () == "set") {  			so = SettingsOperators.Set;  			newValue = string.Join (" "' words.Skip (2));  		} else if (words [1].ToLower () == "remove") {  			so = SettingsOperators.Remove;  			newValue = string.Join (" "' words.Skip (2));  		}  	} else {  		result += string.Format ("Getting Value(s) For Setting: {0}\r\n"' name == "" ? "root" : name);  	}  	result += ReflectObject (m_instance' name' null' so' newValue);  } catch (Exception ex) {  	Logging.WriteLineAndConsole (string.Format ("GetSettings() Error: {0}"' ex.ToString ()));  }  
Magic Number,EssentialsPlugin,PluginSettings,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Settings\PluginSettings.cs,GetOrSetSettings,The following statement contains a magic number: try {  	string[] words = line.Split (new char[] {  		' '  	});  	SettingsOperators so = SettingsOperators.List;  	string newValue = "";  	string name = "";  	if (words.Length > 0)  		name = words [0];  	if (words.Length == 2) {  		if (words [1].ToLower () == "add")  			so = SettingsOperators.Add;  		else  			so = SettingsOperators.Remove;  	} else if (words.Length > 2) {  		if (words [1].ToLower () == "set") {  			so = SettingsOperators.Set;  			newValue = string.Join (" "' words.Skip (2));  		} else if (words [1].ToLower () == "remove") {  			so = SettingsOperators.Remove;  			newValue = string.Join (" "' words.Skip (2));  		}  	} else {  		result += string.Format ("Getting Value(s) For Setting: {0}\r\n"' name == "" ? "root" : name);  	}  	result += ReflectObject (m_instance' name' null' so' newValue);  } catch (Exception ex) {  	Logging.WriteLineAndConsole (string.Format ("GetSettings() Error: {0}"' ex.ToString ()));  }  
Magic Number,EssentialsPlugin,PluginSettings,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Settings\PluginSettings.cs,GetOrSetSettings,The following statement contains a magic number: try {  	string[] words = line.Split (new char[] {  		' '  	});  	SettingsOperators so = SettingsOperators.List;  	string newValue = "";  	string name = "";  	if (words.Length > 0)  		name = words [0];  	if (words.Length == 2) {  		if (words [1].ToLower () == "add")  			so = SettingsOperators.Add;  		else  			so = SettingsOperators.Remove;  	} else if (words.Length > 2) {  		if (words [1].ToLower () == "set") {  			so = SettingsOperators.Set;  			newValue = string.Join (" "' words.Skip (2));  		} else if (words [1].ToLower () == "remove") {  			so = SettingsOperators.Remove;  			newValue = string.Join (" "' words.Skip (2));  		}  	} else {  		result += string.Format ("Getting Value(s) For Setting: {0}\r\n"' name == "" ? "root" : name);  	}  	result += ReflectObject (m_instance' name' null' so' newValue);  } catch (Exception ex) {  	Logging.WriteLineAndConsole (string.Format ("GetSettings() Error: {0}"' ex.ToString ()));  }  
Magic Number,EssentialsPlugin,PluginSettings,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Settings\PluginSettings.cs,GetOrSetSettings,The following statement contains a magic number: if (words.Length == 2) {  	if (words [1].ToLower () == "add")  		so = SettingsOperators.Add;  	else  		so = SettingsOperators.Remove;  } else if (words.Length > 2) {  	if (words [1].ToLower () == "set") {  		so = SettingsOperators.Set;  		newValue = string.Join (" "' words.Skip (2));  	} else if (words [1].ToLower () == "remove") {  		so = SettingsOperators.Remove;  		newValue = string.Join (" "' words.Skip (2));  	}  } else {  	result += string.Format ("Getting Value(s) For Setting: {0}\r\n"' name == "" ? "root" : name);  }  
Magic Number,EssentialsPlugin,PluginSettings,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Settings\PluginSettings.cs,GetOrSetSettings,The following statement contains a magic number: if (words.Length == 2) {  	if (words [1].ToLower () == "add")  		so = SettingsOperators.Add;  	else  		so = SettingsOperators.Remove;  } else if (words.Length > 2) {  	if (words [1].ToLower () == "set") {  		so = SettingsOperators.Set;  		newValue = string.Join (" "' words.Skip (2));  	} else if (words [1].ToLower () == "remove") {  		so = SettingsOperators.Remove;  		newValue = string.Join (" "' words.Skip (2));  	}  } else {  	result += string.Format ("Getting Value(s) For Setting: {0}\r\n"' name == "" ? "root" : name);  }  
Magic Number,EssentialsPlugin,PluginSettings,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Settings\PluginSettings.cs,GetOrSetSettings,The following statement contains a magic number: if (words.Length == 2) {  	if (words [1].ToLower () == "add")  		so = SettingsOperators.Add;  	else  		so = SettingsOperators.Remove;  } else if (words.Length > 2) {  	if (words [1].ToLower () == "set") {  		so = SettingsOperators.Set;  		newValue = string.Join (" "' words.Skip (2));  	} else if (words [1].ToLower () == "remove") {  		so = SettingsOperators.Remove;  		newValue = string.Join (" "' words.Skip (2));  	}  } else {  	result += string.Format ("Getting Value(s) For Setting: {0}\r\n"' name == "" ? "root" : name);  }  
Magic Number,EssentialsPlugin,PluginSettings,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Settings\PluginSettings.cs,GetOrSetSettings,The following statement contains a magic number: if (words.Length == 2) {  	if (words [1].ToLower () == "add")  		so = SettingsOperators.Add;  	else  		so = SettingsOperators.Remove;  } else if (words.Length > 2) {  	if (words [1].ToLower () == "set") {  		so = SettingsOperators.Set;  		newValue = string.Join (" "' words.Skip (2));  	} else if (words [1].ToLower () == "remove") {  		so = SettingsOperators.Remove;  		newValue = string.Join (" "' words.Skip (2));  	}  } else {  	result += string.Format ("Getting Value(s) For Setting: {0}\r\n"' name == "" ? "root" : name);  }  
Magic Number,EssentialsPlugin,PluginSettings,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Settings\PluginSettings.cs,GetOrSetSettings,The following statement contains a magic number: if (words.Length > 2) {  	if (words [1].ToLower () == "set") {  		so = SettingsOperators.Set;  		newValue = string.Join (" "' words.Skip (2));  	} else if (words [1].ToLower () == "remove") {  		so = SettingsOperators.Remove;  		newValue = string.Join (" "' words.Skip (2));  	}  } else {  	result += string.Format ("Getting Value(s) For Setting: {0}\r\n"' name == "" ? "root" : name);  }  
Magic Number,EssentialsPlugin,PluginSettings,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Settings\PluginSettings.cs,GetOrSetSettings,The following statement contains a magic number: if (words.Length > 2) {  	if (words [1].ToLower () == "set") {  		so = SettingsOperators.Set;  		newValue = string.Join (" "' words.Skip (2));  	} else if (words [1].ToLower () == "remove") {  		so = SettingsOperators.Remove;  		newValue = string.Join (" "' words.Skip (2));  	}  } else {  	result += string.Format ("Getting Value(s) For Setting: {0}\r\n"' name == "" ? "root" : name);  }  
Magic Number,EssentialsPlugin,PluginSettings,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Settings\PluginSettings.cs,GetOrSetSettings,The following statement contains a magic number: if (words.Length > 2) {  	if (words [1].ToLower () == "set") {  		so = SettingsOperators.Set;  		newValue = string.Join (" "' words.Skip (2));  	} else if (words [1].ToLower () == "remove") {  		so = SettingsOperators.Remove;  		newValue = string.Join (" "' words.Skip (2));  	}  } else {  	result += string.Format ("Getting Value(s) For Setting: {0}\r\n"' name == "" ? "root" : name);  }  
Magic Number,EssentialsPlugin,PluginSettings,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Settings\PluginSettings.cs,GetOrSetSettings,The following statement contains a magic number: if (words [1].ToLower () == "set") {  	so = SettingsOperators.Set;  	newValue = string.Join (" "' words.Skip (2));  } else if (words [1].ToLower () == "remove") {  	so = SettingsOperators.Remove;  	newValue = string.Join (" "' words.Skip (2));  }  
Magic Number,EssentialsPlugin,PluginSettings,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Settings\PluginSettings.cs,GetOrSetSettings,The following statement contains a magic number: if (words [1].ToLower () == "set") {  	so = SettingsOperators.Set;  	newValue = string.Join (" "' words.Skip (2));  } else if (words [1].ToLower () == "remove") {  	so = SettingsOperators.Remove;  	newValue = string.Join (" "' words.Skip (2));  }  
Magic Number,EssentialsPlugin,PluginSettings,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Settings\PluginSettings.cs,GetOrSetSettings,The following statement contains a magic number: newValue = string.Join (" "' words.Skip (2));  
Magic Number,EssentialsPlugin,PluginSettings,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Settings\PluginSettings.cs,GetOrSetSettings,The following statement contains a magic number: if (words [1].ToLower () == "remove") {  	so = SettingsOperators.Remove;  	newValue = string.Join (" "' words.Skip (2));  }  
Magic Number,EssentialsPlugin,PluginSettings,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Settings\PluginSettings.cs,GetOrSetSettings,The following statement contains a magic number: newValue = string.Join (" "' words.Skip (2));  
Magic Number,EssentialsPlugin,PluginSettings,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Settings\PluginSettings.cs,ReflectObject,The following statement contains a magic number: try {  	Type checkType = obj.GetType ();  	if (propertyInfo != null)  		checkType = propertyInfo.PropertyType;  	string[] names = name.Split (new char[] {  		'.'  	}' 2);  	if (checkType.IsArray) {  		ReflectArray (obj' propertyInfo' so' newValue' ref result' names);  	} else if (checkType.IsGenericType && checkType.InheritsOrImplements (typeof(IList<>))) {  		ReflectGenericList (obj' propertyInfo' so' newValue' ref result' names);  	} else if (checkType.IsValueType || checkType == typeof(string)) {  		if (so == SettingsOperators.Set && propertyInfo != null && newValue != "") {  			Logging.WriteLineAndConsole (string.Format ("Setting Value of {0} to '{1}'"' checkType.Name' newValue));  			propertyInfo.SetValue (obj' Convert.ChangeType (newValue' propertyInfo.PropertyType));  			Save ();  		}  		result += propertyInfo.GetValue (obj);  	} else {  		PropertyInfo[] properties = checkType.GetProperties ();  		foreach (PropertyInfo info in properties) {  			bool display = false;  			bool recurse = false;  			string recurseName = "";  			if (info.Name.ToLower () == names [0].ToLower ()) {  				display = true;  				recurse = true;  				if (names.Length > 1)  					recurseName = names [1];  			}  			if (name == "")  				display = true;  			if (display) {  				found = true;  				string value = "";  				if (info.PropertyType.IsValueType || info.PropertyType == typeof(string)) {  					value += string.Format ("{0}: {1}"' info.Name' ReflectObject (obj' recurseName' info' so' newValue));  				} else if (info.PropertyType.IsArray) {  					if (!recurse)  						value += string.Format ("{0}: (array)"' info.Name);  					else  						value += ReflectObject (obj' recurseName' info' so' newValue);  				} else if (info.GetValue (obj) != null && info.GetValue (obj).GetType ().InheritsOrImplements (typeof(IList<>))) {  					if (!recurse)  						value += string.Format ("{0}: (list)"' info.Name);  					else  						value += ReflectObject (obj' recurseName' info' so' newValue);  					found = true;  				}  				if (result != "" && value != "")  					result += "\r\n";  				if (value != "")  					result += value;  			}  		}  		if (!found) {  			result += string.Format ("Unabled to find setting: {0}"' name);  		}  	}  } catch (Exception ex) {  	Logging.WriteLineAndConsole (string.Format ("ReflectObject(): {0}"' ex.ToString ()));  }  
Magic Number,EssentialsPlugin.EntityManagers,BlockManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\BlockManagement.cs,GridListCleanup,The following statement contains a magic number: if (DateTime.Now - m_lastCleanup < TimeSpan.FromSeconds (120))  	return;  
Magic Number,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,CheckAndConcealEntities,The following statement contains a magic number: try {  	DateTime start = DateTime.Now;  	double distCheck = 0d;  	double blockRules = 0d;  	double getGrids = 0d;  	double co = 0f;  	m_processedGrids.Clear ();  	List<IMyPlayer> players = new List<IMyPlayer> ();  	HashSet<IMyEntity> entities = new HashSet<IMyEntity> ();  	HashSet<IMyEntity> entitiesFiltered = new HashSet<IMyEntity> ();  	HashSet<IMyEntity> entitiesFound = new HashSet<IMyEntity> ();  	try {  		MyAPIGateway.Players.GetPlayers (players);  	} catch (Exception ex) {  		Logging.WriteLineAndConsole (string.Format ("Error getting players list.  Check and Conceal failed: {0}"' ex.ToString ()));  		return;  	}  	try {  		MyAPIGateway.Entities.GetEntities (entities);  	} catch {  		Logging.WriteLineAndConsole ("CheckAndConcealEntities(): Error getting entity list' skipping check");  		return;  	}  	foreach (IMyEntity entity in entities) {  		if (!(entity is IMyCubeGrid))  			continue;  		if (!entity.InScene)  			continue;  		entitiesFiltered.Add (entity);  	}  	DateTime getGridsStart = DateTime.Now;  	CubeGrids.GetGridsUnconnected (entitiesFound' entitiesFiltered);  	getGrids += (DateTime.Now - getGridsStart).TotalMilliseconds;  	HashSet<IMyEntity> entitiesToConceal = new HashSet<IMyEntity> ();  	foreach (IMyEntity entity in entitiesFound) {  		if (!(entity is IMyCubeGrid))  			continue;  		if (entity.DisplayName.Contains ("CommRelay"))  			continue;  		if (entity.Physics == null)  			// Projection  			continue;  		if (!entity.InScene)  			continue;  		if (((IMyCubeGrid)entity).GridSizeEnum != MyCubeSize.Small && !PluginSettings.Instance.ConcealIncludeLargeGrids)  			continue;  		IMyCubeGrid grid = (IMyCubeGrid)entity;  		bool found = false;  		DateTime distStart = DateTime.Now;  		foreach (IMyPlayer player in players) {  			double distance = 0f;  			if (Entity.GetDistanceBetweenGridAndPlayer (grid' player' out distance)) {  				if (distance < PluginSettings.Instance.DynamicConcealDistance) {  					found = true;  				}  			}  		}  		distCheck += (DateTime.Now - distStart).TotalMilliseconds;  		if (!found) {  			// Check to see if grid is close to dock / shipyard  			foreach (IMyCubeGrid checkGrid in ProcessDockingZone.ZoneCache) {  				try {  					if (Vector3D.Distance (checkGrid.GetPosition ()' grid.GetPosition ()) < 100d) {  						found = true;  						break;  					}  				} catch {  					continue;  				}  			}  		}  		if (!found) {  			// Check for block type rules  			DateTime blockStart = DateTime.Now;  			if (CheckConcealBlockRules (grid' players)) {  				found = true;  			}  			blockRules += (DateTime.Now - blockStart).TotalMilliseconds;  		}  		if (!found) {  			entitiesToConceal.Add (entity);  		}  	}  	DateTime coStart = DateTime.Now;  	if (entitiesToConceal.Count > 0)  		ConcealEntities (entitiesToConceal);  	co += (DateTime.Now - coStart).TotalMilliseconds;  	if ((DateTime.Now - start).TotalMilliseconds > 2000)  		Logging.WriteLineAndConsole (string.Format ("Completed Conceal Check: {0}ms (gg: {3}' dc: {2} ms' br: {1}ms' co: {4}ms)"' (DateTime.Now - start).TotalMilliseconds' blockRules' distCheck' getGrids' co));  } catch (Exception ex) {  	Logging.WriteLineAndConsole (string.Format ("CheckAndConceal(): {0}"' ex.ToString ()));  } finally {  	m_checkConceal = false;  }  
Magic Number,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,CheckAndConcealEntities,The following statement contains a magic number: if ((DateTime.Now - start).TotalMilliseconds > 2000)  	Logging.WriteLineAndConsole (string.Format ("Completed Conceal Check: {0}ms (gg: {3}' dc: {2} ms' br: {1}ms' co: {4}ms)"' (DateTime.Now - start).TotalMilliseconds' blockRules' distCheck' getGrids' co));  
Magic Number,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,CheckConcealBlockRules,The following statement contains a magic number: foreach (IMySlimBlock block in blocks) {  	IMyCubeBlock cubeBlock = block.FatBlock;  	if (cubeBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_Beacon)) {  		Sandbox.ModAPI.Ingame.IMyBeacon beacon = (Sandbox.ModAPI.Ingame.IMyBeacon)cubeBlock;  		//MyObjectBuilder_Beacon beacon = (MyObjectBuilder_Beacon)cubeBlock.GetObjectBuilderCubeBlock();  		beaconCount++;  		// Keep this return here' as 4 beacons always means true  		if (beaconCount >= 4) {  			return true;  		}  		if (!beacon.Enabled)  			continue;  		Sandbox.ModAPI.Ingame.IMyTerminalBlock terminalBlock = (Sandbox.ModAPI.Ingame.IMyTerminalBlock)cubeBlock;  		//					Console.WriteLine("Found: {0} {1} {2}"' beacon.BroadcastRadius' terminalBlock.IsWorking' terminalBlock.IsFunctional);  		//if (!terminalBlock.IsWorking)  		//{  		//						continue;  		//}  		foreach (IMyPlayer player in players) {  			double distance = 0d;  			if (Entity.GetDistanceBetweenPointAndPlayer (grid.GetPosition ()' player' out distance)) {  				if (distance < beacon.Radius) {  					//								Console.WriteLine("Not concealed due to broadcast radius");  					//found = true;  					//break;  					return true;  				}  			}  		}  	}  	if (cubeBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_RadioAntenna)) {  		//MyObjectBuilder_RadioAntenna antenna = (MyObjectBuilder_RadioAntenna)cubeBlock.GetObjectBuilderCubeBlock();  		Sandbox.ModAPI.Ingame.IMyRadioAntenna antenna = (Sandbox.ModAPI.Ingame.IMyRadioAntenna)cubeBlock;  		if (!antenna.Enabled)  			continue;  		Sandbox.ModAPI.Ingame.IMyTerminalBlock terminalBlock = (Sandbox.ModAPI.Ingame.IMyTerminalBlock)cubeBlock;  		//if (!terminalBlock.IsWorking)  		//	continue;  		foreach (IMyPlayer player in players) {  			double distance = 0d;  			if (Entity.GetDistanceBetweenPointAndPlayer (grid.GetPosition ()' player' out distance)) {  				if (distance < antenna.Radius) {  					//								Console.WriteLine("Not concealed due to antenna broadcast radius");  					//found = true;  					//break;  					return true;  				}  			}  		}  	}  	if (cubeBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_MedicalRoom)) {  		//MyObjectBuilder_MedicalRoom medical = (MyObjectBuilder_MedicalRoom)cubeBlock.GetObjectBuilderCubeBlock();  		Sandbox.ModAPI.Ingame.IMyMedicalRoom medical = (Sandbox.ModAPI.Ingame.IMyMedicalRoom)cubeBlock;  		if (!medical.Enabled)  			continue;  		Sandbox.ModAPI.Ingame.IMyFunctionalBlock functionalBlock = (Sandbox.ModAPI.Ingame.IMyFunctionalBlock)cubeBlock;  		//if (!terminalBlock.IsWorking)  		//	continue;  		if (PluginSettings.Instance.DynamicConcealIncludeMedBays) {  			lock (m_online) {  				foreach (ulong connectedPlayer in m_online) {  					//if (PlayerMap.Instance.GetPlayerIdsFromSteamId(connectedPlayer).Count < 1)  					//continue;  					//long playerId = PlayerMap.Instance.GetPlayerIdsFromSteamId(connectedPlayer).First();  					long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (connectedPlayer);  					if (functionalBlock.OwnerId == playerId || (functionalBlock.GetUserRelationToOwner (playerId) == Sandbox.Common.MyRelationsBetweenPlayerAndBlock.FactionShare))//if (functionalBlock.Owner == playerId || (functionalBlock.ShareMode == MyOwnershipShareModeEnum.Faction && Player.CheckPlayerSameFaction(functionalBlock.Owner' playerId)))  					//if (medical.HasPlayerAccess(playerId))  					 {  						return true;  					}  				}  			}  			/* 						foreach (ulong connectedPlayer in PlayerManager.Instance.ConnectedPlayers) 						{ 							//if (PlayerMap.Instance.GetPlayerIdsFromSteamId(connectedPlayer).Count < 1) 								//continue;  							//long playerId = PlayerMap.Instance.GetPlayerIdsFromSteamId(connectedPlayer).First(); 							long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId(connectedPlayer); 							//if (medical.Owner == playerId || (medical.ShareMode == MyOwnershipShareModeEnum.Faction && Player.CheckPlayerSameFaction(medical.Owner' playerId))) 							if(medical.HasPlayerAccess(playerId)) 							{ 								return true; 							} 						} 						 */} else {  			return true;  		}  	}  	if (cubeBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_Refinery) || cubeBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_Assembler)) {  		//MyObjectBuilder_ProductionBlock production = (MyObjectBuilder_ProductionBlock)cubeBlock.GetObjectBuilderCubeBlock();  		Sandbox.ModAPI.Ingame.IMyProductionBlock production = (Sandbox.ModAPI.Ingame.IMyProductionBlock)cubeBlock;  		if (!production.Enabled)  			continue;  		if (production.IsProducing)  			return true;  	}  	foreach (string subType in PluginSettings.Instance.DynamicConcealIgnoreSubTypeList) {  		if (cubeBlock.BlockDefinition.SubtypeName.Contains (subType)) {  			//						Console.WriteLine("Not concealed due subtype");  			//found = true;  			return true;  		}  	}  }  
Magic Number,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,CheckConcealBlockRules,The following statement contains a magic number: if (cubeBlock.BlockDefinition.TypeId == typeof(MyObjectBuilder_Beacon)) {  	Sandbox.ModAPI.Ingame.IMyBeacon beacon = (Sandbox.ModAPI.Ingame.IMyBeacon)cubeBlock;  	//MyObjectBuilder_Beacon beacon = (MyObjectBuilder_Beacon)cubeBlock.GetObjectBuilderCubeBlock();  	beaconCount++;  	// Keep this return here' as 4 beacons always means true  	if (beaconCount >= 4) {  		return true;  	}  	if (!beacon.Enabled)  		continue;  	Sandbox.ModAPI.Ingame.IMyTerminalBlock terminalBlock = (Sandbox.ModAPI.Ingame.IMyTerminalBlock)cubeBlock;  	//					Console.WriteLine("Found: {0} {1} {2}"' beacon.BroadcastRadius' terminalBlock.IsWorking' terminalBlock.IsFunctional);  	//if (!terminalBlock.IsWorking)  	//{  	//						continue;  	//}  	foreach (IMyPlayer player in players) {  		double distance = 0d;  		if (Entity.GetDistanceBetweenPointAndPlayer (grid.GetPosition ()' player' out distance)) {  			if (distance < beacon.Radius) {  				//								Console.WriteLine("Not concealed due to broadcast radius");  				//found = true;  				//break;  				return true;  			}  		}  	}  }  
Magic Number,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,CheckConcealBlockRules,The following statement contains a magic number: if (beaconCount >= 4) {  	return true;  }  
Magic Number,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,ConcealEntity,The following statement contains a magic number: try {  	if (!entity.InScene)  		return;  	MyObjectBuilder_CubeGrid builder = CubeGrids.SafeGetObjectBuilder ((IMyCubeGrid)entity);  	if (builder == null)  		return;  	pos = 1;  	IMyCubeGrid grid = (IMyCubeGrid)entity;  	long ownerId = 0;  	string ownerName = "";  	if (CubeGrids.GetOwner (builder' out ownerId)) {  		//ownerId = grid.BigOwners.First();  		ownerName = PlayerMap.Instance.GetPlayerItemFromPlayerId (ownerId).Name;  	}  	pos = 2;  	if (entity.Physics != null) {  		entity.Physics.LinearVelocity = Vector3.Zero;  		entity.Physics.AngularVelocity = Vector3.Zero;  	}  	/* 				entity.InScene = false; 				entity.CastShadows = false; 				entity.Visible = false; 				*/builder.PersistentFlags = MyPersistentEntityFlags2.None;  	MyAPIGateway.Entities.RemapObjectBuilder (builder);  	pos = 3;  	if (m_removedGrids.Contains (entity.EntityId)) {  		Logging.WriteLineAndConsole ("Conceal"' string.Format ("Concealing - Id: {0} DUPE FOUND - Display: {1} OwnerId: {2} OwnerName: {3}"' entity.EntityId' entity.DisplayName' ownerId' ownerName' builder.EntityId));  		BaseEntityNetworkManager.BroadcastRemoveEntity (entity' false);  	} else {  		if (!PluginSettings.Instance.DynamicConcealServerOnly) {  			/* 						if (PluginSettings.Instance.DynamicBlockManagementEnabled) 						{ 							bool enable = false; 							lock (BlockManagement.Instance.GridDisabled) 							{ 								if(BlockManagement.Instance.GridDisabled.Contains(entity.EntityId)) 									enable = true; 							}  							if(enable) 								BlockManagement.Instance.EnableGrid((IMyCubeGrid)entity); 						} 						*/IMyEntity newEntity = MyAPIGateway.Entities.CreateFromObjectBuilder (builder);  			Logging.WriteLineAndConsole ("Conceal"' string.Format ("Start Concealing - Id: {0} -> {4} Display: {1} OwnerId: {2} OwnerName: {3}"' entity.EntityId' entity.DisplayName' ownerId' ownerName' newEntity.EntityId));  			if (newEntity == null) {  				Logging.WriteLineAndConsole ("Conceal"' string.Format ("Issue - CreateFromObjectBuilder failed: {0}"' newEntity.EntityId));  				return;  			}  			m_removedGrids.Add (entity.EntityId);  			BaseEntityNetworkManager.BroadcastRemoveEntity (entity' false);  			MyAPIGateway.Entities.AddEntity (newEntity' false);  			Logging.WriteLineAndConsole ("Conceal"' string.Format ("End Concealing - Id: {0} -> {4} Display: {1} OwnerId: {2} OwnerName: {3}"' entity.EntityId' entity.DisplayName' ownerId' ownerName' newEntity.EntityId));  		} else {  			Logging.WriteLineAndConsole ("Conceal"' string.Format ("Start Concealing - Id: {0} -> {4} Display: {1} OwnerId: {2} OwnerName: {3}"' entity.EntityId' entity.DisplayName' ownerId' ownerName' builder.EntityId));  			entity.InScene = false;  			Logging.WriteLineAndConsole ("Conceal"' string.Format ("End Concealing - Id: {0} -> {4} Display: {1} OwnerId: {2} OwnerName: {3}"' entity.EntityId' entity.DisplayName' ownerId' ownerName' builder.EntityId));  		}  	}  } catch (Exception ex) {  	Logging.WriteLineAndConsole (string.Format ("ConcealEntity({1}): {0}"' ex.ToString ()' pos));  }  
Magic Number,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,ConcealEntity,The following statement contains a magic number: try {  	if (!entity.InScene)  		return;  	MyObjectBuilder_CubeGrid builder = CubeGrids.SafeGetObjectBuilder ((IMyCubeGrid)entity);  	if (builder == null)  		return;  	pos = 1;  	IMyCubeGrid grid = (IMyCubeGrid)entity;  	long ownerId = 0;  	string ownerName = "";  	if (CubeGrids.GetOwner (builder' out ownerId)) {  		//ownerId = grid.BigOwners.First();  		ownerName = PlayerMap.Instance.GetPlayerItemFromPlayerId (ownerId).Name;  	}  	pos = 2;  	if (entity.Physics != null) {  		entity.Physics.LinearVelocity = Vector3.Zero;  		entity.Physics.AngularVelocity = Vector3.Zero;  	}  	/* 				entity.InScene = false; 				entity.CastShadows = false; 				entity.Visible = false; 				*/builder.PersistentFlags = MyPersistentEntityFlags2.None;  	MyAPIGateway.Entities.RemapObjectBuilder (builder);  	pos = 3;  	if (m_removedGrids.Contains (entity.EntityId)) {  		Logging.WriteLineAndConsole ("Conceal"' string.Format ("Concealing - Id: {0} DUPE FOUND - Display: {1} OwnerId: {2} OwnerName: {3}"' entity.EntityId' entity.DisplayName' ownerId' ownerName' builder.EntityId));  		BaseEntityNetworkManager.BroadcastRemoveEntity (entity' false);  	} else {  		if (!PluginSettings.Instance.DynamicConcealServerOnly) {  			/* 						if (PluginSettings.Instance.DynamicBlockManagementEnabled) 						{ 							bool enable = false; 							lock (BlockManagement.Instance.GridDisabled) 							{ 								if(BlockManagement.Instance.GridDisabled.Contains(entity.EntityId)) 									enable = true; 							}  							if(enable) 								BlockManagement.Instance.EnableGrid((IMyCubeGrid)entity); 						} 						*/IMyEntity newEntity = MyAPIGateway.Entities.CreateFromObjectBuilder (builder);  			Logging.WriteLineAndConsole ("Conceal"' string.Format ("Start Concealing - Id: {0} -> {4} Display: {1} OwnerId: {2} OwnerName: {3}"' entity.EntityId' entity.DisplayName' ownerId' ownerName' newEntity.EntityId));  			if (newEntity == null) {  				Logging.WriteLineAndConsole ("Conceal"' string.Format ("Issue - CreateFromObjectBuilder failed: {0}"' newEntity.EntityId));  				return;  			}  			m_removedGrids.Add (entity.EntityId);  			BaseEntityNetworkManager.BroadcastRemoveEntity (entity' false);  			MyAPIGateway.Entities.AddEntity (newEntity' false);  			Logging.WriteLineAndConsole ("Conceal"' string.Format ("End Concealing - Id: {0} -> {4} Display: {1} OwnerId: {2} OwnerName: {3}"' entity.EntityId' entity.DisplayName' ownerId' ownerName' newEntity.EntityId));  		} else {  			Logging.WriteLineAndConsole ("Conceal"' string.Format ("Start Concealing - Id: {0} -> {4} Display: {1} OwnerId: {2} OwnerName: {3}"' entity.EntityId' entity.DisplayName' ownerId' ownerName' builder.EntityId));  			entity.InScene = false;  			Logging.WriteLineAndConsole ("Conceal"' string.Format ("End Concealing - Id: {0} -> {4} Display: {1} OwnerId: {2} OwnerName: {3}"' entity.EntityId' entity.DisplayName' ownerId' ownerName' builder.EntityId));  		}  	}  } catch (Exception ex) {  	Logging.WriteLineAndConsole (string.Format ("ConcealEntity({1}): {0}"' ex.ToString ()' pos));  }  
Magic Number,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,ConcealEntity,The following statement contains a magic number: pos = 2;  
Magic Number,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,ConcealEntity,The following statement contains a magic number: pos = 3;  
Magic Number,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,CheckAndRevealEntities,The following statement contains a magic number: try {  	DateTime start = DateTime.Now;  	double br = 0f;  	double re = 0f;  	List<IMyPlayer> players = new List<IMyPlayer> ();  	HashSet<IMyEntity> entities = new HashSet<IMyEntity> ();  	//Wrapper.GameAction(() =>  	//{  	MyAPIGateway.Players.GetPlayers (players);  	MyAPIGateway.Entities.GetEntities (entities);  	//});  	Dictionary<IMyEntity' string> entitiesToReveal = new Dictionary<IMyEntity' string> ();  	string currentReason = "";  	//HashSet<IMyEntity> entitiesToReveal = new HashSet<IMyEntity>();  	foreach (IMyEntity entity in entities) {  		if (entity.MarkedForClose)  			continue;  		if (!(entity is IMyCubeGrid))  			continue;  		if (entity.InScene)  			continue;  		IMyCubeGrid grid = (IMyCubeGrid)entity;  		bool found = false;  		currentReason = "";  		foreach (IMyPlayer player in players) {  			double distance = 0f;  			if (Entity.GetDistanceBetweenGridAndPlayer (grid' player' out distance)) {  				if (distance < PluginSettings.Instance.DynamicConcealDistance) {  					found = true;  					currentReason = string.Format ("{0} distance to grid: {1}"' player.DisplayName' distance);  				}  			}  		}  		if (!found) {  			DateTime brStart = DateTime.Now;  			if (CheckRevealBlockRules (grid' players' out currentReason)) {  				found = true;  			}  			br += (DateTime.Now - brStart).TotalMilliseconds;  		}  		if (found) {  			entitiesToReveal.Add (entity' currentReason);  		}  	}  	DateTime reStart = DateTime.Now;  	if (entitiesToReveal.Count > 0)  		RevealEntities (entitiesToReveal);  	re += (DateTime.Now - reStart).TotalMilliseconds;  	if ((DateTime.Now - start).TotalMilliseconds > 2000)  		Logging.WriteLineAndConsole (string.Format ("Completed Reveal Check: {0}ms (br: {1}ms' re: {2}ms)"' (DateTime.Now - start).TotalMilliseconds' br' re));  } catch (Exception ex) {  	Logging.WriteLineAndConsole (string.Format ("CheckAndReveal(): {0}"' ex.ToString ()));  } finally {  	m_checkReveal = false;  }  
Magic Number,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,CheckAndRevealEntities,The following statement contains a magic number: if ((DateTime.Now - start).TotalMilliseconds > 2000)  	Logging.WriteLineAndConsole (string.Format ("Completed Reveal Check: {0}ms (br: {1}ms' re: {2}ms)"' (DateTime.Now - start).TotalMilliseconds' br' re));  
Magic Number,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,ToggleMedbayGrids,The following statement contains a magic number: try {  	DateTime start = DateTime.Now;  	// Toggle off  	HashSet<IMyEntity> entities = new HashSet<IMyEntity> ();  	HashSet<IMyEntity> entitiesFound = new HashSet<IMyEntity> ();  	try {  		MyAPIGateway.Entities.GetEntities (entities);  	} catch {  		Logging.WriteLineAndConsole ("CheckAndConcealEntities(): Error getting entity list' skipping check");  		return false;  	}  	CubeGrids.GetGridsUnconnected (entitiesFound' entities);  	HashSet<IMyEntity> entitiesToConceal = new HashSet<IMyEntity> ();  	foreach (IMyEntity entity in entitiesFound) {  		if (!(entity is IMyCubeGrid))  			continue;  		if (entity.DisplayName.Contains ("CommRelay"))  			continue;  		if (!entity.InScene)  			continue;  		if (((IMyCubeGrid)entity).GridSizeEnum != MyCubeSize.Small && !PluginSettings.Instance.ConcealIncludeLargeGrids)  			continue;  		IMyCubeGrid grid = (IMyCubeGrid)entity;  		long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (steamId);  		if (!grid.BigOwners.Contains (playerId) && !grid.SmallOwners.Contains (playerId))  			continue;  		bool found = false;  		// Check to see if grid is close to dock / shipyard  		foreach (IMyCubeGrid checkGrid in ProcessDockingZone.ZoneCache) {  			try {  				if (Vector3D.Distance (checkGrid.GetPosition ()' grid.GetPosition ()) < 100d) {  					found = true;  					break;  				}  			} catch {  				continue;  			}  		}  		if (!found) {  			// Check for block type rules  		}  		if (!found) {  			entitiesToConceal.Add (entity);  		}  	}  	if (entitiesToConceal.Count > 0) {  		//if (PluginSettings.Instance.DynamicClientConcealEnabled)  		//{  		//ClientEntityManagement.Refresh(steamId);  		//}  		Communication.SendClientMessage (steamId' string.Format ("/conceal {0}"' string.Join ("'"' entitiesToConceal.Select (x => x.EntityId.ToString () + ":" + ((MyObjectBuilder_CubeGrid)x.GetObjectBuilder ()).CubeBlocks.Count.ToString () + ":" + x.DisplayName).ToArray ())));  		Thread.Sleep (1500);  		ConcealEntities (entitiesToConceal);  		//CheckAndRevealEntities();  	}  	if ((DateTime.Now - start).TotalMilliseconds > 2000)  		Logging.WriteLineAndConsole (string.Format ("Completed Toggle: {0}ms"' (DateTime.Now - start).TotalMilliseconds));  } catch (Exception ex) {  	Logging.WriteLineAndConsole (string.Format ("CheckAndConceal(): {0}"' ex.ToString ()));  } finally {  	m_checkConceal = false;  	m_checkReveal = false;  }  
Magic Number,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,ToggleMedbayGrids,The following statement contains a magic number: try {  	DateTime start = DateTime.Now;  	// Toggle off  	HashSet<IMyEntity> entities = new HashSet<IMyEntity> ();  	HashSet<IMyEntity> entitiesFound = new HashSet<IMyEntity> ();  	try {  		MyAPIGateway.Entities.GetEntities (entities);  	} catch {  		Logging.WriteLineAndConsole ("CheckAndConcealEntities(): Error getting entity list' skipping check");  		return false;  	}  	CubeGrids.GetGridsUnconnected (entitiesFound' entities);  	HashSet<IMyEntity> entitiesToConceal = new HashSet<IMyEntity> ();  	foreach (IMyEntity entity in entitiesFound) {  		if (!(entity is IMyCubeGrid))  			continue;  		if (entity.DisplayName.Contains ("CommRelay"))  			continue;  		if (!entity.InScene)  			continue;  		if (((IMyCubeGrid)entity).GridSizeEnum != MyCubeSize.Small && !PluginSettings.Instance.ConcealIncludeLargeGrids)  			continue;  		IMyCubeGrid grid = (IMyCubeGrid)entity;  		long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (steamId);  		if (!grid.BigOwners.Contains (playerId) && !grid.SmallOwners.Contains (playerId))  			continue;  		bool found = false;  		// Check to see if grid is close to dock / shipyard  		foreach (IMyCubeGrid checkGrid in ProcessDockingZone.ZoneCache) {  			try {  				if (Vector3D.Distance (checkGrid.GetPosition ()' grid.GetPosition ()) < 100d) {  					found = true;  					break;  				}  			} catch {  				continue;  			}  		}  		if (!found) {  			// Check for block type rules  		}  		if (!found) {  			entitiesToConceal.Add (entity);  		}  	}  	if (entitiesToConceal.Count > 0) {  		//if (PluginSettings.Instance.DynamicClientConcealEnabled)  		//{  		//ClientEntityManagement.Refresh(steamId);  		//}  		Communication.SendClientMessage (steamId' string.Format ("/conceal {0}"' string.Join ("'"' entitiesToConceal.Select (x => x.EntityId.ToString () + ":" + ((MyObjectBuilder_CubeGrid)x.GetObjectBuilder ()).CubeBlocks.Count.ToString () + ":" + x.DisplayName).ToArray ())));  		Thread.Sleep (1500);  		ConcealEntities (entitiesToConceal);  		//CheckAndRevealEntities();  	}  	if ((DateTime.Now - start).TotalMilliseconds > 2000)  		Logging.WriteLineAndConsole (string.Format ("Completed Toggle: {0}ms"' (DateTime.Now - start).TotalMilliseconds));  } catch (Exception ex) {  	Logging.WriteLineAndConsole (string.Format ("CheckAndConceal(): {0}"' ex.ToString ()));  } finally {  	m_checkConceal = false;  	m_checkReveal = false;  }  
Magic Number,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,ToggleMedbayGrids,The following statement contains a magic number: if (entitiesToConceal.Count > 0) {  	//if (PluginSettings.Instance.DynamicClientConcealEnabled)  	//{  	//ClientEntityManagement.Refresh(steamId);  	//}  	Communication.SendClientMessage (steamId' string.Format ("/conceal {0}"' string.Join ("'"' entitiesToConceal.Select (x => x.EntityId.ToString () + ":" + ((MyObjectBuilder_CubeGrid)x.GetObjectBuilder ()).CubeBlocks.Count.ToString () + ":" + x.DisplayName).ToArray ())));  	Thread.Sleep (1500);  	ConcealEntities (entitiesToConceal);  	//CheckAndRevealEntities();  }  
Magic Number,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,ToggleMedbayGrids,The following statement contains a magic number: Thread.Sleep (1500);  
Magic Number,EssentialsPlugin.EntityManagers,EntityManagement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\EntityManagers\EntityManagement.cs,ToggleMedbayGrids,The following statement contains a magic number: if ((DateTime.Now - start).TotalMilliseconds > 2000)  	Logging.WriteLineAndConsole (string.Format ("Completed Toggle: {0}ms"' (DateTime.Now - start).TotalMilliseconds));  
Magic Number,EssentialsPlugin.GameModes,Conquest,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\GameModes\Conquest.cs,ProcessAsteroidOwnership,The following statement contains a magic number: foreach (IMyEntity entity in entities) {  	if (!(entity is IMyVoxelMap))  		continue;  	if (!entity.Save)  		continue;  	IMyVoxelMap voxel = (IMyVoxelMap)entity;  	BoundingSphereD sphere = new BoundingSphereD (entity.GetPosition ()' 512);  	List<IMyEntity> blocks = MyAPIGateway.Entities.GetEntitiesInSphere (ref sphere);  	Dictionary<long' int> asteroidScore = new Dictionary<long' int> ();  	foreach (IMyEntity block in blocks) {  		if (block is IMyCubeBlock) {  			IMyCubeBlock cube = (IMyCubeBlock)block;  			if (!(cube.GetTopMostParent () is IMyCubeGrid)) {  				continue;  			}  			IMyCubeGrid parent = (IMyCubeGrid)cube.GetTopMostParent ();  			if (!parent.IsStatic)  				continue;  			if (cube.OwnerId != 0 && cube.IsFunctional) {  				if (!asteroidScore.ContainsKey (cube.OwnerId))  					asteroidScore.Add (cube.OwnerId' 0);  				asteroidScore [cube.OwnerId] = asteroidScore [cube.OwnerId] + 1;  			}  		}  	}  	long asteroidOwner = asteroidScore.OrderBy (x => x.Value).Where (x => x.Value > 4).Select (x => x.Key).FirstOrDefault ();  	if (asteroidOwner != 0) {  		MyObjectBuilder_Checkpoint.PlayerItem item = PlayerMap.Instance.GetPlayerItemFromPlayerId (asteroidOwner);  		//Console.WriteLine(string.Format("Owner of asteroid at: {0} is {1}"' General.Vector3DToString(entity.GetPosition())' item.Name));  		result.Add (entity.EntityId' asteroidOwner);  	}  }  
Magic Number,EssentialsPlugin.GameModes,Conquest,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\GameModes\Conquest.cs,ProcessAsteroidOwnership,The following statement contains a magic number: foreach (IMyEntity entity in entities) {  	if (!(entity is IMyVoxelMap))  		continue;  	if (!entity.Save)  		continue;  	IMyVoxelMap voxel = (IMyVoxelMap)entity;  	BoundingSphereD sphere = new BoundingSphereD (entity.GetPosition ()' 512);  	List<IMyEntity> blocks = MyAPIGateway.Entities.GetEntitiesInSphere (ref sphere);  	Dictionary<long' int> asteroidScore = new Dictionary<long' int> ();  	foreach (IMyEntity block in blocks) {  		if (block is IMyCubeBlock) {  			IMyCubeBlock cube = (IMyCubeBlock)block;  			if (!(cube.GetTopMostParent () is IMyCubeGrid)) {  				continue;  			}  			IMyCubeGrid parent = (IMyCubeGrid)cube.GetTopMostParent ();  			if (!parent.IsStatic)  				continue;  			if (cube.OwnerId != 0 && cube.IsFunctional) {  				if (!asteroidScore.ContainsKey (cube.OwnerId))  					asteroidScore.Add (cube.OwnerId' 0);  				asteroidScore [cube.OwnerId] = asteroidScore [cube.OwnerId] + 1;  			}  		}  	}  	long asteroidOwner = asteroidScore.OrderBy (x => x.Value).Where (x => x.Value > 4).Select (x => x.Key).FirstOrDefault ();  	if (asteroidOwner != 0) {  		MyObjectBuilder_Checkpoint.PlayerItem item = PlayerMap.Instance.GetPlayerItemFromPlayerId (asteroidOwner);  		//Console.WriteLine(string.Format("Owner of asteroid at: {0} is {1}"' General.Vector3DToString(entity.GetPosition())' item.Name));  		result.Add (entity.EntityId' asteroidOwner);  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessBlockEnforcement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessBlockEnforcement.cs,GetUpdateResolution,The following statement contains a magic number: return 45000;  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessBlockEnforcement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessBlockEnforcement.cs,Handle,The following statement contains a magic number: try {  	if (!PluginSettings.Instance.BlockEnforcementEnabled)  		return;  	DateTime start = DateTime.Now;  	if (PluginSettings.Instance.BlockEnforcementItems.Count > 0) {  		ScanForBlockItems ();  		if ((DateTime.Now - start).TotalMilliseconds > 2000)  			Logging.WriteLineAndConsole (string.Format ("Block Enforce Scan Time Elapsed: {0}ms"' (DateTime.Now - start).TotalMilliseconds));  	}  } catch (Exception ex) {  	Logging.WriteLineAndConsole (string.Format ("ProcessBlockEnforcement.Handle(): {0}"' ex.ToString ()));  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessBlockEnforcement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessBlockEnforcement.cs,Handle,The following statement contains a magic number: if (PluginSettings.Instance.BlockEnforcementItems.Count > 0) {  	ScanForBlockItems ();  	if ((DateTime.Now - start).TotalMilliseconds > 2000)  		Logging.WriteLineAndConsole (string.Format ("Block Enforce Scan Time Elapsed: {0}ms"' (DateTime.Now - start).TotalMilliseconds));  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessBlockEnforcement,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessBlockEnforcement.cs,Handle,The following statement contains a magic number: if ((DateTime.Now - start).TotalMilliseconds > 2000)  	Logging.WriteLineAndConsole (string.Format ("Block Enforce Scan Time Elapsed: {0}ms"' (DateTime.Now - start).TotalMilliseconds));  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessCleanup,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessCleanup.cs,GetUpdateResolution,The following statement contains a magic number: return 1000;  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessCleanup,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessCleanup.cs,ProcessTimedItem,The following statement contains a magic number: if (time - DateTime.Now < TimeSpan.FromSeconds (-20)) {  	time = new DateTime (m_start.Year' m_start.Month' m_start.Day + 1' item.Restart.Hour' item.Restart.Minute' 0);  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessCleanup,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessCleanup.cs,ProcessTriggerItem,The following statement contains a magic number: if (triggerdItem == null) {  	// Increase to 5 minutes  	if (DateTime.Now - item.LastRan > TimeSpan.FromSeconds (300)) {  		item.LastRan = DateTime.Now;  		string command = item.ScanCommand + " quiet";  		HashSet<IMyEntity> entities = CubeGrids.ScanGrids (0' command.Split (new char[] {  			' '  		}));  		if (entities.Count >= item.MaxCapacity) {  			Communication.SendPublicInformation (string.Format ("[NOTICE]: Cleanup triggered.  ({0} of {1}) triggered grids found.  Cleanup will run in {2} minutes.  Reason: {3}"' entities.Count' item.MaxCapacity' item.MinutesAfterCapacity' item.Reason));  			item.NotificationItemsRan.Clear ();  			triggerdItem = item;  			return;  		}  	}  } else {  	if (DateTime.Now - item.LastRan > TimeSpan.FromMinutes (item.MinutesAfterCapacity)) {  		string command = item.ScanCommand + " quiet";  		HashSet<IMyEntity> entities = CubeGrids.ScanGrids (0' command.Split (new char[] {  			' '  		}));  		CubeGrids.DeleteGrids (entities);  		Communication.SendPublicInformation (string.Format ("[NOTICE]: Triggered cleanup has run.  {0} entities removed.  Have a nice day."' entities.Count));  		triggerdItem = null;  		return;  	}  	foreach (SettingsCleanupNotificationItem notifyItem in PluginSettings.Instance.CleanupNotificationItems) {  		if (item.NotificationItemsRan.Contains (notifyItem))  			continue;  		if (notifyItem.MinutesBeforeCleanup > item.MinutesAfterCapacity)  			continue;  		if (DateTime.Now - item.LastRan > TimeSpan.FromMinutes (item.MinutesAfterCapacity - notifyItem.MinutesBeforeCleanup)) {  			item.NotificationItemsRan.Add (notifyItem);  			string notification = notifyItem.Message.Replace ("%cleanup_reason%"' item.Reason);  			Communication.SendPublicInformation (notification);  		}  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessCleanup,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessCleanup.cs,ProcessTriggerItem,The following statement contains a magic number: if (DateTime.Now - item.LastRan > TimeSpan.FromSeconds (300)) {  	item.LastRan = DateTime.Now;  	string command = item.ScanCommand + " quiet";  	HashSet<IMyEntity> entities = CubeGrids.ScanGrids (0' command.Split (new char[] {  		' '  	}));  	if (entities.Count >= item.MaxCapacity) {  		Communication.SendPublicInformation (string.Format ("[NOTICE]: Cleanup triggered.  ({0} of {1}) triggered grids found.  Cleanup will run in {2} minutes.  Reason: {3}"' entities.Count' item.MaxCapacity' item.MinutesAfterCapacity' item.Reason));  		item.NotificationItemsRan.Clear ();  		triggerdItem = item;  		return;  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessConceal,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessConceal.cs,GetUpdateResolution,The following statement contains a magic number: return 1000;  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessConceal,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessConceal.cs,Handle,The following statement contains a magic number: if (DateTime.Now - m_lastConcealCheck > TimeSpan.FromSeconds (30)) {  	//Logging.WriteLineAndConsole("CheckAndConcealEntities");  	EntityManagement.CheckAndConcealEntities ();  	m_lastConcealCheck = DateTime.Now;  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessConceal,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessConceal.cs,Handle,The following statement contains a magic number: if (DateTime.Now - m_lastRevealCheck > TimeSpan.FromSeconds (5)) {  	//Logging.WriteLineAndConsole("CheckAndRevealEntities");  	EntityManagement.CheckAndRevealEntities ();  	m_lastRevealCheck = DateTime.Now;  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessDockingZone,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessDockingZone.cs,GetUpdateResolution,The following statement contains a magic number: return 1000;  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessDockingZone,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessDockingZone.cs,Handle,The following statement contains a magic number: if (DateTime.Now - m_lastZoneUpdate > TimeSpan.FromSeconds (30)) {  	m_lastZoneUpdate = DateTime.Now;  	PopulateZoneCache ();  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessDockingZone,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessDockingZone.cs,CheckPlayerInDockingZone,The following statement contains a magic number: if (!(parent is IMyCubeGrid)) {  	if (m_playersInside.Contains (playerId)) {  		m_playersInside.Remove (playerId);  		ulong steamId = PlayerMap.Instance.GetSteamIdFromPlayerId (playerId);  		Communication.Notification (steamId' MyFontEnum.DarkBlue' 7' "You have exited a ship in a docking zone");  	}  	return;  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessDockingZone,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessDockingZone.cs,CheckPlayerInDockingZone,The following statement contains a magic number: if (m_playersInside.Contains (playerId)) {  	m_playersInside.Remove (playerId);  	ulong steamId = PlayerMap.Instance.GetSteamIdFromPlayerId (playerId);  	Communication.Notification (steamId' MyFontEnum.DarkBlue' 7' "You have exited a ship in a docking zone");  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessDockingZone,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessDockingZone.cs,CheckPlayerInDockingZone,The following statement contains a magic number: Communication.Notification (steamId' MyFontEnum.DarkBlue' 7' "You have exited a ship in a docking zone");  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessDockingZone,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessDockingZone.cs,CheckPlayerInDockingZone,The following statement contains a magic number: foreach (IMyEntity nearByEntity in nearByGrids) {  	// Sanity Check  	if (!(nearByEntity is IMyCubeGrid))  		return;  	IMyCubeGrid cubeGrid = (IMyCubeGrid)nearByEntity;  	// Does this grid contain a docking zone?  	if (m_zoneCache.Contains (cubeGrid)) {  		Dictionary<String' List<IMyCubeBlock>> zoneList = DockingZone.GetZonesInGrid (cubeGrid);  		if (zoneList == null)  			continue;  		// Get zones  		foreach (KeyValuePair<String' List<IMyCubeBlock>> p in zoneList) {  			// Check if we're inside  			if (DockingZone.IsGridInside ((IMyCubeGrid)parent' p.Value)) {  				if (!m_playersInside.Contains (playerId)) {  					m_playersInside.Add (playerId);  					ulong steamId = PlayerMap.Instance.GetSteamIdFromPlayerId (playerId);  					Communication.Notification (steamId' MyFontEnum.Green' 7' string.Format ("You are inside a valid docking zone: {0}"' p.Key));  				}  				return;  			}  		}  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessDockingZone,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessDockingZone.cs,CheckPlayerInDockingZone,The following statement contains a magic number: if (m_zoneCache.Contains (cubeGrid)) {  	Dictionary<String' List<IMyCubeBlock>> zoneList = DockingZone.GetZonesInGrid (cubeGrid);  	if (zoneList == null)  		continue;  	// Get zones  	foreach (KeyValuePair<String' List<IMyCubeBlock>> p in zoneList) {  		// Check if we're inside  		if (DockingZone.IsGridInside ((IMyCubeGrid)parent' p.Value)) {  			if (!m_playersInside.Contains (playerId)) {  				m_playersInside.Add (playerId);  				ulong steamId = PlayerMap.Instance.GetSteamIdFromPlayerId (playerId);  				Communication.Notification (steamId' MyFontEnum.Green' 7' string.Format ("You are inside a valid docking zone: {0}"' p.Key));  			}  			return;  		}  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessDockingZone,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessDockingZone.cs,CheckPlayerInDockingZone,The following statement contains a magic number: foreach (KeyValuePair<String' List<IMyCubeBlock>> p in zoneList) {  	// Check if we're inside  	if (DockingZone.IsGridInside ((IMyCubeGrid)parent' p.Value)) {  		if (!m_playersInside.Contains (playerId)) {  			m_playersInside.Add (playerId);  			ulong steamId = PlayerMap.Instance.GetSteamIdFromPlayerId (playerId);  			Communication.Notification (steamId' MyFontEnum.Green' 7' string.Format ("You are inside a valid docking zone: {0}"' p.Key));  		}  		return;  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessDockingZone,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessDockingZone.cs,CheckPlayerInDockingZone,The following statement contains a magic number: if (DockingZone.IsGridInside ((IMyCubeGrid)parent' p.Value)) {  	if (!m_playersInside.Contains (playerId)) {  		m_playersInside.Add (playerId);  		ulong steamId = PlayerMap.Instance.GetSteamIdFromPlayerId (playerId);  		Communication.Notification (steamId' MyFontEnum.Green' 7' string.Format ("You are inside a valid docking zone: {0}"' p.Key));  	}  	return;  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessDockingZone,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessDockingZone.cs,CheckPlayerInDockingZone,The following statement contains a magic number: if (!m_playersInside.Contains (playerId)) {  	m_playersInside.Add (playerId);  	ulong steamId = PlayerMap.Instance.GetSteamIdFromPlayerId (playerId);  	Communication.Notification (steamId' MyFontEnum.Green' 7' string.Format ("You are inside a valid docking zone: {0}"' p.Key));  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessDockingZone,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessDockingZone.cs,CheckPlayerInDockingZone,The following statement contains a magic number: Communication.Notification (steamId' MyFontEnum.Green' 7' string.Format ("You are inside a valid docking zone: {0}"' p.Key));  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessDockingZone,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessDockingZone.cs,CheckPlayerInDockingZone,The following statement contains a magic number: if (m_playersInside.Contains (playerId)) {  	m_playersInside.Remove (playerId);  	ulong steamId = PlayerMap.Instance.GetSteamIdFromPlayerId (playerId);  	Communication.Notification (steamId' MyFontEnum.Red' 7' "You have left a docking zone");  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessDockingZone,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessDockingZone.cs,CheckPlayerInDockingZone,The following statement contains a magic number: Communication.Notification (steamId' MyFontEnum.Red' 7' "You have left a docking zone");  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessBlocks,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessBlocks.cs,GetUpdateResolution,The following statement contains a magic number: return 1000;  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessBlocks,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessBlocks.cs,Handle,The following statement contains a magic number: if (PluginSettings.Instance.DynamicBlockManagementEnabled) {  	if (DateTime.Now - _lastEnableCheck > TimeSpan.FromSeconds (6)) {  		BlockManagement.Instance.CheckAndEnableBlocks ();  		_lastEnableCheck = DateTime.Now;  	}  	if (DateTime.Now - _lastDisableCheck > TimeSpan.FromSeconds (30)) {  		BlockManagement.Instance.CheckAndDisableBlocks ();  		_lastDisableCheck = DateTime.Now;  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessBlocks,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessBlocks.cs,Handle,The following statement contains a magic number: if (PluginSettings.Instance.DynamicBlockManagementEnabled) {  	if (DateTime.Now - _lastEnableCheck > TimeSpan.FromSeconds (6)) {  		BlockManagement.Instance.CheckAndEnableBlocks ();  		_lastEnableCheck = DateTime.Now;  	}  	if (DateTime.Now - _lastDisableCheck > TimeSpan.FromSeconds (30)) {  		BlockManagement.Instance.CheckAndDisableBlocks ();  		_lastDisableCheck = DateTime.Now;  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessBlocks,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessBlocks.cs,Handle,The following statement contains a magic number: if (DateTime.Now - _lastEnableCheck > TimeSpan.FromSeconds (6)) {  	BlockManagement.Instance.CheckAndEnableBlocks ();  	_lastEnableCheck = DateTime.Now;  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessBlocks,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessBlocks.cs,Handle,The following statement contains a magic number: if (DateTime.Now - _lastDisableCheck > TimeSpan.FromSeconds (30)) {  	BlockManagement.Instance.CheckAndDisableBlocks ();  	_lastDisableCheck = DateTime.Now;  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessTurrets,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessTurrets.cs,GetUpdateResolution,The following statement contains a magic number: return 1000;  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessTurrets,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessTurrets.cs,Handle,The following statement contains a magic number: if (PluginSettings.Instance.DynamicTurretManagmentEnabled) {  	if (DateTime.Now - m_lastEnableCheck > TimeSpan.FromSeconds (6)) {  		TurretManagement.CheckAndEnableTurrets ();  		m_lastEnableCheck = DateTime.Now;  	}  	if (DateTime.Now - m_lastDisableCheck > TimeSpan.FromSeconds (45)) {  		TurretManagement.CheckAndDisableTurrets ();  		m_lastDisableCheck = DateTime.Now;  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessTurrets,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessTurrets.cs,Handle,The following statement contains a magic number: if (PluginSettings.Instance.DynamicTurretManagmentEnabled) {  	if (DateTime.Now - m_lastEnableCheck > TimeSpan.FromSeconds (6)) {  		TurretManagement.CheckAndEnableTurrets ();  		m_lastEnableCheck = DateTime.Now;  	}  	if (DateTime.Now - m_lastDisableCheck > TimeSpan.FromSeconds (45)) {  		TurretManagement.CheckAndDisableTurrets ();  		m_lastDisableCheck = DateTime.Now;  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessTurrets,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessTurrets.cs,Handle,The following statement contains a magic number: if (DateTime.Now - m_lastEnableCheck > TimeSpan.FromSeconds (6)) {  	TurretManagement.CheckAndEnableTurrets ();  	m_lastEnableCheck = DateTime.Now;  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessTurrets,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessTurrets.cs,Handle,The following statement contains a magic number: if (DateTime.Now - m_lastDisableCheck > TimeSpan.FromSeconds (45)) {  	TurretManagement.CheckAndDisableTurrets ();  	m_lastDisableCheck = DateTime.Now;  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessConquest,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessConquest.cs,GetUpdateResolution,The following statement contains a magic number: return 30000;  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessLoginTracking,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessLoginTracking.cs,GetUpdateResolution,The following statement contains a magic number: return 10000;  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessSpawnShipTracking,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessSpawnShipTracking.cs,GetUpdateResolution,The following statement contains a magic number: return 5000;  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessSpawnShipTracking,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessSpawnShipTracking.cs,Handle,The following statement contains a magic number: if (PluginSettings.Instance.NewUserTransportStopRunawaySpawnShips) {  	if (DateTime.Now - m_lastUpdate > TimeSpan.FromSeconds (5)) {  		m_lastUpdate = DateTime.Now;  		HashSet<IMyEntity> entities = new HashSet<IMyEntity> ();  		try {  			MyAPIGateway.Entities.GetEntities (entities);  		} catch {  			Logging.WriteLineAndConsole (string.Format ("StopRunaway(): Entities busy' skipping"));  			return;  		}  		foreach (IMyEntity entity in entities) {  			if (!(entity is IMyCubeGrid))  				continue;  			bool found = false;  			foreach (string name in PluginSettings.Instance.NewUserTransportSpawnShipNames) {  				if (entity.DisplayName.Contains (name)) {  					found = true;  					break;  				}  			}  			if (!found)  				continue;  			IMyCubeGrid grid = (IMyCubeGrid)entity;  			if (grid.Physics != null) {  				bool foundControlled = false;  				foreach (ulong steamId in PlayerManager.Instance.ConnectedPlayers) {  					long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (steamId);  					IMyEntity testEntity = Player.FindControlledEntity (playerId);  					if (testEntity == entity) {  						foundControlled = true;  						break;  						;  					}  				}  				if (foundControlled)  					continue;  				Wrapper.GameAction (() => {  					try {  						double linear = Math.Round (((Vector3)grid.Physics.LinearVelocity).LengthSquared ()' 1);  						double angular = Math.Round (((Vector3)grid.Physics.AngularVelocity).LengthSquared ()' 1);  						if (linear > 0 || angular > 0) {  							grid.Physics.LinearVelocity = Vector3.Zero;  							grid.Physics.AngularVelocity = Vector3.Zero;  							Logging.WriteLineAndConsole (string.Format ("Stopping runaway spawnship: {0}"' grid.EntityId));  						}  					} catch (Exception ex) {  						Logging.WriteLineAndConsole (string.Format ("Error stopping spawnship: {0}"' ex.ToString ()));  					}  				});  			}  		}  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessSpawnShipTracking,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessSpawnShipTracking.cs,Handle,The following statement contains a magic number: if (DateTime.Now - m_lastUpdate > TimeSpan.FromSeconds (5)) {  	m_lastUpdate = DateTime.Now;  	HashSet<IMyEntity> entities = new HashSet<IMyEntity> ();  	try {  		MyAPIGateway.Entities.GetEntities (entities);  	} catch {  		Logging.WriteLineAndConsole (string.Format ("StopRunaway(): Entities busy' skipping"));  		return;  	}  	foreach (IMyEntity entity in entities) {  		if (!(entity is IMyCubeGrid))  			continue;  		bool found = false;  		foreach (string name in PluginSettings.Instance.NewUserTransportSpawnShipNames) {  			if (entity.DisplayName.Contains (name)) {  				found = true;  				break;  			}  		}  		if (!found)  			continue;  		IMyCubeGrid grid = (IMyCubeGrid)entity;  		if (grid.Physics != null) {  			bool foundControlled = false;  			foreach (ulong steamId in PlayerManager.Instance.ConnectedPlayers) {  				long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (steamId);  				IMyEntity testEntity = Player.FindControlledEntity (playerId);  				if (testEntity == entity) {  					foundControlled = true;  					break;  					;  				}  			}  			if (foundControlled)  				continue;  			Wrapper.GameAction (() => {  				try {  					double linear = Math.Round (((Vector3)grid.Physics.LinearVelocity).LengthSquared ()' 1);  					double angular = Math.Round (((Vector3)grid.Physics.AngularVelocity).LengthSquared ()' 1);  					if (linear > 0 || angular > 0) {  						grid.Physics.LinearVelocity = Vector3.Zero;  						grid.Physics.AngularVelocity = Vector3.Zero;  						Logging.WriteLineAndConsole (string.Format ("Stopping runaway spawnship: {0}"' grid.EntityId));  					}  				} catch (Exception ex) {  					Logging.WriteLineAndConsole (string.Format ("Error stopping spawnship: {0}"' ex.ToString ()));  				}  			});  		}  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessWaypoints,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessWaypoints.cs,GetUpdateResolution,The following statement contains a magic number: return 5000;  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessProtection,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessProtection.cs,GetUpdateResolution,The following statement contains a magic number: return 1000;  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessProtection,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessProtection.cs,ProtectedEntity,The following statement contains a magic number: while (gridEntity.IsLoading) {  	if (count >= 20)  		return;  	Thread.Sleep (100);  	count++;  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessProtection,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessProtection.cs,ProtectedEntity,The following statement contains a magic number: while (gridEntity.IsLoading) {  	if (count >= 20)  		return;  	Thread.Sleep (100);  	count++;  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessProtection,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessProtection.cs,ProtectedEntity,The following statement contains a magic number: if (count >= 20)  	return;  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessProtection,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessProtection.cs,ProtectedEntity,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessCommunication,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessCommunication.cs,GetUpdateResolution,The following statement contains a magic number: return 400;  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessCommunication,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessCommunication.cs,AddGlobalRelay,The following statement contains a magic number: foreach (ChatHandlerBase chatBase in Essentials.ChatHandlers) {  	if (chatBase.GetMultipleCommandText ().Length > 0) {  		foreach (string cmd in chatBase.GetMultipleCommandText ()) {  			string[] command = cmd.Split (new char[] {  				' '  			}' 2);  			if (!commands.Contains (command [0]))  				commands.Add (command [0]);  		}  	} else {  		string[] command = chatBase.GetCommandText ().Split (new char[] {  			' '  		}' 2);  		if (!commands.Contains (command [0]))  			commands.Add (command [0]);  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessCommunication,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessCommunication.cs,AddGlobalRelay,The following statement contains a magic number: foreach (ChatHandlerBase chatBase in Essentials.ChatHandlers) {  	if (chatBase.GetMultipleCommandText ().Length > 0) {  		foreach (string cmd in chatBase.GetMultipleCommandText ()) {  			string[] command = cmd.Split (new char[] {  				' '  			}' 2);  			if (!commands.Contains (command [0]))  				commands.Add (command [0]);  		}  	} else {  		string[] command = chatBase.GetCommandText ().Split (new char[] {  			' '  		}' 2);  		if (!commands.Contains (command [0]))  			commands.Add (command [0]);  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessCommunication,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessCommunication.cs,AddGlobalRelay,The following statement contains a magic number: if (chatBase.GetMultipleCommandText ().Length > 0) {  	foreach (string cmd in chatBase.GetMultipleCommandText ()) {  		string[] command = cmd.Split (new char[] {  			' '  		}' 2);  		if (!commands.Contains (command [0]))  			commands.Add (command [0]);  	}  } else {  	string[] command = chatBase.GetCommandText ().Split (new char[] {  		' '  	}' 2);  	if (!commands.Contains (command [0]))  		commands.Add (command [0]);  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessCommunication,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessCommunication.cs,AddGlobalRelay,The following statement contains a magic number: if (chatBase.GetMultipleCommandText ().Length > 0) {  	foreach (string cmd in chatBase.GetMultipleCommandText ()) {  		string[] command = cmd.Split (new char[] {  			' '  		}' 2);  		if (!commands.Contains (command [0]))  			commands.Add (command [0]);  	}  } else {  	string[] command = chatBase.GetCommandText ().Split (new char[] {  		' '  	}' 2);  	if (!commands.Contains (command [0]))  		commands.Add (command [0]);  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessCommunication,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessCommunication.cs,AddGlobalRelay,The following statement contains a magic number: foreach (string cmd in chatBase.GetMultipleCommandText ()) {  	string[] command = cmd.Split (new char[] {  		' '  	}' 2);  	if (!commands.Contains (command [0]))  		commands.Add (command [0]);  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessRespawn,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessRespawn.cs,GetUpdateResolution,The following statement contains a magic number: return 1000;  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessRespawn,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessRespawn.cs,Handle,The following statement contains a magic number: foreach (IMyPlayer player in players) {  	if (player.Controller != null && player.Controller.ControlledEntity != null && player.Controller.ControlledEntity.Entity != null) {  		IMyEntity entity = player.Controller.ControlledEntity.Entity;  		if (entity is IMyCharacter) {  			MyObjectBuilder_Character character = (MyObjectBuilder_Character)entity.GetObjectBuilder ();  			if (character.Health < 1 && !m_deathTracker.ContainsKey (entity.EntityId)) {  				m_deathTracker.Add (entity.EntityId' DateTime.Now);  				Logging.WriteLineAndConsole (string.Format ("Found a dead character"));  			} else if (character.Health < 1 && m_deathTracker.ContainsKey (entity.EntityId) && !m_respawnShown.Contains (entity.EntityId) && (DateTime.Now - m_deathTracker [entity.EntityId]).TotalSeconds > 3) {  				m_respawnShown.Add (entity.EntityId);  				Wrapper.GameAction (() => {  					ServerNetworkManager.ShowRespawnMenu (player.SteamUserId);  				});  			}  		}  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessRespawn,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessRespawn.cs,Handle,The following statement contains a magic number: if (player.Controller != null && player.Controller.ControlledEntity != null && player.Controller.ControlledEntity.Entity != null) {  	IMyEntity entity = player.Controller.ControlledEntity.Entity;  	if (entity is IMyCharacter) {  		MyObjectBuilder_Character character = (MyObjectBuilder_Character)entity.GetObjectBuilder ();  		if (character.Health < 1 && !m_deathTracker.ContainsKey (entity.EntityId)) {  			m_deathTracker.Add (entity.EntityId' DateTime.Now);  			Logging.WriteLineAndConsole (string.Format ("Found a dead character"));  		} else if (character.Health < 1 && m_deathTracker.ContainsKey (entity.EntityId) && !m_respawnShown.Contains (entity.EntityId) && (DateTime.Now - m_deathTracker [entity.EntityId]).TotalSeconds > 3) {  			m_respawnShown.Add (entity.EntityId);  			Wrapper.GameAction (() => {  				ServerNetworkManager.ShowRespawnMenu (player.SteamUserId);  			});  		}  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessRespawn,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessRespawn.cs,Handle,The following statement contains a magic number: if (entity is IMyCharacter) {  	MyObjectBuilder_Character character = (MyObjectBuilder_Character)entity.GetObjectBuilder ();  	if (character.Health < 1 && !m_deathTracker.ContainsKey (entity.EntityId)) {  		m_deathTracker.Add (entity.EntityId' DateTime.Now);  		Logging.WriteLineAndConsole (string.Format ("Found a dead character"));  	} else if (character.Health < 1 && m_deathTracker.ContainsKey (entity.EntityId) && !m_respawnShown.Contains (entity.EntityId) && (DateTime.Now - m_deathTracker [entity.EntityId]).TotalSeconds > 3) {  		m_respawnShown.Add (entity.EntityId);  		Wrapper.GameAction (() => {  			ServerNetworkManager.ShowRespawnMenu (player.SteamUserId);  		});  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessRespawn,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessRespawn.cs,Handle,The following statement contains a magic number: if (character.Health < 1 && !m_deathTracker.ContainsKey (entity.EntityId)) {  	m_deathTracker.Add (entity.EntityId' DateTime.Now);  	Logging.WriteLineAndConsole (string.Format ("Found a dead character"));  } else if (character.Health < 1 && m_deathTracker.ContainsKey (entity.EntityId) && !m_respawnShown.Contains (entity.EntityId) && (DateTime.Now - m_deathTracker [entity.EntityId]).TotalSeconds > 3) {  	m_respawnShown.Add (entity.EntityId);  	Wrapper.GameAction (() => {  		ServerNetworkManager.ShowRespawnMenu (player.SteamUserId);  	});  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessRespawn,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessRespawn.cs,Handle,The following statement contains a magic number: if (character.Health < 1 && m_deathTracker.ContainsKey (entity.EntityId) && !m_respawnShown.Contains (entity.EntityId) && (DateTime.Now - m_deathTracker [entity.EntityId]).TotalSeconds > 3) {  	m_respawnShown.Add (entity.EntityId);  	Wrapper.GameAction (() => {  		ServerNetworkManager.ShowRespawnMenu (player.SteamUserId);  	});  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessNewUserTransport,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessNewUserTransport.cs,GetUpdateResolution,The following statement contains a magic number: return 500;  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessNewUserTransport,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessNewUserTransport.cs,TransportPlayer,The following statement contains a magic number: if (entity is IMyCharacter) {  	MyObjectBuilder_Character c = (MyObjectBuilder_Character)entity.GetObjectBuilder ();  	if (c.Health < 1)  		return;  	Thread.Sleep (50);  	BoundingSphereD sphere = new BoundingSphereD (entity.GetTopMostParent ().GetPosition ()' 300);  	List<IMyEntity> entities = MyAPIGateway.Entities.GetEntitiesInSphere (ref sphere);  	bool found = false;  	foreach (IMyEntity testEntity in entities) {  		if (testEntity == entity)  			continue;  		found = true;  		break;  	}  	if (found)  		return;  	MoveEntity (entity);  } else if (entity is IMyCubeGrid) {  	foreach (string name in PluginSettings.Instance.NewUserTransportSpawnShipNames) {  		if (entity.DisplayName.ToLower ().Contains (name.ToLower ())) {  			if (PluginSettings.Instance.DynamicClientConcealEnabled) {  				//ClientEntityManagement.SyncFix.Add(entity.EntityId' DateTime.Now);  			}  			MoveEntity (entity);  			break;  		}  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessNewUserTransport,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessNewUserTransport.cs,TransportPlayer,The following statement contains a magic number: if (entity is IMyCharacter) {  	MyObjectBuilder_Character c = (MyObjectBuilder_Character)entity.GetObjectBuilder ();  	if (c.Health < 1)  		return;  	Thread.Sleep (50);  	BoundingSphereD sphere = new BoundingSphereD (entity.GetTopMostParent ().GetPosition ()' 300);  	List<IMyEntity> entities = MyAPIGateway.Entities.GetEntitiesInSphere (ref sphere);  	bool found = false;  	foreach (IMyEntity testEntity in entities) {  		if (testEntity == entity)  			continue;  		found = true;  		break;  	}  	if (found)  		return;  	MoveEntity (entity);  } else if (entity is IMyCubeGrid) {  	foreach (string name in PluginSettings.Instance.NewUserTransportSpawnShipNames) {  		if (entity.DisplayName.ToLower ().Contains (name.ToLower ())) {  			if (PluginSettings.Instance.DynamicClientConcealEnabled) {  				//ClientEntityManagement.SyncFix.Add(entity.EntityId' DateTime.Now);  			}  			MoveEntity (entity);  			break;  		}  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessNewUserTransport,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessNewUserTransport.cs,TransportPlayer,The following statement contains a magic number: Thread.Sleep (50);  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessNewUserTransport,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessNewUserTransport.cs,MoveEntity,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,GetUpdateResolution,The following statement contains a magic number: return 1000;  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,Handle,The following statement contains a magic number: if (PluginSettings.Instance.GreetingMessage != "") {  	if (MyAPIGateway.Players == null)  		return;  	int pos = 0;  	try {  		List<IMyPlayer> players = new List<IMyPlayer> ();  		pos = 1;  		bool result = false;  		Wrapper.GameAction (() => {  			try {  				MyAPIGateway.Players.GetPlayers (players' null);  				result = true;  			} catch (Exception ex) {  				Logging.WriteLineAndConsole (string.Format ("Failed to get player list: {0}"' ex.ToString ()));  			}  		});  		if (!result)  			return;  		pos = 2;  		lock (m_greetingList) {  			for (int r = m_greetingList.Count - 1; r >= 0; r--) {  				pos = 3;  				GreetingItem item = m_greetingList [r];  				if (DateTime.Now - item.Start > item.Timeout) {  					m_greetingList.RemoveAt (r);  					continue;  				}  				pos = 4;  				IMyPlayer player = players.FirstOrDefault (x => x.SteamUserId == item.SteamId && x.Controller != null && x.Controller.ControlledEntity != null);  				pos = 5;  				if (player != null) {  					pos = 6;  					m_greetingList.RemoveAt (r);  					string message = "";  					if (item.IsNewUser)  						message = PluginSettings.Instance.GreetingNewUserMessage.Replace ("%name%"' player.DisplayName);  					else  						message = PluginSettings.Instance.GreetingMessage.Replace ("%name%"' player.DisplayName);  					message = message.Replace ("%name%"' player.DisplayName);  					message = message.Replace ("%players%"' players.Count.ToString ());  					message = message.Replace ("%maxplayers%"' MyAPIGateway.Session.SessionSettings.MaxPlayers.ToString ());  					string finalMessage = message;  					if (PluginSettings.Instance.GreetingPublic)  						Communication.SendPublicInformation (finalMessage);  					else  						Communication.SendPrivateInformation (item.SteamId' finalMessage);  					if (item.IsNewUser) {  						if (PluginSettings.Instance.GreetingNewUserItem.Enabled) {  							SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingNewUserItem;  							Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  						}  					} else {  						if (PluginSettings.Instance.GreetingItem.Enabled) {  							SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingItem;  							Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  						}  					}  				}  			}  			pos = 7;  		}  	} catch (Exception ex) {  		Logging.WriteLineAndConsole (string.Format ("Handle(): Error at pos - {0}: {1}"' pos' ex.ToString ()));  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,Handle,The following statement contains a magic number: if (PluginSettings.Instance.GreetingMessage != "") {  	if (MyAPIGateway.Players == null)  		return;  	int pos = 0;  	try {  		List<IMyPlayer> players = new List<IMyPlayer> ();  		pos = 1;  		bool result = false;  		Wrapper.GameAction (() => {  			try {  				MyAPIGateway.Players.GetPlayers (players' null);  				result = true;  			} catch (Exception ex) {  				Logging.WriteLineAndConsole (string.Format ("Failed to get player list: {0}"' ex.ToString ()));  			}  		});  		if (!result)  			return;  		pos = 2;  		lock (m_greetingList) {  			for (int r = m_greetingList.Count - 1; r >= 0; r--) {  				pos = 3;  				GreetingItem item = m_greetingList [r];  				if (DateTime.Now - item.Start > item.Timeout) {  					m_greetingList.RemoveAt (r);  					continue;  				}  				pos = 4;  				IMyPlayer player = players.FirstOrDefault (x => x.SteamUserId == item.SteamId && x.Controller != null && x.Controller.ControlledEntity != null);  				pos = 5;  				if (player != null) {  					pos = 6;  					m_greetingList.RemoveAt (r);  					string message = "";  					if (item.IsNewUser)  						message = PluginSettings.Instance.GreetingNewUserMessage.Replace ("%name%"' player.DisplayName);  					else  						message = PluginSettings.Instance.GreetingMessage.Replace ("%name%"' player.DisplayName);  					message = message.Replace ("%name%"' player.DisplayName);  					message = message.Replace ("%players%"' players.Count.ToString ());  					message = message.Replace ("%maxplayers%"' MyAPIGateway.Session.SessionSettings.MaxPlayers.ToString ());  					string finalMessage = message;  					if (PluginSettings.Instance.GreetingPublic)  						Communication.SendPublicInformation (finalMessage);  					else  						Communication.SendPrivateInformation (item.SteamId' finalMessage);  					if (item.IsNewUser) {  						if (PluginSettings.Instance.GreetingNewUserItem.Enabled) {  							SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingNewUserItem;  							Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  						}  					} else {  						if (PluginSettings.Instance.GreetingItem.Enabled) {  							SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingItem;  							Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  						}  					}  				}  			}  			pos = 7;  		}  	} catch (Exception ex) {  		Logging.WriteLineAndConsole (string.Format ("Handle(): Error at pos - {0}: {1}"' pos' ex.ToString ()));  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,Handle,The following statement contains a magic number: if (PluginSettings.Instance.GreetingMessage != "") {  	if (MyAPIGateway.Players == null)  		return;  	int pos = 0;  	try {  		List<IMyPlayer> players = new List<IMyPlayer> ();  		pos = 1;  		bool result = false;  		Wrapper.GameAction (() => {  			try {  				MyAPIGateway.Players.GetPlayers (players' null);  				result = true;  			} catch (Exception ex) {  				Logging.WriteLineAndConsole (string.Format ("Failed to get player list: {0}"' ex.ToString ()));  			}  		});  		if (!result)  			return;  		pos = 2;  		lock (m_greetingList) {  			for (int r = m_greetingList.Count - 1; r >= 0; r--) {  				pos = 3;  				GreetingItem item = m_greetingList [r];  				if (DateTime.Now - item.Start > item.Timeout) {  					m_greetingList.RemoveAt (r);  					continue;  				}  				pos = 4;  				IMyPlayer player = players.FirstOrDefault (x => x.SteamUserId == item.SteamId && x.Controller != null && x.Controller.ControlledEntity != null);  				pos = 5;  				if (player != null) {  					pos = 6;  					m_greetingList.RemoveAt (r);  					string message = "";  					if (item.IsNewUser)  						message = PluginSettings.Instance.GreetingNewUserMessage.Replace ("%name%"' player.DisplayName);  					else  						message = PluginSettings.Instance.GreetingMessage.Replace ("%name%"' player.DisplayName);  					message = message.Replace ("%name%"' player.DisplayName);  					message = message.Replace ("%players%"' players.Count.ToString ());  					message = message.Replace ("%maxplayers%"' MyAPIGateway.Session.SessionSettings.MaxPlayers.ToString ());  					string finalMessage = message;  					if (PluginSettings.Instance.GreetingPublic)  						Communication.SendPublicInformation (finalMessage);  					else  						Communication.SendPrivateInformation (item.SteamId' finalMessage);  					if (item.IsNewUser) {  						if (PluginSettings.Instance.GreetingNewUserItem.Enabled) {  							SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingNewUserItem;  							Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  						}  					} else {  						if (PluginSettings.Instance.GreetingItem.Enabled) {  							SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingItem;  							Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  						}  					}  				}  			}  			pos = 7;  		}  	} catch (Exception ex) {  		Logging.WriteLineAndConsole (string.Format ("Handle(): Error at pos - {0}: {1}"' pos' ex.ToString ()));  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,Handle,The following statement contains a magic number: if (PluginSettings.Instance.GreetingMessage != "") {  	if (MyAPIGateway.Players == null)  		return;  	int pos = 0;  	try {  		List<IMyPlayer> players = new List<IMyPlayer> ();  		pos = 1;  		bool result = false;  		Wrapper.GameAction (() => {  			try {  				MyAPIGateway.Players.GetPlayers (players' null);  				result = true;  			} catch (Exception ex) {  				Logging.WriteLineAndConsole (string.Format ("Failed to get player list: {0}"' ex.ToString ()));  			}  		});  		if (!result)  			return;  		pos = 2;  		lock (m_greetingList) {  			for (int r = m_greetingList.Count - 1; r >= 0; r--) {  				pos = 3;  				GreetingItem item = m_greetingList [r];  				if (DateTime.Now - item.Start > item.Timeout) {  					m_greetingList.RemoveAt (r);  					continue;  				}  				pos = 4;  				IMyPlayer player = players.FirstOrDefault (x => x.SteamUserId == item.SteamId && x.Controller != null && x.Controller.ControlledEntity != null);  				pos = 5;  				if (player != null) {  					pos = 6;  					m_greetingList.RemoveAt (r);  					string message = "";  					if (item.IsNewUser)  						message = PluginSettings.Instance.GreetingNewUserMessage.Replace ("%name%"' player.DisplayName);  					else  						message = PluginSettings.Instance.GreetingMessage.Replace ("%name%"' player.DisplayName);  					message = message.Replace ("%name%"' player.DisplayName);  					message = message.Replace ("%players%"' players.Count.ToString ());  					message = message.Replace ("%maxplayers%"' MyAPIGateway.Session.SessionSettings.MaxPlayers.ToString ());  					string finalMessage = message;  					if (PluginSettings.Instance.GreetingPublic)  						Communication.SendPublicInformation (finalMessage);  					else  						Communication.SendPrivateInformation (item.SteamId' finalMessage);  					if (item.IsNewUser) {  						if (PluginSettings.Instance.GreetingNewUserItem.Enabled) {  							SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingNewUserItem;  							Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  						}  					} else {  						if (PluginSettings.Instance.GreetingItem.Enabled) {  							SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingItem;  							Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  						}  					}  				}  			}  			pos = 7;  		}  	} catch (Exception ex) {  		Logging.WriteLineAndConsole (string.Format ("Handle(): Error at pos - {0}: {1}"' pos' ex.ToString ()));  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,Handle,The following statement contains a magic number: if (PluginSettings.Instance.GreetingMessage != "") {  	if (MyAPIGateway.Players == null)  		return;  	int pos = 0;  	try {  		List<IMyPlayer> players = new List<IMyPlayer> ();  		pos = 1;  		bool result = false;  		Wrapper.GameAction (() => {  			try {  				MyAPIGateway.Players.GetPlayers (players' null);  				result = true;  			} catch (Exception ex) {  				Logging.WriteLineAndConsole (string.Format ("Failed to get player list: {0}"' ex.ToString ()));  			}  		});  		if (!result)  			return;  		pos = 2;  		lock (m_greetingList) {  			for (int r = m_greetingList.Count - 1; r >= 0; r--) {  				pos = 3;  				GreetingItem item = m_greetingList [r];  				if (DateTime.Now - item.Start > item.Timeout) {  					m_greetingList.RemoveAt (r);  					continue;  				}  				pos = 4;  				IMyPlayer player = players.FirstOrDefault (x => x.SteamUserId == item.SteamId && x.Controller != null && x.Controller.ControlledEntity != null);  				pos = 5;  				if (player != null) {  					pos = 6;  					m_greetingList.RemoveAt (r);  					string message = "";  					if (item.IsNewUser)  						message = PluginSettings.Instance.GreetingNewUserMessage.Replace ("%name%"' player.DisplayName);  					else  						message = PluginSettings.Instance.GreetingMessage.Replace ("%name%"' player.DisplayName);  					message = message.Replace ("%name%"' player.DisplayName);  					message = message.Replace ("%players%"' players.Count.ToString ());  					message = message.Replace ("%maxplayers%"' MyAPIGateway.Session.SessionSettings.MaxPlayers.ToString ());  					string finalMessage = message;  					if (PluginSettings.Instance.GreetingPublic)  						Communication.SendPublicInformation (finalMessage);  					else  						Communication.SendPrivateInformation (item.SteamId' finalMessage);  					if (item.IsNewUser) {  						if (PluginSettings.Instance.GreetingNewUserItem.Enabled) {  							SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingNewUserItem;  							Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  						}  					} else {  						if (PluginSettings.Instance.GreetingItem.Enabled) {  							SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingItem;  							Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  						}  					}  				}  			}  			pos = 7;  		}  	} catch (Exception ex) {  		Logging.WriteLineAndConsole (string.Format ("Handle(): Error at pos - {0}: {1}"' pos' ex.ToString ()));  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,Handle,The following statement contains a magic number: if (PluginSettings.Instance.GreetingMessage != "") {  	if (MyAPIGateway.Players == null)  		return;  	int pos = 0;  	try {  		List<IMyPlayer> players = new List<IMyPlayer> ();  		pos = 1;  		bool result = false;  		Wrapper.GameAction (() => {  			try {  				MyAPIGateway.Players.GetPlayers (players' null);  				result = true;  			} catch (Exception ex) {  				Logging.WriteLineAndConsole (string.Format ("Failed to get player list: {0}"' ex.ToString ()));  			}  		});  		if (!result)  			return;  		pos = 2;  		lock (m_greetingList) {  			for (int r = m_greetingList.Count - 1; r >= 0; r--) {  				pos = 3;  				GreetingItem item = m_greetingList [r];  				if (DateTime.Now - item.Start > item.Timeout) {  					m_greetingList.RemoveAt (r);  					continue;  				}  				pos = 4;  				IMyPlayer player = players.FirstOrDefault (x => x.SteamUserId == item.SteamId && x.Controller != null && x.Controller.ControlledEntity != null);  				pos = 5;  				if (player != null) {  					pos = 6;  					m_greetingList.RemoveAt (r);  					string message = "";  					if (item.IsNewUser)  						message = PluginSettings.Instance.GreetingNewUserMessage.Replace ("%name%"' player.DisplayName);  					else  						message = PluginSettings.Instance.GreetingMessage.Replace ("%name%"' player.DisplayName);  					message = message.Replace ("%name%"' player.DisplayName);  					message = message.Replace ("%players%"' players.Count.ToString ());  					message = message.Replace ("%maxplayers%"' MyAPIGateway.Session.SessionSettings.MaxPlayers.ToString ());  					string finalMessage = message;  					if (PluginSettings.Instance.GreetingPublic)  						Communication.SendPublicInformation (finalMessage);  					else  						Communication.SendPrivateInformation (item.SteamId' finalMessage);  					if (item.IsNewUser) {  						if (PluginSettings.Instance.GreetingNewUserItem.Enabled) {  							SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingNewUserItem;  							Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  						}  					} else {  						if (PluginSettings.Instance.GreetingItem.Enabled) {  							SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingItem;  							Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  						}  					}  				}  			}  			pos = 7;  		}  	} catch (Exception ex) {  		Logging.WriteLineAndConsole (string.Format ("Handle(): Error at pos - {0}: {1}"' pos' ex.ToString ()));  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,Handle,The following statement contains a magic number: try {  	List<IMyPlayer> players = new List<IMyPlayer> ();  	pos = 1;  	bool result = false;  	Wrapper.GameAction (() => {  		try {  			MyAPIGateway.Players.GetPlayers (players' null);  			result = true;  		} catch (Exception ex) {  			Logging.WriteLineAndConsole (string.Format ("Failed to get player list: {0}"' ex.ToString ()));  		}  	});  	if (!result)  		return;  	pos = 2;  	lock (m_greetingList) {  		for (int r = m_greetingList.Count - 1; r >= 0; r--) {  			pos = 3;  			GreetingItem item = m_greetingList [r];  			if (DateTime.Now - item.Start > item.Timeout) {  				m_greetingList.RemoveAt (r);  				continue;  			}  			pos = 4;  			IMyPlayer player = players.FirstOrDefault (x => x.SteamUserId == item.SteamId && x.Controller != null && x.Controller.ControlledEntity != null);  			pos = 5;  			if (player != null) {  				pos = 6;  				m_greetingList.RemoveAt (r);  				string message = "";  				if (item.IsNewUser)  					message = PluginSettings.Instance.GreetingNewUserMessage.Replace ("%name%"' player.DisplayName);  				else  					message = PluginSettings.Instance.GreetingMessage.Replace ("%name%"' player.DisplayName);  				message = message.Replace ("%name%"' player.DisplayName);  				message = message.Replace ("%players%"' players.Count.ToString ());  				message = message.Replace ("%maxplayers%"' MyAPIGateway.Session.SessionSettings.MaxPlayers.ToString ());  				string finalMessage = message;  				if (PluginSettings.Instance.GreetingPublic)  					Communication.SendPublicInformation (finalMessage);  				else  					Communication.SendPrivateInformation (item.SteamId' finalMessage);  				if (item.IsNewUser) {  					if (PluginSettings.Instance.GreetingNewUserItem.Enabled) {  						SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingNewUserItem;  						Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  					}  				} else {  					if (PluginSettings.Instance.GreetingItem.Enabled) {  						SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingItem;  						Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  					}  				}  			}  		}  		pos = 7;  	}  } catch (Exception ex) {  	Logging.WriteLineAndConsole (string.Format ("Handle(): Error at pos - {0}: {1}"' pos' ex.ToString ()));  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,Handle,The following statement contains a magic number: try {  	List<IMyPlayer> players = new List<IMyPlayer> ();  	pos = 1;  	bool result = false;  	Wrapper.GameAction (() => {  		try {  			MyAPIGateway.Players.GetPlayers (players' null);  			result = true;  		} catch (Exception ex) {  			Logging.WriteLineAndConsole (string.Format ("Failed to get player list: {0}"' ex.ToString ()));  		}  	});  	if (!result)  		return;  	pos = 2;  	lock (m_greetingList) {  		for (int r = m_greetingList.Count - 1; r >= 0; r--) {  			pos = 3;  			GreetingItem item = m_greetingList [r];  			if (DateTime.Now - item.Start > item.Timeout) {  				m_greetingList.RemoveAt (r);  				continue;  			}  			pos = 4;  			IMyPlayer player = players.FirstOrDefault (x => x.SteamUserId == item.SteamId && x.Controller != null && x.Controller.ControlledEntity != null);  			pos = 5;  			if (player != null) {  				pos = 6;  				m_greetingList.RemoveAt (r);  				string message = "";  				if (item.IsNewUser)  					message = PluginSettings.Instance.GreetingNewUserMessage.Replace ("%name%"' player.DisplayName);  				else  					message = PluginSettings.Instance.GreetingMessage.Replace ("%name%"' player.DisplayName);  				message = message.Replace ("%name%"' player.DisplayName);  				message = message.Replace ("%players%"' players.Count.ToString ());  				message = message.Replace ("%maxplayers%"' MyAPIGateway.Session.SessionSettings.MaxPlayers.ToString ());  				string finalMessage = message;  				if (PluginSettings.Instance.GreetingPublic)  					Communication.SendPublicInformation (finalMessage);  				else  					Communication.SendPrivateInformation (item.SteamId' finalMessage);  				if (item.IsNewUser) {  					if (PluginSettings.Instance.GreetingNewUserItem.Enabled) {  						SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingNewUserItem;  						Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  					}  				} else {  					if (PluginSettings.Instance.GreetingItem.Enabled) {  						SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingItem;  						Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  					}  				}  			}  		}  		pos = 7;  	}  } catch (Exception ex) {  	Logging.WriteLineAndConsole (string.Format ("Handle(): Error at pos - {0}: {1}"' pos' ex.ToString ()));  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,Handle,The following statement contains a magic number: try {  	List<IMyPlayer> players = new List<IMyPlayer> ();  	pos = 1;  	bool result = false;  	Wrapper.GameAction (() => {  		try {  			MyAPIGateway.Players.GetPlayers (players' null);  			result = true;  		} catch (Exception ex) {  			Logging.WriteLineAndConsole (string.Format ("Failed to get player list: {0}"' ex.ToString ()));  		}  	});  	if (!result)  		return;  	pos = 2;  	lock (m_greetingList) {  		for (int r = m_greetingList.Count - 1; r >= 0; r--) {  			pos = 3;  			GreetingItem item = m_greetingList [r];  			if (DateTime.Now - item.Start > item.Timeout) {  				m_greetingList.RemoveAt (r);  				continue;  			}  			pos = 4;  			IMyPlayer player = players.FirstOrDefault (x => x.SteamUserId == item.SteamId && x.Controller != null && x.Controller.ControlledEntity != null);  			pos = 5;  			if (player != null) {  				pos = 6;  				m_greetingList.RemoveAt (r);  				string message = "";  				if (item.IsNewUser)  					message = PluginSettings.Instance.GreetingNewUserMessage.Replace ("%name%"' player.DisplayName);  				else  					message = PluginSettings.Instance.GreetingMessage.Replace ("%name%"' player.DisplayName);  				message = message.Replace ("%name%"' player.DisplayName);  				message = message.Replace ("%players%"' players.Count.ToString ());  				message = message.Replace ("%maxplayers%"' MyAPIGateway.Session.SessionSettings.MaxPlayers.ToString ());  				string finalMessage = message;  				if (PluginSettings.Instance.GreetingPublic)  					Communication.SendPublicInformation (finalMessage);  				else  					Communication.SendPrivateInformation (item.SteamId' finalMessage);  				if (item.IsNewUser) {  					if (PluginSettings.Instance.GreetingNewUserItem.Enabled) {  						SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingNewUserItem;  						Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  					}  				} else {  					if (PluginSettings.Instance.GreetingItem.Enabled) {  						SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingItem;  						Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  					}  				}  			}  		}  		pos = 7;  	}  } catch (Exception ex) {  	Logging.WriteLineAndConsole (string.Format ("Handle(): Error at pos - {0}: {1}"' pos' ex.ToString ()));  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,Handle,The following statement contains a magic number: try {  	List<IMyPlayer> players = new List<IMyPlayer> ();  	pos = 1;  	bool result = false;  	Wrapper.GameAction (() => {  		try {  			MyAPIGateway.Players.GetPlayers (players' null);  			result = true;  		} catch (Exception ex) {  			Logging.WriteLineAndConsole (string.Format ("Failed to get player list: {0}"' ex.ToString ()));  		}  	});  	if (!result)  		return;  	pos = 2;  	lock (m_greetingList) {  		for (int r = m_greetingList.Count - 1; r >= 0; r--) {  			pos = 3;  			GreetingItem item = m_greetingList [r];  			if (DateTime.Now - item.Start > item.Timeout) {  				m_greetingList.RemoveAt (r);  				continue;  			}  			pos = 4;  			IMyPlayer player = players.FirstOrDefault (x => x.SteamUserId == item.SteamId && x.Controller != null && x.Controller.ControlledEntity != null);  			pos = 5;  			if (player != null) {  				pos = 6;  				m_greetingList.RemoveAt (r);  				string message = "";  				if (item.IsNewUser)  					message = PluginSettings.Instance.GreetingNewUserMessage.Replace ("%name%"' player.DisplayName);  				else  					message = PluginSettings.Instance.GreetingMessage.Replace ("%name%"' player.DisplayName);  				message = message.Replace ("%name%"' player.DisplayName);  				message = message.Replace ("%players%"' players.Count.ToString ());  				message = message.Replace ("%maxplayers%"' MyAPIGateway.Session.SessionSettings.MaxPlayers.ToString ());  				string finalMessage = message;  				if (PluginSettings.Instance.GreetingPublic)  					Communication.SendPublicInformation (finalMessage);  				else  					Communication.SendPrivateInformation (item.SteamId' finalMessage);  				if (item.IsNewUser) {  					if (PluginSettings.Instance.GreetingNewUserItem.Enabled) {  						SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingNewUserItem;  						Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  					}  				} else {  					if (PluginSettings.Instance.GreetingItem.Enabled) {  						SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingItem;  						Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  					}  				}  			}  		}  		pos = 7;  	}  } catch (Exception ex) {  	Logging.WriteLineAndConsole (string.Format ("Handle(): Error at pos - {0}: {1}"' pos' ex.ToString ()));  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,Handle,The following statement contains a magic number: try {  	List<IMyPlayer> players = new List<IMyPlayer> ();  	pos = 1;  	bool result = false;  	Wrapper.GameAction (() => {  		try {  			MyAPIGateway.Players.GetPlayers (players' null);  			result = true;  		} catch (Exception ex) {  			Logging.WriteLineAndConsole (string.Format ("Failed to get player list: {0}"' ex.ToString ()));  		}  	});  	if (!result)  		return;  	pos = 2;  	lock (m_greetingList) {  		for (int r = m_greetingList.Count - 1; r >= 0; r--) {  			pos = 3;  			GreetingItem item = m_greetingList [r];  			if (DateTime.Now - item.Start > item.Timeout) {  				m_greetingList.RemoveAt (r);  				continue;  			}  			pos = 4;  			IMyPlayer player = players.FirstOrDefault (x => x.SteamUserId == item.SteamId && x.Controller != null && x.Controller.ControlledEntity != null);  			pos = 5;  			if (player != null) {  				pos = 6;  				m_greetingList.RemoveAt (r);  				string message = "";  				if (item.IsNewUser)  					message = PluginSettings.Instance.GreetingNewUserMessage.Replace ("%name%"' player.DisplayName);  				else  					message = PluginSettings.Instance.GreetingMessage.Replace ("%name%"' player.DisplayName);  				message = message.Replace ("%name%"' player.DisplayName);  				message = message.Replace ("%players%"' players.Count.ToString ());  				message = message.Replace ("%maxplayers%"' MyAPIGateway.Session.SessionSettings.MaxPlayers.ToString ());  				string finalMessage = message;  				if (PluginSettings.Instance.GreetingPublic)  					Communication.SendPublicInformation (finalMessage);  				else  					Communication.SendPrivateInformation (item.SteamId' finalMessage);  				if (item.IsNewUser) {  					if (PluginSettings.Instance.GreetingNewUserItem.Enabled) {  						SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingNewUserItem;  						Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  					}  				} else {  					if (PluginSettings.Instance.GreetingItem.Enabled) {  						SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingItem;  						Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  					}  				}  			}  		}  		pos = 7;  	}  } catch (Exception ex) {  	Logging.WriteLineAndConsole (string.Format ("Handle(): Error at pos - {0}: {1}"' pos' ex.ToString ()));  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,Handle,The following statement contains a magic number: try {  	List<IMyPlayer> players = new List<IMyPlayer> ();  	pos = 1;  	bool result = false;  	Wrapper.GameAction (() => {  		try {  			MyAPIGateway.Players.GetPlayers (players' null);  			result = true;  		} catch (Exception ex) {  			Logging.WriteLineAndConsole (string.Format ("Failed to get player list: {0}"' ex.ToString ()));  		}  	});  	if (!result)  		return;  	pos = 2;  	lock (m_greetingList) {  		for (int r = m_greetingList.Count - 1; r >= 0; r--) {  			pos = 3;  			GreetingItem item = m_greetingList [r];  			if (DateTime.Now - item.Start > item.Timeout) {  				m_greetingList.RemoveAt (r);  				continue;  			}  			pos = 4;  			IMyPlayer player = players.FirstOrDefault (x => x.SteamUserId == item.SteamId && x.Controller != null && x.Controller.ControlledEntity != null);  			pos = 5;  			if (player != null) {  				pos = 6;  				m_greetingList.RemoveAt (r);  				string message = "";  				if (item.IsNewUser)  					message = PluginSettings.Instance.GreetingNewUserMessage.Replace ("%name%"' player.DisplayName);  				else  					message = PluginSettings.Instance.GreetingMessage.Replace ("%name%"' player.DisplayName);  				message = message.Replace ("%name%"' player.DisplayName);  				message = message.Replace ("%players%"' players.Count.ToString ());  				message = message.Replace ("%maxplayers%"' MyAPIGateway.Session.SessionSettings.MaxPlayers.ToString ());  				string finalMessage = message;  				if (PluginSettings.Instance.GreetingPublic)  					Communication.SendPublicInformation (finalMessage);  				else  					Communication.SendPrivateInformation (item.SteamId' finalMessage);  				if (item.IsNewUser) {  					if (PluginSettings.Instance.GreetingNewUserItem.Enabled) {  						SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingNewUserItem;  						Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  					}  				} else {  					if (PluginSettings.Instance.GreetingItem.Enabled) {  						SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingItem;  						Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  					}  				}  			}  		}  		pos = 7;  	}  } catch (Exception ex) {  	Logging.WriteLineAndConsole (string.Format ("Handle(): Error at pos - {0}: {1}"' pos' ex.ToString ()));  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,Handle,The following statement contains a magic number: pos = 2;  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,Handle,The following statement contains a magic number: lock (m_greetingList) {  	for (int r = m_greetingList.Count - 1; r >= 0; r--) {  		pos = 3;  		GreetingItem item = m_greetingList [r];  		if (DateTime.Now - item.Start > item.Timeout) {  			m_greetingList.RemoveAt (r);  			continue;  		}  		pos = 4;  		IMyPlayer player = players.FirstOrDefault (x => x.SteamUserId == item.SteamId && x.Controller != null && x.Controller.ControlledEntity != null);  		pos = 5;  		if (player != null) {  			pos = 6;  			m_greetingList.RemoveAt (r);  			string message = "";  			if (item.IsNewUser)  				message = PluginSettings.Instance.GreetingNewUserMessage.Replace ("%name%"' player.DisplayName);  			else  				message = PluginSettings.Instance.GreetingMessage.Replace ("%name%"' player.DisplayName);  			message = message.Replace ("%name%"' player.DisplayName);  			message = message.Replace ("%players%"' players.Count.ToString ());  			message = message.Replace ("%maxplayers%"' MyAPIGateway.Session.SessionSettings.MaxPlayers.ToString ());  			string finalMessage = message;  			if (PluginSettings.Instance.GreetingPublic)  				Communication.SendPublicInformation (finalMessage);  			else  				Communication.SendPrivateInformation (item.SteamId' finalMessage);  			if (item.IsNewUser) {  				if (PluginSettings.Instance.GreetingNewUserItem.Enabled) {  					SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingNewUserItem;  					Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  				}  			} else {  				if (PluginSettings.Instance.GreetingItem.Enabled) {  					SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingItem;  					Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  				}  			}  		}  	}  	pos = 7;  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,Handle,The following statement contains a magic number: lock (m_greetingList) {  	for (int r = m_greetingList.Count - 1; r >= 0; r--) {  		pos = 3;  		GreetingItem item = m_greetingList [r];  		if (DateTime.Now - item.Start > item.Timeout) {  			m_greetingList.RemoveAt (r);  			continue;  		}  		pos = 4;  		IMyPlayer player = players.FirstOrDefault (x => x.SteamUserId == item.SteamId && x.Controller != null && x.Controller.ControlledEntity != null);  		pos = 5;  		if (player != null) {  			pos = 6;  			m_greetingList.RemoveAt (r);  			string message = "";  			if (item.IsNewUser)  				message = PluginSettings.Instance.GreetingNewUserMessage.Replace ("%name%"' player.DisplayName);  			else  				message = PluginSettings.Instance.GreetingMessage.Replace ("%name%"' player.DisplayName);  			message = message.Replace ("%name%"' player.DisplayName);  			message = message.Replace ("%players%"' players.Count.ToString ());  			message = message.Replace ("%maxplayers%"' MyAPIGateway.Session.SessionSettings.MaxPlayers.ToString ());  			string finalMessage = message;  			if (PluginSettings.Instance.GreetingPublic)  				Communication.SendPublicInformation (finalMessage);  			else  				Communication.SendPrivateInformation (item.SteamId' finalMessage);  			if (item.IsNewUser) {  				if (PluginSettings.Instance.GreetingNewUserItem.Enabled) {  					SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingNewUserItem;  					Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  				}  			} else {  				if (PluginSettings.Instance.GreetingItem.Enabled) {  					SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingItem;  					Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  				}  			}  		}  	}  	pos = 7;  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,Handle,The following statement contains a magic number: lock (m_greetingList) {  	for (int r = m_greetingList.Count - 1; r >= 0; r--) {  		pos = 3;  		GreetingItem item = m_greetingList [r];  		if (DateTime.Now - item.Start > item.Timeout) {  			m_greetingList.RemoveAt (r);  			continue;  		}  		pos = 4;  		IMyPlayer player = players.FirstOrDefault (x => x.SteamUserId == item.SteamId && x.Controller != null && x.Controller.ControlledEntity != null);  		pos = 5;  		if (player != null) {  			pos = 6;  			m_greetingList.RemoveAt (r);  			string message = "";  			if (item.IsNewUser)  				message = PluginSettings.Instance.GreetingNewUserMessage.Replace ("%name%"' player.DisplayName);  			else  				message = PluginSettings.Instance.GreetingMessage.Replace ("%name%"' player.DisplayName);  			message = message.Replace ("%name%"' player.DisplayName);  			message = message.Replace ("%players%"' players.Count.ToString ());  			message = message.Replace ("%maxplayers%"' MyAPIGateway.Session.SessionSettings.MaxPlayers.ToString ());  			string finalMessage = message;  			if (PluginSettings.Instance.GreetingPublic)  				Communication.SendPublicInformation (finalMessage);  			else  				Communication.SendPrivateInformation (item.SteamId' finalMessage);  			if (item.IsNewUser) {  				if (PluginSettings.Instance.GreetingNewUserItem.Enabled) {  					SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingNewUserItem;  					Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  				}  			} else {  				if (PluginSettings.Instance.GreetingItem.Enabled) {  					SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingItem;  					Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  				}  			}  		}  	}  	pos = 7;  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,Handle,The following statement contains a magic number: lock (m_greetingList) {  	for (int r = m_greetingList.Count - 1; r >= 0; r--) {  		pos = 3;  		GreetingItem item = m_greetingList [r];  		if (DateTime.Now - item.Start > item.Timeout) {  			m_greetingList.RemoveAt (r);  			continue;  		}  		pos = 4;  		IMyPlayer player = players.FirstOrDefault (x => x.SteamUserId == item.SteamId && x.Controller != null && x.Controller.ControlledEntity != null);  		pos = 5;  		if (player != null) {  			pos = 6;  			m_greetingList.RemoveAt (r);  			string message = "";  			if (item.IsNewUser)  				message = PluginSettings.Instance.GreetingNewUserMessage.Replace ("%name%"' player.DisplayName);  			else  				message = PluginSettings.Instance.GreetingMessage.Replace ("%name%"' player.DisplayName);  			message = message.Replace ("%name%"' player.DisplayName);  			message = message.Replace ("%players%"' players.Count.ToString ());  			message = message.Replace ("%maxplayers%"' MyAPIGateway.Session.SessionSettings.MaxPlayers.ToString ());  			string finalMessage = message;  			if (PluginSettings.Instance.GreetingPublic)  				Communication.SendPublicInformation (finalMessage);  			else  				Communication.SendPrivateInformation (item.SteamId' finalMessage);  			if (item.IsNewUser) {  				if (PluginSettings.Instance.GreetingNewUserItem.Enabled) {  					SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingNewUserItem;  					Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  				}  			} else {  				if (PluginSettings.Instance.GreetingItem.Enabled) {  					SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingItem;  					Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  				}  			}  		}  	}  	pos = 7;  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,Handle,The following statement contains a magic number: lock (m_greetingList) {  	for (int r = m_greetingList.Count - 1; r >= 0; r--) {  		pos = 3;  		GreetingItem item = m_greetingList [r];  		if (DateTime.Now - item.Start > item.Timeout) {  			m_greetingList.RemoveAt (r);  			continue;  		}  		pos = 4;  		IMyPlayer player = players.FirstOrDefault (x => x.SteamUserId == item.SteamId && x.Controller != null && x.Controller.ControlledEntity != null);  		pos = 5;  		if (player != null) {  			pos = 6;  			m_greetingList.RemoveAt (r);  			string message = "";  			if (item.IsNewUser)  				message = PluginSettings.Instance.GreetingNewUserMessage.Replace ("%name%"' player.DisplayName);  			else  				message = PluginSettings.Instance.GreetingMessage.Replace ("%name%"' player.DisplayName);  			message = message.Replace ("%name%"' player.DisplayName);  			message = message.Replace ("%players%"' players.Count.ToString ());  			message = message.Replace ("%maxplayers%"' MyAPIGateway.Session.SessionSettings.MaxPlayers.ToString ());  			string finalMessage = message;  			if (PluginSettings.Instance.GreetingPublic)  				Communication.SendPublicInformation (finalMessage);  			else  				Communication.SendPrivateInformation (item.SteamId' finalMessage);  			if (item.IsNewUser) {  				if (PluginSettings.Instance.GreetingNewUserItem.Enabled) {  					SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingNewUserItem;  					Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  				}  			} else {  				if (PluginSettings.Instance.GreetingItem.Enabled) {  					SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingItem;  					Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  				}  			}  		}  	}  	pos = 7;  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,Handle,The following statement contains a magic number: for (int r = m_greetingList.Count - 1; r >= 0; r--) {  	pos = 3;  	GreetingItem item = m_greetingList [r];  	if (DateTime.Now - item.Start > item.Timeout) {  		m_greetingList.RemoveAt (r);  		continue;  	}  	pos = 4;  	IMyPlayer player = players.FirstOrDefault (x => x.SteamUserId == item.SteamId && x.Controller != null && x.Controller.ControlledEntity != null);  	pos = 5;  	if (player != null) {  		pos = 6;  		m_greetingList.RemoveAt (r);  		string message = "";  		if (item.IsNewUser)  			message = PluginSettings.Instance.GreetingNewUserMessage.Replace ("%name%"' player.DisplayName);  		else  			message = PluginSettings.Instance.GreetingMessage.Replace ("%name%"' player.DisplayName);  		message = message.Replace ("%name%"' player.DisplayName);  		message = message.Replace ("%players%"' players.Count.ToString ());  		message = message.Replace ("%maxplayers%"' MyAPIGateway.Session.SessionSettings.MaxPlayers.ToString ());  		string finalMessage = message;  		if (PluginSettings.Instance.GreetingPublic)  			Communication.SendPublicInformation (finalMessage);  		else  			Communication.SendPrivateInformation (item.SteamId' finalMessage);  		if (item.IsNewUser) {  			if (PluginSettings.Instance.GreetingNewUserItem.Enabled) {  				SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingNewUserItem;  				Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  			}  		} else {  			if (PluginSettings.Instance.GreetingItem.Enabled) {  				SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingItem;  				Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  			}  		}  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,Handle,The following statement contains a magic number: for (int r = m_greetingList.Count - 1; r >= 0; r--) {  	pos = 3;  	GreetingItem item = m_greetingList [r];  	if (DateTime.Now - item.Start > item.Timeout) {  		m_greetingList.RemoveAt (r);  		continue;  	}  	pos = 4;  	IMyPlayer player = players.FirstOrDefault (x => x.SteamUserId == item.SteamId && x.Controller != null && x.Controller.ControlledEntity != null);  	pos = 5;  	if (player != null) {  		pos = 6;  		m_greetingList.RemoveAt (r);  		string message = "";  		if (item.IsNewUser)  			message = PluginSettings.Instance.GreetingNewUserMessage.Replace ("%name%"' player.DisplayName);  		else  			message = PluginSettings.Instance.GreetingMessage.Replace ("%name%"' player.DisplayName);  		message = message.Replace ("%name%"' player.DisplayName);  		message = message.Replace ("%players%"' players.Count.ToString ());  		message = message.Replace ("%maxplayers%"' MyAPIGateway.Session.SessionSettings.MaxPlayers.ToString ());  		string finalMessage = message;  		if (PluginSettings.Instance.GreetingPublic)  			Communication.SendPublicInformation (finalMessage);  		else  			Communication.SendPrivateInformation (item.SteamId' finalMessage);  		if (item.IsNewUser) {  			if (PluginSettings.Instance.GreetingNewUserItem.Enabled) {  				SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingNewUserItem;  				Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  			}  		} else {  			if (PluginSettings.Instance.GreetingItem.Enabled) {  				SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingItem;  				Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  			}  		}  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,Handle,The following statement contains a magic number: for (int r = m_greetingList.Count - 1; r >= 0; r--) {  	pos = 3;  	GreetingItem item = m_greetingList [r];  	if (DateTime.Now - item.Start > item.Timeout) {  		m_greetingList.RemoveAt (r);  		continue;  	}  	pos = 4;  	IMyPlayer player = players.FirstOrDefault (x => x.SteamUserId == item.SteamId && x.Controller != null && x.Controller.ControlledEntity != null);  	pos = 5;  	if (player != null) {  		pos = 6;  		m_greetingList.RemoveAt (r);  		string message = "";  		if (item.IsNewUser)  			message = PluginSettings.Instance.GreetingNewUserMessage.Replace ("%name%"' player.DisplayName);  		else  			message = PluginSettings.Instance.GreetingMessage.Replace ("%name%"' player.DisplayName);  		message = message.Replace ("%name%"' player.DisplayName);  		message = message.Replace ("%players%"' players.Count.ToString ());  		message = message.Replace ("%maxplayers%"' MyAPIGateway.Session.SessionSettings.MaxPlayers.ToString ());  		string finalMessage = message;  		if (PluginSettings.Instance.GreetingPublic)  			Communication.SendPublicInformation (finalMessage);  		else  			Communication.SendPrivateInformation (item.SteamId' finalMessage);  		if (item.IsNewUser) {  			if (PluginSettings.Instance.GreetingNewUserItem.Enabled) {  				SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingNewUserItem;  				Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  			}  		} else {  			if (PluginSettings.Instance.GreetingItem.Enabled) {  				SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingItem;  				Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  			}  		}  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,Handle,The following statement contains a magic number: for (int r = m_greetingList.Count - 1; r >= 0; r--) {  	pos = 3;  	GreetingItem item = m_greetingList [r];  	if (DateTime.Now - item.Start > item.Timeout) {  		m_greetingList.RemoveAt (r);  		continue;  	}  	pos = 4;  	IMyPlayer player = players.FirstOrDefault (x => x.SteamUserId == item.SteamId && x.Controller != null && x.Controller.ControlledEntity != null);  	pos = 5;  	if (player != null) {  		pos = 6;  		m_greetingList.RemoveAt (r);  		string message = "";  		if (item.IsNewUser)  			message = PluginSettings.Instance.GreetingNewUserMessage.Replace ("%name%"' player.DisplayName);  		else  			message = PluginSettings.Instance.GreetingMessage.Replace ("%name%"' player.DisplayName);  		message = message.Replace ("%name%"' player.DisplayName);  		message = message.Replace ("%players%"' players.Count.ToString ());  		message = message.Replace ("%maxplayers%"' MyAPIGateway.Session.SessionSettings.MaxPlayers.ToString ());  		string finalMessage = message;  		if (PluginSettings.Instance.GreetingPublic)  			Communication.SendPublicInformation (finalMessage);  		else  			Communication.SendPrivateInformation (item.SteamId' finalMessage);  		if (item.IsNewUser) {  			if (PluginSettings.Instance.GreetingNewUserItem.Enabled) {  				SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingNewUserItem;  				Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  			}  		} else {  			if (PluginSettings.Instance.GreetingItem.Enabled) {  				SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingItem;  				Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  			}  		}  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,Handle,The following statement contains a magic number: pos = 3;  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,Handle,The following statement contains a magic number: pos = 4;  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,Handle,The following statement contains a magic number: pos = 5;  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,Handle,The following statement contains a magic number: if (player != null) {  	pos = 6;  	m_greetingList.RemoveAt (r);  	string message = "";  	if (item.IsNewUser)  		message = PluginSettings.Instance.GreetingNewUserMessage.Replace ("%name%"' player.DisplayName);  	else  		message = PluginSettings.Instance.GreetingMessage.Replace ("%name%"' player.DisplayName);  	message = message.Replace ("%name%"' player.DisplayName);  	message = message.Replace ("%players%"' players.Count.ToString ());  	message = message.Replace ("%maxplayers%"' MyAPIGateway.Session.SessionSettings.MaxPlayers.ToString ());  	string finalMessage = message;  	if (PluginSettings.Instance.GreetingPublic)  		Communication.SendPublicInformation (finalMessage);  	else  		Communication.SendPrivateInformation (item.SteamId' finalMessage);  	if (item.IsNewUser) {  		if (PluginSettings.Instance.GreetingNewUserItem.Enabled) {  			SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingNewUserItem;  			Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  		}  	} else {  		if (PluginSettings.Instance.GreetingItem.Enabled) {  			SettingsGreetingDialogItem gItem = PluginSettings.Instance.GreetingItem;  			Communication.SendClientMessage (item.SteamId' string.Format ("/dialog \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\""' gItem.Title.Replace ("%name%"' player.DisplayName)' gItem.Header.Replace ("%name%"' player.DisplayName)' " "' gItem.Contents.Replace ("%name%"' player.DisplayName).Replace ("\r"' "").Replace ("\n"' "|").Replace ("\""' "'")' gItem.ButtonText));  		}  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,Handle,The following statement contains a magic number: pos = 6;  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,Handle,The following statement contains a magic number: pos = 7;  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessGreeting,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessGreeting.cs,OnPlayerJoined,The following statement contains a magic number: item.Timeout = TimeSpan.FromMinutes (10);  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessHandlerBase,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessHandlerBase.cs,GetUpdateResolution,The following statement contains a magic number: return 1000;  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessInfo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessInfo.cs,GetUpdateResolution,The following statement contains a magic number: return 5000;  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessInfo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessInfo.cs,Handle,The following statement contains a magic number: if (PluginSettings.Instance.InformationEnabled) {  	foreach (InformationItem item in PluginSettings.Instance.InformationItems) {  		if (!item.Enabled)  			continue;  		if (item.SubText == "")  			continue;  		if (item.IntervalSeconds < 1)  			continue;  		if (DateTime.Now - item.lastUpdate > TimeSpan.FromSeconds (item.IntervalSeconds)) {  			item.lastUpdate = DateTime.Now;  			if (item.SubText.ToLower ().Contains ("%name%")) {  				foreach (ulong userId in PlayerManager.Instance.ConnectedPlayers) {  					string userName = PlayerMap.Instance.GetPlayerNameFromSteamId (userId);  					string subText = item.SubText.Replace ("%name%"' userName).Split (new string[] {  						"\n"  					}' 2' StringSplitOptions.None) [item.position];  					item.position++;  					if (item.position >= item.SubText.Replace ("%name%"' userName).Split (new string[] {  						"\n"  					}' 2' StringSplitOptions.None).Count ())  						item.position = 0;  					Communication.SendPrivateInformation (userId' subText);  				}  			} else {  				string subText = item.SubText.Split (new string[] {  					"\n"  				}' StringSplitOptions.None) [item.position];  				item.position++;  				if (item.position >= item.SubText.Split (new string[] {  					"\n"  				}' StringSplitOptions.None).Count ())  					item.position = 0;  				Communication.SendPublicInformation (subText);  			}  		}  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessInfo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessInfo.cs,Handle,The following statement contains a magic number: if (PluginSettings.Instance.InformationEnabled) {  	foreach (InformationItem item in PluginSettings.Instance.InformationItems) {  		if (!item.Enabled)  			continue;  		if (item.SubText == "")  			continue;  		if (item.IntervalSeconds < 1)  			continue;  		if (DateTime.Now - item.lastUpdate > TimeSpan.FromSeconds (item.IntervalSeconds)) {  			item.lastUpdate = DateTime.Now;  			if (item.SubText.ToLower ().Contains ("%name%")) {  				foreach (ulong userId in PlayerManager.Instance.ConnectedPlayers) {  					string userName = PlayerMap.Instance.GetPlayerNameFromSteamId (userId);  					string subText = item.SubText.Replace ("%name%"' userName).Split (new string[] {  						"\n"  					}' 2' StringSplitOptions.None) [item.position];  					item.position++;  					if (item.position >= item.SubText.Replace ("%name%"' userName).Split (new string[] {  						"\n"  					}' 2' StringSplitOptions.None).Count ())  						item.position = 0;  					Communication.SendPrivateInformation (userId' subText);  				}  			} else {  				string subText = item.SubText.Split (new string[] {  					"\n"  				}' StringSplitOptions.None) [item.position];  				item.position++;  				if (item.position >= item.SubText.Split (new string[] {  					"\n"  				}' StringSplitOptions.None).Count ())  					item.position = 0;  				Communication.SendPublicInformation (subText);  			}  		}  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessInfo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessInfo.cs,Handle,The following statement contains a magic number: foreach (InformationItem item in PluginSettings.Instance.InformationItems) {  	if (!item.Enabled)  		continue;  	if (item.SubText == "")  		continue;  	if (item.IntervalSeconds < 1)  		continue;  	if (DateTime.Now - item.lastUpdate > TimeSpan.FromSeconds (item.IntervalSeconds)) {  		item.lastUpdate = DateTime.Now;  		if (item.SubText.ToLower ().Contains ("%name%")) {  			foreach (ulong userId in PlayerManager.Instance.ConnectedPlayers) {  				string userName = PlayerMap.Instance.GetPlayerNameFromSteamId (userId);  				string subText = item.SubText.Replace ("%name%"' userName).Split (new string[] {  					"\n"  				}' 2' StringSplitOptions.None) [item.position];  				item.position++;  				if (item.position >= item.SubText.Replace ("%name%"' userName).Split (new string[] {  					"\n"  				}' 2' StringSplitOptions.None).Count ())  					item.position = 0;  				Communication.SendPrivateInformation (userId' subText);  			}  		} else {  			string subText = item.SubText.Split (new string[] {  				"\n"  			}' StringSplitOptions.None) [item.position];  			item.position++;  			if (item.position >= item.SubText.Split (new string[] {  				"\n"  			}' StringSplitOptions.None).Count ())  				item.position = 0;  			Communication.SendPublicInformation (subText);  		}  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessInfo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessInfo.cs,Handle,The following statement contains a magic number: foreach (InformationItem item in PluginSettings.Instance.InformationItems) {  	if (!item.Enabled)  		continue;  	if (item.SubText == "")  		continue;  	if (item.IntervalSeconds < 1)  		continue;  	if (DateTime.Now - item.lastUpdate > TimeSpan.FromSeconds (item.IntervalSeconds)) {  		item.lastUpdate = DateTime.Now;  		if (item.SubText.ToLower ().Contains ("%name%")) {  			foreach (ulong userId in PlayerManager.Instance.ConnectedPlayers) {  				string userName = PlayerMap.Instance.GetPlayerNameFromSteamId (userId);  				string subText = item.SubText.Replace ("%name%"' userName).Split (new string[] {  					"\n"  				}' 2' StringSplitOptions.None) [item.position];  				item.position++;  				if (item.position >= item.SubText.Replace ("%name%"' userName).Split (new string[] {  					"\n"  				}' 2' StringSplitOptions.None).Count ())  					item.position = 0;  				Communication.SendPrivateInformation (userId' subText);  			}  		} else {  			string subText = item.SubText.Split (new string[] {  				"\n"  			}' StringSplitOptions.None) [item.position];  			item.position++;  			if (item.position >= item.SubText.Split (new string[] {  				"\n"  			}' StringSplitOptions.None).Count ())  				item.position = 0;  			Communication.SendPublicInformation (subText);  		}  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessInfo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessInfo.cs,Handle,The following statement contains a magic number: if (DateTime.Now - item.lastUpdate > TimeSpan.FromSeconds (item.IntervalSeconds)) {  	item.lastUpdate = DateTime.Now;  	if (item.SubText.ToLower ().Contains ("%name%")) {  		foreach (ulong userId in PlayerManager.Instance.ConnectedPlayers) {  			string userName = PlayerMap.Instance.GetPlayerNameFromSteamId (userId);  			string subText = item.SubText.Replace ("%name%"' userName).Split (new string[] {  				"\n"  			}' 2' StringSplitOptions.None) [item.position];  			item.position++;  			if (item.position >= item.SubText.Replace ("%name%"' userName).Split (new string[] {  				"\n"  			}' 2' StringSplitOptions.None).Count ())  				item.position = 0;  			Communication.SendPrivateInformation (userId' subText);  		}  	} else {  		string subText = item.SubText.Split (new string[] {  			"\n"  		}' StringSplitOptions.None) [item.position];  		item.position++;  		if (item.position >= item.SubText.Split (new string[] {  			"\n"  		}' StringSplitOptions.None).Count ())  			item.position = 0;  		Communication.SendPublicInformation (subText);  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessInfo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessInfo.cs,Handle,The following statement contains a magic number: if (DateTime.Now - item.lastUpdate > TimeSpan.FromSeconds (item.IntervalSeconds)) {  	item.lastUpdate = DateTime.Now;  	if (item.SubText.ToLower ().Contains ("%name%")) {  		foreach (ulong userId in PlayerManager.Instance.ConnectedPlayers) {  			string userName = PlayerMap.Instance.GetPlayerNameFromSteamId (userId);  			string subText = item.SubText.Replace ("%name%"' userName).Split (new string[] {  				"\n"  			}' 2' StringSplitOptions.None) [item.position];  			item.position++;  			if (item.position >= item.SubText.Replace ("%name%"' userName).Split (new string[] {  				"\n"  			}' 2' StringSplitOptions.None).Count ())  				item.position = 0;  			Communication.SendPrivateInformation (userId' subText);  		}  	} else {  		string subText = item.SubText.Split (new string[] {  			"\n"  		}' StringSplitOptions.None) [item.position];  		item.position++;  		if (item.position >= item.SubText.Split (new string[] {  			"\n"  		}' StringSplitOptions.None).Count ())  			item.position = 0;  		Communication.SendPublicInformation (subText);  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessInfo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessInfo.cs,Handle,The following statement contains a magic number: if (item.SubText.ToLower ().Contains ("%name%")) {  	foreach (ulong userId in PlayerManager.Instance.ConnectedPlayers) {  		string userName = PlayerMap.Instance.GetPlayerNameFromSteamId (userId);  		string subText = item.SubText.Replace ("%name%"' userName).Split (new string[] {  			"\n"  		}' 2' StringSplitOptions.None) [item.position];  		item.position++;  		if (item.position >= item.SubText.Replace ("%name%"' userName).Split (new string[] {  			"\n"  		}' 2' StringSplitOptions.None).Count ())  			item.position = 0;  		Communication.SendPrivateInformation (userId' subText);  	}  } else {  	string subText = item.SubText.Split (new string[] {  		"\n"  	}' StringSplitOptions.None) [item.position];  	item.position++;  	if (item.position >= item.SubText.Split (new string[] {  		"\n"  	}' StringSplitOptions.None).Count ())  		item.position = 0;  	Communication.SendPublicInformation (subText);  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessInfo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessInfo.cs,Handle,The following statement contains a magic number: if (item.SubText.ToLower ().Contains ("%name%")) {  	foreach (ulong userId in PlayerManager.Instance.ConnectedPlayers) {  		string userName = PlayerMap.Instance.GetPlayerNameFromSteamId (userId);  		string subText = item.SubText.Replace ("%name%"' userName).Split (new string[] {  			"\n"  		}' 2' StringSplitOptions.None) [item.position];  		item.position++;  		if (item.position >= item.SubText.Replace ("%name%"' userName).Split (new string[] {  			"\n"  		}' 2' StringSplitOptions.None).Count ())  			item.position = 0;  		Communication.SendPrivateInformation (userId' subText);  	}  } else {  	string subText = item.SubText.Split (new string[] {  		"\n"  	}' StringSplitOptions.None) [item.position];  	item.position++;  	if (item.position >= item.SubText.Split (new string[] {  		"\n"  	}' StringSplitOptions.None).Count ())  		item.position = 0;  	Communication.SendPublicInformation (subText);  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessInfo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessInfo.cs,Handle,The following statement contains a magic number: foreach (ulong userId in PlayerManager.Instance.ConnectedPlayers) {  	string userName = PlayerMap.Instance.GetPlayerNameFromSteamId (userId);  	string subText = item.SubText.Replace ("%name%"' userName).Split (new string[] {  		"\n"  	}' 2' StringSplitOptions.None) [item.position];  	item.position++;  	if (item.position >= item.SubText.Replace ("%name%"' userName).Split (new string[] {  		"\n"  	}' 2' StringSplitOptions.None).Count ())  		item.position = 0;  	Communication.SendPrivateInformation (userId' subText);  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessInfo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessInfo.cs,Handle,The following statement contains a magic number: foreach (ulong userId in PlayerManager.Instance.ConnectedPlayers) {  	string userName = PlayerMap.Instance.GetPlayerNameFromSteamId (userId);  	string subText = item.SubText.Replace ("%name%"' userName).Split (new string[] {  		"\n"  	}' 2' StringSplitOptions.None) [item.position];  	item.position++;  	if (item.position >= item.SubText.Replace ("%name%"' userName).Split (new string[] {  		"\n"  	}' 2' StringSplitOptions.None).Count ())  		item.position = 0;  	Communication.SendPrivateInformation (userId' subText);  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessInfo,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessInfo.cs,Handle,The following statement contains a magic number: if (item.position >= item.SubText.Replace ("%name%"' userName).Split (new string[] {  	"\n"  }' 2' StringSplitOptions.None).Count ())  	item.position = 0;  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessBackup,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessBackup.cs,GetUpdateResolution,The following statement contains a magic number: return 60000;  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessRestart,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessRestart.cs,GetUpdateResolution,The following statement contains a magic number: return 10000;  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessRestart,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessRestart.cs,Handle,The following statement contains a magic number: foreach (RestartNotificationItem item in PluginSettings.Instance.RestartNotificationItems) {  	if (item.completed)  		continue;  	if (m_done - item.MinutesBeforeRestart < -2)  		continue;  	if (DateTime.Now - m_start > TimeSpan.FromMinutes (m_done - item.MinutesBeforeRestart)) {  		item.completed = true;  		Communication.SendPublicInformation (item.Message);  		if (item.StopAllShips) {  			StopAllShips ();  		}  		if (item.Save) {  			WorldManager.Instance.SaveWorld ();  		}  	}  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessRestart,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessRestart.cs,Handle,The following statement contains a magic number: if (m_done - item.MinutesBeforeRestart < -2)  	continue;  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessRestart,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessRestart.cs,CheckResponse,The following statement contains a magic number: ThreadPool.QueueUserWorkItem ((object state) => {  	DateTime start = DateTime.Now;  	AutoResetEvent are = new AutoResetEvent (false);  	SandboxGameAssemblyWrapper.Instance.EnqueueMainGameAction (() => {  		are.Set ();  	});  	if (!are.WaitOne (120000)) {  		Logging.WriteLineAndConsole ("Server unresponsive for 60 seconds' restarting in 5 seconds.");  		Thread.Sleep (5000);  		DoRestart ();  		return;  	}  	if ((DateTime.Now - start).TotalMilliseconds > 10000)  		Logging.WriteLineAndConsole (string.Format ("Warning: Server Response Time: {0}ms"' (DateTime.Now - start).TotalMilliseconds));  });  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessRestart,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessRestart.cs,CheckResponse,The following statement contains a magic number: ThreadPool.QueueUserWorkItem ((object state) => {  	DateTime start = DateTime.Now;  	AutoResetEvent are = new AutoResetEvent (false);  	SandboxGameAssemblyWrapper.Instance.EnqueueMainGameAction (() => {  		are.Set ();  	});  	if (!are.WaitOne (120000)) {  		Logging.WriteLineAndConsole ("Server unresponsive for 60 seconds' restarting in 5 seconds.");  		Thread.Sleep (5000);  		DoRestart ();  		return;  	}  	if ((DateTime.Now - start).TotalMilliseconds > 10000)  		Logging.WriteLineAndConsole (string.Format ("Warning: Server Response Time: {0}ms"' (DateTime.Now - start).TotalMilliseconds));  });  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessRestart,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessRestart.cs,CheckResponse,The following statement contains a magic number: ThreadPool.QueueUserWorkItem ((object state) => {  	DateTime start = DateTime.Now;  	AutoResetEvent are = new AutoResetEvent (false);  	SandboxGameAssemblyWrapper.Instance.EnqueueMainGameAction (() => {  		are.Set ();  	});  	if (!are.WaitOne (120000)) {  		Logging.WriteLineAndConsole ("Server unresponsive for 60 seconds' restarting in 5 seconds.");  		Thread.Sleep (5000);  		DoRestart ();  		return;  	}  	if ((DateTime.Now - start).TotalMilliseconds > 10000)  		Logging.WriteLineAndConsole (string.Format ("Warning: Server Response Time: {0}ms"' (DateTime.Now - start).TotalMilliseconds));  });  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessRestart,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessRestart.cs,CheckResponse,The following statement contains a magic number: if (!are.WaitOne (120000)) {  	Logging.WriteLineAndConsole ("Server unresponsive for 60 seconds' restarting in 5 seconds.");  	Thread.Sleep (5000);  	DoRestart ();  	return;  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessRestart,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessRestart.cs,CheckResponse,The following statement contains a magic number: if (!are.WaitOne (120000)) {  	Logging.WriteLineAndConsole ("Server unresponsive for 60 seconds' restarting in 5 seconds.");  	Thread.Sleep (5000);  	DoRestart ();  	return;  }  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessRestart,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessRestart.cs,CheckResponse,The following statement contains a magic number: Thread.Sleep (5000);  
Magic Number,EssentialsPlugin.ProcessHandler,ProcessRestart,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\ProcessHandlers\ProcessRestart.cs,CheckResponse,The following statement contains a magic number: if ((DateTime.Now - start).TotalMilliseconds > 10000)  	Logging.WriteLineAndConsole (string.Format ("Warning: Server Response Time: {0}ms"' (DateTime.Now - start).TotalMilliseconds));  
Magic Number,EssentialsPlugin.Utility,TimedEntityCleanup,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\TimedEntityCleanup.cs,Add,The following statement contains a magic number: item.secondsAfterAdding = 5;  
Magic Number,EssentialsPlugin.Utility,Communication,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Communication.cs,SendBroadcastMessage,The following statement contains a magic number: entity.DisplayName = string.Format ("CommRelayBroadcast{0}"' m_random.Next (1' 10000));  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,WaitForLoadingEntity,The following statement contains a magic number: while (grid.IsLoading) {  	Thread.Sleep (100);  	count++;  	if (count > 10)  		return false;  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,WaitForLoadingEntity,The following statement contains a magic number: while (grid.IsLoading) {  	Thread.Sleep (100);  	count++;  	if (count > 10)  		return false;  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,WaitForLoadingEntity,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,WaitForLoadingEntity,The following statement contains a magic number: if (count > 10)  	return false;  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanCleanup,The following statement contains a magic number: if (words.Count () > 0) {  	if (words.FirstOrDefault (x => x.ToLower () == "debug") != null) {  		options ["Debug"] = "true";  		debug = true;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "ignoreownership") != null) {  		options ["Ignore Ownership"] = "true";  		ignoreOwnership = true;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "isowned") != null) {  		options ["Requires Ownership"] = "true";  		requiresOwner = true;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "ignorefunctional") != null) {  		options ["Requires Functional"] = "false";  		requiresFunctional = false;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "ignoreterminal") != null) {  		options ["Requires Terminal"] = "false";  		requiresTerminal = false;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "ignorepower") != null) {  		options ["Requires Valid Power"] = "ignore";  		requiresPower = false;  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")) != null) {  		hasDisplayName = true;  		displayName = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		}) [1];  		options ["Matches Display Name Text"] = "true:" + displayName;  		if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		}).Length > 2 && words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		}) [2] == "exact")  			hasDisplayNameExact = true;  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubType = true;  		options ["Has Sub Block Type"] = "true";  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("limitblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("limitblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubTypeLimits = true;  		options ["Has Sub Block Type Limits"] = "true";  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type Limit: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  		}  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanCleanup,The following statement contains a magic number: if (words.Count () > 0) {  	if (words.FirstOrDefault (x => x.ToLower () == "debug") != null) {  		options ["Debug"] = "true";  		debug = true;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "ignoreownership") != null) {  		options ["Ignore Ownership"] = "true";  		ignoreOwnership = true;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "isowned") != null) {  		options ["Requires Ownership"] = "true";  		requiresOwner = true;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "ignorefunctional") != null) {  		options ["Requires Functional"] = "false";  		requiresFunctional = false;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "ignoreterminal") != null) {  		options ["Requires Terminal"] = "false";  		requiresTerminal = false;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "ignorepower") != null) {  		options ["Requires Valid Power"] = "ignore";  		requiresPower = false;  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")) != null) {  		hasDisplayName = true;  		displayName = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		}) [1];  		options ["Matches Display Name Text"] = "true:" + displayName;  		if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		}).Length > 2 && words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		}) [2] == "exact")  			hasDisplayNameExact = true;  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubType = true;  		options ["Has Sub Block Type"] = "true";  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("limitblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("limitblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubTypeLimits = true;  		options ["Has Sub Block Type Limits"] = "true";  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type Limit: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  		}  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanCleanup,The following statement contains a magic number: if (words.Count () > 0) {  	if (words.FirstOrDefault (x => x.ToLower () == "debug") != null) {  		options ["Debug"] = "true";  		debug = true;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "ignoreownership") != null) {  		options ["Ignore Ownership"] = "true";  		ignoreOwnership = true;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "isowned") != null) {  		options ["Requires Ownership"] = "true";  		requiresOwner = true;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "ignorefunctional") != null) {  		options ["Requires Functional"] = "false";  		requiresFunctional = false;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "ignoreterminal") != null) {  		options ["Requires Terminal"] = "false";  		requiresTerminal = false;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "ignorepower") != null) {  		options ["Requires Valid Power"] = "ignore";  		requiresPower = false;  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")) != null) {  		hasDisplayName = true;  		displayName = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		}) [1];  		options ["Matches Display Name Text"] = "true:" + displayName;  		if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		}).Length > 2 && words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		}) [2] == "exact")  			hasDisplayNameExact = true;  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubType = true;  		options ["Has Sub Block Type"] = "true";  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("limitblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("limitblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubTypeLimits = true;  		options ["Has Sub Block Type Limits"] = "true";  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type Limit: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  		}  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanCleanup,The following statement contains a magic number: if (words.Count () > 0) {  	if (words.FirstOrDefault (x => x.ToLower () == "debug") != null) {  		options ["Debug"] = "true";  		debug = true;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "ignoreownership") != null) {  		options ["Ignore Ownership"] = "true";  		ignoreOwnership = true;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "isowned") != null) {  		options ["Requires Ownership"] = "true";  		requiresOwner = true;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "ignorefunctional") != null) {  		options ["Requires Functional"] = "false";  		requiresFunctional = false;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "ignoreterminal") != null) {  		options ["Requires Terminal"] = "false";  		requiresTerminal = false;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "ignorepower") != null) {  		options ["Requires Valid Power"] = "ignore";  		requiresPower = false;  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")) != null) {  		hasDisplayName = true;  		displayName = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		}) [1];  		options ["Matches Display Name Text"] = "true:" + displayName;  		if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		}).Length > 2 && words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		}) [2] == "exact")  			hasDisplayNameExact = true;  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubType = true;  		options ["Has Sub Block Type"] = "true";  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("limitblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("limitblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubTypeLimits = true;  		options ["Has Sub Block Type Limits"] = "true";  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type Limit: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  		}  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanCleanup,The following statement contains a magic number: if (words.Count () > 0) {  	if (words.FirstOrDefault (x => x.ToLower () == "debug") != null) {  		options ["Debug"] = "true";  		debug = true;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "ignoreownership") != null) {  		options ["Ignore Ownership"] = "true";  		ignoreOwnership = true;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "isowned") != null) {  		options ["Requires Ownership"] = "true";  		requiresOwner = true;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "ignorefunctional") != null) {  		options ["Requires Functional"] = "false";  		requiresFunctional = false;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "ignoreterminal") != null) {  		options ["Requires Terminal"] = "false";  		requiresTerminal = false;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "ignorepower") != null) {  		options ["Requires Valid Power"] = "ignore";  		requiresPower = false;  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")) != null) {  		hasDisplayName = true;  		displayName = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		}) [1];  		options ["Matches Display Name Text"] = "true:" + displayName;  		if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		}).Length > 2 && words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		}) [2] == "exact")  			hasDisplayNameExact = true;  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubType = true;  		options ["Has Sub Block Type"] = "true";  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("limitblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("limitblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubTypeLimits = true;  		options ["Has Sub Block Type Limits"] = "true";  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type Limit: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  		}  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanCleanup,The following statement contains a magic number: if (words.Count () > 0) {  	if (words.FirstOrDefault (x => x.ToLower () == "debug") != null) {  		options ["Debug"] = "true";  		debug = true;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "ignoreownership") != null) {  		options ["Ignore Ownership"] = "true";  		ignoreOwnership = true;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "isowned") != null) {  		options ["Requires Ownership"] = "true";  		requiresOwner = true;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "ignorefunctional") != null) {  		options ["Requires Functional"] = "false";  		requiresFunctional = false;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "ignoreterminal") != null) {  		options ["Requires Terminal"] = "false";  		requiresTerminal = false;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "ignorepower") != null) {  		options ["Requires Valid Power"] = "ignore";  		requiresPower = false;  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")) != null) {  		hasDisplayName = true;  		displayName = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		}) [1];  		options ["Matches Display Name Text"] = "true:" + displayName;  		if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		}).Length > 2 && words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		}) [2] == "exact")  			hasDisplayNameExact = true;  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubType = true;  		options ["Has Sub Block Type"] = "true";  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("limitblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("limitblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubTypeLimits = true;  		options ["Has Sub Block Type Limits"] = "true";  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type Limit: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  		}  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanCleanup,The following statement contains a magic number: if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")) != null) {  	hasDisplayName = true;  	displayName = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  		':'  	}) [1];  	options ["Matches Display Name Text"] = "true:" + displayName;  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  		':'  	}).Length > 2 && words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  		':'  	}) [2] == "exact")  		hasDisplayNameExact = true;  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanCleanup,The following statement contains a magic number: if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")) != null) {  	hasDisplayName = true;  	displayName = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  		':'  	}) [1];  	options ["Matches Display Name Text"] = "true:" + displayName;  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  		':'  	}).Length > 2 && words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  		':'  	}) [2] == "exact")  		hasDisplayNameExact = true;  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanCleanup,The following statement contains a magic number: if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  	':'  }).Length > 2 && words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  	':'  }) [2] == "exact")  	hasDisplayNameExact = true;  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanCleanup,The following statement contains a magic number: if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  	':'  }).Length > 2 && words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  	':'  }) [2] == "exact")  	hasDisplayNameExact = true;  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanCleanup,The following statement contains a magic number: if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasblocksubtype:")) != null) {  	string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasblocksubtype:")).Split (new char[] {  		':'  	});  	hasBlockSubType = true;  	options ["Has Sub Block Type"] = "true";  	if (parts.Length < 3) {  		blockSubTypes.Add (parts [1]' 1);  		options.Add ("Sub Block Type: " + parts [1]' "1");  	} else {  		int count = 1;  		int.TryParse (parts [2]' out count);  		blockSubTypes.Add (parts [1]' count);  		options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanCleanup,The following statement contains a magic number: if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasblocksubtype:")) != null) {  	string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasblocksubtype:")).Split (new char[] {  		':'  	});  	hasBlockSubType = true;  	options ["Has Sub Block Type"] = "true";  	if (parts.Length < 3) {  		blockSubTypes.Add (parts [1]' 1);  		options.Add ("Sub Block Type: " + parts [1]' "1");  	} else {  		int count = 1;  		int.TryParse (parts [2]' out count);  		blockSubTypes.Add (parts [1]' count);  		options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanCleanup,The following statement contains a magic number: if (parts.Length < 3) {  	blockSubTypes.Add (parts [1]' 1);  	options.Add ("Sub Block Type: " + parts [1]' "1");  } else {  	int count = 1;  	int.TryParse (parts [2]' out count);  	blockSubTypes.Add (parts [1]' count);  	options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanCleanup,The following statement contains a magic number: if (parts.Length < 3) {  	blockSubTypes.Add (parts [1]' 1);  	options.Add ("Sub Block Type: " + parts [1]' "1");  } else {  	int count = 1;  	int.TryParse (parts [2]' out count);  	blockSubTypes.Add (parts [1]' count);  	options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanCleanup,The following statement contains a magic number: int.TryParse (parts [2]' out count);  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanCleanup,The following statement contains a magic number: if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("limitblocksubtype:")) != null) {  	string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("limitblocksubtype:")).Split (new char[] {  		':'  	});  	hasBlockSubTypeLimits = true;  	options ["Has Sub Block Type Limits"] = "true";  	if (parts.Length < 3) {  		blockSubTypes.Add (parts [1]' 1);  		options.Add ("Sub Block Type Limit: " + parts [1]' "1");  	} else {  		int count = 1;  		int.TryParse (parts [2]' out count);  		blockSubTypes.Add (parts [1]' count);  		options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanCleanup,The following statement contains a magic number: if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("limitblocksubtype:")) != null) {  	string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("limitblocksubtype:")).Split (new char[] {  		':'  	});  	hasBlockSubTypeLimits = true;  	options ["Has Sub Block Type Limits"] = "true";  	if (parts.Length < 3) {  		blockSubTypes.Add (parts [1]' 1);  		options.Add ("Sub Block Type Limit: " + parts [1]' "1");  	} else {  		int count = 1;  		int.TryParse (parts [2]' out count);  		blockSubTypes.Add (parts [1]' count);  		options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanCleanup,The following statement contains a magic number: if (parts.Length < 3) {  	blockSubTypes.Add (parts [1]' 1);  	options.Add ("Sub Block Type Limit: " + parts [1]' "1");  } else {  	int count = 1;  	int.TryParse (parts [2]' out count);  	blockSubTypes.Add (parts [1]' count);  	options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanCleanup,The following statement contains a magic number: if (parts.Length < 3) {  	blockSubTypes.Add (parts [1]' 1);  	options.Add ("Sub Block Type Limit: " + parts [1]' "1");  } else {  	int count = 1;  	int.TryParse (parts [2]' out count);  	blockSubTypes.Add (parts [1]' count);  	options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanCleanup,The following statement contains a magic number: int.TryParse (parts [2]' out count);  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.Count () > 0) {  	if (words.FirstOrDefault (x => x.ToLower () == "debug") != null) {  		options.Add ("Debug"' "true");  		debug = true;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "quiet") != null) {  		options.Add ("Quiet"' "true");  		quiet = true;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "ownership") != null) {  		options.Add ("Ownership"' "true");  		owner = 2;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "noownership") != null) {  		options.Add ("Ownership"' "false");  		owner = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "functional") != null) {  		options.Add ("Functional"' "true");  		functional = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nofunctional") != null) {  		options.Add ("Functional"' "false");  		functional = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "terminal") != null) {  		options.Add ("Terminal"' "true");  		terminal = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "noterminal") != null) {  		options.Add ("Terminal"' "false");  		terminal = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "power") != null) {  		options.Add ("Has Power"' "true");  		power = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nopower") != null) {  		options.Add ("Has Power"' "false");  		power = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "notonline") != null) {  		options.Add ("Online"' "false");  		online = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "online") != null) {  		options.Add ("Online"' "true");  		online = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasDisplayName = true;  			displayName = parts [1];  			options.Add ("Matches Display Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasDisplayNameExact = true;  				options.Add ("Matches Display Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasCustomName = true;  			customName = parts [1];  			options.Add ("Matches Custom Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasCustomNameExact = true;  				options.Add ("Matches Custom Name Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubType = true;  		options.Add ("Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubTypeLimits = true;  		options.Add ("Exclude Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type Limit: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			isOwnedBy = true;  			ownedBy = parts [1];  			if (PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).Count > 0)  				ownedByPlayerId = PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).First ().playerId;  			options.Add ("Owned By"' ownedBy);  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")).Split (new char[] {  			':'  		});  		includesBlockType = true;  		options.Add ("Includes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypes.Add (parts [1]' 1);  			options.Add ("Includes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypes.Add (parts [1]' count);  			options.Add ("Includes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")).Split (new char[] {  			':'  		});  		excludesBlockType = true;  		options.Add ("Excludes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypesExcluded.Add (parts [1]' 1);  			options.Add ("Excludes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypesExcluded.Add (parts [1]' count);  			options.Add ("Excludes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")).Split (new char[] {  			':'  		});  		requireBlockCount = true;  		options.Add ("Requires Block Count"' "true");  		if (parts.Length < 2) {  			blockCount = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCount = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")).Split (new char[] {  			':'  		});  		requireBlockCountLess = true;  		options.Add ("Requires Block Count Less Than"' "true");  		if (parts.Length < 2) {  			blockCountLess = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCountLess = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")).Split (new char[] {  			':'  		});  		if (parts [1].ToLower () == "small") {  			options.Add ("Is Block Size"' "small");  			isBlockSize = true;  			blockSize = 0;  		} else if (parts [1].ToLower () == "large") {  			options.Add ("Is Block Size"' "large");  			isBlockSize = true;  			blockSize = 1;  		} else if (parts [1].ToLower () == "station") {  			options.Add ("Is Block Size"' "station");  			isBlockSize = true;  			blockSize = 2;  		} else if (parts [1].ToLower () == "largeship") {  			options.Add ("Is Block Size"' "largeship");  			isBlockSize = true;  			blockSize = 3;  		}  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.Count () > 0) {  	if (words.FirstOrDefault (x => x.ToLower () == "debug") != null) {  		options.Add ("Debug"' "true");  		debug = true;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "quiet") != null) {  		options.Add ("Quiet"' "true");  		quiet = true;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "ownership") != null) {  		options.Add ("Ownership"' "true");  		owner = 2;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "noownership") != null) {  		options.Add ("Ownership"' "false");  		owner = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "functional") != null) {  		options.Add ("Functional"' "true");  		functional = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nofunctional") != null) {  		options.Add ("Functional"' "false");  		functional = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "terminal") != null) {  		options.Add ("Terminal"' "true");  		terminal = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "noterminal") != null) {  		options.Add ("Terminal"' "false");  		terminal = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "power") != null) {  		options.Add ("Has Power"' "true");  		power = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nopower") != null) {  		options.Add ("Has Power"' "false");  		power = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "notonline") != null) {  		options.Add ("Online"' "false");  		online = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "online") != null) {  		options.Add ("Online"' "true");  		online = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasDisplayName = true;  			displayName = parts [1];  			options.Add ("Matches Display Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasDisplayNameExact = true;  				options.Add ("Matches Display Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasCustomName = true;  			customName = parts [1];  			options.Add ("Matches Custom Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasCustomNameExact = true;  				options.Add ("Matches Custom Name Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubType = true;  		options.Add ("Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubTypeLimits = true;  		options.Add ("Exclude Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type Limit: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			isOwnedBy = true;  			ownedBy = parts [1];  			if (PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).Count > 0)  				ownedByPlayerId = PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).First ().playerId;  			options.Add ("Owned By"' ownedBy);  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")).Split (new char[] {  			':'  		});  		includesBlockType = true;  		options.Add ("Includes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypes.Add (parts [1]' 1);  			options.Add ("Includes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypes.Add (parts [1]' count);  			options.Add ("Includes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")).Split (new char[] {  			':'  		});  		excludesBlockType = true;  		options.Add ("Excludes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypesExcluded.Add (parts [1]' 1);  			options.Add ("Excludes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypesExcluded.Add (parts [1]' count);  			options.Add ("Excludes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")).Split (new char[] {  			':'  		});  		requireBlockCount = true;  		options.Add ("Requires Block Count"' "true");  		if (parts.Length < 2) {  			blockCount = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCount = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")).Split (new char[] {  			':'  		});  		requireBlockCountLess = true;  		options.Add ("Requires Block Count Less Than"' "true");  		if (parts.Length < 2) {  			blockCountLess = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCountLess = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")).Split (new char[] {  			':'  		});  		if (parts [1].ToLower () == "small") {  			options.Add ("Is Block Size"' "small");  			isBlockSize = true;  			blockSize = 0;  		} else if (parts [1].ToLower () == "large") {  			options.Add ("Is Block Size"' "large");  			isBlockSize = true;  			blockSize = 1;  		} else if (parts [1].ToLower () == "station") {  			options.Add ("Is Block Size"' "station");  			isBlockSize = true;  			blockSize = 2;  		} else if (parts [1].ToLower () == "largeship") {  			options.Add ("Is Block Size"' "largeship");  			isBlockSize = true;  			blockSize = 3;  		}  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.Count () > 0) {  	if (words.FirstOrDefault (x => x.ToLower () == "debug") != null) {  		options.Add ("Debug"' "true");  		debug = true;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "quiet") != null) {  		options.Add ("Quiet"' "true");  		quiet = true;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "ownership") != null) {  		options.Add ("Ownership"' "true");  		owner = 2;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "noownership") != null) {  		options.Add ("Ownership"' "false");  		owner = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "functional") != null) {  		options.Add ("Functional"' "true");  		functional = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nofunctional") != null) {  		options.Add ("Functional"' "false");  		functional = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "terminal") != null) {  		options.Add ("Terminal"' "true");  		terminal = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "noterminal") != null) {  		options.Add ("Terminal"' "false");  		terminal = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "power") != null) {  		options.Add ("Has Power"' "true");  		power = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nopower") != null) {  		options.Add ("Has Power"' "false");  		power = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "notonline") != null) {  		options.Add ("Online"' "false");  		online = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "online") != null) {  		options.Add ("Online"' "true");  		online = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasDisplayName = true;  			displayName = parts [1];  			options.Add ("Matches Display Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasDisplayNameExact = true;  				options.Add ("Matches Display Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasCustomName = true;  			customName = parts [1];  			options.Add ("Matches Custom Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasCustomNameExact = true;  				options.Add ("Matches Custom Name Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubType = true;  		options.Add ("Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubTypeLimits = true;  		options.Add ("Exclude Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type Limit: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			isOwnedBy = true;  			ownedBy = parts [1];  			if (PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).Count > 0)  				ownedByPlayerId = PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).First ().playerId;  			options.Add ("Owned By"' ownedBy);  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")).Split (new char[] {  			':'  		});  		includesBlockType = true;  		options.Add ("Includes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypes.Add (parts [1]' 1);  			options.Add ("Includes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypes.Add (parts [1]' count);  			options.Add ("Includes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")).Split (new char[] {  			':'  		});  		excludesBlockType = true;  		options.Add ("Excludes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypesExcluded.Add (parts [1]' 1);  			options.Add ("Excludes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypesExcluded.Add (parts [1]' count);  			options.Add ("Excludes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")).Split (new char[] {  			':'  		});  		requireBlockCount = true;  		options.Add ("Requires Block Count"' "true");  		if (parts.Length < 2) {  			blockCount = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCount = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")).Split (new char[] {  			':'  		});  		requireBlockCountLess = true;  		options.Add ("Requires Block Count Less Than"' "true");  		if (parts.Length < 2) {  			blockCountLess = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCountLess = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")).Split (new char[] {  			':'  		});  		if (parts [1].ToLower () == "small") {  			options.Add ("Is Block Size"' "small");  			isBlockSize = true;  			blockSize = 0;  		} else if (parts [1].ToLower () == "large") {  			options.Add ("Is Block Size"' "large");  			isBlockSize = true;  			blockSize = 1;  		} else if (parts [1].ToLower () == "station") {  			options.Add ("Is Block Size"' "station");  			isBlockSize = true;  			blockSize = 2;  		} else if (parts [1].ToLower () == "largeship") {  			options.Add ("Is Block Size"' "largeship");  			isBlockSize = true;  			blockSize = 3;  		}  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.Count () > 0) {  	if (words.FirstOrDefault (x => x.ToLower () == "debug") != null) {  		options.Add ("Debug"' "true");  		debug = true;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "quiet") != null) {  		options.Add ("Quiet"' "true");  		quiet = true;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "ownership") != null) {  		options.Add ("Ownership"' "true");  		owner = 2;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "noownership") != null) {  		options.Add ("Ownership"' "false");  		owner = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "functional") != null) {  		options.Add ("Functional"' "true");  		functional = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nofunctional") != null) {  		options.Add ("Functional"' "false");  		functional = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "terminal") != null) {  		options.Add ("Terminal"' "true");  		terminal = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "noterminal") != null) {  		options.Add ("Terminal"' "false");  		terminal = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "power") != null) {  		options.Add ("Has Power"' "true");  		power = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nopower") != null) {  		options.Add ("Has Power"' "false");  		power = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "notonline") != null) {  		options.Add ("Online"' "false");  		online = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "online") != null) {  		options.Add ("Online"' "true");  		online = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasDisplayName = true;  			displayName = parts [1];  			options.Add ("Matches Display Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasDisplayNameExact = true;  				options.Add ("Matches Display Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasCustomName = true;  			customName = parts [1];  			options.Add ("Matches Custom Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasCustomNameExact = true;  				options.Add ("Matches Custom Name Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubType = true;  		options.Add ("Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubTypeLimits = true;  		options.Add ("Exclude Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type Limit: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			isOwnedBy = true;  			ownedBy = parts [1];  			if (PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).Count > 0)  				ownedByPlayerId = PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).First ().playerId;  			options.Add ("Owned By"' ownedBy);  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")).Split (new char[] {  			':'  		});  		includesBlockType = true;  		options.Add ("Includes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypes.Add (parts [1]' 1);  			options.Add ("Includes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypes.Add (parts [1]' count);  			options.Add ("Includes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")).Split (new char[] {  			':'  		});  		excludesBlockType = true;  		options.Add ("Excludes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypesExcluded.Add (parts [1]' 1);  			options.Add ("Excludes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypesExcluded.Add (parts [1]' count);  			options.Add ("Excludes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")).Split (new char[] {  			':'  		});  		requireBlockCount = true;  		options.Add ("Requires Block Count"' "true");  		if (parts.Length < 2) {  			blockCount = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCount = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")).Split (new char[] {  			':'  		});  		requireBlockCountLess = true;  		options.Add ("Requires Block Count Less Than"' "true");  		if (parts.Length < 2) {  			blockCountLess = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCountLess = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")).Split (new char[] {  			':'  		});  		if (parts [1].ToLower () == "small") {  			options.Add ("Is Block Size"' "small");  			isBlockSize = true;  			blockSize = 0;  		} else if (parts [1].ToLower () == "large") {  			options.Add ("Is Block Size"' "large");  			isBlockSize = true;  			blockSize = 1;  		} else if (parts [1].ToLower () == "station") {  			options.Add ("Is Block Size"' "station");  			isBlockSize = true;  			blockSize = 2;  		} else if (parts [1].ToLower () == "largeship") {  			options.Add ("Is Block Size"' "largeship");  			isBlockSize = true;  			blockSize = 3;  		}  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.Count () > 0) {  	if (words.FirstOrDefault (x => x.ToLower () == "debug") != null) {  		options.Add ("Debug"' "true");  		debug = true;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "quiet") != null) {  		options.Add ("Quiet"' "true");  		quiet = true;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "ownership") != null) {  		options.Add ("Ownership"' "true");  		owner = 2;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "noownership") != null) {  		options.Add ("Ownership"' "false");  		owner = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "functional") != null) {  		options.Add ("Functional"' "true");  		functional = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nofunctional") != null) {  		options.Add ("Functional"' "false");  		functional = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "terminal") != null) {  		options.Add ("Terminal"' "true");  		terminal = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "noterminal") != null) {  		options.Add ("Terminal"' "false");  		terminal = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "power") != null) {  		options.Add ("Has Power"' "true");  		power = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nopower") != null) {  		options.Add ("Has Power"' "false");  		power = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "notonline") != null) {  		options.Add ("Online"' "false");  		online = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "online") != null) {  		options.Add ("Online"' "true");  		online = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasDisplayName = true;  			displayName = parts [1];  			options.Add ("Matches Display Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasDisplayNameExact = true;  				options.Add ("Matches Display Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasCustomName = true;  			customName = parts [1];  			options.Add ("Matches Custom Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasCustomNameExact = true;  				options.Add ("Matches Custom Name Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubType = true;  		options.Add ("Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubTypeLimits = true;  		options.Add ("Exclude Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type Limit: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			isOwnedBy = true;  			ownedBy = parts [1];  			if (PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).Count > 0)  				ownedByPlayerId = PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).First ().playerId;  			options.Add ("Owned By"' ownedBy);  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")).Split (new char[] {  			':'  		});  		includesBlockType = true;  		options.Add ("Includes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypes.Add (parts [1]' 1);  			options.Add ("Includes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypes.Add (parts [1]' count);  			options.Add ("Includes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")).Split (new char[] {  			':'  		});  		excludesBlockType = true;  		options.Add ("Excludes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypesExcluded.Add (parts [1]' 1);  			options.Add ("Excludes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypesExcluded.Add (parts [1]' count);  			options.Add ("Excludes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")).Split (new char[] {  			':'  		});  		requireBlockCount = true;  		options.Add ("Requires Block Count"' "true");  		if (parts.Length < 2) {  			blockCount = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCount = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")).Split (new char[] {  			':'  		});  		requireBlockCountLess = true;  		options.Add ("Requires Block Count Less Than"' "true");  		if (parts.Length < 2) {  			blockCountLess = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCountLess = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")).Split (new char[] {  			':'  		});  		if (parts [1].ToLower () == "small") {  			options.Add ("Is Block Size"' "small");  			isBlockSize = true;  			blockSize = 0;  		} else if (parts [1].ToLower () == "large") {  			options.Add ("Is Block Size"' "large");  			isBlockSize = true;  			blockSize = 1;  		} else if (parts [1].ToLower () == "station") {  			options.Add ("Is Block Size"' "station");  			isBlockSize = true;  			blockSize = 2;  		} else if (parts [1].ToLower () == "largeship") {  			options.Add ("Is Block Size"' "largeship");  			isBlockSize = true;  			blockSize = 3;  		}  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.Count () > 0) {  	if (words.FirstOrDefault (x => x.ToLower () == "debug") != null) {  		options.Add ("Debug"' "true");  		debug = true;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "quiet") != null) {  		options.Add ("Quiet"' "true");  		quiet = true;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "ownership") != null) {  		options.Add ("Ownership"' "true");  		owner = 2;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "noownership") != null) {  		options.Add ("Ownership"' "false");  		owner = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "functional") != null) {  		options.Add ("Functional"' "true");  		functional = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nofunctional") != null) {  		options.Add ("Functional"' "false");  		functional = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "terminal") != null) {  		options.Add ("Terminal"' "true");  		terminal = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "noterminal") != null) {  		options.Add ("Terminal"' "false");  		terminal = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "power") != null) {  		options.Add ("Has Power"' "true");  		power = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nopower") != null) {  		options.Add ("Has Power"' "false");  		power = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "notonline") != null) {  		options.Add ("Online"' "false");  		online = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "online") != null) {  		options.Add ("Online"' "true");  		online = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasDisplayName = true;  			displayName = parts [1];  			options.Add ("Matches Display Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasDisplayNameExact = true;  				options.Add ("Matches Display Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasCustomName = true;  			customName = parts [1];  			options.Add ("Matches Custom Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasCustomNameExact = true;  				options.Add ("Matches Custom Name Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubType = true;  		options.Add ("Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubTypeLimits = true;  		options.Add ("Exclude Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type Limit: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			isOwnedBy = true;  			ownedBy = parts [1];  			if (PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).Count > 0)  				ownedByPlayerId = PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).First ().playerId;  			options.Add ("Owned By"' ownedBy);  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")).Split (new char[] {  			':'  		});  		includesBlockType = true;  		options.Add ("Includes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypes.Add (parts [1]' 1);  			options.Add ("Includes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypes.Add (parts [1]' count);  			options.Add ("Includes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")).Split (new char[] {  			':'  		});  		excludesBlockType = true;  		options.Add ("Excludes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypesExcluded.Add (parts [1]' 1);  			options.Add ("Excludes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypesExcluded.Add (parts [1]' count);  			options.Add ("Excludes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")).Split (new char[] {  			':'  		});  		requireBlockCount = true;  		options.Add ("Requires Block Count"' "true");  		if (parts.Length < 2) {  			blockCount = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCount = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")).Split (new char[] {  			':'  		});  		requireBlockCountLess = true;  		options.Add ("Requires Block Count Less Than"' "true");  		if (parts.Length < 2) {  			blockCountLess = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCountLess = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")).Split (new char[] {  			':'  		});  		if (parts [1].ToLower () == "small") {  			options.Add ("Is Block Size"' "small");  			isBlockSize = true;  			blockSize = 0;  		} else if (parts [1].ToLower () == "large") {  			options.Add ("Is Block Size"' "large");  			isBlockSize = true;  			blockSize = 1;  		} else if (parts [1].ToLower () == "station") {  			options.Add ("Is Block Size"' "station");  			isBlockSize = true;  			blockSize = 2;  		} else if (parts [1].ToLower () == "largeship") {  			options.Add ("Is Block Size"' "largeship");  			isBlockSize = true;  			blockSize = 3;  		}  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.Count () > 0) {  	if (words.FirstOrDefault (x => x.ToLower () == "debug") != null) {  		options.Add ("Debug"' "true");  		debug = true;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "quiet") != null) {  		options.Add ("Quiet"' "true");  		quiet = true;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "ownership") != null) {  		options.Add ("Ownership"' "true");  		owner = 2;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "noownership") != null) {  		options.Add ("Ownership"' "false");  		owner = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "functional") != null) {  		options.Add ("Functional"' "true");  		functional = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nofunctional") != null) {  		options.Add ("Functional"' "false");  		functional = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "terminal") != null) {  		options.Add ("Terminal"' "true");  		terminal = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "noterminal") != null) {  		options.Add ("Terminal"' "false");  		terminal = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "power") != null) {  		options.Add ("Has Power"' "true");  		power = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nopower") != null) {  		options.Add ("Has Power"' "false");  		power = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "notonline") != null) {  		options.Add ("Online"' "false");  		online = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "online") != null) {  		options.Add ("Online"' "true");  		online = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasDisplayName = true;  			displayName = parts [1];  			options.Add ("Matches Display Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasDisplayNameExact = true;  				options.Add ("Matches Display Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasCustomName = true;  			customName = parts [1];  			options.Add ("Matches Custom Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasCustomNameExact = true;  				options.Add ("Matches Custom Name Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubType = true;  		options.Add ("Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubTypeLimits = true;  		options.Add ("Exclude Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type Limit: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			isOwnedBy = true;  			ownedBy = parts [1];  			if (PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).Count > 0)  				ownedByPlayerId = PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).First ().playerId;  			options.Add ("Owned By"' ownedBy);  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")).Split (new char[] {  			':'  		});  		includesBlockType = true;  		options.Add ("Includes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypes.Add (parts [1]' 1);  			options.Add ("Includes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypes.Add (parts [1]' count);  			options.Add ("Includes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")).Split (new char[] {  			':'  		});  		excludesBlockType = true;  		options.Add ("Excludes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypesExcluded.Add (parts [1]' 1);  			options.Add ("Excludes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypesExcluded.Add (parts [1]' count);  			options.Add ("Excludes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")).Split (new char[] {  			':'  		});  		requireBlockCount = true;  		options.Add ("Requires Block Count"' "true");  		if (parts.Length < 2) {  			blockCount = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCount = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")).Split (new char[] {  			':'  		});  		requireBlockCountLess = true;  		options.Add ("Requires Block Count Less Than"' "true");  		if (parts.Length < 2) {  			blockCountLess = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCountLess = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")).Split (new char[] {  			':'  		});  		if (parts [1].ToLower () == "small") {  			options.Add ("Is Block Size"' "small");  			isBlockSize = true;  			blockSize = 0;  		} else if (parts [1].ToLower () == "large") {  			options.Add ("Is Block Size"' "large");  			isBlockSize = true;  			blockSize = 1;  		} else if (parts [1].ToLower () == "station") {  			options.Add ("Is Block Size"' "station");  			isBlockSize = true;  			blockSize = 2;  		} else if (parts [1].ToLower () == "largeship") {  			options.Add ("Is Block Size"' "largeship");  			isBlockSize = true;  			blockSize = 3;  		}  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.Count () > 0) {  	if (words.FirstOrDefault (x => x.ToLower () == "debug") != null) {  		options.Add ("Debug"' "true");  		debug = true;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "quiet") != null) {  		options.Add ("Quiet"' "true");  		quiet = true;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "ownership") != null) {  		options.Add ("Ownership"' "true");  		owner = 2;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "noownership") != null) {  		options.Add ("Ownership"' "false");  		owner = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "functional") != null) {  		options.Add ("Functional"' "true");  		functional = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nofunctional") != null) {  		options.Add ("Functional"' "false");  		functional = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "terminal") != null) {  		options.Add ("Terminal"' "true");  		terminal = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "noterminal") != null) {  		options.Add ("Terminal"' "false");  		terminal = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "power") != null) {  		options.Add ("Has Power"' "true");  		power = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nopower") != null) {  		options.Add ("Has Power"' "false");  		power = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "notonline") != null) {  		options.Add ("Online"' "false");  		online = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "online") != null) {  		options.Add ("Online"' "true");  		online = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasDisplayName = true;  			displayName = parts [1];  			options.Add ("Matches Display Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasDisplayNameExact = true;  				options.Add ("Matches Display Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasCustomName = true;  			customName = parts [1];  			options.Add ("Matches Custom Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasCustomNameExact = true;  				options.Add ("Matches Custom Name Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubType = true;  		options.Add ("Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubTypeLimits = true;  		options.Add ("Exclude Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type Limit: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			isOwnedBy = true;  			ownedBy = parts [1];  			if (PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).Count > 0)  				ownedByPlayerId = PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).First ().playerId;  			options.Add ("Owned By"' ownedBy);  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")).Split (new char[] {  			':'  		});  		includesBlockType = true;  		options.Add ("Includes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypes.Add (parts [1]' 1);  			options.Add ("Includes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypes.Add (parts [1]' count);  			options.Add ("Includes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")).Split (new char[] {  			':'  		});  		excludesBlockType = true;  		options.Add ("Excludes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypesExcluded.Add (parts [1]' 1);  			options.Add ("Excludes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypesExcluded.Add (parts [1]' count);  			options.Add ("Excludes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")).Split (new char[] {  			':'  		});  		requireBlockCount = true;  		options.Add ("Requires Block Count"' "true");  		if (parts.Length < 2) {  			blockCount = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCount = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")).Split (new char[] {  			':'  		});  		requireBlockCountLess = true;  		options.Add ("Requires Block Count Less Than"' "true");  		if (parts.Length < 2) {  			blockCountLess = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCountLess = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")).Split (new char[] {  			':'  		});  		if (parts [1].ToLower () == "small") {  			options.Add ("Is Block Size"' "small");  			isBlockSize = true;  			blockSize = 0;  		} else if (parts [1].ToLower () == "large") {  			options.Add ("Is Block Size"' "large");  			isBlockSize = true;  			blockSize = 1;  		} else if (parts [1].ToLower () == "station") {  			options.Add ("Is Block Size"' "station");  			isBlockSize = true;  			blockSize = 2;  		} else if (parts [1].ToLower () == "largeship") {  			options.Add ("Is Block Size"' "largeship");  			isBlockSize = true;  			blockSize = 3;  		}  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.Count () > 0) {  	if (words.FirstOrDefault (x => x.ToLower () == "debug") != null) {  		options.Add ("Debug"' "true");  		debug = true;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "quiet") != null) {  		options.Add ("Quiet"' "true");  		quiet = true;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "ownership") != null) {  		options.Add ("Ownership"' "true");  		owner = 2;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "noownership") != null) {  		options.Add ("Ownership"' "false");  		owner = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "functional") != null) {  		options.Add ("Functional"' "true");  		functional = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nofunctional") != null) {  		options.Add ("Functional"' "false");  		functional = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "terminal") != null) {  		options.Add ("Terminal"' "true");  		terminal = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "noterminal") != null) {  		options.Add ("Terminal"' "false");  		terminal = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "power") != null) {  		options.Add ("Has Power"' "true");  		power = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nopower") != null) {  		options.Add ("Has Power"' "false");  		power = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "notonline") != null) {  		options.Add ("Online"' "false");  		online = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "online") != null) {  		options.Add ("Online"' "true");  		online = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasDisplayName = true;  			displayName = parts [1];  			options.Add ("Matches Display Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasDisplayNameExact = true;  				options.Add ("Matches Display Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasCustomName = true;  			customName = parts [1];  			options.Add ("Matches Custom Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasCustomNameExact = true;  				options.Add ("Matches Custom Name Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubType = true;  		options.Add ("Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubTypeLimits = true;  		options.Add ("Exclude Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type Limit: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			isOwnedBy = true;  			ownedBy = parts [1];  			if (PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).Count > 0)  				ownedByPlayerId = PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).First ().playerId;  			options.Add ("Owned By"' ownedBy);  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")).Split (new char[] {  			':'  		});  		includesBlockType = true;  		options.Add ("Includes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypes.Add (parts [1]' 1);  			options.Add ("Includes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypes.Add (parts [1]' count);  			options.Add ("Includes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")).Split (new char[] {  			':'  		});  		excludesBlockType = true;  		options.Add ("Excludes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypesExcluded.Add (parts [1]' 1);  			options.Add ("Excludes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypesExcluded.Add (parts [1]' count);  			options.Add ("Excludes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")).Split (new char[] {  			':'  		});  		requireBlockCount = true;  		options.Add ("Requires Block Count"' "true");  		if (parts.Length < 2) {  			blockCount = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCount = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")).Split (new char[] {  			':'  		});  		requireBlockCountLess = true;  		options.Add ("Requires Block Count Less Than"' "true");  		if (parts.Length < 2) {  			blockCountLess = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCountLess = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")).Split (new char[] {  			':'  		});  		if (parts [1].ToLower () == "small") {  			options.Add ("Is Block Size"' "small");  			isBlockSize = true;  			blockSize = 0;  		} else if (parts [1].ToLower () == "large") {  			options.Add ("Is Block Size"' "large");  			isBlockSize = true;  			blockSize = 1;  		} else if (parts [1].ToLower () == "station") {  			options.Add ("Is Block Size"' "station");  			isBlockSize = true;  			blockSize = 2;  		} else if (parts [1].ToLower () == "largeship") {  			options.Add ("Is Block Size"' "largeship");  			isBlockSize = true;  			blockSize = 3;  		}  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.Count () > 0) {  	if (words.FirstOrDefault (x => x.ToLower () == "debug") != null) {  		options.Add ("Debug"' "true");  		debug = true;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "quiet") != null) {  		options.Add ("Quiet"' "true");  		quiet = true;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "ownership") != null) {  		options.Add ("Ownership"' "true");  		owner = 2;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "noownership") != null) {  		options.Add ("Ownership"' "false");  		owner = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "functional") != null) {  		options.Add ("Functional"' "true");  		functional = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nofunctional") != null) {  		options.Add ("Functional"' "false");  		functional = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "terminal") != null) {  		options.Add ("Terminal"' "true");  		terminal = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "noterminal") != null) {  		options.Add ("Terminal"' "false");  		terminal = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "power") != null) {  		options.Add ("Has Power"' "true");  		power = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nopower") != null) {  		options.Add ("Has Power"' "false");  		power = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "notonline") != null) {  		options.Add ("Online"' "false");  		online = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "online") != null) {  		options.Add ("Online"' "true");  		online = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasDisplayName = true;  			displayName = parts [1];  			options.Add ("Matches Display Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasDisplayNameExact = true;  				options.Add ("Matches Display Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasCustomName = true;  			customName = parts [1];  			options.Add ("Matches Custom Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasCustomNameExact = true;  				options.Add ("Matches Custom Name Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubType = true;  		options.Add ("Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubTypeLimits = true;  		options.Add ("Exclude Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type Limit: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			isOwnedBy = true;  			ownedBy = parts [1];  			if (PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).Count > 0)  				ownedByPlayerId = PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).First ().playerId;  			options.Add ("Owned By"' ownedBy);  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")).Split (new char[] {  			':'  		});  		includesBlockType = true;  		options.Add ("Includes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypes.Add (parts [1]' 1);  			options.Add ("Includes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypes.Add (parts [1]' count);  			options.Add ("Includes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")).Split (new char[] {  			':'  		});  		excludesBlockType = true;  		options.Add ("Excludes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypesExcluded.Add (parts [1]' 1);  			options.Add ("Excludes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypesExcluded.Add (parts [1]' count);  			options.Add ("Excludes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")).Split (new char[] {  			':'  		});  		requireBlockCount = true;  		options.Add ("Requires Block Count"' "true");  		if (parts.Length < 2) {  			blockCount = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCount = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")).Split (new char[] {  			':'  		});  		requireBlockCountLess = true;  		options.Add ("Requires Block Count Less Than"' "true");  		if (parts.Length < 2) {  			blockCountLess = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCountLess = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")).Split (new char[] {  			':'  		});  		if (parts [1].ToLower () == "small") {  			options.Add ("Is Block Size"' "small");  			isBlockSize = true;  			blockSize = 0;  		} else if (parts [1].ToLower () == "large") {  			options.Add ("Is Block Size"' "large");  			isBlockSize = true;  			blockSize = 1;  		} else if (parts [1].ToLower () == "station") {  			options.Add ("Is Block Size"' "station");  			isBlockSize = true;  			blockSize = 2;  		} else if (parts [1].ToLower () == "largeship") {  			options.Add ("Is Block Size"' "largeship");  			isBlockSize = true;  			blockSize = 3;  		}  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.Count () > 0) {  	if (words.FirstOrDefault (x => x.ToLower () == "debug") != null) {  		options.Add ("Debug"' "true");  		debug = true;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "quiet") != null) {  		options.Add ("Quiet"' "true");  		quiet = true;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "ownership") != null) {  		options.Add ("Ownership"' "true");  		owner = 2;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "noownership") != null) {  		options.Add ("Ownership"' "false");  		owner = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "functional") != null) {  		options.Add ("Functional"' "true");  		functional = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nofunctional") != null) {  		options.Add ("Functional"' "false");  		functional = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "terminal") != null) {  		options.Add ("Terminal"' "true");  		terminal = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "noterminal") != null) {  		options.Add ("Terminal"' "false");  		terminal = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "power") != null) {  		options.Add ("Has Power"' "true");  		power = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nopower") != null) {  		options.Add ("Has Power"' "false");  		power = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "notonline") != null) {  		options.Add ("Online"' "false");  		online = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "online") != null) {  		options.Add ("Online"' "true");  		online = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasDisplayName = true;  			displayName = parts [1];  			options.Add ("Matches Display Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasDisplayNameExact = true;  				options.Add ("Matches Display Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasCustomName = true;  			customName = parts [1];  			options.Add ("Matches Custom Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasCustomNameExact = true;  				options.Add ("Matches Custom Name Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubType = true;  		options.Add ("Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubTypeLimits = true;  		options.Add ("Exclude Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type Limit: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			isOwnedBy = true;  			ownedBy = parts [1];  			if (PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).Count > 0)  				ownedByPlayerId = PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).First ().playerId;  			options.Add ("Owned By"' ownedBy);  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")).Split (new char[] {  			':'  		});  		includesBlockType = true;  		options.Add ("Includes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypes.Add (parts [1]' 1);  			options.Add ("Includes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypes.Add (parts [1]' count);  			options.Add ("Includes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")).Split (new char[] {  			':'  		});  		excludesBlockType = true;  		options.Add ("Excludes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypesExcluded.Add (parts [1]' 1);  			options.Add ("Excludes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypesExcluded.Add (parts [1]' count);  			options.Add ("Excludes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")).Split (new char[] {  			':'  		});  		requireBlockCount = true;  		options.Add ("Requires Block Count"' "true");  		if (parts.Length < 2) {  			blockCount = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCount = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")).Split (new char[] {  			':'  		});  		requireBlockCountLess = true;  		options.Add ("Requires Block Count Less Than"' "true");  		if (parts.Length < 2) {  			blockCountLess = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCountLess = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")).Split (new char[] {  			':'  		});  		if (parts [1].ToLower () == "small") {  			options.Add ("Is Block Size"' "small");  			isBlockSize = true;  			blockSize = 0;  		} else if (parts [1].ToLower () == "large") {  			options.Add ("Is Block Size"' "large");  			isBlockSize = true;  			blockSize = 1;  		} else if (parts [1].ToLower () == "station") {  			options.Add ("Is Block Size"' "station");  			isBlockSize = true;  			blockSize = 2;  		} else if (parts [1].ToLower () == "largeship") {  			options.Add ("Is Block Size"' "largeship");  			isBlockSize = true;  			blockSize = 3;  		}  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.Count () > 0) {  	if (words.FirstOrDefault (x => x.ToLower () == "debug") != null) {  		options.Add ("Debug"' "true");  		debug = true;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "quiet") != null) {  		options.Add ("Quiet"' "true");  		quiet = true;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "ownership") != null) {  		options.Add ("Ownership"' "true");  		owner = 2;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "noownership") != null) {  		options.Add ("Ownership"' "false");  		owner = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "functional") != null) {  		options.Add ("Functional"' "true");  		functional = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nofunctional") != null) {  		options.Add ("Functional"' "false");  		functional = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "terminal") != null) {  		options.Add ("Terminal"' "true");  		terminal = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "noterminal") != null) {  		options.Add ("Terminal"' "false");  		terminal = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "power") != null) {  		options.Add ("Has Power"' "true");  		power = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nopower") != null) {  		options.Add ("Has Power"' "false");  		power = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "notonline") != null) {  		options.Add ("Online"' "false");  		online = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "online") != null) {  		options.Add ("Online"' "true");  		online = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasDisplayName = true;  			displayName = parts [1];  			options.Add ("Matches Display Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasDisplayNameExact = true;  				options.Add ("Matches Display Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasCustomName = true;  			customName = parts [1];  			options.Add ("Matches Custom Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasCustomNameExact = true;  				options.Add ("Matches Custom Name Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubType = true;  		options.Add ("Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubTypeLimits = true;  		options.Add ("Exclude Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type Limit: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			isOwnedBy = true;  			ownedBy = parts [1];  			if (PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).Count > 0)  				ownedByPlayerId = PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).First ().playerId;  			options.Add ("Owned By"' ownedBy);  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")).Split (new char[] {  			':'  		});  		includesBlockType = true;  		options.Add ("Includes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypes.Add (parts [1]' 1);  			options.Add ("Includes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypes.Add (parts [1]' count);  			options.Add ("Includes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")).Split (new char[] {  			':'  		});  		excludesBlockType = true;  		options.Add ("Excludes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypesExcluded.Add (parts [1]' 1);  			options.Add ("Excludes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypesExcluded.Add (parts [1]' count);  			options.Add ("Excludes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")).Split (new char[] {  			':'  		});  		requireBlockCount = true;  		options.Add ("Requires Block Count"' "true");  		if (parts.Length < 2) {  			blockCount = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCount = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")).Split (new char[] {  			':'  		});  		requireBlockCountLess = true;  		options.Add ("Requires Block Count Less Than"' "true");  		if (parts.Length < 2) {  			blockCountLess = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCountLess = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")).Split (new char[] {  			':'  		});  		if (parts [1].ToLower () == "small") {  			options.Add ("Is Block Size"' "small");  			isBlockSize = true;  			blockSize = 0;  		} else if (parts [1].ToLower () == "large") {  			options.Add ("Is Block Size"' "large");  			isBlockSize = true;  			blockSize = 1;  		} else if (parts [1].ToLower () == "station") {  			options.Add ("Is Block Size"' "station");  			isBlockSize = true;  			blockSize = 2;  		} else if (parts [1].ToLower () == "largeship") {  			options.Add ("Is Block Size"' "largeship");  			isBlockSize = true;  			blockSize = 3;  		}  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.Count () > 0) {  	if (words.FirstOrDefault (x => x.ToLower () == "debug") != null) {  		options.Add ("Debug"' "true");  		debug = true;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "quiet") != null) {  		options.Add ("Quiet"' "true");  		quiet = true;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "ownership") != null) {  		options.Add ("Ownership"' "true");  		owner = 2;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "noownership") != null) {  		options.Add ("Ownership"' "false");  		owner = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "functional") != null) {  		options.Add ("Functional"' "true");  		functional = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nofunctional") != null) {  		options.Add ("Functional"' "false");  		functional = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "terminal") != null) {  		options.Add ("Terminal"' "true");  		terminal = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "noterminal") != null) {  		options.Add ("Terminal"' "false");  		terminal = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "power") != null) {  		options.Add ("Has Power"' "true");  		power = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nopower") != null) {  		options.Add ("Has Power"' "false");  		power = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "notonline") != null) {  		options.Add ("Online"' "false");  		online = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "online") != null) {  		options.Add ("Online"' "true");  		online = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasDisplayName = true;  			displayName = parts [1];  			options.Add ("Matches Display Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasDisplayNameExact = true;  				options.Add ("Matches Display Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasCustomName = true;  			customName = parts [1];  			options.Add ("Matches Custom Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasCustomNameExact = true;  				options.Add ("Matches Custom Name Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubType = true;  		options.Add ("Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubTypeLimits = true;  		options.Add ("Exclude Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type Limit: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			isOwnedBy = true;  			ownedBy = parts [1];  			if (PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).Count > 0)  				ownedByPlayerId = PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).First ().playerId;  			options.Add ("Owned By"' ownedBy);  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")).Split (new char[] {  			':'  		});  		includesBlockType = true;  		options.Add ("Includes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypes.Add (parts [1]' 1);  			options.Add ("Includes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypes.Add (parts [1]' count);  			options.Add ("Includes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")).Split (new char[] {  			':'  		});  		excludesBlockType = true;  		options.Add ("Excludes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypesExcluded.Add (parts [1]' 1);  			options.Add ("Excludes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypesExcluded.Add (parts [1]' count);  			options.Add ("Excludes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")).Split (new char[] {  			':'  		});  		requireBlockCount = true;  		options.Add ("Requires Block Count"' "true");  		if (parts.Length < 2) {  			blockCount = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCount = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")).Split (new char[] {  			':'  		});  		requireBlockCountLess = true;  		options.Add ("Requires Block Count Less Than"' "true");  		if (parts.Length < 2) {  			blockCountLess = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCountLess = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")).Split (new char[] {  			':'  		});  		if (parts [1].ToLower () == "small") {  			options.Add ("Is Block Size"' "small");  			isBlockSize = true;  			blockSize = 0;  		} else if (parts [1].ToLower () == "large") {  			options.Add ("Is Block Size"' "large");  			isBlockSize = true;  			blockSize = 1;  		} else if (parts [1].ToLower () == "station") {  			options.Add ("Is Block Size"' "station");  			isBlockSize = true;  			blockSize = 2;  		} else if (parts [1].ToLower () == "largeship") {  			options.Add ("Is Block Size"' "largeship");  			isBlockSize = true;  			blockSize = 3;  		}  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.Count () > 0) {  	if (words.FirstOrDefault (x => x.ToLower () == "debug") != null) {  		options.Add ("Debug"' "true");  		debug = true;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "quiet") != null) {  		options.Add ("Quiet"' "true");  		quiet = true;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "ownership") != null) {  		options.Add ("Ownership"' "true");  		owner = 2;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "noownership") != null) {  		options.Add ("Ownership"' "false");  		owner = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "functional") != null) {  		options.Add ("Functional"' "true");  		functional = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nofunctional") != null) {  		options.Add ("Functional"' "false");  		functional = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "terminal") != null) {  		options.Add ("Terminal"' "true");  		terminal = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "noterminal") != null) {  		options.Add ("Terminal"' "false");  		terminal = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "power") != null) {  		options.Add ("Has Power"' "true");  		power = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nopower") != null) {  		options.Add ("Has Power"' "false");  		power = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "notonline") != null) {  		options.Add ("Online"' "false");  		online = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "online") != null) {  		options.Add ("Online"' "true");  		online = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasDisplayName = true;  			displayName = parts [1];  			options.Add ("Matches Display Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasDisplayNameExact = true;  				options.Add ("Matches Display Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasCustomName = true;  			customName = parts [1];  			options.Add ("Matches Custom Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasCustomNameExact = true;  				options.Add ("Matches Custom Name Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubType = true;  		options.Add ("Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubTypeLimits = true;  		options.Add ("Exclude Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type Limit: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			isOwnedBy = true;  			ownedBy = parts [1];  			if (PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).Count > 0)  				ownedByPlayerId = PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).First ().playerId;  			options.Add ("Owned By"' ownedBy);  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")).Split (new char[] {  			':'  		});  		includesBlockType = true;  		options.Add ("Includes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypes.Add (parts [1]' 1);  			options.Add ("Includes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypes.Add (parts [1]' count);  			options.Add ("Includes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")).Split (new char[] {  			':'  		});  		excludesBlockType = true;  		options.Add ("Excludes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypesExcluded.Add (parts [1]' 1);  			options.Add ("Excludes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypesExcluded.Add (parts [1]' count);  			options.Add ("Excludes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")).Split (new char[] {  			':'  		});  		requireBlockCount = true;  		options.Add ("Requires Block Count"' "true");  		if (parts.Length < 2) {  			blockCount = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCount = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")).Split (new char[] {  			':'  		});  		requireBlockCountLess = true;  		options.Add ("Requires Block Count Less Than"' "true");  		if (parts.Length < 2) {  			blockCountLess = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCountLess = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")).Split (new char[] {  			':'  		});  		if (parts [1].ToLower () == "small") {  			options.Add ("Is Block Size"' "small");  			isBlockSize = true;  			blockSize = 0;  		} else if (parts [1].ToLower () == "large") {  			options.Add ("Is Block Size"' "large");  			isBlockSize = true;  			blockSize = 1;  		} else if (parts [1].ToLower () == "station") {  			options.Add ("Is Block Size"' "station");  			isBlockSize = true;  			blockSize = 2;  		} else if (parts [1].ToLower () == "largeship") {  			options.Add ("Is Block Size"' "largeship");  			isBlockSize = true;  			blockSize = 3;  		}  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.Count () > 0) {  	if (words.FirstOrDefault (x => x.ToLower () == "debug") != null) {  		options.Add ("Debug"' "true");  		debug = true;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "quiet") != null) {  		options.Add ("Quiet"' "true");  		quiet = true;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "ownership") != null) {  		options.Add ("Ownership"' "true");  		owner = 2;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "noownership") != null) {  		options.Add ("Ownership"' "false");  		owner = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "functional") != null) {  		options.Add ("Functional"' "true");  		functional = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nofunctional") != null) {  		options.Add ("Functional"' "false");  		functional = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "terminal") != null) {  		options.Add ("Terminal"' "true");  		terminal = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "noterminal") != null) {  		options.Add ("Terminal"' "false");  		terminal = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "power") != null) {  		options.Add ("Has Power"' "true");  		power = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nopower") != null) {  		options.Add ("Has Power"' "false");  		power = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "notonline") != null) {  		options.Add ("Online"' "false");  		online = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "online") != null) {  		options.Add ("Online"' "true");  		online = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasDisplayName = true;  			displayName = parts [1];  			options.Add ("Matches Display Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasDisplayNameExact = true;  				options.Add ("Matches Display Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasCustomName = true;  			customName = parts [1];  			options.Add ("Matches Custom Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasCustomNameExact = true;  				options.Add ("Matches Custom Name Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubType = true;  		options.Add ("Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubTypeLimits = true;  		options.Add ("Exclude Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type Limit: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			isOwnedBy = true;  			ownedBy = parts [1];  			if (PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).Count > 0)  				ownedByPlayerId = PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).First ().playerId;  			options.Add ("Owned By"' ownedBy);  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")).Split (new char[] {  			':'  		});  		includesBlockType = true;  		options.Add ("Includes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypes.Add (parts [1]' 1);  			options.Add ("Includes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypes.Add (parts [1]' count);  			options.Add ("Includes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")).Split (new char[] {  			':'  		});  		excludesBlockType = true;  		options.Add ("Excludes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypesExcluded.Add (parts [1]' 1);  			options.Add ("Excludes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypesExcluded.Add (parts [1]' count);  			options.Add ("Excludes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")).Split (new char[] {  			':'  		});  		requireBlockCount = true;  		options.Add ("Requires Block Count"' "true");  		if (parts.Length < 2) {  			blockCount = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCount = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")).Split (new char[] {  			':'  		});  		requireBlockCountLess = true;  		options.Add ("Requires Block Count Less Than"' "true");  		if (parts.Length < 2) {  			blockCountLess = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCountLess = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")).Split (new char[] {  			':'  		});  		if (parts [1].ToLower () == "small") {  			options.Add ("Is Block Size"' "small");  			isBlockSize = true;  			blockSize = 0;  		} else if (parts [1].ToLower () == "large") {  			options.Add ("Is Block Size"' "large");  			isBlockSize = true;  			blockSize = 1;  		} else if (parts [1].ToLower () == "station") {  			options.Add ("Is Block Size"' "station");  			isBlockSize = true;  			blockSize = 2;  		} else if (parts [1].ToLower () == "largeship") {  			options.Add ("Is Block Size"' "largeship");  			isBlockSize = true;  			blockSize = 3;  		}  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.Count () > 0) {  	if (words.FirstOrDefault (x => x.ToLower () == "debug") != null) {  		options.Add ("Debug"' "true");  		debug = true;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "quiet") != null) {  		options.Add ("Quiet"' "true");  		quiet = true;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "ownership") != null) {  		options.Add ("Ownership"' "true");  		owner = 2;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "noownership") != null) {  		options.Add ("Ownership"' "false");  		owner = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "functional") != null) {  		options.Add ("Functional"' "true");  		functional = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nofunctional") != null) {  		options.Add ("Functional"' "false");  		functional = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "terminal") != null) {  		options.Add ("Terminal"' "true");  		terminal = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "noterminal") != null) {  		options.Add ("Terminal"' "false");  		terminal = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "power") != null) {  		options.Add ("Has Power"' "true");  		power = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nopower") != null) {  		options.Add ("Has Power"' "false");  		power = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "notonline") != null) {  		options.Add ("Online"' "false");  		online = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "online") != null) {  		options.Add ("Online"' "true");  		online = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasDisplayName = true;  			displayName = parts [1];  			options.Add ("Matches Display Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasDisplayNameExact = true;  				options.Add ("Matches Display Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasCustomName = true;  			customName = parts [1];  			options.Add ("Matches Custom Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasCustomNameExact = true;  				options.Add ("Matches Custom Name Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubType = true;  		options.Add ("Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubTypeLimits = true;  		options.Add ("Exclude Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type Limit: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			isOwnedBy = true;  			ownedBy = parts [1];  			if (PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).Count > 0)  				ownedByPlayerId = PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).First ().playerId;  			options.Add ("Owned By"' ownedBy);  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")).Split (new char[] {  			':'  		});  		includesBlockType = true;  		options.Add ("Includes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypes.Add (parts [1]' 1);  			options.Add ("Includes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypes.Add (parts [1]' count);  			options.Add ("Includes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")).Split (new char[] {  			':'  		});  		excludesBlockType = true;  		options.Add ("Excludes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypesExcluded.Add (parts [1]' 1);  			options.Add ("Excludes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypesExcluded.Add (parts [1]' count);  			options.Add ("Excludes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")).Split (new char[] {  			':'  		});  		requireBlockCount = true;  		options.Add ("Requires Block Count"' "true");  		if (parts.Length < 2) {  			blockCount = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCount = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")).Split (new char[] {  			':'  		});  		requireBlockCountLess = true;  		options.Add ("Requires Block Count Less Than"' "true");  		if (parts.Length < 2) {  			blockCountLess = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCountLess = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")).Split (new char[] {  			':'  		});  		if (parts [1].ToLower () == "small") {  			options.Add ("Is Block Size"' "small");  			isBlockSize = true;  			blockSize = 0;  		} else if (parts [1].ToLower () == "large") {  			options.Add ("Is Block Size"' "large");  			isBlockSize = true;  			blockSize = 1;  		} else if (parts [1].ToLower () == "station") {  			options.Add ("Is Block Size"' "station");  			isBlockSize = true;  			blockSize = 2;  		} else if (parts [1].ToLower () == "largeship") {  			options.Add ("Is Block Size"' "largeship");  			isBlockSize = true;  			blockSize = 3;  		}  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.Count () > 0) {  	if (words.FirstOrDefault (x => x.ToLower () == "debug") != null) {  		options.Add ("Debug"' "true");  		debug = true;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "quiet") != null) {  		options.Add ("Quiet"' "true");  		quiet = true;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "ownership") != null) {  		options.Add ("Ownership"' "true");  		owner = 2;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "noownership") != null) {  		options.Add ("Ownership"' "false");  		owner = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "functional") != null) {  		options.Add ("Functional"' "true");  		functional = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nofunctional") != null) {  		options.Add ("Functional"' "false");  		functional = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "terminal") != null) {  		options.Add ("Terminal"' "true");  		terminal = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "noterminal") != null) {  		options.Add ("Terminal"' "false");  		terminal = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "power") != null) {  		options.Add ("Has Power"' "true");  		power = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nopower") != null) {  		options.Add ("Has Power"' "false");  		power = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "notonline") != null) {  		options.Add ("Online"' "false");  		online = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "online") != null) {  		options.Add ("Online"' "true");  		online = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasDisplayName = true;  			displayName = parts [1];  			options.Add ("Matches Display Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasDisplayNameExact = true;  				options.Add ("Matches Display Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasCustomName = true;  			customName = parts [1];  			options.Add ("Matches Custom Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasCustomNameExact = true;  				options.Add ("Matches Custom Name Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubType = true;  		options.Add ("Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubTypeLimits = true;  		options.Add ("Exclude Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type Limit: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			isOwnedBy = true;  			ownedBy = parts [1];  			if (PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).Count > 0)  				ownedByPlayerId = PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).First ().playerId;  			options.Add ("Owned By"' ownedBy);  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")).Split (new char[] {  			':'  		});  		includesBlockType = true;  		options.Add ("Includes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypes.Add (parts [1]' 1);  			options.Add ("Includes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypes.Add (parts [1]' count);  			options.Add ("Includes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")).Split (new char[] {  			':'  		});  		excludesBlockType = true;  		options.Add ("Excludes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypesExcluded.Add (parts [1]' 1);  			options.Add ("Excludes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypesExcluded.Add (parts [1]' count);  			options.Add ("Excludes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")).Split (new char[] {  			':'  		});  		requireBlockCount = true;  		options.Add ("Requires Block Count"' "true");  		if (parts.Length < 2) {  			blockCount = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCount = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")).Split (new char[] {  			':'  		});  		requireBlockCountLess = true;  		options.Add ("Requires Block Count Less Than"' "true");  		if (parts.Length < 2) {  			blockCountLess = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCountLess = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")).Split (new char[] {  			':'  		});  		if (parts [1].ToLower () == "small") {  			options.Add ("Is Block Size"' "small");  			isBlockSize = true;  			blockSize = 0;  		} else if (parts [1].ToLower () == "large") {  			options.Add ("Is Block Size"' "large");  			isBlockSize = true;  			blockSize = 1;  		} else if (parts [1].ToLower () == "station") {  			options.Add ("Is Block Size"' "station");  			isBlockSize = true;  			blockSize = 2;  		} else if (parts [1].ToLower () == "largeship") {  			options.Add ("Is Block Size"' "largeship");  			isBlockSize = true;  			blockSize = 3;  		}  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.Count () > 0) {  	if (words.FirstOrDefault (x => x.ToLower () == "debug") != null) {  		options.Add ("Debug"' "true");  		debug = true;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "quiet") != null) {  		options.Add ("Quiet"' "true");  		quiet = true;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "ownership") != null) {  		options.Add ("Ownership"' "true");  		owner = 2;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "noownership") != null) {  		options.Add ("Ownership"' "false");  		owner = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "functional") != null) {  		options.Add ("Functional"' "true");  		functional = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nofunctional") != null) {  		options.Add ("Functional"' "false");  		functional = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "terminal") != null) {  		options.Add ("Terminal"' "true");  		terminal = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "noterminal") != null) {  		options.Add ("Terminal"' "false");  		terminal = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "power") != null) {  		options.Add ("Has Power"' "true");  		power = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nopower") != null) {  		options.Add ("Has Power"' "false");  		power = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "notonline") != null) {  		options.Add ("Online"' "false");  		online = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "online") != null) {  		options.Add ("Online"' "true");  		online = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasDisplayName = true;  			displayName = parts [1];  			options.Add ("Matches Display Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasDisplayNameExact = true;  				options.Add ("Matches Display Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasCustomName = true;  			customName = parts [1];  			options.Add ("Matches Custom Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasCustomNameExact = true;  				options.Add ("Matches Custom Name Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubType = true;  		options.Add ("Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubTypeLimits = true;  		options.Add ("Exclude Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type Limit: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			isOwnedBy = true;  			ownedBy = parts [1];  			if (PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).Count > 0)  				ownedByPlayerId = PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).First ().playerId;  			options.Add ("Owned By"' ownedBy);  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")).Split (new char[] {  			':'  		});  		includesBlockType = true;  		options.Add ("Includes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypes.Add (parts [1]' 1);  			options.Add ("Includes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypes.Add (parts [1]' count);  			options.Add ("Includes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")).Split (new char[] {  			':'  		});  		excludesBlockType = true;  		options.Add ("Excludes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypesExcluded.Add (parts [1]' 1);  			options.Add ("Excludes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypesExcluded.Add (parts [1]' count);  			options.Add ("Excludes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")).Split (new char[] {  			':'  		});  		requireBlockCount = true;  		options.Add ("Requires Block Count"' "true");  		if (parts.Length < 2) {  			blockCount = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCount = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")).Split (new char[] {  			':'  		});  		requireBlockCountLess = true;  		options.Add ("Requires Block Count Less Than"' "true");  		if (parts.Length < 2) {  			blockCountLess = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCountLess = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")).Split (new char[] {  			':'  		});  		if (parts [1].ToLower () == "small") {  			options.Add ("Is Block Size"' "small");  			isBlockSize = true;  			blockSize = 0;  		} else if (parts [1].ToLower () == "large") {  			options.Add ("Is Block Size"' "large");  			isBlockSize = true;  			blockSize = 1;  		} else if (parts [1].ToLower () == "station") {  			options.Add ("Is Block Size"' "station");  			isBlockSize = true;  			blockSize = 2;  		} else if (parts [1].ToLower () == "largeship") {  			options.Add ("Is Block Size"' "largeship");  			isBlockSize = true;  			blockSize = 3;  		}  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.Count () > 0) {  	if (words.FirstOrDefault (x => x.ToLower () == "debug") != null) {  		options.Add ("Debug"' "true");  		debug = true;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "quiet") != null) {  		options.Add ("Quiet"' "true");  		quiet = true;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "ownership") != null) {  		options.Add ("Ownership"' "true");  		owner = 2;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "noownership") != null) {  		options.Add ("Ownership"' "false");  		owner = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "functional") != null) {  		options.Add ("Functional"' "true");  		functional = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nofunctional") != null) {  		options.Add ("Functional"' "false");  		functional = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "terminal") != null) {  		options.Add ("Terminal"' "true");  		terminal = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "noterminal") != null) {  		options.Add ("Terminal"' "false");  		terminal = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "power") != null) {  		options.Add ("Has Power"' "true");  		power = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nopower") != null) {  		options.Add ("Has Power"' "false");  		power = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "notonline") != null) {  		options.Add ("Online"' "false");  		online = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "online") != null) {  		options.Add ("Online"' "true");  		online = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasDisplayName = true;  			displayName = parts [1];  			options.Add ("Matches Display Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasDisplayNameExact = true;  				options.Add ("Matches Display Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasCustomName = true;  			customName = parts [1];  			options.Add ("Matches Custom Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasCustomNameExact = true;  				options.Add ("Matches Custom Name Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubType = true;  		options.Add ("Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubTypeLimits = true;  		options.Add ("Exclude Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type Limit: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			isOwnedBy = true;  			ownedBy = parts [1];  			if (PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).Count > 0)  				ownedByPlayerId = PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).First ().playerId;  			options.Add ("Owned By"' ownedBy);  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")).Split (new char[] {  			':'  		});  		includesBlockType = true;  		options.Add ("Includes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypes.Add (parts [1]' 1);  			options.Add ("Includes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypes.Add (parts [1]' count);  			options.Add ("Includes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")).Split (new char[] {  			':'  		});  		excludesBlockType = true;  		options.Add ("Excludes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypesExcluded.Add (parts [1]' 1);  			options.Add ("Excludes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypesExcluded.Add (parts [1]' count);  			options.Add ("Excludes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")).Split (new char[] {  			':'  		});  		requireBlockCount = true;  		options.Add ("Requires Block Count"' "true");  		if (parts.Length < 2) {  			blockCount = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCount = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")).Split (new char[] {  			':'  		});  		requireBlockCountLess = true;  		options.Add ("Requires Block Count Less Than"' "true");  		if (parts.Length < 2) {  			blockCountLess = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCountLess = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")).Split (new char[] {  			':'  		});  		if (parts [1].ToLower () == "small") {  			options.Add ("Is Block Size"' "small");  			isBlockSize = true;  			blockSize = 0;  		} else if (parts [1].ToLower () == "large") {  			options.Add ("Is Block Size"' "large");  			isBlockSize = true;  			blockSize = 1;  		} else if (parts [1].ToLower () == "station") {  			options.Add ("Is Block Size"' "station");  			isBlockSize = true;  			blockSize = 2;  		} else if (parts [1].ToLower () == "largeship") {  			options.Add ("Is Block Size"' "largeship");  			isBlockSize = true;  			blockSize = 3;  		}  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.Count () > 0) {  	if (words.FirstOrDefault (x => x.ToLower () == "debug") != null) {  		options.Add ("Debug"' "true");  		debug = true;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "quiet") != null) {  		options.Add ("Quiet"' "true");  		quiet = true;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "ownership") != null) {  		options.Add ("Ownership"' "true");  		owner = 2;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "noownership") != null) {  		options.Add ("Ownership"' "false");  		owner = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "functional") != null) {  		options.Add ("Functional"' "true");  		functional = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nofunctional") != null) {  		options.Add ("Functional"' "false");  		functional = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "terminal") != null) {  		options.Add ("Terminal"' "true");  		terminal = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "noterminal") != null) {  		options.Add ("Terminal"' "false");  		terminal = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "power") != null) {  		options.Add ("Has Power"' "true");  		power = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nopower") != null) {  		options.Add ("Has Power"' "false");  		power = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "notonline") != null) {  		options.Add ("Online"' "false");  		online = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "online") != null) {  		options.Add ("Online"' "true");  		online = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasDisplayName = true;  			displayName = parts [1];  			options.Add ("Matches Display Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasDisplayNameExact = true;  				options.Add ("Matches Display Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasCustomName = true;  			customName = parts [1];  			options.Add ("Matches Custom Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasCustomNameExact = true;  				options.Add ("Matches Custom Name Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubType = true;  		options.Add ("Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubTypeLimits = true;  		options.Add ("Exclude Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type Limit: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			isOwnedBy = true;  			ownedBy = parts [1];  			if (PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).Count > 0)  				ownedByPlayerId = PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).First ().playerId;  			options.Add ("Owned By"' ownedBy);  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")).Split (new char[] {  			':'  		});  		includesBlockType = true;  		options.Add ("Includes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypes.Add (parts [1]' 1);  			options.Add ("Includes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypes.Add (parts [1]' count);  			options.Add ("Includes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")).Split (new char[] {  			':'  		});  		excludesBlockType = true;  		options.Add ("Excludes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypesExcluded.Add (parts [1]' 1);  			options.Add ("Excludes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypesExcluded.Add (parts [1]' count);  			options.Add ("Excludes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")).Split (new char[] {  			':'  		});  		requireBlockCount = true;  		options.Add ("Requires Block Count"' "true");  		if (parts.Length < 2) {  			blockCount = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCount = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")).Split (new char[] {  			':'  		});  		requireBlockCountLess = true;  		options.Add ("Requires Block Count Less Than"' "true");  		if (parts.Length < 2) {  			blockCountLess = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCountLess = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")).Split (new char[] {  			':'  		});  		if (parts [1].ToLower () == "small") {  			options.Add ("Is Block Size"' "small");  			isBlockSize = true;  			blockSize = 0;  		} else if (parts [1].ToLower () == "large") {  			options.Add ("Is Block Size"' "large");  			isBlockSize = true;  			blockSize = 1;  		} else if (parts [1].ToLower () == "station") {  			options.Add ("Is Block Size"' "station");  			isBlockSize = true;  			blockSize = 2;  		} else if (parts [1].ToLower () == "largeship") {  			options.Add ("Is Block Size"' "largeship");  			isBlockSize = true;  			blockSize = 3;  		}  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.Count () > 0) {  	if (words.FirstOrDefault (x => x.ToLower () == "debug") != null) {  		options.Add ("Debug"' "true");  		debug = true;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "quiet") != null) {  		options.Add ("Quiet"' "true");  		quiet = true;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "ownership") != null) {  		options.Add ("Ownership"' "true");  		owner = 2;  	}  	if (words.SingleOrDefault (x => x.ToLower () == "noownership") != null) {  		options.Add ("Ownership"' "false");  		owner = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "functional") != null) {  		options.Add ("Functional"' "true");  		functional = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nofunctional") != null) {  		options.Add ("Functional"' "false");  		functional = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "terminal") != null) {  		options.Add ("Terminal"' "true");  		terminal = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "noterminal") != null) {  		options.Add ("Terminal"' "false");  		terminal = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "power") != null) {  		options.Add ("Has Power"' "true");  		power = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "nopower") != null) {  		options.Add ("Has Power"' "false");  		power = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "notonline") != null) {  		options.Add ("Online"' "false");  		online = 1;  	}  	if (words.FirstOrDefault (x => x.ToLower () == "online") != null) {  		options.Add ("Online"' "true");  		online = 2;  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasDisplayName = true;  			displayName = parts [1];  			options.Add ("Matches Display Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasDisplayNameExact = true;  				options.Add ("Matches Display Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			hasCustomName = true;  			customName = parts [1];  			options.Add ("Matches Custom Name Text"' "true:" + displayName);  			//Console.WriteLine("Here: {0}"' parts[2]);  			if (parts.Length > 2 && parts [2].ToLower () == "exact") {  				hasCustomNameExact = true;  				options.Add ("Matches Custom Name Exactly"' "true");  			}  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubType = true;  		options.Add ("Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")).Split (new char[] {  			':'  		});  		hasBlockSubTypeLimits = true;  		options.Add ("Exclude Has Sub Block Type"' "true");  		if (parts.Length < 3) {  			blockSubTypes.Add (parts [1]' 1);  			options.Add ("Sub Block Type Limit: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockSubTypes.Add (parts [1]' count);  			options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("ownedby:")).Split (new char[] {  			':'  		});  		if (parts.Length > 1) {  			isOwnedBy = true;  			ownedBy = parts [1];  			if (PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).Count > 0)  				ownedByPlayerId = PlayerMap.Instance.GetPlayerItemsFromPlayerName (ownedBy).First ().playerId;  			options.Add ("Owned By"' ownedBy);  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")).Split (new char[] {  			':'  		});  		includesBlockType = true;  		options.Add ("Includes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypes.Add (parts [1]' 1);  			options.Add ("Includes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypes.Add (parts [1]' count);  			options.Add ("Includes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")).Split (new char[] {  			':'  		});  		excludesBlockType = true;  		options.Add ("Excludes Block Type"' "true");  		if (parts.Length < 3) {  			blockTypesExcluded.Add (parts [1]' 1);  			options.Add ("Excludes Block Type Count: " + parts [1]' "1");  		} else {  			int count = 1;  			int.TryParse (parts [2]' out count);  			blockTypesExcluded.Add (parts [1]' count);  			options.Add ("Excludes Block Type Count: " + parts [1]' count.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")).Split (new char[] {  			':'  		});  		requireBlockCount = true;  		options.Add ("Requires Block Count"' "true");  		if (parts.Length < 2) {  			blockCount = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCount = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")).Split (new char[] {  			':'  		});  		requireBlockCountLess = true;  		options.Add ("Requires Block Count Less Than"' "true");  		if (parts.Length < 2) {  			blockCountLess = 1;  			options.Add ("Block Count:"' "1");  		} else {  			int count = 1;  			int.TryParse (parts [1]' out count);  			blockCountLess = count;  			options.Add ("Block Count:"' blockCount.ToString ());  		}  	}  	if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")) != null) {  		string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")).Split (new char[] {  			':'  		});  		if (parts [1].ToLower () == "small") {  			options.Add ("Is Block Size"' "small");  			isBlockSize = true;  			blockSize = 0;  		} else if (parts [1].ToLower () == "large") {  			options.Add ("Is Block Size"' "large");  			isBlockSize = true;  			blockSize = 1;  		} else if (parts [1].ToLower () == "station") {  			options.Add ("Is Block Size"' "station");  			isBlockSize = true;  			blockSize = 2;  		} else if (parts [1].ToLower () == "largeship") {  			options.Add ("Is Block Size"' "largeship");  			isBlockSize = true;  			blockSize = 3;  		}  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.SingleOrDefault (x => x.ToLower () == "ownership") != null) {  	options.Add ("Ownership"' "true");  	owner = 2;  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: owner = 2;  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.FirstOrDefault (x => x.ToLower () == "functional") != null) {  	options.Add ("Functional"' "true");  	functional = 2;  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: functional = 2;  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.FirstOrDefault (x => x.ToLower () == "terminal") != null) {  	options.Add ("Terminal"' "true");  	terminal = 2;  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: terminal = 2;  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.FirstOrDefault (x => x.ToLower () == "power") != null) {  	options.Add ("Has Power"' "true");  	power = 2;  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: power = 2;  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.FirstOrDefault (x => x.ToLower () == "online") != null) {  	options.Add ("Online"' "true");  	online = 2;  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: online = 2;  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")) != null) {  	string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  		':'  	});  	if (parts.Length > 1) {  		hasDisplayName = true;  		displayName = parts [1];  		options.Add ("Matches Display Name Text"' "true:" + displayName);  		//Console.WriteLine("Here: {0}"' parts[2]);  		if (parts.Length > 2 && parts [2].ToLower () == "exact") {  			hasDisplayNameExact = true;  			options.Add ("Matches Display Exactly"' "true");  		}  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")) != null) {  	string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hasdisplayname:")).Split (new char[] {  		':'  	});  	if (parts.Length > 1) {  		hasDisplayName = true;  		displayName = parts [1];  		options.Add ("Matches Display Name Text"' "true:" + displayName);  		//Console.WriteLine("Here: {0}"' parts[2]);  		if (parts.Length > 2 && parts [2].ToLower () == "exact") {  			hasDisplayNameExact = true;  			options.Add ("Matches Display Exactly"' "true");  		}  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (parts.Length > 1) {  	hasDisplayName = true;  	displayName = parts [1];  	options.Add ("Matches Display Name Text"' "true:" + displayName);  	//Console.WriteLine("Here: {0}"' parts[2]);  	if (parts.Length > 2 && parts [2].ToLower () == "exact") {  		hasDisplayNameExact = true;  		options.Add ("Matches Display Exactly"' "true");  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (parts.Length > 1) {  	hasDisplayName = true;  	displayName = parts [1];  	options.Add ("Matches Display Name Text"' "true:" + displayName);  	//Console.WriteLine("Here: {0}"' parts[2]);  	if (parts.Length > 2 && parts [2].ToLower () == "exact") {  		hasDisplayNameExact = true;  		options.Add ("Matches Display Exactly"' "true");  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (parts.Length > 2 && parts [2].ToLower () == "exact") {  	hasDisplayNameExact = true;  	options.Add ("Matches Display Exactly"' "true");  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (parts.Length > 2 && parts [2].ToLower () == "exact") {  	hasDisplayNameExact = true;  	options.Add ("Matches Display Exactly"' "true");  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")) != null) {  	string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")).Split (new char[] {  		':'  	});  	if (parts.Length > 1) {  		hasCustomName = true;  		customName = parts [1];  		options.Add ("Matches Custom Name Text"' "true:" + displayName);  		//Console.WriteLine("Here: {0}"' parts[2]);  		if (parts.Length > 2 && parts [2].ToLower () == "exact") {  			hasCustomNameExact = true;  			options.Add ("Matches Custom Name Exactly"' "true");  		}  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")) != null) {  	string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("hascustomname:")).Split (new char[] {  		':'  	});  	if (parts.Length > 1) {  		hasCustomName = true;  		customName = parts [1];  		options.Add ("Matches Custom Name Text"' "true:" + displayName);  		//Console.WriteLine("Here: {0}"' parts[2]);  		if (parts.Length > 2 && parts [2].ToLower () == "exact") {  			hasCustomNameExact = true;  			options.Add ("Matches Custom Name Exactly"' "true");  		}  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (parts.Length > 1) {  	hasCustomName = true;  	customName = parts [1];  	options.Add ("Matches Custom Name Text"' "true:" + displayName);  	//Console.WriteLine("Here: {0}"' parts[2]);  	if (parts.Length > 2 && parts [2].ToLower () == "exact") {  		hasCustomNameExact = true;  		options.Add ("Matches Custom Name Exactly"' "true");  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (parts.Length > 1) {  	hasCustomName = true;  	customName = parts [1];  	options.Add ("Matches Custom Name Text"' "true:" + displayName);  	//Console.WriteLine("Here: {0}"' parts[2]);  	if (parts.Length > 2 && parts [2].ToLower () == "exact") {  		hasCustomNameExact = true;  		options.Add ("Matches Custom Name Exactly"' "true");  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (parts.Length > 2 && parts [2].ToLower () == "exact") {  	hasCustomNameExact = true;  	options.Add ("Matches Custom Name Exactly"' "true");  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (parts.Length > 2 && parts [2].ToLower () == "exact") {  	hasCustomNameExact = true;  	options.Add ("Matches Custom Name Exactly"' "true");  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")) != null) {  	string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")).Split (new char[] {  		':'  	});  	hasBlockSubType = true;  	options.Add ("Has Sub Block Type"' "true");  	if (parts.Length < 3) {  		blockSubTypes.Add (parts [1]' 1);  		options.Add ("Sub Block Type: " + parts [1]' "1");  	} else {  		int count = 1;  		int.TryParse (parts [2]' out count);  		blockSubTypes.Add (parts [1]' count);  		options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")) != null) {  	string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocksubtype:")).Split (new char[] {  		':'  	});  	hasBlockSubType = true;  	options.Add ("Has Sub Block Type"' "true");  	if (parts.Length < 3) {  		blockSubTypes.Add (parts [1]' 1);  		options.Add ("Sub Block Type: " + parts [1]' "1");  	} else {  		int count = 1;  		int.TryParse (parts [2]' out count);  		blockSubTypes.Add (parts [1]' count);  		options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (parts.Length < 3) {  	blockSubTypes.Add (parts [1]' 1);  	options.Add ("Sub Block Type: " + parts [1]' "1");  } else {  	int count = 1;  	int.TryParse (parts [2]' out count);  	blockSubTypes.Add (parts [1]' count);  	options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (parts.Length < 3) {  	blockSubTypes.Add (parts [1]' 1);  	options.Add ("Sub Block Type: " + parts [1]' "1");  } else {  	int count = 1;  	int.TryParse (parts [2]' out count);  	blockSubTypes.Add (parts [1]' count);  	options.Add ("Sub Block Type: " + parts [1]' count.ToString ());  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: int.TryParse (parts [2]' out count);  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")) != null) {  	string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")).Split (new char[] {  		':'  	});  	hasBlockSubTypeLimits = true;  	options.Add ("Exclude Has Sub Block Type"' "true");  	if (parts.Length < 3) {  		blockSubTypes.Add (parts [1]' 1);  		options.Add ("Sub Block Type Limit: " + parts [1]' "1");  	} else {  		int count = 1;  		int.TryParse (parts [2]' out count);  		blockSubTypes.Add (parts [1]' count);  		options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")) != null) {  	string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocksubtype:")).Split (new char[] {  		':'  	});  	hasBlockSubTypeLimits = true;  	options.Add ("Exclude Has Sub Block Type"' "true");  	if (parts.Length < 3) {  		blockSubTypes.Add (parts [1]' 1);  		options.Add ("Sub Block Type Limit: " + parts [1]' "1");  	} else {  		int count = 1;  		int.TryParse (parts [2]' out count);  		blockSubTypes.Add (parts [1]' count);  		options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (parts.Length < 3) {  	blockSubTypes.Add (parts [1]' 1);  	options.Add ("Sub Block Type Limit: " + parts [1]' "1");  } else {  	int count = 1;  	int.TryParse (parts [2]' out count);  	blockSubTypes.Add (parts [1]' count);  	options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (parts.Length < 3) {  	blockSubTypes.Add (parts [1]' 1);  	options.Add ("Sub Block Type Limit: " + parts [1]' "1");  } else {  	int count = 1;  	int.TryParse (parts [2]' out count);  	blockSubTypes.Add (parts [1]' count);  	options.Add ("Sub Block Type Limit: " + parts [1]' count.ToString ());  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: int.TryParse (parts [2]' out count);  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")) != null) {  	string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")).Split (new char[] {  		':'  	});  	includesBlockType = true;  	options.Add ("Includes Block Type"' "true");  	if (parts.Length < 3) {  		blockTypes.Add (parts [1]' 1);  		options.Add ("Includes Block Type Count: " + parts [1]' "1");  	} else {  		int count = 1;  		int.TryParse (parts [2]' out count);  		blockTypes.Add (parts [1]' count);  		options.Add ("Includes Block Type Count: " + parts [1]' count.ToString ());  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")) != null) {  	string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("includesblocktype:")).Split (new char[] {  		':'  	});  	includesBlockType = true;  	options.Add ("Includes Block Type"' "true");  	if (parts.Length < 3) {  		blockTypes.Add (parts [1]' 1);  		options.Add ("Includes Block Type Count: " + parts [1]' "1");  	} else {  		int count = 1;  		int.TryParse (parts [2]' out count);  		blockTypes.Add (parts [1]' count);  		options.Add ("Includes Block Type Count: " + parts [1]' count.ToString ());  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (parts.Length < 3) {  	blockTypes.Add (parts [1]' 1);  	options.Add ("Includes Block Type Count: " + parts [1]' "1");  } else {  	int count = 1;  	int.TryParse (parts [2]' out count);  	blockTypes.Add (parts [1]' count);  	options.Add ("Includes Block Type Count: " + parts [1]' count.ToString ());  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (parts.Length < 3) {  	blockTypes.Add (parts [1]' 1);  	options.Add ("Includes Block Type Count: " + parts [1]' "1");  } else {  	int count = 1;  	int.TryParse (parts [2]' out count);  	blockTypes.Add (parts [1]' count);  	options.Add ("Includes Block Type Count: " + parts [1]' count.ToString ());  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: int.TryParse (parts [2]' out count);  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")) != null) {  	string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")).Split (new char[] {  		':'  	});  	excludesBlockType = true;  	options.Add ("Excludes Block Type"' "true");  	if (parts.Length < 3) {  		blockTypesExcluded.Add (parts [1]' 1);  		options.Add ("Excludes Block Type Count: " + parts [1]' "1");  	} else {  		int count = 1;  		int.TryParse (parts [2]' out count);  		blockTypesExcluded.Add (parts [1]' count);  		options.Add ("Excludes Block Type Count: " + parts [1]' count.ToString ());  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")) != null) {  	string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("excludesblocktype:")).Split (new char[] {  		':'  	});  	excludesBlockType = true;  	options.Add ("Excludes Block Type"' "true");  	if (parts.Length < 3) {  		blockTypesExcluded.Add (parts [1]' 1);  		options.Add ("Excludes Block Type Count: " + parts [1]' "1");  	} else {  		int count = 1;  		int.TryParse (parts [2]' out count);  		blockTypesExcluded.Add (parts [1]' count);  		options.Add ("Excludes Block Type Count: " + parts [1]' count.ToString ());  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (parts.Length < 3) {  	blockTypesExcluded.Add (parts [1]' 1);  	options.Add ("Excludes Block Type Count: " + parts [1]' "1");  } else {  	int count = 1;  	int.TryParse (parts [2]' out count);  	blockTypesExcluded.Add (parts [1]' count);  	options.Add ("Excludes Block Type Count: " + parts [1]' count.ToString ());  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (parts.Length < 3) {  	blockTypesExcluded.Add (parts [1]' 1);  	options.Add ("Excludes Block Type Count: " + parts [1]' "1");  } else {  	int count = 1;  	int.TryParse (parts [2]' out count);  	blockTypesExcluded.Add (parts [1]' count);  	options.Add ("Excludes Block Type Count: " + parts [1]' count.ToString ());  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: int.TryParse (parts [2]' out count);  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")) != null) {  	string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcount:")).Split (new char[] {  		':'  	});  	requireBlockCount = true;  	options.Add ("Requires Block Count"' "true");  	if (parts.Length < 2) {  		blockCount = 1;  		options.Add ("Block Count:"' "1");  	} else {  		int count = 1;  		int.TryParse (parts [1]' out count);  		blockCount = count;  		options.Add ("Block Count:"' blockCount.ToString ());  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (parts.Length < 2) {  	blockCount = 1;  	options.Add ("Block Count:"' "1");  } else {  	int count = 1;  	int.TryParse (parts [1]' out count);  	blockCount = count;  	options.Add ("Block Count:"' blockCount.ToString ());  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")) != null) {  	string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blockcountlessthan:")).Split (new char[] {  		':'  	});  	requireBlockCountLess = true;  	options.Add ("Requires Block Count Less Than"' "true");  	if (parts.Length < 2) {  		blockCountLess = 1;  		options.Add ("Block Count:"' "1");  	} else {  		int count = 1;  		int.TryParse (parts [1]' out count);  		blockCountLess = count;  		options.Add ("Block Count:"' blockCount.ToString ());  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (parts.Length < 2) {  	blockCountLess = 1;  	options.Add ("Block Count:"' "1");  } else {  	int count = 1;  	int.TryParse (parts [1]' out count);  	blockCountLess = count;  	options.Add ("Block Count:"' blockCount.ToString ());  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")) != null) {  	string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")).Split (new char[] {  		':'  	});  	if (parts [1].ToLower () == "small") {  		options.Add ("Is Block Size"' "small");  		isBlockSize = true;  		blockSize = 0;  	} else if (parts [1].ToLower () == "large") {  		options.Add ("Is Block Size"' "large");  		isBlockSize = true;  		blockSize = 1;  	} else if (parts [1].ToLower () == "station") {  		options.Add ("Is Block Size"' "station");  		isBlockSize = true;  		blockSize = 2;  	} else if (parts [1].ToLower () == "largeship") {  		options.Add ("Is Block Size"' "largeship");  		isBlockSize = true;  		blockSize = 3;  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")) != null) {  	string[] parts = words.FirstOrDefault (x => x.ToLower ().StartsWith ("blocksize:")).Split (new char[] {  		':'  	});  	if (parts [1].ToLower () == "small") {  		options.Add ("Is Block Size"' "small");  		isBlockSize = true;  		blockSize = 0;  	} else if (parts [1].ToLower () == "large") {  		options.Add ("Is Block Size"' "large");  		isBlockSize = true;  		blockSize = 1;  	} else if (parts [1].ToLower () == "station") {  		options.Add ("Is Block Size"' "station");  		isBlockSize = true;  		blockSize = 2;  	} else if (parts [1].ToLower () == "largeship") {  		options.Add ("Is Block Size"' "largeship");  		isBlockSize = true;  		blockSize = 3;  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (parts [1].ToLower () == "small") {  	options.Add ("Is Block Size"' "small");  	isBlockSize = true;  	blockSize = 0;  } else if (parts [1].ToLower () == "large") {  	options.Add ("Is Block Size"' "large");  	isBlockSize = true;  	blockSize = 1;  } else if (parts [1].ToLower () == "station") {  	options.Add ("Is Block Size"' "station");  	isBlockSize = true;  	blockSize = 2;  } else if (parts [1].ToLower () == "largeship") {  	options.Add ("Is Block Size"' "largeship");  	isBlockSize = true;  	blockSize = 3;  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (parts [1].ToLower () == "small") {  	options.Add ("Is Block Size"' "small");  	isBlockSize = true;  	blockSize = 0;  } else if (parts [1].ToLower () == "large") {  	options.Add ("Is Block Size"' "large");  	isBlockSize = true;  	blockSize = 1;  } else if (parts [1].ToLower () == "station") {  	options.Add ("Is Block Size"' "station");  	isBlockSize = true;  	blockSize = 2;  } else if (parts [1].ToLower () == "largeship") {  	options.Add ("Is Block Size"' "largeship");  	isBlockSize = true;  	blockSize = 3;  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (parts [1].ToLower () == "large") {  	options.Add ("Is Block Size"' "large");  	isBlockSize = true;  	blockSize = 1;  } else if (parts [1].ToLower () == "station") {  	options.Add ("Is Block Size"' "station");  	isBlockSize = true;  	blockSize = 2;  } else if (parts [1].ToLower () == "largeship") {  	options.Add ("Is Block Size"' "largeship");  	isBlockSize = true;  	blockSize = 3;  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (parts [1].ToLower () == "large") {  	options.Add ("Is Block Size"' "large");  	isBlockSize = true;  	blockSize = 1;  } else if (parts [1].ToLower () == "station") {  	options.Add ("Is Block Size"' "station");  	isBlockSize = true;  	blockSize = 2;  } else if (parts [1].ToLower () == "largeship") {  	options.Add ("Is Block Size"' "largeship");  	isBlockSize = true;  	blockSize = 3;  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (parts [1].ToLower () == "station") {  	options.Add ("Is Block Size"' "station");  	isBlockSize = true;  	blockSize = 2;  } else if (parts [1].ToLower () == "largeship") {  	options.Add ("Is Block Size"' "largeship");  	isBlockSize = true;  	blockSize = 3;  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (parts [1].ToLower () == "station") {  	options.Add ("Is Block Size"' "station");  	isBlockSize = true;  	blockSize = 2;  } else if (parts [1].ToLower () == "largeship") {  	options.Add ("Is Block Size"' "largeship");  	isBlockSize = true;  	blockSize = 3;  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: blockSize = 2;  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (parts [1].ToLower () == "largeship") {  	options.Add ("Is Block Size"' "largeship");  	isBlockSize = true;  	blockSize = 3;  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: blockSize = 3;  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: foreach (IMyEntity entity in entities) {  	if (!(entity is IMyCubeGrid))  		continue;  	IMyCubeGrid grid = (IMyCubeGrid)entity;  	MyObjectBuilder_CubeGrid gridBuilder = null;  	try {  		gridBuilder = (MyObjectBuilder_CubeGrid)grid.GetObjectBuilder ();  	} catch {  		continue;  	}  	if (PluginSettings.Instance.LoginEntityWhitelist.Contains (entity.EntityId.ToString ()) || PluginSettings.Instance.LoginEntityWhitelist.Contains (entity.DisplayName))  		continue;  	if (hasDisplayName && displayName != "") {  		if (!hasDisplayNameExact && entity.DisplayName.Contains (displayName))  			entitiesToConfirm.Add (entity);  		if (hasDisplayNameExact && entity.DisplayName.Equals (displayName))  			entitiesToConfirm.Add (entity);  	} else if (hasCustomName && HasCustomName (gridBuilder' customName' hasCustomNameExact)) {  		entitiesToConfirm.Add (entity);  	} else if (hasCustomName) {  		continue;  	} else if (isOwnedBy && ownedByPlayerId > 0 && GetAllOwners (gridBuilder).Contains (ownedByPlayerId)) {  		entitiesToConfirm.Add (entity);  	} else if (!isOwnedBy && owner == 0) {  		entitiesToConfirm.Add (entity);  	} else if (!isOwnedBy && owner == 2 && HasOwner (gridBuilder)) {  		entitiesToConfirm.Add (entity);  	} else if (!isOwnedBy && owner == 1 && !HasOwner (gridBuilder)) {  		entitiesToConfirm.Add (entity);  	}  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (hasDisplayName && displayName != "") {  	if (!hasDisplayNameExact && entity.DisplayName.Contains (displayName))  		entitiesToConfirm.Add (entity);  	if (hasDisplayNameExact && entity.DisplayName.Equals (displayName))  		entitiesToConfirm.Add (entity);  } else if (hasCustomName && HasCustomName (gridBuilder' customName' hasCustomNameExact)) {  	entitiesToConfirm.Add (entity);  } else if (hasCustomName) {  	continue;  } else if (isOwnedBy && ownedByPlayerId > 0 && GetAllOwners (gridBuilder).Contains (ownedByPlayerId)) {  	entitiesToConfirm.Add (entity);  } else if (!isOwnedBy && owner == 0) {  	entitiesToConfirm.Add (entity);  } else if (!isOwnedBy && owner == 2 && HasOwner (gridBuilder)) {  	entitiesToConfirm.Add (entity);  } else if (!isOwnedBy && owner == 1 && !HasOwner (gridBuilder)) {  	entitiesToConfirm.Add (entity);  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (hasCustomName && HasCustomName (gridBuilder' customName' hasCustomNameExact)) {  	entitiesToConfirm.Add (entity);  } else if (hasCustomName) {  	continue;  } else if (isOwnedBy && ownedByPlayerId > 0 && GetAllOwners (gridBuilder).Contains (ownedByPlayerId)) {  	entitiesToConfirm.Add (entity);  } else if (!isOwnedBy && owner == 0) {  	entitiesToConfirm.Add (entity);  } else if (!isOwnedBy && owner == 2 && HasOwner (gridBuilder)) {  	entitiesToConfirm.Add (entity);  } else if (!isOwnedBy && owner == 1 && !HasOwner (gridBuilder)) {  	entitiesToConfirm.Add (entity);  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (hasCustomName) {  	continue;  } else if (isOwnedBy && ownedByPlayerId > 0 && GetAllOwners (gridBuilder).Contains (ownedByPlayerId)) {  	entitiesToConfirm.Add (entity);  } else if (!isOwnedBy && owner == 0) {  	entitiesToConfirm.Add (entity);  } else if (!isOwnedBy && owner == 2 && HasOwner (gridBuilder)) {  	entitiesToConfirm.Add (entity);  } else if (!isOwnedBy && owner == 1 && !HasOwner (gridBuilder)) {  	entitiesToConfirm.Add (entity);  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (isOwnedBy && ownedByPlayerId > 0 && GetAllOwners (gridBuilder).Contains (ownedByPlayerId)) {  	entitiesToConfirm.Add (entity);  } else if (!isOwnedBy && owner == 0) {  	entitiesToConfirm.Add (entity);  } else if (!isOwnedBy && owner == 2 && HasOwner (gridBuilder)) {  	entitiesToConfirm.Add (entity);  } else if (!isOwnedBy && owner == 1 && !HasOwner (gridBuilder)) {  	entitiesToConfirm.Add (entity);  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (!isOwnedBy && owner == 0) {  	entitiesToConfirm.Add (entity);  } else if (!isOwnedBy && owner == 2 && HasOwner (gridBuilder)) {  	entitiesToConfirm.Add (entity);  } else if (!isOwnedBy && owner == 1 && !HasOwner (gridBuilder)) {  	entitiesToConfirm.Add (entity);  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (!isOwnedBy && owner == 2 && HasOwner (gridBuilder)) {  	entitiesToConfirm.Add (entity);  } else if (!isOwnedBy && owner == 1 && !HasOwner (gridBuilder)) {  	entitiesToConfirm.Add (entity);  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: foreach (IMyEntity entity in entitiesUnconnected) {  	subTypeDict.Clear ();  	typeDict.Clear ();  	checkList.Clear ();  	MyObjectBuilder_CubeGrid grid = (MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ();  	if (online == 1)// notonline  	 {  		bool foundOnline = false;  		foreach (ulong player in PlayerManager.Instance.ConnectedPlayers) {  			long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (player);  			if (playerId < 1)  				continue;  			if (CubeGrids.GetAllOwners (grid).Contains (playerId)) {  				foundOnline = true;  				break;  			}  		}  		if (foundOnline)  			continue;  	} else if (online == 2)// online  	 {  		bool foundOnline = true;  		foreach (ulong player in PlayerManager.Instance.ConnectedPlayers) {  			long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (player);  			if (playerId < 1)  				continue;  			if (CubeGrids.GetAllOwners (grid).Contains (playerId)) {  				foundOnline = false;  				break;  			}  		}  		if (foundOnline)  			continue;  	}  	bool found = true;  	foreach (MyObjectBuilder_CubeBlock block in grid.CubeBlocks) {  		if (functional != 0) {  			if (block is MyObjectBuilder_FunctionalBlock) {  				//							if (debug && !found)  				//								Communication.SendPrivateInformation(userId' string.Format("Found grid '{0}' ({1}) which has a functional block.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder()).CubeBlocks.Count));  				if (!checkList.Contains ("functional"))  					checkList.Add ("functional");  			}  		}  		if (terminal != 0) {  			if (block is MyObjectBuilder_TerminalBlock) {  				//if (debug && !found)  				//	Communication.SendPrivateInformation(userId' string.Format("Found grid '{0}' ({1}) which has a terminal block.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder()).CubeBlocks.Count));  				if (!checkList.Contains ("terminal"))  					checkList.Add ("terminal");  			}  		}  		if (power != 0) {  			if (DoesBlockSupplyPower (block)) {  				//if (debug && !found)  				//	Communication.SendPrivateInformation(userId' string.Format("Found grid '{0}' ({1}) which has power.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder()).CubeBlocks.Count));  				if (!checkList.Contains ("power"))  					checkList.Add ("power");  			}  		}  		if (hasBlockSubType || hasBlockSubTypeLimits) {  			string subTypeName = block.GetId ().SubtypeName;  			if (subTypeDict.ContainsKey (subTypeName))  				subTypeDict [subTypeName] = subTypeDict [subTypeName] + 1;  			else  				subTypeDict.Add (subTypeName' 1);  		}  		if (includesBlockType || excludesBlockType) {  			string typeName = block.GetId ().TypeId.ToString ();  			if (typeDict.ContainsKey (typeName))  				typeDict [typeName] = typeDict [typeName] + 1;  			else  				typeDict.Add (typeName' 1);  		}  	}  	if (functional != 0) {  		if (!checkList.Contains ("functional") && functional == 2)  			found = false;  		if (checkList.Contains ("functional") && functional == 1)  			found = false;  	}  	if (terminal != 0) {  		if (!checkList.Contains ("terminal") && terminal == 2)  			found = false;  		if (checkList.Contains ("terminal") && terminal == 1)  			found = false;  	}  	if (power != 0) {  		if (!checkList.Contains ("power") && power == 2)  			found = false;  		if (checkList.Contains ("power") && power == 1)  			found = false;  	}  	if (hasBlockSubType) {  		bool hasType = false;  		foreach (KeyValuePair<string' int> pairBlockTypesInGrid in subTypeDict) {  			foreach (KeyValuePair<string' int> pairBlockTypesFilter in blockSubTypes) {  				if (pairBlockTypesInGrid.Key.ToLower ().Contains (pairBlockTypesFilter.Key.ToLower ())) {  					if (pairBlockTypesInGrid.Value >= pairBlockTypesFilter.Value) {  						if (debug && !quiet)  							Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which contains at least {4} of block type {3} ({5}).  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count' pairBlockTypesInGrid.Key' pairBlockTypesFilter.Value' pairBlockTypesInGrid.Value));  						hasType = true;  						break;  					}  				}  			}  		}  		if (!hasType) {  			if (debug && !quiet)  				Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which does not contain block type.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count));  			found = false;  		}  	}  	if (includesBlockType) {  		bool hasType = false;  		foreach (KeyValuePair<string' int> pairBlockTypesInGrid in typeDict) {  			foreach (KeyValuePair<string' int> pairBlockTypesFilter in blockTypes) {  				if (pairBlockTypesInGrid.Key.ToLower ().Contains (pairBlockTypesFilter.Key.ToLower ())) {  					if (pairBlockTypesInGrid.Value >= pairBlockTypesFilter.Value) {  						if (debug && !quiet)  							Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which contains at least {4} of block type {3} ({5}).  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count' pairBlockTypesInGrid.Key' pairBlockTypesFilter.Value' pairBlockTypesInGrid.Value));  						hasType = true;  						break;  					}  				}  			}  		}  		if (!hasType) {  			if (debug && !quiet)  				Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which does not contain block type.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count));  			found = false;  		}  	}  	if (hasBlockSubTypeLimits && found) {  		foreach (KeyValuePair<string' int> pairBlockTypesInGrid in subTypeDict) {  			foreach (KeyValuePair<string' int> pairBlockTypesFilter in blockSubTypes) {  				if (pairBlockTypesInGrid.Key.ToLower ().Contains (pairBlockTypesFilter.Key.ToLower ())) {  					if (pairBlockTypesInGrid.Value >= pairBlockTypesFilter.Value) {  						if (found)  							found = false;  						if (!quiet && debug)  							Communication.SendPrivateInformation (userId' string.Format ("Exclusion: Found grid '{0}' ({1}) which excludes block type of {3} at {4}.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count' pairBlockTypesFilter.Key' pairBlockTypesInGrid.Value));  						break;  					}  				}  			}  		}  	}  	if (excludesBlockType && found) {  		foreach (KeyValuePair<string' int> pairBlockTypesInGrid in typeDict) {  			foreach (KeyValuePair<string' int> pairBlockTypesFilter in blockTypes) {  				if (pairBlockTypesInGrid.Key.ToLower ().Contains (pairBlockTypesFilter.Key.ToLower ())) {  					if (pairBlockTypesInGrid.Value >= pairBlockTypesFilter.Value) {  						if (found)  							found = false;  						if (!quiet && debug)  							Communication.SendPrivateInformation (userId' string.Format ("Exclusion: Found grid '{0}' ({1}) which excludes block type of {3} at {4}.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count' pairBlockTypesFilter.Key' pairBlockTypesInGrid.Value));  						break;  					}  				}  			}  		}  	}  	if (requireBlockCount && found && grid.CubeBlocks.Count < blockCount) {  		found = false;  	}  	if (requireBlockCountLess && found && grid.CubeBlocks.Count >= blockCountLess) {  		found = false;  	}  	if (isBlockSize && found && blockSize == 0 && grid.GridSizeEnum != MyCubeSize.Small) {  		found = false;  	}  	if (isBlockSize && found && blockSize == 1 && grid.GridSizeEnum != MyCubeSize.Large) {  		found = false;  	}  	if (isBlockSize && found && blockSize == 2 && (grid.GridSizeEnum != MyCubeSize.Large || grid.GridSizeEnum == MyCubeSize.Large && !grid.IsStatic)) {  		found = false;  	}  	if (isBlockSize && found && blockSize == 2 && (grid.GridSizeEnum != MyCubeSize.Large || grid.GridSizeEnum == MyCubeSize.Large && grid.IsStatic)) {  		found = false;  	}  	if (found)  		entitiesFound.Add (entity);  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: foreach (IMyEntity entity in entitiesUnconnected) {  	subTypeDict.Clear ();  	typeDict.Clear ();  	checkList.Clear ();  	MyObjectBuilder_CubeGrid grid = (MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ();  	if (online == 1)// notonline  	 {  		bool foundOnline = false;  		foreach (ulong player in PlayerManager.Instance.ConnectedPlayers) {  			long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (player);  			if (playerId < 1)  				continue;  			if (CubeGrids.GetAllOwners (grid).Contains (playerId)) {  				foundOnline = true;  				break;  			}  		}  		if (foundOnline)  			continue;  	} else if (online == 2)// online  	 {  		bool foundOnline = true;  		foreach (ulong player in PlayerManager.Instance.ConnectedPlayers) {  			long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (player);  			if (playerId < 1)  				continue;  			if (CubeGrids.GetAllOwners (grid).Contains (playerId)) {  				foundOnline = false;  				break;  			}  		}  		if (foundOnline)  			continue;  	}  	bool found = true;  	foreach (MyObjectBuilder_CubeBlock block in grid.CubeBlocks) {  		if (functional != 0) {  			if (block is MyObjectBuilder_FunctionalBlock) {  				//							if (debug && !found)  				//								Communication.SendPrivateInformation(userId' string.Format("Found grid '{0}' ({1}) which has a functional block.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder()).CubeBlocks.Count));  				if (!checkList.Contains ("functional"))  					checkList.Add ("functional");  			}  		}  		if (terminal != 0) {  			if (block is MyObjectBuilder_TerminalBlock) {  				//if (debug && !found)  				//	Communication.SendPrivateInformation(userId' string.Format("Found grid '{0}' ({1}) which has a terminal block.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder()).CubeBlocks.Count));  				if (!checkList.Contains ("terminal"))  					checkList.Add ("terminal");  			}  		}  		if (power != 0) {  			if (DoesBlockSupplyPower (block)) {  				//if (debug && !found)  				//	Communication.SendPrivateInformation(userId' string.Format("Found grid '{0}' ({1}) which has power.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder()).CubeBlocks.Count));  				if (!checkList.Contains ("power"))  					checkList.Add ("power");  			}  		}  		if (hasBlockSubType || hasBlockSubTypeLimits) {  			string subTypeName = block.GetId ().SubtypeName;  			if (subTypeDict.ContainsKey (subTypeName))  				subTypeDict [subTypeName] = subTypeDict [subTypeName] + 1;  			else  				subTypeDict.Add (subTypeName' 1);  		}  		if (includesBlockType || excludesBlockType) {  			string typeName = block.GetId ().TypeId.ToString ();  			if (typeDict.ContainsKey (typeName))  				typeDict [typeName] = typeDict [typeName] + 1;  			else  				typeDict.Add (typeName' 1);  		}  	}  	if (functional != 0) {  		if (!checkList.Contains ("functional") && functional == 2)  			found = false;  		if (checkList.Contains ("functional") && functional == 1)  			found = false;  	}  	if (terminal != 0) {  		if (!checkList.Contains ("terminal") && terminal == 2)  			found = false;  		if (checkList.Contains ("terminal") && terminal == 1)  			found = false;  	}  	if (power != 0) {  		if (!checkList.Contains ("power") && power == 2)  			found = false;  		if (checkList.Contains ("power") && power == 1)  			found = false;  	}  	if (hasBlockSubType) {  		bool hasType = false;  		foreach (KeyValuePair<string' int> pairBlockTypesInGrid in subTypeDict) {  			foreach (KeyValuePair<string' int> pairBlockTypesFilter in blockSubTypes) {  				if (pairBlockTypesInGrid.Key.ToLower ().Contains (pairBlockTypesFilter.Key.ToLower ())) {  					if (pairBlockTypesInGrid.Value >= pairBlockTypesFilter.Value) {  						if (debug && !quiet)  							Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which contains at least {4} of block type {3} ({5}).  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count' pairBlockTypesInGrid.Key' pairBlockTypesFilter.Value' pairBlockTypesInGrid.Value));  						hasType = true;  						break;  					}  				}  			}  		}  		if (!hasType) {  			if (debug && !quiet)  				Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which does not contain block type.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count));  			found = false;  		}  	}  	if (includesBlockType) {  		bool hasType = false;  		foreach (KeyValuePair<string' int> pairBlockTypesInGrid in typeDict) {  			foreach (KeyValuePair<string' int> pairBlockTypesFilter in blockTypes) {  				if (pairBlockTypesInGrid.Key.ToLower ().Contains (pairBlockTypesFilter.Key.ToLower ())) {  					if (pairBlockTypesInGrid.Value >= pairBlockTypesFilter.Value) {  						if (debug && !quiet)  							Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which contains at least {4} of block type {3} ({5}).  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count' pairBlockTypesInGrid.Key' pairBlockTypesFilter.Value' pairBlockTypesInGrid.Value));  						hasType = true;  						break;  					}  				}  			}  		}  		if (!hasType) {  			if (debug && !quiet)  				Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which does not contain block type.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count));  			found = false;  		}  	}  	if (hasBlockSubTypeLimits && found) {  		foreach (KeyValuePair<string' int> pairBlockTypesInGrid in subTypeDict) {  			foreach (KeyValuePair<string' int> pairBlockTypesFilter in blockSubTypes) {  				if (pairBlockTypesInGrid.Key.ToLower ().Contains (pairBlockTypesFilter.Key.ToLower ())) {  					if (pairBlockTypesInGrid.Value >= pairBlockTypesFilter.Value) {  						if (found)  							found = false;  						if (!quiet && debug)  							Communication.SendPrivateInformation (userId' string.Format ("Exclusion: Found grid '{0}' ({1}) which excludes block type of {3} at {4}.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count' pairBlockTypesFilter.Key' pairBlockTypesInGrid.Value));  						break;  					}  				}  			}  		}  	}  	if (excludesBlockType && found) {  		foreach (KeyValuePair<string' int> pairBlockTypesInGrid in typeDict) {  			foreach (KeyValuePair<string' int> pairBlockTypesFilter in blockTypes) {  				if (pairBlockTypesInGrid.Key.ToLower ().Contains (pairBlockTypesFilter.Key.ToLower ())) {  					if (pairBlockTypesInGrid.Value >= pairBlockTypesFilter.Value) {  						if (found)  							found = false;  						if (!quiet && debug)  							Communication.SendPrivateInformation (userId' string.Format ("Exclusion: Found grid '{0}' ({1}) which excludes block type of {3} at {4}.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count' pairBlockTypesFilter.Key' pairBlockTypesInGrid.Value));  						break;  					}  				}  			}  		}  	}  	if (requireBlockCount && found && grid.CubeBlocks.Count < blockCount) {  		found = false;  	}  	if (requireBlockCountLess && found && grid.CubeBlocks.Count >= blockCountLess) {  		found = false;  	}  	if (isBlockSize && found && blockSize == 0 && grid.GridSizeEnum != MyCubeSize.Small) {  		found = false;  	}  	if (isBlockSize && found && blockSize == 1 && grid.GridSizeEnum != MyCubeSize.Large) {  		found = false;  	}  	if (isBlockSize && found && blockSize == 2 && (grid.GridSizeEnum != MyCubeSize.Large || grid.GridSizeEnum == MyCubeSize.Large && !grid.IsStatic)) {  		found = false;  	}  	if (isBlockSize && found && blockSize == 2 && (grid.GridSizeEnum != MyCubeSize.Large || grid.GridSizeEnum == MyCubeSize.Large && grid.IsStatic)) {  		found = false;  	}  	if (found)  		entitiesFound.Add (entity);  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: foreach (IMyEntity entity in entitiesUnconnected) {  	subTypeDict.Clear ();  	typeDict.Clear ();  	checkList.Clear ();  	MyObjectBuilder_CubeGrid grid = (MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ();  	if (online == 1)// notonline  	 {  		bool foundOnline = false;  		foreach (ulong player in PlayerManager.Instance.ConnectedPlayers) {  			long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (player);  			if (playerId < 1)  				continue;  			if (CubeGrids.GetAllOwners (grid).Contains (playerId)) {  				foundOnline = true;  				break;  			}  		}  		if (foundOnline)  			continue;  	} else if (online == 2)// online  	 {  		bool foundOnline = true;  		foreach (ulong player in PlayerManager.Instance.ConnectedPlayers) {  			long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (player);  			if (playerId < 1)  				continue;  			if (CubeGrids.GetAllOwners (grid).Contains (playerId)) {  				foundOnline = false;  				break;  			}  		}  		if (foundOnline)  			continue;  	}  	bool found = true;  	foreach (MyObjectBuilder_CubeBlock block in grid.CubeBlocks) {  		if (functional != 0) {  			if (block is MyObjectBuilder_FunctionalBlock) {  				//							if (debug && !found)  				//								Communication.SendPrivateInformation(userId' string.Format("Found grid '{0}' ({1}) which has a functional block.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder()).CubeBlocks.Count));  				if (!checkList.Contains ("functional"))  					checkList.Add ("functional");  			}  		}  		if (terminal != 0) {  			if (block is MyObjectBuilder_TerminalBlock) {  				//if (debug && !found)  				//	Communication.SendPrivateInformation(userId' string.Format("Found grid '{0}' ({1}) which has a terminal block.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder()).CubeBlocks.Count));  				if (!checkList.Contains ("terminal"))  					checkList.Add ("terminal");  			}  		}  		if (power != 0) {  			if (DoesBlockSupplyPower (block)) {  				//if (debug && !found)  				//	Communication.SendPrivateInformation(userId' string.Format("Found grid '{0}' ({1}) which has power.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder()).CubeBlocks.Count));  				if (!checkList.Contains ("power"))  					checkList.Add ("power");  			}  		}  		if (hasBlockSubType || hasBlockSubTypeLimits) {  			string subTypeName = block.GetId ().SubtypeName;  			if (subTypeDict.ContainsKey (subTypeName))  				subTypeDict [subTypeName] = subTypeDict [subTypeName] + 1;  			else  				subTypeDict.Add (subTypeName' 1);  		}  		if (includesBlockType || excludesBlockType) {  			string typeName = block.GetId ().TypeId.ToString ();  			if (typeDict.ContainsKey (typeName))  				typeDict [typeName] = typeDict [typeName] + 1;  			else  				typeDict.Add (typeName' 1);  		}  	}  	if (functional != 0) {  		if (!checkList.Contains ("functional") && functional == 2)  			found = false;  		if (checkList.Contains ("functional") && functional == 1)  			found = false;  	}  	if (terminal != 0) {  		if (!checkList.Contains ("terminal") && terminal == 2)  			found = false;  		if (checkList.Contains ("terminal") && terminal == 1)  			found = false;  	}  	if (power != 0) {  		if (!checkList.Contains ("power") && power == 2)  			found = false;  		if (checkList.Contains ("power") && power == 1)  			found = false;  	}  	if (hasBlockSubType) {  		bool hasType = false;  		foreach (KeyValuePair<string' int> pairBlockTypesInGrid in subTypeDict) {  			foreach (KeyValuePair<string' int> pairBlockTypesFilter in blockSubTypes) {  				if (pairBlockTypesInGrid.Key.ToLower ().Contains (pairBlockTypesFilter.Key.ToLower ())) {  					if (pairBlockTypesInGrid.Value >= pairBlockTypesFilter.Value) {  						if (debug && !quiet)  							Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which contains at least {4} of block type {3} ({5}).  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count' pairBlockTypesInGrid.Key' pairBlockTypesFilter.Value' pairBlockTypesInGrid.Value));  						hasType = true;  						break;  					}  				}  			}  		}  		if (!hasType) {  			if (debug && !quiet)  				Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which does not contain block type.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count));  			found = false;  		}  	}  	if (includesBlockType) {  		bool hasType = false;  		foreach (KeyValuePair<string' int> pairBlockTypesInGrid in typeDict) {  			foreach (KeyValuePair<string' int> pairBlockTypesFilter in blockTypes) {  				if (pairBlockTypesInGrid.Key.ToLower ().Contains (pairBlockTypesFilter.Key.ToLower ())) {  					if (pairBlockTypesInGrid.Value >= pairBlockTypesFilter.Value) {  						if (debug && !quiet)  							Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which contains at least {4} of block type {3} ({5}).  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count' pairBlockTypesInGrid.Key' pairBlockTypesFilter.Value' pairBlockTypesInGrid.Value));  						hasType = true;  						break;  					}  				}  			}  		}  		if (!hasType) {  			if (debug && !quiet)  				Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which does not contain block type.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count));  			found = false;  		}  	}  	if (hasBlockSubTypeLimits && found) {  		foreach (KeyValuePair<string' int> pairBlockTypesInGrid in subTypeDict) {  			foreach (KeyValuePair<string' int> pairBlockTypesFilter in blockSubTypes) {  				if (pairBlockTypesInGrid.Key.ToLower ().Contains (pairBlockTypesFilter.Key.ToLower ())) {  					if (pairBlockTypesInGrid.Value >= pairBlockTypesFilter.Value) {  						if (found)  							found = false;  						if (!quiet && debug)  							Communication.SendPrivateInformation (userId' string.Format ("Exclusion: Found grid '{0}' ({1}) which excludes block type of {3} at {4}.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count' pairBlockTypesFilter.Key' pairBlockTypesInGrid.Value));  						break;  					}  				}  			}  		}  	}  	if (excludesBlockType && found) {  		foreach (KeyValuePair<string' int> pairBlockTypesInGrid in typeDict) {  			foreach (KeyValuePair<string' int> pairBlockTypesFilter in blockTypes) {  				if (pairBlockTypesInGrid.Key.ToLower ().Contains (pairBlockTypesFilter.Key.ToLower ())) {  					if (pairBlockTypesInGrid.Value >= pairBlockTypesFilter.Value) {  						if (found)  							found = false;  						if (!quiet && debug)  							Communication.SendPrivateInformation (userId' string.Format ("Exclusion: Found grid '{0}' ({1}) which excludes block type of {3} at {4}.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count' pairBlockTypesFilter.Key' pairBlockTypesInGrid.Value));  						break;  					}  				}  			}  		}  	}  	if (requireBlockCount && found && grid.CubeBlocks.Count < blockCount) {  		found = false;  	}  	if (requireBlockCountLess && found && grid.CubeBlocks.Count >= blockCountLess) {  		found = false;  	}  	if (isBlockSize && found && blockSize == 0 && grid.GridSizeEnum != MyCubeSize.Small) {  		found = false;  	}  	if (isBlockSize && found && blockSize == 1 && grid.GridSizeEnum != MyCubeSize.Large) {  		found = false;  	}  	if (isBlockSize && found && blockSize == 2 && (grid.GridSizeEnum != MyCubeSize.Large || grid.GridSizeEnum == MyCubeSize.Large && !grid.IsStatic)) {  		found = false;  	}  	if (isBlockSize && found && blockSize == 2 && (grid.GridSizeEnum != MyCubeSize.Large || grid.GridSizeEnum == MyCubeSize.Large && grid.IsStatic)) {  		found = false;  	}  	if (found)  		entitiesFound.Add (entity);  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: foreach (IMyEntity entity in entitiesUnconnected) {  	subTypeDict.Clear ();  	typeDict.Clear ();  	checkList.Clear ();  	MyObjectBuilder_CubeGrid grid = (MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ();  	if (online == 1)// notonline  	 {  		bool foundOnline = false;  		foreach (ulong player in PlayerManager.Instance.ConnectedPlayers) {  			long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (player);  			if (playerId < 1)  				continue;  			if (CubeGrids.GetAllOwners (grid).Contains (playerId)) {  				foundOnline = true;  				break;  			}  		}  		if (foundOnline)  			continue;  	} else if (online == 2)// online  	 {  		bool foundOnline = true;  		foreach (ulong player in PlayerManager.Instance.ConnectedPlayers) {  			long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (player);  			if (playerId < 1)  				continue;  			if (CubeGrids.GetAllOwners (grid).Contains (playerId)) {  				foundOnline = false;  				break;  			}  		}  		if (foundOnline)  			continue;  	}  	bool found = true;  	foreach (MyObjectBuilder_CubeBlock block in grid.CubeBlocks) {  		if (functional != 0) {  			if (block is MyObjectBuilder_FunctionalBlock) {  				//							if (debug && !found)  				//								Communication.SendPrivateInformation(userId' string.Format("Found grid '{0}' ({1}) which has a functional block.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder()).CubeBlocks.Count));  				if (!checkList.Contains ("functional"))  					checkList.Add ("functional");  			}  		}  		if (terminal != 0) {  			if (block is MyObjectBuilder_TerminalBlock) {  				//if (debug && !found)  				//	Communication.SendPrivateInformation(userId' string.Format("Found grid '{0}' ({1}) which has a terminal block.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder()).CubeBlocks.Count));  				if (!checkList.Contains ("terminal"))  					checkList.Add ("terminal");  			}  		}  		if (power != 0) {  			if (DoesBlockSupplyPower (block)) {  				//if (debug && !found)  				//	Communication.SendPrivateInformation(userId' string.Format("Found grid '{0}' ({1}) which has power.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder()).CubeBlocks.Count));  				if (!checkList.Contains ("power"))  					checkList.Add ("power");  			}  		}  		if (hasBlockSubType || hasBlockSubTypeLimits) {  			string subTypeName = block.GetId ().SubtypeName;  			if (subTypeDict.ContainsKey (subTypeName))  				subTypeDict [subTypeName] = subTypeDict [subTypeName] + 1;  			else  				subTypeDict.Add (subTypeName' 1);  		}  		if (includesBlockType || excludesBlockType) {  			string typeName = block.GetId ().TypeId.ToString ();  			if (typeDict.ContainsKey (typeName))  				typeDict [typeName] = typeDict [typeName] + 1;  			else  				typeDict.Add (typeName' 1);  		}  	}  	if (functional != 0) {  		if (!checkList.Contains ("functional") && functional == 2)  			found = false;  		if (checkList.Contains ("functional") && functional == 1)  			found = false;  	}  	if (terminal != 0) {  		if (!checkList.Contains ("terminal") && terminal == 2)  			found = false;  		if (checkList.Contains ("terminal") && terminal == 1)  			found = false;  	}  	if (power != 0) {  		if (!checkList.Contains ("power") && power == 2)  			found = false;  		if (checkList.Contains ("power") && power == 1)  			found = false;  	}  	if (hasBlockSubType) {  		bool hasType = false;  		foreach (KeyValuePair<string' int> pairBlockTypesInGrid in subTypeDict) {  			foreach (KeyValuePair<string' int> pairBlockTypesFilter in blockSubTypes) {  				if (pairBlockTypesInGrid.Key.ToLower ().Contains (pairBlockTypesFilter.Key.ToLower ())) {  					if (pairBlockTypesInGrid.Value >= pairBlockTypesFilter.Value) {  						if (debug && !quiet)  							Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which contains at least {4} of block type {3} ({5}).  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count' pairBlockTypesInGrid.Key' pairBlockTypesFilter.Value' pairBlockTypesInGrid.Value));  						hasType = true;  						break;  					}  				}  			}  		}  		if (!hasType) {  			if (debug && !quiet)  				Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which does not contain block type.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count));  			found = false;  		}  	}  	if (includesBlockType) {  		bool hasType = false;  		foreach (KeyValuePair<string' int> pairBlockTypesInGrid in typeDict) {  			foreach (KeyValuePair<string' int> pairBlockTypesFilter in blockTypes) {  				if (pairBlockTypesInGrid.Key.ToLower ().Contains (pairBlockTypesFilter.Key.ToLower ())) {  					if (pairBlockTypesInGrid.Value >= pairBlockTypesFilter.Value) {  						if (debug && !quiet)  							Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which contains at least {4} of block type {3} ({5}).  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count' pairBlockTypesInGrid.Key' pairBlockTypesFilter.Value' pairBlockTypesInGrid.Value));  						hasType = true;  						break;  					}  				}  			}  		}  		if (!hasType) {  			if (debug && !quiet)  				Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which does not contain block type.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count));  			found = false;  		}  	}  	if (hasBlockSubTypeLimits && found) {  		foreach (KeyValuePair<string' int> pairBlockTypesInGrid in subTypeDict) {  			foreach (KeyValuePair<string' int> pairBlockTypesFilter in blockSubTypes) {  				if (pairBlockTypesInGrid.Key.ToLower ().Contains (pairBlockTypesFilter.Key.ToLower ())) {  					if (pairBlockTypesInGrid.Value >= pairBlockTypesFilter.Value) {  						if (found)  							found = false;  						if (!quiet && debug)  							Communication.SendPrivateInformation (userId' string.Format ("Exclusion: Found grid '{0}' ({1}) which excludes block type of {3} at {4}.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count' pairBlockTypesFilter.Key' pairBlockTypesInGrid.Value));  						break;  					}  				}  			}  		}  	}  	if (excludesBlockType && found) {  		foreach (KeyValuePair<string' int> pairBlockTypesInGrid in typeDict) {  			foreach (KeyValuePair<string' int> pairBlockTypesFilter in blockTypes) {  				if (pairBlockTypesInGrid.Key.ToLower ().Contains (pairBlockTypesFilter.Key.ToLower ())) {  					if (pairBlockTypesInGrid.Value >= pairBlockTypesFilter.Value) {  						if (found)  							found = false;  						if (!quiet && debug)  							Communication.SendPrivateInformation (userId' string.Format ("Exclusion: Found grid '{0}' ({1}) which excludes block type of {3} at {4}.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count' pairBlockTypesFilter.Key' pairBlockTypesInGrid.Value));  						break;  					}  				}  			}  		}  	}  	if (requireBlockCount && found && grid.CubeBlocks.Count < blockCount) {  		found = false;  	}  	if (requireBlockCountLess && found && grid.CubeBlocks.Count >= blockCountLess) {  		found = false;  	}  	if (isBlockSize && found && blockSize == 0 && grid.GridSizeEnum != MyCubeSize.Small) {  		found = false;  	}  	if (isBlockSize && found && blockSize == 1 && grid.GridSizeEnum != MyCubeSize.Large) {  		found = false;  	}  	if (isBlockSize && found && blockSize == 2 && (grid.GridSizeEnum != MyCubeSize.Large || grid.GridSizeEnum == MyCubeSize.Large && !grid.IsStatic)) {  		found = false;  	}  	if (isBlockSize && found && blockSize == 2 && (grid.GridSizeEnum != MyCubeSize.Large || grid.GridSizeEnum == MyCubeSize.Large && grid.IsStatic)) {  		found = false;  	}  	if (found)  		entitiesFound.Add (entity);  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: foreach (IMyEntity entity in entitiesUnconnected) {  	subTypeDict.Clear ();  	typeDict.Clear ();  	checkList.Clear ();  	MyObjectBuilder_CubeGrid grid = (MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ();  	if (online == 1)// notonline  	 {  		bool foundOnline = false;  		foreach (ulong player in PlayerManager.Instance.ConnectedPlayers) {  			long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (player);  			if (playerId < 1)  				continue;  			if (CubeGrids.GetAllOwners (grid).Contains (playerId)) {  				foundOnline = true;  				break;  			}  		}  		if (foundOnline)  			continue;  	} else if (online == 2)// online  	 {  		bool foundOnline = true;  		foreach (ulong player in PlayerManager.Instance.ConnectedPlayers) {  			long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (player);  			if (playerId < 1)  				continue;  			if (CubeGrids.GetAllOwners (grid).Contains (playerId)) {  				foundOnline = false;  				break;  			}  		}  		if (foundOnline)  			continue;  	}  	bool found = true;  	foreach (MyObjectBuilder_CubeBlock block in grid.CubeBlocks) {  		if (functional != 0) {  			if (block is MyObjectBuilder_FunctionalBlock) {  				//							if (debug && !found)  				//								Communication.SendPrivateInformation(userId' string.Format("Found grid '{0}' ({1}) which has a functional block.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder()).CubeBlocks.Count));  				if (!checkList.Contains ("functional"))  					checkList.Add ("functional");  			}  		}  		if (terminal != 0) {  			if (block is MyObjectBuilder_TerminalBlock) {  				//if (debug && !found)  				//	Communication.SendPrivateInformation(userId' string.Format("Found grid '{0}' ({1}) which has a terminal block.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder()).CubeBlocks.Count));  				if (!checkList.Contains ("terminal"))  					checkList.Add ("terminal");  			}  		}  		if (power != 0) {  			if (DoesBlockSupplyPower (block)) {  				//if (debug && !found)  				//	Communication.SendPrivateInformation(userId' string.Format("Found grid '{0}' ({1}) which has power.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder()).CubeBlocks.Count));  				if (!checkList.Contains ("power"))  					checkList.Add ("power");  			}  		}  		if (hasBlockSubType || hasBlockSubTypeLimits) {  			string subTypeName = block.GetId ().SubtypeName;  			if (subTypeDict.ContainsKey (subTypeName))  				subTypeDict [subTypeName] = subTypeDict [subTypeName] + 1;  			else  				subTypeDict.Add (subTypeName' 1);  		}  		if (includesBlockType || excludesBlockType) {  			string typeName = block.GetId ().TypeId.ToString ();  			if (typeDict.ContainsKey (typeName))  				typeDict [typeName] = typeDict [typeName] + 1;  			else  				typeDict.Add (typeName' 1);  		}  	}  	if (functional != 0) {  		if (!checkList.Contains ("functional") && functional == 2)  			found = false;  		if (checkList.Contains ("functional") && functional == 1)  			found = false;  	}  	if (terminal != 0) {  		if (!checkList.Contains ("terminal") && terminal == 2)  			found = false;  		if (checkList.Contains ("terminal") && terminal == 1)  			found = false;  	}  	if (power != 0) {  		if (!checkList.Contains ("power") && power == 2)  			found = false;  		if (checkList.Contains ("power") && power == 1)  			found = false;  	}  	if (hasBlockSubType) {  		bool hasType = false;  		foreach (KeyValuePair<string' int> pairBlockTypesInGrid in subTypeDict) {  			foreach (KeyValuePair<string' int> pairBlockTypesFilter in blockSubTypes) {  				if (pairBlockTypesInGrid.Key.ToLower ().Contains (pairBlockTypesFilter.Key.ToLower ())) {  					if (pairBlockTypesInGrid.Value >= pairBlockTypesFilter.Value) {  						if (debug && !quiet)  							Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which contains at least {4} of block type {3} ({5}).  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count' pairBlockTypesInGrid.Key' pairBlockTypesFilter.Value' pairBlockTypesInGrid.Value));  						hasType = true;  						break;  					}  				}  			}  		}  		if (!hasType) {  			if (debug && !quiet)  				Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which does not contain block type.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count));  			found = false;  		}  	}  	if (includesBlockType) {  		bool hasType = false;  		foreach (KeyValuePair<string' int> pairBlockTypesInGrid in typeDict) {  			foreach (KeyValuePair<string' int> pairBlockTypesFilter in blockTypes) {  				if (pairBlockTypesInGrid.Key.ToLower ().Contains (pairBlockTypesFilter.Key.ToLower ())) {  					if (pairBlockTypesInGrid.Value >= pairBlockTypesFilter.Value) {  						if (debug && !quiet)  							Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which contains at least {4} of block type {3} ({5}).  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count' pairBlockTypesInGrid.Key' pairBlockTypesFilter.Value' pairBlockTypesInGrid.Value));  						hasType = true;  						break;  					}  				}  			}  		}  		if (!hasType) {  			if (debug && !quiet)  				Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which does not contain block type.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count));  			found = false;  		}  	}  	if (hasBlockSubTypeLimits && found) {  		foreach (KeyValuePair<string' int> pairBlockTypesInGrid in subTypeDict) {  			foreach (KeyValuePair<string' int> pairBlockTypesFilter in blockSubTypes) {  				if (pairBlockTypesInGrid.Key.ToLower ().Contains (pairBlockTypesFilter.Key.ToLower ())) {  					if (pairBlockTypesInGrid.Value >= pairBlockTypesFilter.Value) {  						if (found)  							found = false;  						if (!quiet && debug)  							Communication.SendPrivateInformation (userId' string.Format ("Exclusion: Found grid '{0}' ({1}) which excludes block type of {3} at {4}.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count' pairBlockTypesFilter.Key' pairBlockTypesInGrid.Value));  						break;  					}  				}  			}  		}  	}  	if (excludesBlockType && found) {  		foreach (KeyValuePair<string' int> pairBlockTypesInGrid in typeDict) {  			foreach (KeyValuePair<string' int> pairBlockTypesFilter in blockTypes) {  				if (pairBlockTypesInGrid.Key.ToLower ().Contains (pairBlockTypesFilter.Key.ToLower ())) {  					if (pairBlockTypesInGrid.Value >= pairBlockTypesFilter.Value) {  						if (found)  							found = false;  						if (!quiet && debug)  							Communication.SendPrivateInformation (userId' string.Format ("Exclusion: Found grid '{0}' ({1}) which excludes block type of {3} at {4}.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count' pairBlockTypesFilter.Key' pairBlockTypesInGrid.Value));  						break;  					}  				}  			}  		}  	}  	if (requireBlockCount && found && grid.CubeBlocks.Count < blockCount) {  		found = false;  	}  	if (requireBlockCountLess && found && grid.CubeBlocks.Count >= blockCountLess) {  		found = false;  	}  	if (isBlockSize && found && blockSize == 0 && grid.GridSizeEnum != MyCubeSize.Small) {  		found = false;  	}  	if (isBlockSize && found && blockSize == 1 && grid.GridSizeEnum != MyCubeSize.Large) {  		found = false;  	}  	if (isBlockSize && found && blockSize == 2 && (grid.GridSizeEnum != MyCubeSize.Large || grid.GridSizeEnum == MyCubeSize.Large && !grid.IsStatic)) {  		found = false;  	}  	if (isBlockSize && found && blockSize == 2 && (grid.GridSizeEnum != MyCubeSize.Large || grid.GridSizeEnum == MyCubeSize.Large && grid.IsStatic)) {  		found = false;  	}  	if (found)  		entitiesFound.Add (entity);  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: foreach (IMyEntity entity in entitiesUnconnected) {  	subTypeDict.Clear ();  	typeDict.Clear ();  	checkList.Clear ();  	MyObjectBuilder_CubeGrid grid = (MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ();  	if (online == 1)// notonline  	 {  		bool foundOnline = false;  		foreach (ulong player in PlayerManager.Instance.ConnectedPlayers) {  			long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (player);  			if (playerId < 1)  				continue;  			if (CubeGrids.GetAllOwners (grid).Contains (playerId)) {  				foundOnline = true;  				break;  			}  		}  		if (foundOnline)  			continue;  	} else if (online == 2)// online  	 {  		bool foundOnline = true;  		foreach (ulong player in PlayerManager.Instance.ConnectedPlayers) {  			long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (player);  			if (playerId < 1)  				continue;  			if (CubeGrids.GetAllOwners (grid).Contains (playerId)) {  				foundOnline = false;  				break;  			}  		}  		if (foundOnline)  			continue;  	}  	bool found = true;  	foreach (MyObjectBuilder_CubeBlock block in grid.CubeBlocks) {  		if (functional != 0) {  			if (block is MyObjectBuilder_FunctionalBlock) {  				//							if (debug && !found)  				//								Communication.SendPrivateInformation(userId' string.Format("Found grid '{0}' ({1}) which has a functional block.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder()).CubeBlocks.Count));  				if (!checkList.Contains ("functional"))  					checkList.Add ("functional");  			}  		}  		if (terminal != 0) {  			if (block is MyObjectBuilder_TerminalBlock) {  				//if (debug && !found)  				//	Communication.SendPrivateInformation(userId' string.Format("Found grid '{0}' ({1}) which has a terminal block.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder()).CubeBlocks.Count));  				if (!checkList.Contains ("terminal"))  					checkList.Add ("terminal");  			}  		}  		if (power != 0) {  			if (DoesBlockSupplyPower (block)) {  				//if (debug && !found)  				//	Communication.SendPrivateInformation(userId' string.Format("Found grid '{0}' ({1}) which has power.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder()).CubeBlocks.Count));  				if (!checkList.Contains ("power"))  					checkList.Add ("power");  			}  		}  		if (hasBlockSubType || hasBlockSubTypeLimits) {  			string subTypeName = block.GetId ().SubtypeName;  			if (subTypeDict.ContainsKey (subTypeName))  				subTypeDict [subTypeName] = subTypeDict [subTypeName] + 1;  			else  				subTypeDict.Add (subTypeName' 1);  		}  		if (includesBlockType || excludesBlockType) {  			string typeName = block.GetId ().TypeId.ToString ();  			if (typeDict.ContainsKey (typeName))  				typeDict [typeName] = typeDict [typeName] + 1;  			else  				typeDict.Add (typeName' 1);  		}  	}  	if (functional != 0) {  		if (!checkList.Contains ("functional") && functional == 2)  			found = false;  		if (checkList.Contains ("functional") && functional == 1)  			found = false;  	}  	if (terminal != 0) {  		if (!checkList.Contains ("terminal") && terminal == 2)  			found = false;  		if (checkList.Contains ("terminal") && terminal == 1)  			found = false;  	}  	if (power != 0) {  		if (!checkList.Contains ("power") && power == 2)  			found = false;  		if (checkList.Contains ("power") && power == 1)  			found = false;  	}  	if (hasBlockSubType) {  		bool hasType = false;  		foreach (KeyValuePair<string' int> pairBlockTypesInGrid in subTypeDict) {  			foreach (KeyValuePair<string' int> pairBlockTypesFilter in blockSubTypes) {  				if (pairBlockTypesInGrid.Key.ToLower ().Contains (pairBlockTypesFilter.Key.ToLower ())) {  					if (pairBlockTypesInGrid.Value >= pairBlockTypesFilter.Value) {  						if (debug && !quiet)  							Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which contains at least {4} of block type {3} ({5}).  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count' pairBlockTypesInGrid.Key' pairBlockTypesFilter.Value' pairBlockTypesInGrid.Value));  						hasType = true;  						break;  					}  				}  			}  		}  		if (!hasType) {  			if (debug && !quiet)  				Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which does not contain block type.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count));  			found = false;  		}  	}  	if (includesBlockType) {  		bool hasType = false;  		foreach (KeyValuePair<string' int> pairBlockTypesInGrid in typeDict) {  			foreach (KeyValuePair<string' int> pairBlockTypesFilter in blockTypes) {  				if (pairBlockTypesInGrid.Key.ToLower ().Contains (pairBlockTypesFilter.Key.ToLower ())) {  					if (pairBlockTypesInGrid.Value >= pairBlockTypesFilter.Value) {  						if (debug && !quiet)  							Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which contains at least {4} of block type {3} ({5}).  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count' pairBlockTypesInGrid.Key' pairBlockTypesFilter.Value' pairBlockTypesInGrid.Value));  						hasType = true;  						break;  					}  				}  			}  		}  		if (!hasType) {  			if (debug && !quiet)  				Communication.SendPrivateInformation (userId' string.Format ("Found grid '{0}' ({1}) which does not contain block type.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count));  			found = false;  		}  	}  	if (hasBlockSubTypeLimits && found) {  		foreach (KeyValuePair<string' int> pairBlockTypesInGrid in subTypeDict) {  			foreach (KeyValuePair<string' int> pairBlockTypesFilter in blockSubTypes) {  				if (pairBlockTypesInGrid.Key.ToLower ().Contains (pairBlockTypesFilter.Key.ToLower ())) {  					if (pairBlockTypesInGrid.Value >= pairBlockTypesFilter.Value) {  						if (found)  							found = false;  						if (!quiet && debug)  							Communication.SendPrivateInformation (userId' string.Format ("Exclusion: Found grid '{0}' ({1}) which excludes block type of {3} at {4}.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count' pairBlockTypesFilter.Key' pairBlockTypesInGrid.Value));  						break;  					}  				}  			}  		}  	}  	if (excludesBlockType && found) {  		foreach (KeyValuePair<string' int> pairBlockTypesInGrid in typeDict) {  			foreach (KeyValuePair<string' int> pairBlockTypesFilter in blockTypes) {  				if (pairBlockTypesInGrid.Key.ToLower ().Contains (pairBlockTypesFilter.Key.ToLower ())) {  					if (pairBlockTypesInGrid.Value >= pairBlockTypesFilter.Value) {  						if (found)  							found = false;  						if (!quiet && debug)  							Communication.SendPrivateInformation (userId' string.Format ("Exclusion: Found grid '{0}' ({1}) which excludes block type of {3} at {4}.  BlockCount={2}"' entity.DisplayName' entity.EntityId' ((MyObjectBuilder_CubeGrid)entity.GetObjectBuilder ()).CubeBlocks.Count' pairBlockTypesFilter.Key' pairBlockTypesInGrid.Value));  						break;  					}  				}  			}  		}  	}  	if (requireBlockCount && found && grid.CubeBlocks.Count < blockCount) {  		found = false;  	}  	if (requireBlockCountLess && found && grid.CubeBlocks.Count >= blockCountLess) {  		found = false;  	}  	if (isBlockSize && found && blockSize == 0 && grid.GridSizeEnum != MyCubeSize.Small) {  		found = false;  	}  	if (isBlockSize && found && blockSize == 1 && grid.GridSizeEnum != MyCubeSize.Large) {  		found = false;  	}  	if (isBlockSize && found && blockSize == 2 && (grid.GridSizeEnum != MyCubeSize.Large || grid.GridSizeEnum == MyCubeSize.Large && !grid.IsStatic)) {  		found = false;  	}  	if (isBlockSize && found && blockSize == 2 && (grid.GridSizeEnum != MyCubeSize.Large || grid.GridSizeEnum == MyCubeSize.Large && grid.IsStatic)) {  		found = false;  	}  	if (found)  		entitiesFound.Add (entity);  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (online == 1)// notonline   {  	bool foundOnline = false;  	foreach (ulong player in PlayerManager.Instance.ConnectedPlayers) {  		long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (player);  		if (playerId < 1)  			continue;  		if (CubeGrids.GetAllOwners (grid).Contains (playerId)) {  			foundOnline = true;  			break;  		}  	}  	if (foundOnline)  		continue;  } else if (online == 2)// online   {  	bool foundOnline = true;  	foreach (ulong player in PlayerManager.Instance.ConnectedPlayers) {  		long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (player);  		if (playerId < 1)  			continue;  		if (CubeGrids.GetAllOwners (grid).Contains (playerId)) {  			foundOnline = false;  			break;  		}  	}  	if (foundOnline)  		continue;  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (online == 2)// online   {  	bool foundOnline = true;  	foreach (ulong player in PlayerManager.Instance.ConnectedPlayers) {  		long playerId = PlayerMap.Instance.GetFastPlayerIdFromSteamId (player);  		if (playerId < 1)  			continue;  		if (CubeGrids.GetAllOwners (grid).Contains (playerId)) {  			foundOnline = false;  			break;  		}  	}  	if (foundOnline)  		continue;  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (functional != 0) {  	if (!checkList.Contains ("functional") && functional == 2)  		found = false;  	if (checkList.Contains ("functional") && functional == 1)  		found = false;  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (!checkList.Contains ("functional") && functional == 2)  	found = false;  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (terminal != 0) {  	if (!checkList.Contains ("terminal") && terminal == 2)  		found = false;  	if (checkList.Contains ("terminal") && terminal == 1)  		found = false;  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (!checkList.Contains ("terminal") && terminal == 2)  	found = false;  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (power != 0) {  	if (!checkList.Contains ("power") && power == 2)  		found = false;  	if (checkList.Contains ("power") && power == 1)  		found = false;  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (!checkList.Contains ("power") && power == 2)  	found = false;  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (isBlockSize && found && blockSize == 2 && (grid.GridSizeEnum != MyCubeSize.Large || grid.GridSizeEnum == MyCubeSize.Large && !grid.IsStatic)) {  	found = false;  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,ScanGrids,The following statement contains a magic number: if (isBlockSize && found && blockSize == 2 && (grid.GridSizeEnum != MyCubeSize.Large || grid.GridSizeEnum == MyCubeSize.Large && grid.IsStatic)) {  	found = false;  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,DoesGridHaveFourBeacons,The following statement contains a magic number: foreach (MyObjectBuilder_CubeBlock block in grid.CubeBlocks) {  	if (block is MyObjectBuilder_Beacon)  		count++;  	if (count >= 4)  		return true;  }  
Magic Number,EssentialsPlugin.Utility,CubeGrids,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\CubeGrid.cs,DoesGridHaveFourBeacons,The following statement contains a magic number: if (count >= 4)  	return true;  
Magic Number,EssentialsPlugin.Utility,DockingZone,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\DockingZone.cs,IsGridInside,The following statement contains a magic number: if (!Entity.GreaterThan (dockingBounding.HalfExtent * 2' targetBounding.HalfExtent * 2)) {  	return false;  }  
Magic Number,EssentialsPlugin.Utility,DockingZone,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\DockingZone.cs,IsGridInside,The following statement contains a magic number: if (!Entity.GreaterThan (dockingBounding.HalfExtent * 2' targetBounding.HalfExtent * 2)) {  	return false;  }  
Magic Number,EssentialsPlugin.Utility,DockingZone,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\DockingZone.cs,GetZonesInGrid,The following statement contains a magic number: foreach (KeyValuePair<String' List<IMyCubeBlock>> p in testList) {  	if (p.Value.Count == 4) {  		resultList.Add (p.Key' p.Value);  	}  }  
Magic Number,EssentialsPlugin.Utility,DockingZone,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\DockingZone.cs,GetZonesInGrid,The following statement contains a magic number: if (p.Value.Count == 4) {  	resultList.Add (p.Key' p.Value);  }  
Magic Number,EssentialsPlugin.Utility,DockingZone,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\DockingZone.cs,FindByName,The following statement contains a magic number: foreach (IMyEntity entity in entities) {  	if (!(entity is IMyCubeGrid))  		continue;  	IMyCubeGrid cubeGrid = (IMyCubeGrid)entity;  	if (cubeGrid == null || cubeGrid.GridSizeEnum == MyCubeSize.Small)  		continue;  	if (!cubeGrid.BigOwners.Contains (playerId) && !cubeGrid.SmallOwners.Contains (playerId))  		continue;  	testList.Clear ();  	beaconList.Clear ();  	beaconParent = cubeGrid;  	List<IMySlimBlock> cubeBlocks = new List<IMySlimBlock> ();  	cubeGrid.GetBlocks (cubeBlocks);  	foreach (IMySlimBlock entityBlock in cubeBlocks) {  		if (entityBlock.FatBlock == null)  			continue;  		if (!(entityBlock.FatBlock is IMyCubeBlock))  			continue;  		IMyCubeBlock cubeBlock = (IMyCubeBlock)entityBlock.FatBlock;  		if (!(cubeBlock is Sandbox.ModAPI.Ingame.IMyBeacon))  			continue;  		IMyTerminalBlock beacon = (IMyTerminalBlock)cubeBlock;  		/* 					MyObjectBuilder_CubeBlock blockObject; 					try 					{ 						blockObject = entityBlock.FatBlock.GetObjectBuilderCubeBlock(); 						if (blockObject == null) 							continue; 					} 					catch 					{ 						continue; 					}  					if (!(blockObject is MyObjectBuilder_Beacon)) 						continue;  					MyObjectBuilder_Beacon beacon = (MyObjectBuilder_Beacon)blockObject; 					 */if (beacon.CustomName == null || beacon.CustomName == "")  			continue;  		if (beacon.IsFunctional && beacon.CustomName.ToLower () == pylonName.ToLower ()) {  			beaconList.Add (entityBlock.FatBlock);  			Vector3D beaconPos = Entity.GetBlockEntityPosition (entityBlock.FatBlock);  			continue;  		}  		if (testList.ContainsKey (beacon.CustomName))  			testList [beacon.CustomName].Add (entityBlock.FatBlock);  		else {  			List<IMyCubeBlock> testBeaconList = new List<IMyCubeBlock> ();  			testBeaconList.Add (entityBlock.FatBlock);  			testList.Add (beacon.CustomName' testBeaconList);  		}  	}  	if (beaconList.Count == 4)  		break;  }  
Magic Number,EssentialsPlugin.Utility,DockingZone,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\DockingZone.cs,FindByName,The following statement contains a magic number: if (beaconList.Count == 4)  	break;  
Magic Number,EssentialsPlugin.Utility,DockingZone,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\DockingZone.cs,CheckCooldown,The following statement contains a magic number: lock (m_cooldownItems) {  	DockingCooldownItem item = m_cooldownItems.FindAll (x => x.Name == name).FirstOrDefault ();  	if (item != null) {  		if (DateTime.Now - item.Start > TimeSpan.FromSeconds (15)) {  			m_cooldownItems.RemoveAll (x => x.Name == name);  			return true;  		} else {  			return false;  		}  	}  }  
Magic Number,EssentialsPlugin.Utility,DockingZone,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\DockingZone.cs,CheckCooldown,The following statement contains a magic number: if (item != null) {  	if (DateTime.Now - item.Start > TimeSpan.FromSeconds (15)) {  		m_cooldownItems.RemoveAll (x => x.Name == name);  		return true;  	} else {  		return false;  	}  }  
Magic Number,EssentialsPlugin.Utility,DockingZone,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\DockingZone.cs,CheckCooldown,The following statement contains a magic number: if (DateTime.Now - item.Start > TimeSpan.FromSeconds (15)) {  	m_cooldownItems.RemoveAll (x => x.Name == name);  	return true;  } else {  	return false;  }  
Magic Number,EssentialsPlugin.Utility,Entity,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Entity.cs,CheckForIntersection,The following statement contains a magic number: if (testList.Count > 0) {  	for (int r = 0; r < testList.Count; r++) {  		List<IMyCubeBlock> beaconTestList = (List<IMyCubeBlock>)testList.ElementAt (r).Value;  		if (beaconTestList.Count != 4)  			continue;  		OrientedBoundingBoxD testBounding = Entity.GetBoundingBox (beaconTestList);  		if (testBounding.Contains (ref targetTestBounding) != ContainmentType.Disjoint) {  			intersectElement = r;  			intersects = true;  			break;  		}  	}  }  
Magic Number,EssentialsPlugin.Utility,Entity,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Entity.cs,CheckForIntersection,The following statement contains a magic number: for (int r = 0; r < testList.Count; r++) {  	List<IMyCubeBlock> beaconTestList = (List<IMyCubeBlock>)testList.ElementAt (r).Value;  	if (beaconTestList.Count != 4)  		continue;  	OrientedBoundingBoxD testBounding = Entity.GetBoundingBox (beaconTestList);  	if (testBounding.Contains (ref targetTestBounding) != ContainmentType.Disjoint) {  		intersectElement = r;  		intersects = true;  		break;  	}  }  
Magic Number,EssentialsPlugin.Utility,Entity,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Entity.cs,CheckForIntersection,The following statement contains a magic number: if (beaconTestList.Count != 4)  	continue;  
Magic Number,EssentialsPlugin.Utility,Entity,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Entity.cs,GetBoundingBox,The following statement contains a magic number: bb = new BoundingBoxD (new Vector3D (0' 0' 0)' expandedSize).Translate (pos - (expandedSize / 2));  
Magic Number,EssentialsPlugin.Utility,Player,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Player.cs,Move,The following statement contains a magic number: while (gridEntity.IsLoading) {  	Thread.Sleep (100);  	count++;  	if (count > 40)  		break;  }  
Magic Number,EssentialsPlugin.Utility,Player,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Player.cs,Move,The following statement contains a magic number: while (gridEntity.IsLoading) {  	Thread.Sleep (100);  	count++;  	if (count > 40)  		break;  }  
Magic Number,EssentialsPlugin.Utility,Player,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Player.cs,Move,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,EssentialsPlugin.Utility,Player,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Player.cs,Move,The following statement contains a magic number: if (count > 40)  	break;  
Magic Number,EssentialsPlugin.Utility,Players,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Player.cs,ProcessServerLogsForLogins,The following statement contains a magic number: try {  	ThreadPool.QueueUserWorkItem (new WaitCallback (state => {  		string logPath = MyFileSystem.UserDataPath;  		string[] files = Directory.GetFiles (logPath' "SpaceEngineersDedicated_*.log");  		List<PlayerItem> playerItems = new List<PlayerItem> ();  		Logging.WriteLineAndConsole (string.Format ("Checking {0} log files for logins"' files.Length));  		DateTime start = DateTime.Now;  		Parallel.ForEach (files' currentFile => {  			if (DateTime.Now - File.GetCreationTime (currentFile) > TimeSpan.FromDays (20))  				return;  			string fileText;  			try {  				fileText = File.ReadAllText (currentFile);  			} catch {  				return;  			}  			List<PlayerItem> results = GetSteamIdsFromFile (fileText);  			lock (playerItems)  				playerItems.AddRange (results);  		});  		Players.Instance.UpdatePlayers (playerItems);  		Logging.WriteLineAndConsole (string.Format ("Completed checking logs in {0}s: {2} ({1}) steamIds"' (DateTime.Now - start).TotalSeconds' playerItems.Count' Players.Instance.PlayerLogins.Count));  	}));  } finally {  	m_checking = false;  }  
Magic Number,EssentialsPlugin.Utility,Players,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Player.cs,ProcessServerLogsForLogins,The following statement contains a magic number: ThreadPool.QueueUserWorkItem (new WaitCallback (state => {  	string logPath = MyFileSystem.UserDataPath;  	string[] files = Directory.GetFiles (logPath' "SpaceEngineersDedicated_*.log");  	List<PlayerItem> playerItems = new List<PlayerItem> ();  	Logging.WriteLineAndConsole (string.Format ("Checking {0} log files for logins"' files.Length));  	DateTime start = DateTime.Now;  	Parallel.ForEach (files' currentFile => {  		if (DateTime.Now - File.GetCreationTime (currentFile) > TimeSpan.FromDays (20))  			return;  		string fileText;  		try {  			fileText = File.ReadAllText (currentFile);  		} catch {  			return;  		}  		List<PlayerItem> results = GetSteamIdsFromFile (fileText);  		lock (playerItems)  			playerItems.AddRange (results);  	});  	Players.Instance.UpdatePlayers (playerItems);  	Logging.WriteLineAndConsole (string.Format ("Completed checking logs in {0}s: {2} ({1}) steamIds"' (DateTime.Now - start).TotalSeconds' playerItems.Count' Players.Instance.PlayerLogins.Count));  }));  
Magic Number,EssentialsPlugin.Utility,Players,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Player.cs,ProcessServerLogsForLogins,The following statement contains a magic number: Parallel.ForEach (files' currentFile => {  	if (DateTime.Now - File.GetCreationTime (currentFile) > TimeSpan.FromDays (20))  		return;  	string fileText;  	try {  		fileText = File.ReadAllText (currentFile);  	} catch {  		return;  	}  	List<PlayerItem> results = GetSteamIdsFromFile (fileText);  	lock (playerItems)  		playerItems.AddRange (results);  });  
Magic Number,EssentialsPlugin.Utility,Players,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Player.cs,ProcessServerLogsForLogins,The following statement contains a magic number: if (DateTime.Now - File.GetCreationTime (currentFile) > TimeSpan.FromDays (20))  	return;  
Magic Number,EssentialsPlugin.Utility,Players,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Player.cs,GetSteamIdsFromFile,The following statement contains a magic number: while (matchResults.Success) {  	PlayerItem item = new PlayerItem ();  	item.LastLogin = DateTime.Parse (matchResults.Groups [1].Value);  	item.SteamId = ulong.Parse (matchResults.Groups [2].Value);  	playerItems.Add (item);  	matchResults = matchResults.NextMatch ();  }  
Magic Number,EssentialsPlugin.Utility,Players,D:\newReposJune17\Tyrsis_EssentialsPlugin\EssentialsPlugin\Utility\Player.cs,GetSteamIdsFromFile,The following statement contains a magic number: item.SteamId = ulong.Parse (matchResults.Groups [2].Value);  
