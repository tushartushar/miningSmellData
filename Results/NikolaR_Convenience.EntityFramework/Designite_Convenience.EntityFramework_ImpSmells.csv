Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Convenience.EntityFramework,EfEntityWriter,C:\repos\NikolaR_Convenience.EntityFramework\Convenience.EntityFramework\EfEntityWriter.cs,ApplyGraphChangesIntern,Cyclomatic complexity of the method is 8
Complex Method,Convenience.EntityFramework,EntityChangeOptions,C:\repos\NikolaR_Convenience.EntityFramework\Convenience.EntityFramework\EntityChangeOptions.cs,TryParsePath,Cyclomatic complexity of the method is 10
Long Parameter List,Convenience.EntityFramework,EfEntityWriter,C:\repos\NikolaR_Convenience.EntityFramework\Convenience.EntityFramework\EfEntityWriter.cs,ApplyGraphChangesIntern,The method has 5 parameters.
Long Statement,Convenience.EntityFramework,EfMetaUtils,C:\repos\NikolaR_Convenience.EntityFramework\Convenience.EntityFramework\EfMetaUtils.cs,GetEntityTypes,The length of the statement  "	return ObjectItemCollection.Where (i => i.BuiltInTypeKind == BuiltInTypeKind.EntityType).Cast<EntityType> ().ToArray (); " is 120.
Long Statement,Convenience.EntityFramework,EfPropertyUtils,C:\repos\NikolaR_Convenience.EntityFramework\Convenience.EntityFramework\EfPropertyUtils.cs,GetWritablePropertiesIntern,The length of the statement  "	return type.GetProperties (BindingFlags.Public | BindingFlags.Instance).Where (p => p.CanWrite && p.CanRead).ToArray (); " is 120.
Magic Number,Convenience.EntityFramework,EntityChangeOptions,C:\repos\NikolaR_Convenience.EntityFramework\Convenience.EntityFramework\EntityChangeOptions.cs,TryParsePath,The following statement contains a magic number: if (memberExpression != null) {  	var thisPart = memberExpression.Member.Name;  	string parentPart;  	if (!TryParsePath (memberExpression.Expression' out parentPart)) {  		return false;  	}  	path = parentPart == null ? thisPart : (parentPart + "." + thisPart);  }  else if (callExpression != null) {  	if (callExpression.Method.Name == "Select" && callExpression.Arguments.Count == 2) {  		string parentPart;  		if (!TryParsePath (callExpression.Arguments [0]' out parentPart)) {  			return false;  		}  		if (parentPart != null) {  			var subExpression = callExpression.Arguments [1] as LambdaExpression;  			if (subExpression != null) {  				string thisPart;  				if (!TryParsePath (subExpression.Body' out thisPart)) {  					return false;  				}  				if (thisPart != null) {  					path = parentPart + "." + thisPart;  					return true;  				}  			}  		}  	}  	return false;  }  
Magic Number,Convenience.EntityFramework,EntityChangeOptions,C:\repos\NikolaR_Convenience.EntityFramework\Convenience.EntityFramework\EntityChangeOptions.cs,TryParsePath,The following statement contains a magic number: if (callExpression != null) {  	if (callExpression.Method.Name == "Select" && callExpression.Arguments.Count == 2) {  		string parentPart;  		if (!TryParsePath (callExpression.Arguments [0]' out parentPart)) {  			return false;  		}  		if (parentPart != null) {  			var subExpression = callExpression.Arguments [1] as LambdaExpression;  			if (subExpression != null) {  				string thisPart;  				if (!TryParsePath (subExpression.Body' out thisPart)) {  					return false;  				}  				if (thisPart != null) {  					path = parentPart + "." + thisPart;  					return true;  				}  			}  		}  	}  	return false;  }  
Magic Number,Convenience.EntityFramework,EntityChangeOptions,C:\repos\NikolaR_Convenience.EntityFramework\Convenience.EntityFramework\EntityChangeOptions.cs,TryParsePath,The following statement contains a magic number: if (callExpression.Method.Name == "Select" && callExpression.Arguments.Count == 2) {  	string parentPart;  	if (!TryParsePath (callExpression.Arguments [0]' out parentPart)) {  		return false;  	}  	if (parentPart != null) {  		var subExpression = callExpression.Arguments [1] as LambdaExpression;  		if (subExpression != null) {  			string thisPart;  			if (!TryParsePath (subExpression.Body' out thisPart)) {  				return false;  			}  			if (thisPart != null) {  				path = parentPart + "." + thisPart;  				return true;  			}  		}  	}  }  
