Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,SizSelCsZzz.Test,can_use_jQuery_or_Sizzle_to_find_elements,D:\research\architectureSmells\repos\fschwiet_SizSelCsZzz\SizSelCsZzz.Test\can_use_jQuery_or_Sizzle_to_find_elements.cs,Check,The method has 5 parameters. Parameters: browser' server' selectorName' functionUnderTest' checkEnforcesUniqueness
Long Statement,SizSelCsZzz.Test,SpecificationForAllBrowsers,D:\research\architectureSmells\repos\fschwiet_SizSelCsZzz\SizSelCsZzz.Test\SpecificationForAllBrowsers.cs,ResolvePathRelativeToDllDirectory,The length of the statement  "            return Path.GetFullPath(Path.Combine(new FileInfo(new Uri(this.GetType().Assembly.CodeBase).LocalPath).Directory.FullName' path)); " is 130.
Magic Number,SizSelCsZzz.Test,can_use_jQuery_or_Sizzle_to_find_elements,D:\research\architectureSmells\repos\fschwiet_SizSelCsZzz\SizSelCsZzz.Test\can_use_jQuery_or_Sizzle_to_find_elements.cs,Check,The following statement contains a magic number: given("using css selector " + selectorName' () =>              {                  describe("BySizzle.CssSelector can find elements by Sizzle CSS selector"' delegate                  {                      arrange(() => browser.Navigate().GoToUrl(server.UrlFor("HelloWorld.html")));                        it("can be used with FindElements"' delegate                      {                          expect(() => browser.FindElements(functionUnderTest("div:contains('Hello')")).Count() == 1);                          expect(() => browser.FindElements(functionUnderTest("li.last_li")).Count() == 1);                          expect(() => browser.FindElements(functionUnderTest("div:contains('Hello')' li.last_li")).Count() == 2);                      });                        it("can be used with FindElement"'                         delegate { expect(() => browser.FindElement(functionUnderTest("div:contains('Hello')")) != null); });                        it("can handle special characters"' delegate                      {                          expect(() => browser.FindElement(functionUnderTest("li:contains('\"quotes\"')")) != null);                          expect(() => browser.FindElements(functionUnderTest("span:contains('phrase with spaces')")).Count() == 1);                          expect(                              () => browser.FindElements(functionUnderTest("span:contains('phrase with spaces' and commas.')")).Count() == 1);                          expect(() => browser.FindElements(functionUnderTest("input#fee-fi_foe-fum")).Count() == 1);                          expect(() => browser.FindElements(functionUnderTest("input[value='Hello world']")).Count() == 1);                          //expect(() => browser.FindElements(By.CssSelector("input[value='Hello' world.']")).Count() == 1);                          expect(() => browser.FindElements(functionUnderTest("input[value='Hello' world.']")).Count() == 1);                      });                        it("reports a useful error if the element is not found"' delegate                      {                          var e =                              Assert.Throws<NoSuchElementException>(                                  delegate { browser.FindElement(functionUnderTest("div:contains('This solves everything')")); });                            expect(                              () =>                              e.Message.Contains(                                  "Could not find element matching css selector \"div:contains('This solves everything')\""));                      });                  });                    describe("BySizzle.CssSelector can be used transitively"' delegate                  {                      arrange(() => browser.Navigate().GoToUrl(server.UrlFor("somepage.html")));                        it("matches descendant nodes"'                         delegate                         {                             expect(                                 () =>                                 browser.FindElement(functionUnderTest("ul")).FindElement(functionUnderTest("li:contains('LIST ITEM')")) != null);                         });                        it("does not match nondescendant nodes"' delegate                      {                          By paragraphFinder = functionUnderTest("p:contains('PARAGRAPH')");                            expect(() => browser.FindElement(paragraphFinder) != null);                            Assert.Throws<NoSuchElementException>(                              delegate { expect(() => browser.FindElement(functionUnderTest("ul")).FindElement(paragraphFinder) == null); });                      });                  });                    if (checkEnforcesUniqueness)                  {                      when("matching an ambiguous selector"' () =>                      {                          arrange(() => browser.Navigate().GoToUrl(server.UrlFor("HelloWorld.html")));                          var selector = "li";                            then("a useful exception is thrown"' () =>                          {                              var exception = Assert.Throws<InvalidOperationException>(() =>                              {                                  browser.FindElement(functionUnderTest(selector));                              });                                expect(() => exception.Message.Contains("More than one element matched selector \"li\"."));                          });                      });                  }              });
Magic Number,SizSelCsZzz.Test,NancyModuleRunner,D:\research\architectureSmells\repos\fschwiet_SizSelCsZzz\SizSelCsZzz.Test\NancyModuleRunner.cs,NancyModuleRunner,The following statement contains a magic number: int port = TCPUtil.GetAvailableTCPPort(8081' 8090);
Magic Number,SizSelCsZzz.Test,NancyModuleRunner,D:\research\architectureSmells\repos\fschwiet_SizSelCsZzz\SizSelCsZzz.Test\NancyModuleRunner.cs,NancyModuleRunner,The following statement contains a magic number: int port = TCPUtil.GetAvailableTCPPort(8081' 8090);
Magic Number,SizSelCsZzz.Test,miscellaneous_webdriver_extension_methods,D:\research\architectureSmells\repos\fschwiet_SizSelCsZzz\SizSelCsZzz.Test\miscellaneous_webdriver_extension_methods.cs,SpecifyForBrowser,The following statement contains a magic number: describe("CountElementsMatching"' delegate              {                  var server = arrange(() => new StaticServer()                  {                      {"list.html"' "<ul><li>foo</li><li>bar</li><li>baz</li></ul"}                  }.Start());                    it("counts elements on a page"' delegate                  {                      browser.Navigate().GoToUrl(server.UrlFor("list.html"));                        expect(() => browser.CountElementsMatching("li:contains('foo')' li:contains('bar')") == 2);                  });              });
Magic Number,SizSelCsZzz.Test,StaticServer_can_have_arbitrary_path_handlers,D:\research\architectureSmells\repos\fschwiet_SizSelCsZzz\SizSelCsZzz.Test\StaticServer_can_have_arbitrary_path_handlers.cs,Specify,The following statement contains a magic number: given("a server with a redirect handler"' delegate              {                  var server = beforeAll(() => new StaticServer()                  {                      {"Redirect.html"' (context) =>                      {                          context.Response.AddHeader("Location"' context.Server.UrlFor("NewPage.html"));                          context.Response.StatusCode = 301;                      }}'                      {"NewPage.html"' "Hello' world"}                  }.Start());                    when("a user visits the page"' delegate                  {                      var driver = arrange(() => new FirefoxDriver());                      arrange(() => driver.Navigate().GoToUrl(server.UrlFor("Redirect.html")));                        then("the user is redirected"' delegate                      {                          var bodyText = driver.GetBodyText();                            expect(() => bodyText.Contains("Hello' world"));                      });                  });              });
