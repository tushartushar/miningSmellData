Implementation smell,Namespace,Class,File,Method,Description
Long Method,OsmSharp.UI.Map.Layers,LayerTile,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Layers\LayerTile.cs,LoadTile,The method has 108 lines of code.
Long Method,OsmSharp.UI.Map.Layers,LayerTile,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Layers\LayerTile.cs,Get,The method has 101 lines of code.
Long Method,OsmSharp.UI.Map.Styles.MapCSS,MapCSSInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\MapCSSInterpreter.cs,Translate,The method has 133 lines of code.
Long Method,OsmSharp.UI.Map.Styles.MapCSS,MapCSSInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\MapCSSInterpreter.cs,TranslateWay,The method has 179 lines of code.
Long Method,OsmSharp.UI.Map.Styles.MapCSS,MapCSSInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\MapCSSInterpreter.cs,BuildRules,The method has 205 lines of code.
Long Method,OsmSharp.UI.Map.Styles.MapCSS.v0_2,MapCSSDomainParser,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\v0_2\MapCSSDomainParser.cs,ParseRule,The method has 1220 lines of code.
Long Method,OsmSharp.UI.Renderer,Renderer2D<TTarget>,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Renderer2D.cs,RenderPrimitives,The method has 120 lines of code.
Long Method,OsmSharp.UI.Renderer.Scene,Scene2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Scene2D.cs,Get,The method has 115 lines of code.
Long Method,OsmSharp.UI.Renderer.Scene.Simplification,Scene2DObjectMerger,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Simplification\Scene2DObjectMerger.cs,MergeObjects,The method has 295 lines of code.
Long Method,OsmSharp.UI.Renderer.Scene.Storage,Primitive2DRTreeDeserializer,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Storage\Primitive2DRTreeDeserializer.cs,DeSerialize,The method has 218 lines of code.
Long Method,OsmSharp.UI.Renderer.Scene.Storage,SceneObjectRTreeSerializer,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Storage\SceneObjectRTreeSerializer.cs,Serialize,The method has 180 lines of code.
Long Method,OsmSharp.UI.Renderer.Scene.Storage,SceneSerializer,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Storage\SceneSerializer.cs,Serialize,The method has 100 lines of code.
Complex Method,OsmSharp.UI.Animations,CubicBezier,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Animations\CubicBezier.cs,solveCurveX,Cyclomatic complexity of the method is 9
Complex Method,OsmSharp.UI.Animations.Invalidation.Triggers,DefaultTrigger,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Animations\Invalidation\Triggers\DefaultTrigger.cs,NotifyChange,Cyclomatic complexity of the method is 9
Complex Method,OsmSharp.UI.Map.Layers,LayerGpx,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Layers\LayerGpx.cs,AddGpx,Cyclomatic complexity of the method is 10
Complex Method,OsmSharp.UI.Map.Layers,LayerTile,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Layers\LayerTile.cs,Get,Cyclomatic complexity of the method is 14
Complex Method,OsmSharp.UI.Map.Layers,LayerTile,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Layers\LayerTile.cs,ViewChanged,Cyclomatic complexity of the method is 8
Complex Method,OsmSharp.UI.Map.Styles.MapCSS,MapCSSInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\MapCSSInterpreter.cs,PrepareForProcessing,Cyclomatic complexity of the method is 13
Complex Method,OsmSharp.UI.Map.Styles.MapCSS,MapCSSInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\MapCSSInterpreter.cs,Translate,Cyclomatic complexity of the method is 25
Complex Method,OsmSharp.UI.Map.Styles.MapCSS,MapCSSInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\MapCSSInterpreter.cs,TranslateNode,Cyclomatic complexity of the method is 15
Complex Method,OsmSharp.UI.Map.Styles.MapCSS,MapCSSInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\MapCSSInterpreter.cs,TranslateWay,Cyclomatic complexity of the method is 30
Complex Method,OsmSharp.UI.Map.Styles.MapCSS,MapCSSInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\MapCSSInterpreter.cs,TranslateLineairRing,Cyclomatic complexity of the method is 12
Complex Method,OsmSharp.UI.Map.Styles.MapCSS,MapCSSInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\MapCSSInterpreter.cs,BuildRules,Cyclomatic complexity of the method is 50
Complex Method,OsmSharp.UI.Map.Styles.MapCSS,MapCSSInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\MapCSSInterpreter.cs,AppliesTo,Cyclomatic complexity of the method is 9
Complex Method,OsmSharp.UI.Map.Styles.MapCSS.v0_2.Domain,Selector,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\v0_2\Domain\Selector.cs,Selects,Cyclomatic complexity of the method is 12
Complex Method,OsmSharp.UI.Map.Styles.MapCSS.v0_2.Domain,SelectorRuleTagValueComparison,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\v0_2\Domain\SelectorRule.cs,Selects,Cyclomatic complexity of the method is 12
Complex Method,OsmSharp.UI.Map.Styles.MapCSS.v0_2.Eval,EvalInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\v0_2\Eval\EvalInterpreter.cs,Interpreter,Cyclomatic complexity of the method is 14
Complex Method,OsmSharp.UI.Map.Styles.MapCSS.v0_2.Eval,EvalInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\v0_2\Eval\EvalInterpreter.cs,EvaluateOperation,Cyclomatic complexity of the method is 9
Complex Method,OsmSharp.UI.Map.Styles.MapCSS.v0_2,MapCSSDomainParser,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\v0_2\MapCSSDomainParser.cs,ParseCanvasRule,Cyclomatic complexity of the method is 10
Complex Method,OsmSharp.UI.Map.Styles.MapCSS.v0_2,MapCSSDomainParser,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\v0_2\MapCSSDomainParser.cs,ParseRule,Cyclomatic complexity of the method is 167
Complex Method,OsmSharp.UI.Map.Styles.MapCSS.v0_2,MapCSSTypesExtensions,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\v0_2\MapCSSTypes.cs,IsOfType,Cyclomatic complexity of the method is 11
Complex Method,OsmSharp.UI.Renderer,Renderer2D<TTarget>,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Renderer2D.cs,RenderPrimitives,Cyclomatic complexity of the method is 15
Complex Method,OsmSharp.UI.Renderer.Primitives,Polygon2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Primitives\Polygon2D.cs,Contains,Cyclomatic complexity of the method is 11
Complex Method,OsmSharp.UI.Renderer.Primitives,Polygon2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Primitives\Polygon2D.cs,Contains,Cyclomatic complexity of the method is 11
Complex Method,OsmSharp.UI.Renderer.Scene,Scene2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Scene2D.cs,Get,Cyclomatic complexity of the method is 22
Complex Method,OsmSharp.UI.Renderer.Scene.Simplification,Scene2DObjectMerger,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Simplification\Scene2DObjectMerger.cs,MergeObjects,Cyclomatic complexity of the method is 27
Complex Method,OsmSharp.UI.Renderer.Scene.Storage,Primitive2DRTreeDeserializer,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Storage\Primitive2DRTreeDeserializer.cs,DeSerialize,Cyclomatic complexity of the method is 17
Complex Method,OsmSharp.UI.Renderer.Scene.Storage,SceneObjectRTreeSerializer,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Storage\SceneObjectRTreeSerializer.cs,Serialize,Cyclomatic complexity of the method is 15
Complex Method,OsmSharp.UI.Renderer.Scene.Styles,StyleLine,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Styles\StyleLine.cs,Equals,Cyclomatic complexity of the method is 8
Long Parameter List,OsmSharp.UI.Map.Layers,Layer,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Layers\Layer.cs,ViewChanged,The method has 5 parameters. Parameters: map' zoomFactor' center' view' extraView
Long Parameter List,OsmSharp.UI.Map.Layers,LayerGpx,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Layers\LayerGpx.cs,ViewChanged,The method has 5 parameters. Parameters: map' zoomFactor' center' view' extraView
Long Parameter List,OsmSharp.UI.Map.Layers,LayerMBTile,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Layers\LayerMBTile.cs,ViewChanged,The method has 5 parameters. Parameters: map' zoomFactor' center' view' extraView
Long Parameter List,OsmSharp.UI.Map.Layers,LayerOsm,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Layers\LayerOsm.cs,ViewChanged,The method has 5 parameters. Parameters: map' zoomFactor' center' view' extraView
Long Parameter List,OsmSharp.UI.Map.Layers,LayerPrimitives,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Layers\LayerPrimitives.cs,ViewChanged,The method has 5 parameters. Parameters: map' zoomFactor' center' view' extraView
Long Parameter List,OsmSharp.UI.Map.Layers,LayerScene,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Layers\LayerScene.cs,ViewChanged,The method has 5 parameters. Parameters: map' zoomFactor' center' view' extraView
Long Parameter List,OsmSharp.UI.Map.Layers,LayerTile,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Layers\LayerTile.cs,ViewChanged,The method has 5 parameters. Parameters: map' zoomFactor' center' view' extraView
Long Parameter List,OsmSharp.UI.Map,MapRenderer<TTarget>,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\MapRenderer.cs,Render,The method has 5 parameters. Parameters: target' projection' layers' view' zoomFactor
Long Parameter List,OsmSharp.UI.Map,MapRenderer<TTarget>,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\MapRenderer.cs,Render,The method has 6 parameters. Parameters: target' projection' layers' view' viewRender' zoomFactor
Long Parameter List,OsmSharp.UI.Map,MapRenderer<TTarget>,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\MapRenderer.cs,Render,The method has 5 parameters. Parameters: target' map' view' viewRender' zoomFactor
Long Parameter List,OsmSharp.UI.Map,MapRenderer<TTarget>,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\MapRenderer.cs,Create,The method has 7 parameters. Parameters: width' height' map' zoomFactor' center' xInverted' yInverted
Long Parameter List,OsmSharp.UI.Map,MapRenderer<TTarget>,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\MapRenderer.cs,Create,The method has 8 parameters. Parameters: width' height' map' zoomFactor' center' xInverted' yInverted' angle
Long Parameter List,OsmSharp.UI.Renderer,Matrix2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Matrix2D.cs,FromRectangle,The method has 5 parameters. Parameters: rectangle' width' height' invertX' invertY
Long Parameter List,OsmSharp.UI.Renderer,Matrix2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Matrix2D.cs,ToRectangle,The method has 5 parameters. Parameters: rectangle' width' height' invertX' invertY
Long Parameter List,OsmSharp.UI.Renderer,Renderer2D<TTarget>,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Renderer2D.cs,Render,The method has 5 parameters. Parameters: orginalTarget' view' zoomFactor' primitives' backcolor
Long Parameter List,OsmSharp.UI.Renderer,Renderer2D<TTarget>,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Renderer2D.cs,DrawPoint,The method has 5 parameters. Parameters: target' x' y' color' size
Long Parameter List,OsmSharp.UI.Renderer,Renderer2D<TTarget>,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Renderer2D.cs,DrawLine,The method has 7 parameters. Parameters: target' x' y' color' width' lineJoin' dashes
Long Parameter List,OsmSharp.UI.Renderer,Renderer2D<TTarget>,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Renderer2D.cs,DrawPolygon,The method has 6 parameters. Parameters: target' x' y' color' width' fill
Long Parameter List,OsmSharp.UI.Renderer,Renderer2D<TTarget>,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Renderer2D.cs,DrawImage,The method has 6 parameters. Parameters: target' left' top' right' bottom' tag
Long Parameter List,OsmSharp.UI.Renderer,Renderer2D<TTarget>,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Renderer2D.cs,DrawText,The method has 9 parameters. Parameters: target' x' y' text' color' size' haloColor' haloRadius' fontName
Long Parameter List,OsmSharp.UI.Renderer,Renderer2D<TTarget>,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Renderer2D.cs,DrawLineText,The method has 9 parameters. Parameters: target' x' y' text' color' size' haloColor' haloRadius' fontName
Long Parameter List,OsmSharp.UI.Renderer,View2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\View2D.cs,CreateFromCenterAndSize,The method has 6 parameters. Parameters: width' height' centerX' centerY' directionX' directionY
Long Parameter List,OsmSharp.UI.Renderer,View2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\View2D.cs,CreateFromCenterAndSize,The method has 7 parameters. Parameters: width' height' centerX' centerY' xInverted' yInverted' angleY
Long Parameter List,OsmSharp.UI.Renderer,View2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\View2D.cs,CreateFrom,The method has 7 parameters. Parameters: centerX' centerY' pixelsWidth' pixelsHeight' zoomFactor' xInverted' yInverted
Long Parameter List,OsmSharp.UI.Renderer,View2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\View2D.cs,CreateFrom,The method has 8 parameters. Parameters: centerX' centerY' pixelsWidth' pixelsHeight' zoomFactor' xInverted' yInverted' angleY
Long Parameter List,OsmSharp.UI.Renderer,View2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\View2D.cs,ToViewPort,The method has 5 parameters. Parameters: pixelsWidth' pixelsHeight' sceneX' sceneY' transformed
Long Parameter List,OsmSharp.UI.Renderer.Primitives,Icon2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Primitives\Icon2D.cs,Icon2D,The method has 5 parameters. Parameters: x' y' image' minZoom' maxZoom
Long Parameter List,OsmSharp.UI.Renderer.Primitives,Image2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Primitives\Image2D.cs,Image2D,The method has 5 parameters. Parameters: left' top' bottom' right' nativeImage
Long Parameter List,OsmSharp.UI.Renderer.Primitives,Image2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Primitives\Image2D.cs,Image2D,The method has 7 parameters. Parameters: left' top' bottom' right' nativeImage' minZoom' maxZoom
Long Parameter List,OsmSharp.UI.Renderer.Primitives,Line2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Primitives\Line2D.cs,Line2D,The method has 6 parameters. Parameters: x' y' color' width' lineJoin' dashes
Long Parameter List,OsmSharp.UI.Renderer.Primitives,Line2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Primitives\Line2D.cs,Line2D,The method has 8 parameters. Parameters: x' y' color' width' lineJoin' dashes' minZoom' maxZoom
Long Parameter List,OsmSharp.UI.Renderer.Primitives,Line2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Primitives\Line2D.cs,Line2D,The method has 10 parameters. Parameters: x' y' color' width' lineJoin' dashes' minX' maxX' minY' maxY
Long Parameter List,OsmSharp.UI.Renderer.Primitives,LineText2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Primitives\LineText2D.cs,LineText2D,The method has 5 parameters. Parameters: x' y' color' size' text
Long Parameter List,OsmSharp.UI.Renderer.Primitives,LineText2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Primitives\LineText2D.cs,LineText2D,The method has 9 parameters. Parameters: x' y' color' size' text' haloColor' haloRadius' minZoom' maxZoom
Long Parameter List,OsmSharp.UI.Renderer.Primitives,LineText2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Primitives\LineText2D.cs,LineText2D,The method has 9 parameters. Parameters: x' y' color' size' text' minX' maxX' minY' maxY
Long Parameter List,OsmSharp.UI.Renderer.Primitives,Polygon2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Primitives\Polygon2D.cs,Polygon2D,The method has 5 parameters. Parameters: x' y' color' width' fill
Long Parameter List,OsmSharp.UI.Renderer.Primitives,Polygon2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Primitives\Polygon2D.cs,Polygon2D,The method has 7 parameters. Parameters: x' y' color' width' fill' minZoom' maxZoom
Long Parameter List,OsmSharp.UI.Renderer.Primitives,Polygon2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Primitives\Polygon2D.cs,Polygon2D,The method has 9 parameters. Parameters: x' y' color' width' fill' minX' maxX' minY' maxY
Long Parameter List,OsmSharp.UI.Renderer.Primitives,Text2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Primitives\Text2D.cs,Text2D,The method has 5 parameters. Parameters: x' y' text' color' size
Long Parameter List,OsmSharp.UI.Renderer.Primitives,Text2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Primitives\Text2D.cs,Text2D,The method has 10 parameters. Parameters: x' y' text' color' size' haloColor' haloRadius' font' minZoom' maxZoom
Long Parameter List,OsmSharp.UI.Renderer.Scene,Scene2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Scene2D.cs,AddStylePoint,The method has 6 parameters. Parameters: pointId' layer' minZoom' maxZoom' color' size
Long Parameter List,OsmSharp.UI.Renderer.Scene,Scene2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Scene2D.cs,AddIcon,The method has 5 parameters. Parameters: pointId' layer' minZoom' maxZoom' imageId
Long Parameter List,OsmSharp.UI.Renderer.Scene,Scene2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Scene2D.cs,AddText,The method has 10 parameters. Parameters: pointId' layer' minZoom' maxZoom' size' text' color' haloColor' haloRadius' font
Long Parameter List,OsmSharp.UI.Renderer.Scene,Scene2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Scene2D.cs,AddStyleLine,The method has 8 parameters. Parameters: pointsId' layer' minZoom' maxZoom' color' width' lineJoin' dashes
Long Parameter List,OsmSharp.UI.Renderer.Scene,Scene2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Scene2D.cs,CheckZoomRanges,The method has 6 parameters. Parameters: idx' minZoom' maxZoom' minZoomLimited' maxZoomLimited' simplificationZoom
Long Parameter List,OsmSharp.UI.Renderer.Scene,Scene2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Scene2D.cs,AddStyleLineText,The method has 10 parameters. Parameters: pointsId' layer' minZoom' maxZoom' color' size' text' font' haloColor' haloRadius
Long Parameter List,OsmSharp.UI.Renderer.Scene,Scene2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Scene2D.cs,AddStylePolygon,The method has 7 parameters. Parameters: pointsId' layer' minZoom' maxZoom' color' width' fill
Long Parameter List,OsmSharp.UI.Renderer.Scene.Simplification,Scene2DObjectMerger,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Simplification\Scene2DObjectMerger.cs,FindMatch,The method has 7 parameters. Parameters: linesIndex' lines' x' y' style' epsilon' found
Long Identifier,OsmSharp.UI.Map.Styles.MapCSS.v0_2,MapCSSDomainParser,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\v0_2\MapCSSDomainParser.cs,ParseRule,The length of the parameter selectorRuleTagValueComparison is 30.
Long Identifier,OsmSharp.UI.Renderer.Images,NativeImageCacheFactory,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Images\NativeImageCacheFactory.cs,,The length of the parameter _nativeImageCacheCreateDelegate is 31.
Long Statement,OsmSharp.UI.Animations,MapViewAnimator,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Animations\MapViewAnimator.cs,_timer_Elapsed,The length of the statement  "                _currentState.Center = new GeoCoordinate(_animationProgress * (_endState.Center.Latitude - _startState.Center.Latitude) + _startState.Center.Latitude'" is 150.
Long Statement,OsmSharp.UI.Animations.Invalidation.Triggers,DefaultTrigger,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Animations\Invalidation\Triggers\DefaultTrigger.cs,NotifyChange,The length of the statement  "                    _timer = new System.Threading.Timer(this.StaticDetectionCallback' null' StaticDetectionTriggerMillis' System.Threading.Timeout.Infinite);" is 137.
Long Statement,OsmSharp.UI.Map.Layers,LayerGpx,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Layers\LayerGpx.cs,AddGpx,The length of the statement  "                        _scene.AddStyleLine(pointsId.Value' 0' float.MinValue' float.MaxValue' transparantBlue.Value' 8' Renderer.Primitives.LineJoin.Round' null);" is 139.
Long Statement,OsmSharp.UI.Map.Layers,LayerMBTile,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Layers\LayerMBTile.cs,ViewChanged,The length of the statement  "                var range = TileRange.CreateAroundBoundingBox(new GeoCoordinateBox(map.Projection.ToGeoCoordinates(viewBox.Min[0]' viewBox.Min[1])'" is 131.
Long Statement,OsmSharp.UI.Map.Layers,LayerMBTile,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Layers\LayerMBTile.cs,ViewChanged,The length of the statement  "				OsmSharp.Logging.Log.TraceEvent ("LayerMBTile"' OsmSharp.Logging.TraceEventType.Verbose' string.Format ("Requesting {0} tiles for view."' range.Count));" is 152.
Long Statement,OsmSharp.UI.Map.Layers,LayerPrimitives,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Layers\LayerPrimitives.cs,AddLine,The length of the statement  "                _scene.AddStyleLine(pointsId.Value' 0' float.MinValue' float.MaxValue' color' sizePixels' Renderer.Primitives.LineJoin.Round' null);" is 132.
Long Statement,OsmSharp.UI.Map.Layers,LayerPrimitives,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Layers\LayerPrimitives.cs,AddPolyline,The length of the statement  "                _scene.AddStyleLine(pointsId.Value' 0' float.MinValue' float.MaxValue' color' sizePixels' Renderer.Primitives.LineJoin.Round' null);" is 132.
Long Statement,OsmSharp.UI.Map,Map,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Map.cs,EnsureViewWithinBoundingBox,The length of the statement  "            //double[] mapCenterPixels = view.ToViewPort(view.Width' view.Height' mapCenterSceneCoords[0]' mapCenterSceneCoords[1]);" is 120.
Long Statement,OsmSharp.UI.Map,Map,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Map.cs,EnsureViewWithinBoundingBox,The length of the statement  "            fromViewPort.Apply(mapCenterPixelsX - (view.Width) / 2.0' mapCenterPixelsY - (view.Height) / 2.0' out leftScene' out topScene);" is 127.
Long Statement,OsmSharp.UI.Map,Map,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Map.cs,EnsureViewWithinBoundingBox,The length of the statement  "            fromViewPort.Apply(mapCenterPixelsX + (view.Width) / 2.0' mapCenterPixelsY + (view.Height) / 2.0' out rightScene' out bottomScene);" is 131.
Long Statement,OsmSharp.UI.Map.Styles.MapCSS,MapCSSInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\MapCSSInterpreter.cs,Translate,The length of the statement  "                    uint pointId = scene.AddPoint(projection.LongitudeToX(node.Coordinate.Longitude)' projection.LatitudeToY(node.Coordinate.Latitude));" is 132.
Long Statement,OsmSharp.UI.Map.Styles.MapCSS,MapCSSInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\MapCSSInterpreter.cs,TranslateNode,The length of the statement  "                        scene.AddText(pointId.Value' this.CalculateSceneLayer(OffsetPointText' zIndex)' minZoom' maxZoom' fontSize' value' textColor' " is 125.
Long Statement,OsmSharp.UI.Map.Styles.MapCSS,MapCSSInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\MapCSSInterpreter.cs,TranslateWay,The length of the statement  "                                scene.AddStylePolygon(pointsId.Value' this.CalculateSceneLayer(OffsetArea' zIndex)' minZoom' maxZoom' fillColor' 1' true);" is 122.
Long Statement,OsmSharp.UI.Map.Styles.MapCSS,MapCSSInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\MapCSSInterpreter.cs,TranslateWay,The length of the statement  "                                    scene.AddStylePolygon(pointsId.Value' this.CalculateSceneLayer(OffsetCasing' zIndex)' minZoom' maxZoom' color' 1' false);" is 121.
Long Statement,OsmSharp.UI.Map.Styles.MapCSS,MapCSSInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\MapCSSInterpreter.cs,TranslateLineairRing,The length of the statement  "                            scene.AddStylePolygon(pointsId.Value' this.CalculateSceneLayer(OffsetArea' zIndex)' minZoom' maxZoom' fillColor' 1' true);" is 122.
Long Statement,OsmSharp.UI.Map.Styles.MapCSS,MapCSSInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\MapCSSInterpreter.cs,TranslateLineairRing,The length of the statement  "                                scene.AddStylePolygon(pointsId.Value' this.CalculateSceneLayer(OffsetCasing' zIndex)' minZoom' maxZoom' color' 1' false);" is 121.
Long Statement,OsmSharp.UI.Map.Styles.MapCSS.v0_2.Domain,SelectorRuleTagValueComparison,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\v0_2\Domain\SelectorRule.cs,Selects,The length of the statement  "                        if (double.TryParse(this.Value' NumberStyles.Any' System.Globalization.CultureInfo.InvariantCulture' out valueDouble) &&" is 120.
Long Statement,OsmSharp.UI.Map.Styles.MapCSS.v0_2.Domain,SelectorRuleTagValueComparison,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\v0_2\Domain\SelectorRule.cs,Selects,The length of the statement  "                        if (double.TryParse(this.Value' NumberStyles.Any' System.Globalization.CultureInfo.InvariantCulture' out valueDouble) &&" is 120.
Long Statement,OsmSharp.UI.Map.Styles.MapCSS.v0_2.Domain,SelectorRuleTagValueComparison,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\v0_2\Domain\SelectorRule.cs,Selects,The length of the statement  "                        if (double.TryParse(this.Value' NumberStyles.Any' System.Globalization.CultureInfo.InvariantCulture' out valueDouble) &&" is 120.
Long Statement,OsmSharp.UI.Map.Styles.MapCSS.v0_2.Domain,SelectorRuleTagValueComparison,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\v0_2\Domain\SelectorRule.cs,Selects,The length of the statement  "                        if (double.TryParse(this.Value' NumberStyles.Any' System.Globalization.CultureInfo.InvariantCulture' out valueDouble) &&" is 120.
Long Statement,OsmSharp.UI.Map.Styles.MapCSS.v0_2,MapCSSDomainParser,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\v0_2\MapCSSDomainParser.cs,ParseColor,The length of the statement  "            else if (int.TryParse(colorTree.Text' NumberStyles.Any' System.Globalization.CultureInfo.InvariantCulture' out valueInt))" is 121.
Long Statement,OsmSharp.UI.Renderer.Scene,Scene2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Scene2D.cs,CalculateSimplificationEpsilon,The length of the statement  "            double xDiff = System.Math.Abs(projection.LongitudeToX(topLeft.Longitude) - projection.LongitudeToX(bottomRight.Longitude));" is 124.
Long Statement,OsmSharp.UI.Renderer.Scene,Scene2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Scene2D.cs,CalculateSimplificationEpsilon,The length of the statement  "            double yDiff = System.Math.Abs(projection.LatitudeToY(topLeft.Latitude) - projection.LatitudeToY(bottomRight.Latitude));" is 120.
Long Statement,OsmSharp.UI.Renderer.Scene,Scene2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Scene2D.cs,AddStylePoint,The length of the statement  "                if (this.CheckZoomRanges(idx' minZoom' maxZoom' out minimumZoomFactor' out maximumZoomFactor' out simplificationZoomFactor))" is 124.
Long Statement,OsmSharp.UI.Renderer.Scene,Scene2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Scene2D.cs,AddIcon,The length of the statement  "                if (this.CheckZoomRanges(idx' minZoom' maxZoom' out minimumZoomFactor' out maximumZoomFactor' out simplificationZoomFactor))" is 124.
Long Statement,OsmSharp.UI.Renderer.Scene,Scene2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Scene2D.cs,AddText,The length of the statement  "                if (this.CheckZoomRanges(idx' minZoom' maxZoom' out minimumZoomFactor' out maximumZoomFactor' out simplificationZoomFactor))" is 124.
Long Statement,OsmSharp.UI.Renderer.Scene,Scene2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Scene2D.cs,AddStyleLine,The length of the statement  "                if (this.CheckZoomRanges(idx' minZoom' maxZoom' out minimumZoomFactor' out maximumZoomFactor' out simplificationZoomFactor))" is 124.
Long Statement,OsmSharp.UI.Renderer.Scene,Scene2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Scene2D.cs,ConvertToPrimitive,The length of the statement  "            var primitive = new Line2D(geo.X' geo.Y' style.Color' style.Width' style.LineJoin' style.Dashes' style.MinZoom' style.MaxZoom);" is 127.
Long Statement,OsmSharp.UI.Renderer.Scene,Scene2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Scene2D.cs,AddStyleLineText,The length of the statement  "                if (this.CheckZoomRanges(idx' minZoom' maxZoom' out minimumZoomFactor' out maximumZoomFactor' out simplificationZoomFactor))" is 124.
Long Statement,OsmSharp.UI.Renderer.Scene,Scene2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Scene2D.cs,ConvertToPrimitive,The length of the statement  "            var primitive = new LineText2D(geo.X' geo.Y' style.Color' style.Size' text' style.HaloColor' style.HaloRadius' style.MinZoom' style.MaxZoom);" is 141.
Long Statement,OsmSharp.UI.Renderer.Scene,Scene2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Scene2D.cs,AddStylePolygon,The length of the statement  "                if (this.CheckZoomRanges(idx' minZoom' maxZoom' out minimumZoomFactor' out maximumZoomFactor' out simplificationZoomFactor))" is 124.
Long Statement,OsmSharp.UI.Renderer.Scene.Simplification,Scene2DObjectMerger,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Simplification\Scene2DObjectMerger.cs,MergeObjects,The length of the statement  "                        linesIndex.Add(new PointF2D(scenePoints.X[scenePoints.X.Length - 1]' scenePoints.Y[scenePoints.Y.Length - 1])' scenePoints);" is 124.
Long Statement,OsmSharp.UI.Renderer.Scene.Simplification,Scene2DObjectMerger,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Simplification\Scene2DObjectMerger.cs,MergeObjects,The length of the statement  "                        linesIndex.Add(new PointF2D(scenePoints.X[scenePoints.X.Length - 1]' scenePoints.Y[scenePoints.Y.Length - 1])' scenePoints);" is 124.
Long Statement,OsmSharp.UI.Renderer.Scene.Simplification,Scene2DObjectMerger,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Simplification\Scene2DObjectMerger.cs,MergeObjects,The length of the statement  "                    target.AddStylePoint(target.AddPoint(scenePoint.X' scenePoint.Y)' stylePoint.Layer' stylePoint.MinZoom' stylePoint.MaxZoom'" is 123.
Long Statement,OsmSharp.UI.Renderer.Scene.Simplification,Scene2DObjectMerger,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Simplification\Scene2DObjectMerger.cs,MergeObjects,The length of the statement  "                        //polygonsIndex.Add(new PointF2D(scenePoints.X[scenePoints.X.Length - 1]' scenePoints.Y[scenePoints.Y.Length - 1])' scenePoints);" is 129.
Long Statement,OsmSharp.UI.Renderer.Scene.Simplification,Scene2DObjectMerger,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Simplification\Scene2DObjectMerger.cs,MergeObjects,The length of the statement  "                        "Merging polygons @z{3}e{4} ({1}/{2})... {0}%"' progress' totalLines - polygons.Count' totalLines' zoomFactor' epsilon);" is 120.
Long Statement,OsmSharp.UI.Renderer.Scene.Simplification,Scene2DObjectMerger,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Simplification\Scene2DObjectMerger.cs,MergeObjects,The length of the statement  "                //            "Merging lines @z{3}e{4} ({1}/{2})... {0}%"' progress' totalLines - lines.Count' totalLines' zoomFactor' epsilon);" is 128.
Long Statement,OsmSharp.UI.Renderer.Images,NativeImageCacheFactory,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Images\NativeImageCacheFactory.cs,Create,The length of the statement  "                throw new InvalidOperationException("Image creating delegate not initialized' call OsmSharp.{Platform).UI.Native.Initialize() in the native code.");" is 148.
Complex Conditional,OsmSharp.UI.Map,MapRenderer<TTarget>,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\MapRenderer.cs,Render,The conditional expression  "map[layerIdx].IsVisible &&                     (!map[layerIdx].MinZoom.HasValue || map[layerIdx].MinZoom < zoomLevel) &&                     (!map[layerIdx].MaxZoom.HasValue || map[layerIdx].MaxZoom >= zoomLevel)"  is complex.
Complex Conditional,OsmSharp.UI.Map.Styles.MapCSS,MapCSSInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\MapCSSInterpreter.cs,Translate,The conditional expression  "_keysForLines == null || osmGeo.Tags.ContainsOneOfKeys(_keysForLines) ||                     _keysForAreas == null || osmGeo.Tags.ContainsOneOfKeys(_keysForAreas)"  is complex.
Complex Conditional,OsmSharp.UI.Map.Styles.MapCSS,MapCSSObject,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\MapCSSObject.cs,MapCSSObject,The conditional expression  "!(this.Feature.Geometry is LineairRing ||                 this.Feature.Geometry is Polygon ||                 this.Feature.Geometry is MultiPolygon ||                 this.Feature.Geometry is LineString)"  is complex.
Complex Conditional,OsmSharp.UI.Map.Styles.MapCSS.v0_2,MapCSSDomainParser,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\v0_2\MapCSSDomainParser.cs,Parse,The conditional expression  "child.ChildCount == 2 &&                             child.Children[0].Text == "SIMPLE_SELECTOR" &&                             child.Children[0].ChildCount == 1 &&                             child.Children[0] is CommonTree &&                             (child.Children[0] as CommonTree).Children[0].Text == "canvas""  is complex.
Complex Conditional,OsmSharp.UI.Map.Styles.MapCSS.v0_2,MapCSSDomainParser,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\v0_2\MapCSSDomainParser.cs,Parse,The conditional expression  "child.ChildCount == 2 &&                             child.Children[0].Text == "SIMPLE_SELECTOR" &&                             child.Children[0].ChildCount == 1 &&                             child.Children[0] is CommonTree &&                             (child.Children[0] as CommonTree).Children[0].Text == "meta""  is complex.
Complex Conditional,OsmSharp.UI.Map.Styles.MapCSS.v0_2,MapCSSDomainParser,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\v0_2\MapCSSDomainParser.cs,ParseRule,The conditional expression  "attributeSelector.Children[0].Text == "<" ||                                 attributeSelector.Children[0].Text == ">" ||                                 attributeSelector.Children[0].Text == "=" ||                                 attributeSelector.Children[0].Text == "!=""  is complex.
Complex Conditional,OsmSharp.UI.Map.Styles.MapCSS.v0_2,MapCSSTypesExtensions,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\v0_2\MapCSSTypes.cs,IsOfType,The conditional expression  "way != null &&                             way.Nodes != null &&                             (way.Nodes.Count > 2 && (way.Nodes[0] == way.Nodes[way.Nodes.Count - 1]))"  is complex.
Complex Conditional,OsmSharp.UI.Renderer.Primitives,Polygon2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Primitives\Polygon2D.cs,Contains,The conditional expression  "(this.Y[idx] <= coordinate[1] &&                         this.Y[idx + 1] >= coordinate[1]) &&                         !(this.Y[idx] == coordinate[1] &&                         this.Y[idx + 1] == coordinate[1])"  is complex.
Complex Conditional,OsmSharp.UI.Renderer.Primitives,Polygon2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Primitives\Polygon2D.cs,Contains,The conditional expression  "(this.Y[idx] >= coordinate[1] &&                         this.Y[idx + 1] <= coordinate[1]) &&                         !(this.Y[idx] == coordinate[1] &&                         this.Y[idx + 1] == coordinate[1])"  is complex.
Complex Conditional,OsmSharp.UI.Renderer.Primitives,Polygon2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Primitives\Polygon2D.cs,Contains,The conditional expression  "(Y[idx] <= coordinate[1] &&                         Y[idx + 1] >= coordinate[1]) &&                         !(Y[idx] == coordinate[1] &&                         Y[idx + 1] == coordinate[1])"  is complex.
Complex Conditional,OsmSharp.UI.Renderer.Primitives,Polygon2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Primitives\Polygon2D.cs,Contains,The conditional expression  "(Y[idx] >= coordinate[1] &&                         Y[idx + 1] <= coordinate[1]) &&                         !(Y[idx] == coordinate[1] &&                         Y[idx + 1] == coordinate[1])"  is complex.
Complex Conditional,OsmSharp.UI.Renderer.Scene.Styles,StyleLine,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Styles\StyleLine.cs,Equals,The conditional expression  "(obj as StyleLine).Color == this.Color &&                     (obj as StyleLine).Width == this.Width &&                     (obj as StyleLine).LineJoin == this.LineJoin &&                     (obj as StyleLine).Layer == this.Layer &&                     (obj as StyleLine).MinZoom == this.MinZoom &&                     (obj as StyleLine).MaxZoom == this.MaxZoom"  is complex.
Virtual Method Call from Constructor,OsmSharp.UI.Map.Styles,StyleSceneManager,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\StyleSceneManager.cs,StyleSceneManager,The constructor "StyleSceneManager" calls a virtual method "GetCanvasColor".
Magic Number,OsmSharp.UI.Animations,CubicBezier,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Animations\CubicBezier.cs,CubicBezier,The following statement contains a magic number: cx = 3.0 * x1;
Magic Number,OsmSharp.UI.Animations,CubicBezier,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Animations\CubicBezier.cs,CubicBezier,The following statement contains a magic number: bx = 3.0 * (x2 - x1) - cx;
Magic Number,OsmSharp.UI.Animations,CubicBezier,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Animations\CubicBezier.cs,CubicBezier,The following statement contains a magic number: cy = 3.0 * y1;
Magic Number,OsmSharp.UI.Animations,CubicBezier,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Animations\CubicBezier.cs,CubicBezier,The following statement contains a magic number: by = 3.0 * (y2 - y1) - cy;
Magic Number,OsmSharp.UI.Animations,CubicBezier,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Animations\CubicBezier.cs,createLinear,The following statement contains a magic number: return new CubicBezier(0.250f' 0.250f' 0.750f' 0.750f);
Magic Number,OsmSharp.UI.Animations,CubicBezier,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Animations\CubicBezier.cs,createLinear,The following statement contains a magic number: return new CubicBezier(0.250f' 0.250f' 0.750f' 0.750f);
Magic Number,OsmSharp.UI.Animations,CubicBezier,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Animations\CubicBezier.cs,createLinear,The following statement contains a magic number: return new CubicBezier(0.250f' 0.250f' 0.750f' 0.750f);
Magic Number,OsmSharp.UI.Animations,CubicBezier,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Animations\CubicBezier.cs,createLinear,The following statement contains a magic number: return new CubicBezier(0.250f' 0.250f' 0.750f' 0.750f);
Magic Number,OsmSharp.UI.Animations,CubicBezier,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Animations\CubicBezier.cs,createEase,The following statement contains a magic number: return new CubicBezier(0.250f' 0.100f' 0.250f' 1.000f);
Magic Number,OsmSharp.UI.Animations,CubicBezier,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Animations\CubicBezier.cs,createEase,The following statement contains a magic number: return new CubicBezier(0.250f' 0.100f' 0.250f' 1.000f);
Magic Number,OsmSharp.UI.Animations,CubicBezier,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Animations\CubicBezier.cs,createEase,The following statement contains a magic number: return new CubicBezier(0.250f' 0.100f' 0.250f' 1.000f);
Magic Number,OsmSharp.UI.Animations,CubicBezier,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Animations\CubicBezier.cs,sampleCurveDerivativeX,The following statement contains a magic number: return (3.0 * ax * t + 2.0 * bx) * t + cx;
Magic Number,OsmSharp.UI.Animations,CubicBezier,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Animations\CubicBezier.cs,sampleCurveDerivativeX,The following statement contains a magic number: return (3.0 * ax * t + 2.0 * bx) * t + cx;
Magic Number,OsmSharp.UI.Animations,CubicBezier,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Animations\CubicBezier.cs,solveCurveX,The following statement contains a magic number: System.Math.Abs(d2) < 1e-6
Magic Number,OsmSharp.UI.Animations,CubicBezier,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Animations\CubicBezier.cs,solveCurveX,The following statement contains a magic number: i < 8
Magic Number,OsmSharp.UI.Animations,CubicBezier,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Animations\CubicBezier.cs,solveCurveX,The following statement contains a magic number: t2 = (t1 - t0) * .5 + t0;
Magic Number,OsmSharp.UI.Animations,MapViewAnimator,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Animations\MapViewAnimator.cs,getEpsilon,The following statement contains a magic number: return 1.0/(200.0*duration);
Magic Number,OsmSharp.UI.Animations.Invalidation.Triggers,DefaultTrigger,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Animations\Invalidation\Triggers\DefaultTrigger.cs,NotifyChange,The following statement contains a magic number: var toView = _latestTriggeredView.CreateToViewPort(100' 100);
Magic Number,OsmSharp.UI.Animations.Invalidation.Triggers,DefaultTrigger,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Animations\Invalidation\Triggers\DefaultTrigger.cs,NotifyChange,The following statement contains a magic number: var toView = _latestTriggeredView.CreateToViewPort(100' 100);
Magic Number,OsmSharp.UI.Animations.Invalidation.Triggers,DefaultTrigger,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Animations\Invalidation\Triggers\DefaultTrigger.cs,NotifyChange,The following statement contains a magic number: newCenterX = System.Math.Abs(newCenterX - 50.0);
Magic Number,OsmSharp.UI.Animations.Invalidation.Triggers,DefaultTrigger,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Animations\Invalidation\Triggers\DefaultTrigger.cs,NotifyChange,The following statement contains a magic number: newCenterY = System.Math.Abs(newCenterY - 50.0);
Magic Number,OsmSharp.UI,SimpleColor,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\SimpleColor.cs,FromArgb,The following statement contains a magic number: return SimpleColor.FromArgb(255' red' green' blue);
Magic Number,OsmSharp.UI,SimpleColor,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\SimpleColor.cs,FromArgb,The following statement contains a magic number: (alpha > 255) || (alpha < 0)
Magic Number,OsmSharp.UI,SimpleColor,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\SimpleColor.cs,FromArgb,The following statement contains a magic number: (red > 255) || (red < 0)
Magic Number,OsmSharp.UI,SimpleColor,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\SimpleColor.cs,FromArgb,The following statement contains a magic number: (green > 255) || (green < 0)
Magic Number,OsmSharp.UI,SimpleColor,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\SimpleColor.cs,FromArgb,The following statement contains a magic number: (blue > 255) || (blue < 0)
Magic Number,OsmSharp.UI,SimpleColor,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\SimpleColor.cs,FromArgb,The following statement contains a magic number: return new SimpleColor()                        {                            Value = (int) ((uint) alpha << 24) + (red << 16) + (green << 8) + blue                        };
Magic Number,OsmSharp.UI,SimpleColor,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\SimpleColor.cs,FromArgb,The following statement contains a magic number: return new SimpleColor()                        {                            Value = (int) ((uint) alpha << 24) + (red << 16) + (green << 8) + blue                        };
Magic Number,OsmSharp.UI,SimpleColor,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\SimpleColor.cs,FromArgb,The following statement contains a magic number: return new SimpleColor()                        {                            Value = (int) ((uint) alpha << 24) + (red << 16) + (green << 8) + blue                        };
Magic Number,OsmSharp.UI,SimpleColor,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\SimpleColor.cs,FromHex,The following statement contains a magic number: hex.Length < 7
Magic Number,OsmSharp.UI,SimpleColor,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\SimpleColor.cs,FromHex,The following statement contains a magic number: hex.Length == 7
Magic Number,OsmSharp.UI.Map.Layers,LayerGpx,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Layers\LayerGpx.cs,LayerGpx,The following statement contains a magic number: _scene = new Scene2D(projection' 16);
Magic Number,OsmSharp.UI.Map.Layers,LayerGpx,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Layers\LayerGpx.cs,AddGpx,The following statement contains a magic number: var transparantBlue = SimpleColor.FromArgb(128'                                                       blue.R' blue.G' blue.B);
Magic Number,OsmSharp.UI.Map.Layers,LayerGpx,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Layers\LayerGpx.cs,AddGpx,The following statement contains a magic number: _scene.AddStylePoint(pointId' 0' float.MinValue' float.MaxValue' transparantBlue.Value' 8);
Magic Number,OsmSharp.UI.Map.Layers,LayerOsm,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Layers\LayerOsm.cs,LayerOsm,The following statement contains a magic number: zoomFactors.Add(16);
Magic Number,OsmSharp.UI.Map.Layers,LayerOsm,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Layers\LayerOsm.cs,LayerOsm,The following statement contains a magic number: zoomFactors.Add(14);
Magic Number,OsmSharp.UI.Map.Layers,LayerOsm,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Layers\LayerOsm.cs,LayerOsm,The following statement contains a magic number: zoomFactors.Add(12);
Magic Number,OsmSharp.UI.Map.Layers,LayerOsm,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Layers\LayerOsm.cs,LayerOsm,The following statement contains a magic number: zoomFactors.Add(10);
Magic Number,OsmSharp.UI.Map.Layers,LayerPrimitives,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Layers\LayerPrimitives.cs,LayerPrimitives,The following statement contains a magic number: _scene = new Scene2D(projection' 16);
Magic Number,OsmSharp.UI.Map.Layers,LayerTile,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Layers\LayerTile.cs,LoadTile,The following statement contains a magic number: request.BeginGetResponse(new AsyncCallback((iar) =>                     { 						var response = (HttpWebResponse)((HttpWebRequest)iar.AsyncState).EndGetResponse(iar);                         try                         { 							this.Response(response' tile);  							_loading.Remove(tile);                         }                         catch (WebException ex)                         { // catch webexceptions. 							 							OsmSharp.Logging.Log.TraceEvent("LayerTile"' Logging.TraceEventType.Information'  									ex.Message);                              if (ex.Response is HttpWebResponse &&                                 ((ex.Response as HttpWebResponse).StatusCode == HttpStatusCode.NotFound ||                                 (ex.Response as HttpWebResponse).StatusCode == HttpStatusCode.Forbidden))                             { // do not retry loading tile.                                 return;                             }                             else                             { // retry loading tile here.                                 _loading.Remove(tile);                                  lock (_attempts)                                 {                                     int count;                                     if (!_attempts.TryGetValue(tile' out count))                                     { // first attempt.                                         count = 1;                                         _attempts.Add(tile' count);                                     }                                     else                                     { // increase attempt count.                                         _attempts[tile] = count++;                                     }                                     if (count < 3)                                     { // not yet reached maximum.                                          lock (_stack)                                         {                                             _stack.Push(tile);                                             _timer.Change(0' 150);                                         }                                     }                                 }                             }                         }                         catch (Exception ex)                         { // oops' exceptions that are not webexceptions!?                             OsmSharp.Logging.Log.TraceEvent("LayerTile"' Logging.TraceEventType.Error' ex.Message);                         } 						finally  						{ 							response.Close(); 						}                     })' request);
Magic Number,OsmSharp.UI.Map.Layers,LayerTile,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Layers\LayerTile.cs,LoadTile,The following statement contains a magic number: request.BeginGetResponse(new AsyncCallback((iar) =>                     { 						var response = (HttpWebResponse)((HttpWebRequest)iar.AsyncState).EndGetResponse(iar);                         try                         { 							this.Response(response' tile);  							_loading.Remove(tile);                         }                         catch (WebException ex)                         { // catch webexceptions. 							 							OsmSharp.Logging.Log.TraceEvent("LayerTile"' Logging.TraceEventType.Information'  									ex.Message);                              if (ex.Response is HttpWebResponse &&                                 ((ex.Response as HttpWebResponse).StatusCode == HttpStatusCode.NotFound ||                                 (ex.Response as HttpWebResponse).StatusCode == HttpStatusCode.Forbidden))                             { // do not retry loading tile.                                 return;                             }                             else                             { // retry loading tile here.                                 _loading.Remove(tile);                                  lock (_attempts)                                 {                                     int count;                                     if (!_attempts.TryGetValue(tile' out count))                                     { // first attempt.                                         count = 1;                                         _attempts.Add(tile' count);                                     }                                     else                                     { // increase attempt count.                                         _attempts[tile] = count++;                                     }                                     if (count < 3)                                     { // not yet reached maximum.                                          lock (_stack)                                         {                                             _stack.Push(tile);                                             _timer.Change(0' 150);                                         }                                     }                                 }                             }                         }                         catch (Exception ex)                         { // oops' exceptions that are not webexceptions!?                             OsmSharp.Logging.Log.TraceEvent("LayerTile"' Logging.TraceEventType.Error' ex.Message);                         } 						finally  						{ 							response.Close(); 						}                     })' request);
Magic Number,OsmSharp.UI.Map.Layers,LayerTile,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Layers\LayerTile.cs,ViewChanged,The following statement contains a magic number: _timer.Change(0' 250);
Magic Number,OsmSharp.UI.Map,Map,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Map.cs,EnsureViewWithinBoundingBox,The following statement contains a magic number: fromViewPort.Apply(mapCenterPixelsX - (view.Width) / 2.0' mapCenterPixelsY - (view.Height) / 2.0' out leftScene' out topScene);
Magic Number,OsmSharp.UI.Map,Map,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Map.cs,EnsureViewWithinBoundingBox,The following statement contains a magic number: fromViewPort.Apply(mapCenterPixelsX - (view.Width) / 2.0' mapCenterPixelsY - (view.Height) / 2.0' out leftScene' out topScene);
Magic Number,OsmSharp.UI.Map,Map,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Map.cs,EnsureViewWithinBoundingBox,The following statement contains a magic number: fromViewPort.Apply(mapCenterPixelsX + (view.Width) / 2.0' mapCenterPixelsY + (view.Height) / 2.0' out rightScene' out bottomScene);
Magic Number,OsmSharp.UI.Map,Map,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Map.cs,EnsureViewWithinBoundingBox,The following statement contains a magic number: fromViewPort.Apply(mapCenterPixelsX + (view.Width) / 2.0' mapCenterPixelsY + (view.Height) / 2.0' out rightScene' out bottomScene);
Magic Number,OsmSharp.UI.Map,Map,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Map.cs,EnsureViewWithinBoundingBox,The following statement contains a magic number: return new GeoCoordinate(viewSouth + (viewNorth - viewSouth) / 2.0f' viewWest + (viewEast - viewWest) / 2.0f);
Magic Number,OsmSharp.UI.Map,Map,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Map.cs,EnsureViewWithinBoundingBox,The following statement contains a magic number: return new GeoCoordinate(viewSouth + (viewNorth - viewSouth) / 2.0f' viewWest + (viewEast - viewWest) / 2.0f);
Magic Number,OsmSharp.UI.Map.Styles.MapCSS,MapCSSInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\MapCSSInterpreter.cs,Translate,The following statement contains a magic number: scene.AddStylePoint(pointId' this.CalculateSceneLayer(OffsetPoint' 0)' float.MinValue' float.MaxValue'                         SimpleColor.FromKnownColor(KnownColor.Black).Value' 2);
Magic Number,OsmSharp.UI.Map.Styles.MapCSS,MapCSSInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\MapCSSInterpreter.cs,TranslateNode,The following statement contains a magic number: fontSize = 10;
Magic Number,OsmSharp.UI.Map.Styles.MapCSS,MapCSSInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\MapCSSInterpreter.cs,TranslateWay,The following statement contains a magic number: double[][] simplified = SimplifyCurve.Simplify(new double[][] {x' y}' 0.0001);
Magic Number,OsmSharp.UI.Map.Styles.MapCSS,MapCSSInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\MapCSSInterpreter.cs,TranslateWay,The following statement contains a magic number: x.Length > 2
Magic Number,OsmSharp.UI.Map.Styles.MapCSS,MapCSSInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\MapCSSInterpreter.cs,TranslateWay,The following statement contains a magic number: scene.AddStyleLine(pointsId.Value' this.CalculateSceneLayer(OffsetCasing' zIndex)'                                         minZoom' maxZoom' casingColor' width + (casingWidth * 2)' lineJoin' dashes);
Magic Number,OsmSharp.UI.Map.Styles.MapCSS,MapCSSInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\MapCSSInterpreter.cs,TranslateWay,The following statement contains a magic number: fontSize = 10;
Magic Number,OsmSharp.UI.Map.Styles.MapCSS,MapCSSInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\MapCSSInterpreter.cs,TranslateLineairRing,The following statement contains a magic number: double[][] simplified = SimplifyCurve.Simplify(new double[][] { x' y }' 0.0001);
Magic Number,OsmSharp.UI.Map.Styles.MapCSS,MapCSSInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\MapCSSInterpreter.cs,TranslateLineairRing,The following statement contains a magic number: x.Length > 2
Magic Number,OsmSharp.UI.Map.Styles.MapCSS,MapCSSInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\MapCSSInterpreter.cs,TranslateLineairRing,The following statement contains a magic number: fillColor = SimpleColor.FromArgb((int)(255 * fillOpacity)'                                  simpleFillColor.R' simpleFillColor.G' simpleFillColor.B).Value;
Magic Number,OsmSharp.UI.Map.Styles.MapCSS,MapCSSInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\MapCSSInterpreter.cs,CalculateSceneLayer,The following statement contains a magic number: return (uint)(majorZIndex * 1000000 + zIndex * 1000);
Magic Number,OsmSharp.UI.Map.Styles.MapCSS,MapCSSInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\MapCSSInterpreter.cs,CalculateSceneLayer,The following statement contains a magic number: return (uint)(majorZIndex * 1000000 + zIndex * 1000);
Magic Number,OsmSharp.UI.Map.Styles.MapCSS,MapCSSInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\MapCSSInterpreter.cs,BuildRules,The following statement contains a magic number: int maxZoom = 25;
Magic Number,OsmSharp.UI.Map.Styles.MapCSS.v0_2,MapCSSDomainParser,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\v0_2\MapCSSDomainParser.cs,Parse,The following statement contains a magic number: child.ChildCount == 2 &&                             child.Children[0].Text == "SIMPLE_SELECTOR" &&                             child.Children[0].ChildCount == 1 &&                             child.Children[0] is CommonTree &&                             (child.Children[0] as CommonTree).Children[0].Text == "canvas"
Magic Number,OsmSharp.UI.Map.Styles.MapCSS.v0_2,MapCSSDomainParser,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\v0_2\MapCSSDomainParser.cs,ParseCanvasRule,The following statement contains a magic number: ruleTree.ChildCount >= 2 &&                 ruleTree.Children[1] != null
Magic Number,OsmSharp.UI.Map.Styles.MapCSS.v0_2,MapCSSDomainParser,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\v0_2\MapCSSDomainParser.cs,ParseMetaRule,The following statement contains a magic number: ruleTree.ChildCount >= 2 &&                 ruleTree.Children[1] != null
Magic Number,OsmSharp.UI.Map.Styles.MapCSS.v0_2,MapCSSDomainParser,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\v0_2\MapCSSDomainParser.cs,ParseRule,The following statement contains a magic number: zooms.Count == 2
Magic Number,OsmSharp.UI.Map.Styles.MapCSS.v0_2,MapCSSDomainParser,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\v0_2\MapCSSDomainParser.cs,ParseRule,The following statement contains a magic number: attributeSelector.ChildCount < 2
Magic Number,OsmSharp.UI.Map.Styles.MapCSS.v0_2,MapCSSDomainParser,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\v0_2\MapCSSDomainParser.cs,ParseURL,The following statement contains a magic number: urlBuilder.Append(                         url.Substring(1' url.Length - 2));
Magic Number,OsmSharp.UI.Map.Styles.MapCSS.v0_2,MapCSSDomainParser,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\v0_2\MapCSSDomainParser.cs,ParseColor,The following statement contains a magic number: string bString = colorTree.GetChild(2).Text;
Magic Number,OsmSharp.UI.Map.Styles.MapCSS.v0_2,MapCSSRuleProperties,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\v0_2\MapCSSRuleProperties.cs,MapCSSRuleProperties,The following statement contains a magic number: this.MaxZoom = 20;
Magic Number,OsmSharp.UI.Map.Styles.MapCSS.v0_2,MapCSSRulePropertiesCollection,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\v0_2\MapCSSRulePropertiesCollection.cs,GetRanges,The following statement contains a magic number: int minZoom = 0' maxZoom = 20;
Magic Number,OsmSharp.UI.Map.Styles.MapCSS.v0_2,MapCSSRulePropertiesCollection,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\v0_2\MapCSSRulePropertiesCollection.cs,GetRanges,The following statement contains a magic number: currentRule = new MapCSSRuleProperties(minZoom' 20);
Magic Number,OsmSharp.UI.Map.Styles.MapCSS.v0_2,MapCSSRulePropertiesCollection,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\v0_2\MapCSSRulePropertiesCollection.cs,GetRanges,The following statement contains a magic number: zoomLevel < 20
Magic Number,OsmSharp.UI.Map.Styles.MapCSS.v0_2,MapCSSTypesExtensions,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\v0_2\MapCSSTypes.cs,IsOfType,The following statement contains a magic number: switch (types)             {                 case MapCSSTypes.Node:                     return osmGeo.Type == CompleteOsmType.Node;                 case MapCSSTypes.Way:                     return osmGeo.Type == CompleteOsmType.Way;                 case MapCSSTypes.Relation:                     return osmGeo.Type == CompleteOsmType.Relation;                 case MapCSSTypes.Line:                     if (osmGeo.Type == CompleteOsmType.Way)                     { // the type is way way. now check for a line.                         var way = (osmGeo as CompleteWay);                         if (way != null &&                             way.Nodes[0] == way.Nodes[way.Nodes.Count - 1])                         { // first node is the same as the last one.                             if (way.Tags != null &&                                 way.Tags.TryGetValue("area"' out area) &&                                 area == "yes")                             { // oeps' an area.                                 return false;                             }                             return true;                         }                         else                         { // first node is different from the last one.                             return true; // even if there is an area=yes tag this cannot be an area.                         }                     } 					break;                 case MapCSSTypes.Area:                     if (osmGeo.Type == CompleteOsmType.Way)                     { // the type is way way. now check for a line.                         var way = (osmGeo as CompleteWay);                         if (way != null &&                             way.Nodes != null &&                             (way.Nodes.Count > 2 && (way.Nodes[0] == way.Nodes[way.Nodes.Count - 1])))                         { // first node is the same as the last one.                             return true;                         }                     }                     return false;                 default:                     throw new ArgumentOutOfRangeException("types");             }
Magic Number,OsmSharp.UI.Renderer,Renderer2D<TTarget>,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Renderer2D.cs,RenderPrimitives,The following statement contains a magic number: switch (primitive.Primitive2DType)                     {                         case Primitive2DType.Line2D:                             Line2D line = (Line2D)primitive;                              x = line.X;                             y = line.Y;                             if (x.Length > 4 && line.MaxZoom > zoomFactor * 2 && line.MaxZoom < 512)                             { // try and simplify.                                 double[][] simplified = OsmSharp.Math.Algorithms.SimplifyCurve.Simplify(new double[][] { x' y }'                                     epsilon);                                 if (simplified[0].Length < line.X.Length)                                 {                                     simplifiedLines++;                                     x = simplified[0];                                     y = simplified[1];                                 }                                 double distance = epsilon * 2;                                 if (simplified[0].Length == 2)                                 { // check if the simplified version is smaller than epsilon.                                     distance = System.Math.Sqrt(                                         System.Math.Pow((simplified[0][0] - simplified[0][1])' 2) +                                         System.Math.Pow((simplified[1][0] - simplified[1][1])' 2));                                 }                                 if (distance < epsilon)                                 {                                     droppedLines++;                                     continue;                                 }                             }                             this.DrawLine(target' x' y' line.Color'                                 this.FromPixels(target' view' line.Width)' line.LineJoin' line.Dashes);                             break;                         case Primitive2DType.Polygon2D:                             Polygon2D polygon = (Polygon2D)primitive;                              x = polygon.X;                             y = polygon.Y;                             //if (x.Length > 4 && polygon.MaxZoom > zoomFactor * 2 && polygon.MaxZoom < 512)                             //{ // try and simplify.                             //    double[][] simplified = OsmSharp.Math.Algorithms.SimplifyCurve.Simplify(new double[][] { x' y }'                             //        epsilon);                             //    if (simplified[0].Length < polygon.X.Length)                             //    {                             //        simplifiedLines++;                             //        x = simplified[0];                             //        y = simplified[1];                             //    }                             //    double distance = epsilon * 2;                             //    if (simplified[0].Length == 2)                             //    { // check if the simplified version is smaller than epsilon.                             //        distance = System.Math.Sqrt(                             //            System.Math.Pow((simplified[0][0] - simplified[0][1])' 2) +                             //            System.Math.Pow((simplified[1][0] - simplified[1][1])' 2));                             //    }                             //    //if (distance < epsilon)                             //    //{                             //    //    droppedLines++;                             //    //    continue;                             //    //}                             //}                             this.DrawPolygon(target' x' y' polygon.Color'                                 this.FromPixels(target' view' polygon.Width)' polygon.Fill);                             break;                         case Primitive2DType.LineText2D:                             LineText2D lineText = (LineText2D)primitive;                             this.DrawLineText(target' lineText.X' lineText.Y' lineText.Text' lineText.Color'                                 this.FromPixels(target' view' lineText.Size)' lineText.HaloColor' lineText.HaloRadius' lineText.Font);                             break;                         case Primitive2DType.Point2D:                             Point2D point = (Point2D)primitive;                             this.DrawPoint(target' point.X' point.Y' point.Color'                                 this.FromPixels(target' view' point.Size));                             break;                         case Primitive2DType.Icon2D:                             Icon2D icon = (Icon2D)primitive;                             this.DrawIcon(target' icon.X' icon.Y' icon.Image);                             break;                         case Primitive2DType.ImageTilted2D:                             ImageTilted2D imageTilted = (ImageTilted2D)primitive;                             this.DrawImage(target' imageTilted.Bounds' imageTilted.NativeImage);                             break;                         case Primitive2DType.Image2D:                             Image2D image = (Image2D)primitive;                             this.DrawImage(target' image.Left' image.Top' image.Right' image.Bottom' image.NativeImage);                             break;                         case Primitive2DType.Text2D:                             Text2D text = (Text2D)primitive;                             this.DrawText(target' text.X' text.Y' text.Text' text.Color'                                 this.FromPixels(target' view' text.Size)' text.HaloColor' text.HaloRadius' text.Font);                             break;                     }
Magic Number,OsmSharp.UI.Renderer,Renderer2D<TTarget>,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Renderer2D.cs,RenderPrimitives,The following statement contains a magic number: switch (primitive.Primitive2DType)                     {                         case Primitive2DType.Line2D:                             Line2D line = (Line2D)primitive;                              x = line.X;                             y = line.Y;                             if (x.Length > 4 && line.MaxZoom > zoomFactor * 2 && line.MaxZoom < 512)                             { // try and simplify.                                 double[][] simplified = OsmSharp.Math.Algorithms.SimplifyCurve.Simplify(new double[][] { x' y }'                                     epsilon);                                 if (simplified[0].Length < line.X.Length)                                 {                                     simplifiedLines++;                                     x = simplified[0];                                     y = simplified[1];                                 }                                 double distance = epsilon * 2;                                 if (simplified[0].Length == 2)                                 { // check if the simplified version is smaller than epsilon.                                     distance = System.Math.Sqrt(                                         System.Math.Pow((simplified[0][0] - simplified[0][1])' 2) +                                         System.Math.Pow((simplified[1][0] - simplified[1][1])' 2));                                 }                                 if (distance < epsilon)                                 {                                     droppedLines++;                                     continue;                                 }                             }                             this.DrawLine(target' x' y' line.Color'                                 this.FromPixels(target' view' line.Width)' line.LineJoin' line.Dashes);                             break;                         case Primitive2DType.Polygon2D:                             Polygon2D polygon = (Polygon2D)primitive;                              x = polygon.X;                             y = polygon.Y;                             //if (x.Length > 4 && polygon.MaxZoom > zoomFactor * 2 && polygon.MaxZoom < 512)                             //{ // try and simplify.                             //    double[][] simplified = OsmSharp.Math.Algorithms.SimplifyCurve.Simplify(new double[][] { x' y }'                             //        epsilon);                             //    if (simplified[0].Length < polygon.X.Length)                             //    {                             //        simplifiedLines++;                             //        x = simplified[0];                             //        y = simplified[1];                             //    }                             //    double distance = epsilon * 2;                             //    if (simplified[0].Length == 2)                             //    { // check if the simplified version is smaller than epsilon.                             //        distance = System.Math.Sqrt(                             //            System.Math.Pow((simplified[0][0] - simplified[0][1])' 2) +                             //            System.Math.Pow((simplified[1][0] - simplified[1][1])' 2));                             //    }                             //    //if (distance < epsilon)                             //    //{                             //    //    droppedLines++;                             //    //    continue;                             //    //}                             //}                             this.DrawPolygon(target' x' y' polygon.Color'                                 this.FromPixels(target' view' polygon.Width)' polygon.Fill);                             break;                         case Primitive2DType.LineText2D:                             LineText2D lineText = (LineText2D)primitive;                             this.DrawLineText(target' lineText.X' lineText.Y' lineText.Text' lineText.Color'                                 this.FromPixels(target' view' lineText.Size)' lineText.HaloColor' lineText.HaloRadius' lineText.Font);                             break;                         case Primitive2DType.Point2D:                             Point2D point = (Point2D)primitive;                             this.DrawPoint(target' point.X' point.Y' point.Color'                                 this.FromPixels(target' view' point.Size));                             break;                         case Primitive2DType.Icon2D:                             Icon2D icon = (Icon2D)primitive;                             this.DrawIcon(target' icon.X' icon.Y' icon.Image);                             break;                         case Primitive2DType.ImageTilted2D:                             ImageTilted2D imageTilted = (ImageTilted2D)primitive;                             this.DrawImage(target' imageTilted.Bounds' imageTilted.NativeImage);                             break;                         case Primitive2DType.Image2D:                             Image2D image = (Image2D)primitive;                             this.DrawImage(target' image.Left' image.Top' image.Right' image.Bottom' image.NativeImage);                             break;                         case Primitive2DType.Text2D:                             Text2D text = (Text2D)primitive;                             this.DrawText(target' text.X' text.Y' text.Text' text.Color'                                 this.FromPixels(target' view' text.Size)' text.HaloColor' text.HaloRadius' text.Font);                             break;                     }
Magic Number,OsmSharp.UI.Renderer,Renderer2D<TTarget>,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Renderer2D.cs,RenderPrimitives,The following statement contains a magic number: switch (primitive.Primitive2DType)                     {                         case Primitive2DType.Line2D:                             Line2D line = (Line2D)primitive;                              x = line.X;                             y = line.Y;                             if (x.Length > 4 && line.MaxZoom > zoomFactor * 2 && line.MaxZoom < 512)                             { // try and simplify.                                 double[][] simplified = OsmSharp.Math.Algorithms.SimplifyCurve.Simplify(new double[][] { x' y }'                                     epsilon);                                 if (simplified[0].Length < line.X.Length)                                 {                                     simplifiedLines++;                                     x = simplified[0];                                     y = simplified[1];                                 }                                 double distance = epsilon * 2;                                 if (simplified[0].Length == 2)                                 { // check if the simplified version is smaller than epsilon.                                     distance = System.Math.Sqrt(                                         System.Math.Pow((simplified[0][0] - simplified[0][1])' 2) +                                         System.Math.Pow((simplified[1][0] - simplified[1][1])' 2));                                 }                                 if (distance < epsilon)                                 {                                     droppedLines++;                                     continue;                                 }                             }                             this.DrawLine(target' x' y' line.Color'                                 this.FromPixels(target' view' line.Width)' line.LineJoin' line.Dashes);                             break;                         case Primitive2DType.Polygon2D:                             Polygon2D polygon = (Polygon2D)primitive;                              x = polygon.X;                             y = polygon.Y;                             //if (x.Length > 4 && polygon.MaxZoom > zoomFactor * 2 && polygon.MaxZoom < 512)                             //{ // try and simplify.                             //    double[][] simplified = OsmSharp.Math.Algorithms.SimplifyCurve.Simplify(new double[][] { x' y }'                             //        epsilon);                             //    if (simplified[0].Length < polygon.X.Length)                             //    {                             //        simplifiedLines++;                             //        x = simplified[0];                             //        y = simplified[1];                             //    }                             //    double distance = epsilon * 2;                             //    if (simplified[0].Length == 2)                             //    { // check if the simplified version is smaller than epsilon.                             //        distance = System.Math.Sqrt(                             //            System.Math.Pow((simplified[0][0] - simplified[0][1])' 2) +                             //            System.Math.Pow((simplified[1][0] - simplified[1][1])' 2));                             //    }                             //    //if (distance < epsilon)                             //    //{                             //    //    droppedLines++;                             //    //    continue;                             //    //}                             //}                             this.DrawPolygon(target' x' y' polygon.Color'                                 this.FromPixels(target' view' polygon.Width)' polygon.Fill);                             break;                         case Primitive2DType.LineText2D:                             LineText2D lineText = (LineText2D)primitive;                             this.DrawLineText(target' lineText.X' lineText.Y' lineText.Text' lineText.Color'                                 this.FromPixels(target' view' lineText.Size)' lineText.HaloColor' lineText.HaloRadius' lineText.Font);                             break;                         case Primitive2DType.Point2D:                             Point2D point = (Point2D)primitive;                             this.DrawPoint(target' point.X' point.Y' point.Color'                                 this.FromPixels(target' view' point.Size));                             break;                         case Primitive2DType.Icon2D:                             Icon2D icon = (Icon2D)primitive;                             this.DrawIcon(target' icon.X' icon.Y' icon.Image);                             break;                         case Primitive2DType.ImageTilted2D:                             ImageTilted2D imageTilted = (ImageTilted2D)primitive;                             this.DrawImage(target' imageTilted.Bounds' imageTilted.NativeImage);                             break;                         case Primitive2DType.Image2D:                             Image2D image = (Image2D)primitive;                             this.DrawImage(target' image.Left' image.Top' image.Right' image.Bottom' image.NativeImage);                             break;                         case Primitive2DType.Text2D:                             Text2D text = (Text2D)primitive;                             this.DrawText(target' text.X' text.Y' text.Text' text.Color'                                 this.FromPixels(target' view' text.Size)' text.HaloColor' text.HaloRadius' text.Font);                             break;                     }
Magic Number,OsmSharp.UI.Renderer,Renderer2D<TTarget>,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Renderer2D.cs,RenderPrimitives,The following statement contains a magic number: switch (primitive.Primitive2DType)                     {                         case Primitive2DType.Line2D:                             Line2D line = (Line2D)primitive;                              x = line.X;                             y = line.Y;                             if (x.Length > 4 && line.MaxZoom > zoomFactor * 2 && line.MaxZoom < 512)                             { // try and simplify.                                 double[][] simplified = OsmSharp.Math.Algorithms.SimplifyCurve.Simplify(new double[][] { x' y }'                                     epsilon);                                 if (simplified[0].Length < line.X.Length)                                 {                                     simplifiedLines++;                                     x = simplified[0];                                     y = simplified[1];                                 }                                 double distance = epsilon * 2;                                 if (simplified[0].Length == 2)                                 { // check if the simplified version is smaller than epsilon.                                     distance = System.Math.Sqrt(                                         System.Math.Pow((simplified[0][0] - simplified[0][1])' 2) +                                         System.Math.Pow((simplified[1][0] - simplified[1][1])' 2));                                 }                                 if (distance < epsilon)                                 {                                     droppedLines++;                                     continue;                                 }                             }                             this.DrawLine(target' x' y' line.Color'                                 this.FromPixels(target' view' line.Width)' line.LineJoin' line.Dashes);                             break;                         case Primitive2DType.Polygon2D:                             Polygon2D polygon = (Polygon2D)primitive;                              x = polygon.X;                             y = polygon.Y;                             //if (x.Length > 4 && polygon.MaxZoom > zoomFactor * 2 && polygon.MaxZoom < 512)                             //{ // try and simplify.                             //    double[][] simplified = OsmSharp.Math.Algorithms.SimplifyCurve.Simplify(new double[][] { x' y }'                             //        epsilon);                             //    if (simplified[0].Length < polygon.X.Length)                             //    {                             //        simplifiedLines++;                             //        x = simplified[0];                             //        y = simplified[1];                             //    }                             //    double distance = epsilon * 2;                             //    if (simplified[0].Length == 2)                             //    { // check if the simplified version is smaller than epsilon.                             //        distance = System.Math.Sqrt(                             //            System.Math.Pow((simplified[0][0] - simplified[0][1])' 2) +                             //            System.Math.Pow((simplified[1][0] - simplified[1][1])' 2));                             //    }                             //    //if (distance < epsilon)                             //    //{                             //    //    droppedLines++;                             //    //    continue;                             //    //}                             //}                             this.DrawPolygon(target' x' y' polygon.Color'                                 this.FromPixels(target' view' polygon.Width)' polygon.Fill);                             break;                         case Primitive2DType.LineText2D:                             LineText2D lineText = (LineText2D)primitive;                             this.DrawLineText(target' lineText.X' lineText.Y' lineText.Text' lineText.Color'                                 this.FromPixels(target' view' lineText.Size)' lineText.HaloColor' lineText.HaloRadius' lineText.Font);                             break;                         case Primitive2DType.Point2D:                             Point2D point = (Point2D)primitive;                             this.DrawPoint(target' point.X' point.Y' point.Color'                                 this.FromPixels(target' view' point.Size));                             break;                         case Primitive2DType.Icon2D:                             Icon2D icon = (Icon2D)primitive;                             this.DrawIcon(target' icon.X' icon.Y' icon.Image);                             break;                         case Primitive2DType.ImageTilted2D:                             ImageTilted2D imageTilted = (ImageTilted2D)primitive;                             this.DrawImage(target' imageTilted.Bounds' imageTilted.NativeImage);                             break;                         case Primitive2DType.Image2D:                             Image2D image = (Image2D)primitive;                             this.DrawImage(target' image.Left' image.Top' image.Right' image.Bottom' image.NativeImage);                             break;                         case Primitive2DType.Text2D:                             Text2D text = (Text2D)primitive;                             this.DrawText(target' text.X' text.Y' text.Text' text.Color'                                 this.FromPixels(target' view' text.Size)' text.HaloColor' text.HaloRadius' text.Font);                             break;                     }
Magic Number,OsmSharp.UI.Renderer,Renderer2D<TTarget>,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Renderer2D.cs,RenderPrimitives,The following statement contains a magic number: switch (primitive.Primitive2DType)                     {                         case Primitive2DType.Line2D:                             Line2D line = (Line2D)primitive;                              x = line.X;                             y = line.Y;                             if (x.Length > 4 && line.MaxZoom > zoomFactor * 2 && line.MaxZoom < 512)                             { // try and simplify.                                 double[][] simplified = OsmSharp.Math.Algorithms.SimplifyCurve.Simplify(new double[][] { x' y }'                                     epsilon);                                 if (simplified[0].Length < line.X.Length)                                 {                                     simplifiedLines++;                                     x = simplified[0];                                     y = simplified[1];                                 }                                 double distance = epsilon * 2;                                 if (simplified[0].Length == 2)                                 { // check if the simplified version is smaller than epsilon.                                     distance = System.Math.Sqrt(                                         System.Math.Pow((simplified[0][0] - simplified[0][1])' 2) +                                         System.Math.Pow((simplified[1][0] - simplified[1][1])' 2));                                 }                                 if (distance < epsilon)                                 {                                     droppedLines++;                                     continue;                                 }                             }                             this.DrawLine(target' x' y' line.Color'                                 this.FromPixels(target' view' line.Width)' line.LineJoin' line.Dashes);                             break;                         case Primitive2DType.Polygon2D:                             Polygon2D polygon = (Polygon2D)primitive;                              x = polygon.X;                             y = polygon.Y;                             //if (x.Length > 4 && polygon.MaxZoom > zoomFactor * 2 && polygon.MaxZoom < 512)                             //{ // try and simplify.                             //    double[][] simplified = OsmSharp.Math.Algorithms.SimplifyCurve.Simplify(new double[][] { x' y }'                             //        epsilon);                             //    if (simplified[0].Length < polygon.X.Length)                             //    {                             //        simplifiedLines++;                             //        x = simplified[0];                             //        y = simplified[1];                             //    }                             //    double distance = epsilon * 2;                             //    if (simplified[0].Length == 2)                             //    { // check if the simplified version is smaller than epsilon.                             //        distance = System.Math.Sqrt(                             //            System.Math.Pow((simplified[0][0] - simplified[0][1])' 2) +                             //            System.Math.Pow((simplified[1][0] - simplified[1][1])' 2));                             //    }                             //    //if (distance < epsilon)                             //    //{                             //    //    droppedLines++;                             //    //    continue;                             //    //}                             //}                             this.DrawPolygon(target' x' y' polygon.Color'                                 this.FromPixels(target' view' polygon.Width)' polygon.Fill);                             break;                         case Primitive2DType.LineText2D:                             LineText2D lineText = (LineText2D)primitive;                             this.DrawLineText(target' lineText.X' lineText.Y' lineText.Text' lineText.Color'                                 this.FromPixels(target' view' lineText.Size)' lineText.HaloColor' lineText.HaloRadius' lineText.Font);                             break;                         case Primitive2DType.Point2D:                             Point2D point = (Point2D)primitive;                             this.DrawPoint(target' point.X' point.Y' point.Color'                                 this.FromPixels(target' view' point.Size));                             break;                         case Primitive2DType.Icon2D:                             Icon2D icon = (Icon2D)primitive;                             this.DrawIcon(target' icon.X' icon.Y' icon.Image);                             break;                         case Primitive2DType.ImageTilted2D:                             ImageTilted2D imageTilted = (ImageTilted2D)primitive;                             this.DrawImage(target' imageTilted.Bounds' imageTilted.NativeImage);                             break;                         case Primitive2DType.Image2D:                             Image2D image = (Image2D)primitive;                             this.DrawImage(target' image.Left' image.Top' image.Right' image.Bottom' image.NativeImage);                             break;                         case Primitive2DType.Text2D:                             Text2D text = (Text2D)primitive;                             this.DrawText(target' text.X' text.Y' text.Text' text.Color'                                 this.FromPixels(target' view' text.Size)' text.HaloColor' text.HaloRadius' text.Font);                             break;                     }
Magic Number,OsmSharp.UI.Renderer,Renderer2D<TTarget>,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Renderer2D.cs,RenderPrimitives,The following statement contains a magic number: switch (primitive.Primitive2DType)                     {                         case Primitive2DType.Line2D:                             Line2D line = (Line2D)primitive;                              x = line.X;                             y = line.Y;                             if (x.Length > 4 && line.MaxZoom > zoomFactor * 2 && line.MaxZoom < 512)                             { // try and simplify.                                 double[][] simplified = OsmSharp.Math.Algorithms.SimplifyCurve.Simplify(new double[][] { x' y }'                                     epsilon);                                 if (simplified[0].Length < line.X.Length)                                 {                                     simplifiedLines++;                                     x = simplified[0];                                     y = simplified[1];                                 }                                 double distance = epsilon * 2;                                 if (simplified[0].Length == 2)                                 { // check if the simplified version is smaller than epsilon.                                     distance = System.Math.Sqrt(                                         System.Math.Pow((simplified[0][0] - simplified[0][1])' 2) +                                         System.Math.Pow((simplified[1][0] - simplified[1][1])' 2));                                 }                                 if (distance < epsilon)                                 {                                     droppedLines++;                                     continue;                                 }                             }                             this.DrawLine(target' x' y' line.Color'                                 this.FromPixels(target' view' line.Width)' line.LineJoin' line.Dashes);                             break;                         case Primitive2DType.Polygon2D:                             Polygon2D polygon = (Polygon2D)primitive;                              x = polygon.X;                             y = polygon.Y;                             //if (x.Length > 4 && polygon.MaxZoom > zoomFactor * 2 && polygon.MaxZoom < 512)                             //{ // try and simplify.                             //    double[][] simplified = OsmSharp.Math.Algorithms.SimplifyCurve.Simplify(new double[][] { x' y }'                             //        epsilon);                             //    if (simplified[0].Length < polygon.X.Length)                             //    {                             //        simplifiedLines++;                             //        x = simplified[0];                             //        y = simplified[1];                             //    }                             //    double distance = epsilon * 2;                             //    if (simplified[0].Length == 2)                             //    { // check if the simplified version is smaller than epsilon.                             //        distance = System.Math.Sqrt(                             //            System.Math.Pow((simplified[0][0] - simplified[0][1])' 2) +                             //            System.Math.Pow((simplified[1][0] - simplified[1][1])' 2));                             //    }                             //    //if (distance < epsilon)                             //    //{                             //    //    droppedLines++;                             //    //    continue;                             //    //}                             //}                             this.DrawPolygon(target' x' y' polygon.Color'                                 this.FromPixels(target' view' polygon.Width)' polygon.Fill);                             break;                         case Primitive2DType.LineText2D:                             LineText2D lineText = (LineText2D)primitive;                             this.DrawLineText(target' lineText.X' lineText.Y' lineText.Text' lineText.Color'                                 this.FromPixels(target' view' lineText.Size)' lineText.HaloColor' lineText.HaloRadius' lineText.Font);                             break;                         case Primitive2DType.Point2D:                             Point2D point = (Point2D)primitive;                             this.DrawPoint(target' point.X' point.Y' point.Color'                                 this.FromPixels(target' view' point.Size));                             break;                         case Primitive2DType.Icon2D:                             Icon2D icon = (Icon2D)primitive;                             this.DrawIcon(target' icon.X' icon.Y' icon.Image);                             break;                         case Primitive2DType.ImageTilted2D:                             ImageTilted2D imageTilted = (ImageTilted2D)primitive;                             this.DrawImage(target' imageTilted.Bounds' imageTilted.NativeImage);                             break;                         case Primitive2DType.Image2D:                             Image2D image = (Image2D)primitive;                             this.DrawImage(target' image.Left' image.Top' image.Right' image.Bottom' image.NativeImage);                             break;                         case Primitive2DType.Text2D:                             Text2D text = (Text2D)primitive;                             this.DrawText(target' text.X' text.Y' text.Text' text.Color'                                 this.FromPixels(target' view' text.Size)' text.HaloColor' text.HaloRadius' text.Font);                             break;                     }
Magic Number,OsmSharp.UI.Renderer,Renderer2D<TTarget>,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Renderer2D.cs,RenderPrimitives,The following statement contains a magic number: switch (primitive.Primitive2DType)                     {                         case Primitive2DType.Line2D:                             Line2D line = (Line2D)primitive;                              x = line.X;                             y = line.Y;                             if (x.Length > 4 && line.MaxZoom > zoomFactor * 2 && line.MaxZoom < 512)                             { // try and simplify.                                 double[][] simplified = OsmSharp.Math.Algorithms.SimplifyCurve.Simplify(new double[][] { x' y }'                                     epsilon);                                 if (simplified[0].Length < line.X.Length)                                 {                                     simplifiedLines++;                                     x = simplified[0];                                     y = simplified[1];                                 }                                 double distance = epsilon * 2;                                 if (simplified[0].Length == 2)                                 { // check if the simplified version is smaller than epsilon.                                     distance = System.Math.Sqrt(                                         System.Math.Pow((simplified[0][0] - simplified[0][1])' 2) +                                         System.Math.Pow((simplified[1][0] - simplified[1][1])' 2));                                 }                                 if (distance < epsilon)                                 {                                     droppedLines++;                                     continue;                                 }                             }                             this.DrawLine(target' x' y' line.Color'                                 this.FromPixels(target' view' line.Width)' line.LineJoin' line.Dashes);                             break;                         case Primitive2DType.Polygon2D:                             Polygon2D polygon = (Polygon2D)primitive;                              x = polygon.X;                             y = polygon.Y;                             //if (x.Length > 4 && polygon.MaxZoom > zoomFactor * 2 && polygon.MaxZoom < 512)                             //{ // try and simplify.                             //    double[][] simplified = OsmSharp.Math.Algorithms.SimplifyCurve.Simplify(new double[][] { x' y }'                             //        epsilon);                             //    if (simplified[0].Length < polygon.X.Length)                             //    {                             //        simplifiedLines++;                             //        x = simplified[0];                             //        y = simplified[1];                             //    }                             //    double distance = epsilon * 2;                             //    if (simplified[0].Length == 2)                             //    { // check if the simplified version is smaller than epsilon.                             //        distance = System.Math.Sqrt(                             //            System.Math.Pow((simplified[0][0] - simplified[0][1])' 2) +                             //            System.Math.Pow((simplified[1][0] - simplified[1][1])' 2));                             //    }                             //    //if (distance < epsilon)                             //    //{                             //    //    droppedLines++;                             //    //    continue;                             //    //}                             //}                             this.DrawPolygon(target' x' y' polygon.Color'                                 this.FromPixels(target' view' polygon.Width)' polygon.Fill);                             break;                         case Primitive2DType.LineText2D:                             LineText2D lineText = (LineText2D)primitive;                             this.DrawLineText(target' lineText.X' lineText.Y' lineText.Text' lineText.Color'                                 this.FromPixels(target' view' lineText.Size)' lineText.HaloColor' lineText.HaloRadius' lineText.Font);                             break;                         case Primitive2DType.Point2D:                             Point2D point = (Point2D)primitive;                             this.DrawPoint(target' point.X' point.Y' point.Color'                                 this.FromPixels(target' view' point.Size));                             break;                         case Primitive2DType.Icon2D:                             Icon2D icon = (Icon2D)primitive;                             this.DrawIcon(target' icon.X' icon.Y' icon.Image);                             break;                         case Primitive2DType.ImageTilted2D:                             ImageTilted2D imageTilted = (ImageTilted2D)primitive;                             this.DrawImage(target' imageTilted.Bounds' imageTilted.NativeImage);                             break;                         case Primitive2DType.Image2D:                             Image2D image = (Image2D)primitive;                             this.DrawImage(target' image.Left' image.Top' image.Right' image.Bottom' image.NativeImage);                             break;                         case Primitive2DType.Text2D:                             Text2D text = (Text2D)primitive;                             this.DrawText(target' text.X' text.Y' text.Text' text.Color'                                 this.FromPixels(target' view' text.Size)' text.HaloColor' text.HaloRadius' text.Font);                             break;                     }
Magic Number,OsmSharp.UI.Renderer,View2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\View2D.cs,CreateFromBounds,The following statement contains a magic number: double centerX = (left + right) / 2.0;
Magic Number,OsmSharp.UI.Renderer,View2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\View2D.cs,CreateFromBounds,The following statement contains a magic number: double centerY = (top + bottom) / 2.0;
Magic Number,OsmSharp.UI.Renderer.Primitives,Polygon2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Primitives\Polygon2D.cs,IsEar,The following statement contains a magic number: return (this.Contains(                 new double[] {                      (this.X[previousIdx] + this.X[nextIdx]) / 2'                      (this.Y[previousIdx] + this.Y[nextIdx]) / 2 }));
Magic Number,OsmSharp.UI.Renderer.Primitives,Polygon2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Primitives\Polygon2D.cs,IsEar,The following statement contains a magic number: return (this.Contains(                 new double[] {                      (this.X[previousIdx] + this.X[nextIdx]) / 2'                      (this.Y[previousIdx] + this.Y[nextIdx]) / 2 }));
Magic Number,OsmSharp.UI.Renderer.Primitives,Polygon2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Primitives\Polygon2D.cs,IsEar,The following statement contains a magic number: return (Polygon2D.Contains(X' Y'                 new double[] {                      (X[previousIdx] + X[nextIdx]) / 2'                      (Y[previousIdx] + Y[nextIdx]) / 2 }));
Magic Number,OsmSharp.UI.Renderer.Primitives,Polygon2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Primitives\Polygon2D.cs,IsEar,The following statement contains a magic number: return (Polygon2D.Contains(X' Y'                 new double[] {                      (X[previousIdx] + X[nextIdx]) / 2'                      (Y[previousIdx] + Y[nextIdx]) / 2 }));
Magic Number,OsmSharp.UI.Renderer.Primitives,Polygon2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Primitives\Polygon2D.cs,Tessellate,The following statement contains a magic number: X.Count < 3
Magic Number,OsmSharp.UI.Renderer.Primitives,Polygon2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Primitives\Polygon2D.cs,Tessellate,The following statement contains a magic number: X.Count > 3
Magic Number,OsmSharp.UI.Renderer.Primitives,Polygon2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Primitives\Polygon2D.cs,Tessellate,The following statement contains a magic number: triangles.Add(new double[] { X[2]' Y[2] });
Magic Number,OsmSharp.UI.Renderer.Primitives,Polygon2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Primitives\Polygon2D.cs,Tessellate,The following statement contains a magic number: triangles.Add(new double[] { X[2]' Y[2] });
Magic Number,OsmSharp.UI.Renderer.Primitives,Polygon2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Primitives\Polygon2D.cs,Tessellate,The following statement contains a magic number: X.Count == 3
Magic Number,OsmSharp.UI.Renderer.Scene,Scene2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Scene2D.cs,CalculateSimplificationEpsilon,The following statement contains a magic number: GeoCoordinate coordinate = new GeoCoordinate(51' 4);
Magic Number,OsmSharp.UI.Renderer.Scene,Scene2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Scene2D.cs,CalculateSimplificationEpsilon,The following statement contains a magic number: GeoCoordinate coordinate = new GeoCoordinate(51' 4);
Magic Number,OsmSharp.UI.Renderer.Scene,Scene2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Scene2D.cs,CalculateSimplificationEpsilon,The following statement contains a magic number: xDiff = xDiff / 256.0;
Magic Number,OsmSharp.UI.Renderer.Scene,Scene2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Scene2D.cs,CalculateSimplificationEpsilon,The following statement contains a magic number: yDiff = yDiff / 256.0;
Magic Number,OsmSharp.UI.Renderer.Scene,Scene2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Scene2D.cs,AddPoints,The following statement contains a magic number: double distance = epsilon * 2;
Magic Number,OsmSharp.UI.Renderer.Scene,Scene2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Scene2D.cs,AddPoints,The following statement contains a magic number: simplified[0].Length == 2
Magic Number,OsmSharp.UI.Renderer.Scene,Scene2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Scene2D.cs,AddStyleLine,The following statement contains a magic number: double distance = epsilon * 2;
Magic Number,OsmSharp.UI.Renderer.Scene,Scene2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Scene2D.cs,AddStyleLine,The following statement contains a magic number: simplified[0].Length == 2
Magic Number,OsmSharp.UI.Renderer.Scene,Scene2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Scene2D.cs,AddStyleLineText,The following statement contains a magic number: double distance = epsilon * 2;
Magic Number,OsmSharp.UI.Renderer.Scene,Scene2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Scene2D.cs,AddStyleLineText,The following statement contains a magic number: simplified[0].Length == 2
Magic Number,OsmSharp.UI.Renderer.Scene,Scene2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Scene2D.cs,AddStylePolygon,The following statement contains a magic number: double distance = epsilon * 2;
Magic Number,OsmSharp.UI.Renderer.Scene,Scene2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Scene2D.cs,AddStylePolygon,The following statement contains a magic number: simplified[0].Length == 2
Magic Number,OsmSharp.UI.Renderer.Scene.Simplification,Scene2DObjectMerger,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Simplification\Scene2DObjectMerger.cs,Scene2DObjectMerger,The following statement contains a magic number: epsilon = 0.00001f;
Magic Number,OsmSharp.UI.Renderer.Scene.Simplification,Scene2DObjectMerger,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Simplification\Scene2DObjectMerger.cs,MergeObjects,The following statement contains a magic number: float progress = (float)System.Math.Round((((double)(totalLines - lines.Count) / (double)totalLines) * 100));
Magic Number,OsmSharp.UI.Renderer.Scene.Simplification,Scene2DObjectMerger,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Simplification\Scene2DObjectMerger.cs,MergeObjects,The following statement contains a magic number: progress = (float)System.Math.Round((((double)(totalLines - lines.Count) / (double)totalLines) * 100));
Magic Number,OsmSharp.UI.Renderer.Scene.Simplification,Scene2DObjectMerger,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Simplification\Scene2DObjectMerger.cs,MergeObjects,The following statement contains a magic number: float progress = (float)System.Math.Round((((double)(totalLines - polygons.Count) / (double)totalLines) * 100));
Magic Number,OsmSharp.UI.Renderer.Scene.Simplification,Scene2DObjectMerger,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Simplification\Scene2DObjectMerger.cs,FindMatch,The following statement contains a magic number: box = box.ResizeWith(epsilon * 1.1);
Magic Number,OsmSharp.UI.Renderer.Scene.Simplification,Scene2DStylesSet,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Simplification\Scene2DStylesSet.cs,GetHashCode,The following statement contains a magic number: int hashcode = 102348;
Magic Number,OsmSharp.UI.Renderer.Scene.Storage,SceneSerializer,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Storage\SceneSerializer.cs,CalculateScaleFactor,The following statement contains a magic number: return (1.0 / Scene2D.CalculateSimplificationEpsilon(DefaultProjection' zoomFactor)).Power10Floor() * 10;
Magic Number,OsmSharp.UI.Renderer.Scene.Storage,SceneSerializer,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Storage\SceneSerializer.cs,Serialize,The following statement contains a magic number: stream.Seek(positionAfterMeta + 4' SeekOrigin.Begin);
Magic Number,OsmSharp.UI.Renderer.Scene.Storage,SceneSerializer,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Storage\SceneSerializer.cs,Serialize,The following statement contains a magic number: stream.Write(BitConverter.GetBytes(indexSize)' 0' 4);
Magic Number,OsmSharp.UI.Renderer.Scene.Storage,SceneSerializer,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Storage\SceneSerializer.cs,Serialize,The following statement contains a magic number: stream.Seek(positionAfterMeta + 4 + indexSize + 4 * sceneIndex.ZoomFactors.Length' SeekOrigin.Begin);
Magic Number,OsmSharp.UI.Renderer.Scene.Storage,SceneSerializer,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Storage\SceneSerializer.cs,Serialize,The following statement contains a magic number: stream.Seek(positionAfterMeta + 4 + indexSize + 4 * sceneIndex.ZoomFactors.Length' SeekOrigin.Begin);
Magic Number,OsmSharp.UI.Renderer.Scene.Storage,SceneSerializer,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Storage\SceneSerializer.cs,Serialize,The following statement contains a magic number: RTreeMemoryIndex<SceneObject> memoryIndex = new RTreeMemoryIndex<SceneObject>(50' 100);
Magic Number,OsmSharp.UI.Renderer.Scene.Storage,SceneSerializer,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Storage\SceneSerializer.cs,Serialize,The following statement contains a magic number: RTreeMemoryIndex<SceneObject> memoryIndex = new RTreeMemoryIndex<SceneObject>(50' 100);
Magic Number,OsmSharp.UI.Renderer.Scene.Storage,SceneSerializer,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Storage\SceneSerializer.cs,Serialize,The following statement contains a magic number: float progress = (float)System.Math.Round((((double)sceneObjectIdx / (double)sceneAtZoom.Count) * 100));
Magic Number,OsmSharp.UI.Renderer.Scene.Storage,SceneSerializer,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Storage\SceneSerializer.cs,Serialize,The following statement contains a magic number: stream.Seek(positionAfterMeta + 4 + indexSize' SeekOrigin.Begin);
Magic Number,OsmSharp.UI.Renderer.Scene.Storage,SceneSerializer,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Storage\SceneSerializer.cs,Serialize,The following statement contains a magic number: stream.Write(BitConverter.GetBytes(lengths[idx])' 0' 4);
Magic Number,OsmSharp.UI.Renderer.Scene.Storage,SceneSerializer,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Storage\SceneSerializer.cs,Deserialize,The following statement contains a magic number: var intBytes = new byte[4];
Magic Number,OsmSharp.UI.Renderer.Scene.Storage,SceneSerializer,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Storage\SceneSerializer.cs,Deserialize,The following statement contains a magic number: stream.Read(intBytes' 0' 4);
Magic Number,OsmSharp.UI.Renderer.Scene.Storage,SceneSerializer,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Storage\SceneSerializer.cs,Deserialize,The following statement contains a magic number: stream.Read(intBytes' 0' 4);
Missing Default,OsmSharp.UI.Map.Styles.MapCSS,MapCSSInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\MapCSSInterpreter.cs,PrepareForProcessing,The following switch statement is missing a default case: switch (selector.Type)                             {                                 case SelectorTypeEnum.Node:                                     _keysForNodes = null;                                     break;                                 case SelectorTypeEnum.Way:                                     _keysForWays = null;                                     break;                                 case SelectorTypeEnum.Relation:                                     _keysForRelations = null;                                     break;                                 case SelectorTypeEnum.Line:                                     _keysForLines = null;                                     break;                                 case SelectorTypeEnum.Area:                                     _keysForAreas = null;                                     break;                             }
Missing Default,OsmSharp.UI.Map.Styles.MapCSS,MapCSSInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\MapCSSInterpreter.cs,PrepareForProcessing,The following switch statement is missing a default case: switch (selector.Type)                             {                                 case SelectorTypeEnum.Node:                                     selector.SelectorRule.AddRelevantKeysTo(_keysForNodes);                                     break;                                 case SelectorTypeEnum.Way:                                     selector.SelectorRule.AddRelevantKeysTo(_keysForWays);                                     break;                                 case SelectorTypeEnum.Relation:                                     selector.SelectorRule.AddRelevantKeysTo(_keysForRelations);                                     break;                                 case SelectorTypeEnum.Line:                                     selector.SelectorRule.AddRelevantKeysTo(_keysForLines);                                     break;                                 case SelectorTypeEnum.Area:                                     selector.SelectorRule.AddRelevantKeysTo(_keysForAreas);                                     break;                             }
Missing Default,OsmSharp.UI.Map.Styles.MapCSS,MapCSSInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\MapCSSInterpreter.cs,Translate,The following switch statement is missing a default case: switch (osmGeo.Type)             {                 case CompleteOsmType.Node:                     if (!_mapCSSFile.HasNodeIdSelector &&                         osmGeo.Tags.Count == 0)                     { // this node can never be selected' no tags and no id selectors.                         break;                     }                     if (!_mapCSSFile.HasNodeIdSelector &&                         _keysForNodes != null &&                         !osmGeo.Tags.ContainsOneOfKeys(_keysForNodes))                     { // no good keys present.                         break;                     }                     this.TranslateNode(scene' projection' osmGeo as Node);                     break;                 case CompleteOsmType.Way:                     var relevantWayTags = osmGeo.Tags;                     if (_keysForWays != null)                     { // filter the collection.                         relevantWayTags = relevantWayTags.KeepKeysOf(_keysForWays);                     }                     if (!_mapCSSFile.HasWayIdSelector &&                         _keysForWays != null &&                         relevantWayTags.Count == 0)                     { // no good keys present.                         break;                     }                     if (!_unsuccesfullWays.Contains(relevantWayTags))                     { // way has some potential.                         var completeWay = osmGeo as CompleteWay;                         if (completeWay.Nodes.Count > 0 && !this.TranslateWay(scene' projection' completeWay' relevantWayTags))                         { // ... but translate was unsuccesfull.                             _unsuccesfullWays.Add(relevantWayTags);                         }                     }                     break;                 case CompleteOsmType.Relation:                     if (!_mapCSSFile.HasRelationIdSelector &&                         _keysForRelations != null &&                         !osmGeo.Tags.ContainsOneOfKeys(_keysForRelations))                     { // no good keys present.                         break;                     }                     this.TranslateRelation(scene' projection' osmGeo as CompleteRelation);                     break;             }
Missing Default,OsmSharp.UI.Map.Styles.MapCSS.v0_2.Domain,Selector,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\v0_2\Domain\Selector.cs,Selects,The following switch statement is missing a default case: switch (this.Type)             {                 case SelectorTypeEnum.Area:                     if (mapCSSObject.MapCSSType != MapCSSType.Area)                     {                         return false;                     }                     break;                 case SelectorTypeEnum.Canvas:                     // no way the canvas can be here!                     break;                 case SelectorTypeEnum.Line:                     if (mapCSSObject.MapCSSType != MapCSSType.Line)                     {                         return false;                     }                     break;                 case SelectorTypeEnum.Node:                     if (mapCSSObject.MapCSSType != MapCSSType.Node)                     {                         return false;                     }                     break;                 case SelectorTypeEnum.Way:                     if (mapCSSObject.MapCSSType != MapCSSType.Way)                     {                         return false;                     }                     break;                 case SelectorTypeEnum.Relation:                     if (mapCSSObject.MapCSSType != MapCSSType.Relation)                     {                         return false;                     }                     break;             }
Missing Default,OsmSharp.UI.Map.Styles.MapCSS.v0_2.Domain,SelectorTypeEnumExtensions,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\MapCSS\v0_2\Domain\SelectorTypeEnum.cs,ToMapCSSString,The following switch statement is missing a default case: switch (selectorTypeEnum)             {                 case SelectorTypeEnum.Way:                     return "way";                 case SelectorTypeEnum.Node:                     return "node";                 case SelectorTypeEnum.Line:                     return "line";                 case SelectorTypeEnum.Canvas:                     return "canvas";                 case SelectorTypeEnum.Relation:                     return "relation";                 case SelectorTypeEnum.Area:                     return "area";                 case SelectorTypeEnum.Star:                     return "*";             }
Missing Default,OsmSharp.UI.Map.Styles,StyleInterpreter,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\StyleInterpreter.cs,Translate,The following switch statement is missing a default case: switch (osmGeo.Type)             {                 case OsmGeoType.Node:                     var node = osmGeo as Node;                     if(node.Tags == null)                     { // make sure that a node has a tag collection by default.                         node.Tags= new TagsCollection();                     }                     this.Translate(scene' projection' node);                     break;                 case OsmGeoType.Way:                     this.Translate(scene' projection' CompleteWay.CreateFrom(osmGeo as Way' source));                     break;                 case OsmGeoType.Relation:                     this.Translate(scene' projection' CompleteRelation.CreateFrom(osmGeo as Relation' source));                     break;             }
Missing Default,OsmSharp.UI.Map.Styles,StyleSceneManager,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Map\Styles\StyleSceneManager.cs,FillScene,The following switch statement is missing a default case: switch (osmGeo.Type)                 {                     case Osm.OsmGeoType.Node:                         index = _interpretedNodes;                         break;                     case Osm.OsmGeoType.Way:                         index = _interpretedWays;                         break;                     case Osm.OsmGeoType.Relation:                         index = _interpretedRelations;                         break;                 }
Missing Default,OsmSharp.UI.Renderer,Renderer2D<TTarget>,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Renderer2D.cs,RenderPrimitives,The following switch statement is missing a default case: switch (primitive.Primitive2DType)                     {                         case Primitive2DType.Line2D:                             Line2D line = (Line2D)primitive;                              x = line.X;                             y = line.Y;                             if (x.Length > 4 && line.MaxZoom > zoomFactor * 2 && line.MaxZoom < 512)                             { // try and simplify.                                 double[][] simplified = OsmSharp.Math.Algorithms.SimplifyCurve.Simplify(new double[][] { x' y }'                                     epsilon);                                 if (simplified[0].Length < line.X.Length)                                 {                                     simplifiedLines++;                                     x = simplified[0];                                     y = simplified[1];                                 }                                 double distance = epsilon * 2;                                 if (simplified[0].Length == 2)                                 { // check if the simplified version is smaller than epsilon.                                     distance = System.Math.Sqrt(                                         System.Math.Pow((simplified[0][0] - simplified[0][1])' 2) +                                         System.Math.Pow((simplified[1][0] - simplified[1][1])' 2));                                 }                                 if (distance < epsilon)                                 {                                     droppedLines++;                                     continue;                                 }                             }                             this.DrawLine(target' x' y' line.Color'                                 this.FromPixels(target' view' line.Width)' line.LineJoin' line.Dashes);                             break;                         case Primitive2DType.Polygon2D:                             Polygon2D polygon = (Polygon2D)primitive;                              x = polygon.X;                             y = polygon.Y;                             //if (x.Length > 4 && polygon.MaxZoom > zoomFactor * 2 && polygon.MaxZoom < 512)                             //{ // try and simplify.                             //    double[][] simplified = OsmSharp.Math.Algorithms.SimplifyCurve.Simplify(new double[][] { x' y }'                             //        epsilon);                             //    if (simplified[0].Length < polygon.X.Length)                             //    {                             //        simplifiedLines++;                             //        x = simplified[0];                             //        y = simplified[1];                             //    }                             //    double distance = epsilon * 2;                             //    if (simplified[0].Length == 2)                             //    { // check if the simplified version is smaller than epsilon.                             //        distance = System.Math.Sqrt(                             //            System.Math.Pow((simplified[0][0] - simplified[0][1])' 2) +                             //            System.Math.Pow((simplified[1][0] - simplified[1][1])' 2));                             //    }                             //    //if (distance < epsilon)                             //    //{                             //    //    droppedLines++;                             //    //    continue;                             //    //}                             //}                             this.DrawPolygon(target' x' y' polygon.Color'                                 this.FromPixels(target' view' polygon.Width)' polygon.Fill);                             break;                         case Primitive2DType.LineText2D:                             LineText2D lineText = (LineText2D)primitive;                             this.DrawLineText(target' lineText.X' lineText.Y' lineText.Text' lineText.Color'                                 this.FromPixels(target' view' lineText.Size)' lineText.HaloColor' lineText.HaloRadius' lineText.Font);                             break;                         case Primitive2DType.Point2D:                             Point2D point = (Point2D)primitive;                             this.DrawPoint(target' point.X' point.Y' point.Color'                                 this.FromPixels(target' view' point.Size));                             break;                         case Primitive2DType.Icon2D:                             Icon2D icon = (Icon2D)primitive;                             this.DrawIcon(target' icon.X' icon.Y' icon.Image);                             break;                         case Primitive2DType.ImageTilted2D:                             ImageTilted2D imageTilted = (ImageTilted2D)primitive;                             this.DrawImage(target' imageTilted.Bounds' imageTilted.NativeImage);                             break;                         case Primitive2DType.Image2D:                             Image2D image = (Image2D)primitive;                             this.DrawImage(target' image.Left' image.Top' image.Right' image.Bottom' image.NativeImage);                             break;                         case Primitive2DType.Text2D:                             Text2D text = (Text2D)primitive;                             this.DrawText(target' text.X' text.Y' text.Text' text.Color'                                 this.FromPixels(target' view' text.Size)' text.HaloColor' text.HaloRadius' text.Font);                             break;                     }
Missing Default,OsmSharp.UI.Renderer.Scene,Scene2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Scene2D.cs,Get,The following switch statement is missing a default case: switch (sceneObject.Enum)                         {                             case SceneObjectType.IconObject:                                 SceneIconObject icon = sceneObject as SceneIconObject;                                 byte[] iconStyle = _imageIndex[(int)icon.StyleId];                                 //if (Scene2DZoomRange.Contains(zoom))                                 //{                                 point = _pointIndex.Get(icon.GeoId);                                 if (view.Contains(point.X' point.Y))                                 {                                     primitives.Add(                                         this.ConvertToPrimitive(id' icon' iconStyle));                                 }                                 //}                                 break;                             case SceneObjectType.LineObject:                                 SceneLineObject line = sceneObject as SceneLineObject;                                 StyleLine styleLine = _lineStyles.Get(line.StyleId);                                 points = _pointsIndex.Get(line.GeoId);                                 if (Scene2DZoomRange.Contains(styleLine.MinZoom' styleLine.MaxZoom' zoom))                                 {                                     if (view.IsVisible(points.X' points.Y' false))                                     {                                         primitives.Add(                                             this.ConvertToPrimitive(id' line' styleLine));                                     }                                 }                                 break;                             case SceneObjectType.LineTextObject:                                 SceneLineTextObject lineText = sceneObject as SceneLineTextObject;                                 StyleText lineTextStyle = _textStyles.Get(lineText.StyleId);                                 points = _pointsIndex.Get(lineText.GeoId);                                 if (Scene2DZoomRange.Contains(lineTextStyle.MinZoom' lineTextStyle.MaxZoom' zoom))                                 {                                     if (view.IsVisible(points.X' points.Y' false))                                     {                                         primitives.Add(                                             this.ConvertToPrimitive(id' lineText' lineTextStyle));                                     }                                 }                                 break;                             case SceneObjectType.PointObject:                                 ScenePointObject pointObject = sceneObject as ScenePointObject;                                 StylePoint pointStyle = _pointStyles.Get(pointObject.StyleId);                                 point = _pointIndex.Get(pointObject.GeoId);                                 if (Scene2DZoomRange.Contains(pointStyle.MinZoom' pointStyle.MaxZoom' zoom))                                 {                                     if (view.Contains(point.X' point.Y))                                     {                                         primitives.Add(                                             this.ConvertToPrimitive(id' pointObject' pointStyle));                                     }                                 }                                 break;                             case SceneObjectType.PolygonObject:                                 ScenePolygonObject polygonObject = sceneObject as ScenePolygonObject;                                 StylePolygon polygonStyle = _polygonStyles.Get(polygonObject.StyleId);                                 points = _pointsIndex.Get(polygonObject.GeoId);                                 if (Scene2DZoomRange.Contains(polygonStyle.MinZoom' polygonStyle.MaxZoom' zoom))                                 {                                     if (view.IsVisible(points.X' points.Y' false))                                     {                                         primitives.Add(                                             this.ConvertToPrimitive(id' polygonObject' polygonStyle));                                     }                                 }                                 break;                             case SceneObjectType.TextObject:                                 SceneTextObject textObject = sceneObject as SceneTextObject;                                 StyleText textStyle = _textStyles.Get(textObject.StyleId);                                 point = _pointIndex.Get(textObject.GeoId);                                 if (Scene2DZoomRange.Contains(textStyle.MinZoom' textStyle.MaxZoom' zoom))                                 {                                     if (view.Contains(point.X' point.Y))                                     {                                         primitives.Add(                                             this.ConvertToPrimitive(id' textObject' textStyle));                                     }                                 }                                 break;                         }
Missing Default,OsmSharp.UI.Renderer.Scene,Scene2D,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Scene2D.cs,ConvertToPrimitive,The following switch statement is missing a default case: switch (sceneObject.Enum)             {                 case SceneObjectType.IconObject:                     return this.ConvertToPrimitive(id' sceneObject as SceneIconObject' _imageIndex[(int)sceneObject.StyleId]);                 case SceneObjectType.LineObject:                     return this.ConvertToPrimitive(id' sceneObject as SceneLineObject' _lineStyles.Get(sceneObject.StyleId));                 case SceneObjectType.LineTextObject:                     return this.ConvertToPrimitive(id' sceneObject as SceneLineTextObject' _textStyles.Get(sceneObject.StyleId));                 case SceneObjectType.PointObject:                     return this.ConvertToPrimitive(id' sceneObject as ScenePointObject' _pointStyles.Get(sceneObject.StyleId));                 case SceneObjectType.PolygonObject:                     return this.ConvertToPrimitive(id' sceneObject as ScenePolygonObject' _polygonStyles.Get(sceneObject.StyleId));                 case SceneObjectType.TextObject:                     return this.ConvertToPrimitive(id' sceneObject as SceneTextObject' _textStyles.Get(sceneObject.StyleId));             }
Missing Default,OsmSharp.UI.Renderer.Scene.Simplification,Scene2DObjectMerger,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Simplification\Scene2DObjectMerger.cs,MergeObjects,The following switch statement is missing a default case: switch (foundPosition)                     {                         case MatchPosition.FirstFirst:                             found.X.InsertToReverse(1' x' 0' found.X.Length - 1);                             found.Y.InsertToReverse(1' y' 0' found.Y.Length - 1);                             break;                         case MatchPosition.FirstLast:                             found.X.InsertTo(0' x' 0' found.X.Length - 1);                             found.Y.InsertTo(0' y' 0' found.Y.Length - 1);                             break;                         case MatchPosition.LastFirst:                             found.X.CopyTo(x' lengthBefore - 1);                             found.Y.CopyTo(y' lengthBefore - 1);                             break;                         case MatchPosition.LastLast:                             found.X.CopyToReverse(x' lengthBefore - 1);                             found.Y.CopyToReverse(y' lengthBefore - 1);                             break;                     }
Missing Default,OsmSharp.UI.Renderer.Scene.Storage,SceneObjectRTreeSerializer,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Storage\SceneObjectRTreeSerializer.cs,Serialize,The following switch statement is missing a default case: switch (sceneObject.Enum)                 {                     case SceneObjectType.IconObject:                         // get point.                         point = _scene.GetPoint(sceneObject.GeoId);                          // set point data and keep id.                         if (!addedPoint.TryGetValue(sceneObject.GeoId' out geoId))                         { // the point was not added yet.                              geoId = leafData.PointsX.Count;                             //leafData.PointsIndexes.Add(geoId);                             leafData.PointsX.Add((long)(scaleFactor * point.X));                             leafData.PointsY.Add((long)(scaleFactor * point.Y));                             addedPoint.Add(sceneObject.GeoId' geoId);                         }                         leafData.IconPointId.Add(geoId); // add point.                          // add image id.                         leafData.IconImageId.Add(sceneObject.StyleId);                         break;                     case SceneObjectType.PointObject:                         // get point.                         point = _scene.GetPoint(sceneObject.GeoId);                          // set point data and keep id.                         if (!addedPoint.TryGetValue(sceneObject.GeoId' out geoId))                         { // the point was not added yet.                              geoId = leafData.PointsX.Count;                             leafData.PointsX.Add((long)(scaleFactor * point.X));                             leafData.PointsY.Add((long)(scaleFactor * point.Y));                             //leafData.PointsIndexes.Add(leafData.PointsY.Count);                             addedPoint.Add(sceneObject.GeoId' geoId);                         }                         leafData.PointPointId.Add(geoId);                          // add point style.                         leafData.PointStyleId.Add(sceneObject.StyleId);                         break;                     case SceneObjectType.TextObject:                         // get point.                         point = _scene.GetPoint(sceneObject.GeoId);                          // set point data and keep id.                         if (!addedPoint.TryGetValue(sceneObject.GeoId' out geoId))                         { // the point was not added yet.                              geoId = leafData.PointsX.Count;                             leafData.PointsX.Add((long)(scaleFactor * point.X));                             leafData.PointsY.Add((long)(scaleFactor * point.Y));                             //leafData.PointsIndexes.Add(leafData.PointsY.Count);                             addedPoint.Add(sceneObject.GeoId' geoId);                         }                         leafData.TextPointPointId.Add(geoId);                          // add point style.                         leafData.TextPointStyleId.Add(sceneObject.StyleId);                          // add text.                         leafData.TextPointText.Add(                             _scene.GetText((sceneObject as SceneTextObject).TextId));                         break;                     case SceneObjectType.LineObject:                         // get points.                         points = _scene.GetPoints(sceneObject.GeoId);                          // set points data and keep id.                         if (!addedPoints.TryGetValue(sceneObject.GeoId' out geoId))                         { // the point was not added yet.                              geoId = leafData.PointsX.Count;                             leafData.PointsX.AddRange(points.X.ConvertToLongArray(scaleFactor));                             leafData.PointsY.AddRange(points.Y.ConvertToLongArray(scaleFactor));                             //leafData.PointsIndexes.Add(leafData.PointsY.Count);                             addedPoints.Add(sceneObject.GeoId' geoId);                         }                         leafData.LinePointsId.Add(geoId);                          // add point style.                         leafData.LineStyleId.Add(sceneObject.StyleId);                         break;                     case SceneObjectType.LineTextObject:                         // get points.                         points = _scene.GetPoints(sceneObject.GeoId);                          // set points data and keep id.                         if (!addedPoints.TryGetValue(sceneObject.GeoId' out geoId))                         { // the point was not added yet.                              geoId = leafData.PointsX.Count;                             leafData.PointsX.AddRange(points.X.ConvertToLongArray(scaleFactor));                             leafData.PointsY.AddRange(points.Y.ConvertToLongArray(scaleFactor));                             //leafData.PointsIndexes.Add(leafData.PointsY.Count);                             addedPoints.Add(sceneObject.GeoId' geoId);                         }                         leafData.LineTextPointsId.Add(geoId);                          // add point style.                         leafData.LineTextStyleId.Add(sceneObject.StyleId);                          // add text.                         leafData.LineTextText.Add(                             _scene.GetText((sceneObject as SceneLineTextObject).TextId));                         break;                     case SceneObjectType.PolygonObject:                         // get points.                         points = _scene.GetPoints(sceneObject.GeoId);                          // set points data and keep id.                         if (!addedPoints.TryGetValue(sceneObject.GeoId' out geoId))                         { // the point was not added yet.                              geoId = leafData.PointsX.Count;                             leafData.PointsX.AddRange(points.X.ConvertToLongArray(scaleFactor));                             leafData.PointsY.AddRange(points.Y.ConvertToLongArray(scaleFactor));                             //leafData.PointsIndexes.Add(leafData.PointsY.Count);                             addedPoints.Add(sceneObject.GeoId' geoId);                         }                         leafData.PolygonPointsId.Add(geoId);                          // add point style.                         leafData.PolygonStyleId.Add(sceneObject.StyleId);                         break;                 }
Missing Default,OsmSharp.UI.Renderer.Scene.Storage,SceneSerializer,C:\research\architectureSmells\repos\OsmSharp_OsmSharp\OsmSharp.UI\Renderer\Scene\Storage\SceneSerializer.cs,Serialize,The following switch statement is missing a default case: switch (sceneObject.Enum)                     {                         case SceneObjectType.IconObject:                         case SceneObjectType.PointObject:                         case SceneObjectType.TextObject:                             OsmSharp.UI.Renderer.Scene.Scene2D.ScenePoint geo = scene.GetPoint(sceneObject.GeoId);                             PointF2D point = new PointF2D(geo.X' geo.Y);                             memoryIndex.Add(new BoxF2D(point)' sceneObject);                             break;                         case SceneObjectType.LineObject:                         case SceneObjectType.LineTextObject:                         case SceneObjectType.PolygonObject:                             OsmSharp.UI.Renderer.Scene.Scene2D.ScenePoints geos = scene.GetPoints(sceneObject.GeoId);                             memoryIndex.Add(new BoxF2D(geos.X' geos.Y)' sceneObject);                             break;                     }
