Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,OsmSharp.WinForms.UI.Renderer,GraphicsRenderer2D,C:\repos\OsmSharp_OsmSharp\OsmSharp.WinForms.UI\Renderer\GraphicsRenderer2D.cs,DrawPoint,The method has 5 parameters. Parameters: target' x' y' color' size
Long Parameter List,OsmSharp.WinForms.UI.Renderer,GraphicsRenderer2D,C:\repos\OsmSharp_OsmSharp\OsmSharp.WinForms.UI\Renderer\GraphicsRenderer2D.cs,DrawLine,The method has 7 parameters. Parameters: target' x' y' color' width' lineJoin' dashes
Long Parameter List,OsmSharp.WinForms.UI.Renderer,GraphicsRenderer2D,C:\repos\OsmSharp_OsmSharp\OsmSharp.WinForms.UI\Renderer\GraphicsRenderer2D.cs,DrawPolygon,The method has 6 parameters. Parameters: target' x' y' color' width' fill
Long Parameter List,OsmSharp.WinForms.UI.Renderer,GraphicsRenderer2D,C:\repos\OsmSharp_OsmSharp\OsmSharp.WinForms.UI\Renderer\GraphicsRenderer2D.cs,DrawImage,The method has 6 parameters. Parameters: target' left' top' right' bottom' nativeImage
Long Parameter List,OsmSharp.WinForms.UI.Renderer,GraphicsRenderer2D,C:\repos\OsmSharp_OsmSharp\OsmSharp.WinForms.UI\Renderer\GraphicsRenderer2D.cs,DrawText,The method has 9 parameters. Parameters: target' x' y' text' color' size' haloColor' haloRadius' fontName
Long Parameter List,OsmSharp.WinForms.UI.Renderer,GraphicsRenderer2D,C:\repos\OsmSharp_OsmSharp\OsmSharp.WinForms.UI\Renderer\GraphicsRenderer2D.cs,DrawLineText,The method has 9 parameters. Parameters: target' x' y' text' color' size' haloColor' haloRadius' fontName
Long Parameter List,OsmSharp.WinForms.UI.Renderer,GraphicsRenderer2D,C:\repos\OsmSharp_OsmSharp\OsmSharp.WinForms.UI\Renderer\GraphicsRenderer2D.cs,DrawLineTextSegment,The method has 15 parameters. Parameters: target' x' y' text' color' size' haloColor' haloRadius' middlePosition' characterWidths' textLength' font' characterHeight' haloBrush' brush
Long Statement,OsmSharp.WinForms.UI.Cache,OsmDataCacheDisk,C:\repos\OsmSharp_OsmSharp\OsmSharp.WinForms.UI\Cache\OsmDataCacheDisk.cs,Read,The length of the statement  "                throw new InvalidDataException("Invalid cached file read' make sure not to modify the cached while in use or to synchonize access."); " is 133.
Long Statement,OsmSharp.WinForms.UI.Renderer,GraphicsRenderer2D,C:\repos\OsmSharp_OsmSharp\OsmSharp.WinForms.UI\Renderer\GraphicsRenderer2D.cs,DrawPoint,The length of the statement  "            target.Target.FillEllipse(new SolidBrush(Color.FromArgb(color))' (float)transformed[0] - (sizeInPixels / 2.0f)' (float)transformed[1] - (sizeInPixels / 2.0f)' " is 158.
Magic Number,OsmSharp.WinForms.UI,MapControl,C:\repos\OsmSharp_OsmSharp\OsmSharp.WinForms.UI\MapControl.cs,OnLoad,The following statement contains a magic number: timer.Interval = 200;
Magic Number,OsmSharp.WinForms.UI,MapControl,C:\repos\OsmSharp_OsmSharp\OsmSharp.WinForms.UI\MapControl.cs,OnMouseWheel,The following statement contains a magic number: if (this.MapAllowZoom)              {                  this.MapZoom += (float)(e.Delta / 2000.0);                    this.QueueNotifyMapViewChanged();              }
Magic Number,OsmSharp.WinForms.UI,MapControl,C:\repos\OsmSharp_OsmSharp\OsmSharp.WinForms.UI\MapControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(369' 207);
Magic Number,OsmSharp.WinForms.UI,MapControl,C:\repos\OsmSharp_OsmSharp\OsmSharp.WinForms.UI\MapControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(369' 207);
Magic Number,OsmSharp.WinForms.UI.Renderer,GraphicsRenderer2D,C:\repos\OsmSharp_OsmSharp\OsmSharp.WinForms.UI\Renderer\GraphicsRenderer2D.cs,DrawText,The following statement contains a magic number: if (haloColor.HasValue && haloRadius.HasValue && haloRadius.Value > 0)              {                  haloBrush = new SolidBrush(Color.FromArgb(haloColor.Value));                    GraphicsPath haloPath = characterPath.Clone() as GraphicsPath;                  using (haloPath)                  {                      haloPath.Widen(new Pen(haloBrush' haloRadius.Value * 2));                        // Draw the character                      target.Target.FillPath(haloBrush' haloPath);                  }              }
Magic Number,OsmSharp.WinForms.UI.Renderer,GraphicsRenderer2D,C:\repos\OsmSharp_OsmSharp\OsmSharp.WinForms.UI\Renderer\GraphicsRenderer2D.cs,DrawLineText,The following statement contains a magic number: if (x.Length > 1)              {                  float sizeInPixels = this.ToPixels(size);                  Color textColor = Color.FromArgb(color);                  Brush brush = new SolidBrush(textColor);                  Brush haloBrush = null;                  if (haloColor.HasValue && haloRadius.HasValue && haloRadius.Value > 0)                  {                      haloBrush = new SolidBrush(Color.FromArgb(haloColor.Value));                  }                  var font = new Font(fontName' sizeInPixels);                    // get some metrics on the texts.                  var characterWidths = GetCharacterWidths(target.Target' text' font);                  for (int idx = 0; idx < characterWidths.Length; idx++)                  {                      characterWidths[idx] = (float)this.FromPixels(_target' _view' characterWidths[idx]);                  }                  var characterHeight = target.Target.MeasureString(text' font).Height;                  var textLength = characterWidths.Sum();  //                var avgCharacterWidth = textLength / characterWidths.Length;                    // calculate line length.                  var lineLength = Polyline2D.Length(x' y);                  if (lineLength > textLength * 1.1f)                  {                      // calculate the number of labels.                      int labelCount = (int)System.Math.Floor(lineLength / (textLength * 10)) + 1;                        // calculate positions of label(s).                      double positionGap = lineLength / (labelCount + 1);                        // draw each label.                      for (double position = positionGap; position < lineLength; position = position + positionGap)                      {                          this.DrawLineTextSegment(target' x' y' text' color' size' haloColor' haloRadius' position' characterWidths'                              textLength' font' characterHeight' haloBrush' brush);                      }                  }              }
Magic Number,OsmSharp.WinForms.UI.Renderer,GraphicsRenderer2D,C:\repos\OsmSharp_OsmSharp\OsmSharp.WinForms.UI\Renderer\GraphicsRenderer2D.cs,DrawLineTextSegment,The following statement contains a magic number: double first = middlePosition - (textLength / 2.0);
Magic Number,OsmSharp.WinForms.UI.Renderer,GraphicsRenderer2D,C:\repos\OsmSharp_OsmSharp\OsmSharp.WinForms.UI\Renderer\GraphicsRenderer2D.cs,DrawLineTextSegment,The following statement contains a magic number: for (int idx = 0; idx < text.Length; idx++)              {                  double nextPosition = middlePosition - (textLength / 2.0) + ((textLength / (text.Length)) * (idx + 1));                  PointF2D next = Polyline2D.PositionAtPosition(x' y' nextPosition);                    // Translate to the final position' the center of line-segment between 'current' and 'next'  //                PointF2D position = current + ((next - current) / 2.0);                    // calculate the angle.                  VectorF2D vector = next - current;                  VectorF2D horizontal = new VectorF2D(1' 0);                  double angleDegrees = ((Degree)horizontal.Angle(vector)).Value;                  averageAngle = averageAngle + angleDegrees;                  current = next;              }
Magic Number,OsmSharp.WinForms.UI.Renderer,GraphicsRenderer2D,C:\repos\OsmSharp_OsmSharp\OsmSharp.WinForms.UI\Renderer\GraphicsRenderer2D.cs,DrawLineTextSegment,The following statement contains a magic number: if (averageAngle > 90 && averageAngle < 180 + 90)              { // the average angle is > PI => means upside down.                  xText = x.Reverse<double>().ToArray<double>();                  yText = y.Reverse<double>().ToArray<double>();              }
Magic Number,OsmSharp.WinForms.UI.Renderer,GraphicsRenderer2D,C:\repos\OsmSharp_OsmSharp\OsmSharp.WinForms.UI\Renderer\GraphicsRenderer2D.cs,DrawLineTextSegment,The following statement contains a magic number: if (averageAngle > 90 && averageAngle < 180 + 90)              { // the average angle is > PI => means upside down.                  xText = x.Reverse<double>().ToArray<double>();                  yText = y.Reverse<double>().ToArray<double>();              }
Magic Number,OsmSharp.WinForms.UI.Renderer,GraphicsRenderer2D,C:\repos\OsmSharp_OsmSharp\OsmSharp.WinForms.UI\Renderer\GraphicsRenderer2D.cs,DrawLineTextSegment,The following statement contains a magic number: if (averageAngle > 90 && averageAngle < 180 + 90)              { // the average angle is > PI => means upside down.                  xText = x.Reverse<double>().ToArray<double>();                  yText = y.Reverse<double>().ToArray<double>();              }
Magic Number,OsmSharp.WinForms.UI.Renderer,GraphicsRenderer2D,C:\repos\OsmSharp_OsmSharp\OsmSharp.WinForms.UI\Renderer\GraphicsRenderer2D.cs,DrawLineTextSegment,The following statement contains a magic number: first = middlePosition - (textLength / 2.0);
Magic Number,OsmSharp.WinForms.UI.Renderer,GraphicsRenderer2D,C:\repos\OsmSharp_OsmSharp\OsmSharp.WinForms.UI\Renderer\GraphicsRenderer2D.cs,DrawLineTextSegment,The following statement contains a magic number: for (int idx = 0; idx < text.Length; idx++)              {                  nextPosition2 = nextPosition2 + characterWidths[idx];                  //double nextPosition = middle - (textLength / 2.0) + ((textLength / (text.Length)) * (idx + 1));                  PointF2D next = Polyline2D.PositionAtPosition(xText' yText' nextPosition2);                  char currentChar = text[idx];                  using (GraphicsPath characterPath = new GraphicsPath())                  {                      characterPath.AddString(currentChar.ToString()' font.FontFamily' (int)font.Style' font.Size' Point.Empty'                                              StringFormat.GenericTypographic);    //                    var pathBounds = characterPath.GetBounds();                        // Transformation matrix to move the character to the correct location.                       // Note that all actions on the Matrix class are prepended' so we apply them in reverse.                      var transform = new Matrix();                        // Translate to the final position' the center of line-segment between 'current' and 'next'                      PointF2D position = current;                      //PointF2D position = current + ((next - current) / 2.0);                      double[] transformed = this.Tranform(position[0]' position[1]);                      transform.Translate((float)transformed[0]' (float)transformed[1]);                        // calculate the angle.                      VectorF2D vector = next - current;                      VectorF2D horizontal = new VectorF2D(1' 0);                      double angleDegrees = ((Degree)horizontal.Angle(vector)).Value;                        // Rotate the character                      transform.Rotate((float)angleDegrees);                        // Translate the character so the centre of its base is over the origin                      transform.Translate(0' -characterHeight / 2.5f);                        //transform.Scale((float)this.FromPixels(_target' _view' 1)'                       //    (float)this.FromPixels(_target' _view' 1));                      characterPath.Transform(transform);                        if (haloColor.HasValue && haloRadius.HasValue && haloRadius.Value > 0)                      {                          GraphicsPath haloPath = characterPath.Clone() as GraphicsPath;                          using (haloPath)                          {                              haloPath.Widen(new Pen(haloBrush' haloRadius.Value * 2));                                // Draw the character                              target.Target.FillPath(haloBrush' haloPath);                          }                      }                        // Draw the character                      target.Target.FillPath(brush' characterPath);                  }                  current = next;              }
Magic Number,OsmSharp.WinForms.UI.Renderer.Images,NativeImage,C:\repos\OsmSharp_OsmSharp\OsmSharp.WinForms.UI\Renderer\Images\NativeImage.cs,GetHashCode,The following statement contains a magic number: return 613294639 ^                  this._image.GetHashCode();
Missing Default,OsmSharp.WinForms.UI.Cache,OsmDataCacheDisk,C:\repos\OsmSharp_OsmSharp\OsmSharp.WinForms.UI\Cache\OsmDataCacheDisk.cs,StoreFileName,The following switch statement is missing a default case: switch (type)              {                  case OsmGeoType.Node:                      return Path.Combine(_cacheDirectory.FullName' string.Format("{0}.node"' id.ToString()));                  case OsmGeoType.Way:                      return Path.Combine(_cacheDirectory.FullName' string.Format("{0}.way"' id.ToString()));                  case OsmGeoType.Relation:                      return Path.Combine(_cacheDirectory.FullName' string.Format("{0}.relation"' id.ToString()));              }
