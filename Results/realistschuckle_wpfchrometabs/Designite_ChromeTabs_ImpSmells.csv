Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ChromeTabs,ChromeTabPanel,C:\repos\realistschuckle_wpfchrometabs\ChromeTabs\ChromeTabPanel.cs,ArrangeOverride,The length of the statement  "            this.currentTabWidth = Math.Min(Math.Max((activeWidth + (this.Children.Count - 1) * overlap)/ this.Children.Count' this.minTabWidth)' this.maxTabWidth); " is 152.
Long Statement,ChromeTabs,ChromeTabPanel,C:\repos\realistschuckle_wpfchrometabs\ChromeTabs\ChromeTabPanel.cs,ArrangeOverride,The length of the statement  "            this.addButtonRect = new Rect(new Point(offset + overlap' (finalSize.Height - this.addButtonSize.Height) / 2)' this.addButtonSize); " is 131.
Long Statement,ChromeTabs,ChromeTabPanel,C:\repos\realistschuckle_wpfchrometabs\ChromeTabs\ChromeTabPanel.cs,MeasureOverride,The length of the statement  "            double activeWidth = double.IsPositiveInfinity(availableSize.Width) ? 500 : availableSize.Width - this.leftMargin - this.rightMargin; " is 133.
Long Statement,ChromeTabs,ChromeTabPanel,C:\repos\realistschuckle_wpfchrometabs\ChromeTabs\ChromeTabPanel.cs,MeasureOverride,The length of the statement  "            this.currentTabWidth = Math.Min(Math.Max((activeWidth + (this.Children.Count - 1) * overlap) / this.Children.Count' this.minTabWidth)' this.maxTabWidth); " is 153.
Long Statement,ChromeTabs,ChromeTabPanel,C:\repos\realistschuckle_wpfchrometabs\ChromeTabs\ChromeTabPanel.cs,OnPreviewMouseMove,The length of the statement  "            if(this.addButtonRect.Contains(e.GetPosition(this)) && this.addButton.Background != Brushes.White && this.addButton.Background != Brushes.DarkGray) " is 147.
Long Statement,ChromeTabs,ChromeTabPanel,C:\repos\realistschuckle_wpfchrometabs\ChromeTabs\ChromeTabPanel.cs,OnPreviewMouseMove,The length of the statement  "                        var bound = Math.Min(1' Math.Abs(diff)) * ((sign * this.currentTabWidth / 3) + ((Math.Abs(diff) < 2) ? 0 : (diff - sign) * (this.currentTabWidth - this.overlap))); " is 163.
Long Statement,ChromeTabs,ChromeTabPanel,C:\repos\realistschuckle_wpfchrometabs\ChromeTabs\ChromeTabPanel.cs,Reanimate,The length of the statement  "            ThicknessAnimation moveBackAnimation = new ThicknessAnimation(tab.Margin' offset' new Duration(TimeSpan.FromSeconds(duration))); " is 128.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\realistschuckle_wpfchrometabs\ChromeTabs\obj\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Magic Number,ChromeTabs,ChromeTabControl,C:\repos\realistschuckle_wpfchrometabs\ChromeTabs\ChromeTabControl.cs,ChangeSelectedItem,The following statement contains a magic number: if(index > -1)              {                  if(this.SelectedItem != null)                  {                      Canvas.SetZIndex(this.AsTabItem(this.SelectedItem)' 0);                  }                  this.SelectedIndex = index;                  Canvas.SetZIndex(item' 1001);              }
Magic Number,ChromeTabs,ChromeTabPanel,C:\repos\realistschuckle_wpfchrometabs\ChromeTabs\ChromeTabPanel.cs,ChromeTabPanel,The following statement contains a magic number: this.maxTabWidth = 125.0;
Magic Number,ChromeTabs,ChromeTabPanel,C:\repos\realistschuckle_wpfchrometabs\ChromeTabs\ChromeTabPanel.cs,ChromeTabPanel,The following statement contains a magic number: this.minTabWidth = 40.0;
Magic Number,ChromeTabs,ChromeTabPanel,C:\repos\realistschuckle_wpfchrometabs\ChromeTabs\ChromeTabPanel.cs,ChromeTabPanel,The following statement contains a magic number: this.leftMargin = 50.0;
Magic Number,ChromeTabs,ChromeTabPanel,C:\repos\realistschuckle_wpfchrometabs\ChromeTabs\ChromeTabPanel.cs,ChromeTabPanel,The following statement contains a magic number: this.rightMargin = 30.0;
Magic Number,ChromeTabs,ChromeTabPanel,C:\repos\realistschuckle_wpfchrometabs\ChromeTabs\ChromeTabPanel.cs,ChromeTabPanel,The following statement contains a magic number: this.overlap = 10.0;
Magic Number,ChromeTabs,ChromeTabPanel,C:\repos\realistschuckle_wpfchrometabs\ChromeTabs\ChromeTabPanel.cs,ChromeTabPanel,The following statement contains a magic number: this.defaultMeasureHeight = 30.0;
Magic Number,ChromeTabs,ChromeTabPanel,C:\repos\realistschuckle_wpfchrometabs\ChromeTabs\ChromeTabPanel.cs,ChromeTabPanel,The following statement contains a magic number: this.addButtonSize = new Size(20' 12);
Magic Number,ChromeTabs,ChromeTabPanel,C:\repos\realistschuckle_wpfchrometabs\ChromeTabs\ChromeTabPanel.cs,ChromeTabPanel,The following statement contains a magic number: this.addButtonSize = new Size(20' 12);
Magic Number,ChromeTabs,ChromeTabPanel,C:\repos\realistschuckle_wpfchrometabs\ChromeTabs\ChromeTabPanel.cs,OnRender,The following statement contains a magic number: Pen pen = new Pen(brush' .5);
Magic Number,ChromeTabs,ChromeTabPanel,C:\repos\realistschuckle_wpfchrometabs\ChromeTabs\ChromeTabPanel.cs,ArrangeOverride,The following statement contains a magic number: this.addButtonRect = new Rect(new Point(offset + overlap' (finalSize.Height - this.addButtonSize.Height) / 2)' this.addButtonSize);
Magic Number,ChromeTabs,ChromeTabPanel,C:\repos\realistschuckle_wpfchrometabs\ChromeTabs\ChromeTabPanel.cs,MeasureOverride,The following statement contains a magic number: double activeWidth = double.IsPositiveInfinity(availableSize.Width) ? 500 : availableSize.Width - this.leftMargin - this.rightMargin;
Magic Number,ChromeTabs,ChromeTabPanel,C:\repos\realistschuckle_wpfchrometabs\ChromeTabs\ChromeTabPanel.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: if(draggedTab != null && this.Children.Count > 1)              {                  Canvas.SetZIndex(draggedTab' 1000);              }              else if(draggedTab != null && this.Children.Count == 1)              {                  this.draggingWindow = true;                  Window.GetWindow(this).DragMove();              }
Magic Number,ChromeTabs,ChromeTabPanel,C:\repos\realistschuckle_wpfchrometabs\ChromeTabs\ChromeTabPanel.cs,OnPreviewMouseMove,The following statement contains a magic number: if(margin.Left != 0)              {                  int guardValue = Interlocked.Increment(ref this.captureGuard);                  if(guardValue == 1)                  {                      this.originalIndex = this.draggedTab.Index;                      this.slideIndex = this.originalIndex + 1;                      this.slideIntervals = new List<double>();                      this.slideIntervals.Add(double.NegativeInfinity);                      for(int i = 1; i <= this.Children.Count; i += 1)                      {                          var diff = i - this.slideIndex;                          var sign = diff == 0 ? 0 : diff / Math.Abs(diff);                          var bound = Math.Min(1' Math.Abs(diff)) * ((sign * this.currentTabWidth / 3) + ((Math.Abs(diff) < 2) ? 0 : (diff - sign) * (this.currentTabWidth - this.overlap)));                          this.slideIntervals.Add(bound);                      }                      this.slideIntervals.Add(double.PositiveInfinity);                      this.CaptureMouse();                  }                  else                  {                      int changed = 0;                      if(margin.Left < this.slideIntervals[this.slideIndex - 1])                      {                          SwapSlideInterval(this.slideIndex - 1);                          this.slideIndex -= 1;                          changed = 1;                      }                      else if(margin.Left > this.slideIntervals[this.slideIndex + 1])                      {                          SwapSlideInterval(this.slideIndex + 1);                          this.slideIndex += 1;                          changed = -1;                      }                      if(changed != 0)                      {                          var rightedOriginalIndex = this.originalIndex + 1;                          var diff = 1;                          if(changed > 0 && this.slideIndex >= rightedOriginalIndex)                          {                              changed = 0;                              diff = 0;                          }                          else if(changed < 0 && this.slideIndex <= rightedOriginalIndex)                          {                              changed = 0;                              diff = 2;                          }                          ChromeTabItem shiftedTab = this.Children[this.slideIndex - diff] as ChromeTabItem;                          if(shiftedTab != this.draggedTab)                          {                              StickyReanimate(shiftedTab' changed * (this.currentTabWidth - this.overlap)' .01);                          }                      }                  }              }
Magic Number,ChromeTabs,ChromeTabPanel,C:\repos\realistschuckle_wpfchrometabs\ChromeTabs\ChromeTabPanel.cs,OnPreviewMouseMove,The following statement contains a magic number: if(margin.Left != 0)              {                  int guardValue = Interlocked.Increment(ref this.captureGuard);                  if(guardValue == 1)                  {                      this.originalIndex = this.draggedTab.Index;                      this.slideIndex = this.originalIndex + 1;                      this.slideIntervals = new List<double>();                      this.slideIntervals.Add(double.NegativeInfinity);                      for(int i = 1; i <= this.Children.Count; i += 1)                      {                          var diff = i - this.slideIndex;                          var sign = diff == 0 ? 0 : diff / Math.Abs(diff);                          var bound = Math.Min(1' Math.Abs(diff)) * ((sign * this.currentTabWidth / 3) + ((Math.Abs(diff) < 2) ? 0 : (diff - sign) * (this.currentTabWidth - this.overlap)));                          this.slideIntervals.Add(bound);                      }                      this.slideIntervals.Add(double.PositiveInfinity);                      this.CaptureMouse();                  }                  else                  {                      int changed = 0;                      if(margin.Left < this.slideIntervals[this.slideIndex - 1])                      {                          SwapSlideInterval(this.slideIndex - 1);                          this.slideIndex -= 1;                          changed = 1;                      }                      else if(margin.Left > this.slideIntervals[this.slideIndex + 1])                      {                          SwapSlideInterval(this.slideIndex + 1);                          this.slideIndex += 1;                          changed = -1;                      }                      if(changed != 0)                      {                          var rightedOriginalIndex = this.originalIndex + 1;                          var diff = 1;                          if(changed > 0 && this.slideIndex >= rightedOriginalIndex)                          {                              changed = 0;                              diff = 0;                          }                          else if(changed < 0 && this.slideIndex <= rightedOriginalIndex)                          {                              changed = 0;                              diff = 2;                          }                          ChromeTabItem shiftedTab = this.Children[this.slideIndex - diff] as ChromeTabItem;                          if(shiftedTab != this.draggedTab)                          {                              StickyReanimate(shiftedTab' changed * (this.currentTabWidth - this.overlap)' .01);                          }                      }                  }              }
Magic Number,ChromeTabs,ChromeTabPanel,C:\repos\realistschuckle_wpfchrometabs\ChromeTabs\ChromeTabPanel.cs,OnPreviewMouseMove,The following statement contains a magic number: if(margin.Left != 0)              {                  int guardValue = Interlocked.Increment(ref this.captureGuard);                  if(guardValue == 1)                  {                      this.originalIndex = this.draggedTab.Index;                      this.slideIndex = this.originalIndex + 1;                      this.slideIntervals = new List<double>();                      this.slideIntervals.Add(double.NegativeInfinity);                      for(int i = 1; i <= this.Children.Count; i += 1)                      {                          var diff = i - this.slideIndex;                          var sign = diff == 0 ? 0 : diff / Math.Abs(diff);                          var bound = Math.Min(1' Math.Abs(diff)) * ((sign * this.currentTabWidth / 3) + ((Math.Abs(diff) < 2) ? 0 : (diff - sign) * (this.currentTabWidth - this.overlap)));                          this.slideIntervals.Add(bound);                      }                      this.slideIntervals.Add(double.PositiveInfinity);                      this.CaptureMouse();                  }                  else                  {                      int changed = 0;                      if(margin.Left < this.slideIntervals[this.slideIndex - 1])                      {                          SwapSlideInterval(this.slideIndex - 1);                          this.slideIndex -= 1;                          changed = 1;                      }                      else if(margin.Left > this.slideIntervals[this.slideIndex + 1])                      {                          SwapSlideInterval(this.slideIndex + 1);                          this.slideIndex += 1;                          changed = -1;                      }                      if(changed != 0)                      {                          var rightedOriginalIndex = this.originalIndex + 1;                          var diff = 1;                          if(changed > 0 && this.slideIndex >= rightedOriginalIndex)                          {                              changed = 0;                              diff = 0;                          }                          else if(changed < 0 && this.slideIndex <= rightedOriginalIndex)                          {                              changed = 0;                              diff = 2;                          }                          ChromeTabItem shiftedTab = this.Children[this.slideIndex - diff] as ChromeTabItem;                          if(shiftedTab != this.draggedTab)                          {                              StickyReanimate(shiftedTab' changed * (this.currentTabWidth - this.overlap)' .01);                          }                      }                  }              }
Magic Number,ChromeTabs,ChromeTabPanel,C:\repos\realistschuckle_wpfchrometabs\ChromeTabs\ChromeTabPanel.cs,OnPreviewMouseMove,The following statement contains a magic number: if(margin.Left != 0)              {                  int guardValue = Interlocked.Increment(ref this.captureGuard);                  if(guardValue == 1)                  {                      this.originalIndex = this.draggedTab.Index;                      this.slideIndex = this.originalIndex + 1;                      this.slideIntervals = new List<double>();                      this.slideIntervals.Add(double.NegativeInfinity);                      for(int i = 1; i <= this.Children.Count; i += 1)                      {                          var diff = i - this.slideIndex;                          var sign = diff == 0 ? 0 : diff / Math.Abs(diff);                          var bound = Math.Min(1' Math.Abs(diff)) * ((sign * this.currentTabWidth / 3) + ((Math.Abs(diff) < 2) ? 0 : (diff - sign) * (this.currentTabWidth - this.overlap)));                          this.slideIntervals.Add(bound);                      }                      this.slideIntervals.Add(double.PositiveInfinity);                      this.CaptureMouse();                  }                  else                  {                      int changed = 0;                      if(margin.Left < this.slideIntervals[this.slideIndex - 1])                      {                          SwapSlideInterval(this.slideIndex - 1);                          this.slideIndex -= 1;                          changed = 1;                      }                      else if(margin.Left > this.slideIntervals[this.slideIndex + 1])                      {                          SwapSlideInterval(this.slideIndex + 1);                          this.slideIndex += 1;                          changed = -1;                      }                      if(changed != 0)                      {                          var rightedOriginalIndex = this.originalIndex + 1;                          var diff = 1;                          if(changed > 0 && this.slideIndex >= rightedOriginalIndex)                          {                              changed = 0;                              diff = 0;                          }                          else if(changed < 0 && this.slideIndex <= rightedOriginalIndex)                          {                              changed = 0;                              diff = 2;                          }                          ChromeTabItem shiftedTab = this.Children[this.slideIndex - diff] as ChromeTabItem;                          if(shiftedTab != this.draggedTab)                          {                              StickyReanimate(shiftedTab' changed * (this.currentTabWidth - this.overlap)' .01);                          }                      }                  }              }
Magic Number,ChromeTabs,ChromeTabPanel,C:\repos\realistschuckle_wpfchrometabs\ChromeTabs\ChromeTabPanel.cs,OnPreviewMouseLeftButtonUp,The following statement contains a magic number: if(this.IsMouseCaptured)              {                  Mouse.Capture(null);                    double offset = 0;                  if(this.slideIndex < this.originalIndex + 1)                  {                      offset = this.slideIntervals[this.slideIndex + 1] - 2 * this.currentTabWidth / 3 + this.overlap;                  }                  else if(this.slideIndex > this.originalIndex + 1)                  {                      offset = this.slideIntervals[this.slideIndex - 1] + 2 * this.currentTabWidth / 3 - this.overlap;                  }                  Console.WriteLine(offset);                  Action completed = () =>                  {                      if(this.draggedTab != null)                      {                          ParentTabControl.ChangeSelectedItem(this.draggedTab);                          this.draggedTab.Margin = new Thickness(offset' 0' -offset' 0);                          this.draggedTab = null;                          this.captureGuard = 0;                          ParentTabControl.MoveTab(this.originalIndex' this.slideIndex - 1);                      }                  };                  Reanimate(this.draggedTab' offset' .1' completed);              }              else              {                  if(this.draggedTab != null)                  {                      ParentTabControl.ChangeSelectedItem(this.draggedTab);                      this.draggedTab.Margin = new Thickness(0);                  }                  this.draggedTab = null;                  this.captureGuard = 0;              }
Magic Number,ChromeTabs,ChromeTabPanel,C:\repos\realistschuckle_wpfchrometabs\ChromeTabs\ChromeTabPanel.cs,OnPreviewMouseLeftButtonUp,The following statement contains a magic number: if(this.IsMouseCaptured)              {                  Mouse.Capture(null);                    double offset = 0;                  if(this.slideIndex < this.originalIndex + 1)                  {                      offset = this.slideIntervals[this.slideIndex + 1] - 2 * this.currentTabWidth / 3 + this.overlap;                  }                  else if(this.slideIndex > this.originalIndex + 1)                  {                      offset = this.slideIntervals[this.slideIndex - 1] + 2 * this.currentTabWidth / 3 - this.overlap;                  }                  Console.WriteLine(offset);                  Action completed = () =>                  {                      if(this.draggedTab != null)                      {                          ParentTabControl.ChangeSelectedItem(this.draggedTab);                          this.draggedTab.Margin = new Thickness(offset' 0' -offset' 0);                          this.draggedTab = null;                          this.captureGuard = 0;                          ParentTabControl.MoveTab(this.originalIndex' this.slideIndex - 1);                      }                  };                  Reanimate(this.draggedTab' offset' .1' completed);              }              else              {                  if(this.draggedTab != null)                  {                      ParentTabControl.ChangeSelectedItem(this.draggedTab);                      this.draggedTab.Margin = new Thickness(0);                  }                  this.draggedTab = null;                  this.captureGuard = 0;              }
Magic Number,ChromeTabs,ChromeTabPanel,C:\repos\realistschuckle_wpfchrometabs\ChromeTabs\ChromeTabPanel.cs,OnPreviewMouseLeftButtonUp,The following statement contains a magic number: if(this.IsMouseCaptured)              {                  Mouse.Capture(null);                    double offset = 0;                  if(this.slideIndex < this.originalIndex + 1)                  {                      offset = this.slideIntervals[this.slideIndex + 1] - 2 * this.currentTabWidth / 3 + this.overlap;                  }                  else if(this.slideIndex > this.originalIndex + 1)                  {                      offset = this.slideIntervals[this.slideIndex - 1] + 2 * this.currentTabWidth / 3 - this.overlap;                  }                  Console.WriteLine(offset);                  Action completed = () =>                  {                      if(this.draggedTab != null)                      {                          ParentTabControl.ChangeSelectedItem(this.draggedTab);                          this.draggedTab.Margin = new Thickness(offset' 0' -offset' 0);                          this.draggedTab = null;                          this.captureGuard = 0;                          ParentTabControl.MoveTab(this.originalIndex' this.slideIndex - 1);                      }                  };                  Reanimate(this.draggedTab' offset' .1' completed);              }              else              {                  if(this.draggedTab != null)                  {                      ParentTabControl.ChangeSelectedItem(this.draggedTab);                      this.draggedTab.Margin = new Thickness(0);                  }                  this.draggedTab = null;                  this.captureGuard = 0;              }
Magic Number,ChromeTabs,ChromeTabPanel,C:\repos\realistschuckle_wpfchrometabs\ChromeTabs\ChromeTabPanel.cs,OnPreviewMouseLeftButtonUp,The following statement contains a magic number: if(this.IsMouseCaptured)              {                  Mouse.Capture(null);                    double offset = 0;                  if(this.slideIndex < this.originalIndex + 1)                  {                      offset = this.slideIntervals[this.slideIndex + 1] - 2 * this.currentTabWidth / 3 + this.overlap;                  }                  else if(this.slideIndex > this.originalIndex + 1)                  {                      offset = this.slideIntervals[this.slideIndex - 1] + 2 * this.currentTabWidth / 3 - this.overlap;                  }                  Console.WriteLine(offset);                  Action completed = () =>                  {                      if(this.draggedTab != null)                      {                          ParentTabControl.ChangeSelectedItem(this.draggedTab);                          this.draggedTab.Margin = new Thickness(offset' 0' -offset' 0);                          this.draggedTab = null;                          this.captureGuard = 0;                          ParentTabControl.MoveTab(this.originalIndex' this.slideIndex - 1);                      }                  };                  Reanimate(this.draggedTab' offset' .1' completed);              }              else              {                  if(this.draggedTab != null)                  {                      ParentTabControl.ChangeSelectedItem(this.draggedTab);                      this.draggedTab.Margin = new Thickness(0);                  }                  this.draggedTab = null;                  this.captureGuard = 0;              }
Magic Number,ChromeTabs,ChromeTabPanel,C:\repos\realistschuckle_wpfchrometabs\ChromeTabs\ChromeTabPanel.cs,OnPreviewMouseLeftButtonUp,The following statement contains a magic number: if(this.IsMouseCaptured)              {                  Mouse.Capture(null);                    double offset = 0;                  if(this.slideIndex < this.originalIndex + 1)                  {                      offset = this.slideIntervals[this.slideIndex + 1] - 2 * this.currentTabWidth / 3 + this.overlap;                  }                  else if(this.slideIndex > this.originalIndex + 1)                  {                      offset = this.slideIntervals[this.slideIndex - 1] + 2 * this.currentTabWidth / 3 - this.overlap;                  }                  Console.WriteLine(offset);                  Action completed = () =>                  {                      if(this.draggedTab != null)                      {                          ParentTabControl.ChangeSelectedItem(this.draggedTab);                          this.draggedTab.Margin = new Thickness(offset' 0' -offset' 0);                          this.draggedTab = null;                          this.captureGuard = 0;                          ParentTabControl.MoveTab(this.originalIndex' this.slideIndex - 1);                      }                  };                  Reanimate(this.draggedTab' offset' .1' completed);              }              else              {                  if(this.draggedTab != null)                  {                      ParentTabControl.ChangeSelectedItem(this.draggedTab);                      this.draggedTab.Margin = new Thickness(0);                  }                  this.draggedTab = null;                  this.captureGuard = 0;              }
