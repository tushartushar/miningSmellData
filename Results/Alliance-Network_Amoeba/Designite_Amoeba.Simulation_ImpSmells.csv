Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,MetadataUploadAndDownload,Cyclomatic complexity of the method is 12
Long Statement,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,MetadataUploadAndDownload,The length of the statement  "                    multicastMetadata = new MulticastMetadata("Test"' tag' DateTime.UtcNow' metadata' digitalSignature' null' tokenSource.Token); " is 125.
Long Statement,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,MessageUploadAndDownload,The length of the statement  "                        _callback.Invoke($"{sw.Elapsed.ToString("hh\\:mm\\:ss")}: Success {NetworkConverter.ToBase64UrlString(metadata.Hash.Value)}"); " is 126.
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,CreateCoreManager,The following statement contains a magic number: listener.Start(3);
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,ConnectCap,The following statement contains a magic number: try              {                  var regex = new Regex(@"(.*?):(.*)");                  var match = regex.Match(uri);                    var ipAddress = IPAddress.Parse(match.Groups[1].Value);                  int port = int.Parse(match.Groups[2].Value);                    return new SocketCap(Connect(new IPEndPoint(ipAddress' port)));              }              catch (Exception)              {                  return null;              }
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,Connect,The following statement contains a magic number: try              {                  socket = new Socket(remoteEndPoint.AddressFamily' SocketType.Stream' ProtocolType.Tcp);                  socket.SendTimeout = 1000 * 10;                  socket.ReceiveTimeout = 1000 * 10;                  socket.Connect(remoteEndPoint);                    return socket;              }              catch (SocketException)              {                  if (socket != null) socket.Dispose();              }
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,Connect,The following statement contains a magic number: try              {                  socket = new Socket(remoteEndPoint.AddressFamily' SocketType.Stream' ProtocolType.Tcp);                  socket.SendTimeout = 1000 * 10;                  socket.ReceiveTimeout = 1000 * 10;                  socket.Connect(remoteEndPoint);                    return socket;              }              catch (SocketException)              {                  if (socket != null) socket.Dispose();              }
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,Connect,The following statement contains a magic number: try              {                  socket = new Socket(remoteEndPoint.AddressFamily' SocketType.Stream' ProtocolType.Tcp);                  socket.SendTimeout = 1000 * 10;                  socket.ReceiveTimeout = 1000 * 10;                  socket.Connect(remoteEndPoint);                    return socket;              }              catch (SocketException)              {                  if (socket != null) socket.Dispose();              }
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,Connect,The following statement contains a magic number: try              {                  socket = new Socket(remoteEndPoint.AddressFamily' SocketType.Stream' ProtocolType.Tcp);                  socket.SendTimeout = 1000 * 10;                  socket.ReceiveTimeout = 1000 * 10;                  socket.Connect(remoteEndPoint);                    return socket;              }              catch (SocketException)              {                  if (socket != null) socket.Dispose();              }
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,Test_SendReceive,The following statement contains a magic number: try              {                  for (int i = 0; i < 30; i++)                  {                      var wrapper = this.CreateCoreManager(60000 + i);                      wrapper.Value.Start();                      wrapperList.Add(wrapper);                  }                    foreach (var wrapper in wrapperList)                  {                      wrapper.Value.SetCloudLocations(wrapperList.Select(n => n.Value.MyLocation));                  }                    for (; ; )                  {                      Thread.Sleep(1000);                        int average = wrapperList.Select(n => n.Value.Report.Network.CloudNodeCount).Sum() / wrapperList.Count;                      if (average >= wrapperList.Count - 2) break;                  }                    //this.MetadataUploadAndDownload(wrapperList.Select(n => n.Value));                  this.MessageUploadAndDownload(wrapperList.Select(n => n.Value));              }              finally              {                  Parallel.ForEach(wrapperList' wrapper =>                  {                      wrapper.Dispose();                  });              }
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,Test_SendReceive,The following statement contains a magic number: try              {                  for (int i = 0; i < 30; i++)                  {                      var wrapper = this.CreateCoreManager(60000 + i);                      wrapper.Value.Start();                      wrapperList.Add(wrapper);                  }                    foreach (var wrapper in wrapperList)                  {                      wrapper.Value.SetCloudLocations(wrapperList.Select(n => n.Value.MyLocation));                  }                    for (; ; )                  {                      Thread.Sleep(1000);                        int average = wrapperList.Select(n => n.Value.Report.Network.CloudNodeCount).Sum() / wrapperList.Count;                      if (average >= wrapperList.Count - 2) break;                  }                    //this.MetadataUploadAndDownload(wrapperList.Select(n => n.Value));                  this.MessageUploadAndDownload(wrapperList.Select(n => n.Value));              }              finally              {                  Parallel.ForEach(wrapperList' wrapper =>                  {                      wrapper.Dispose();                  });              }
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,Test_SendReceive,The following statement contains a magic number: try              {                  for (int i = 0; i < 30; i++)                  {                      var wrapper = this.CreateCoreManager(60000 + i);                      wrapper.Value.Start();                      wrapperList.Add(wrapper);                  }                    foreach (var wrapper in wrapperList)                  {                      wrapper.Value.SetCloudLocations(wrapperList.Select(n => n.Value.MyLocation));                  }                    for (; ; )                  {                      Thread.Sleep(1000);                        int average = wrapperList.Select(n => n.Value.Report.Network.CloudNodeCount).Sum() / wrapperList.Count;                      if (average >= wrapperList.Count - 2) break;                  }                    //this.MetadataUploadAndDownload(wrapperList.Select(n => n.Value));                  this.MessageUploadAndDownload(wrapperList.Select(n => n.Value));              }              finally              {                  Parallel.ForEach(wrapperList' wrapper =>                  {                      wrapper.Dispose();                  });              }
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,Test_SendReceive,The following statement contains a magic number: try              {                  for (int i = 0; i < 30; i++)                  {                      var wrapper = this.CreateCoreManager(60000 + i);                      wrapper.Value.Start();                      wrapperList.Add(wrapper);                  }                    foreach (var wrapper in wrapperList)                  {                      wrapper.Value.SetCloudLocations(wrapperList.Select(n => n.Value.MyLocation));                  }                    for (; ; )                  {                      Thread.Sleep(1000);                        int average = wrapperList.Select(n => n.Value.Report.Network.CloudNodeCount).Sum() / wrapperList.Count;                      if (average >= wrapperList.Count - 2) break;                  }                    //this.MetadataUploadAndDownload(wrapperList.Select(n => n.Value));                  this.MessageUploadAndDownload(wrapperList.Select(n => n.Value));              }              finally              {                  Parallel.ForEach(wrapperList' wrapper =>                  {                      wrapper.Dispose();                  });              }
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,MetadataUploadAndDownload,The following statement contains a magic number: Parallel.ForEach(coreManagerList' coreManager =>              {                  coreManager.Resize((long)1024 * 1024 * 256).Wait();              });
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,MetadataUploadAndDownload,The following statement contains a magic number: Parallel.ForEach(coreManagerList' coreManager =>              {                  coreManager.Resize((long)1024 * 1024 * 256).Wait();              });
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,MetadataUploadAndDownload,The following statement contains a magic number: Parallel.ForEach(coreManagerList' coreManager =>              {                  coreManager.Resize((long)1024 * 1024 * 256).Wait();              });
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,MetadataUploadAndDownload,The following statement contains a magic number: for (int i = 0; i < 8; i++)              {                  BroadcastMetadata broadcastMetadata;                  {                      var digitalSignature = new DigitalSignature("Test"' DigitalSignatureAlgorithm.EcDsaP521_Sha256_v3);                      var metadata = new Metadata(0' new Hash(HashAlgorithm.Sha256' _random.GetBytes(32)));                      broadcastMetadata = new BroadcastMetadata("Test"' DateTime.UtcNow' metadata' digitalSignature);                  }                    coreManagerList[_random.Next(1' coreManagerList.Count)].UploadMetadata(broadcastMetadata);                  broadcastMetadataList.Add(broadcastMetadata);              }
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,MetadataUploadAndDownload,The following statement contains a magic number: for (int i = 0; i < 8; i++)              {                  BroadcastMetadata broadcastMetadata;                  {                      var digitalSignature = new DigitalSignature("Test"' DigitalSignatureAlgorithm.EcDsaP521_Sha256_v3);                      var metadata = new Metadata(0' new Hash(HashAlgorithm.Sha256' _random.GetBytes(32)));                      broadcastMetadata = new BroadcastMetadata("Test"' DateTime.UtcNow' metadata' digitalSignature);                  }                    coreManagerList[_random.Next(1' coreManagerList.Count)].UploadMetadata(broadcastMetadata);                  broadcastMetadataList.Add(broadcastMetadata);              }
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,MetadataUploadAndDownload,The following statement contains a magic number: for (int i = 0; i < 8; i++)              {                  UnicastMetadata unicastMetadata;                  {                      var targetSignature = new DigitalSignature("Test"' DigitalSignatureAlgorithm.EcDsaP521_Sha256_v3).GetSignature();                      var digitalSignature = new DigitalSignature("Test"' DigitalSignatureAlgorithm.EcDsaP521_Sha256_v3);                      var metadata = new Metadata(0' new Hash(HashAlgorithm.Sha256' _random.GetBytes(32)));                      unicastMetadata = new UnicastMetadata("Test"' targetSignature' DateTime.UtcNow' metadata' digitalSignature);                  }                    coreManagerList[_random.Next(1' coreManagerList.Count)].UploadMetadata(unicastMetadata);                  unicastMetadataList.Add(unicastMetadata);              }
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,MetadataUploadAndDownload,The following statement contains a magic number: for (int i = 0; i < 8; i++)              {                  UnicastMetadata unicastMetadata;                  {                      var targetSignature = new DigitalSignature("Test"' DigitalSignatureAlgorithm.EcDsaP521_Sha256_v3).GetSignature();                      var digitalSignature = new DigitalSignature("Test"' DigitalSignatureAlgorithm.EcDsaP521_Sha256_v3);                      var metadata = new Metadata(0' new Hash(HashAlgorithm.Sha256' _random.GetBytes(32)));                      unicastMetadata = new UnicastMetadata("Test"' targetSignature' DateTime.UtcNow' metadata' digitalSignature);                  }                    coreManagerList[_random.Next(1' coreManagerList.Count)].UploadMetadata(unicastMetadata);                  unicastMetadataList.Add(unicastMetadata);              }
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,MetadataUploadAndDownload,The following statement contains a magic number: for (int i = 0; i < 8; i++)              {                  MulticastMetadata multicastMetadata;                  using (var tokenSource = new CancellationTokenSource())                  {                      var tag = new Tag("Test"' _random.GetBytes(32));                      var digitalSignature = new DigitalSignature("Test"' DigitalSignatureAlgorithm.EcDsaP521_Sha256_v3);                      var metadata = new Metadata(0' new Hash(HashAlgorithm.Sha256' _random.GetBytes(32)));                      multicastMetadata = new MulticastMetadata("Test"' tag' DateTime.UtcNow' metadata' digitalSignature' null' tokenSource.Token);                  }                    coreManagerList[_random.Next(1' coreManagerList.Count)].UploadMetadata(multicastMetadata);                  multicastMetadataList.Add(multicastMetadata);              }
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,MetadataUploadAndDownload,The following statement contains a magic number: for (int i = 0; i < 8; i++)              {                  MulticastMetadata multicastMetadata;                  using (var tokenSource = new CancellationTokenSource())                  {                      var tag = new Tag("Test"' _random.GetBytes(32));                      var digitalSignature = new DigitalSignature("Test"' DigitalSignatureAlgorithm.EcDsaP521_Sha256_v3);                      var metadata = new Metadata(0' new Hash(HashAlgorithm.Sha256' _random.GetBytes(32)));                      multicastMetadata = new MulticastMetadata("Test"' tag' DateTime.UtcNow' metadata' digitalSignature' null' tokenSource.Token);                  }                    coreManagerList[_random.Next(1' coreManagerList.Count)].UploadMetadata(multicastMetadata);                  multicastMetadataList.Add(multicastMetadata);              }
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,MetadataUploadAndDownload,The following statement contains a magic number: for (int i = 0; i < 8; i++)              {                  MulticastMetadata multicastMetadata;                  using (var tokenSource = new CancellationTokenSource())                  {                      var tag = new Tag("Test"' _random.GetBytes(32));                      var digitalSignature = new DigitalSignature("Test"' DigitalSignatureAlgorithm.EcDsaP521_Sha256_v3);                      var metadata = new Metadata(0' new Hash(HashAlgorithm.Sha256' _random.GetBytes(32)));                      multicastMetadata = new MulticastMetadata("Test"' tag' DateTime.UtcNow' metadata' digitalSignature' null' tokenSource.Token);                  }                    coreManagerList[_random.Next(1' coreManagerList.Count)].UploadMetadata(multicastMetadata);                  multicastMetadataList.Add(multicastMetadata);              }
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,MetadataUploadAndDownload,The following statement contains a magic number: {                  var targetCoreManager = coreManagerList[0];                    for (; ; )                  {                      Thread.Sleep(1000);                        foreach (var broadcastMetadata in broadcastMetadataList.ToArray())                      {                          if (targetCoreManager.GetBroadcastMetadata(broadcastMetadata.Certificate.GetSignature()' "Test") == broadcastMetadata)                          {                              broadcastMetadataList.Remove(broadcastMetadata);                                _callback.Invoke($"{sw.Elapsed.ToString("hh\\:mm\\:ss")}: Success BroadcastMetadata");                          }                      }                        foreach (var unicastMetadata in unicastMetadataList.ToArray())                      {                          if (targetCoreManager.GetUnicastMetadatas(unicastMetadata.Signature' "Test").Contains(unicastMetadata))                          {                              unicastMetadataList.Remove(unicastMetadata);                                _callback.Invoke($"{sw.Elapsed.ToString("hh\\:mm\\:ss")}: Success UnicastMetadata");                          }                      }                        foreach (var multicastMetadata in multicastMetadataList.ToArray())                      {                          if (targetCoreManager.GetMulticastMetadatas(multicastMetadata.Tag' "Test").Contains(multicastMetadata))                          {                              multicastMetadataList.Remove(multicastMetadata);                                _callback.Invoke($"{sw.Elapsed.ToString("hh\\:mm\\:ss")}: Success MulticastMetadata");                          }                      }                        if (broadcastMetadataList.Count == 0 && unicastMetadataList.Count == 0 && multicastMetadataList.Count == 0) break;                  }              }
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,MessageUploadAndDownload,The following statement contains a magic number: Parallel.ForEach(coreManagerList' coreManager =>              {                  coreManager.Resize((long)1024 * 1024 * 1024 * 32).Wait();              });
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,MessageUploadAndDownload,The following statement contains a magic number: Parallel.ForEach(coreManagerList' coreManager =>              {                  coreManager.Resize((long)1024 * 1024 * 1024 * 32).Wait();              });
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,MessageUploadAndDownload,The following statement contains a magic number: Parallel.ForEach(coreManagerList' coreManager =>              {                  coreManager.Resize((long)1024 * 1024 * 1024 * 32).Wait();              });
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,MessageUploadAndDownload,The following statement contains a magic number: Parallel.ForEach(coreManagerList' coreManager =>              {                  coreManager.Resize((long)1024 * 1024 * 1024 * 32).Wait();              });
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,MessageUploadAndDownload,The following statement contains a magic number: Parallel.For(0' 30' new ParallelOptions() { MaxDegreeOfParallelism = 3 }' i =>              {                  var random = RandomProvider.GetThreadRandom();                    using (var stream = new BufferStream(_bufferManager))                  {                      using (var safeBuffer = _bufferManager.CreateSafeBuffer(1024 * 4))                      {                          for (long remain = (long)1024 * 1024 * 32; remain > 0; remain = Math.Max(0' remain - safeBuffer.Value.Length))                          {                              int length = (int)Math.Min(remain' safeBuffer.Value.Length);                                random.NextBytes(safeBuffer.Value);                              stream.Write(safeBuffer.Value' 0' length);                          }                      }                        stream.Seek(0' SeekOrigin.Begin);                      hashList.Add(new Hash(HashAlgorithm.Sha256' Sha256.ComputeHash(new WrapperStream(stream' true))));                        stream.Seek(0' SeekOrigin.Begin);                      using (var tokenSource = new CancellationTokenSource())                      {                          metadataList.Add(coreManagerList[i].VolatileSetStream(stream' new TimeSpan(1' 0' 0)' tokenSource.Token).Result);                      }                  }              });
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,MessageUploadAndDownload,The following statement contains a magic number: Parallel.For(0' 30' new ParallelOptions() { MaxDegreeOfParallelism = 3 }' i =>              {                  var random = RandomProvider.GetThreadRandom();                    using (var stream = new BufferStream(_bufferManager))                  {                      using (var safeBuffer = _bufferManager.CreateSafeBuffer(1024 * 4))                      {                          for (long remain = (long)1024 * 1024 * 32; remain > 0; remain = Math.Max(0' remain - safeBuffer.Value.Length))                          {                              int length = (int)Math.Min(remain' safeBuffer.Value.Length);                                random.NextBytes(safeBuffer.Value);                              stream.Write(safeBuffer.Value' 0' length);                          }                      }                        stream.Seek(0' SeekOrigin.Begin);                      hashList.Add(new Hash(HashAlgorithm.Sha256' Sha256.ComputeHash(new WrapperStream(stream' true))));                        stream.Seek(0' SeekOrigin.Begin);                      using (var tokenSource = new CancellationTokenSource())                      {                          metadataList.Add(coreManagerList[i].VolatileSetStream(stream' new TimeSpan(1' 0' 0)' tokenSource.Token).Result);                      }                  }              });
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,MessageUploadAndDownload,The following statement contains a magic number: Parallel.For(0' 30' new ParallelOptions() { MaxDegreeOfParallelism = 3 }' i =>              {                  var random = RandomProvider.GetThreadRandom();                    using (var stream = new BufferStream(_bufferManager))                  {                      using (var safeBuffer = _bufferManager.CreateSafeBuffer(1024 * 4))                      {                          for (long remain = (long)1024 * 1024 * 32; remain > 0; remain = Math.Max(0' remain - safeBuffer.Value.Length))                          {                              int length = (int)Math.Min(remain' safeBuffer.Value.Length);                                random.NextBytes(safeBuffer.Value);                              stream.Write(safeBuffer.Value' 0' length);                          }                      }                        stream.Seek(0' SeekOrigin.Begin);                      hashList.Add(new Hash(HashAlgorithm.Sha256' Sha256.ComputeHash(new WrapperStream(stream' true))));                        stream.Seek(0' SeekOrigin.Begin);                      using (var tokenSource = new CancellationTokenSource())                      {                          metadataList.Add(coreManagerList[i].VolatileSetStream(stream' new TimeSpan(1' 0' 0)' tokenSource.Token).Result);                      }                  }              });
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,MessageUploadAndDownload,The following statement contains a magic number: Parallel.For(0' 30' new ParallelOptions() { MaxDegreeOfParallelism = 3 }' i =>              {                  var random = RandomProvider.GetThreadRandom();                    using (var stream = new BufferStream(_bufferManager))                  {                      using (var safeBuffer = _bufferManager.CreateSafeBuffer(1024 * 4))                      {                          for (long remain = (long)1024 * 1024 * 32; remain > 0; remain = Math.Max(0' remain - safeBuffer.Value.Length))                          {                              int length = (int)Math.Min(remain' safeBuffer.Value.Length);                                random.NextBytes(safeBuffer.Value);                              stream.Write(safeBuffer.Value' 0' length);                          }                      }                        stream.Seek(0' SeekOrigin.Begin);                      hashList.Add(new Hash(HashAlgorithm.Sha256' Sha256.ComputeHash(new WrapperStream(stream' true))));                        stream.Seek(0' SeekOrigin.Begin);                      using (var tokenSource = new CancellationTokenSource())                      {                          metadataList.Add(coreManagerList[i].VolatileSetStream(stream' new TimeSpan(1' 0' 0)' tokenSource.Token).Result);                      }                  }              });
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,MessageUploadAndDownload,The following statement contains a magic number: Parallel.For(0' 30' new ParallelOptions() { MaxDegreeOfParallelism = 3 }' i =>              {                  var random = RandomProvider.GetThreadRandom();                    using (var stream = new BufferStream(_bufferManager))                  {                      using (var safeBuffer = _bufferManager.CreateSafeBuffer(1024 * 4))                      {                          for (long remain = (long)1024 * 1024 * 32; remain > 0; remain = Math.Max(0' remain - safeBuffer.Value.Length))                          {                              int length = (int)Math.Min(remain' safeBuffer.Value.Length);                                random.NextBytes(safeBuffer.Value);                              stream.Write(safeBuffer.Value' 0' length);                          }                      }                        stream.Seek(0' SeekOrigin.Begin);                      hashList.Add(new Hash(HashAlgorithm.Sha256' Sha256.ComputeHash(new WrapperStream(stream' true))));                        stream.Seek(0' SeekOrigin.Begin);                      using (var tokenSource = new CancellationTokenSource())                      {                          metadataList.Add(coreManagerList[i].VolatileSetStream(stream' new TimeSpan(1' 0' 0)' tokenSource.Token).Result);                      }                  }              });
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,MessageUploadAndDownload,The following statement contains a magic number: Parallel.For(0' 30' new ParallelOptions() { MaxDegreeOfParallelism = 3 }' i =>              {                  var random = RandomProvider.GetThreadRandom();                    using (var stream = new BufferStream(_bufferManager))                  {                      using (var safeBuffer = _bufferManager.CreateSafeBuffer(1024 * 4))                      {                          for (long remain = (long)1024 * 1024 * 32; remain > 0; remain = Math.Max(0' remain - safeBuffer.Value.Length))                          {                              int length = (int)Math.Min(remain' safeBuffer.Value.Length);                                random.NextBytes(safeBuffer.Value);                              stream.Write(safeBuffer.Value' 0' length);                          }                      }                        stream.Seek(0' SeekOrigin.Begin);                      hashList.Add(new Hash(HashAlgorithm.Sha256' Sha256.ComputeHash(new WrapperStream(stream' true))));                        stream.Seek(0' SeekOrigin.Begin);                      using (var tokenSource = new CancellationTokenSource())                      {                          metadataList.Add(coreManagerList[i].VolatileSetStream(stream' new TimeSpan(1' 0' 0)' tokenSource.Token).Result);                      }                  }              });
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,MessageUploadAndDownload,The following statement contains a magic number: Parallel.For(0' 30' new ParallelOptions() { MaxDegreeOfParallelism = 3 }' i =>              {                  var random = RandomProvider.GetThreadRandom();                    using (var stream = new BufferStream(_bufferManager))                  {                      using (var safeBuffer = _bufferManager.CreateSafeBuffer(1024 * 4))                      {                          for (long remain = (long)1024 * 1024 * 32; remain > 0; remain = Math.Max(0' remain - safeBuffer.Value.Length))                          {                              int length = (int)Math.Min(remain' safeBuffer.Value.Length);                                random.NextBytes(safeBuffer.Value);                              stream.Write(safeBuffer.Value' 0' length);                          }                      }                        stream.Seek(0' SeekOrigin.Begin);                      hashList.Add(new Hash(HashAlgorithm.Sha256' Sha256.ComputeHash(new WrapperStream(stream' true))));                        stream.Seek(0' SeekOrigin.Begin);                      using (var tokenSource = new CancellationTokenSource())                      {                          metadataList.Add(coreManagerList[i].VolatileSetStream(stream' new TimeSpan(1' 0' 0)' tokenSource.Token).Result);                      }                  }              });
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,MessageUploadAndDownload,The following statement contains a magic number: Parallel.ForEach(metadataList' metadata =>              {                  for (; ; )                  {                      Thread.Sleep(1000);                        Stream stream = null;                        try                      {                          stream = coreManagerList[0].VolatileGetStream(metadata' 1024 * 1024 * 256);                          if (stream == null) continue;                            var hash = new Hash(HashAlgorithm.Sha256' Sha256.ComputeHash(stream));                          if (!hashList.Contains(hash)) throw new ArgumentException("Broken");                            _callback.Invoke($"{sw.Elapsed.ToString("hh\\:mm\\:ss")}: Success {NetworkConverter.ToBase64UrlString(metadata.Hash.Value)}");                            return;                      }                      finally                      {                          if (stream != null)                          {                              stream.Dispose();                          }                      }                  }              });
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,MessageUploadAndDownload,The following statement contains a magic number: Parallel.ForEach(metadataList' metadata =>              {                  for (; ; )                  {                      Thread.Sleep(1000);                        Stream stream = null;                        try                      {                          stream = coreManagerList[0].VolatileGetStream(metadata' 1024 * 1024 * 256);                          if (stream == null) continue;                            var hash = new Hash(HashAlgorithm.Sha256' Sha256.ComputeHash(stream));                          if (!hashList.Contains(hash)) throw new ArgumentException("Broken");                            _callback.Invoke($"{sw.Elapsed.ToString("hh\\:mm\\:ss")}: Success {NetworkConverter.ToBase64UrlString(metadata.Hash.Value)}");                            return;                      }                      finally                      {                          if (stream != null)                          {                              stream.Dispose();                          }                      }                  }              });
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,MessageUploadAndDownload,The following statement contains a magic number: Parallel.ForEach(metadataList' metadata =>              {                  for (; ; )                  {                      Thread.Sleep(1000);                        Stream stream = null;                        try                      {                          stream = coreManagerList[0].VolatileGetStream(metadata' 1024 * 1024 * 256);                          if (stream == null) continue;                            var hash = new Hash(HashAlgorithm.Sha256' Sha256.ComputeHash(stream));                          if (!hashList.Contains(hash)) throw new ArgumentException("Broken");                            _callback.Invoke($"{sw.Elapsed.ToString("hh\\:mm\\:ss")}: Success {NetworkConverter.ToBase64UrlString(metadata.Hash.Value)}");                            return;                      }                      finally                      {                          if (stream != null)                          {                              stream.Dispose();                          }                      }                  }              });
Magic Number,Amoeba.Simulation,CoreManagerTests,C:\repos\Alliance-Network_Amoeba\Amoeba.Simulation\Sources\IntegrationTests\Core\CoreManagerTests.cs,MessageUploadAndDownload,The following statement contains a magic number: Parallel.ForEach(metadataList' metadata =>              {                  for (; ; )                  {                      Thread.Sleep(1000);                        Stream stream = null;                        try                      {                          stream = coreManagerList[0].VolatileGetStream(metadata' 1024 * 1024 * 256);                          if (stream == null) continue;                            var hash = new Hash(HashAlgorithm.Sha256' Sha256.ComputeHash(stream));                          if (!hashList.Contains(hash)) throw new ArgumentException("Broken");                            _callback.Invoke($"{sw.Elapsed.ToString("hh\\:mm\\:ss")}: Success {NetworkConverter.ToBase64UrlString(metadata.Hash.Value)}");                            return;                      }                      finally                      {                          if (stream != null)                          {                              stream.Dispose();                          }                      }                  }              });
