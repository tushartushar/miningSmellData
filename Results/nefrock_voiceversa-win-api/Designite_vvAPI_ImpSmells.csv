Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Sipek.Common.CallControl,CCallManager,C:\repos\nefrock_voiceversa-win-api\vvAPI\Common\CallControl\callManager.cs,OnCallStateChanged,Cyclomatic complexity of the method is 15
Complex Method,Sipek.Common.CallControl,CStateMachine,C:\repos\nefrock_voiceversa-win-api\vvAPI\Common\CallControl\callStateMachine.cs,StartTimer,Cyclomatic complexity of the method is 9
Complex Method,Sipek.Common.CallControl,CStateMachine,C:\repos\nefrock_voiceversa-win-api\vvAPI\Common\CallControl\callStateMachine.cs,StopTimer,Cyclomatic complexity of the method is 9
Complex Method,Sipek.Common.CallControl,CStateMachine,C:\repos\nefrock_voiceversa-win-api\vvAPI\Common\CallControl\callStateMachine.cs,ChangeState,Cyclomatic complexity of the method is 25
Long Parameter List,Sipek.Common,ICallLogInterface,C:\repos\nefrock_voiceversa-win-api\vvAPI\Common\ICallLogInterface.cs,addCall,The method has 5 parameters.
Long Parameter List,Sipek.Common,NullCallLogger,C:\repos\nefrock_voiceversa-win-api\vvAPI\Common\ICallLogInterface.cs,addCall,The method has 5 parameters.
Long Parameter List,Sipek.Sip,pjsipRegistrar,C:\repos\nefrock_voiceversa-win-api\vvAPI\Sip\pjsipRegistrar.cs,dll_registerAccount,The method has 7 parameters.
Long Statement,Sipek.Sip,pjsipRegistrar,C:\repos\nefrock_voiceversa-win-api\vvAPI\Sip\pjsipRegistrar.cs,registerAccounts,The length of the statement  "			int accId = dll_registerAccount (uri' reguri' domain' username' password' proxy' (i == Config.DefaultAccountIndex ? true : false)); " is 131.
Empty Catch Block,Sipek.Sip,pjsipStackProxy,C:\repos\nefrock_voiceversa-win-api\vvAPI\Sip\pjsipWrapper.cs,SetTransport,The method has an empty catch block.
Magic Number,Sipek.Common.CallControl,CCallManager,C:\repos\nefrock_voiceversa-win-api\vvAPI\Common\CallControl\callManager.cs,CreateSmartOutboundCall,The following statement contains a magic number: if (this [EStateId.ACTIVE].Count == 0) {  	// create state machine  	IStateMachine call = Factory.createStateMachine ();  	// couldn't create new call instance (max calls?)  	if (call == null) {  		return -1;  	}  	// make call request (stack provides new sessionId)  	int newsession = call.State.makeCall (number' accountId);  	if (newsession == -1) {  		return -1;  	}  	// update call table  	// catch argument exception (same key)!!!!  	try {  		call.Session = newsession;  		_calls.Add (newsession' call);  	}  	catch (ArgumentException) {  		// previous call not released ()  		// first release old one  		_calls [newsession].Destroy ();  		// and then add new one  		_calls.Add (newsession' call);  	}  	return call.Session;  }  else// we have at least one ACTIVE call   {  	// put connected call on hold  	_pendingAction = new PendingAction (EPendingActions.ECreateSession' number' accountId);  	List<IStateMachine> calls = this [EStateId.ACTIVE];  	if (calls.Count > 0) {  		calls [0].State.holdCall ();  	}  	// indicates that new call is pending...  	// At this point we don't know yet if the call will be created or not  	// The call will be created when current call is put on hold (confirmation)!  	return -2;  }  
Magic Number,Sipek.Common.CallControl,CCallManager,C:\repos\nefrock_voiceversa-win-api\vvAPI\Common\CallControl\callManager.cs,CreateSmartOutboundCall,The following statement contains a magic number: return -2;  
Magic Number,Sipek.Common.CallControl,CStateMachine,C:\repos\nefrock_voiceversa-win-api\vvAPI\Common\CallControl\callStateMachine.cs,CStateMachine,The following statement contains a magic number: if (null != _manager) {  	_noreplyTimer = _manager.Factory.createTimer ();  	_noreplyTimer.Interval = 15000;  	// hardcoded to 15s  	_noreplyTimer.Elapsed = new TimerExpiredCallback (_noreplyTimer_Elapsed);  	_releasedTimer = _manager.Factory.createTimer ();  	_releasedTimer.Interval = 5000;  	// hardcoded to 5s  	_releasedTimer.Elapsed = new TimerExpiredCallback (_releasedTimer_Elapsed);  	_noresponseTimer = _manager.Factory.createTimer ();  	_noresponseTimer.Interval = 60000;  	// hardcoded to 60s  	_noresponseTimer.Elapsed = new TimerExpiredCallback (_noresponseTimer_Elapsed);  }  
Magic Number,Sipek.Common.CallControl,CStateMachine,C:\repos\nefrock_voiceversa-win-api\vvAPI\Common\CallControl\callStateMachine.cs,CStateMachine,The following statement contains a magic number: if (null != _manager) {  	_noreplyTimer = _manager.Factory.createTimer ();  	_noreplyTimer.Interval = 15000;  	// hardcoded to 15s  	_noreplyTimer.Elapsed = new TimerExpiredCallback (_noreplyTimer_Elapsed);  	_releasedTimer = _manager.Factory.createTimer ();  	_releasedTimer.Interval = 5000;  	// hardcoded to 5s  	_releasedTimer.Elapsed = new TimerExpiredCallback (_releasedTimer_Elapsed);  	_noresponseTimer = _manager.Factory.createTimer ();  	_noresponseTimer.Interval = 60000;  	// hardcoded to 60s  	_noresponseTimer.Elapsed = new TimerExpiredCallback (_noresponseTimer_Elapsed);  }  
Magic Number,Sipek.Common.CallControl,CStateMachine,C:\repos\nefrock_voiceversa-win-api\vvAPI\Common\CallControl\callStateMachine.cs,CStateMachine,The following statement contains a magic number: if (null != _manager) {  	_noreplyTimer = _manager.Factory.createTimer ();  	_noreplyTimer.Interval = 15000;  	// hardcoded to 15s  	_noreplyTimer.Elapsed = new TimerExpiredCallback (_noreplyTimer_Elapsed);  	_releasedTimer = _manager.Factory.createTimer ();  	_releasedTimer.Interval = 5000;  	// hardcoded to 5s  	_releasedTimer.Elapsed = new TimerExpiredCallback (_releasedTimer_Elapsed);  	_noresponseTimer = _manager.Factory.createTimer ();  	_noresponseTimer.Interval = 60000;  	// hardcoded to 60s  	_noresponseTimer.Elapsed = new TimerExpiredCallback (_noresponseTimer_Elapsed);  }  
Magic Number,Sipek.Common.CallControl,CStateMachine,C:\repos\nefrock_voiceversa-win-api\vvAPI\Common\CallControl\callStateMachine.cs,CStateMachine,The following statement contains a magic number: _noreplyTimer.Interval = 15000;  
Magic Number,Sipek.Common.CallControl,CStateMachine,C:\repos\nefrock_voiceversa-win-api\vvAPI\Common\CallControl\callStateMachine.cs,CStateMachine,The following statement contains a magic number: _releasedTimer.Interval = 5000;  
Magic Number,Sipek.Common.CallControl,CStateMachine,C:\repos\nefrock_voiceversa-win-api\vvAPI\Common\CallControl\callStateMachine.cs,CStateMachine,The following statement contains a magic number: _noresponseTimer.Interval = 60000;  
Magic Number,Sipek.Sip,pjsipCallProxy,C:\repos\nefrock_voiceversa-win-api\vvAPI\Sip\pjsipCallWrapper.cs,alerted,The following statement contains a magic number: dll_answerCall (SessionId' 180);  
Magic Number,Sipek.Sip,pjsipCallProxy,C:\repos\nefrock_voiceversa-win-api\vvAPI\Sip\pjsipCallWrapper.cs,acceptCall,The following statement contains a magic number: dll_answerCall (SessionId' 200);  
Magic Number,Sipek.Sip,pjsipCallProxy,C:\repos\nefrock_voiceversa-win-api\vvAPI\Sip\pjsipCallWrapper.cs,onCallIncoming,The following statement contains a magic number: if (null != uri) {  	// get indices  	int startNum = uri.IndexOf ("<sip:");  	int atPos = uri.IndexOf ('@');  	// search for number  	if ((startNum >= 0) && (atPos > startNum)) {  		number = uri.Substring (startNum + 5' atPos - startNum - 5);  	}  	// extract display name if exists  	if (startNum >= 0) {  		display = uri.Remove (startNum' uri.Length - startNum).Trim ();  	}  	else {  		int semiPos = display.IndexOf (';');  		if (semiPos >= 0) {  			display = display.Remove (semiPos' display.Length - semiPos);  		}  		else {  			int colPos = display.IndexOf (':');  			if (colPos >= 0) {  				display = display.Remove (colPos' display.Length - colPos);  			}  		}  	}  }  
Magic Number,Sipek.Sip,pjsipCallProxy,C:\repos\nefrock_voiceversa-win-api\vvAPI\Sip\pjsipCallWrapper.cs,onCallIncoming,The following statement contains a magic number: if (null != uri) {  	// get indices  	int startNum = uri.IndexOf ("<sip:");  	int atPos = uri.IndexOf ('@');  	// search for number  	if ((startNum >= 0) && (atPos > startNum)) {  		number = uri.Substring (startNum + 5' atPos - startNum - 5);  	}  	// extract display name if exists  	if (startNum >= 0) {  		display = uri.Remove (startNum' uri.Length - startNum).Trim ();  	}  	else {  		int semiPos = display.IndexOf (';');  		if (semiPos >= 0) {  			display = display.Remove (semiPos' display.Length - semiPos);  		}  		else {  			int colPos = display.IndexOf (':');  			if (colPos >= 0) {  				display = display.Remove (colPos' display.Length - colPos);  			}  		}  	}  }  
Magic Number,Sipek.Sip,pjsipCallProxy,C:\repos\nefrock_voiceversa-win-api\vvAPI\Sip\pjsipCallWrapper.cs,onCallIncoming,The following statement contains a magic number: if ((startNum >= 0) && (atPos > startNum)) {  	number = uri.Substring (startNum + 5' atPos - startNum - 5);  }  
Magic Number,Sipek.Sip,pjsipCallProxy,C:\repos\nefrock_voiceversa-win-api\vvAPI\Sip\pjsipCallWrapper.cs,onCallIncoming,The following statement contains a magic number: if ((startNum >= 0) && (atPos > startNum)) {  	number = uri.Substring (startNum + 5' atPos - startNum - 5);  }  
Magic Number,Sipek.Sip,pjsipCallProxy,C:\repos\nefrock_voiceversa-win-api\vvAPI\Sip\pjsipCallWrapper.cs,onCallIncoming,The following statement contains a magic number: number = uri.Substring (startNum + 5' atPos - startNum - 5);  
Magic Number,Sipek.Sip,pjsipCallProxy,C:\repos\nefrock_voiceversa-win-api\vvAPI\Sip\pjsipCallWrapper.cs,onCallIncoming,The following statement contains a magic number: number = uri.Substring (startNum + 5' atPos - startNum - 5);  
Magic Number,Sipek.Sip,pjsipPresenceAndMessaging,C:\repos\nefrock_voiceversa-win-api\vvAPI\Sip\pjsipPresenceAndMessaging.cs,setStatus,The following statement contains a magic number: if ((Config.Accounts.Count > 0) && (Config.Accounts [accId].RegState != 200))  	return -1;  
Missing Default,Sipek.Common.CallControl,CCallManager,C:\repos\nefrock_voiceversa-win-api\vvAPI\Common\CallControl\callManager.cs,OnCallStateChanged,The following switch statement is missing a default case: switch (callState) {  case ESessionState.SESSION_STATE_CALLING:  	//sm.getState().onCalling();  	break;  case ESessionState.SESSION_STATE_EARLY:  	call.State.onAlerting ();  	break;  case ESessionState.SESSION_STATE_CONNECTING:  	call.State.onConnect ();  	break;  case ESessionState.SESSION_STATE_DISCONNECTED:  	call.State.onReleased ();  	break;  }  
Missing Default,Sipek.Common.CallControl,CStateMachine,C:\repos\nefrock_voiceversa-win-api\vvAPI\Common\CallControl\callStateMachine.cs,StartTimer,The following switch statement is missing a default case: switch (ttype) {  case ETimerType.ENOREPLY:  	success = _noreplyTimer.Start ();  	break;  case ETimerType.ERELEASED:  	success = _releasedTimer.Start ();  	break;  case ETimerType.ENORESPONSE:  	success = _noresponseTimer.Start ();  	break;  }  
Missing Default,Sipek.Common.CallControl,CStateMachine,C:\repos\nefrock_voiceversa-win-api\vvAPI\Common\CallControl\callStateMachine.cs,StopTimer,The following switch statement is missing a default case: switch (ttype) {  case ETimerType.ENOREPLY:  	success = _noreplyTimer.Stop ();  	break;  case ETimerType.ERELEASED:  	success = _releasedTimer.Stop ();  	break;  case ETimerType.ENORESPONSE:  	success = _noresponseTimer.Stop ();  	break;  }  
Missing Default,Sipek.Common.CallControl,CStateMachine,C:\repos\nefrock_voiceversa-win-api\vvAPI\Common\CallControl\callStateMachine.cs,ChangeState,The following switch statement is missing a default case: switch (stateId) {  case EStateId.IDLE:  	ChangeState (_stateIdle);  	break;  case EStateId.CONNECTING:  	ChangeState (_stateCalling);  	break;  case EStateId.ALERTING:  	ChangeState (_stateAlerting);  	break;  case EStateId.ACTIVE:  	ChangeState (_stateActive);  	break;  case EStateId.RELEASED:  	ChangeState (_stateReleased);  	break;  case EStateId.INCOMING:  	ChangeState (_stateIncoming);  	break;  case EStateId.HOLDING:  	ChangeState (_stateHolding);  	break;  case EStateId.TERMINATED:  	ChangeState (_stateTerminated);  	break;  }  
Missing Default,Sipek.Sip,pjsipStackProxy,C:\repos\nefrock_voiceversa-win-api\vvAPI\Sip\pjsipWrapper.cs,SetTransport,The following switch statement is missing a default case: switch (Config.Accounts [accountId].TransportMode) {  case ETransportMode.TM_TCP:  	temp = sipuri + ";transport=tcp";  	break;  case ETransportMode.TM_TLS:  	temp = sipuri + ";transport=tls";  	break;  }  
