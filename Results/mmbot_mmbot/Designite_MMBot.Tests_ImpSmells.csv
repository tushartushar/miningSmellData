Implementation smell,Namespace,Class,File,Method,Description
Long Method,MMBot.Tests.CompiledScripts,TeamCity,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\TeamCity.cs,Register,The method has 200 lines of code.
Long Parameter List,MMBot.Tests.CompiledScripts,GoogleImages,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\GoogleImages.cs,ImageMe,The method has 5 parameters. Parameters: msg' query' cb' animated' faces
Long Parameter List,MMBot.Tests.CompiledScripts,TeamCity,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\TeamCity.cs,GetBuilds,The method has 6 parameters. Parameters: robot' msg' project' configuration' amount' callback
Long Parameter List,MMBot.Tests.CompiledScripts,TeamCity,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\TeamCity.cs,MapNameToIdForBuildType,The method has 5 parameters. Parameters: robot' msg' name' project' callback
Long Parameter List,MMBot.Tests.CompiledScripts,TeamCity,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\TeamCity.cs,MapAndKillBuilds,The method has 5 parameters. Parameters: robot' msg' name' id' project
Long Statement,MMBot.Tests,RouterTests,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\RouterTests.cs,WhenReturnJson_WithString_ResponseIsJson,The length of the statement  "            using(var router = await SetupRoute(robot => robot.Router.Get("/json/test/"' context => context.ReturnJson(JsonConvert.SerializeObject(token))))) " is 145.
Long Statement,MMBot.Tests.CompiledScripts,GoogleImages,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\GoogleImages.cs,GetHelp,The length of the statement  "                "mmbot animate me <query> - The same thing as `image me`' except adds a few parameters to try to return an animated GIF instead."' " is 130.
Long Statement,MMBot.Tests.CompiledScripts,Ping,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\Ping.cs,Register,The length of the statement  "            robot.Respond(@"TIME$"' msg => msg.Send(string.Format("Server time is: {0} {1}"' DateTime.Now.ToString("U")' TimeZoneInfo.Local.DisplayName))); " is 143.
Long Statement,MMBot.Tests.CompiledScripts,Rules,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\Rules.cs,Register,The length of the statement  "                var rules = msg.Message != null && msg.Message.Text != null && (msg.Message.Text.ToLower().Contains("apple") || msg.Message.Text.ToLower().Contains("dev")) " is 155.
Long Statement,MMBot.Tests.CompiledScripts,Spot,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\Spot.cs,Register,The length of the statement  "                        if (t.album.availability.territories.ToString() == "worldwide" || t.album.availability.territories.ToString().IndexOf("NZ") > -1) " is 129.
Long Statement,MMBot.Tests.CompiledScripts,TeamCity,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\TeamCity.cs,GetHeaders,The length of the statement  "                {"Authorization"' string.Format("Basic {0}"' Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(string.Format("{0}:{1}"' _username' _password))))}' " is 154.
Long Statement,MMBot.Tests.CompiledScripts,TeamCity,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\TeamCity.cs,Register,The length of the statement  "                Console.WriteLine("Team City is not configured. Set the MMBOT_TEAMCITY_HOSTNAME' MMBOT_TEAMCITY_USERNAME and MMBOT_TEAMCITY_PASSWORD configuration variables."); " is 160.
Long Statement,MMBot.Tests.CompiledScripts,TeamCity,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\TeamCity.cs,Register,The length of the statement  "            //                    string.Format("{0} completed with a status of {1} - {2}"' build.buildTypeId' build.status' build.webUrl)); " is 128.
Long Statement,MMBot.Tests.CompiledScripts,TeamCity,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\TeamCity.cs,Register,The length of the statement  "                                    string.Format("Dropped a build in the queue for {0}. Run `tc list builds of {0}` to check the status"' buildType["name"].Value<string>())); " is 139.
Long Statement,MMBot.Tests.CompiledScripts,TeamCity,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\TeamCity.cs,Register,The length of the statement  "                                body["buildType"].Select(bt => string.Format("{0} of {1}"' bt["name"].Value<string>()' bt["projectName"].Value<string>()))))); " is 126.
Long Statement,MMBot.Tests.CompiledScripts,TeamCity,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\TeamCity.cs,GetHelp,The length of the statement  "                "mmbot tc list builds of <buildType> of <project> <number>- Show the status of the last <number> builds of the specified build type of the specified project. Number can only follow the last variable' so if project is not passed' number must follow buildType directly. <number> Defaults to 5"' " is 292.
Long Statement,MMBot.Tests.CompiledScripts,TeamCity,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\TeamCity.cs,GetHelp,The length of the statement  "                "mmbot tc build start <buildType> of <project> - Adds a build to the queue for the specified build type of the specified project"' " is 130.
Long Statement,MMBot.Tests.CompiledScripts,TeamCity,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\TeamCity.cs,GetHelp,The length of the statement  "                //"mmbot tc build stop all <buildType> id <buildId> of <project> - Stops all currently running builds of a given buildType. Project parameter is optional. Please note that the special 'all' keyword will kill all currently running builds ignoring all further parameters. hubot tc build stop all all"' " is 299.
Long Statement,MMBot.Tests.CompiledScripts,TeamCity,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\TeamCity.cs,GetBuildTypes,The length of the statement  "            var projectSegment = string.IsNullOrWhiteSpace(project) ? string.Empty : string.Format("/projects/name:{0}"' WebUtility.UrlEncode(project)); " is 140.
Long Statement,MMBot.Tests.CompiledScripts,TeamCity,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\TeamCity.cs,GetBuilds,The length of the statement  "            var projectSegment = string.IsNullOrWhiteSpace(project) ? string.Empty : string.Format("/projects/name:{0}"' WebUtility.UrlEncode(project)); " is 140.
Long Statement,MMBot.Tests.CompiledScripts,TeamCity,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\TeamCity.cs,GetBuilds,The length of the statement  "            var url = string.Format("{0}/httpAuth/app/rest{1}/buildTypes/name:{2}/builds"' _baseUrl' projectSegment' WebUtility.UrlEncode(configuration)); " is 142.
Long Statement,MMBot.Tests.CompiledScripts,TeamCity,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\TeamCity.cs,MapNameToIdForBuildType,The length of the statement  "            Func<JToken' bool> filter = b => string.Equals((string)b["name"]' name' StringComparison.InvariantCultureIgnoreCase) && (string.IsNullOrEmpty(project) || string.Equals((string)b["projectName"]' project' StringComparison.InvariantCultureIgnoreCase)); " is 249.
Long Statement,MMBot.Tests.CompiledScripts,TeamCity,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\TeamCity.cs,MapNameToIdForBuildType,The length of the statement  "            GetBuildTypes(robot' msg' project' (exception' message' res) => callback(msg' res["buildType"].FirstOrDefault(filter))); " is 120.
Long Statement,MMBot.Tests.CompiledScripts,Translate,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\Translate.cs,Register,The length of the statement  "                    await msg.Send(string.Format("The {1} {0} translates as {2} in {3}"' term' language' result.Trim()' _languages[target])); " is 121.
Long Statement,MMBot.Tests.CompiledScripts,Translate,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\Translate.cs,GetHelp,The length of the statement  "                "mmbot translate me from <source> into <target> <phrase> - Translates <phrase> from <source> into <target>. Both <source> and <target> are optional" " is 148.
Long Statement,MMBot.Tests.CompiledScripts,ListenerTest,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\ListenerTest.cs,Register,The length of the statement  "                msg => { if (msg != null && msg.Message != null && msg.Message.Text != null && !msg.Message.Text.StartsWith("Handled")) msg.Send("Handled TextMessage with regex"); }); " is 167.
Long Statement,MMBot.Tests.CompiledScripts,ListenerTest,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\ListenerTest.cs,Register,The length of the statement  "                msg => { if (msg != null && msg.Message != null && msg.Message.Text != null && !msg.Message.Text.StartsWith("Handled")) msg.Send("Handled TextMessage without regex"); }); " is 170.
Long Statement,MMBot.Tests.CompiledScripts,ListenerTest,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\ListenerTest.cs,Register,The length of the statement  "                msg => { if (msg != null && msg.Message != null && msg.Message.Text != null && !msg.Message.Text.StartsWith("Handled")) msg.Send("Handled TextMessage with no other handlers"); }); " is 179.
Complex Conditional,MMBot.Tests.CompiledScripts,TeamCity,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\TeamCity.cs,MapAndKillBuilds,The conditional expression  "name == "all" ||                              (!string.IsNullOrWhiteSpace(id) && int.TryParse(id' out parsedId) &&                               build["id"].Value<int>() == parsedId) ||                              (buildType != null && string.IsNullOrWhiteSpace(id) &&                               build["buildTypeId"].Value<string>() == buildType.Value<string>())"  is complex.
Complex Conditional,MMBot.Tests.CompiledScripts,ListenerTest,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\ListenerTest.cs,Register,The conditional expression  "msg != null && msg.Message != null && msg.Message.Text != null && !msg.Message.Text.StartsWith("Handled")"  is complex.
Complex Conditional,MMBot.Tests.CompiledScripts,ListenerTest,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\ListenerTest.cs,Register,The conditional expression  "msg != null && msg.Message != null && msg.Message.Text != null && !msg.Message.Text.StartsWith("Handled")"  is complex.
Complex Conditional,MMBot.Tests.CompiledScripts,ListenerTest,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\ListenerTest.cs,Register,The conditional expression  "msg != null && msg.Message != null && msg.Message.Text != null && !msg.Message.Text.StartsWith("Handled")"  is complex.
Empty Catch Block,MMBot.Tests,TestNancyRouter,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\RouterTests.cs,Dispose,The method has an empty catch block.
Empty Catch Block,MMBot.Tests.CompiledScripts,Cats,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\Cats.cs,Register,The method has an empty catch block.
Empty Catch Block,MMBot.Tests.CompiledScripts,Cats,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\Cats.cs,Register,The method has an empty catch block.
Empty Catch Block,MMBot.Tests.CompiledScripts,GoogleImages,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\GoogleImages.cs,ImageMe,The method has an empty catch block.
Empty Catch Block,MMBot.Tests.CompiledScripts,Math,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\Math.cs,Register,The method has an empty catch block.
Empty Catch Block,MMBot.Tests.CompiledScripts,Spot,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\Spot.cs,Register,The method has an empty catch block.
Magic Number,MMBot.Tests,HttpWrapperTests,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\HttpWrapperTests.cs,WhenGetJsonIsCalled_ResponseContentIsDeserialized,The following statement contains a magic number: var expectedString = JsonConvert.SerializeObject(new {Id=4' Foo = "Foo"' Bar = "Bar"' Date = DateTime.Now});
Magic Number,MMBot.Tests,HttpWrapperTests,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\HttpWrapperTests.cs,WhenGetJsonWithCallbackReturnsErrorHttpStatusCode_CodeIsAccessibleViaResponseParameter,The following statement contains a magic number: var expectedString = JsonConvert.SerializeObject(new { Id = 4' Foo = "Foo"' Bar = "Bar"' Date = DateTime.Now });
Magic Number,MMBot.Tests,ResponseTests,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\ResponseTests.cs,WhenRandomIsCalled_AllValuesCanBeReturned,The following statement contains a magic number: var numRandoms = 50;
Magic Number,MMBot.Tests,RobotTests,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\RobotTests.cs,WhenMultipleAdaptersAreConfigured_ResponsesAreOnlySentToTheOriginatingAdapter,The following statement contains a magic number: Assert.Equal(3' adapter1.Messages.Count());
Magic Number,MMBot.Tests,RobotTests,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\RobotTests.cs,XmppRobot,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,MMBot.Tests,RobotTests,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\RobotTests.cs,XmppRobot,The following statement contains a magic number: cmdReceived < 2
Magic Number,MMBot.Tests,RouterTests,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\RouterTests.cs,WhenGithubWebHook_BodyIsParsed,The following statement contains a magic number: Assert.Equal(3' actualPayload["commits"].Count());
Magic Number,MMBot.Tests,RouterTests,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\RouterTests.cs,WhenRouteCreatedAfterStartup_RouteExistsAfterDelay,The following statement contains a magic number: await testNancyRouter.Started.Take(2);
Magic Number,MMBot.Tests,ScriptsTest,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\ScriptsTest.cs,Auth_CanAddRemoveUsernameToRole,The following statement contains a magic number: var messages = await adapter.GetEmittedMessages(2);
Magic Number,MMBot.Tests,ScriptsTest,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\ScriptsTest.cs,Auth_CanAddRemoveUsernameToRole,The following statement contains a magic number: Assert.Equal(2' messages.Count());
Magic Number,MMBot.Tests,ScriptsTest,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\ScriptsTest.cs,CanCatchAnyMessage,The following statement contains a magic number: messages = await adapter.GetEmittedMessages(2);
Magic Number,MMBot.Tests,ScriptsTest,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\ScriptsTest.cs,CanCatchAnyMessage,The following statement contains a magic number: Assert.Equal(2' messages.Count());
Magic Number,MMBot.Tests,ScriptsTest,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\ScriptsTest.cs,CanCatchAnyMessage,The following statement contains a magic number: messages = await adapter.GetEmittedMessages(3);
Magic Number,MMBot.Tests,ScriptsTest,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\ScriptsTest.cs,CanCatchAnyMessage,The following statement contains a magic number: Assert.Equal(3' messages.Count());
Magic Number,MMBot.Tests,ScriptsTest,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\ScriptsTest.cs,CanCatchAnyMessage,The following statement contains a magic number: Assert.Equal("Caught msg tester left testRoom from tester"' messages.Skip(2).First().Item2.First()'                      StringComparer.InvariantCultureIgnoreCase);
Magic Number,MMBot.Tests,ScriptsTest,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\ScriptsTest.cs,CanCatchAnyMessage,The following statement contains a magic number: messages = await adapter.GetEmittedMessages(4);
Magic Number,MMBot.Tests,ScriptsTest,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\ScriptsTest.cs,CanCatchAnyMessage,The following statement contains a magic number: Assert.Equal(4' messages.Count());
Magic Number,MMBot.Tests,ScriptsTest,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\ScriptsTest.cs,CanCatchAnyMessage,The following statement contains a magic number: Assert.Equal("Caught msg new topic from tester"' messages.Skip(3).First().Item2.First()'                      StringComparer.InvariantCultureIgnoreCase);
Magic Number,MMBot.Tests,ScriptsTest,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\ScriptsTest.cs,CanListen,The following statement contains a magic number: Assert.IsType<Listener<TextMessage>>(robot.Listeners[2]);
Magic Number,MMBot.Tests,ScriptsTest,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\ScriptsTest.cs,CanListen,The following statement contains a magic number: Assert.IsType<TextListener>(robot.Listeners[3]);
Magic Number,MMBot.Tests,ScriptsTest,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\ScriptsTest.cs,CanListen,The following statement contains a magic number: var messages = await adapter.GetEmittedMessages(2);
Magic Number,MMBot.Tests,ScriptsTest,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\ScriptsTest.cs,CanListen,The following statement contains a magic number: Assert.Equal(2' messages.Count());
Magic Number,MMBot.Tests,ScriptsTest,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\ScriptsTest.cs,CanListen,The following statement contains a magic number: messages = await adapter.GetEmittedMessages(5);
Magic Number,MMBot.Tests,ScriptsTest,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\ScriptsTest.cs,CanListen,The following statement contains a magic number: Assert.Equal(5' messages.Count());
Magic Number,MMBot.Tests,ScriptsTest,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\ScriptsTest.cs,CanListen,The following statement contains a magic number: Assert.Equal("Handled TextMessage with regex"' messages.Skip(2).First().Item2.First()'                      StringComparer.InvariantCultureIgnoreCase);
Magic Number,MMBot.Tests,ScriptsTest,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\ScriptsTest.cs,CanListen,The following statement contains a magic number: Assert.Equal("Handled TextMessage without regex"' messages.Skip(3).First().Item2.First()'                      StringComparer.InvariantCultureIgnoreCase);
Magic Number,MMBot.Tests,ScriptsTest,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\ScriptsTest.cs,CanListen,The following statement contains a magic number: Assert.Equal("Handled TextMessage with no other handlers"' messages.Skip(4).First().Item2.First()'                      StringComparer.InvariantCultureIgnoreCase);
Magic Number,MMBot.Tests,ScriptsTest,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\ScriptsTest.cs,CanListen,The following statement contains a magic number: messages = await adapter.GetEmittedMessages(7);
Magic Number,MMBot.Tests,ScriptsTest,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\ScriptsTest.cs,CanListen,The following statement contains a magic number: Assert.Equal(7' messages.Count());
Magic Number,MMBot.Tests,ScriptsTest,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\ScriptsTest.cs,CanListen,The following statement contains a magic number: Assert.Equal("Handled TextMessage without regex"' messages.Skip(5).First().Item2.First()'                      StringComparer.InvariantCultureIgnoreCase);
Magic Number,MMBot.Tests,ScriptsTest,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\ScriptsTest.cs,CanListen,The following statement contains a magic number: Assert.Equal("cat"' messages.Skip(6).First().Item2.First()' StringComparer.InvariantCultureIgnoreCase);
Magic Number,MMBot.Tests,ScriptsTest,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\ScriptsTest.cs,WhenScriptStringIsRun_ActionRespondsToMessage,The following statement contains a magic number: var secondMessage = (await adapter.GetEmittedMessages(10)).Select(i => i.Item2).Last();
Magic Number,MMBot.Tests,StubAdapter,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\StubAdapter.cs,GetEmittedMessages,The following statement contains a magic number: return await GetEmittedMessages(count' TimeSpan.FromMilliseconds(200));
Magic Number,MMBot.Tests.CompiledScripts,Ascii,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\Ascii.cs,Register,The following statement contains a magic number: robot.Respond(@"(ascii)( me)? (.*)"' async msg =>              {                  var query = msg.Match[3];                    await AsciiMeCore(msg' query);              });
Magic Number,MMBot.Tests.CompiledScripts,Cats,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\Cats.cs,Register,The following statement contains a magic number: robot.Respond(@"(cat|cats)( gif)( \d+)?$"' async msg =>              {                  int number = 1;                  try                  {                      number = Int32.Parse(msg.Match[3]);                  }                  catch (Exception) { }                  if (number == 0)                  {                      number = 1;                  }                    await CatMeGifCore(msg' number);              });
Magic Number,MMBot.Tests.CompiledScripts,Cats,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\Cats.cs,Register,The following statement contains a magic number: robot.Respond(@"(cat|cats)( me)?( \d+)?$"' async msg =>              {                  int number = 1;                  try                  {                      number = Int32.Parse(msg.Match[3]);                  }                  catch (Exception) { }                  if (number == 0)                  {                      number = 1;                  }                    await CatMeCore(msg' number);              });
Magic Number,MMBot.Tests.CompiledScripts,Giphy,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\Giphy.cs,Register,The following statement contains a magic number: robot.Respond(@"(gif|giphy)( me)? (.*)"' async msg =>              {                  var query = msg.Match[3];                    await GifMeCore(msg' query' apiKey);              });
Magic Number,MMBot.Tests.CompiledScripts,GoogleImages,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\GoogleImages.cs,Register,The following statement contains a magic number: robot.Respond(@"(image|img)( me)? (.*)"' msg => ImageMe(msg' msg.Match[3]' url => msg.Send(url)));
Magic Number,MMBot.Tests.CompiledScripts,GoogleImages,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\GoogleImages.cs,Register,The following statement contains a magic number: robot.Respond(@"animate( me)? (.*)"' msg => ImageMe(msg' msg.Match[2]' url => msg.Send(url)' true));
Magic Number,MMBot.Tests.CompiledScripts,GoogleImages,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\GoogleImages.cs,Register,The following statement contains a magic number: robot.Respond(@"(?:mo?u)?sta(?:s|c)he?(?: me)? (.*)"' async msg =>              {                  var type = _random.Next(2);                  var mustachify = string.Format("http://mustachify.me/{0}?src="' type);                  var imagery = msg.Match[1];                  if (_httpRegex.IsMatch(imagery))                  {                      await msg.Send(mustachify + imagery);                  }                  else                  {                      await ImageMe(msg' imagery' url => msg.Send(mustachify + url)' false' true);                  }                                });
Magic Number,MMBot.Tests.CompiledScripts,Map,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\Map.cs,Register,The following statement contains a magic number: robot.Respond("(?:(satellite|terrain|hybrid)[- ])?map me (.+)"' msg =>              {                  var mapType = msg.Match.Count() > 1 ? "roadmap" : msg.Match[1];                  var location = msg.Match[2];                  var mapUrl = "http://maps.google.com/maps/api/staticmap?markers=" +                               WebUtility.UrlEncode(location) +                               "&size=400x400&maptype=" +                               mapType +                               "&sensor=false" +                               "&format=png"; // So campfire knows it's an image                    var url = "http://maps.google.com/maps?q=" +                            WebUtility.UrlEncode(location) +                            "&hl=en&sll=37.0625'-95.677068&sspn=73.579623'100.371094&vpsrc=0&hnear=" +                            WebUtility.UrlEncode(location) +                            "&t=m&z=11";                    msg.Send(mapUrl);                  msg.Send(url);              });
Magic Number,MMBot.Tests.CompiledScripts,Math,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\Math.cs,Register,The following statement contains a magic number: robot.Respond(@"(calc|calculate|calculator|convert|math|maths)( me)? (.*)"' async msg =>              {                  dynamic res = await msg                      .Http("https://www.google.com/ig/calculator")                      .Query(new                          {                              hl = "en"'                              q = msg.Match[3]                          })                      .Headers(new Dictionary<string' string>                          {                              {"Accept-Language"' "en-us'en;q=0.5"}'                              {"Accept-Charset"' "utf-8"}'                              {"User-Agent"' "Mozilla/5.0 (X11; Linux x86_64; rv:2.0.1) Gecko/20100101 Firefox/4.0.1"}                          })                      .GetJson();                    try                  {                      await msg.Send((string)res.rhs ?? "Could not compute");                      return;                  }                  catch (Exception)                  { }                  await msg.Send("Could not compute");              });
Magic Number,MMBot.Tests.CompiledScripts,Pug,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\Pug.cs,Register,The following statement contains a magic number: robot.Respond(@"pug bomb( (\d+))?"' async msg =>              {                  var count = msg.Match.Count() > 2 ? msg.Match[2] : "5";                  var res = await msg.Http("http://pugme.herokuapp.com/bomb?count=" + count).GetJson();                  foreach(var pug in res.pugs)                  {                      await msg.Send((string)pug);                  }              });
Magic Number,MMBot.Tests.CompiledScripts,Pug,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\Pug.cs,Register,The following statement contains a magic number: robot.Respond(@"pug bomb( (\d+))?"' async msg =>              {                  var count = msg.Match.Count() > 2 ? msg.Match[2] : "5";                  var res = await msg.Http("http://pugme.herokuapp.com/bomb?count=" + count).GetJson();                  foreach(var pug in res.pugs)                  {                      await msg.Send((string)pug);                  }              });
Magic Number,MMBot.Tests.CompiledScripts,TeamCity,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\TeamCity.cs,Register,The following statement contains a magic number: robot.Respond(@"tc build start (.*)"' msg =>              {                  var configuration = msg.Match[1];                  var buildName = msg.Match[1];                    if (string.IsNullOrWhiteSpace(buildName))                  {                      msg.Send("Nothing to build. Specify a build");                      return;                  }                  string project = null;                  if(_buildTypeRegex.IsMatch(buildName))                  {                        var buildTypeMatches = _buildTypeRegex.Matches(buildName);                      configuration = buildTypeMatches[0].Groups[2].Value;                      project = buildTypeMatches[0].Groups[3].Value;                  }                    MapNameToIdForBuildType(robot' msg' configuration' project' (response' buildType) =>                  {                      if (buildType == null)                      {                          msg.Send(string.Format("Build type {0} was not found"' buildName));                          return;                      }                        var url = string.Format("{0}/httpAuth/action.html?add2Queue={1}"' _baseUrl'                          buildType["id"].Value<string>());                        msg.Http(url)                          .Headers(GetHeaders())                          .Get((err' res) =>                          {                              if (err != null || res.StatusCode != HttpStatusCode.OK)                              {                                  msg.Send("Fail! Something went wrong. Couldn't start the build for some reason");                              }                              else                              {                                  msg.Send(                                      string.Format("Dropped a build in the queue for {0}. Run `tc list builds of {0}` to check the status"' buildType["name"].Value<string>()));                              }                          });                  });                                });
Magic Number,MMBot.Tests.CompiledScripts,TeamCity,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\TeamCity.cs,Register,The following statement contains a magic number: robot.Respond(@"tc build start (.*)"' msg =>              {                  var configuration = msg.Match[1];                  var buildName = msg.Match[1];                    if (string.IsNullOrWhiteSpace(buildName))                  {                      msg.Send("Nothing to build. Specify a build");                      return;                  }                  string project = null;                  if(_buildTypeRegex.IsMatch(buildName))                  {                        var buildTypeMatches = _buildTypeRegex.Matches(buildName);                      configuration = buildTypeMatches[0].Groups[2].Value;                      project = buildTypeMatches[0].Groups[3].Value;                  }                    MapNameToIdForBuildType(robot' msg' configuration' project' (response' buildType) =>                  {                      if (buildType == null)                      {                          msg.Send(string.Format("Build type {0} was not found"' buildName));                          return;                      }                        var url = string.Format("{0}/httpAuth/action.html?add2Queue={1}"' _baseUrl'                          buildType["id"].Value<string>());                        msg.Http(url)                          .Headers(GetHeaders())                          .Get((err' res) =>                          {                              if (err != null || res.StatusCode != HttpStatusCode.OK)                              {                                  msg.Send("Fail! Something went wrong. Couldn't start the build for some reason");                              }                              else                              {                                  msg.Send(                                      string.Format("Dropped a build in the queue for {0}. Run `tc list builds of {0}` to check the status"' buildType["name"].Value<string>()));                              }                          });                  });                                });
Magic Number,MMBot.Tests.CompiledScripts,TeamCity,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\TeamCity.cs,Register,The following statement contains a magic number: robot.Respond(@"tc list (projects|buildTypes|builds) ?(.*)?"' msg =>              {                  var type = msg.Match[1];                  var option = msg.Match[2];                    switch(type)                  {                      case "projects":                          GetProjects(robot' msg' (exception' res' body) =>                          {                              if (exception != null || res.StatusCode != HttpStatusCode.OK)                              {                                  msg.Send("Ooops! Something went wrong");                                  return;                              }                              msg.Send(string.Join(Environment.NewLine' body["project"].Select(p => Extensions.Value<string>(p["name"]))));                          });                          break;                      case "buildTypes":                          string project = null;                          if (!string.IsNullOrEmpty(option))                          {                              var matches = Regex.Matches(option' @"^\s*of (.*)"' RegexOptions.IgnoreCase);                              if (matches.Count > 0 && matches[0].Groups.Count > 1)                              {                                  project = matches[0].Groups[1].Value;                              }                          }                          GetBuildTypes(robot' msg' project' (err' res' body) => msg.Send(                              string.Join(                                  Environment.NewLine'                                   body["buildType"].Select(bt => string.Format("{0} of {1}"' bt["name"].Value<string>()' bt["projectName"].Value<string>())))));                                                      break;                      case "builds":                          string configuration = option;                          project = null;                          int amount = 0;                          var buildTypeMatches = Regex.Matches(option' @"^\s*of (.*?) of (.+) (\d+)"'                              RegexOptions.IgnoreCase);                            if (buildTypeMatches.Count > 0)                          {                              configuration = buildTypeMatches[0].Groups[1].Value;                              project = buildTypeMatches[0].Groups[2].Value;                              amount = int.Parse(buildTypeMatches[0].Groups[3].Value);                          }                          else                          {                              buildTypeMatches = Regex.Matches(option' @"^\s*of (.+) (\d+)"'                              RegexOptions.IgnoreCase);                              if (buildTypeMatches.Count > 0)                              {                                  configuration = buildTypeMatches[0].Groups[1].Value;                                  project = null;                                  amount = int.Parse(buildTypeMatches[0].Groups[2].Value);                              }                              else                              {                                  amount = 5;                                  buildTypeMatches = Regex.Matches(option' @"^\s*of (.*?) of (.*)"' RegexOptions.IgnoreCase);                                  if (buildTypeMatches.Count > 0)                                  {                                      configuration = buildTypeMatches[0].Groups[1].Value;                                      project = buildTypeMatches[0].Groups[2].Value;                                  }                                  else                                  {                                      buildTypeMatches = Regex.Matches(option' @"^\s*of (.*)"' RegexOptions.IgnoreCase);                                      if (buildTypeMatches.Count > 0)                                      {                                          configuration = buildTypeMatches[0].Groups[1].Value;                                          project = null;                                      }                                  }                              }                          }                            GetBuilds(robot' msg' project' configuration' amount' (err' res' body) =>                          {                              if (body == null)                              {                                  msg.Send(string.Format("Could not find builds for {0}"' option));                                  return;                              }                              CreateAndPublishBuildMap(body["build"]' msg);                          });                            break;                  }                              });
Magic Number,MMBot.Tests.CompiledScripts,TeamCity,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\TeamCity.cs,Register,The following statement contains a magic number: robot.Respond(@"tc list (projects|buildTypes|builds) ?(.*)?"' msg =>              {                  var type = msg.Match[1];                  var option = msg.Match[2];                    switch(type)                  {                      case "projects":                          GetProjects(robot' msg' (exception' res' body) =>                          {                              if (exception != null || res.StatusCode != HttpStatusCode.OK)                              {                                  msg.Send("Ooops! Something went wrong");                                  return;                              }                              msg.Send(string.Join(Environment.NewLine' body["project"].Select(p => Extensions.Value<string>(p["name"]))));                          });                          break;                      case "buildTypes":                          string project = null;                          if (!string.IsNullOrEmpty(option))                          {                              var matches = Regex.Matches(option' @"^\s*of (.*)"' RegexOptions.IgnoreCase);                              if (matches.Count > 0 && matches[0].Groups.Count > 1)                              {                                  project = matches[0].Groups[1].Value;                              }                          }                          GetBuildTypes(robot' msg' project' (err' res' body) => msg.Send(                              string.Join(                                  Environment.NewLine'                                   body["buildType"].Select(bt => string.Format("{0} of {1}"' bt["name"].Value<string>()' bt["projectName"].Value<string>())))));                                                      break;                      case "builds":                          string configuration = option;                          project = null;                          int amount = 0;                          var buildTypeMatches = Regex.Matches(option' @"^\s*of (.*?) of (.+) (\d+)"'                              RegexOptions.IgnoreCase);                            if (buildTypeMatches.Count > 0)                          {                              configuration = buildTypeMatches[0].Groups[1].Value;                              project = buildTypeMatches[0].Groups[2].Value;                              amount = int.Parse(buildTypeMatches[0].Groups[3].Value);                          }                          else                          {                              buildTypeMatches = Regex.Matches(option' @"^\s*of (.+) (\d+)"'                              RegexOptions.IgnoreCase);                              if (buildTypeMatches.Count > 0)                              {                                  configuration = buildTypeMatches[0].Groups[1].Value;                                  project = null;                                  amount = int.Parse(buildTypeMatches[0].Groups[2].Value);                              }                              else                              {                                  amount = 5;                                  buildTypeMatches = Regex.Matches(option' @"^\s*of (.*?) of (.*)"' RegexOptions.IgnoreCase);                                  if (buildTypeMatches.Count > 0)                                  {                                      configuration = buildTypeMatches[0].Groups[1].Value;                                      project = buildTypeMatches[0].Groups[2].Value;                                  }                                  else                                  {                                      buildTypeMatches = Regex.Matches(option' @"^\s*of (.*)"' RegexOptions.IgnoreCase);                                      if (buildTypeMatches.Count > 0)                                      {                                          configuration = buildTypeMatches[0].Groups[1].Value;                                          project = null;                                      }                                  }                              }                          }                            GetBuilds(robot' msg' project' configuration' amount' (err' res' body) =>                          {                              if (body == null)                              {                                  msg.Send(string.Format("Could not find builds for {0}"' option));                                  return;                              }                              CreateAndPublishBuildMap(body["build"]' msg);                          });                            break;                  }                              });
Magic Number,MMBot.Tests.CompiledScripts,TeamCity,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\TeamCity.cs,Register,The following statement contains a magic number: robot.Respond(@"tc list (projects|buildTypes|builds) ?(.*)?"' msg =>              {                  var type = msg.Match[1];                  var option = msg.Match[2];                    switch(type)                  {                      case "projects":                          GetProjects(robot' msg' (exception' res' body) =>                          {                              if (exception != null || res.StatusCode != HttpStatusCode.OK)                              {                                  msg.Send("Ooops! Something went wrong");                                  return;                              }                              msg.Send(string.Join(Environment.NewLine' body["project"].Select(p => Extensions.Value<string>(p["name"]))));                          });                          break;                      case "buildTypes":                          string project = null;                          if (!string.IsNullOrEmpty(option))                          {                              var matches = Regex.Matches(option' @"^\s*of (.*)"' RegexOptions.IgnoreCase);                              if (matches.Count > 0 && matches[0].Groups.Count > 1)                              {                                  project = matches[0].Groups[1].Value;                              }                          }                          GetBuildTypes(robot' msg' project' (err' res' body) => msg.Send(                              string.Join(                                  Environment.NewLine'                                   body["buildType"].Select(bt => string.Format("{0} of {1}"' bt["name"].Value<string>()' bt["projectName"].Value<string>())))));                                                      break;                      case "builds":                          string configuration = option;                          project = null;                          int amount = 0;                          var buildTypeMatches = Regex.Matches(option' @"^\s*of (.*?) of (.+) (\d+)"'                              RegexOptions.IgnoreCase);                            if (buildTypeMatches.Count > 0)                          {                              configuration = buildTypeMatches[0].Groups[1].Value;                              project = buildTypeMatches[0].Groups[2].Value;                              amount = int.Parse(buildTypeMatches[0].Groups[3].Value);                          }                          else                          {                              buildTypeMatches = Regex.Matches(option' @"^\s*of (.+) (\d+)"'                              RegexOptions.IgnoreCase);                              if (buildTypeMatches.Count > 0)                              {                                  configuration = buildTypeMatches[0].Groups[1].Value;                                  project = null;                                  amount = int.Parse(buildTypeMatches[0].Groups[2].Value);                              }                              else                              {                                  amount = 5;                                  buildTypeMatches = Regex.Matches(option' @"^\s*of (.*?) of (.*)"' RegexOptions.IgnoreCase);                                  if (buildTypeMatches.Count > 0)                                  {                                      configuration = buildTypeMatches[0].Groups[1].Value;                                      project = buildTypeMatches[0].Groups[2].Value;                                  }                                  else                                  {                                      buildTypeMatches = Regex.Matches(option' @"^\s*of (.*)"' RegexOptions.IgnoreCase);                                      if (buildTypeMatches.Count > 0)                                      {                                          configuration = buildTypeMatches[0].Groups[1].Value;                                          project = null;                                      }                                  }                              }                          }                            GetBuilds(robot' msg' project' configuration' amount' (err' res' body) =>                          {                              if (body == null)                              {                                  msg.Send(string.Format("Could not find builds for {0}"' option));                                  return;                              }                              CreateAndPublishBuildMap(body["build"]' msg);                          });                            break;                  }                              });
Magic Number,MMBot.Tests.CompiledScripts,TeamCity,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\TeamCity.cs,Register,The following statement contains a magic number: robot.Respond(@"tc list (projects|buildTypes|builds) ?(.*)?"' msg =>              {                  var type = msg.Match[1];                  var option = msg.Match[2];                    switch(type)                  {                      case "projects":                          GetProjects(robot' msg' (exception' res' body) =>                          {                              if (exception != null || res.StatusCode != HttpStatusCode.OK)                              {                                  msg.Send("Ooops! Something went wrong");                                  return;                              }                              msg.Send(string.Join(Environment.NewLine' body["project"].Select(p => Extensions.Value<string>(p["name"]))));                          });                          break;                      case "buildTypes":                          string project = null;                          if (!string.IsNullOrEmpty(option))                          {                              var matches = Regex.Matches(option' @"^\s*of (.*)"' RegexOptions.IgnoreCase);                              if (matches.Count > 0 && matches[0].Groups.Count > 1)                              {                                  project = matches[0].Groups[1].Value;                              }                          }                          GetBuildTypes(robot' msg' project' (err' res' body) => msg.Send(                              string.Join(                                  Environment.NewLine'                                   body["buildType"].Select(bt => string.Format("{0} of {1}"' bt["name"].Value<string>()' bt["projectName"].Value<string>())))));                                                      break;                      case "builds":                          string configuration = option;                          project = null;                          int amount = 0;                          var buildTypeMatches = Regex.Matches(option' @"^\s*of (.*?) of (.+) (\d+)"'                              RegexOptions.IgnoreCase);                            if (buildTypeMatches.Count > 0)                          {                              configuration = buildTypeMatches[0].Groups[1].Value;                              project = buildTypeMatches[0].Groups[2].Value;                              amount = int.Parse(buildTypeMatches[0].Groups[3].Value);                          }                          else                          {                              buildTypeMatches = Regex.Matches(option' @"^\s*of (.+) (\d+)"'                              RegexOptions.IgnoreCase);                              if (buildTypeMatches.Count > 0)                              {                                  configuration = buildTypeMatches[0].Groups[1].Value;                                  project = null;                                  amount = int.Parse(buildTypeMatches[0].Groups[2].Value);                              }                              else                              {                                  amount = 5;                                  buildTypeMatches = Regex.Matches(option' @"^\s*of (.*?) of (.*)"' RegexOptions.IgnoreCase);                                  if (buildTypeMatches.Count > 0)                                  {                                      configuration = buildTypeMatches[0].Groups[1].Value;                                      project = buildTypeMatches[0].Groups[2].Value;                                  }                                  else                                  {                                      buildTypeMatches = Regex.Matches(option' @"^\s*of (.*)"' RegexOptions.IgnoreCase);                                      if (buildTypeMatches.Count > 0)                                      {                                          configuration = buildTypeMatches[0].Groups[1].Value;                                          project = null;                                      }                                  }                              }                          }                            GetBuilds(robot' msg' project' configuration' amount' (err' res' body) =>                          {                              if (body == null)                              {                                  msg.Send(string.Format("Could not find builds for {0}"' option));                                  return;                              }                              CreateAndPublishBuildMap(body["build"]' msg);                          });                            break;                  }                              });
Magic Number,MMBot.Tests.CompiledScripts,TeamCity,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\TeamCity.cs,Register,The following statement contains a magic number: robot.Respond(@"tc list (projects|buildTypes|builds) ?(.*)?"' msg =>              {                  var type = msg.Match[1];                  var option = msg.Match[2];                    switch(type)                  {                      case "projects":                          GetProjects(robot' msg' (exception' res' body) =>                          {                              if (exception != null || res.StatusCode != HttpStatusCode.OK)                              {                                  msg.Send("Ooops! Something went wrong");                                  return;                              }                              msg.Send(string.Join(Environment.NewLine' body["project"].Select(p => Extensions.Value<string>(p["name"]))));                          });                          break;                      case "buildTypes":                          string project = null;                          if (!string.IsNullOrEmpty(option))                          {                              var matches = Regex.Matches(option' @"^\s*of (.*)"' RegexOptions.IgnoreCase);                              if (matches.Count > 0 && matches[0].Groups.Count > 1)                              {                                  project = matches[0].Groups[1].Value;                              }                          }                          GetBuildTypes(robot' msg' project' (err' res' body) => msg.Send(                              string.Join(                                  Environment.NewLine'                                   body["buildType"].Select(bt => string.Format("{0} of {1}"' bt["name"].Value<string>()' bt["projectName"].Value<string>())))));                                                      break;                      case "builds":                          string configuration = option;                          project = null;                          int amount = 0;                          var buildTypeMatches = Regex.Matches(option' @"^\s*of (.*?) of (.+) (\d+)"'                              RegexOptions.IgnoreCase);                            if (buildTypeMatches.Count > 0)                          {                              configuration = buildTypeMatches[0].Groups[1].Value;                              project = buildTypeMatches[0].Groups[2].Value;                              amount = int.Parse(buildTypeMatches[0].Groups[3].Value);                          }                          else                          {                              buildTypeMatches = Regex.Matches(option' @"^\s*of (.+) (\d+)"'                              RegexOptions.IgnoreCase);                              if (buildTypeMatches.Count > 0)                              {                                  configuration = buildTypeMatches[0].Groups[1].Value;                                  project = null;                                  amount = int.Parse(buildTypeMatches[0].Groups[2].Value);                              }                              else                              {                                  amount = 5;                                  buildTypeMatches = Regex.Matches(option' @"^\s*of (.*?) of (.*)"' RegexOptions.IgnoreCase);                                  if (buildTypeMatches.Count > 0)                                  {                                      configuration = buildTypeMatches[0].Groups[1].Value;                                      project = buildTypeMatches[0].Groups[2].Value;                                  }                                  else                                  {                                      buildTypeMatches = Regex.Matches(option' @"^\s*of (.*)"' RegexOptions.IgnoreCase);                                      if (buildTypeMatches.Count > 0)                                      {                                          configuration = buildTypeMatches[0].Groups[1].Value;                                          project = null;                                      }                                  }                              }                          }                            GetBuilds(robot' msg' project' configuration' amount' (err' res' body) =>                          {                              if (body == null)                              {                                  msg.Send(string.Format("Could not find builds for {0}"' option));                                  return;                              }                              CreateAndPublishBuildMap(body["build"]' msg);                          });                            break;                  }                              });
Magic Number,MMBot.Tests.CompiledScripts,TeamCity,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\TeamCity.cs,Register,The following statement contains a magic number: robot.Respond(@"tc list (projects|buildTypes|builds) ?(.*)?"' msg =>              {                  var type = msg.Match[1];                  var option = msg.Match[2];                    switch(type)                  {                      case "projects":                          GetProjects(robot' msg' (exception' res' body) =>                          {                              if (exception != null || res.StatusCode != HttpStatusCode.OK)                              {                                  msg.Send("Ooops! Something went wrong");                                  return;                              }                              msg.Send(string.Join(Environment.NewLine' body["project"].Select(p => Extensions.Value<string>(p["name"]))));                          });                          break;                      case "buildTypes":                          string project = null;                          if (!string.IsNullOrEmpty(option))                          {                              var matches = Regex.Matches(option' @"^\s*of (.*)"' RegexOptions.IgnoreCase);                              if (matches.Count > 0 && matches[0].Groups.Count > 1)                              {                                  project = matches[0].Groups[1].Value;                              }                          }                          GetBuildTypes(robot' msg' project' (err' res' body) => msg.Send(                              string.Join(                                  Environment.NewLine'                                   body["buildType"].Select(bt => string.Format("{0} of {1}"' bt["name"].Value<string>()' bt["projectName"].Value<string>())))));                                                      break;                      case "builds":                          string configuration = option;                          project = null;                          int amount = 0;                          var buildTypeMatches = Regex.Matches(option' @"^\s*of (.*?) of (.+) (\d+)"'                              RegexOptions.IgnoreCase);                            if (buildTypeMatches.Count > 0)                          {                              configuration = buildTypeMatches[0].Groups[1].Value;                              project = buildTypeMatches[0].Groups[2].Value;                              amount = int.Parse(buildTypeMatches[0].Groups[3].Value);                          }                          else                          {                              buildTypeMatches = Regex.Matches(option' @"^\s*of (.+) (\d+)"'                              RegexOptions.IgnoreCase);                              if (buildTypeMatches.Count > 0)                              {                                  configuration = buildTypeMatches[0].Groups[1].Value;                                  project = null;                                  amount = int.Parse(buildTypeMatches[0].Groups[2].Value);                              }                              else                              {                                  amount = 5;                                  buildTypeMatches = Regex.Matches(option' @"^\s*of (.*?) of (.*)"' RegexOptions.IgnoreCase);                                  if (buildTypeMatches.Count > 0)                                  {                                      configuration = buildTypeMatches[0].Groups[1].Value;                                      project = buildTypeMatches[0].Groups[2].Value;                                  }                                  else                                  {                                      buildTypeMatches = Regex.Matches(option' @"^\s*of (.*)"' RegexOptions.IgnoreCase);                                      if (buildTypeMatches.Count > 0)                                      {                                          configuration = buildTypeMatches[0].Groups[1].Value;                                          project = null;                                      }                                  }                              }                          }                            GetBuilds(robot' msg' project' configuration' amount' (err' res' body) =>                          {                              if (body == null)                              {                                  msg.Send(string.Format("Could not find builds for {0}"' option));                                  return;                              }                              CreateAndPublishBuildMap(body["build"]' msg);                          });                            break;                  }                              });
Magic Number,MMBot.Tests.CompiledScripts,TextListenerTest,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\TextListenerTest.cs,Register,The following statement contains a magic number: robot.Respond(@"(gif|giphy)( me)? (.*)"' msg => msg.Send(msg.Match[3]));
Magic Number,MMBot.Tests.CompiledScripts,Translate,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\Translate.cs,Register,The following statement contains a magic number: robot.Respond(regex' async msg =>              {                  var term = "\"" + msg.Match[3].Trim() + "\"";                  var origin = GetCode(msg.Match[1]) ?? "auto";                  var target = GetCode(msg.Match[2]) ?? "en";                    var res = await msg.Http("https://translate.google.com/translate_a/t")                      .Query(new                      {                          client = "t"'                          hl = "en"'                          multires = 1'                          sc = 1'                          sl = origin'                          ssel = 0'                          tl = target'                          tsel = 0'                          uptl = "en"'                          text = term                      })                      .Headers(new Dictionary<string' string> {{"User-Agent"' "Mozilla/5.0"}})                      .GetJson();                    var language = _languages[(string) res[2]];                  string result;                  try                  {                      result = res[0][0][0];                  }                  catch (Exception)                  {                      return;                  }                  if (string.IsNullOrWhiteSpace(msg.Match[2]))                  {                      await msg.Send(string.Format("{0} is {1} for {2}"' term' language' result.Trim()));                  }                  else                  {                      await msg.Send(string.Format("The {1} {0} translates as {2} in {3}"' term' language' result.Trim()' _languages[target]));                  }              });
Magic Number,MMBot.Tests.CompiledScripts,Translate,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\Translate.cs,Register,The following statement contains a magic number: robot.Respond(regex' async msg =>              {                  var term = "\"" + msg.Match[3].Trim() + "\"";                  var origin = GetCode(msg.Match[1]) ?? "auto";                  var target = GetCode(msg.Match[2]) ?? "en";                    var res = await msg.Http("https://translate.google.com/translate_a/t")                      .Query(new                      {                          client = "t"'                          hl = "en"'                          multires = 1'                          sc = 1'                          sl = origin'                          ssel = 0'                          tl = target'                          tsel = 0'                          uptl = "en"'                          text = term                      })                      .Headers(new Dictionary<string' string> {{"User-Agent"' "Mozilla/5.0"}})                      .GetJson();                    var language = _languages[(string) res[2]];                  string result;                  try                  {                      result = res[0][0][0];                  }                  catch (Exception)                  {                      return;                  }                  if (string.IsNullOrWhiteSpace(msg.Match[2]))                  {                      await msg.Send(string.Format("{0} is {1} for {2}"' term' language' result.Trim()));                  }                  else                  {                      await msg.Send(string.Format("The {1} {0} translates as {2} in {3}"' term' language' result.Trim()' _languages[target]));                  }              });
Magic Number,MMBot.Tests.CompiledScripts,Translate,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\Translate.cs,Register,The following statement contains a magic number: robot.Respond(regex' async msg =>              {                  var term = "\"" + msg.Match[3].Trim() + "\"";                  var origin = GetCode(msg.Match[1]) ?? "auto";                  var target = GetCode(msg.Match[2]) ?? "en";                    var res = await msg.Http("https://translate.google.com/translate_a/t")                      .Query(new                      {                          client = "t"'                          hl = "en"'                          multires = 1'                          sc = 1'                          sl = origin'                          ssel = 0'                          tl = target'                          tsel = 0'                          uptl = "en"'                          text = term                      })                      .Headers(new Dictionary<string' string> {{"User-Agent"' "Mozilla/5.0"}})                      .GetJson();                    var language = _languages[(string) res[2]];                  string result;                  try                  {                      result = res[0][0][0];                  }                  catch (Exception)                  {                      return;                  }                  if (string.IsNullOrWhiteSpace(msg.Match[2]))                  {                      await msg.Send(string.Format("{0} is {1} for {2}"' term' language' result.Trim()));                  }                  else                  {                      await msg.Send(string.Format("The {1} {0} translates as {2} in {3}"' term' language' result.Trim()' _languages[target]));                  }              });
Magic Number,MMBot.Tests.CompiledScripts,Translate,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\Translate.cs,Register,The following statement contains a magic number: robot.Respond(regex' async msg =>              {                  var term = "\"" + msg.Match[3].Trim() + "\"";                  var origin = GetCode(msg.Match[1]) ?? "auto";                  var target = GetCode(msg.Match[2]) ?? "en";                    var res = await msg.Http("https://translate.google.com/translate_a/t")                      .Query(new                      {                          client = "t"'                          hl = "en"'                          multires = 1'                          sc = 1'                          sl = origin'                          ssel = 0'                          tl = target'                          tsel = 0'                          uptl = "en"'                          text = term                      })                      .Headers(new Dictionary<string' string> {{"User-Agent"' "Mozilla/5.0"}})                      .GetJson();                    var language = _languages[(string) res[2]];                  string result;                  try                  {                      result = res[0][0][0];                  }                  catch (Exception)                  {                      return;                  }                  if (string.IsNullOrWhiteSpace(msg.Match[2]))                  {                      await msg.Send(string.Format("{0} is {1} for {2}"' term' language' result.Trim()));                  }                  else                  {                      await msg.Send(string.Format("The {1} {0} translates as {2} in {3}"' term' language' result.Trim()' _languages[target]));                  }              });
Magic Number,MMBot.Tests.CompiledScripts,Urban,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\Urban.cs,Register,The following statement contains a magic number: robot.Respond(@"(urban)( define)?( example)?( me)? (.*)"' async msg =>              {                  string query = msg.Match[5];                    var res =                      await msg.Http(string.Format("http://api.urbandictionary.com/v0/define?term={0}"' query)).GetJson();                  if (res.list.Count == 0)                  {                      await msg.Send("\"" + query + "\" not found");                      return;                  }                  var entry = res.list[0];                  if (!string.IsNullOrWhiteSpace(msg.Match[3]))                  {                      await msg.Send((string)entry.example);                  }                  else                  {                      await msg.Send((string)entry.definition);                  }                  //var sounds = res.sounds;                  //if (sounds != null && sounds.Count != 0)                  //{                  //    await msg.Send(string.Join(" "' ((JArray)sounds).Select(s => s.ToString())));                  //}              });
Magic Number,MMBot.Tests.CompiledScripts,Urban,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\Urban.cs,Register,The following statement contains a magic number: robot.Respond(@"(urban)( define)?( example)?( me)? (.*)"' async msg =>              {                  string query = msg.Match[5];                    var res =                      await msg.Http(string.Format("http://api.urbandictionary.com/v0/define?term={0}"' query)).GetJson();                  if (res.list.Count == 0)                  {                      await msg.Send("\"" + query + "\" not found");                      return;                  }                  var entry = res.list[0];                  if (!string.IsNullOrWhiteSpace(msg.Match[3]))                  {                      await msg.Send((string)entry.example);                  }                  else                  {                      await msg.Send((string)entry.definition);                  }                  //var sounds = res.sounds;                  //if (sounds != null && sounds.Count != 0)                  //{                  //    await msg.Send(string.Join(" "' ((JArray)sounds).Select(s => s.ToString())));                  //}              });
Magic Number,MMBot.Tests.CompiledScripts,Youtube,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\Youtube.cs,Register,The following statement contains a magic number: robot.Respond(@"(youtube|yt)( me)? (.*)"' async msg =>              {                  var query = msg.Match[3];                  var res = await msg.Http("http://gdata.youtube.com/feeds/api/videos")                      .Query(new Dictionary<string' string>                      {                          {"orderBy"' "relevance"}'                          {"max-results"' "15"}'                          {"alt"' "json"}'                          {"q"' query}                      })                      .GetJson();                    var videos = res.feed.entry;                    if (videos == null)                  {                      await msg.Send(string.Format("No video results for \"{0}\""' query));                      return;                  }                    dynamic video = msg.Random(videos);                  foreach (var link in video.link)                  {                      if ((string) link.rel == "alternate" || (string) link.type == "text/html")                      {                          await msg.Send((string) link.href);                      }                  }              });
Missing Default,MMBot.Tests.CompiledScripts,TeamCity,D:\research\architectureSmells\repos\mmbot_mmbot\MMBot.Tests\CompiledScripts\TeamCity.cs,Register,The following switch statement is missing a default case: switch(type)                  {                      case "projects":                          GetProjects(robot' msg' (exception' res' body) =>                          {                              if (exception != null || res.StatusCode != HttpStatusCode.OK)                              {                                  msg.Send("Ooops! Something went wrong");                                  return;                              }                              msg.Send(string.Join(Environment.NewLine' body["project"].Select(p => Extensions.Value<string>(p["name"]))));                          });                          break;                      case "buildTypes":                          string project = null;                          if (!string.IsNullOrEmpty(option))                          {                              var matches = Regex.Matches(option' @"^\s*of (.*)"' RegexOptions.IgnoreCase);                              if (matches.Count > 0 && matches[0].Groups.Count > 1)                              {                                  project = matches[0].Groups[1].Value;                              }                          }                          GetBuildTypes(robot' msg' project' (err' res' body) => msg.Send(                              string.Join(                                  Environment.NewLine'                                   body["buildType"].Select(bt => string.Format("{0} of {1}"' bt["name"].Value<string>()' bt["projectName"].Value<string>())))));                                                      break;                      case "builds":                          string configuration = option;                          project = null;                          int amount = 0;                          var buildTypeMatches = Regex.Matches(option' @"^\s*of (.*?) of (.+) (\d+)"'                              RegexOptions.IgnoreCase);                            if (buildTypeMatches.Count > 0)                          {                              configuration = buildTypeMatches[0].Groups[1].Value;                              project = buildTypeMatches[0].Groups[2].Value;                              amount = int.Parse(buildTypeMatches[0].Groups[3].Value);                          }                          else                          {                              buildTypeMatches = Regex.Matches(option' @"^\s*of (.+) (\d+)"'                              RegexOptions.IgnoreCase);                              if (buildTypeMatches.Count > 0)                              {                                  configuration = buildTypeMatches[0].Groups[1].Value;                                  project = null;                                  amount = int.Parse(buildTypeMatches[0].Groups[2].Value);                              }                              else                              {                                  amount = 5;                                  buildTypeMatches = Regex.Matches(option' @"^\s*of (.*?) of (.*)"' RegexOptions.IgnoreCase);                                  if (buildTypeMatches.Count > 0)                                  {                                      configuration = buildTypeMatches[0].Groups[1].Value;                                      project = buildTypeMatches[0].Groups[2].Value;                                  }                                  else                                  {                                      buildTypeMatches = Regex.Matches(option' @"^\s*of (.*)"' RegexOptions.IgnoreCase);                                      if (buildTypeMatches.Count > 0)                                      {                                          configuration = buildTypeMatches[0].Groups[1].Value;                                          project = null;                                      }                                  }                              }                          }                            GetBuilds(robot' msg' project' configuration' amount' (err' res' body) =>                          {                              if (body == null)                              {                                  msg.Send(string.Format("Could not find builds for {0}"' option));                                  return;                              }                              CreateAndPublishBuildMap(body["build"]' msg);                          });                            break;                  }
