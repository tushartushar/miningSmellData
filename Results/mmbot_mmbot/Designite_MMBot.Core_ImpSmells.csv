Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MMBot,DateTimeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\DateTimeExtensions.cs,GetRelativeTime,Cyclomatic complexity of the method is 11
Complex Method,MMBot,DateTimeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\DateTimeExtensions.cs,ToRelativeTimePast,Cyclomatic complexity of the method is 8
Complex Method,MMBot,DateTimeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\DateTimeExtensions.cs,ToRelativeTimeFuture,Cyclomatic complexity of the method is 8
Complex Method,MMBot,NuGetPackageAssemblyResolver,C:\repos\mmbot_mmbot\MMBot.Core\NuGetPackageAssemblyResolver.cs,FormatReflectionTypeLoadException,Cyclomatic complexity of the method is 8
Complex Method,TinyIoC,GenericMethodCacheKey,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,Equals,Cyclomatic complexity of the method is 10
Complex Method,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,CanResolveInternal,Cyclomatic complexity of the method is 17
Complex Method,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,ResolveInternal,Cyclomatic complexity of the method is 12
Complex Method,System.Reflection,GenericMethodCacheKey,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,Equals,Cyclomatic complexity of the method is 10
Complex Method,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,CanResolveInternal,Cyclomatic complexity of the method is 17
Complex Method,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,ResolveInternal,Cyclomatic complexity of the method is 12
Long Parameter List,MMBot,DateTimeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\DateTimeExtensions.cs,ToRelativeTime,The method has 5 parameters. Parameters: dt' includeTime' asPlusMinus' compareTo' includeSign
Long Parameter List,MMBot,Robot,C:\repos\mmbot_mmbot\MMBot.Core\Robot.cs,Robot,The method has 8 parameters. Parameters: name' config' logConfig' adapters' router' brain' scriptStore' scriptRunner
Long Parameter List,MMBot,User,C:\repos\mmbot_mmbot\MMBot.Core\User.cs,User,The method has 5 parameters. Parameters: id' name' roles' room' adapterId
Long Parameter List,MMBot,UserExtensions,C:\repos\mmbot_mmbot\MMBot.Core\User.cs,GetUser,The method has 5 parameters. Parameters: robot' id' name' room' adapterId
Long Parameter List,MMBot.Brains,JsonSerializationMixin,C:\repos\mmbot_mmbot\MMBot.Core\Brains\AkavacheBrain.cs,GetAndFetchLatest,The method has 6 parameters. Parameters: This' key' fetchFunc' fetchPredicate' absoluteExpiration' shouldInvalidateOnError
Long Parameter List,MMBot.Brains,JsonSerializationMixin,C:\repos\mmbot_mmbot\MMBot.Core\Brains\AkavacheBrain.cs,GetAndFetchLatest,The method has 5 parameters. Parameters: This' key' fetchFunc' fetchPredicate' absoluteExpiration
Long Parameter List,TinyIoC,TypeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,GetGenericMethod,The method has 5 parameters. Parameters: sourceType' bindingFlags' methodName' genericTypes' parameterTypes
Long Parameter List,TinyIoC,TypeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,GetMethod,The method has 5 parameters. Parameters: sourceType' bindingFlags' methodName' genericTypes' parameterTypes
Long Parameter List,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,TryResolve,The method has 5 parameters. Parameters: resolveType' name' parameters' options' resolvedType
Long Parameter List,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,ConstructType,The method has 5 parameters. Parameters: requestedType' implementationType' constructor' parameters' options
Long Parameter List,System.Reflection,TypeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,GetGenericMethod,The method has 5 parameters. Parameters: sourceType' bindingFlags' methodName' genericTypes' parameterTypes
Long Parameter List,System.Reflection,TypeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,GetMethod,The method has 5 parameters. Parameters: sourceType' bindingFlags' methodName' genericTypes' parameterTypes
Long Parameter List,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,TryResolve,The method has 5 parameters. Parameters: resolveType' name' parameters' options' resolvedType
Long Parameter List,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,ConstructType,The method has 5 parameters. Parameters: requestedType' implementationType' constructor' parameters' options
Long Identifier,TinyIoC,ResolveOptions,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,,The length of the parameter _FailUnregisteredAndNameNotFound is 32.
Long Identifier,System.Reflection,ResolveOptions,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,,The length of the parameter _FailUnregisteredAndNameNotFound is 32.
Long Statement,MMBot,DateTimeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\DateTimeExtensions.cs,ToRelativeTime,The length of the statement  "                return dt <= comp ? ToRelativeTimePastSimple(dt' comp' includeSign) : ToRelativeTimeFutureSimple(dt' comp' includeSign); " is 120.
Long Statement,MMBot,HttpWrapper,C:\repos\mmbot_mmbot\MMBot.Core\HttpWrapper.cs,BuildUri,The length of the statement  "                         select string.Format("{0}={1}"' System.Net.WebUtility.UrlEncode(key)' System.Net.WebUtility.UrlEncode(value))).ToArray(); " is 121.
Long Statement,MMBot,HttpWrapper,C:\repos\mmbot_mmbot\MMBot.Core\HttpWrapper.cs,DoPost,The length of the statement  "                new StringContent(json is string ? (string)json : JsonConvert.SerializeObject(json)' Encoding.UTF8' "application/json")); " is 121.
Long Statement,MMBot,NuGetPackageAssemblyResolver,C:\repos\mmbot_mmbot\MMBot.Core\NuGetPackageAssemblyResolver.cs,GetBrain,The length of the statement  "                _log.Fatal("No IBrain implementation found. If you have configured MMBOT_BRAIN_NAME' verify that you have installed the relevant package."); " is 140.
Long Statement,MMBot,NuGetPackageAssemblyResolver,C:\repos\mmbot_mmbot\MMBot.Core\NuGetPackageAssemblyResolver.cs,GetRouter,The length of the statement  "                _log.Fatal("The router was enabled but no implementation was found. Make sure you have installed the relevant router package"); " is 127.
Long Statement,MMBot,NuGetPackageAssemblyResolver,C:\repos\mmbot_mmbot\MMBot.Core\NuGetPackageAssemblyResolver.cs,FormatReflectionTypeLoadException,The length of the statement  "                    var assemblyPublicKeyToken = BitConverter.ToString(assemblyName.GetPublicKeyToken()).Replace("-"' "").ToLowerInvariant(); " is 121.
Long Statement,MMBot,Robot,C:\repos\mmbot_mmbot\MMBot.Core\Robot.cs,Receive,The length of the statement  "            foreach (var listener in Listeners.ToArray()) //  need to copy collection so as not to be affectied by a script modifying it " is 124.
Long Statement,MMBot,Robot,C:\repos\mmbot_mmbot\MMBot.Core\Robot.cs,AddHelp,The length of the statement  "                ScriptData.Add(new ScriptMetadata() { Name = "UnReferenced"' Description = "Commands not referenced in a script file's summary details" }); " is 139.
Long Statement,MMBot,Robot,C:\repos\mmbot_mmbot\MMBot.Core\Robot.cs,LoadScripts,The length of the statement  "            scriptTypes.Where(t => typeof(IMMBotScript).IsAssignableFrom(t) && t.IsClass && !t.IsGenericTypeDefinition && !t.IsAbstract && t.GetConstructors().Any(c => !c.GetParameters().Any())).ForEach(s => " is 195.
Long Statement,MMBot,RobotBuilder,C:\repos\mmbot_mmbot\MMBot.Core\RobotBuilder.cs,Build,The length of the statement  "            var adapters = _adapterTypes.Select(a => container.Resolve(a' new NamedParameterOverloads(new Dictionary<string' object> { { "adapterId"' a.Name } }))).ToDictionary(a => a.GetType().Name' a => a as IAdapter); " is 208.
Long Statement,MMBot,RobotBuilder,C:\repos\mmbot_mmbot\MMBot.Core\RobotBuilder.cs,UseAdapters,The length of the statement  "                throw new ArgumentException("The type(s) {0} do not implement IAdapter"' string.Join("' "' types.Where(t => !typeof(Adapter).IsAssignableFrom(t)).Select(t => t.FullName))); " is 172.
Long Statement,MMBot,UserExtensions,C:\repos\mmbot_mmbot\MMBot.Core\User.cs,GetUserRoles,The length of the statement  "            var roleStore = robot.Brain.Get<Dictionary<string' string>>("UserRoleStore").Result ?? new Dictionary<string' string>(); " is 120.
Long Statement,MMBot,UserExtensions,C:\repos\mmbot_mmbot\MMBot.Core\User.cs,AddUserToRole,The length of the statement  "            var roleStore = robot.Brain.Get<Dictionary<string' string>>("UserRoleStore").Result ?? new Dictionary<string' string>(); " is 120.
Long Statement,MMBot,UserExtensions,C:\repos\mmbot_mmbot\MMBot.Core\User.cs,RemoveUserFromRole,The length of the statement  "            var roleStore = robot.Brain.Get<Dictionary<string' string>>("UserRoleStore").Result ?? new Dictionary<string' string>(); " is 120.
Long Statement,MMBot.Brains,AkavacheBrain,C:\repos\mmbot_mmbot\MMBot.Core\Brains\AkavacheBrain.cs,Initialize,The length of the statement  "            _cache = string.IsNullOrWhiteSpace(configVariable) ? BlobCache.LocalMachine : new BrainPersistentBlobCache(configVariable); " is 123.
Long Statement,MMBot.Scripts,NuGetScripts,C:\repos\mmbot_mmbot\MMBot.Core\Scripts\NuGetScripts.cs,Register,The length of the statement  "                packageManager.InstallPackage(latestPackageVersion' false' true);//TODO: allow these flags to be configurable? allow user to specify version? " is 141.
Long Statement,MMBot.Scripts,NuGetScripts,C:\repos\mmbot_mmbot\MMBot.Core\Scripts\NuGetScripts.cs,Register,The length of the statement  "                var packageFoldersToDelete = postInstallState.Except(latestVersions).Select(p => Path.Combine(path' p.Id + "." + p.Version)).ToList(); " is 134.
Long Statement,MMBot.Scripts,NuGetScripts,C:\repos\mmbot_mmbot\MMBot.Core\Scripts\NuGetScripts.cs,GetHelp,The length of the statement  "                "mmbot update (package name or alias) [restart] - updates the specified package and optionally restarts the robot to load updated packages" " is 139.
Long Statement,MMBot.Scripts,ScriptRunner,C:\repos\mmbot_mmbot\MMBot.Core\Scripts\ScriptRunner.cs,RunScript,The length of the statement  "            _logger.Debug(string.Format("Skipped running script {0} as it was not a recognised ScriptCs script type"' script.Name)); " is 120.
Long Statement,MMBot.Scripts,ScriptRunner,C:\repos\mmbot_mmbot\MMBot.Core\Scripts\ScriptRunner.cs,RunScriptFile,The length of the statement  "                //where clause hack using the exact same code that the hack in scriptCS sues to filter their list of assemblies in ShouldLoadAssembly in RuntimeServices.cs " is 155.
Long Statement,MMBot.Scripts,ScriptRunner,C:\repos\mmbot_mmbot\MMBot.Core\Scripts\ScriptRunner.cs,RunScriptFile,The length of the statement  "                var packageReferences = scriptServiceRoot.PackageAssemblyResolver.GetAssemblyNames(Environment.CurrentDirectory).Where(fileSystem.IsPathRooted); " is 144.
Long Statement,MMBot.Scripts,ScriptRunner,C:\repos\mmbot_mmbot\MMBot.Core\Scripts\ScriptRunner.cs,RunScriptFile,The length of the statement  "                scriptServiceRoot.Executor.AddReferences(defaultReferences.Concat(NuGetPackageAssemblyResolver.FilterAssembliesToMostRecent(packageReferences)).ToArray()); " is 155.
Long Statement,MMBot.Scripts,ScriptRunner,C:\repos\mmbot_mmbot\MMBot.Core\Scripts\ScriptRunner.cs,RunScriptFile,The length of the statement  "                    _logger.Error(string.Format("{0}: error compiling script - {1}"' path' result.CompileExceptionInfo.SourceException.Message)); " is 125.
Long Statement,MMBot.Scripts,ScriptRunner,C:\repos\mmbot_mmbot\MMBot.Core\Scripts\ScriptRunner.cs,RunTypedScript,The length of the statement  "            using ( StartScriptProcessingSession(new ScriptSource(typedScript.Type.Name' typedScript.Type.AssemblyQualifiedName))) { " is 120.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,AutoRegister,The length of the statement  "            AutoRegisterInternal(AppDomain.CurrentDomain.GetAssemblies().Where(a => !IsIgnoredAssembly(a))' DuplicateImplementationActions.RegisterSingle' null); " is 149.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,AutoRegister,The length of the statement  "            AutoRegisterInternal(AppDomain.CurrentDomain.GetAssemblies().Where(a => !IsIgnoredAssembly(a))' DuplicateImplementationActions.RegisterSingle' registrationPredicate); " is 166.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,AutoRegister,The length of the statement  "            AutoRegisterInternal(AppDomain.CurrentDomain.GetAssemblies().Where(a => !IsIgnoredAssembly(a))' duplicateAction' registrationPredicate); " is 136.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,AutoRegister,The length of the statement  "            AutoRegisterInternal(new Assembly[] { this.GetType().Assembly() }' ignoreDuplicateImplementations' registrationPredicate); " is 122.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,Register,The length of the statement  "            return this.RegisterInternal(registerType' string.Empty' GetDefaultObjectFactory(registerType' registerImplementation)); " is 120.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,Register,The length of the statement  "            return RegisterInternal(registerType' string.Empty' new InstanceFactory(registerType' registerImplementation' instance)); " is 121.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,RegisterMultiple,The length of the statement  "                    throw new ArgumentException(String.Format("types: The type {0} is not assignable from {1}"' registrationType.FullName' type.FullName)); " is 135.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,RegisterMultiple,The length of the statement  "                var multipleRegMessage = string.Format("types: The same implementation type cannot be specified multiple times for {0}\n\n{1}"' registrationType.FullName' fullNamesOfDuplicatedTypes); " is 183.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,Resolve,The length of the statement  "            return ResolveInternal(new TypeRegistration(resolveType' name)' NamedParameterOverloads.Default' ResolveOptions.Default); " is 121.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,CanResolve,The length of the statement  "            return CanResolveInternal(new TypeRegistration(resolveType' name)' NamedParameterOverloads.Default' ResolveOptions.Default); " is 124.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,AutoRegisterInternal,The length of the statement  "                                    where type.IsClass() && (type.IsAbstract() == false) && (type != this.GetType() && (type.DeclaringType != this.GetType()) && (!type.IsGenericTypeDefinition())) " is 159.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,AutoRegisterInternal,The length of the statement  "                                             where ((type.IsInterface() || type.IsAbstract()) && (type.DeclaringType != this.GetType()) && (!type.IsGenericTypeDefinition())) " is 128.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,IsIgnoredType,The length of the statement  "                t => (t.GetConstructors(BindingFlags.Instance | BindingFlags.Public).Length == 0) && !(t.IsInterface() || t.IsAbstract())' " is 122.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,CanResolveInternal,The length of the statement  "            if (!String.IsNullOrEmpty(name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.AttemptUnnamedResolution) " is 130.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,CanResolveInternal,The length of the statement  "            if ((options.UnregisteredResolutionAction == UnregisteredResolutionActions.AttemptResolve) || (checkType.IsGenericType() && options.UnregisteredResolutionAction == UnregisteredResolutionActions.GenericsOnly)) " is 208.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,CanResolveInternal,The length of the statement  "                return (GetBestConstructor(checkType' parameters' options) != null) ? true : (_Parent != null) ? _Parent.CanResolveInternal(registration' parameters' options) : false; " is 167.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,IsAutomaticLazyFactoryRequest,The length of the statement  "            //			if ((genericType == typeof(Func<''>) && type.GetTypeInfo().GenericTypeArguments[0] == typeof(string) && type.GetTypeInfo().GenericTypeArguments[1] == typeof(IDictionary<String' object>))) " is 192.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,IsAutomaticLazyFactoryRequest,The length of the statement  "            if ((genericType == typeof(Func<''>) && type.GetGenericArguments()[0] == typeof(string) && type.GetGenericArguments()[1] == typeof(IDictionary<String' object>))) " is 161.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,ResolveInternal,The length of the statement  "            if (!String.IsNullOrEmpty(registration.Name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.Fail) " is 123.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,ResolveInternal,The length of the statement  "            if (!String.IsNullOrEmpty(registration.Name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.AttemptUnnamedResolution) " is 143.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,ResolveInternal,The length of the statement  "            if ((options.UnregisteredResolutionAction == UnregisteredResolutionActions.AttemptResolve) || (registration.Type.IsGenericType() && options.UnregisteredResolutionAction == UnregisteredResolutionActions.GenericsOnly)) " is 216.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "                //				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => !mi.GetParameters().Any()); " is 141.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "                //				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => mi.GetParameters().Length == 1 && mi.GetParameters()[0].GetType() == typeof(String)); " is 199.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "            //			if ((genericType == typeof(Func<''>) && type.GenericTypeArguments[0] == typeof(string) && type.GenericTypeArguments[1] == typeof(IDictionary<string' object>))) " is 164.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "            if ((genericType == typeof(Func<''>) && type.GetGenericArguments()[0] == typeof(string) && type.GetGenericArguments()[1] == typeof(IDictionary<string' object>))) " is 161.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "                //				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => mi.GetParameters().Length == 2 && mi.GetParameters()[0].GetType() == typeof(String) && mi.GetParameters()[1].GetType() == typeof(NamedParameterOverloads)); " is 269.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "                MethodInfo resolveMethod = typeof(TinyIoCContainer).GetMethod("Resolve"' new Type[] { typeof(String)' typeof(NamedParameterOverloads) }); " is 137.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "                var resolveCall = Expression.Call(Expression.Constant(this)' resolveMethod' name' Expression.Call(typeof(NamedParameterOverloads)' "FromIDictionary"' null' parameters)); " is 169.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,GetIEnumerableRequest,The length of the statement  "            //			var genericResolveAllMethod = this.GetType().GetGenericMethod("ResolveAll"' type.GenericTypeArguments' new[] { typeof(bool) }); " is 132.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,GetIEnumerableRequest,The length of the statement  "            var genericResolveAllMethod = this.GetType().GetGenericMethod(BindingFlags.Public | BindingFlags.Instance' "ResolveAll"' type.GetGenericArguments()' new[] { typeof(bool) }); " is 173.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,CanConstruct,The length of the statement  "                if (!isParameterOverload && !CanResolveInternal(new TypeRegistration(parameter.ParameterType)' NamedParameterOverloads.Default' options)) " is 137.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,ConstructType,The length of the statement  "                constructor = GetBestConstructor(typeToConstruct' parameters' options) ?? GetTypeConstructors(typeToConstruct).LastOrDefault(); " is 127.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,BuildUpInternal,The length of the statement  "            //							 where (property.GetMethod != null) && (property.SetMethod != null) && !property.PropertyType.GetTypeInfo().IsValueType " is 128.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,BuildUpInternal,The length of the statement  "                        property.SetValue(input' ResolveInternal(new TypeRegistration(property.PropertyType)' NamedParameterOverloads.Default' resolveOptions)' null); " is 142.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,ResolveAllInternal,The length of the statement  "            var registrations = _RegisteredTypes.Keys.Where(tr => tr.Type == resolveType).Concat(GetParentRegistrationsForType(resolveType)); " is 129.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,ResolveAllInternal,The length of the statement  "            return registrations.Select(registration => this.ResolveInternal(registration' NamedParameterOverloads.Default' ResolveOptions.Default)); " is 137.
Long Statement,TinyIoC,RegisterOptions,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,ToCustomLifetimeManager,The length of the statement  "                return instance._Container.AddUpdateRegistration(instance._Registration' currentFactory.GetCustomObjectLifetimeVariant(lifetimeProvider' errorString)); " is 151.
Long Statement,TinyIoC,MultiRegisterOptions,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,ToCustomLifetimeManager,The length of the statement  "                instance._RegisterOptions = instance.ExecuteOnAllRegisterOptions(ro => RegisterOptions.ToCustomLifetimeManager(ro' lifetimeProvider' errorString)); " is 147.
Long Statement,TinyIoC,DelegateFactory,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,SetConstructor,The length of the statement  "                throw new TinyIoCConstructorResolutionException("Constructor selection is not possible for delegate factory registrations"); " is 124.
Long Statement,TinyIoC,WeakDelegateFactory,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,SetConstructor,The length of the statement  "                throw new TinyIoCConstructorResolutionException("Constructor selection is not possible for delegate factory registrations"); " is 124.
Long Statement,TinyIoC,InstanceFactory,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,SetConstructor,The length of the statement  "                throw new TinyIoCConstructorResolutionException("Constructor selection is not possible for instance factory registrations"); " is 124.
Long Statement,TinyIoC,WeakInstanceFactory,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,SetConstructor,The length of the statement  "                throw new TinyIoCConstructorResolutionException("Constructor selection is not possible for instance factory registrations"); " is 124.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,AutoRegister,The length of the statement  "            AutoRegisterInternal(AppDomain.CurrentDomain.GetAssemblies().Where(a => !IsIgnoredAssembly(a))' DuplicateImplementationActions.RegisterSingle' null); " is 149.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,AutoRegister,The length of the statement  "            AutoRegisterInternal(AppDomain.CurrentDomain.GetAssemblies().Where(a => !IsIgnoredAssembly(a))' DuplicateImplementationActions.RegisterSingle' registrationPredicate); " is 166.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,AutoRegister,The length of the statement  "            AutoRegisterInternal(AppDomain.CurrentDomain.GetAssemblies().Where(a => !IsIgnoredAssembly(a))' duplicateAction' registrationPredicate); " is 136.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,AutoRegister,The length of the statement  "            AutoRegisterInternal(new Assembly[] { this.GetType().Assembly() }' ignoreDuplicateImplementations' registrationPredicate); " is 122.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,Register,The length of the statement  "            return this.RegisterInternal(registerType' string.Empty' GetDefaultObjectFactory(registerType' registerImplementation)); " is 120.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,Register,The length of the statement  "            return RegisterInternal(registerType' string.Empty' new InstanceFactory(registerType' registerImplementation' instance)); " is 121.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,RegisterMultiple,The length of the statement  "                    throw new ArgumentException(String.Format("types: The type {0} is not assignable from {1}"' registrationType.FullName' type.FullName)); " is 135.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,RegisterMultiple,The length of the statement  "                var multipleRegMessage = string.Format("types: The same implementation type cannot be specified multiple times for {0}\n\n{1}"' registrationType.FullName' fullNamesOfDuplicatedTypes); " is 183.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,Resolve,The length of the statement  "            return ResolveInternal(new TypeRegistration(resolveType' name)' NamedParameterOverloads.Default' ResolveOptions.Default); " is 121.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,CanResolve,The length of the statement  "            return CanResolveInternal(new TypeRegistration(resolveType' name)' NamedParameterOverloads.Default' ResolveOptions.Default); " is 124.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,AutoRegisterInternal,The length of the statement  "                                    where type.IsClass() && (type.IsAbstract() == false) && (type != this.GetType() && (type.DeclaringType != this.GetType()) && (!type.IsGenericTypeDefinition())) " is 159.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,AutoRegisterInternal,The length of the statement  "                                             where ((type.IsInterface() || type.IsAbstract()) && (type.DeclaringType != this.GetType()) && (!type.IsGenericTypeDefinition())) " is 128.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,IsIgnoredType,The length of the statement  "                t => (t.GetConstructors(BindingFlags.Instance | BindingFlags.Public).Length == 0) && !(t.IsInterface() || t.IsAbstract())' " is 122.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,CanResolveInternal,The length of the statement  "            if (!String.IsNullOrEmpty(name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.AttemptUnnamedResolution) " is 130.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,CanResolveInternal,The length of the statement  "            if ((options.UnregisteredResolutionAction == UnregisteredResolutionActions.AttemptResolve) || (checkType.IsGenericType() && options.UnregisteredResolutionAction == UnregisteredResolutionActions.GenericsOnly)) " is 208.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,CanResolveInternal,The length of the statement  "                return (GetBestConstructor(checkType' parameters' options) != null) ? true : (_Parent != null) ? _Parent.CanResolveInternal(registration' parameters' options) : false; " is 167.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,IsAutomaticLazyFactoryRequest,The length of the statement  "            //			if ((genericType == typeof(Func<''>) && type.GetTypeInfo().GenericTypeArguments[0] == typeof(string) && type.GetTypeInfo().GenericTypeArguments[1] == typeof(IDictionary<String' object>))) " is 192.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,IsAutomaticLazyFactoryRequest,The length of the statement  "            if ((genericType == typeof(Func<''>) && type.GetGenericArguments()[0] == typeof(string) && type.GetGenericArguments()[1] == typeof(IDictionary<String' object>))) " is 161.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,ResolveInternal,The length of the statement  "            if (!String.IsNullOrEmpty(registration.Name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.Fail) " is 123.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,ResolveInternal,The length of the statement  "            if (!String.IsNullOrEmpty(registration.Name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.AttemptUnnamedResolution) " is 143.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,ResolveInternal,The length of the statement  "            if ((options.UnregisteredResolutionAction == UnregisteredResolutionActions.AttemptResolve) || (registration.Type.IsGenericType() && options.UnregisteredResolutionAction == UnregisteredResolutionActions.GenericsOnly)) " is 216.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "                //				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => !mi.GetParameters().Any()); " is 141.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "                //				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => mi.GetParameters().Length == 1 && mi.GetParameters()[0].GetType() == typeof(String)); " is 199.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "            //			if ((genericType == typeof(Func<''>) && type.GenericTypeArguments[0] == typeof(string) && type.GenericTypeArguments[1] == typeof(IDictionary<string' object>))) " is 164.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "            if ((genericType == typeof(Func<''>) && type.GetGenericArguments()[0] == typeof(string) && type.GetGenericArguments()[1] == typeof(IDictionary<string' object>))) " is 161.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "                //				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => mi.GetParameters().Length == 2 && mi.GetParameters()[0].GetType() == typeof(String) && mi.GetParameters()[1].GetType() == typeof(NamedParameterOverloads)); " is 269.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "                MethodInfo resolveMethod = typeof(TinyIoCContainer).GetMethod("Resolve"' new Type[] { typeof(String)' typeof(NamedParameterOverloads) }); " is 137.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "                var resolveCall = Expression.Call(Expression.Constant(this)' resolveMethod' name' Expression.Call(typeof(NamedParameterOverloads)' "FromIDictionary"' null' parameters)); " is 169.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,GetIEnumerableRequest,The length of the statement  "            //			var genericResolveAllMethod = this.GetType().GetGenericMethod("ResolveAll"' type.GenericTypeArguments' new[] { typeof(bool) }); " is 132.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,GetIEnumerableRequest,The length of the statement  "            var genericResolveAllMethod = this.GetType().GetGenericMethod(BindingFlags.Public | BindingFlags.Instance' "ResolveAll"' type.GetGenericArguments()' new[] { typeof(bool) }); " is 173.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,CanConstruct,The length of the statement  "                if (!isParameterOverload && !CanResolveInternal(new TypeRegistration(parameter.ParameterType)' NamedParameterOverloads.Default' options)) " is 137.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,ConstructType,The length of the statement  "                constructor = GetBestConstructor(typeToConstruct' parameters' options) ?? GetTypeConstructors(typeToConstruct).LastOrDefault(); " is 127.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,BuildUpInternal,The length of the statement  "            //							 where (property.GetMethod != null) && (property.SetMethod != null) && !property.PropertyType.GetTypeInfo().IsValueType " is 128.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,BuildUpInternal,The length of the statement  "                        property.SetValue(input' ResolveInternal(new TypeRegistration(property.PropertyType)' NamedParameterOverloads.Default' resolveOptions)' null); " is 142.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,ResolveAllInternal,The length of the statement  "            var registrations = _RegisteredTypes.Keys.Where(tr => tr.Type == resolveType).Concat(GetParentRegistrationsForType(resolveType)); " is 129.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,ResolveAllInternal,The length of the statement  "            return registrations.Select(registration => this.ResolveInternal(registration' NamedParameterOverloads.Default' ResolveOptions.Default)); " is 137.
Long Statement,System.Reflection,RegisterOptions,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,ToCustomLifetimeManager,The length of the statement  "                return instance._Container.AddUpdateRegistration(instance._Registration' currentFactory.GetCustomObjectLifetimeVariant(lifetimeProvider' errorString)); " is 151.
Long Statement,System.Reflection,MultiRegisterOptions,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,ToCustomLifetimeManager,The length of the statement  "                instance._RegisterOptions = instance.ExecuteOnAllRegisterOptions(ro => RegisterOptions.ToCustomLifetimeManager(ro' lifetimeProvider' errorString)); " is 147.
Long Statement,System.Reflection,DelegateFactory,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,SetConstructor,The length of the statement  "                throw new TinyIoCConstructorResolutionException("Constructor selection is not possible for delegate factory registrations"); " is 124.
Long Statement,System.Reflection,WeakDelegateFactory,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,SetConstructor,The length of the statement  "                throw new TinyIoCConstructorResolutionException("Constructor selection is not possible for delegate factory registrations"); " is 124.
Long Statement,System.Reflection,InstanceFactory,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,SetConstructor,The length of the statement  "                throw new TinyIoCConstructorResolutionException("Constructor selection is not possible for instance factory registrations"); " is 124.
Long Statement,System.Reflection,WeakInstanceFactory,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,SetConstructor,The length of the statement  "                throw new TinyIoCConstructorResolutionException("Constructor selection is not possible for instance factory registrations"); " is 124.
Empty Catch Block,MMBot,Robot,C:\repos\mmbot_mmbot\MMBot.Core\Robot.cs,Reset,The method has an empty catch block.
Empty Catch Block,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,AutoRegisterInternal,The method has an empty catch block.
Empty Catch Block,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,AutoRegisterInternal,The method has an empty catch block.
Empty Catch Block,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,BuildUpInternal,The method has an empty catch block.
Empty Catch Block,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,AutoRegisterInternal,The method has an empty catch block.
Empty Catch Block,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,AutoRegisterInternal,The method has an empty catch block.
Empty Catch Block,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,BuildUpInternal,The method has an empty catch block.
Magic Number,MMBot,ConfigurationFileParser,C:\repos\mmbot_mmbot\MMBot.Core\ConfigurationFileParser.cs,Load,The following statement contains a magic number: foreach (var l in lines)              {                  var line = l.text;                    if (line.StartsWith(";") || string.IsNullOrWhiteSpace(line))                  {                      currentSection.Add(";" + l.idx' line);                      continue;                  }                    if (line.StartsWith("[") && line.EndsWith("]"))                  {                      currentSection = new Dictionary<string' string>(StringComparer.InvariantCultureIgnoreCase);                      _ini[line.Substring(1' line.Length - 2)] = currentSection;                      continue;                  }                    var idx = line.IndexOf("="' StringComparison.Ordinal);                  if (idx == -1)                      currentSection[line] = "";                  else                  {                      var value = line.Substring(idx + 1).TrimStart();                        if (value.StartsWith("\"") && value.EndsWith("\""))                      {                          value = value.Substring(1' value.Length - 2);                      }                      currentSection[line.Substring(0' idx).Trim()] = value;                  }              }
Magic Number,MMBot,ConfigurationFileParser,C:\repos\mmbot_mmbot\MMBot.Core\ConfigurationFileParser.cs,Load,The following statement contains a magic number: foreach (var l in lines)              {                  var line = l.text;                    if (line.StartsWith(";") || string.IsNullOrWhiteSpace(line))                  {                      currentSection.Add(";" + l.idx' line);                      continue;                  }                    if (line.StartsWith("[") && line.EndsWith("]"))                  {                      currentSection = new Dictionary<string' string>(StringComparer.InvariantCultureIgnoreCase);                      _ini[line.Substring(1' line.Length - 2)] = currentSection;                      continue;                  }                    var idx = line.IndexOf("="' StringComparison.Ordinal);                  if (idx == -1)                      currentSection[line] = "";                  else                  {                      var value = line.Substring(idx + 1).TrimStart();                        if (value.StartsWith("\"") && value.EndsWith("\""))                      {                          value = value.Substring(1' value.Length - 2);                      }                      currentSection[line.Substring(0' idx).Trim()] = value;                  }              }
Magic Number,MMBot,ConfigurationFileParser,C:\repos\mmbot_mmbot\MMBot.Core\ConfigurationFileParser.cs,endWithCRLF,The following statement contains a magic number: if (sb.Length < 4)              {                  return sb[sb.Length - 2] == '\r' &&                         sb[sb.Length - 1] == '\n';              }
Magic Number,MMBot,ConfigurationFileParser,C:\repos\mmbot_mmbot\MMBot.Core\ConfigurationFileParser.cs,endWithCRLF,The following statement contains a magic number: if (sb.Length < 4)              {                  return sb[sb.Length - 2] == '\r' &&                         sb[sb.Length - 1] == '\n';              }
Magic Number,MMBot,ConfigurationFileParser,C:\repos\mmbot_mmbot\MMBot.Core\ConfigurationFileParser.cs,endWithCRLF,The following statement contains a magic number: return sb[sb.Length - 4] == '\r' &&                     sb[sb.Length - 3] == '\n' &&                     sb[sb.Length - 2] == '\r' &&                     sb[sb.Length - 1] == '\n';
Magic Number,MMBot,ConfigurationFileParser,C:\repos\mmbot_mmbot\MMBot.Core\ConfigurationFileParser.cs,endWithCRLF,The following statement contains a magic number: return sb[sb.Length - 4] == '\r' &&                     sb[sb.Length - 3] == '\n' &&                     sb[sb.Length - 2] == '\r' &&                     sb[sb.Length - 1] == '\n';
Magic Number,MMBot,ConfigurationFileParser,C:\repos\mmbot_mmbot\MMBot.Core\ConfigurationFileParser.cs,endWithCRLF,The following statement contains a magic number: return sb[sb.Length - 4] == '\r' &&                     sb[sb.Length - 3] == '\n' &&                     sb[sb.Length - 2] == '\r' &&                     sb[sb.Length - 1] == '\n';
Magic Number,MMBot,DateTimeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\DateTimeExtensions.cs,GetRelativeTime,The following statement contains a magic number: if (dayDiff < 0 || dayDiff >= 31)              {                  return null;              }
Magic Number,MMBot,DateTimeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\DateTimeExtensions.cs,GetRelativeTime,The following statement contains a magic number: if (dayDiff == 0)              {                  // A.                  // Less than one minute ago.                  if (secDiff < 60)                  {                      return "just now";                  }                  // B.                  // Less than 2 minutes ago.                  if (secDiff < 120)                  {                      return "1 minute ago";                  }                  // C.                  // Less than one hour ago.                  if (secDiff < 3600)                  {                      return string.Format("{0} minutes ago"'                          Math.Floor((double)secDiff / 60));                  }                  // D.                  // Less than 2 hours ago.                  if (secDiff < 7200)                  {                      return "1 hour ago";                  }                  // E.                  // Less than one day ago.                  if (secDiff < 86400)                  {                      return string.Format("{0} hours ago"'                          Math.Floor((double)secDiff / 3600));                  }              }
Magic Number,MMBot,DateTimeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\DateTimeExtensions.cs,GetRelativeTime,The following statement contains a magic number: if (dayDiff == 0)              {                  // A.                  // Less than one minute ago.                  if (secDiff < 60)                  {                      return "just now";                  }                  // B.                  // Less than 2 minutes ago.                  if (secDiff < 120)                  {                      return "1 minute ago";                  }                  // C.                  // Less than one hour ago.                  if (secDiff < 3600)                  {                      return string.Format("{0} minutes ago"'                          Math.Floor((double)secDiff / 60));                  }                  // D.                  // Less than 2 hours ago.                  if (secDiff < 7200)                  {                      return "1 hour ago";                  }                  // E.                  // Less than one day ago.                  if (secDiff < 86400)                  {                      return string.Format("{0} hours ago"'                          Math.Floor((double)secDiff / 3600));                  }              }
Magic Number,MMBot,DateTimeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\DateTimeExtensions.cs,GetRelativeTime,The following statement contains a magic number: if (dayDiff == 0)              {                  // A.                  // Less than one minute ago.                  if (secDiff < 60)                  {                      return "just now";                  }                  // B.                  // Less than 2 minutes ago.                  if (secDiff < 120)                  {                      return "1 minute ago";                  }                  // C.                  // Less than one hour ago.                  if (secDiff < 3600)                  {                      return string.Format("{0} minutes ago"'                          Math.Floor((double)secDiff / 60));                  }                  // D.                  // Less than 2 hours ago.                  if (secDiff < 7200)                  {                      return "1 hour ago";                  }                  // E.                  // Less than one day ago.                  if (secDiff < 86400)                  {                      return string.Format("{0} hours ago"'                          Math.Floor((double)secDiff / 3600));                  }              }
Magic Number,MMBot,DateTimeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\DateTimeExtensions.cs,GetRelativeTime,The following statement contains a magic number: if (dayDiff == 0)              {                  // A.                  // Less than one minute ago.                  if (secDiff < 60)                  {                      return "just now";                  }                  // B.                  // Less than 2 minutes ago.                  if (secDiff < 120)                  {                      return "1 minute ago";                  }                  // C.                  // Less than one hour ago.                  if (secDiff < 3600)                  {                      return string.Format("{0} minutes ago"'                          Math.Floor((double)secDiff / 60));                  }                  // D.                  // Less than 2 hours ago.                  if (secDiff < 7200)                  {                      return "1 hour ago";                  }                  // E.                  // Less than one day ago.                  if (secDiff < 86400)                  {                      return string.Format("{0} hours ago"'                          Math.Floor((double)secDiff / 3600));                  }              }
Magic Number,MMBot,DateTimeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\DateTimeExtensions.cs,GetRelativeTime,The following statement contains a magic number: if (dayDiff == 0)              {                  // A.                  // Less than one minute ago.                  if (secDiff < 60)                  {                      return "just now";                  }                  // B.                  // Less than 2 minutes ago.                  if (secDiff < 120)                  {                      return "1 minute ago";                  }                  // C.                  // Less than one hour ago.                  if (secDiff < 3600)                  {                      return string.Format("{0} minutes ago"'                          Math.Floor((double)secDiff / 60));                  }                  // D.                  // Less than 2 hours ago.                  if (secDiff < 7200)                  {                      return "1 hour ago";                  }                  // E.                  // Less than one day ago.                  if (secDiff < 86400)                  {                      return string.Format("{0} hours ago"'                          Math.Floor((double)secDiff / 3600));                  }              }
Magic Number,MMBot,DateTimeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\DateTimeExtensions.cs,GetRelativeTime,The following statement contains a magic number: if (dayDiff == 0)              {                  // A.                  // Less than one minute ago.                  if (secDiff < 60)                  {                      return "just now";                  }                  // B.                  // Less than 2 minutes ago.                  if (secDiff < 120)                  {                      return "1 minute ago";                  }                  // C.                  // Less than one hour ago.                  if (secDiff < 3600)                  {                      return string.Format("{0} minutes ago"'                          Math.Floor((double)secDiff / 60));                  }                  // D.                  // Less than 2 hours ago.                  if (secDiff < 7200)                  {                      return "1 hour ago";                  }                  // E.                  // Less than one day ago.                  if (secDiff < 86400)                  {                      return string.Format("{0} hours ago"'                          Math.Floor((double)secDiff / 3600));                  }              }
Magic Number,MMBot,DateTimeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\DateTimeExtensions.cs,GetRelativeTime,The following statement contains a magic number: if (dayDiff == 0)              {                  // A.                  // Less than one minute ago.                  if (secDiff < 60)                  {                      return "just now";                  }                  // B.                  // Less than 2 minutes ago.                  if (secDiff < 120)                  {                      return "1 minute ago";                  }                  // C.                  // Less than one hour ago.                  if (secDiff < 3600)                  {                      return string.Format("{0} minutes ago"'                          Math.Floor((double)secDiff / 60));                  }                  // D.                  // Less than 2 hours ago.                  if (secDiff < 7200)                  {                      return "1 hour ago";                  }                  // E.                  // Less than one day ago.                  if (secDiff < 86400)                  {                      return string.Format("{0} hours ago"'                          Math.Floor((double)secDiff / 3600));                  }              }
Magic Number,MMBot,DateTimeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\DateTimeExtensions.cs,GetRelativeTime,The following statement contains a magic number: if (dayDiff < 7)              {                  return string.Format("{0} days ago"'                  dayDiff);              }
Magic Number,MMBot,DateTimeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\DateTimeExtensions.cs,GetRelativeTime,The following statement contains a magic number: if (dayDiff < 31)              {                  return string.Format("{0} weeks ago"'                  Math.Ceiling((double)dayDiff / 7));              }
Magic Number,MMBot,DateTimeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\DateTimeExtensions.cs,GetRelativeTime,The following statement contains a magic number: if (dayDiff < 31)              {                  return string.Format("{0} weeks ago"'                  Math.Ceiling((double)dayDiff / 7));              }
Magic Number,MMBot,DateTimeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\DateTimeExtensions.cs,ToEpochTime,The following statement contains a magic number: var seconds = (long)(dt - new DateTime(1970' 1' 1' 0' 0' 0)).TotalSeconds;
Magic Number,MMBot,DateTimeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\DateTimeExtensions.cs,ToEpochTime,The following statement contains a magic number: return toMilliseconds ? seconds * 1000 : seconds;
Magic Number,MMBot,DateTimeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\DateTimeExtensions.cs,ToDateTime,The following statement contains a magic number: return new DateTime(1970' 1' 1' 0' 0' 0).AddSeconds(epoch);
Magic Number,MMBot,DateTimeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\DateTimeExtensions.cs,ToRelativeTimePast,The following statement contains a magic number: if (delta < 60)              {                  return ts.Seconds == 1 ? "1 sec ago" : ts.Seconds + " secs ago";              }
Magic Number,MMBot,DateTimeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\DateTimeExtensions.cs,ToRelativeTimePast,The following statement contains a magic number: if (delta < 3600) // 60 mins * 60 sec              {                  return ts.Minutes == 1 ? "1 min ago" : ts.Minutes + " mins ago";              }
Magic Number,MMBot,DateTimeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\DateTimeExtensions.cs,ToRelativeTimePast,The following statement contains a magic number: if (delta < 86400)  // 24 hrs * 60 mins * 60 sec              {                  return ts.Hours == 1 ? "1 hour ago" : ts.Hours + " hours ago";              }
Magic Number,MMBot,DateTimeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\DateTimeExtensions.cs,ToRelativeTimePast,The following statement contains a magic number: if (days <= 2)              {                  return days + " days ago";              }
Magic Number,MMBot,DateTimeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\DateTimeExtensions.cs,ToRelativeTimeFuture,The following statement contains a magic number: if (delta < 60)              {                  return ts.Seconds == 1 ? "in 1 second" : "in " + ts.Seconds + " seconds";              }
Magic Number,MMBot,DateTimeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\DateTimeExtensions.cs,ToRelativeTimeFuture,The following statement contains a magic number: if (delta < 3600) // 60 mins * 60 sec              {                  return ts.Minutes == 1 ? "in 1 minute" : "in " + ts.Minutes + " minutes";              }
Magic Number,MMBot,DateTimeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\DateTimeExtensions.cs,ToRelativeTimeFuture,The following statement contains a magic number: if (delta < 86400) // 24 hrs * 60 mins * 60 sec              {                  return ts.Hours == 1 ? "in 1 hour" : "in " + ts.Hours + " hours";              }
Magic Number,MMBot,DateTimeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\DateTimeExtensions.cs,ToRelativeTimeFuture,The following statement contains a magic number: if (days <= 10)              {                  return "in " + days + " day" + (days > 1 ? "s" : "");              }
Magic Number,MMBot,DateTimeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\DateTimeExtensions.cs,ToRelativeTimePastSimple,The following statement contains a magic number: if (delta < 60)                  return sign + ts.Seconds + " sec" + (ts.Seconds == 1 ? "" : "s");
Magic Number,MMBot,DateTimeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\DateTimeExtensions.cs,ToRelativeTimePastSimple,The following statement contains a magic number: if (delta < 3600) // 60 mins * 60 sec                  return sign + ts.Minutes + " min" + (ts.Minutes == 1 ? "" : "s");
Magic Number,MMBot,DateTimeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\DateTimeExtensions.cs,ToRelativeTimePastSimple,The following statement contains a magic number: if (delta < 86400) // 24 hrs * 60 mins * 60 sec                  return sign + ts.Hours + " hour" + (ts.Hours == 1 ? "" : "s");
Magic Number,MMBot,DateTimeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\DateTimeExtensions.cs,ToRelativeTimeFutureSimple,The following statement contains a magic number: if (delta < 60)                  return sign + ts.Seconds + " sec" + (ts.Seconds == 1 ? "" : "s");
Magic Number,MMBot,DateTimeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\DateTimeExtensions.cs,ToRelativeTimeFutureSimple,The following statement contains a magic number: if (delta < 3600) // 60 mins * 60 sec                  return sign + ts.Minutes + " min" + (ts.Minutes == 1 ? "" : "s");
Magic Number,MMBot,DateTimeExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\DateTimeExtensions.cs,ToRelativeTimeFutureSimple,The following statement contains a magic number: if (delta < 86400) // 24 hrs * 60 mins * 60 sec                  return sign + ts.Hours + " hour" + (ts.Hours == 1 ? "" : "s");
Magic Number,MMBot,ExtensionMethods,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\ExtensionMethods.cs,Micro,The following statement contains a magic number: if (number >= 1000000)              {                  return String.Format("{0:0.0m}"' (double)number / 1000000);              }
Magic Number,MMBot,ExtensionMethods,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\ExtensionMethods.cs,Micro,The following statement contains a magic number: if (number >= 1000000)              {                  return String.Format("{0:0.0m}"' (double)number / 1000000);              }
Magic Number,MMBot,ExtensionMethods,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\ExtensionMethods.cs,Micro,The following statement contains a magic number: if (number >= 100000)              {                  return String.Format("{0:0k}"' (double)number / 1000);              }
Magic Number,MMBot,ExtensionMethods,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\ExtensionMethods.cs,Micro,The following statement contains a magic number: if (number >= 100000)              {                  return String.Format("{0:0k}"' (double)number / 1000);              }
Magic Number,MMBot,ExtensionMethods,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\ExtensionMethods.cs,Micro,The following statement contains a magic number: if (number >= 10000)              {                  return String.Format("{0:0k}"' (double)number / 1000);              }
Magic Number,MMBot,ExtensionMethods,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\ExtensionMethods.cs,Micro,The following statement contains a magic number: if (number >= 10000)              {                  return String.Format("{0:0k}"' (double)number / 1000);              }
Magic Number,MMBot,ExtensionMethods,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\ExtensionMethods.cs,Micro,The following statement contains a magic number: if (number >= 1000)              {                  return String.Format("{0:0k}"' (double)number / 1000);              }
Magic Number,MMBot,ExtensionMethods,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\ExtensionMethods.cs,Micro,The following statement contains a magic number: if (number >= 1000)              {                  return String.Format("{0:0k}"' (double)number / 1000);              }
Magic Number,MMBot,ExtensionMethods,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\ExtensionMethods.cs,PercentChance,The following statement contains a magic number: return random.Next(1' 100) <= percentChanceToOccur;
Magic Number,MMBot,ExtensionMethods,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\ExtensionMethods.cs,ToSecondsFromDays,The following statement contains a magic number: return representingDays * 24 * 60 * 60;
Magic Number,MMBot,ExtensionMethods,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\ExtensionMethods.cs,ToSecondsFromDays,The following statement contains a magic number: return representingDays * 24 * 60 * 60;
Magic Number,MMBot,ExtensionMethods,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\ExtensionMethods.cs,ToSecondsFromDays,The following statement contains a magic number: return representingDays * 24 * 60 * 60;
Magic Number,MMBot,ExtensionMethods,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\ExtensionMethods.cs,TruncateWithEllipsis,The following statement contains a magic number: return string.Format("{0}..."' Truncate(s' maxLength - 3));
Magic Number,MMBot,OwinContextExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\OwinContextExtensions.cs,ReadBodyAsStringAsync,The following statement contains a magic number: var buffer = new byte[8000];
Magic Number,MMBot,OwinContextExtensions,C:\repos\mmbot_mmbot\MMBot.Core\Extensions\OwinContextExtensions.cs,ReadBodyAsStringAsync,The following statement contains a magic number: while (read > 0)              {                  sb.Append(Encoding.UTF8.GetString(buffer));                  buffer = new byte[8000];                  read = await context.Request.Body.ReadAsync(buffer' 0' buffer.Length);              }
Magic Number,MMBot.Brains,AkavacheBrain,C:\repos\mmbot_mmbot\MMBot.Core\Brains\AkavacheBrain.cs,CleanseTypeNamesFromCache,The following statement contains a magic number: foreach (string key in _cache.GetAllKeys())              {                  var bytes = await _cache.GetAsync(key);                  await _cache.Invalidate(key);                    await _cache.Insert(key.Substring(key.IndexOf("___"' StringComparison.Ordinal) + 3)' bytes);              }
Magic Number,MMBot.Router,Route,C:\repos\mmbot_mmbot\MMBot.Core\Router\Route.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((Path != null ? Path.GetHashCode() : 0) * 397) ^ (int)Method;              }
Magic Number,MMBot.Scripts,LocalScriptStore,C:\repos\mmbot_mmbot\MMBot.Core\Scripts\LocalScriptStore.cs,StartWatching,The following statement contains a magic number: _filewatchSubscription = Observable.FromEventPattern<FileSystemEventHandler' FileSystemEventArgs>(                  h => _fileSystemWatcher.Created += h'                  h => _fileSystemWatcher.Created -= h)                  .Select(x => x.EventArgs.FullPath)                  .Merge(                                  Observable.FromEventPattern<FileSystemEventHandler' FileSystemEventArgs>(                          h => _fileSystemWatcher.Changed += h'                          h => _fileSystemWatcher.Changed -= h)                          .Select(x => x.EventArgs.FullPath))                  .Merge(                      Observable.FromEventPattern<RenamedEventHandler' RenamedEventArgs>(                          h => _fileSystemWatcher.Renamed += h'                          h => _fileSystemWatcher.Renamed -= h)                          .Select(x => x.EventArgs.FullPath))                          .Do(path => _log.Info(string.Format("Detected change in script file '{0}'"' path)))                  .Where(path => _loadedScriptFiles.Keys.Contains(path))                  .GroupBy(i => i)                  .SelectMany(g => g.Throttle(TimeSpan.FromMilliseconds(500)))                  .Select(GetScriptByPath)                                    .Subscribe(_scriptUpdated);
Magic Number,MMBot.Scripts,NuGetScripts,C:\repos\mmbot_mmbot\MMBot.Core\Scripts\NuGetScripts.cs,Register,The following statement contains a magic number: robot.Respond(BuildCommand(new[] { Add' Package' Source' ParamWithNoSpaces })' msg =>              {                  var source = msg.Match[4].ToString(CultureInfo.InvariantCulture);                  msg.Send(!AddSource(source' robot)                      ? "I already know about this one."                      : "Consider it done.");              });
Magic Number,MMBot.Scripts,NuGetScripts,C:\repos\mmbot_mmbot\MMBot.Core\Scripts\NuGetScripts.cs,Register,The following statement contains a magic number: robot.Respond(BuildCommand(new[] { Remove' Package' Source' ParamWithNoSpaces })' msg =>              {                  var source = msg.Match[4].ToString(CultureInfo.InvariantCulture);                  msg.Send(RemoveSource(source' robot)                      ? "I'll forget it immediately."                      : "It's easy to forget what you never knew.");              });
Magic Number,MMBot.Scripts,NuGetScripts,C:\repos\mmbot_mmbot\MMBot.Core\Scripts\NuGetScripts.cs,Register,The following statement contains a magic number: robot.Respond(BuildCommand(new[] { Update' Package' ParamWithNoSpaces' Restart }' new[] { 3 })' msg =>              {                  //ID of the package to be looked up                  var packageId = msg.Match[3].ToString(CultureInfo.InvariantCulture);                  string unaliasedPackageId;                    var knownAliases = GetRememberedAliases(robot);                  if (!knownAliases.TryGetValue(packageId.ToLower()' out unaliasedPackageId))                  {                      unaliasedPackageId = packageId;                  }                    msg.Send("Building repositories...");                  IPackageRepository repo = BuildPackagesRepository(robot);                    //Get the list of all NuGet packages with ID 'EntityFramework'                     msg.Send("Finding package...");                  List<IPackage> packages = repo.FindPackagesById(unaliasedPackageId).ToList();                    IPackage latestPackageVersion;                    if (packages.Any())                  {                      //try to get the "absolute latest version" and fall back to packages.Last() if none are marked as such                      latestPackageVersion = packages.Any(p => p.IsAbsoluteLatestVersion)                                                 ? packages.First(p => p.IsAbsoluteLatestVersion)                                                 : packages.Last();                      msg.Send("Found it! Downloading...");                  }                  else                  {                      msg.Send("I couldn't find it...sorry!");                      return;                  }                    //Initialize the package manager                  string path = GetPackagesPath();                  var packageManager = new PackageManager(repo' path);                    //Download and unzip the package                  packageManager.InstallPackage(latestPackageVersion' false' true);//TODO: allow these flags to be configurable? allow user to specify version?                  msg.Send("Finished downloading...");                    var postInstallState = packageManager.LocalRepository.GetPackages().Cast<LocalPackage>().ToList();                  var packageGroups = postInstallState.GroupBy(p => p.Id);                  var latestVersions = new List<IPackage>();                    foreach (var packageGroup in packageGroups)                  {                      var latestPackage = packageGroup.First(p => packageGroup.Max(p2 => p2.Version) == p.Version);                      latestVersions.Add(latestPackage);                  }                    var packageFoldersToDelete = postInstallState.Except(latestVersions).Select(p => Path.Combine(path' p.Id + "." + p.Version)).ToList();                    if (packageFoldersToDelete.Any())                  {                      PackageDirCleaner.RegisterDirectoriesToDelete(packageFoldersToDelete);                      msg.Send("Old package versions to cleanup on next reset: "'string.Join("' "'packageFoldersToDelete));                  }                    if (ShouldAutoResetAfterUpdate(robot) || (msg.Match.Length >= 5 && Regex.IsMatch(msg.Match[4]' Restart)))                  {                      //They submitted the reset parameter or auto-reset is on.                      msg.Send("Resetting...please wait.");                      robot.Reset();                  }              });
Magic Number,MMBot.Scripts,NuGetScripts,C:\repos\mmbot_mmbot\MMBot.Core\Scripts\NuGetScripts.cs,Register,The following statement contains a magic number: robot.Respond(BuildCommand(new[] { Update' Package' ParamWithNoSpaces' Restart }' new[] { 3 })' msg =>              {                  //ID of the package to be looked up                  var packageId = msg.Match[3].ToString(CultureInfo.InvariantCulture);                  string unaliasedPackageId;                    var knownAliases = GetRememberedAliases(robot);                  if (!knownAliases.TryGetValue(packageId.ToLower()' out unaliasedPackageId))                  {                      unaliasedPackageId = packageId;                  }                    msg.Send("Building repositories...");                  IPackageRepository repo = BuildPackagesRepository(robot);                    //Get the list of all NuGet packages with ID 'EntityFramework'                     msg.Send("Finding package...");                  List<IPackage> packages = repo.FindPackagesById(unaliasedPackageId).ToList();                    IPackage latestPackageVersion;                    if (packages.Any())                  {                      //try to get the "absolute latest version" and fall back to packages.Last() if none are marked as such                      latestPackageVersion = packages.Any(p => p.IsAbsoluteLatestVersion)                                                 ? packages.First(p => p.IsAbsoluteLatestVersion)                                                 : packages.Last();                      msg.Send("Found it! Downloading...");                  }                  else                  {                      msg.Send("I couldn't find it...sorry!");                      return;                  }                    //Initialize the package manager                  string path = GetPackagesPath();                  var packageManager = new PackageManager(repo' path);                    //Download and unzip the package                  packageManager.InstallPackage(latestPackageVersion' false' true);//TODO: allow these flags to be configurable? allow user to specify version?                  msg.Send("Finished downloading...");                    var postInstallState = packageManager.LocalRepository.GetPackages().Cast<LocalPackage>().ToList();                  var packageGroups = postInstallState.GroupBy(p => p.Id);                  var latestVersions = new List<IPackage>();                    foreach (var packageGroup in packageGroups)                  {                      var latestPackage = packageGroup.First(p => packageGroup.Max(p2 => p2.Version) == p.Version);                      latestVersions.Add(latestPackage);                  }                    var packageFoldersToDelete = postInstallState.Except(latestVersions).Select(p => Path.Combine(path' p.Id + "." + p.Version)).ToList();                    if (packageFoldersToDelete.Any())                  {                      PackageDirCleaner.RegisterDirectoriesToDelete(packageFoldersToDelete);                      msg.Send("Old package versions to cleanup on next reset: "'string.Join("' "'packageFoldersToDelete));                  }                    if (ShouldAutoResetAfterUpdate(robot) || (msg.Match.Length >= 5 && Regex.IsMatch(msg.Match[4]' Restart)))                  {                      //They submitted the reset parameter or auto-reset is on.                      msg.Send("Resetting...please wait.");                      robot.Reset();                  }              });
Magic Number,MMBot.Scripts,NuGetScripts,C:\repos\mmbot_mmbot\MMBot.Core\Scripts\NuGetScripts.cs,Register,The following statement contains a magic number: robot.Respond(BuildCommand(new[] { Update' Package' ParamWithNoSpaces' Restart }' new[] { 3 })' msg =>              {                  //ID of the package to be looked up                  var packageId = msg.Match[3].ToString(CultureInfo.InvariantCulture);                  string unaliasedPackageId;                    var knownAliases = GetRememberedAliases(robot);                  if (!knownAliases.TryGetValue(packageId.ToLower()' out unaliasedPackageId))                  {                      unaliasedPackageId = packageId;                  }                    msg.Send("Building repositories...");                  IPackageRepository repo = BuildPackagesRepository(robot);                    //Get the list of all NuGet packages with ID 'EntityFramework'                     msg.Send("Finding package...");                  List<IPackage> packages = repo.FindPackagesById(unaliasedPackageId).ToList();                    IPackage latestPackageVersion;                    if (packages.Any())                  {                      //try to get the "absolute latest version" and fall back to packages.Last() if none are marked as such                      latestPackageVersion = packages.Any(p => p.IsAbsoluteLatestVersion)                                                 ? packages.First(p => p.IsAbsoluteLatestVersion)                                                 : packages.Last();                      msg.Send("Found it! Downloading...");                  }                  else                  {                      msg.Send("I couldn't find it...sorry!");                      return;                  }                    //Initialize the package manager                  string path = GetPackagesPath();                  var packageManager = new PackageManager(repo' path);                    //Download and unzip the package                  packageManager.InstallPackage(latestPackageVersion' false' true);//TODO: allow these flags to be configurable? allow user to specify version?                  msg.Send("Finished downloading...");                    var postInstallState = packageManager.LocalRepository.GetPackages().Cast<LocalPackage>().ToList();                  var packageGroups = postInstallState.GroupBy(p => p.Id);                  var latestVersions = new List<IPackage>();                    foreach (var packageGroup in packageGroups)                  {                      var latestPackage = packageGroup.First(p => packageGroup.Max(p2 => p2.Version) == p.Version);                      latestVersions.Add(latestPackage);                  }                    var packageFoldersToDelete = postInstallState.Except(latestVersions).Select(p => Path.Combine(path' p.Id + "." + p.Version)).ToList();                    if (packageFoldersToDelete.Any())                  {                      PackageDirCleaner.RegisterDirectoriesToDelete(packageFoldersToDelete);                      msg.Send("Old package versions to cleanup on next reset: "'string.Join("' "'packageFoldersToDelete));                  }                    if (ShouldAutoResetAfterUpdate(robot) || (msg.Match.Length >= 5 && Regex.IsMatch(msg.Match[4]' Restart)))                  {                      //They submitted the reset parameter or auto-reset is on.                      msg.Send("Resetting...please wait.");                      robot.Reset();                  }              });
Magic Number,MMBot.Scripts,NuGetScripts,C:\repos\mmbot_mmbot\MMBot.Core\Scripts\NuGetScripts.cs,Register,The following statement contains a magic number: robot.Respond(BuildCommand(new[] { Update' Package' ParamWithNoSpaces' Restart }' new[] { 3 })' msg =>              {                  //ID of the package to be looked up                  var packageId = msg.Match[3].ToString(CultureInfo.InvariantCulture);                  string unaliasedPackageId;                    var knownAliases = GetRememberedAliases(robot);                  if (!knownAliases.TryGetValue(packageId.ToLower()' out unaliasedPackageId))                  {                      unaliasedPackageId = packageId;                  }                    msg.Send("Building repositories...");                  IPackageRepository repo = BuildPackagesRepository(robot);                    //Get the list of all NuGet packages with ID 'EntityFramework'                     msg.Send("Finding package...");                  List<IPackage> packages = repo.FindPackagesById(unaliasedPackageId).ToList();                    IPackage latestPackageVersion;                    if (packages.Any())                  {                      //try to get the "absolute latest version" and fall back to packages.Last() if none are marked as such                      latestPackageVersion = packages.Any(p => p.IsAbsoluteLatestVersion)                                                 ? packages.First(p => p.IsAbsoluteLatestVersion)                                                 : packages.Last();                      msg.Send("Found it! Downloading...");                  }                  else                  {                      msg.Send("I couldn't find it...sorry!");                      return;                  }                    //Initialize the package manager                  string path = GetPackagesPath();                  var packageManager = new PackageManager(repo' path);                    //Download and unzip the package                  packageManager.InstallPackage(latestPackageVersion' false' true);//TODO: allow these flags to be configurable? allow user to specify version?                  msg.Send("Finished downloading...");                    var postInstallState = packageManager.LocalRepository.GetPackages().Cast<LocalPackage>().ToList();                  var packageGroups = postInstallState.GroupBy(p => p.Id);                  var latestVersions = new List<IPackage>();                    foreach (var packageGroup in packageGroups)                  {                      var latestPackage = packageGroup.First(p => packageGroup.Max(p2 => p2.Version) == p.Version);                      latestVersions.Add(latestPackage);                  }                    var packageFoldersToDelete = postInstallState.Except(latestVersions).Select(p => Path.Combine(path' p.Id + "." + p.Version)).ToList();                    if (packageFoldersToDelete.Any())                  {                      PackageDirCleaner.RegisterDirectoriesToDelete(packageFoldersToDelete);                      msg.Send("Old package versions to cleanup on next reset: "'string.Join("' "'packageFoldersToDelete));                  }                    if (ShouldAutoResetAfterUpdate(robot) || (msg.Match.Length >= 5 && Regex.IsMatch(msg.Match[4]' Restart)))                  {                      //They submitted the reset parameter or auto-reset is on.                      msg.Send("Resetting...please wait.");                      robot.Reset();                  }              });
Magic Number,MMBot.Scripts,NuGetScripts,C:\repos\mmbot_mmbot\MMBot.Core\Scripts\NuGetScripts.cs,Register,The following statement contains a magic number: robot.Respond(BuildCommand(new[] { Add' Package' Alias' ParamWithNoSpaces })' msg =>              {                  var alias = msg.Match[4].ToString(CultureInfo.InvariantCulture);                  AddAlias(alias' robot);                  msg.Send("I'll be sure to remember that.");              });
Magic Number,MMBot.Scripts,NuGetScripts,C:\repos\mmbot_mmbot\MMBot.Core\Scripts\NuGetScripts.cs,Register,The following statement contains a magic number: robot.Respond(BuildCommand(new[] { Remove' Package' Alias' ParamWithNoSpaces })' msg =>              {                  var alias = msg.Match[4].ToString(CultureInfo.InvariantCulture);                  RemoveAlias(alias' robot);                  msg.Send("As you wish.");              });
Magic Number,MMBot.Scripts,ScriptCsScriptFile,C:\repos\mmbot_mmbot\MMBot.Core\Scripts\ScriptCsScriptFile.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((Name != null ? Name.GetHashCode() : 0) * 397) ^ (Path != null ? Path.GetHashCode() : 0);              }
Magic Number,TinyIoC,GenericMethodCacheKey,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,GenerateHashCode,The following statement contains a magic number: unchecked                  {                      var result = _sourceType.GetHashCode();                        result = (result * 397) ^ _methodName.GetHashCode();                        for (int i = 0; i < _genericTypes.Length; ++i)                      {                          result = (result * 397) ^ _genericTypes[i].GetHashCode();                      }                        for (int i = 0; i < _parameterTypes.Length; ++i)                      {                          result = (result * 397) ^ _parameterTypes[i].GetHashCode();                      }                        return result;                  }
Magic Number,TinyIoC,GenericMethodCacheKey,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,GenerateHashCode,The following statement contains a magic number: unchecked                  {                      var result = _sourceType.GetHashCode();                        result = (result * 397) ^ _methodName.GetHashCode();                        for (int i = 0; i < _genericTypes.Length; ++i)                      {                          result = (result * 397) ^ _genericTypes[i].GetHashCode();                      }                        for (int i = 0; i < _parameterTypes.Length; ++i)                      {                          result = (result * 397) ^ _parameterTypes[i].GetHashCode();                      }                        return result;                  }
Magic Number,TinyIoC,GenericMethodCacheKey,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,GenerateHashCode,The following statement contains a magic number: unchecked                  {                      var result = _sourceType.GetHashCode();                        result = (result * 397) ^ _methodName.GetHashCode();                        for (int i = 0; i < _genericTypes.Length; ++i)                      {                          result = (result * 397) ^ _genericTypes[i].GetHashCode();                      }                        for (int i = 0; i < _parameterTypes.Length; ++i)                      {                          result = (result * 397) ^ _parameterTypes[i].GetHashCode();                      }                        return result;                  }
Magic Number,TinyIoC,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The following statement contains a magic number: if ((genericType == typeof(Func<''>) && type.GetGenericArguments()[0] == typeof(string) && type.GetGenericArguments()[1] == typeof(IDictionary<string' object>)))              //#endif              {                  Type returnType = genericArguments[2];                    var name = Expression.Parameter(typeof(string)' "name");                  var parameters = Expression.Parameter(typeof(IDictionary<string' object>)' "parameters");                    //#if NETFX_CORE                  //				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => mi.GetParameters().Length == 2 && mi.GetParameters()[0].GetType() == typeof(String) && mi.GetParameters()[1].GetType() == typeof(NamedParameterOverloads));                  //#else                  MethodInfo resolveMethod = typeof(TinyIoCContainer).GetMethod("Resolve"' new Type[] { typeof(String)' typeof(NamedParameterOverloads) });                  //#endif                  resolveMethod = resolveMethod.MakeGenericMethod(returnType);                    var resolveCall = Expression.Call(Expression.Constant(this)' resolveMethod' name' Expression.Call(typeof(NamedParameterOverloads)' "FromIDictionary"' null' parameters));                    var resolveLambda = Expression.Lambda(resolveCall' name' parameters).Compile();                    return resolveLambda;              }
Magic Number,System.Reflection,GenericMethodCacheKey,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,GenerateHashCode,The following statement contains a magic number: unchecked                  {                      var result = _sourceType.GetHashCode();                        result = (result * 397) ^ _methodName.GetHashCode();                        for (int i = 0; i < _genericTypes.Length; ++i)                      {                          result = (result * 397) ^ _genericTypes[i].GetHashCode();                      }                        for (int i = 0; i < _parameterTypes.Length; ++i)                      {                          result = (result * 397) ^ _parameterTypes[i].GetHashCode();                      }                        return result;                  }
Magic Number,System.Reflection,GenericMethodCacheKey,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,GenerateHashCode,The following statement contains a magic number: unchecked                  {                      var result = _sourceType.GetHashCode();                        result = (result * 397) ^ _methodName.GetHashCode();                        for (int i = 0; i < _genericTypes.Length; ++i)                      {                          result = (result * 397) ^ _genericTypes[i].GetHashCode();                      }                        for (int i = 0; i < _parameterTypes.Length; ++i)                      {                          result = (result * 397) ^ _parameterTypes[i].GetHashCode();                      }                        return result;                  }
Magic Number,System.Reflection,GenericMethodCacheKey,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,GenerateHashCode,The following statement contains a magic number: unchecked                  {                      var result = _sourceType.GetHashCode();                        result = (result * 397) ^ _methodName.GetHashCode();                        for (int i = 0; i < _genericTypes.Length; ++i)                      {                          result = (result * 397) ^ _genericTypes[i].GetHashCode();                      }                        for (int i = 0; i < _parameterTypes.Length; ++i)                      {                          result = (result * 397) ^ _parameterTypes[i].GetHashCode();                      }                        return result;                  }
Magic Number,System.Reflection,TinyIoCContainer,C:\repos\mmbot_mmbot\MMBot.Core\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The following statement contains a magic number: if ((genericType == typeof(Func<''>) && type.GetGenericArguments()[0] == typeof(string) && type.GetGenericArguments()[1] == typeof(IDictionary<string' object>)))              //#endif              {                  Type returnType = genericArguments[2];                    var name = Expression.Parameter(typeof(string)' "name");                  var parameters = Expression.Parameter(typeof(IDictionary<string' object>)' "parameters");                    //#if NETFX_CORE                  //				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => mi.GetParameters().Length == 2 && mi.GetParameters()[0].GetType() == typeof(String) && mi.GetParameters()[1].GetType() == typeof(NamedParameterOverloads));                  //#else                  MethodInfo resolveMethod = typeof(TinyIoCContainer).GetMethod("Resolve"' new Type[] { typeof(String)' typeof(NamedParameterOverloads) });                  //#endif                  resolveMethod = resolveMethod.MakeGenericMethod(returnType);                    var resolveCall = Expression.Call(Expression.Constant(this)' resolveMethod' name' Expression.Call(typeof(NamedParameterOverloads)' "FromIDictionary"' null' parameters));                    var resolveLambda = Expression.Lambda(resolveCall' name' parameters).Compile();                    return resolveLambda;              }
