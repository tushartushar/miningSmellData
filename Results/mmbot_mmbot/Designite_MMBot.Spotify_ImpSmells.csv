Implementation smell,Namespace,Class,File,Method,Description
Long Method,MMBot.Spotify,SpotifyPlayerScripts,C:\repos\mmbot_mmbot\MMBot.Spotify\SpotifyPlayerScripts.cs,Register,The method has 305 lines of code.
Long Statement,MMBot.Spotify,SpotiFireExtensions,C:\repos\mmbot_mmbot\MMBot.Spotify\SpotiFireExtensions.cs,GetDisplayName,The length of the statement  "            return string.Format("'{0}' by '{1}' from the album '{2}'"' track.Name' track.Artists.GetDisplayName() ' track.Album.Name); " is 123.
Long Statement,MMBot.Spotify,SpotifyPlayer,C:\repos\mmbot_mmbot\MMBot.Spotify\SpotifyPlayer.cs,Login,The length of the statement  "                    throw new Exception(string.Format("Could not login to Spotify - Spotify is not configured. You must supply the MMBOT_SPOTIFY_USERNAME and MMBOT_SPOTIFY_PASSWORD environment variables")); " is 186.
Long Statement,MMBot.Spotify,SpotifyPlayerScripts,C:\repos\mmbot_mmbot\MMBot.Spotify\SpotifyPlayerScripts.cs,UpdateLoungeTopic,The length of the statement  "            string message = _player.CurrentTrack != null && (_player.State == SpotifyPlayer.PlayerState.Playing || _player.State == SpotifyPlayer.PlayerState.Paused) " is 154.
Long Statement,MMBot.Spotify,SpotifyPlayerScripts,C:\repos\mmbot_mmbot\MMBot.Spotify\SpotifyPlayerScripts.cs,GetHelp,The length of the statement  "                "mmbot spotify queue <spotifyUri> -  Queues the track(s) from the spotify URI (supports tracks' albums and playlists)."' " is 120.
Long Statement,MMBot.Spotify,SpotifyPlayerScripts,C:\repos\mmbot_mmbot\MMBot.Spotify\SpotifyPlayerScripts.cs,ListArtistAlbums,The length of the statement  "            var albums = browse.Albums.Where(a => a.Type == AlbumType.Album && a.IsAvailable).Distinct(new GenericEqualityComparer<Album>((x' y) => x.Name == y.Name && x.Year == y.Year' x => x.Name.GetHashCode())).ToArray(); " is 212.
Magic Number,MMBot.Spotify,NAudioPlayer,C:\repos\mmbot_mmbot\MMBot.Spotify\NAudioPlayer.cs,CreateOutput,The following statement contains a magic number: var dso = new DirectSoundOut(70);
Magic Number,MMBot.Spotify,NAudioPlayer,C:\repos\mmbot_mmbot\MMBot.Spotify\NAudioPlayer.cs,TurnDown,The following statement contains a magic number: _currentVolume = System.Math.Max(0' _currentVolume - ((float)amount / 100));
Magic Number,MMBot.Spotify,NAudioPlayer,C:\repos\mmbot_mmbot\MMBot.Spotify\NAudioPlayer.cs,TurnUp,The following statement contains a magic number: _currentVolume = System.Math.Min(1' _currentVolume + ((float)amount / 100));
Magic Number,MMBot.Spotify,NAudioPlayer,C:\repos\mmbot_mmbot\MMBot.Spotify\NAudioPlayer.cs,SetVolume,The following statement contains a magic number: _currentVolume = System.Math.Min(1' ((float)volume / 100));
Magic Number,MMBot.Spotify,SpotifyPlayerScripts,C:\repos\mmbot_mmbot\MMBot.Spotify\SpotifyPlayerScripts.cs,Register,The following statement contains a magic number: Observable.FromEventPattern<Track>(e => _player.TrackChanged += e' e => _player.TrackChanged -= e)                  .Select(s => Unit.Default)                  .Merge(                      Observable.FromEventPattern<SpotifyPlayer.PlayerState>(e => _player.StateChanged += e'                          e => _player.StateChanged -= e).Select(s => Unit.Default))                          .Throttle(TimeSpan.FromMilliseconds(300))                  .Subscribe(a => UpdateLoungeTopic());
Magic Number,MMBot.Spotify,SpotifyPlayerScripts,C:\repos\mmbot_mmbot\MMBot.Spotify\SpotifyPlayerScripts.cs,Register,The following statement contains a magic number: robot.Respond(@"spotify play( album)?( .*)?"' async msg =>              {                  if (!await Login(msg)) return;                    bool isAlbum = !string.IsNullOrEmpty(msg.Match[1]);                  string query = msg.Match[2].Trim();                    if (string.IsNullOrWhiteSpace(query))                  {                      await _player.Play();                  }                  else                  {                      string message = null;                      if (_spotifyLinkRegex.IsMatch(query))                      {                          // We have a link so process as such                          message = await _player.PlayLink(query);                      }                      else                      {                          if (string.IsNullOrEmpty(query))                          {                              await msg.Send("Nothing to search for");                              return;                          }                            if (isAlbum)                          {                              var album = await _player.SearchForAlbum(query);                              if (album != null)                              {                                  message = await _player.PlayAlbum(album);                              }                              else                              {                                  await msg.Send(string.Format("Could not find any albums matching '{0}'"' query));                                  msg.Message.Done = true;                              }                          }                          else                          {                              // Search for a matching track                              var track = await _player.SearchForTrack(query);                              if (track != null)                              {                                  await _player.Play(track);                              }                              else                              {                                  await msg.Send(string.Format("Could not find any tracks matching '{0}'"' query));                                  msg.Message.Done = true;                              }                          }                      }                      // Output the user message from the play request' if any                      if (!string.IsNullOrWhiteSpace(message))                      {                          await msg.Send(message);                      }                  }              });
Magic Number,MMBot.Spotify,SpotifyPlayerScripts,C:\repos\mmbot_mmbot\MMBot.Spotify\SpotifyPlayerScripts.cs,Register,The following statement contains a magic number: robot.Respond(@"spotify (en)?queue( album)? (.*)"' async msg =>              {                  if (!await Login(msg)) return;                  bool isAlbum = !string.IsNullOrEmpty(msg.Match[2]);                  string query = msg.Match[3];                  string message = null;                  if (_spotifyLinkRegex.IsMatch(query))                  {                      // We have a link so process as such                      message = await _player.QueueLink(query);                  }                  else                  {                      if (string.IsNullOrEmpty(query))                      {                          await msg.Send("Nothing to search for");                          return;                      }                        // We just have a query so search                      if (isAlbum)                      {                          var album = await _player.SearchForAlbum(query);                          if (album != null)                          {                              message = await _player.QueueUpAlbum(album);                          }                          else                          {                              await msg.Send(string.Format("Could not find any albums matching '{0}'"' query));                              msg.Message.Done = true;                          }                      }                      else                      {                          var track = await _player.SearchForTrack(query);                          if (track != null)                          {                              message = await _player.QueueUpTrack(track' true);                          }                          else                          {                              await msg.Send(string.Format("Could not find any tracks matching '{0}'"' query));                              msg.Message.Done = true;                          }                      }                  }                  // Output the user message from the play request' if any                  if (!string.IsNullOrWhiteSpace(message))                  {                      await msg.Send(message);                  }              });
Magic Number,MMBot.Spotify,SpotifyPlayerScripts,C:\repos\mmbot_mmbot\MMBot.Spotify\SpotifyPlayerScripts.cs,Register,The following statement contains a magic number: robot.Respond(@"spotify (en)?queue( album)? (.*)"' async msg =>              {                  if (!await Login(msg)) return;                  bool isAlbum = !string.IsNullOrEmpty(msg.Match[2]);                  string query = msg.Match[3];                  string message = null;                  if (_spotifyLinkRegex.IsMatch(query))                  {                      // We have a link so process as such                      message = await _player.QueueLink(query);                  }                  else                  {                      if (string.IsNullOrEmpty(query))                      {                          await msg.Send("Nothing to search for");                          return;                      }                        // We just have a query so search                      if (isAlbum)                      {                          var album = await _player.SearchForAlbum(query);                          if (album != null)                          {                              message = await _player.QueueUpAlbum(album);                          }                          else                          {                              await msg.Send(string.Format("Could not find any albums matching '{0}'"' query));                              msg.Message.Done = true;                          }                      }                      else                      {                          var track = await _player.SearchForTrack(query);                          if (track != null)                          {                              message = await _player.QueueUpTrack(track' true);                          }                          else                          {                              await msg.Send(string.Format("Could not find any tracks matching '{0}'"' query));                              msg.Message.Done = true;                          }                      }                  }                  // Output the user message from the play request' if any                  if (!string.IsNullOrWhiteSpace(message))                  {                      await msg.Send(message);                  }              });
Magic Number,MMBot.Spotify,SpotifyPlayerScripts,C:\repos\mmbot_mmbot\MMBot.Spotify\SpotifyPlayerScripts.cs,Register,The following statement contains a magic number: robot.Respond(@"spotify show( album| artist| playlist)? (.*)"' async msg =>              {                  if (!await Login(msg)) return;                    if (msg.Match[2].Trim().ToLowerInvariant() == "queue")                  {                      return;                  }                    bool isAlbum = msg.Match[1].Trim().ToLowerInvariant() == "album";                  bool isArtist = msg.Match[1].Trim().ToLowerInvariant() == "artist";                  bool isPlaylist = msg.Match[1].Trim().ToLowerInvariant() == "playlist";                    string query = msg.Match[2].Trim();                    if (_spotifyLinkRegex.IsMatch(query))                  {                      // We have a link so process as such                      var link = await _player.ParseLink(query);                      if (link.Type == LinkType.Album)                      {                          await ListAlbumTracks(await link.AsAlbum()' msg);                      }                      else if (link.Type == LinkType.Playlist)                      {                          await ListPlaylistTracks(await link.AsPlaylist()' msg);                      }                      else if (link.Type == LinkType.Track)                      {                          await msg.Send("Track: " + (await link.AsTrack()).GetDisplayName());                      }                  }                  else                  {                      if (string.IsNullOrEmpty(query))                      {                          await msg.Send("Nothing to search for");                          return;                      }                      if (isAlbum)                      {                          var album = await _player.SearchForAlbum(query);                          if (album != null)                          {                              await ListAlbumTracks(album' msg);                          }                          else                          {                              await msg.Send(string.Format("Could not find any albums matching '{0}'"' query));                              msg.Message.Done = true;                          }                      }                      else if (isArtist)                      {                          var artist = await _player.SearchForArtist(query);                          if (artist != null)                          {                              await ListArtistAlbums(artist' msg);                          }                          else                          {                              await msg.Send(string.Format("Could not find any artists matching '{0}'"' query));                              msg.Message.Done = true;                          }                      }                      else if (isPlaylist)                      {                          var playList = await _player.SearchForPlaylist(query);                          if (playList != null)                          {                              await ListPlaylistTracks(playList' msg);                          }                          else                          {                              await msg.Send(string.Format("Could not find any playlists matching '{0}'"' query));                              msg.Message.Done = true;                          }                      }                      else                      {                          await msg.Send("Please specify album/artist/playlist. e.g. spotify show artist Journey");                      }                  }              });
Magic Number,MMBot.Spotify,SpotifyPlayerScripts,C:\repos\mmbot_mmbot\MMBot.Spotify\SpotifyPlayerScripts.cs,Register,The following statement contains a magic number: robot.Respond(@"spotify show( album| artist| playlist)? (.*)"' async msg =>              {                  if (!await Login(msg)) return;                    if (msg.Match[2].Trim().ToLowerInvariant() == "queue")                  {                      return;                  }                    bool isAlbum = msg.Match[1].Trim().ToLowerInvariant() == "album";                  bool isArtist = msg.Match[1].Trim().ToLowerInvariant() == "artist";                  bool isPlaylist = msg.Match[1].Trim().ToLowerInvariant() == "playlist";                    string query = msg.Match[2].Trim();                    if (_spotifyLinkRegex.IsMatch(query))                  {                      // We have a link so process as such                      var link = await _player.ParseLink(query);                      if (link.Type == LinkType.Album)                      {                          await ListAlbumTracks(await link.AsAlbum()' msg);                      }                      else if (link.Type == LinkType.Playlist)                      {                          await ListPlaylistTracks(await link.AsPlaylist()' msg);                      }                      else if (link.Type == LinkType.Track)                      {                          await msg.Send("Track: " + (await link.AsTrack()).GetDisplayName());                      }                  }                  else                  {                      if (string.IsNullOrEmpty(query))                      {                          await msg.Send("Nothing to search for");                          return;                      }                      if (isAlbum)                      {                          var album = await _player.SearchForAlbum(query);                          if (album != null)                          {                              await ListAlbumTracks(album' msg);                          }                          else                          {                              await msg.Send(string.Format("Could not find any albums matching '{0}'"' query));                              msg.Message.Done = true;                          }                      }                      else if (isArtist)                      {                          var artist = await _player.SearchForArtist(query);                          if (artist != null)                          {                              await ListArtistAlbums(artist' msg);                          }                          else                          {                              await msg.Send(string.Format("Could not find any artists matching '{0}'"' query));                              msg.Message.Done = true;                          }                      }                      else if (isPlaylist)                      {                          var playList = await _player.SearchForPlaylist(query);                          if (playList != null)                          {                              await ListPlaylistTracks(playList' msg);                          }                          else                          {                              await msg.Send(string.Format("Could not find any playlists matching '{0}'"' query));                              msg.Message.Done = true;                          }                      }                      else                      {                          await msg.Send("Please specify album/artist/playlist. e.g. spotify show artist Journey");                      }                  }              });
Magic Number,MMBot.Spotify,SpotifyPlayerScripts,C:\repos\mmbot_mmbot\MMBot.Spotify\SpotifyPlayerScripts.cs,Register,The following statement contains a magic number: robot.Respond(@"spotify show queue"' async msg =>              {                  if (!await Login(msg)) return;                  if (!_player.Queue.Any())                  {                      await msg.Send("There are no tracks in the queue");                      return;                  }                    IEnumerable<string> queue = _player.Queue.Take(20).Select(item => item.GetDisplayName()).ToArray();                  if (_player.Queue.Count() > 20)                  {                      queue = queue.Concat(new[] { string.Format("+ {0} not listed"' _player.Queue.Count() - 20) });                  }                  await msg.Send(string.Join(Environment.NewLine' queue.ToArray()));              });
Magic Number,MMBot.Spotify,SpotifyPlayerScripts,C:\repos\mmbot_mmbot\MMBot.Spotify\SpotifyPlayerScripts.cs,Register,The following statement contains a magic number: robot.Respond(@"spotify show queue"' async msg =>              {                  if (!await Login(msg)) return;                  if (!_player.Queue.Any())                  {                      await msg.Send("There are no tracks in the queue");                      return;                  }                    IEnumerable<string> queue = _player.Queue.Take(20).Select(item => item.GetDisplayName()).ToArray();                  if (_player.Queue.Count() > 20)                  {                      queue = queue.Concat(new[] { string.Format("+ {0} not listed"' _player.Queue.Count() - 20) });                  }                  await msg.Send(string.Join(Environment.NewLine' queue.ToArray()));              });
Magic Number,MMBot.Spotify,SpotifyPlayerScripts,C:\repos\mmbot_mmbot\MMBot.Spotify\SpotifyPlayerScripts.cs,Register,The following statement contains a magic number: robot.Respond(@"spotify show queue"' async msg =>              {                  if (!await Login(msg)) return;                  if (!_player.Queue.Any())                  {                      await msg.Send("There are no tracks in the queue");                      return;                  }                    IEnumerable<string> queue = _player.Queue.Take(20).Select(item => item.GetDisplayName()).ToArray();                  if (_player.Queue.Count() > 20)                  {                      queue = queue.Concat(new[] { string.Format("+ {0} not listed"' _player.Queue.Count() - 20) });                  }                  await msg.Send(string.Join(Environment.NewLine' queue.ToArray()));              });
Magic Number,MMBot.Spotify,SpotifyPlayerScripts,C:\repos\mmbot_mmbot\MMBot.Spotify\SpotifyPlayerScripts.cs,Register,The following statement contains a magic number: robot.Respond(@"(turn|crank) it (up|down)( to (\d+))?"' async msg =>              {                  if (!await CheckForPlayingSession(msg)) return;                    string direction = msg.Match[2].Trim();                  string amount = msg.Match[4].Trim();                    if (!string.IsNullOrWhiteSpace(amount))                  {                      _player.SetVolume(int.Parse(amount));                  }                  if (direction.ToLowerInvariant() == "up")                  {                      _player.TurnUpVolume(10);                  }                  else                  {                      _player.TurnUpVolume(10);                  }              });
Magic Number,MMBot.Spotify,SpotifyPlayerScripts,C:\repos\mmbot_mmbot\MMBot.Spotify\SpotifyPlayerScripts.cs,Register,The following statement contains a magic number: robot.Respond(@"(turn|crank) it (up|down)( to (\d+))?"' async msg =>              {                  if (!await CheckForPlayingSession(msg)) return;                    string direction = msg.Match[2].Trim();                  string amount = msg.Match[4].Trim();                    if (!string.IsNullOrWhiteSpace(amount))                  {                      _player.SetVolume(int.Parse(amount));                  }                  if (direction.ToLowerInvariant() == "up")                  {                      _player.TurnUpVolume(10);                  }                  else                  {                      _player.TurnUpVolume(10);                  }              });
Magic Number,MMBot.Spotify,SpotifyPlayerScripts,C:\repos\mmbot_mmbot\MMBot.Spotify\SpotifyPlayerScripts.cs,Register,The following statement contains a magic number: robot.Respond(@"(turn|crank) it (up|down)( to (\d+))?"' async msg =>              {                  if (!await CheckForPlayingSession(msg)) return;                    string direction = msg.Match[2].Trim();                  string amount = msg.Match[4].Trim();                    if (!string.IsNullOrWhiteSpace(amount))                  {                      _player.SetVolume(int.Parse(amount));                  }                  if (direction.ToLowerInvariant() == "up")                  {                      _player.TurnUpVolume(10);                  }                  else                  {                      _player.TurnUpVolume(10);                  }              });
Magic Number,MMBot.Spotify,SpotifyPlayerScripts,C:\repos\mmbot_mmbot\MMBot.Spotify\SpotifyPlayerScripts.cs,Register,The following statement contains a magic number: robot.Respond(@"(turn|crank) it (up|down)( to (\d+))?"' async msg =>              {                  if (!await CheckForPlayingSession(msg)) return;                    string direction = msg.Match[2].Trim();                  string amount = msg.Match[4].Trim();                    if (!string.IsNullOrWhiteSpace(amount))                  {                      _player.SetVolume(int.Parse(amount));                  }                  if (direction.ToLowerInvariant() == "up")                  {                      _player.TurnUpVolume(10);                  }                  else                  {                      _player.TurnUpVolume(10);                  }              });
Magic Number,MMBot.Spotify,SpotifyPlayerScripts,C:\repos\mmbot_mmbot\MMBot.Spotify\SpotifyPlayerScripts.cs,ListArtistAlbums,The following statement contains a magic number: foreach (var album in albums.Take(30))              {                  sb.AppendFormat("  {0} ({1})\r\n"' album.Name' album.Year);              }
Magic Number,MMBot.Spotify,SpotifyPlayerScripts,C:\repos\mmbot_mmbot\MMBot.Spotify\SpotifyPlayerScripts.cs,ListArtistAlbums,The following statement contains a magic number: if (totalAlbums > 30)              {                  sb.AppendFormat(" (+{0} unlisted) \r\n"' totalAlbums - 10);              }
Magic Number,MMBot.Spotify,SpotifyPlayerScripts,C:\repos\mmbot_mmbot\MMBot.Spotify\SpotifyPlayerScripts.cs,ListArtistAlbums,The following statement contains a magic number: if (totalAlbums > 30)              {                  sb.AppendFormat(" (+{0} unlisted) \r\n"' totalAlbums - 10);              }
Missing Default,MMBot.Spotify,SpotifyPlayerScripts,C:\repos\mmbot_mmbot\MMBot.Spotify\SpotifyPlayerScripts.cs,UpdateLoungeTopic,The following switch statement is missing a default case: switch (_player.State)              {                  case SpotifyPlayer.PlayerState.Disconnected:                      break;                    case SpotifyPlayer.PlayerState.Stopped:                      stateDisplayText = "Stopped";                      break;                    case SpotifyPlayer.PlayerState.Paused:                      stateDisplayText = "Paused";                      break;                    case SpotifyPlayer.PlayerState.Playing:                      stateDisplayText = "Now Playing";                      break;              }
