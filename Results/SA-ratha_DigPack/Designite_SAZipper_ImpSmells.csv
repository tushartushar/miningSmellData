Implementation smell,Namespace,Class,File,Method,Description
Long Method,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackFolderLogic,The method has 117 lines of code.
Complex Method,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,Md5Check,Cyclomatic complexity of the method is 14
Complex Method,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,NumberOfItems,Cyclomatic complexity of the method is 8
Complex Method,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,Zip,Cyclomatic complexity of the method is 16
Complex Method,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,CompareMd5,Cyclomatic complexity of the method is 8
Complex Method,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackFolderLogic,Cyclomatic complexity of the method is 19
Complex Method,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackLogic,Cyclomatic complexity of the method is 15
Complex Method,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,Validate,Cyclomatic complexity of the method is 10
Long Parameter List,SAZipper,Inputdata,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\Inputdata.cs,Inputdata,The method has 6 parameters.
Long Parameter List,SAZipper,Inputdata,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\Inputdata.cs,Inputdata,The method has 5 parameters.
Long Parameter List,SAZipper,Inputdata,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\Inputdata.cs,Inputdata,The method has 5 parameters.
Long Parameter List,SAZipper,Inputdata,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\Inputdata.cs,Inputdata,The method has 15 parameters.
Long Parameter List,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,VerifyFiles,The method has 6 parameters.
Long Parameter List,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,VerifyFoldersIsOK,The method has 6 parameters.
Long Statement,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,CompareContents,The length of the statement  "		WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Ingen pakkede elementer fundet' sammenligning kan ikke foretages."' false); " is 125.
Long Statement,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,Md5Check,The length of the statement  "	IEnumerable<string> zipfiles = Directory.EnumerateFiles (_inputdata.OutputFolder' "*.zip"' SearchOption.TopDirectoryOnly); " is 122.
Long Statement,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,Md5Check,The length of the statement  "	WriteLog (_inputdata.LogFolder + @"\" + _logfil' string.Format ("Kontrol af MD5-koder afsluttet. {0} fejl fundet"' errorcount.ToString (CultureInfo.InvariantCulture))' true); " is 174.
Long Statement,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,NumberOfItems,The length of the statement  "				WriteLog (_inputdata.LogFolder + @"\" + _logfil' fi.FullName + ": Filer: " + numbers [0].ToString () + " Mapper: " + numbers [1].ToString ()' true); " is 148.
Long Statement,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,NumberOfItems,The length of the statement  "			IEnumerable<string> zipfiles = Directory.EnumerateFiles (_inputdata.OutputFolder' "*.zip"' SearchOption.TopDirectoryOnly); " is 122.
Long Statement,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,NumberOfItems,The length of the statement  "					WriteLog (_inputdata.LogFolder + @"\" + _logfil' fi.FullName + ": Filer: " + numbers [0].ToString () + " Mapper: " + numbers [1].ToString ()' true); " is 148.
Long Statement,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,NumberOfItems,The length of the statement  "		IEnumerable<string> zipfiles = Directory.EnumerateFiles (_inputdata.OutputFolder' "*.zip"' SearchOption.TopDirectoryOnly); " is 122.
Long Statement,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,NumberOfItems,The length of the statement  "			WriteLog (_inputdata.LogFolder + @"\" + _logfil' fi.FullName + ": Filer: " + numbers [0].ToString () + " Mapper: " + numbers [1].ToString ()' true); " is 148.
Long Statement,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,TestInput,The length of the statement  "		WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Fejl i inputparametre' test af inputdata kan ikke foretages."' false); " is 120.
Long Statement,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,UnZip,The length of the statement  "	IEnumerable<string> zipnames = Directory.EnumerateFiles (_inputdata.InputFolders [0]' "*.zip"' SearchOption.TopDirectoryOnly); " is 126.
Long Statement,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,AddDirectoryInfos,The length of the statement  "		IEnumerable<FileSystemInfo> tempfiles = new DirectoryInfo (inputfolder).EnumerateFileSystemInfos ("*.*"' SearchOption.AllDirectories); " is 134.
Long Statement,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,List,The length of the statement  "	IEnumerable<string> zipfiles = Directory.EnumerateFiles (_inputdata.OutputFolder' "*.zip"' SearchOption.TopDirectoryOnly); " is 122.
Long Statement,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackFolder,The length of the statement  "		foreach (DirectoryInfo folder in new DirectoryInfo (WorkFolder).EnumerateDirectories ("*.*"' SearchOption.TopDirectoryOnly)) { " is 126.
Long Statement,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackFolderLogic,The length of the statement  "						WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true); " is 261.
Long Statement,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackFolderLogic,The length of the statement  "				if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) { " is 145.
Long Statement,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackFolderLogic,The length of the statement  "						WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true); " is 261.
Long Statement,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackFolderLogic,The length of the statement  "			WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true); " is 261.
Long Statement,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackLogic,The length of the statement  "						WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true); " is 261.
Long Statement,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackLogic,The length of the statement  "					if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) { " is 145.
Long Statement,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackLogic,The length of the statement  "						WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true); " is 261.
Long Statement,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackLogic,The length of the statement  "	WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true); " is 261.
Long Statement,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,Validate,The length of the statement  "	if (function == SAZipperFunction.UnzipSingleFile || function == SAZipperFunction.Unzip || function == SAZipperFunction.Zip) " is 123.
Long Statement,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,Validate,The length of the statement  "	if (function == SAZipperFunction.Zip || function == SAZipperFunction.Unzip || function == SAZipperFunction.UnzipSingleFile || function == SAZipperFunction.CompareContents || function == SAZipperFunction.Md5Check) " is 212.
Complex Conditional,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,Validate,The conditional expression  "function == SAZipperFunction.Zip || function == SAZipperFunction.Unzip || function == SAZipperFunction.UnzipSingleFile || function == SAZipperFunction.CompareContents || function == SAZipperFunction.Md5Check"  is complex.
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,UnzipSingleFile,The following statement contains a magic number: try {  	_finish = false;  	(item).CopyTo (fiEvents' null' dest' true);  	while (!_finish) {  		Thread.Sleep (1000);  	}  }  catch (Exception e) {  	WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Udpakning af en fil afsluttet med fejl: " + e.Message' true);  	return new StateObject (false' "Udpakning af filen afsluttet med fejl");  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,UnzipSingleFile,The following statement contains a magic number: while (!_finish) {  	Thread.Sleep (1000);  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,UnzipSingleFile,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,DeleteWorkFolder,The following statement contains a magic number: while (workexist) {  	Thread.Sleep (1000);  	if (!Directory.Exists (WorkFolder))  		workexist = false;  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,DeleteWorkFolder,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,DonePercent,The following statement contains a magic number: return (step / total) * 100;  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,OnItemProgression,The following statement contains a magic number: if (e.AllItems.Percent == 100)  	_finish = true;  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackFolderLogic,The following statement contains a magic number: if (_inputdata.ListSize > 0)  	listlength = 1000 * _inputdata.ListSize;  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackFolderLogic,The following statement contains a magic number: listlength = 1000 * _inputdata.ListSize;  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackFolderLogic,The following statement contains a magic number: if (_inputdata.ItemsCount > 0)  	itemscount = 1000 * _inputdata.ItemsCount;  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackFolderLogic,The following statement contains a magic number: itemscount = 1000 * _inputdata.ItemsCount;  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackFolderLogic,The following statement contains a magic number: foreach (FileSystemInfo element in elements) {  	if (element is DirectoryInfo) {  		var fInfo = (DirectoryInfo)element;  		if (FolderIsEmpty (fInfo)) {  			if (totitemscount + 1 > itemscount || totlistlength + fInfo.FullName.Length > listlength) {  				count++;  				res = PackFolder (BuildZipName (_inputdata.PName' count)' workFolder);  				if (res.State)  					WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  				else {  					return new StateObject (false' "Pakning afbrudt med fejl: " + res.StateText);  				}  				totlistlength = 0;  				totitemscount = 0;  				Directory.CreateDirectory (workFolder);  			}  			string drive = Path.GetPathRoot (fInfo.FullName);  			string name = fInfo.FullName.Substring (drive.Length - 1);  			try {  				Directory.CreateDirectory (workFolder + @"\" + name);  			}  			catch (Exception e) {  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  				return new StateObject (false' "Pakning afbrudt med fejl");  			}  			totitemscount++;  			totlistlength = totlistlength + fInfo.FullName.Length;  		}  	}  	else {  		var fileInfo = (FileInfo)element;  		double size = fileInfo.Length;  		if (size > 1024 * 1024 * _inputdata.PSize) {  			bigfiles.Add (fileInfo);  		}  		else {  			if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) {  				count++;  				res = PackFolder (BuildZipName (_inputdata.PName' count)' workFolder);  				if (res.State) {  					WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  				}  				else {  					return new StateObject (false' "Pakning afbrudt med fejl: " + res.StateText);  				}  				totsize = 0;  				totlistlength = 0;  				totitemscount = 0;  				Directory.CreateDirectory (workFolder);  			}  			string newdir = fileInfo.DirectoryName;  			newdir = newdir.Substring (Path.GetPathRoot (fileInfo.FullName).Length);  			if (!Directory.Exists (workFolder + @"\" + newdir))  				try {  					Directory.CreateDirectory (workFolder + @"\" + newdir);  				}  				catch (Exception e) {  					WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  					return new StateObject (false' "Pakning afbrudt med fejl");  				}  			try {  				File.Copy (fileInfo.FullName' workFolder + @"\" + newdir + @"\" + fileInfo.Name);  			}  			catch (Exception e) {  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  				return new StateObject (false' "Pakning afbrudt med fejl");  			}  			totsize = totsize + size;  			totitemscount++;  			totlistlength = totlistlength + fileInfo.FullName.Length;  		}  	}  	_done = _done + 1;  	LastPct (totalnumberofelements' element.FullName);  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackFolderLogic,The following statement contains a magic number: foreach (FileSystemInfo element in elements) {  	if (element is DirectoryInfo) {  		var fInfo = (DirectoryInfo)element;  		if (FolderIsEmpty (fInfo)) {  			if (totitemscount + 1 > itemscount || totlistlength + fInfo.FullName.Length > listlength) {  				count++;  				res = PackFolder (BuildZipName (_inputdata.PName' count)' workFolder);  				if (res.State)  					WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  				else {  					return new StateObject (false' "Pakning afbrudt med fejl: " + res.StateText);  				}  				totlistlength = 0;  				totitemscount = 0;  				Directory.CreateDirectory (workFolder);  			}  			string drive = Path.GetPathRoot (fInfo.FullName);  			string name = fInfo.FullName.Substring (drive.Length - 1);  			try {  				Directory.CreateDirectory (workFolder + @"\" + name);  			}  			catch (Exception e) {  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  				return new StateObject (false' "Pakning afbrudt med fejl");  			}  			totitemscount++;  			totlistlength = totlistlength + fInfo.FullName.Length;  		}  	}  	else {  		var fileInfo = (FileInfo)element;  		double size = fileInfo.Length;  		if (size > 1024 * 1024 * _inputdata.PSize) {  			bigfiles.Add (fileInfo);  		}  		else {  			if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) {  				count++;  				res = PackFolder (BuildZipName (_inputdata.PName' count)' workFolder);  				if (res.State) {  					WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  				}  				else {  					return new StateObject (false' "Pakning afbrudt med fejl: " + res.StateText);  				}  				totsize = 0;  				totlistlength = 0;  				totitemscount = 0;  				Directory.CreateDirectory (workFolder);  			}  			string newdir = fileInfo.DirectoryName;  			newdir = newdir.Substring (Path.GetPathRoot (fileInfo.FullName).Length);  			if (!Directory.Exists (workFolder + @"\" + newdir))  				try {  					Directory.CreateDirectory (workFolder + @"\" + newdir);  				}  				catch (Exception e) {  					WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  					return new StateObject (false' "Pakning afbrudt med fejl");  				}  			try {  				File.Copy (fileInfo.FullName' workFolder + @"\" + newdir + @"\" + fileInfo.Name);  			}  			catch (Exception e) {  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  				return new StateObject (false' "Pakning afbrudt med fejl");  			}  			totsize = totsize + size;  			totitemscount++;  			totlistlength = totlistlength + fileInfo.FullName.Length;  		}  	}  	_done = _done + 1;  	LastPct (totalnumberofelements' element.FullName);  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackFolderLogic,The following statement contains a magic number: foreach (FileSystemInfo element in elements) {  	if (element is DirectoryInfo) {  		var fInfo = (DirectoryInfo)element;  		if (FolderIsEmpty (fInfo)) {  			if (totitemscount + 1 > itemscount || totlistlength + fInfo.FullName.Length > listlength) {  				count++;  				res = PackFolder (BuildZipName (_inputdata.PName' count)' workFolder);  				if (res.State)  					WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  				else {  					return new StateObject (false' "Pakning afbrudt med fejl: " + res.StateText);  				}  				totlistlength = 0;  				totitemscount = 0;  				Directory.CreateDirectory (workFolder);  			}  			string drive = Path.GetPathRoot (fInfo.FullName);  			string name = fInfo.FullName.Substring (drive.Length - 1);  			try {  				Directory.CreateDirectory (workFolder + @"\" + name);  			}  			catch (Exception e) {  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  				return new StateObject (false' "Pakning afbrudt med fejl");  			}  			totitemscount++;  			totlistlength = totlistlength + fInfo.FullName.Length;  		}  	}  	else {  		var fileInfo = (FileInfo)element;  		double size = fileInfo.Length;  		if (size > 1024 * 1024 * _inputdata.PSize) {  			bigfiles.Add (fileInfo);  		}  		else {  			if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) {  				count++;  				res = PackFolder (BuildZipName (_inputdata.PName' count)' workFolder);  				if (res.State) {  					WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  				}  				else {  					return new StateObject (false' "Pakning afbrudt med fejl: " + res.StateText);  				}  				totsize = 0;  				totlistlength = 0;  				totitemscount = 0;  				Directory.CreateDirectory (workFolder);  			}  			string newdir = fileInfo.DirectoryName;  			newdir = newdir.Substring (Path.GetPathRoot (fileInfo.FullName).Length);  			if (!Directory.Exists (workFolder + @"\" + newdir))  				try {  					Directory.CreateDirectory (workFolder + @"\" + newdir);  				}  				catch (Exception e) {  					WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  					return new StateObject (false' "Pakning afbrudt med fejl");  				}  			try {  				File.Copy (fileInfo.FullName' workFolder + @"\" + newdir + @"\" + fileInfo.Name);  			}  			catch (Exception e) {  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  				return new StateObject (false' "Pakning afbrudt med fejl");  			}  			totsize = totsize + size;  			totitemscount++;  			totlistlength = totlistlength + fileInfo.FullName.Length;  		}  	}  	_done = _done + 1;  	LastPct (totalnumberofelements' element.FullName);  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackFolderLogic,The following statement contains a magic number: foreach (FileSystemInfo element in elements) {  	if (element is DirectoryInfo) {  		var fInfo = (DirectoryInfo)element;  		if (FolderIsEmpty (fInfo)) {  			if (totitemscount + 1 > itemscount || totlistlength + fInfo.FullName.Length > listlength) {  				count++;  				res = PackFolder (BuildZipName (_inputdata.PName' count)' workFolder);  				if (res.State)  					WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  				else {  					return new StateObject (false' "Pakning afbrudt med fejl: " + res.StateText);  				}  				totlistlength = 0;  				totitemscount = 0;  				Directory.CreateDirectory (workFolder);  			}  			string drive = Path.GetPathRoot (fInfo.FullName);  			string name = fInfo.FullName.Substring (drive.Length - 1);  			try {  				Directory.CreateDirectory (workFolder + @"\" + name);  			}  			catch (Exception e) {  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  				return new StateObject (false' "Pakning afbrudt med fejl");  			}  			totitemscount++;  			totlistlength = totlistlength + fInfo.FullName.Length;  		}  	}  	else {  		var fileInfo = (FileInfo)element;  		double size = fileInfo.Length;  		if (size > 1024 * 1024 * _inputdata.PSize) {  			bigfiles.Add (fileInfo);  		}  		else {  			if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) {  				count++;  				res = PackFolder (BuildZipName (_inputdata.PName' count)' workFolder);  				if (res.State) {  					WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  				}  				else {  					return new StateObject (false' "Pakning afbrudt med fejl: " + res.StateText);  				}  				totsize = 0;  				totlistlength = 0;  				totitemscount = 0;  				Directory.CreateDirectory (workFolder);  			}  			string newdir = fileInfo.DirectoryName;  			newdir = newdir.Substring (Path.GetPathRoot (fileInfo.FullName).Length);  			if (!Directory.Exists (workFolder + @"\" + newdir))  				try {  					Directory.CreateDirectory (workFolder + @"\" + newdir);  				}  				catch (Exception e) {  					WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  					return new StateObject (false' "Pakning afbrudt med fejl");  				}  			try {  				File.Copy (fileInfo.FullName' workFolder + @"\" + newdir + @"\" + fileInfo.Name);  			}  			catch (Exception e) {  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  				return new StateObject (false' "Pakning afbrudt med fejl");  			}  			totsize = totsize + size;  			totitemscount++;  			totlistlength = totlistlength + fileInfo.FullName.Length;  		}  	}  	_done = _done + 1;  	LastPct (totalnumberofelements' element.FullName);  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackFolderLogic,The following statement contains a magic number: if (element is DirectoryInfo) {  	var fInfo = (DirectoryInfo)element;  	if (FolderIsEmpty (fInfo)) {  		if (totitemscount + 1 > itemscount || totlistlength + fInfo.FullName.Length > listlength) {  			count++;  			res = PackFolder (BuildZipName (_inputdata.PName' count)' workFolder);  			if (res.State)  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  			else {  				return new StateObject (false' "Pakning afbrudt med fejl: " + res.StateText);  			}  			totlistlength = 0;  			totitemscount = 0;  			Directory.CreateDirectory (workFolder);  		}  		string drive = Path.GetPathRoot (fInfo.FullName);  		string name = fInfo.FullName.Substring (drive.Length - 1);  		try {  			Directory.CreateDirectory (workFolder + @"\" + name);  		}  		catch (Exception e) {  			WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  			return new StateObject (false' "Pakning afbrudt med fejl");  		}  		totitemscount++;  		totlistlength = totlistlength + fInfo.FullName.Length;  	}  }  else {  	var fileInfo = (FileInfo)element;  	double size = fileInfo.Length;  	if (size > 1024 * 1024 * _inputdata.PSize) {  		bigfiles.Add (fileInfo);  	}  	else {  		if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) {  			count++;  			res = PackFolder (BuildZipName (_inputdata.PName' count)' workFolder);  			if (res.State) {  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  			}  			else {  				return new StateObject (false' "Pakning afbrudt med fejl: " + res.StateText);  			}  			totsize = 0;  			totlistlength = 0;  			totitemscount = 0;  			Directory.CreateDirectory (workFolder);  		}  		string newdir = fileInfo.DirectoryName;  		newdir = newdir.Substring (Path.GetPathRoot (fileInfo.FullName).Length);  		if (!Directory.Exists (workFolder + @"\" + newdir))  			try {  				Directory.CreateDirectory (workFolder + @"\" + newdir);  			}  			catch (Exception e) {  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  				return new StateObject (false' "Pakning afbrudt med fejl");  			}  		try {  			File.Copy (fileInfo.FullName' workFolder + @"\" + newdir + @"\" + fileInfo.Name);  		}  		catch (Exception e) {  			WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  			return new StateObject (false' "Pakning afbrudt med fejl");  		}  		totsize = totsize + size;  		totitemscount++;  		totlistlength = totlistlength + fileInfo.FullName.Length;  	}  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackFolderLogic,The following statement contains a magic number: if (element is DirectoryInfo) {  	var fInfo = (DirectoryInfo)element;  	if (FolderIsEmpty (fInfo)) {  		if (totitemscount + 1 > itemscount || totlistlength + fInfo.FullName.Length > listlength) {  			count++;  			res = PackFolder (BuildZipName (_inputdata.PName' count)' workFolder);  			if (res.State)  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  			else {  				return new StateObject (false' "Pakning afbrudt med fejl: " + res.StateText);  			}  			totlistlength = 0;  			totitemscount = 0;  			Directory.CreateDirectory (workFolder);  		}  		string drive = Path.GetPathRoot (fInfo.FullName);  		string name = fInfo.FullName.Substring (drive.Length - 1);  		try {  			Directory.CreateDirectory (workFolder + @"\" + name);  		}  		catch (Exception e) {  			WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  			return new StateObject (false' "Pakning afbrudt med fejl");  		}  		totitemscount++;  		totlistlength = totlistlength + fInfo.FullName.Length;  	}  }  else {  	var fileInfo = (FileInfo)element;  	double size = fileInfo.Length;  	if (size > 1024 * 1024 * _inputdata.PSize) {  		bigfiles.Add (fileInfo);  	}  	else {  		if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) {  			count++;  			res = PackFolder (BuildZipName (_inputdata.PName' count)' workFolder);  			if (res.State) {  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  			}  			else {  				return new StateObject (false' "Pakning afbrudt med fejl: " + res.StateText);  			}  			totsize = 0;  			totlistlength = 0;  			totitemscount = 0;  			Directory.CreateDirectory (workFolder);  		}  		string newdir = fileInfo.DirectoryName;  		newdir = newdir.Substring (Path.GetPathRoot (fileInfo.FullName).Length);  		if (!Directory.Exists (workFolder + @"\" + newdir))  			try {  				Directory.CreateDirectory (workFolder + @"\" + newdir);  			}  			catch (Exception e) {  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  				return new StateObject (false' "Pakning afbrudt med fejl");  			}  		try {  			File.Copy (fileInfo.FullName' workFolder + @"\" + newdir + @"\" + fileInfo.Name);  		}  		catch (Exception e) {  			WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  			return new StateObject (false' "Pakning afbrudt med fejl");  		}  		totsize = totsize + size;  		totitemscount++;  		totlistlength = totlistlength + fileInfo.FullName.Length;  	}  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackFolderLogic,The following statement contains a magic number: if (element is DirectoryInfo) {  	var fInfo = (DirectoryInfo)element;  	if (FolderIsEmpty (fInfo)) {  		if (totitemscount + 1 > itemscount || totlistlength + fInfo.FullName.Length > listlength) {  			count++;  			res = PackFolder (BuildZipName (_inputdata.PName' count)' workFolder);  			if (res.State)  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  			else {  				return new StateObject (false' "Pakning afbrudt med fejl: " + res.StateText);  			}  			totlistlength = 0;  			totitemscount = 0;  			Directory.CreateDirectory (workFolder);  		}  		string drive = Path.GetPathRoot (fInfo.FullName);  		string name = fInfo.FullName.Substring (drive.Length - 1);  		try {  			Directory.CreateDirectory (workFolder + @"\" + name);  		}  		catch (Exception e) {  			WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  			return new StateObject (false' "Pakning afbrudt med fejl");  		}  		totitemscount++;  		totlistlength = totlistlength + fInfo.FullName.Length;  	}  }  else {  	var fileInfo = (FileInfo)element;  	double size = fileInfo.Length;  	if (size > 1024 * 1024 * _inputdata.PSize) {  		bigfiles.Add (fileInfo);  	}  	else {  		if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) {  			count++;  			res = PackFolder (BuildZipName (_inputdata.PName' count)' workFolder);  			if (res.State) {  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  			}  			else {  				return new StateObject (false' "Pakning afbrudt med fejl: " + res.StateText);  			}  			totsize = 0;  			totlistlength = 0;  			totitemscount = 0;  			Directory.CreateDirectory (workFolder);  		}  		string newdir = fileInfo.DirectoryName;  		newdir = newdir.Substring (Path.GetPathRoot (fileInfo.FullName).Length);  		if (!Directory.Exists (workFolder + @"\" + newdir))  			try {  				Directory.CreateDirectory (workFolder + @"\" + newdir);  			}  			catch (Exception e) {  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  				return new StateObject (false' "Pakning afbrudt med fejl");  			}  		try {  			File.Copy (fileInfo.FullName' workFolder + @"\" + newdir + @"\" + fileInfo.Name);  		}  		catch (Exception e) {  			WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  			return new StateObject (false' "Pakning afbrudt med fejl");  		}  		totsize = totsize + size;  		totitemscount++;  		totlistlength = totlistlength + fileInfo.FullName.Length;  	}  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackFolderLogic,The following statement contains a magic number: if (element is DirectoryInfo) {  	var fInfo = (DirectoryInfo)element;  	if (FolderIsEmpty (fInfo)) {  		if (totitemscount + 1 > itemscount || totlistlength + fInfo.FullName.Length > listlength) {  			count++;  			res = PackFolder (BuildZipName (_inputdata.PName' count)' workFolder);  			if (res.State)  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  			else {  				return new StateObject (false' "Pakning afbrudt med fejl: " + res.StateText);  			}  			totlistlength = 0;  			totitemscount = 0;  			Directory.CreateDirectory (workFolder);  		}  		string drive = Path.GetPathRoot (fInfo.FullName);  		string name = fInfo.FullName.Substring (drive.Length - 1);  		try {  			Directory.CreateDirectory (workFolder + @"\" + name);  		}  		catch (Exception e) {  			WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  			return new StateObject (false' "Pakning afbrudt med fejl");  		}  		totitemscount++;  		totlistlength = totlistlength + fInfo.FullName.Length;  	}  }  else {  	var fileInfo = (FileInfo)element;  	double size = fileInfo.Length;  	if (size > 1024 * 1024 * _inputdata.PSize) {  		bigfiles.Add (fileInfo);  	}  	else {  		if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) {  			count++;  			res = PackFolder (BuildZipName (_inputdata.PName' count)' workFolder);  			if (res.State) {  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  			}  			else {  				return new StateObject (false' "Pakning afbrudt med fejl: " + res.StateText);  			}  			totsize = 0;  			totlistlength = 0;  			totitemscount = 0;  			Directory.CreateDirectory (workFolder);  		}  		string newdir = fileInfo.DirectoryName;  		newdir = newdir.Substring (Path.GetPathRoot (fileInfo.FullName).Length);  		if (!Directory.Exists (workFolder + @"\" + newdir))  			try {  				Directory.CreateDirectory (workFolder + @"\" + newdir);  			}  			catch (Exception e) {  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  				return new StateObject (false' "Pakning afbrudt med fejl");  			}  		try {  			File.Copy (fileInfo.FullName' workFolder + @"\" + newdir + @"\" + fileInfo.Name);  		}  		catch (Exception e) {  			WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  			return new StateObject (false' "Pakning afbrudt med fejl");  		}  		totsize = totsize + size;  		totitemscount++;  		totlistlength = totlistlength + fileInfo.FullName.Length;  	}  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackFolderLogic,The following statement contains a magic number: if (size > 1024 * 1024 * _inputdata.PSize) {  	bigfiles.Add (fileInfo);  }  else {  	if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) {  		count++;  		res = PackFolder (BuildZipName (_inputdata.PName' count)' workFolder);  		if (res.State) {  			WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  		}  		else {  			return new StateObject (false' "Pakning afbrudt med fejl: " + res.StateText);  		}  		totsize = 0;  		totlistlength = 0;  		totitemscount = 0;  		Directory.CreateDirectory (workFolder);  	}  	string newdir = fileInfo.DirectoryName;  	newdir = newdir.Substring (Path.GetPathRoot (fileInfo.FullName).Length);  	if (!Directory.Exists (workFolder + @"\" + newdir))  		try {  			Directory.CreateDirectory (workFolder + @"\" + newdir);  		}  		catch (Exception e) {  			WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  			return new StateObject (false' "Pakning afbrudt med fejl");  		}  	try {  		File.Copy (fileInfo.FullName' workFolder + @"\" + newdir + @"\" + fileInfo.Name);  	}  	catch (Exception e) {  		WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  		return new StateObject (false' "Pakning afbrudt med fejl");  	}  	totsize = totsize + size;  	totitemscount++;  	totlistlength = totlistlength + fileInfo.FullName.Length;  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackFolderLogic,The following statement contains a magic number: if (size > 1024 * 1024 * _inputdata.PSize) {  	bigfiles.Add (fileInfo);  }  else {  	if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) {  		count++;  		res = PackFolder (BuildZipName (_inputdata.PName' count)' workFolder);  		if (res.State) {  			WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  		}  		else {  			return new StateObject (false' "Pakning afbrudt med fejl: " + res.StateText);  		}  		totsize = 0;  		totlistlength = 0;  		totitemscount = 0;  		Directory.CreateDirectory (workFolder);  	}  	string newdir = fileInfo.DirectoryName;  	newdir = newdir.Substring (Path.GetPathRoot (fileInfo.FullName).Length);  	if (!Directory.Exists (workFolder + @"\" + newdir))  		try {  			Directory.CreateDirectory (workFolder + @"\" + newdir);  		}  		catch (Exception e) {  			WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  			return new StateObject (false' "Pakning afbrudt med fejl");  		}  	try {  		File.Copy (fileInfo.FullName' workFolder + @"\" + newdir + @"\" + fileInfo.Name);  	}  	catch (Exception e) {  		WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  		return new StateObject (false' "Pakning afbrudt med fejl");  	}  	totsize = totsize + size;  	totitemscount++;  	totlistlength = totlistlength + fileInfo.FullName.Length;  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackFolderLogic,The following statement contains a magic number: if (size > 1024 * 1024 * _inputdata.PSize) {  	bigfiles.Add (fileInfo);  }  else {  	if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) {  		count++;  		res = PackFolder (BuildZipName (_inputdata.PName' count)' workFolder);  		if (res.State) {  			WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  		}  		else {  			return new StateObject (false' "Pakning afbrudt med fejl: " + res.StateText);  		}  		totsize = 0;  		totlistlength = 0;  		totitemscount = 0;  		Directory.CreateDirectory (workFolder);  	}  	string newdir = fileInfo.DirectoryName;  	newdir = newdir.Substring (Path.GetPathRoot (fileInfo.FullName).Length);  	if (!Directory.Exists (workFolder + @"\" + newdir))  		try {  			Directory.CreateDirectory (workFolder + @"\" + newdir);  		}  		catch (Exception e) {  			WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  			return new StateObject (false' "Pakning afbrudt med fejl");  		}  	try {  		File.Copy (fileInfo.FullName' workFolder + @"\" + newdir + @"\" + fileInfo.Name);  	}  	catch (Exception e) {  		WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  		return new StateObject (false' "Pakning afbrudt med fejl");  	}  	totsize = totsize + size;  	totitemscount++;  	totlistlength = totlistlength + fileInfo.FullName.Length;  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackFolderLogic,The following statement contains a magic number: if (size > 1024 * 1024 * _inputdata.PSize) {  	bigfiles.Add (fileInfo);  }  else {  	if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) {  		count++;  		res = PackFolder (BuildZipName (_inputdata.PName' count)' workFolder);  		if (res.State) {  			WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  		}  		else {  			return new StateObject (false' "Pakning afbrudt med fejl: " + res.StateText);  		}  		totsize = 0;  		totlistlength = 0;  		totitemscount = 0;  		Directory.CreateDirectory (workFolder);  	}  	string newdir = fileInfo.DirectoryName;  	newdir = newdir.Substring (Path.GetPathRoot (fileInfo.FullName).Length);  	if (!Directory.Exists (workFolder + @"\" + newdir))  		try {  			Directory.CreateDirectory (workFolder + @"\" + newdir);  		}  		catch (Exception e) {  			WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  			return new StateObject (false' "Pakning afbrudt med fejl");  		}  	try {  		File.Copy (fileInfo.FullName' workFolder + @"\" + newdir + @"\" + fileInfo.Name);  	}  	catch (Exception e) {  		WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  		return new StateObject (false' "Pakning afbrudt med fejl");  	}  	totsize = totsize + size;  	totitemscount++;  	totlistlength = totlistlength + fileInfo.FullName.Length;  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackFolderLogic,The following statement contains a magic number: if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) {  	count++;  	res = PackFolder (BuildZipName (_inputdata.PName' count)' workFolder);  	if (res.State) {  		WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  	}  	else {  		return new StateObject (false' "Pakning afbrudt med fejl: " + res.StateText);  	}  	totsize = 0;  	totlistlength = 0;  	totitemscount = 0;  	Directory.CreateDirectory (workFolder);  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackFolderLogic,The following statement contains a magic number: if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) {  	count++;  	res = PackFolder (BuildZipName (_inputdata.PName' count)' workFolder);  	if (res.State) {  		WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  	}  	else {  		return new StateObject (false' "Pakning afbrudt med fejl: " + res.StateText);  	}  	totsize = 0;  	totlistlength = 0;  	totitemscount = 0;  	Directory.CreateDirectory (workFolder);  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackLogic,The following statement contains a magic number: if (_inputdata.ListSize > 0)  	listlength = 1000 * _inputdata.ListSize;  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackLogic,The following statement contains a magic number: listlength = 1000 * _inputdata.ListSize;  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackLogic,The following statement contains a magic number: if (_inputdata.ItemsCount > 0)  	itemscount = 1000 * _inputdata.ItemsCount;  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackLogic,The following statement contains a magic number: itemscount = 1000 * _inputdata.ItemsCount;  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackLogic,The following statement contains a magic number: using (var batch = new AutoBatchUpdate (archive)) {  	foreach (FileSystemInfo element in elements) {  		string relativFoldernavn = Path.GetDirectoryName (element.FullName);  		if (relativFoldernavn != null)  			relativFoldernavn = relativFoldernavn.Substring (Path.GetPathRoot (element.FullName).Length);  		if (element is DirectoryInfo) {  			var fInfo = (DirectoryInfo)element;  			if (FolderIsEmpty (fInfo)) {  				if (totitemscount + 1 > itemscount || totlistlength + fInfo.FullName.Length > listlength) {  					WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  					count++;  					archive = SetArchive (BuildZipName (_inputdata.PName' count));  					totlistlength = 0;  					totitemscount = 0;  				}  				AbstractFolder dest = archive.GetFolder (relativFoldernavn);  				var source = new DiskFolder (fInfo.FullName);  				_finish = false;  				try {  					_finish = false;  					source.CopyTo (fiEvents' null' dest' true);  				}  				catch (Exception e) {  					WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  					return new StateObject (false' "Pakning afsluttet med fejl");  				}  				totitemscount++;  				totlistlength = totlistlength + fInfo.FullName.Length;  			}  		}  		else {  			var fileInfo = (FileInfo)element;  			double size = fileInfo.Length;  			if (size > 1024 * 1024 * _inputdata.PSize) {  				bigfiles.Add (fileInfo);  			}  			else {  				if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) {  					WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  					count++;  					archive = SetArchive (BuildZipName (_inputdata.PName' count));  					totsize = 0;  					totlistlength = 0;  					totitemscount = 0;  				}  				AbstractFolder dest = archive.GetFolder (relativFoldernavn);  				var source = new DiskFile (fileInfo.FullName);  				//  				_finish = false;  				try {  					_finish = false;  					source.CopyTo (fiEvents' null' dest' true);  				}  				catch (Exception e) {  					WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  					return new StateObject (false' "Pakning afsluttet med fejl");  				}  				totsize = totsize + size;  				totitemscount++;  				totlistlength = totlistlength + fileInfo.FullName.Length;  			}  		}  		_done = _done + 1;  		LastPct (totalnumberofelements' element.FullName);  	}  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackLogic,The following statement contains a magic number: using (var batch = new AutoBatchUpdate (archive)) {  	foreach (FileSystemInfo element in elements) {  		string relativFoldernavn = Path.GetDirectoryName (element.FullName);  		if (relativFoldernavn != null)  			relativFoldernavn = relativFoldernavn.Substring (Path.GetPathRoot (element.FullName).Length);  		if (element is DirectoryInfo) {  			var fInfo = (DirectoryInfo)element;  			if (FolderIsEmpty (fInfo)) {  				if (totitemscount + 1 > itemscount || totlistlength + fInfo.FullName.Length > listlength) {  					WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  					count++;  					archive = SetArchive (BuildZipName (_inputdata.PName' count));  					totlistlength = 0;  					totitemscount = 0;  				}  				AbstractFolder dest = archive.GetFolder (relativFoldernavn);  				var source = new DiskFolder (fInfo.FullName);  				_finish = false;  				try {  					_finish = false;  					source.CopyTo (fiEvents' null' dest' true);  				}  				catch (Exception e) {  					WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  					return new StateObject (false' "Pakning afsluttet med fejl");  				}  				totitemscount++;  				totlistlength = totlistlength + fInfo.FullName.Length;  			}  		}  		else {  			var fileInfo = (FileInfo)element;  			double size = fileInfo.Length;  			if (size > 1024 * 1024 * _inputdata.PSize) {  				bigfiles.Add (fileInfo);  			}  			else {  				if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) {  					WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  					count++;  					archive = SetArchive (BuildZipName (_inputdata.PName' count));  					totsize = 0;  					totlistlength = 0;  					totitemscount = 0;  				}  				AbstractFolder dest = archive.GetFolder (relativFoldernavn);  				var source = new DiskFile (fileInfo.FullName);  				//  				_finish = false;  				try {  					_finish = false;  					source.CopyTo (fiEvents' null' dest' true);  				}  				catch (Exception e) {  					WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  					return new StateObject (false' "Pakning afsluttet med fejl");  				}  				totsize = totsize + size;  				totitemscount++;  				totlistlength = totlistlength + fileInfo.FullName.Length;  			}  		}  		_done = _done + 1;  		LastPct (totalnumberofelements' element.FullName);  	}  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackLogic,The following statement contains a magic number: using (var batch = new AutoBatchUpdate (archive)) {  	foreach (FileSystemInfo element in elements) {  		string relativFoldernavn = Path.GetDirectoryName (element.FullName);  		if (relativFoldernavn != null)  			relativFoldernavn = relativFoldernavn.Substring (Path.GetPathRoot (element.FullName).Length);  		if (element is DirectoryInfo) {  			var fInfo = (DirectoryInfo)element;  			if (FolderIsEmpty (fInfo)) {  				if (totitemscount + 1 > itemscount || totlistlength + fInfo.FullName.Length > listlength) {  					WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  					count++;  					archive = SetArchive (BuildZipName (_inputdata.PName' count));  					totlistlength = 0;  					totitemscount = 0;  				}  				AbstractFolder dest = archive.GetFolder (relativFoldernavn);  				var source = new DiskFolder (fInfo.FullName);  				_finish = false;  				try {  					_finish = false;  					source.CopyTo (fiEvents' null' dest' true);  				}  				catch (Exception e) {  					WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  					return new StateObject (false' "Pakning afsluttet med fejl");  				}  				totitemscount++;  				totlistlength = totlistlength + fInfo.FullName.Length;  			}  		}  		else {  			var fileInfo = (FileInfo)element;  			double size = fileInfo.Length;  			if (size > 1024 * 1024 * _inputdata.PSize) {  				bigfiles.Add (fileInfo);  			}  			else {  				if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) {  					WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  					count++;  					archive = SetArchive (BuildZipName (_inputdata.PName' count));  					totsize = 0;  					totlistlength = 0;  					totitemscount = 0;  				}  				AbstractFolder dest = archive.GetFolder (relativFoldernavn);  				var source = new DiskFile (fileInfo.FullName);  				//  				_finish = false;  				try {  					_finish = false;  					source.CopyTo (fiEvents' null' dest' true);  				}  				catch (Exception e) {  					WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  					return new StateObject (false' "Pakning afsluttet med fejl");  				}  				totsize = totsize + size;  				totitemscount++;  				totlistlength = totlistlength + fileInfo.FullName.Length;  			}  		}  		_done = _done + 1;  		LastPct (totalnumberofelements' element.FullName);  	}  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackLogic,The following statement contains a magic number: using (var batch = new AutoBatchUpdate (archive)) {  	foreach (FileSystemInfo element in elements) {  		string relativFoldernavn = Path.GetDirectoryName (element.FullName);  		if (relativFoldernavn != null)  			relativFoldernavn = relativFoldernavn.Substring (Path.GetPathRoot (element.FullName).Length);  		if (element is DirectoryInfo) {  			var fInfo = (DirectoryInfo)element;  			if (FolderIsEmpty (fInfo)) {  				if (totitemscount + 1 > itemscount || totlistlength + fInfo.FullName.Length > listlength) {  					WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  					count++;  					archive = SetArchive (BuildZipName (_inputdata.PName' count));  					totlistlength = 0;  					totitemscount = 0;  				}  				AbstractFolder dest = archive.GetFolder (relativFoldernavn);  				var source = new DiskFolder (fInfo.FullName);  				_finish = false;  				try {  					_finish = false;  					source.CopyTo (fiEvents' null' dest' true);  				}  				catch (Exception e) {  					WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  					return new StateObject (false' "Pakning afsluttet med fejl");  				}  				totitemscount++;  				totlistlength = totlistlength + fInfo.FullName.Length;  			}  		}  		else {  			var fileInfo = (FileInfo)element;  			double size = fileInfo.Length;  			if (size > 1024 * 1024 * _inputdata.PSize) {  				bigfiles.Add (fileInfo);  			}  			else {  				if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) {  					WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  					count++;  					archive = SetArchive (BuildZipName (_inputdata.PName' count));  					totsize = 0;  					totlistlength = 0;  					totitemscount = 0;  				}  				AbstractFolder dest = archive.GetFolder (relativFoldernavn);  				var source = new DiskFile (fileInfo.FullName);  				//  				_finish = false;  				try {  					_finish = false;  					source.CopyTo (fiEvents' null' dest' true);  				}  				catch (Exception e) {  					WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  					return new StateObject (false' "Pakning afsluttet med fejl");  				}  				totsize = totsize + size;  				totitemscount++;  				totlistlength = totlistlength + fileInfo.FullName.Length;  			}  		}  		_done = _done + 1;  		LastPct (totalnumberofelements' element.FullName);  	}  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackLogic,The following statement contains a magic number: foreach (FileSystemInfo element in elements) {  	string relativFoldernavn = Path.GetDirectoryName (element.FullName);  	if (relativFoldernavn != null)  		relativFoldernavn = relativFoldernavn.Substring (Path.GetPathRoot (element.FullName).Length);  	if (element is DirectoryInfo) {  		var fInfo = (DirectoryInfo)element;  		if (FolderIsEmpty (fInfo)) {  			if (totitemscount + 1 > itemscount || totlistlength + fInfo.FullName.Length > listlength) {  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  				count++;  				archive = SetArchive (BuildZipName (_inputdata.PName' count));  				totlistlength = 0;  				totitemscount = 0;  			}  			AbstractFolder dest = archive.GetFolder (relativFoldernavn);  			var source = new DiskFolder (fInfo.FullName);  			_finish = false;  			try {  				_finish = false;  				source.CopyTo (fiEvents' null' dest' true);  			}  			catch (Exception e) {  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  				return new StateObject (false' "Pakning afsluttet med fejl");  			}  			totitemscount++;  			totlistlength = totlistlength + fInfo.FullName.Length;  		}  	}  	else {  		var fileInfo = (FileInfo)element;  		double size = fileInfo.Length;  		if (size > 1024 * 1024 * _inputdata.PSize) {  			bigfiles.Add (fileInfo);  		}  		else {  			if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) {  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  				count++;  				archive = SetArchive (BuildZipName (_inputdata.PName' count));  				totsize = 0;  				totlistlength = 0;  				totitemscount = 0;  			}  			AbstractFolder dest = archive.GetFolder (relativFoldernavn);  			var source = new DiskFile (fileInfo.FullName);  			//  			_finish = false;  			try {  				_finish = false;  				source.CopyTo (fiEvents' null' dest' true);  			}  			catch (Exception e) {  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  				return new StateObject (false' "Pakning afsluttet med fejl");  			}  			totsize = totsize + size;  			totitemscount++;  			totlistlength = totlistlength + fileInfo.FullName.Length;  		}  	}  	_done = _done + 1;  	LastPct (totalnumberofelements' element.FullName);  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackLogic,The following statement contains a magic number: foreach (FileSystemInfo element in elements) {  	string relativFoldernavn = Path.GetDirectoryName (element.FullName);  	if (relativFoldernavn != null)  		relativFoldernavn = relativFoldernavn.Substring (Path.GetPathRoot (element.FullName).Length);  	if (element is DirectoryInfo) {  		var fInfo = (DirectoryInfo)element;  		if (FolderIsEmpty (fInfo)) {  			if (totitemscount + 1 > itemscount || totlistlength + fInfo.FullName.Length > listlength) {  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  				count++;  				archive = SetArchive (BuildZipName (_inputdata.PName' count));  				totlistlength = 0;  				totitemscount = 0;  			}  			AbstractFolder dest = archive.GetFolder (relativFoldernavn);  			var source = new DiskFolder (fInfo.FullName);  			_finish = false;  			try {  				_finish = false;  				source.CopyTo (fiEvents' null' dest' true);  			}  			catch (Exception e) {  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  				return new StateObject (false' "Pakning afsluttet med fejl");  			}  			totitemscount++;  			totlistlength = totlistlength + fInfo.FullName.Length;  		}  	}  	else {  		var fileInfo = (FileInfo)element;  		double size = fileInfo.Length;  		if (size > 1024 * 1024 * _inputdata.PSize) {  			bigfiles.Add (fileInfo);  		}  		else {  			if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) {  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  				count++;  				archive = SetArchive (BuildZipName (_inputdata.PName' count));  				totsize = 0;  				totlistlength = 0;  				totitemscount = 0;  			}  			AbstractFolder dest = archive.GetFolder (relativFoldernavn);  			var source = new DiskFile (fileInfo.FullName);  			//  			_finish = false;  			try {  				_finish = false;  				source.CopyTo (fiEvents' null' dest' true);  			}  			catch (Exception e) {  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  				return new StateObject (false' "Pakning afsluttet med fejl");  			}  			totsize = totsize + size;  			totitemscount++;  			totlistlength = totlistlength + fileInfo.FullName.Length;  		}  	}  	_done = _done + 1;  	LastPct (totalnumberofelements' element.FullName);  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackLogic,The following statement contains a magic number: foreach (FileSystemInfo element in elements) {  	string relativFoldernavn = Path.GetDirectoryName (element.FullName);  	if (relativFoldernavn != null)  		relativFoldernavn = relativFoldernavn.Substring (Path.GetPathRoot (element.FullName).Length);  	if (element is DirectoryInfo) {  		var fInfo = (DirectoryInfo)element;  		if (FolderIsEmpty (fInfo)) {  			if (totitemscount + 1 > itemscount || totlistlength + fInfo.FullName.Length > listlength) {  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  				count++;  				archive = SetArchive (BuildZipName (_inputdata.PName' count));  				totlistlength = 0;  				totitemscount = 0;  			}  			AbstractFolder dest = archive.GetFolder (relativFoldernavn);  			var source = new DiskFolder (fInfo.FullName);  			_finish = false;  			try {  				_finish = false;  				source.CopyTo (fiEvents' null' dest' true);  			}  			catch (Exception e) {  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  				return new StateObject (false' "Pakning afsluttet med fejl");  			}  			totitemscount++;  			totlistlength = totlistlength + fInfo.FullName.Length;  		}  	}  	else {  		var fileInfo = (FileInfo)element;  		double size = fileInfo.Length;  		if (size > 1024 * 1024 * _inputdata.PSize) {  			bigfiles.Add (fileInfo);  		}  		else {  			if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) {  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  				count++;  				archive = SetArchive (BuildZipName (_inputdata.PName' count));  				totsize = 0;  				totlistlength = 0;  				totitemscount = 0;  			}  			AbstractFolder dest = archive.GetFolder (relativFoldernavn);  			var source = new DiskFile (fileInfo.FullName);  			//  			_finish = false;  			try {  				_finish = false;  				source.CopyTo (fiEvents' null' dest' true);  			}  			catch (Exception e) {  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  				return new StateObject (false' "Pakning afsluttet med fejl");  			}  			totsize = totsize + size;  			totitemscount++;  			totlistlength = totlistlength + fileInfo.FullName.Length;  		}  	}  	_done = _done + 1;  	LastPct (totalnumberofelements' element.FullName);  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackLogic,The following statement contains a magic number: foreach (FileSystemInfo element in elements) {  	string relativFoldernavn = Path.GetDirectoryName (element.FullName);  	if (relativFoldernavn != null)  		relativFoldernavn = relativFoldernavn.Substring (Path.GetPathRoot (element.FullName).Length);  	if (element is DirectoryInfo) {  		var fInfo = (DirectoryInfo)element;  		if (FolderIsEmpty (fInfo)) {  			if (totitemscount + 1 > itemscount || totlistlength + fInfo.FullName.Length > listlength) {  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  				count++;  				archive = SetArchive (BuildZipName (_inputdata.PName' count));  				totlistlength = 0;  				totitemscount = 0;  			}  			AbstractFolder dest = archive.GetFolder (relativFoldernavn);  			var source = new DiskFolder (fInfo.FullName);  			_finish = false;  			try {  				_finish = false;  				source.CopyTo (fiEvents' null' dest' true);  			}  			catch (Exception e) {  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  				return new StateObject (false' "Pakning afsluttet med fejl");  			}  			totitemscount++;  			totlistlength = totlistlength + fInfo.FullName.Length;  		}  	}  	else {  		var fileInfo = (FileInfo)element;  		double size = fileInfo.Length;  		if (size > 1024 * 1024 * _inputdata.PSize) {  			bigfiles.Add (fileInfo);  		}  		else {  			if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) {  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  				count++;  				archive = SetArchive (BuildZipName (_inputdata.PName' count));  				totsize = 0;  				totlistlength = 0;  				totitemscount = 0;  			}  			AbstractFolder dest = archive.GetFolder (relativFoldernavn);  			var source = new DiskFile (fileInfo.FullName);  			//  			_finish = false;  			try {  				_finish = false;  				source.CopyTo (fiEvents' null' dest' true);  			}  			catch (Exception e) {  				WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  				return new StateObject (false' "Pakning afsluttet med fejl");  			}  			totsize = totsize + size;  			totitemscount++;  			totlistlength = totlistlength + fileInfo.FullName.Length;  		}  	}  	_done = _done + 1;  	LastPct (totalnumberofelements' element.FullName);  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackLogic,The following statement contains a magic number: if (element is DirectoryInfo) {  	var fInfo = (DirectoryInfo)element;  	if (FolderIsEmpty (fInfo)) {  		if (totitemscount + 1 > itemscount || totlistlength + fInfo.FullName.Length > listlength) {  			WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  			count++;  			archive = SetArchive (BuildZipName (_inputdata.PName' count));  			totlistlength = 0;  			totitemscount = 0;  		}  		AbstractFolder dest = archive.GetFolder (relativFoldernavn);  		var source = new DiskFolder (fInfo.FullName);  		_finish = false;  		try {  			_finish = false;  			source.CopyTo (fiEvents' null' dest' true);  		}  		catch (Exception e) {  			WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  			return new StateObject (false' "Pakning afsluttet med fejl");  		}  		totitemscount++;  		totlistlength = totlistlength + fInfo.FullName.Length;  	}  }  else {  	var fileInfo = (FileInfo)element;  	double size = fileInfo.Length;  	if (size > 1024 * 1024 * _inputdata.PSize) {  		bigfiles.Add (fileInfo);  	}  	else {  		if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) {  			WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  			count++;  			archive = SetArchive (BuildZipName (_inputdata.PName' count));  			totsize = 0;  			totlistlength = 0;  			totitemscount = 0;  		}  		AbstractFolder dest = archive.GetFolder (relativFoldernavn);  		var source = new DiskFile (fileInfo.FullName);  		//  		_finish = false;  		try {  			_finish = false;  			source.CopyTo (fiEvents' null' dest' true);  		}  		catch (Exception e) {  			WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  			return new StateObject (false' "Pakning afsluttet med fejl");  		}  		totsize = totsize + size;  		totitemscount++;  		totlistlength = totlistlength + fileInfo.FullName.Length;  	}  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackLogic,The following statement contains a magic number: if (element is DirectoryInfo) {  	var fInfo = (DirectoryInfo)element;  	if (FolderIsEmpty (fInfo)) {  		if (totitemscount + 1 > itemscount || totlistlength + fInfo.FullName.Length > listlength) {  			WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  			count++;  			archive = SetArchive (BuildZipName (_inputdata.PName' count));  			totlistlength = 0;  			totitemscount = 0;  		}  		AbstractFolder dest = archive.GetFolder (relativFoldernavn);  		var source = new DiskFolder (fInfo.FullName);  		_finish = false;  		try {  			_finish = false;  			source.CopyTo (fiEvents' null' dest' true);  		}  		catch (Exception e) {  			WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  			return new StateObject (false' "Pakning afsluttet med fejl");  		}  		totitemscount++;  		totlistlength = totlistlength + fInfo.FullName.Length;  	}  }  else {  	var fileInfo = (FileInfo)element;  	double size = fileInfo.Length;  	if (size > 1024 * 1024 * _inputdata.PSize) {  		bigfiles.Add (fileInfo);  	}  	else {  		if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) {  			WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  			count++;  			archive = SetArchive (BuildZipName (_inputdata.PName' count));  			totsize = 0;  			totlistlength = 0;  			totitemscount = 0;  		}  		AbstractFolder dest = archive.GetFolder (relativFoldernavn);  		var source = new DiskFile (fileInfo.FullName);  		//  		_finish = false;  		try {  			_finish = false;  			source.CopyTo (fiEvents' null' dest' true);  		}  		catch (Exception e) {  			WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  			return new StateObject (false' "Pakning afsluttet med fejl");  		}  		totsize = totsize + size;  		totitemscount++;  		totlistlength = totlistlength + fileInfo.FullName.Length;  	}  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackLogic,The following statement contains a magic number: if (element is DirectoryInfo) {  	var fInfo = (DirectoryInfo)element;  	if (FolderIsEmpty (fInfo)) {  		if (totitemscount + 1 > itemscount || totlistlength + fInfo.FullName.Length > listlength) {  			WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  			count++;  			archive = SetArchive (BuildZipName (_inputdata.PName' count));  			totlistlength = 0;  			totitemscount = 0;  		}  		AbstractFolder dest = archive.GetFolder (relativFoldernavn);  		var source = new DiskFolder (fInfo.FullName);  		_finish = false;  		try {  			_finish = false;  			source.CopyTo (fiEvents' null' dest' true);  		}  		catch (Exception e) {  			WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  			return new StateObject (false' "Pakning afsluttet med fejl");  		}  		totitemscount++;  		totlistlength = totlistlength + fInfo.FullName.Length;  	}  }  else {  	var fileInfo = (FileInfo)element;  	double size = fileInfo.Length;  	if (size > 1024 * 1024 * _inputdata.PSize) {  		bigfiles.Add (fileInfo);  	}  	else {  		if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) {  			WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  			count++;  			archive = SetArchive (BuildZipName (_inputdata.PName' count));  			totsize = 0;  			totlistlength = 0;  			totitemscount = 0;  		}  		AbstractFolder dest = archive.GetFolder (relativFoldernavn);  		var source = new DiskFile (fileInfo.FullName);  		//  		_finish = false;  		try {  			_finish = false;  			source.CopyTo (fiEvents' null' dest' true);  		}  		catch (Exception e) {  			WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  			return new StateObject (false' "Pakning afsluttet med fejl");  		}  		totsize = totsize + size;  		totitemscount++;  		totlistlength = totlistlength + fileInfo.FullName.Length;  	}  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackLogic,The following statement contains a magic number: if (element is DirectoryInfo) {  	var fInfo = (DirectoryInfo)element;  	if (FolderIsEmpty (fInfo)) {  		if (totitemscount + 1 > itemscount || totlistlength + fInfo.FullName.Length > listlength) {  			WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  			count++;  			archive = SetArchive (BuildZipName (_inputdata.PName' count));  			totlistlength = 0;  			totitemscount = 0;  		}  		AbstractFolder dest = archive.GetFolder (relativFoldernavn);  		var source = new DiskFolder (fInfo.FullName);  		_finish = false;  		try {  			_finish = false;  			source.CopyTo (fiEvents' null' dest' true);  		}  		catch (Exception e) {  			WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  			return new StateObject (false' "Pakning afsluttet med fejl");  		}  		totitemscount++;  		totlistlength = totlistlength + fInfo.FullName.Length;  	}  }  else {  	var fileInfo = (FileInfo)element;  	double size = fileInfo.Length;  	if (size > 1024 * 1024 * _inputdata.PSize) {  		bigfiles.Add (fileInfo);  	}  	else {  		if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) {  			WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  			count++;  			archive = SetArchive (BuildZipName (_inputdata.PName' count));  			totsize = 0;  			totlistlength = 0;  			totitemscount = 0;  		}  		AbstractFolder dest = archive.GetFolder (relativFoldernavn);  		var source = new DiskFile (fileInfo.FullName);  		//  		_finish = false;  		try {  			_finish = false;  			source.CopyTo (fiEvents' null' dest' true);  		}  		catch (Exception e) {  			WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  			return new StateObject (false' "Pakning afsluttet med fejl");  		}  		totsize = totsize + size;  		totitemscount++;  		totlistlength = totlistlength + fileInfo.FullName.Length;  	}  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackLogic,The following statement contains a magic number: if (size > 1024 * 1024 * _inputdata.PSize) {  	bigfiles.Add (fileInfo);  }  else {  	if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) {  		WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  		count++;  		archive = SetArchive (BuildZipName (_inputdata.PName' count));  		totsize = 0;  		totlistlength = 0;  		totitemscount = 0;  	}  	AbstractFolder dest = archive.GetFolder (relativFoldernavn);  	var source = new DiskFile (fileInfo.FullName);  	//  	_finish = false;  	try {  		_finish = false;  		source.CopyTo (fiEvents' null' dest' true);  	}  	catch (Exception e) {  		WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  		return new StateObject (false' "Pakning afsluttet med fejl");  	}  	totsize = totsize + size;  	totitemscount++;  	totlistlength = totlistlength + fileInfo.FullName.Length;  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackLogic,The following statement contains a magic number: if (size > 1024 * 1024 * _inputdata.PSize) {  	bigfiles.Add (fileInfo);  }  else {  	if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) {  		WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  		count++;  		archive = SetArchive (BuildZipName (_inputdata.PName' count));  		totsize = 0;  		totlistlength = 0;  		totitemscount = 0;  	}  	AbstractFolder dest = archive.GetFolder (relativFoldernavn);  	var source = new DiskFile (fileInfo.FullName);  	//  	_finish = false;  	try {  		_finish = false;  		source.CopyTo (fiEvents' null' dest' true);  	}  	catch (Exception e) {  		WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  		return new StateObject (false' "Pakning afsluttet med fejl");  	}  	totsize = totsize + size;  	totitemscount++;  	totlistlength = totlistlength + fileInfo.FullName.Length;  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackLogic,The following statement contains a magic number: if (size > 1024 * 1024 * _inputdata.PSize) {  	bigfiles.Add (fileInfo);  }  else {  	if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) {  		WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  		count++;  		archive = SetArchive (BuildZipName (_inputdata.PName' count));  		totsize = 0;  		totlistlength = 0;  		totitemscount = 0;  	}  	AbstractFolder dest = archive.GetFolder (relativFoldernavn);  	var source = new DiskFile (fileInfo.FullName);  	//  	_finish = false;  	try {  		_finish = false;  		source.CopyTo (fiEvents' null' dest' true);  	}  	catch (Exception e) {  		WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  		return new StateObject (false' "Pakning afsluttet med fejl");  	}  	totsize = totsize + size;  	totitemscount++;  	totlistlength = totlistlength + fileInfo.FullName.Length;  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackLogic,The following statement contains a magic number: if (size > 1024 * 1024 * _inputdata.PSize) {  	bigfiles.Add (fileInfo);  }  else {  	if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) {  		WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  		count++;  		archive = SetArchive (BuildZipName (_inputdata.PName' count));  		totsize = 0;  		totlistlength = 0;  		totitemscount = 0;  	}  	AbstractFolder dest = archive.GetFolder (relativFoldernavn);  	var source = new DiskFile (fileInfo.FullName);  	//  	_finish = false;  	try {  		_finish = false;  		source.CopyTo (fiEvents' null' dest' true);  	}  	catch (Exception e) {  		WriteLog (_inputdata.LogFolder + @"\" + _logfil' "Pakning afbrudt med fejl: " + e.Message' true);  		return new StateObject (false' "Pakning afsluttet med fejl");  	}  	totsize = totsize + size;  	totitemscount++;  	totlistlength = totlistlength + fileInfo.FullName.Length;  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackLogic,The following statement contains a magic number: if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) {  	WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  	count++;  	archive = SetArchive (BuildZipName (_inputdata.PName' count));  	totsize = 0;  	totlistlength = 0;  	totitemscount = 0;  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,PackLogic,The following statement contains a magic number: if (totsize + size > 1024 * 1024 * _inputdata.PSize || totitemscount + 1 > itemscount || totlistlength + fileInfo.FullName.Length > listlength) {  	WriteLog (_inputdata.LogFolder + @"\" + _logfil' BuildZipName (_inputdata.PName' count) + " Antal filer og tomme mapper: " + totitemscount.ToString (CultureInfo.InvariantCulture) + " Listelængde: " + totlistlength.ToString (CultureInfo.InvariantCulture)' true);  	count++;  	archive = SetArchive (BuildZipName (_inputdata.PName' count));  	totsize = 0;  	totlistlength = 0;  	totitemscount = 0;  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,Progress,The following statement contains a magic number: if (e.Total > 0) {  	_progressInfo.Percent = (int)((_progressInfo.NumberDone * 100) / e.Total);  	if (OnProgress != null)  		OnProgress (_progressInfo);  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,Progress,The following statement contains a magic number: _progressInfo.Percent = (int)((_progressInfo.NumberDone * 100) / e.Total);  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,SetDefaultProperties,The following statement contains a magic number: if (split > 0) {  	archive.AllowSpanning = false;  	archive.SplitSize = 1024 * 1024 * _inputdata.PSize;  	archive.SplitNameFormat = ConvertSplitNameFormatToXCeed (_inputdata.SplitFormat);  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,SetDefaultProperties,The following statement contains a magic number: if (split > 0) {  	archive.AllowSpanning = false;  	archive.SplitSize = 1024 * 1024 * _inputdata.PSize;  	archive.SplitNameFormat = ConvertSplitNameFormatToXCeed (_inputdata.SplitFormat);  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,SetDefaultProperties,The following statement contains a magic number: archive.SplitSize = 1024 * 1024 * _inputdata.PSize;  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,SetDefaultProperties,The following statement contains a magic number: archive.SplitSize = 1024 * 1024 * _inputdata.PSize;  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,WaitTilFinish,The following statement contains a magic number: while (!finish) {  	Thread.Sleep (1000);  }  
Magic Number,SAZipper,XCeedPack,C:\repos\SA-ratha_DigPack\DIGPACK\SAZipper\XCeedPack.cs,WaitTilFinish,The following statement contains a magic number: Thread.Sleep (1000);  
