Implementation smell,Namespace,Class,File,Method,Description
Long Method,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The method has 147 lines of code.
Long Method,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The method has 143 lines of code.
Complex Method,Poderosa.MacroInternal,ConnectionParameterCollectionImpl,C:\repos\poderosaproject_poderosa\Macro\MacroEnv.cs,ConnectionParameterCollectionImpl,Cyclomatic complexity of the method is 8
Long Identifier,Poderosa.MacroInternal,MacroManager,C:\repos\poderosaproject_poderosa\Macro\MacroModule.cs,,The length of the parameter _additionalAssembliesPreferenceTemplate is 39.
Long Statement,Poderosa.MacroInternal,UtilImpl,C:\repos\poderosaproject_poderosa\Macro\MacroEnv.cs,ShellExecute,The length of the statement  "                throw new ArgumentException(String.Format(MacroPlugin.Instance.Strings.GetString("Message.MacroEnv.ShellExecuteError")' verb' filename)); " is 137.
Long Statement,Poderosa.MacroInternal,UtilImpl,C:\repos\poderosaproject_poderosa\Macro\MacroEnv.cs,Exec,The length of the statement  "                throw new ArgumentException(String.Format(MacroPlugin.Instance.Strings.GetString("Message.MacroEnv.ExecError")' command)); " is 122.
Long Statement,Poderosa.MacroInternal,MacroUtil,C:\repos\poderosaproject_poderosa\Macro\MacroExec.cs,LoadMacroAssembly,The length of the statement  "                Debug.WriteLineIf(DebugOpt.Macro' "Compiled:" + result.PathToAssembly + " FullName:" + result.CompiledAssembly.FullName); " is 121.
Long Statement,Poderosa.MacroInternal,MacroUtil,C:\repos\poderosaproject_poderosa\Macro\MacroExec.cs,InvokeOpenSessionOrNull,The length of the statement  "            IContentReplaceableView rv = (IContentReplaceableView)pm.GetCandidateViewForNewDocument().GetAdapter(typeof(IContentReplaceableView)); " is 134.
Long Statement,Poderosa.MacroInternal,MacroUtil,C:\repos\poderosaproject_poderosa\Macro\MacroExec.cs,InvokeOpenSessionOrNull,The length of the statement  "                RenderProfile rp = ts.UsingDefaultRenderProfile ? MacroPlugin.Instance.TerminalEmulatorService.TerminalEmulatorOptions.CreateRenderProfile() : ts.RenderProfile; " is 160.
Long Statement,Poderosa.MacroInternal,MacroUtil,C:\repos\poderosaproject_poderosa\Macro\MacroExec.cs,InvokeOpenSessionOrNull,The length of the statement  "            return (ITerminalSession)MacroPlugin.Instance.WindowManager.ActiveWindow.AsForm().Invoke(new OpenSessionDelegate(OpenSessionOrNull)' tp' ts); " is 141.
Long Statement,Poderosa.MacroInternal,MacroUtil,C:\repos\poderosaproject_poderosa\Macro\MacroExec.cs,OpenSessionOrNull,The length of the statement  "                ITerminalSession newsession = ss.TerminalSessionStartCommand.StartTerminalSession(MacroPlugin.Instance.WindowManager.ActiveWindow' tp' ts); " is 139.
Long Statement,Poderosa.MacroInternal,MacroExecutor,C:\repos\poderosaproject_poderosa\Macro\MacroExec.cs,MacroMain,The length of the statement  "                        MacroUtil.InvokeMessageBox(String.Format(MacroPlugin.Instance.Strings.GetString("Message.MacroExec.ExceptionWithoutTraceWindow")' inner.Message)); " is 146.
Long Statement,Poderosa.MacroInternal,MacroManager,C:\repos\poderosaproject_poderosa\Macro\MacroModule.cs,InitializePreference,The length of the statement  "            _additionalAssembliesPreferenceTemplate = builder.DefineStringValue(_moduleDefinitionTemplate' "additionalAssemblies"' ""' null); " is 129.
Long Statement,Poderosa.MacroInternal,MacroPlugin,C:\repos\poderosaproject_poderosa\Macro\MacroPlugin.cs,InitializePlugin,The length of the statement  "            ISessionManager sessionManager = poderosa.PluginManager.FindPlugin("org.poderosa.core.sessions"' typeof(ISessionManager)) as ISessionManager; " is 141.
Long Statement,Poderosa.ConnectionParam,TerminalParam,C:\repos\poderosaproject_poderosa\Macro\TerminalParam.cs,GetHashCode,The length of the statement  "            return _encoding.GetHashCode() + _localecho.GetHashCode() * 2 + _transmitnl.GetHashCode() * 3 + _lineFeedRule.GetHashCode() * 4 + _terminalType.GetHashCode() * 5; " is 162.
Empty Catch Block,Poderosa.MacroInternal,MacroUtil,C:\repos\poderosaproject_poderosa\Macro\MacroExec.cs,LoadMacroAssembly,The method has an empty catch block.
Magic Number,Poderosa.MacroInternal,UtilImpl,C:\repos\poderosaproject_poderosa\Macro\MacroEnv.cs,ShellExecute,The following statement contains a magic number: if (r <= 31)                  throw new ArgumentException(String.Format(MacroPlugin.Instance.Strings.GetString("Message.MacroEnv.ShellExecuteError")' verb' filename));
Magic Number,Poderosa.MacroInternal,UtilImpl,C:\repos\poderosaproject_poderosa\Macro\MacroEnv.cs,Exec,The following statement contains a magic number: if (r <= 31)                  throw new ArgumentException(String.Format(MacroPlugin.Instance.Strings.GetString("Message.MacroEnv.ExecError")' command));
Magic Number,Poderosa.MacroInternal,MacroUtil,C:\repos\poderosaproject_poderosa\Macro\MacroExec.cs,LoadMacroAssembly,The following statement contains a magic number: if (mod.Type == MacroType.Assembly) {                  return Assembly.LoadFrom(mod.Path);              }              else if (mod.Type == MacroType.JavaScript) {                  JScriptCodeProvider compiler = new JScriptCodeProvider();                  CompilerParameters param = new CompilerParameters();                  param.IncludeDebugInformation = true;                  param.GenerateInMemory = false; //これがプラグインをロードできるかどうかの決め手になった。周辺をすべて理解したわけではないが、とりあえずこれでよしとする。深入りしている時間はあまりないし                  param.GenerateExecutable = true;                    StringCollection sc = param.ReferencedAssemblies;                    bool[] assyAdded = new bool[9];                  foreach (Assembly assy in AppDomain.CurrentDomain.GetAssemblies()) {                      try {                          string assyFilePath = new Uri(assy.CodeBase).LocalPath;                          string assyFileName = Path.GetFileName(assyFilePath).ToLower(CultureInfo.InvariantCulture);                          switch (assyFileName) {                              case "system.drawing.dll":                                  assyAdded[0] = true;                                  break;                              case "system.windows.forms.dll":                                  assyAdded[1] = true;                                  break;                              case "poderosa.plugin.dll":                                  assyAdded[2] = true;                                  break;                              case "poderosa.core.dll":                                  assyAdded[3] = true;                                  break;                              case "granados.dll":                                  assyAdded[4] = true;                                  break;                              case "poderosa.protocols.dll":                                  assyAdded[5] = true;                                  break;                              case "poderosa.terminalemulator.dll":                                  assyAdded[6] = true;                                  break;                              case "poderosa.terminalsession.dll":                                  assyAdded[7] = true;                                  break;                              case "poderosa.macro.dll":                                  assyAdded[8] = true;                                  break;                              case "poderosa.monolithic.exe":                                  // FIXME: it is better to use the name of the entry assembly.                                  //        but how can we know the entry assembly is the monolithic type ?                                  assyAdded[2] =                                  assyAdded[3] =                                  assyAdded[4] =                                  assyAdded[5] =                                  assyAdded[6] =                                  assyAdded[7] =                                  assyAdded[8] = true;                                  break;                              default:                                  continue;                          }                          Debug.WriteLine("(LoadMacroAssembly) add to ReferencedAssemblies: " + assyFilePath);                          sc.Add(assyFilePath);                      }                      catch (Exception) {                      }                  }                    foreach (bool flag in assyAdded) {                      if (!flag) {                          throw new Exception(MacroPlugin.Instance.Strings.GetString("Message.MacroExec.MissingAssemblies"));                      }                  }                    foreach (string x in mod.AdditionalAssemblies)                      if (x.Length > 0)                          sc.Add(x);                    CompilerResults result = compiler.CompileAssemblyFromFile(param' mod.Path);                  if (result.Errors.Count > 0) {                      StringBuilder bld = new StringBuilder();                      bld.Append(MacroPlugin.Instance.Strings.GetString("Message.MacroExec.FailedToCompileScript"));                      foreach (CompilerError err in result.Errors) {                          bld.Append(String.Format("Line {0} Column {1} : {2}\n"' err.Line' err.Column' err.ErrorText));                      }                      throw new Exception(bld.ToString());                  }                    Debug.WriteLineIf(DebugOpt.Macro' "Compiled:" + result.PathToAssembly + " FullName:" + result.CompiledAssembly.FullName);                  //AppDomain.CurrentDomain.Load(result.CompiledAssembly.FullName' result.Evidence);                    return result.CompiledAssembly;              }              else                  throw new Exception("Unsupported macro module type " + mod.Type.ToString() + " is specified.");
Magic Number,Poderosa.MacroInternal,MacroUtil,C:\repos\poderosaproject_poderosa\Macro\MacroExec.cs,LoadMacroAssembly,The following statement contains a magic number: if (mod.Type == MacroType.Assembly) {                  return Assembly.LoadFrom(mod.Path);              }              else if (mod.Type == MacroType.JavaScript) {                  JScriptCodeProvider compiler = new JScriptCodeProvider();                  CompilerParameters param = new CompilerParameters();                  param.IncludeDebugInformation = true;                  param.GenerateInMemory = false; //これがプラグインをロードできるかどうかの決め手になった。周辺をすべて理解したわけではないが、とりあえずこれでよしとする。深入りしている時間はあまりないし                  param.GenerateExecutable = true;                    StringCollection sc = param.ReferencedAssemblies;                    bool[] assyAdded = new bool[9];                  foreach (Assembly assy in AppDomain.CurrentDomain.GetAssemblies()) {                      try {                          string assyFilePath = new Uri(assy.CodeBase).LocalPath;                          string assyFileName = Path.GetFileName(assyFilePath).ToLower(CultureInfo.InvariantCulture);                          switch (assyFileName) {                              case "system.drawing.dll":                                  assyAdded[0] = true;                                  break;                              case "system.windows.forms.dll":                                  assyAdded[1] = true;                                  break;                              case "poderosa.plugin.dll":                                  assyAdded[2] = true;                                  break;                              case "poderosa.core.dll":                                  assyAdded[3] = true;                                  break;                              case "granados.dll":                                  assyAdded[4] = true;                                  break;                              case "poderosa.protocols.dll":                                  assyAdded[5] = true;                                  break;                              case "poderosa.terminalemulator.dll":                                  assyAdded[6] = true;                                  break;                              case "poderosa.terminalsession.dll":                                  assyAdded[7] = true;                                  break;                              case "poderosa.macro.dll":                                  assyAdded[8] = true;                                  break;                              case "poderosa.monolithic.exe":                                  // FIXME: it is better to use the name of the entry assembly.                                  //        but how can we know the entry assembly is the monolithic type ?                                  assyAdded[2] =                                  assyAdded[3] =                                  assyAdded[4] =                                  assyAdded[5] =                                  assyAdded[6] =                                  assyAdded[7] =                                  assyAdded[8] = true;                                  break;                              default:                                  continue;                          }                          Debug.WriteLine("(LoadMacroAssembly) add to ReferencedAssemblies: " + assyFilePath);                          sc.Add(assyFilePath);                      }                      catch (Exception) {                      }                  }                    foreach (bool flag in assyAdded) {                      if (!flag) {                          throw new Exception(MacroPlugin.Instance.Strings.GetString("Message.MacroExec.MissingAssemblies"));                      }                  }                    foreach (string x in mod.AdditionalAssemblies)                      if (x.Length > 0)                          sc.Add(x);                    CompilerResults result = compiler.CompileAssemblyFromFile(param' mod.Path);                  if (result.Errors.Count > 0) {                      StringBuilder bld = new StringBuilder();                      bld.Append(MacroPlugin.Instance.Strings.GetString("Message.MacroExec.FailedToCompileScript"));                      foreach (CompilerError err in result.Errors) {                          bld.Append(String.Format("Line {0} Column {1} : {2}\n"' err.Line' err.Column' err.ErrorText));                      }                      throw new Exception(bld.ToString());                  }                    Debug.WriteLineIf(DebugOpt.Macro' "Compiled:" + result.PathToAssembly + " FullName:" + result.CompiledAssembly.FullName);                  //AppDomain.CurrentDomain.Load(result.CompiledAssembly.FullName' result.Evidence);                    return result.CompiledAssembly;              }              else                  throw new Exception("Unsupported macro module type " + mod.Type.ToString() + " is specified.");
Magic Number,Poderosa.MacroInternal,MacroUtil,C:\repos\poderosaproject_poderosa\Macro\MacroExec.cs,LoadMacroAssembly,The following statement contains a magic number: if (mod.Type == MacroType.Assembly) {                  return Assembly.LoadFrom(mod.Path);              }              else if (mod.Type == MacroType.JavaScript) {                  JScriptCodeProvider compiler = new JScriptCodeProvider();                  CompilerParameters param = new CompilerParameters();                  param.IncludeDebugInformation = true;                  param.GenerateInMemory = false; //これがプラグインをロードできるかどうかの決め手になった。周辺をすべて理解したわけではないが、とりあえずこれでよしとする。深入りしている時間はあまりないし                  param.GenerateExecutable = true;                    StringCollection sc = param.ReferencedAssemblies;                    bool[] assyAdded = new bool[9];                  foreach (Assembly assy in AppDomain.CurrentDomain.GetAssemblies()) {                      try {                          string assyFilePath = new Uri(assy.CodeBase).LocalPath;                          string assyFileName = Path.GetFileName(assyFilePath).ToLower(CultureInfo.InvariantCulture);                          switch (assyFileName) {                              case "system.drawing.dll":                                  assyAdded[0] = true;                                  break;                              case "system.windows.forms.dll":                                  assyAdded[1] = true;                                  break;                              case "poderosa.plugin.dll":                                  assyAdded[2] = true;                                  break;                              case "poderosa.core.dll":                                  assyAdded[3] = true;                                  break;                              case "granados.dll":                                  assyAdded[4] = true;                                  break;                              case "poderosa.protocols.dll":                                  assyAdded[5] = true;                                  break;                              case "poderosa.terminalemulator.dll":                                  assyAdded[6] = true;                                  break;                              case "poderosa.terminalsession.dll":                                  assyAdded[7] = true;                                  break;                              case "poderosa.macro.dll":                                  assyAdded[8] = true;                                  break;                              case "poderosa.monolithic.exe":                                  // FIXME: it is better to use the name of the entry assembly.                                  //        but how can we know the entry assembly is the monolithic type ?                                  assyAdded[2] =                                  assyAdded[3] =                                  assyAdded[4] =                                  assyAdded[5] =                                  assyAdded[6] =                                  assyAdded[7] =                                  assyAdded[8] = true;                                  break;                              default:                                  continue;                          }                          Debug.WriteLine("(LoadMacroAssembly) add to ReferencedAssemblies: " + assyFilePath);                          sc.Add(assyFilePath);                      }                      catch (Exception) {                      }                  }                    foreach (bool flag in assyAdded) {                      if (!flag) {                          throw new Exception(MacroPlugin.Instance.Strings.GetString("Message.MacroExec.MissingAssemblies"));                      }                  }                    foreach (string x in mod.AdditionalAssemblies)                      if (x.Length > 0)                          sc.Add(x);                    CompilerResults result = compiler.CompileAssemblyFromFile(param' mod.Path);                  if (result.Errors.Count > 0) {                      StringBuilder bld = new StringBuilder();                      bld.Append(MacroPlugin.Instance.Strings.GetString("Message.MacroExec.FailedToCompileScript"));                      foreach (CompilerError err in result.Errors) {                          bld.Append(String.Format("Line {0} Column {1} : {2}\n"' err.Line' err.Column' err.ErrorText));                      }                      throw new Exception(bld.ToString());                  }                    Debug.WriteLineIf(DebugOpt.Macro' "Compiled:" + result.PathToAssembly + " FullName:" + result.CompiledAssembly.FullName);                  //AppDomain.CurrentDomain.Load(result.CompiledAssembly.FullName' result.Evidence);                    return result.CompiledAssembly;              }              else                  throw new Exception("Unsupported macro module type " + mod.Type.ToString() + " is specified.");
Magic Number,Poderosa.MacroInternal,MacroUtil,C:\repos\poderosaproject_poderosa\Macro\MacroExec.cs,LoadMacroAssembly,The following statement contains a magic number: if (mod.Type == MacroType.Assembly) {                  return Assembly.LoadFrom(mod.Path);              }              else if (mod.Type == MacroType.JavaScript) {                  JScriptCodeProvider compiler = new JScriptCodeProvider();                  CompilerParameters param = new CompilerParameters();                  param.IncludeDebugInformation = true;                  param.GenerateInMemory = false; //これがプラグインをロードできるかどうかの決め手になった。周辺をすべて理解したわけではないが、とりあえずこれでよしとする。深入りしている時間はあまりないし                  param.GenerateExecutable = true;                    StringCollection sc = param.ReferencedAssemblies;                    bool[] assyAdded = new bool[9];                  foreach (Assembly assy in AppDomain.CurrentDomain.GetAssemblies()) {                      try {                          string assyFilePath = new Uri(assy.CodeBase).LocalPath;                          string assyFileName = Path.GetFileName(assyFilePath).ToLower(CultureInfo.InvariantCulture);                          switch (assyFileName) {                              case "system.drawing.dll":                                  assyAdded[0] = true;                                  break;                              case "system.windows.forms.dll":                                  assyAdded[1] = true;                                  break;                              case "poderosa.plugin.dll":                                  assyAdded[2] = true;                                  break;                              case "poderosa.core.dll":                                  assyAdded[3] = true;                                  break;                              case "granados.dll":                                  assyAdded[4] = true;                                  break;                              case "poderosa.protocols.dll":                                  assyAdded[5] = true;                                  break;                              case "poderosa.terminalemulator.dll":                                  assyAdded[6] = true;                                  break;                              case "poderosa.terminalsession.dll":                                  assyAdded[7] = true;                                  break;                              case "poderosa.macro.dll":                                  assyAdded[8] = true;                                  break;                              case "poderosa.monolithic.exe":                                  // FIXME: it is better to use the name of the entry assembly.                                  //        but how can we know the entry assembly is the monolithic type ?                                  assyAdded[2] =                                  assyAdded[3] =                                  assyAdded[4] =                                  assyAdded[5] =                                  assyAdded[6] =                                  assyAdded[7] =                                  assyAdded[8] = true;                                  break;                              default:                                  continue;                          }                          Debug.WriteLine("(LoadMacroAssembly) add to ReferencedAssemblies: " + assyFilePath);                          sc.Add(assyFilePath);                      }                      catch (Exception) {                      }                  }                    foreach (bool flag in assyAdded) {                      if (!flag) {                          throw new Exception(MacroPlugin.Instance.Strings.GetString("Message.MacroExec.MissingAssemblies"));                      }                  }                    foreach (string x in mod.AdditionalAssemblies)                      if (x.Length > 0)                          sc.Add(x);                    CompilerResults result = compiler.CompileAssemblyFromFile(param' mod.Path);                  if (result.Errors.Count > 0) {                      StringBuilder bld = new StringBuilder();                      bld.Append(MacroPlugin.Instance.Strings.GetString("Message.MacroExec.FailedToCompileScript"));                      foreach (CompilerError err in result.Errors) {                          bld.Append(String.Format("Line {0} Column {1} : {2}\n"' err.Line' err.Column' err.ErrorText));                      }                      throw new Exception(bld.ToString());                  }                    Debug.WriteLineIf(DebugOpt.Macro' "Compiled:" + result.PathToAssembly + " FullName:" + result.CompiledAssembly.FullName);                  //AppDomain.CurrentDomain.Load(result.CompiledAssembly.FullName' result.Evidence);                    return result.CompiledAssembly;              }              else                  throw new Exception("Unsupported macro module type " + mod.Type.ToString() + " is specified.");
Magic Number,Poderosa.MacroInternal,MacroUtil,C:\repos\poderosaproject_poderosa\Macro\MacroExec.cs,LoadMacroAssembly,The following statement contains a magic number: if (mod.Type == MacroType.Assembly) {                  return Assembly.LoadFrom(mod.Path);              }              else if (mod.Type == MacroType.JavaScript) {                  JScriptCodeProvider compiler = new JScriptCodeProvider();                  CompilerParameters param = new CompilerParameters();                  param.IncludeDebugInformation = true;                  param.GenerateInMemory = false; //これがプラグインをロードできるかどうかの決め手になった。周辺をすべて理解したわけではないが、とりあえずこれでよしとする。深入りしている時間はあまりないし                  param.GenerateExecutable = true;                    StringCollection sc = param.ReferencedAssemblies;                    bool[] assyAdded = new bool[9];                  foreach (Assembly assy in AppDomain.CurrentDomain.GetAssemblies()) {                      try {                          string assyFilePath = new Uri(assy.CodeBase).LocalPath;                          string assyFileName = Path.GetFileName(assyFilePath).ToLower(CultureInfo.InvariantCulture);                          switch (assyFileName) {                              case "system.drawing.dll":                                  assyAdded[0] = true;                                  break;                              case "system.windows.forms.dll":                                  assyAdded[1] = true;                                  break;                              case "poderosa.plugin.dll":                                  assyAdded[2] = true;                                  break;                              case "poderosa.core.dll":                                  assyAdded[3] = true;                                  break;                              case "granados.dll":                                  assyAdded[4] = true;                                  break;                              case "poderosa.protocols.dll":                                  assyAdded[5] = true;                                  break;                              case "poderosa.terminalemulator.dll":                                  assyAdded[6] = true;                                  break;                              case "poderosa.terminalsession.dll":                                  assyAdded[7] = true;                                  break;                              case "poderosa.macro.dll":                                  assyAdded[8] = true;                                  break;                              case "poderosa.monolithic.exe":                                  // FIXME: it is better to use the name of the entry assembly.                                  //        but how can we know the entry assembly is the monolithic type ?                                  assyAdded[2] =                                  assyAdded[3] =                                  assyAdded[4] =                                  assyAdded[5] =                                  assyAdded[6] =                                  assyAdded[7] =                                  assyAdded[8] = true;                                  break;                              default:                                  continue;                          }                          Debug.WriteLine("(LoadMacroAssembly) add to ReferencedAssemblies: " + assyFilePath);                          sc.Add(assyFilePath);                      }                      catch (Exception) {                      }                  }                    foreach (bool flag in assyAdded) {                      if (!flag) {                          throw new Exception(MacroPlugin.Instance.Strings.GetString("Message.MacroExec.MissingAssemblies"));                      }                  }                    foreach (string x in mod.AdditionalAssemblies)                      if (x.Length > 0)                          sc.Add(x);                    CompilerResults result = compiler.CompileAssemblyFromFile(param' mod.Path);                  if (result.Errors.Count > 0) {                      StringBuilder bld = new StringBuilder();                      bld.Append(MacroPlugin.Instance.Strings.GetString("Message.MacroExec.FailedToCompileScript"));                      foreach (CompilerError err in result.Errors) {                          bld.Append(String.Format("Line {0} Column {1} : {2}\n"' err.Line' err.Column' err.ErrorText));                      }                      throw new Exception(bld.ToString());                  }                    Debug.WriteLineIf(DebugOpt.Macro' "Compiled:" + result.PathToAssembly + " FullName:" + result.CompiledAssembly.FullName);                  //AppDomain.CurrentDomain.Load(result.CompiledAssembly.FullName' result.Evidence);                    return result.CompiledAssembly;              }              else                  throw new Exception("Unsupported macro module type " + mod.Type.ToString() + " is specified.");
Magic Number,Poderosa.MacroInternal,MacroUtil,C:\repos\poderosaproject_poderosa\Macro\MacroExec.cs,LoadMacroAssembly,The following statement contains a magic number: if (mod.Type == MacroType.Assembly) {                  return Assembly.LoadFrom(mod.Path);              }              else if (mod.Type == MacroType.JavaScript) {                  JScriptCodeProvider compiler = new JScriptCodeProvider();                  CompilerParameters param = new CompilerParameters();                  param.IncludeDebugInformation = true;                  param.GenerateInMemory = false; //これがプラグインをロードできるかどうかの決め手になった。周辺をすべて理解したわけではないが、とりあえずこれでよしとする。深入りしている時間はあまりないし                  param.GenerateExecutable = true;                    StringCollection sc = param.ReferencedAssemblies;                    bool[] assyAdded = new bool[9];                  foreach (Assembly assy in AppDomain.CurrentDomain.GetAssemblies()) {                      try {                          string assyFilePath = new Uri(assy.CodeBase).LocalPath;                          string assyFileName = Path.GetFileName(assyFilePath).ToLower(CultureInfo.InvariantCulture);                          switch (assyFileName) {                              case "system.drawing.dll":                                  assyAdded[0] = true;                                  break;                              case "system.windows.forms.dll":                                  assyAdded[1] = true;                                  break;                              case "poderosa.plugin.dll":                                  assyAdded[2] = true;                                  break;                              case "poderosa.core.dll":                                  assyAdded[3] = true;                                  break;                              case "granados.dll":                                  assyAdded[4] = true;                                  break;                              case "poderosa.protocols.dll":                                  assyAdded[5] = true;                                  break;                              case "poderosa.terminalemulator.dll":                                  assyAdded[6] = true;                                  break;                              case "poderosa.terminalsession.dll":                                  assyAdded[7] = true;                                  break;                              case "poderosa.macro.dll":                                  assyAdded[8] = true;                                  break;                              case "poderosa.monolithic.exe":                                  // FIXME: it is better to use the name of the entry assembly.                                  //        but how can we know the entry assembly is the monolithic type ?                                  assyAdded[2] =                                  assyAdded[3] =                                  assyAdded[4] =                                  assyAdded[5] =                                  assyAdded[6] =                                  assyAdded[7] =                                  assyAdded[8] = true;                                  break;                              default:                                  continue;                          }                          Debug.WriteLine("(LoadMacroAssembly) add to ReferencedAssemblies: " + assyFilePath);                          sc.Add(assyFilePath);                      }                      catch (Exception) {                      }                  }                    foreach (bool flag in assyAdded) {                      if (!flag) {                          throw new Exception(MacroPlugin.Instance.Strings.GetString("Message.MacroExec.MissingAssemblies"));                      }                  }                    foreach (string x in mod.AdditionalAssemblies)                      if (x.Length > 0)                          sc.Add(x);                    CompilerResults result = compiler.CompileAssemblyFromFile(param' mod.Path);                  if (result.Errors.Count > 0) {                      StringBuilder bld = new StringBuilder();                      bld.Append(MacroPlugin.Instance.Strings.GetString("Message.MacroExec.FailedToCompileScript"));                      foreach (CompilerError err in result.Errors) {                          bld.Append(String.Format("Line {0} Column {1} : {2}\n"' err.Line' err.Column' err.ErrorText));                      }                      throw new Exception(bld.ToString());                  }                    Debug.WriteLineIf(DebugOpt.Macro' "Compiled:" + result.PathToAssembly + " FullName:" + result.CompiledAssembly.FullName);                  //AppDomain.CurrentDomain.Load(result.CompiledAssembly.FullName' result.Evidence);                    return result.CompiledAssembly;              }              else                  throw new Exception("Unsupported macro module type " + mod.Type.ToString() + " is specified.");
Magic Number,Poderosa.MacroInternal,MacroUtil,C:\repos\poderosaproject_poderosa\Macro\MacroExec.cs,LoadMacroAssembly,The following statement contains a magic number: if (mod.Type == MacroType.Assembly) {                  return Assembly.LoadFrom(mod.Path);              }              else if (mod.Type == MacroType.JavaScript) {                  JScriptCodeProvider compiler = new JScriptCodeProvider();                  CompilerParameters param = new CompilerParameters();                  param.IncludeDebugInformation = true;                  param.GenerateInMemory = false; //これがプラグインをロードできるかどうかの決め手になった。周辺をすべて理解したわけではないが、とりあえずこれでよしとする。深入りしている時間はあまりないし                  param.GenerateExecutable = true;                    StringCollection sc = param.ReferencedAssemblies;                    bool[] assyAdded = new bool[9];                  foreach (Assembly assy in AppDomain.CurrentDomain.GetAssemblies()) {                      try {                          string assyFilePath = new Uri(assy.CodeBase).LocalPath;                          string assyFileName = Path.GetFileName(assyFilePath).ToLower(CultureInfo.InvariantCulture);                          switch (assyFileName) {                              case "system.drawing.dll":                                  assyAdded[0] = true;                                  break;                              case "system.windows.forms.dll":                                  assyAdded[1] = true;                                  break;                              case "poderosa.plugin.dll":                                  assyAdded[2] = true;                                  break;                              case "poderosa.core.dll":                                  assyAdded[3] = true;                                  break;                              case "granados.dll":                                  assyAdded[4] = true;                                  break;                              case "poderosa.protocols.dll":                                  assyAdded[5] = true;                                  break;                              case "poderosa.terminalemulator.dll":                                  assyAdded[6] = true;                                  break;                              case "poderosa.terminalsession.dll":                                  assyAdded[7] = true;                                  break;                              case "poderosa.macro.dll":                                  assyAdded[8] = true;                                  break;                              case "poderosa.monolithic.exe":                                  // FIXME: it is better to use the name of the entry assembly.                                  //        but how can we know the entry assembly is the monolithic type ?                                  assyAdded[2] =                                  assyAdded[3] =                                  assyAdded[4] =                                  assyAdded[5] =                                  assyAdded[6] =                                  assyAdded[7] =                                  assyAdded[8] = true;                                  break;                              default:                                  continue;                          }                          Debug.WriteLine("(LoadMacroAssembly) add to ReferencedAssemblies: " + assyFilePath);                          sc.Add(assyFilePath);                      }                      catch (Exception) {                      }                  }                    foreach (bool flag in assyAdded) {                      if (!flag) {                          throw new Exception(MacroPlugin.Instance.Strings.GetString("Message.MacroExec.MissingAssemblies"));                      }                  }                    foreach (string x in mod.AdditionalAssemblies)                      if (x.Length > 0)                          sc.Add(x);                    CompilerResults result = compiler.CompileAssemblyFromFile(param' mod.Path);                  if (result.Errors.Count > 0) {                      StringBuilder bld = new StringBuilder();                      bld.Append(MacroPlugin.Instance.Strings.GetString("Message.MacroExec.FailedToCompileScript"));                      foreach (CompilerError err in result.Errors) {                          bld.Append(String.Format("Line {0} Column {1} : {2}\n"' err.Line' err.Column' err.ErrorText));                      }                      throw new Exception(bld.ToString());                  }                    Debug.WriteLineIf(DebugOpt.Macro' "Compiled:" + result.PathToAssembly + " FullName:" + result.CompiledAssembly.FullName);                  //AppDomain.CurrentDomain.Load(result.CompiledAssembly.FullName' result.Evidence);                    return result.CompiledAssembly;              }              else                  throw new Exception("Unsupported macro module type " + mod.Type.ToString() + " is specified.");
Magic Number,Poderosa.MacroInternal,MacroUtil,C:\repos\poderosaproject_poderosa\Macro\MacroExec.cs,LoadMacroAssembly,The following statement contains a magic number: if (mod.Type == MacroType.Assembly) {                  return Assembly.LoadFrom(mod.Path);              }              else if (mod.Type == MacroType.JavaScript) {                  JScriptCodeProvider compiler = new JScriptCodeProvider();                  CompilerParameters param = new CompilerParameters();                  param.IncludeDebugInformation = true;                  param.GenerateInMemory = false; //これがプラグインをロードできるかどうかの決め手になった。周辺をすべて理解したわけではないが、とりあえずこれでよしとする。深入りしている時間はあまりないし                  param.GenerateExecutable = true;                    StringCollection sc = param.ReferencedAssemblies;                    bool[] assyAdded = new bool[9];                  foreach (Assembly assy in AppDomain.CurrentDomain.GetAssemblies()) {                      try {                          string assyFilePath = new Uri(assy.CodeBase).LocalPath;                          string assyFileName = Path.GetFileName(assyFilePath).ToLower(CultureInfo.InvariantCulture);                          switch (assyFileName) {                              case "system.drawing.dll":                                  assyAdded[0] = true;                                  break;                              case "system.windows.forms.dll":                                  assyAdded[1] = true;                                  break;                              case "poderosa.plugin.dll":                                  assyAdded[2] = true;                                  break;                              case "poderosa.core.dll":                                  assyAdded[3] = true;                                  break;                              case "granados.dll":                                  assyAdded[4] = true;                                  break;                              case "poderosa.protocols.dll":                                  assyAdded[5] = true;                                  break;                              case "poderosa.terminalemulator.dll":                                  assyAdded[6] = true;                                  break;                              case "poderosa.terminalsession.dll":                                  assyAdded[7] = true;                                  break;                              case "poderosa.macro.dll":                                  assyAdded[8] = true;                                  break;                              case "poderosa.monolithic.exe":                                  // FIXME: it is better to use the name of the entry assembly.                                  //        but how can we know the entry assembly is the monolithic type ?                                  assyAdded[2] =                                  assyAdded[3] =                                  assyAdded[4] =                                  assyAdded[5] =                                  assyAdded[6] =                                  assyAdded[7] =                                  assyAdded[8] = true;                                  break;                              default:                                  continue;                          }                          Debug.WriteLine("(LoadMacroAssembly) add to ReferencedAssemblies: " + assyFilePath);                          sc.Add(assyFilePath);                      }                      catch (Exception) {                      }                  }                    foreach (bool flag in assyAdded) {                      if (!flag) {                          throw new Exception(MacroPlugin.Instance.Strings.GetString("Message.MacroExec.MissingAssemblies"));                      }                  }                    foreach (string x in mod.AdditionalAssemblies)                      if (x.Length > 0)                          sc.Add(x);                    CompilerResults result = compiler.CompileAssemblyFromFile(param' mod.Path);                  if (result.Errors.Count > 0) {                      StringBuilder bld = new StringBuilder();                      bld.Append(MacroPlugin.Instance.Strings.GetString("Message.MacroExec.FailedToCompileScript"));                      foreach (CompilerError err in result.Errors) {                          bld.Append(String.Format("Line {0} Column {1} : {2}\n"' err.Line' err.Column' err.ErrorText));                      }                      throw new Exception(bld.ToString());                  }                    Debug.WriteLineIf(DebugOpt.Macro' "Compiled:" + result.PathToAssembly + " FullName:" + result.CompiledAssembly.FullName);                  //AppDomain.CurrentDomain.Load(result.CompiledAssembly.FullName' result.Evidence);                    return result.CompiledAssembly;              }              else                  throw new Exception("Unsupported macro module type " + mod.Type.ToString() + " is specified.");
Magic Number,Poderosa.MacroInternal,MacroUtil,C:\repos\poderosaproject_poderosa\Macro\MacroExec.cs,LoadMacroAssembly,The following statement contains a magic number: if (mod.Type == MacroType.Assembly) {                  return Assembly.LoadFrom(mod.Path);              }              else if (mod.Type == MacroType.JavaScript) {                  JScriptCodeProvider compiler = new JScriptCodeProvider();                  CompilerParameters param = new CompilerParameters();                  param.IncludeDebugInformation = true;                  param.GenerateInMemory = false; //これがプラグインをロードできるかどうかの決め手になった。周辺をすべて理解したわけではないが、とりあえずこれでよしとする。深入りしている時間はあまりないし                  param.GenerateExecutable = true;                    StringCollection sc = param.ReferencedAssemblies;                    bool[] assyAdded = new bool[9];                  foreach (Assembly assy in AppDomain.CurrentDomain.GetAssemblies()) {                      try {                          string assyFilePath = new Uri(assy.CodeBase).LocalPath;                          string assyFileName = Path.GetFileName(assyFilePath).ToLower(CultureInfo.InvariantCulture);                          switch (assyFileName) {                              case "system.drawing.dll":                                  assyAdded[0] = true;                                  break;                              case "system.windows.forms.dll":                                  assyAdded[1] = true;                                  break;                              case "poderosa.plugin.dll":                                  assyAdded[2] = true;                                  break;                              case "poderosa.core.dll":                                  assyAdded[3] = true;                                  break;                              case "granados.dll":                                  assyAdded[4] = true;                                  break;                              case "poderosa.protocols.dll":                                  assyAdded[5] = true;                                  break;                              case "poderosa.terminalemulator.dll":                                  assyAdded[6] = true;                                  break;                              case "poderosa.terminalsession.dll":                                  assyAdded[7] = true;                                  break;                              case "poderosa.macro.dll":                                  assyAdded[8] = true;                                  break;                              case "poderosa.monolithic.exe":                                  // FIXME: it is better to use the name of the entry assembly.                                  //        but how can we know the entry assembly is the monolithic type ?                                  assyAdded[2] =                                  assyAdded[3] =                                  assyAdded[4] =                                  assyAdded[5] =                                  assyAdded[6] =                                  assyAdded[7] =                                  assyAdded[8] = true;                                  break;                              default:                                  continue;                          }                          Debug.WriteLine("(LoadMacroAssembly) add to ReferencedAssemblies: " + assyFilePath);                          sc.Add(assyFilePath);                      }                      catch (Exception) {                      }                  }                    foreach (bool flag in assyAdded) {                      if (!flag) {                          throw new Exception(MacroPlugin.Instance.Strings.GetString("Message.MacroExec.MissingAssemblies"));                      }                  }                    foreach (string x in mod.AdditionalAssemblies)                      if (x.Length > 0)                          sc.Add(x);                    CompilerResults result = compiler.CompileAssemblyFromFile(param' mod.Path);                  if (result.Errors.Count > 0) {                      StringBuilder bld = new StringBuilder();                      bld.Append(MacroPlugin.Instance.Strings.GetString("Message.MacroExec.FailedToCompileScript"));                      foreach (CompilerError err in result.Errors) {                          bld.Append(String.Format("Line {0} Column {1} : {2}\n"' err.Line' err.Column' err.ErrorText));                      }                      throw new Exception(bld.ToString());                  }                    Debug.WriteLineIf(DebugOpt.Macro' "Compiled:" + result.PathToAssembly + " FullName:" + result.CompiledAssembly.FullName);                  //AppDomain.CurrentDomain.Load(result.CompiledAssembly.FullName' result.Evidence);                    return result.CompiledAssembly;              }              else                  throw new Exception("Unsupported macro module type " + mod.Type.ToString() + " is specified.");
Magic Number,Poderosa.MacroInternal,MacroUtil,C:\repos\poderosaproject_poderosa\Macro\MacroExec.cs,LoadMacroAssembly,The following statement contains a magic number: if (mod.Type == MacroType.Assembly) {                  return Assembly.LoadFrom(mod.Path);              }              else if (mod.Type == MacroType.JavaScript) {                  JScriptCodeProvider compiler = new JScriptCodeProvider();                  CompilerParameters param = new CompilerParameters();                  param.IncludeDebugInformation = true;                  param.GenerateInMemory = false; //これがプラグインをロードできるかどうかの決め手になった。周辺をすべて理解したわけではないが、とりあえずこれでよしとする。深入りしている時間はあまりないし                  param.GenerateExecutable = true;                    StringCollection sc = param.ReferencedAssemblies;                    bool[] assyAdded = new bool[9];                  foreach (Assembly assy in AppDomain.CurrentDomain.GetAssemblies()) {                      try {                          string assyFilePath = new Uri(assy.CodeBase).LocalPath;                          string assyFileName = Path.GetFileName(assyFilePath).ToLower(CultureInfo.InvariantCulture);                          switch (assyFileName) {                              case "system.drawing.dll":                                  assyAdded[0] = true;                                  break;                              case "system.windows.forms.dll":                                  assyAdded[1] = true;                                  break;                              case "poderosa.plugin.dll":                                  assyAdded[2] = true;                                  break;                              case "poderosa.core.dll":                                  assyAdded[3] = true;                                  break;                              case "granados.dll":                                  assyAdded[4] = true;                                  break;                              case "poderosa.protocols.dll":                                  assyAdded[5] = true;                                  break;                              case "poderosa.terminalemulator.dll":                                  assyAdded[6] = true;                                  break;                              case "poderosa.terminalsession.dll":                                  assyAdded[7] = true;                                  break;                              case "poderosa.macro.dll":                                  assyAdded[8] = true;                                  break;                              case "poderosa.monolithic.exe":                                  // FIXME: it is better to use the name of the entry assembly.                                  //        but how can we know the entry assembly is the monolithic type ?                                  assyAdded[2] =                                  assyAdded[3] =                                  assyAdded[4] =                                  assyAdded[5] =                                  assyAdded[6] =                                  assyAdded[7] =                                  assyAdded[8] = true;                                  break;                              default:                                  continue;                          }                          Debug.WriteLine("(LoadMacroAssembly) add to ReferencedAssemblies: " + assyFilePath);                          sc.Add(assyFilePath);                      }                      catch (Exception) {                      }                  }                    foreach (bool flag in assyAdded) {                      if (!flag) {                          throw new Exception(MacroPlugin.Instance.Strings.GetString("Message.MacroExec.MissingAssemblies"));                      }                  }                    foreach (string x in mod.AdditionalAssemblies)                      if (x.Length > 0)                          sc.Add(x);                    CompilerResults result = compiler.CompileAssemblyFromFile(param' mod.Path);                  if (result.Errors.Count > 0) {                      StringBuilder bld = new StringBuilder();                      bld.Append(MacroPlugin.Instance.Strings.GetString("Message.MacroExec.FailedToCompileScript"));                      foreach (CompilerError err in result.Errors) {                          bld.Append(String.Format("Line {0} Column {1} : {2}\n"' err.Line' err.Column' err.ErrorText));                      }                      throw new Exception(bld.ToString());                  }                    Debug.WriteLineIf(DebugOpt.Macro' "Compiled:" + result.PathToAssembly + " FullName:" + result.CompiledAssembly.FullName);                  //AppDomain.CurrentDomain.Load(result.CompiledAssembly.FullName' result.Evidence);                    return result.CompiledAssembly;              }              else                  throw new Exception("Unsupported macro module type " + mod.Type.ToString() + " is specified.");
Magic Number,Poderosa.MacroInternal,MacroUtil,C:\repos\poderosaproject_poderosa\Macro\MacroExec.cs,LoadMacroAssembly,The following statement contains a magic number: if (mod.Type == MacroType.Assembly) {                  return Assembly.LoadFrom(mod.Path);              }              else if (mod.Type == MacroType.JavaScript) {                  JScriptCodeProvider compiler = new JScriptCodeProvider();                  CompilerParameters param = new CompilerParameters();                  param.IncludeDebugInformation = true;                  param.GenerateInMemory = false; //これがプラグインをロードできるかどうかの決め手になった。周辺をすべて理解したわけではないが、とりあえずこれでよしとする。深入りしている時間はあまりないし                  param.GenerateExecutable = true;                    StringCollection sc = param.ReferencedAssemblies;                    bool[] assyAdded = new bool[9];                  foreach (Assembly assy in AppDomain.CurrentDomain.GetAssemblies()) {                      try {                          string assyFilePath = new Uri(assy.CodeBase).LocalPath;                          string assyFileName = Path.GetFileName(assyFilePath).ToLower(CultureInfo.InvariantCulture);                          switch (assyFileName) {                              case "system.drawing.dll":                                  assyAdded[0] = true;                                  break;                              case "system.windows.forms.dll":                                  assyAdded[1] = true;                                  break;                              case "poderosa.plugin.dll":                                  assyAdded[2] = true;                                  break;                              case "poderosa.core.dll":                                  assyAdded[3] = true;                                  break;                              case "granados.dll":                                  assyAdded[4] = true;                                  break;                              case "poderosa.protocols.dll":                                  assyAdded[5] = true;                                  break;                              case "poderosa.terminalemulator.dll":                                  assyAdded[6] = true;                                  break;                              case "poderosa.terminalsession.dll":                                  assyAdded[7] = true;                                  break;                              case "poderosa.macro.dll":                                  assyAdded[8] = true;                                  break;                              case "poderosa.monolithic.exe":                                  // FIXME: it is better to use the name of the entry assembly.                                  //        but how can we know the entry assembly is the monolithic type ?                                  assyAdded[2] =                                  assyAdded[3] =                                  assyAdded[4] =                                  assyAdded[5] =                                  assyAdded[6] =                                  assyAdded[7] =                                  assyAdded[8] = true;                                  break;                              default:                                  continue;                          }                          Debug.WriteLine("(LoadMacroAssembly) add to ReferencedAssemblies: " + assyFilePath);                          sc.Add(assyFilePath);                      }                      catch (Exception) {                      }                  }                    foreach (bool flag in assyAdded) {                      if (!flag) {                          throw new Exception(MacroPlugin.Instance.Strings.GetString("Message.MacroExec.MissingAssemblies"));                      }                  }                    foreach (string x in mod.AdditionalAssemblies)                      if (x.Length > 0)                          sc.Add(x);                    CompilerResults result = compiler.CompileAssemblyFromFile(param' mod.Path);                  if (result.Errors.Count > 0) {                      StringBuilder bld = new StringBuilder();                      bld.Append(MacroPlugin.Instance.Strings.GetString("Message.MacroExec.FailedToCompileScript"));                      foreach (CompilerError err in result.Errors) {                          bld.Append(String.Format("Line {0} Column {1} : {2}\n"' err.Line' err.Column' err.ErrorText));                      }                      throw new Exception(bld.ToString());                  }                    Debug.WriteLineIf(DebugOpt.Macro' "Compiled:" + result.PathToAssembly + " FullName:" + result.CompiledAssembly.FullName);                  //AppDomain.CurrentDomain.Load(result.CompiledAssembly.FullName' result.Evidence);                    return result.CompiledAssembly;              }              else                  throw new Exception("Unsupported macro module type " + mod.Type.ToString() + " is specified.");
Magic Number,Poderosa.MacroInternal,MacroUtil,C:\repos\poderosaproject_poderosa\Macro\MacroExec.cs,LoadMacroAssembly,The following statement contains a magic number: if (mod.Type == MacroType.Assembly) {                  return Assembly.LoadFrom(mod.Path);              }              else if (mod.Type == MacroType.JavaScript) {                  JScriptCodeProvider compiler = new JScriptCodeProvider();                  CompilerParameters param = new CompilerParameters();                  param.IncludeDebugInformation = true;                  param.GenerateInMemory = false; //これがプラグインをロードできるかどうかの決め手になった。周辺をすべて理解したわけではないが、とりあえずこれでよしとする。深入りしている時間はあまりないし                  param.GenerateExecutable = true;                    StringCollection sc = param.ReferencedAssemblies;                    bool[] assyAdded = new bool[9];                  foreach (Assembly assy in AppDomain.CurrentDomain.GetAssemblies()) {                      try {                          string assyFilePath = new Uri(assy.CodeBase).LocalPath;                          string assyFileName = Path.GetFileName(assyFilePath).ToLower(CultureInfo.InvariantCulture);                          switch (assyFileName) {                              case "system.drawing.dll":                                  assyAdded[0] = true;                                  break;                              case "system.windows.forms.dll":                                  assyAdded[1] = true;                                  break;                              case "poderosa.plugin.dll":                                  assyAdded[2] = true;                                  break;                              case "poderosa.core.dll":                                  assyAdded[3] = true;                                  break;                              case "granados.dll":                                  assyAdded[4] = true;                                  break;                              case "poderosa.protocols.dll":                                  assyAdded[5] = true;                                  break;                              case "poderosa.terminalemulator.dll":                                  assyAdded[6] = true;                                  break;                              case "poderosa.terminalsession.dll":                                  assyAdded[7] = true;                                  break;                              case "poderosa.macro.dll":                                  assyAdded[8] = true;                                  break;                              case "poderosa.monolithic.exe":                                  // FIXME: it is better to use the name of the entry assembly.                                  //        but how can we know the entry assembly is the monolithic type ?                                  assyAdded[2] =                                  assyAdded[3] =                                  assyAdded[4] =                                  assyAdded[5] =                                  assyAdded[6] =                                  assyAdded[7] =                                  assyAdded[8] = true;                                  break;                              default:                                  continue;                          }                          Debug.WriteLine("(LoadMacroAssembly) add to ReferencedAssemblies: " + assyFilePath);                          sc.Add(assyFilePath);                      }                      catch (Exception) {                      }                  }                    foreach (bool flag in assyAdded) {                      if (!flag) {                          throw new Exception(MacroPlugin.Instance.Strings.GetString("Message.MacroExec.MissingAssemblies"));                      }                  }                    foreach (string x in mod.AdditionalAssemblies)                      if (x.Length > 0)                          sc.Add(x);                    CompilerResults result = compiler.CompileAssemblyFromFile(param' mod.Path);                  if (result.Errors.Count > 0) {                      StringBuilder bld = new StringBuilder();                      bld.Append(MacroPlugin.Instance.Strings.GetString("Message.MacroExec.FailedToCompileScript"));                      foreach (CompilerError err in result.Errors) {                          bld.Append(String.Format("Line {0} Column {1} : {2}\n"' err.Line' err.Column' err.ErrorText));                      }                      throw new Exception(bld.ToString());                  }                    Debug.WriteLineIf(DebugOpt.Macro' "Compiled:" + result.PathToAssembly + " FullName:" + result.CompiledAssembly.FullName);                  //AppDomain.CurrentDomain.Load(result.CompiledAssembly.FullName' result.Evidence);                    return result.CompiledAssembly;              }              else                  throw new Exception("Unsupported macro module type " + mod.Type.ToString() + " is specified.");
Magic Number,Poderosa.MacroInternal,MacroUtil,C:\repos\poderosaproject_poderosa\Macro\MacroExec.cs,LoadMacroAssembly,The following statement contains a magic number: if (mod.Type == MacroType.Assembly) {                  return Assembly.LoadFrom(mod.Path);              }              else if (mod.Type == MacroType.JavaScript) {                  JScriptCodeProvider compiler = new JScriptCodeProvider();                  CompilerParameters param = new CompilerParameters();                  param.IncludeDebugInformation = true;                  param.GenerateInMemory = false; //これがプラグインをロードできるかどうかの決め手になった。周辺をすべて理解したわけではないが、とりあえずこれでよしとする。深入りしている時間はあまりないし                  param.GenerateExecutable = true;                    StringCollection sc = param.ReferencedAssemblies;                    bool[] assyAdded = new bool[9];                  foreach (Assembly assy in AppDomain.CurrentDomain.GetAssemblies()) {                      try {                          string assyFilePath = new Uri(assy.CodeBase).LocalPath;                          string assyFileName = Path.GetFileName(assyFilePath).ToLower(CultureInfo.InvariantCulture);                          switch (assyFileName) {                              case "system.drawing.dll":                                  assyAdded[0] = true;                                  break;                              case "system.windows.forms.dll":                                  assyAdded[1] = true;                                  break;                              case "poderosa.plugin.dll":                                  assyAdded[2] = true;                                  break;                              case "poderosa.core.dll":                                  assyAdded[3] = true;                                  break;                              case "granados.dll":                                  assyAdded[4] = true;                                  break;                              case "poderosa.protocols.dll":                                  assyAdded[5] = true;                                  break;                              case "poderosa.terminalemulator.dll":                                  assyAdded[6] = true;                                  break;                              case "poderosa.terminalsession.dll":                                  assyAdded[7] = true;                                  break;                              case "poderosa.macro.dll":                                  assyAdded[8] = true;                                  break;                              case "poderosa.monolithic.exe":                                  // FIXME: it is better to use the name of the entry assembly.                                  //        but how can we know the entry assembly is the monolithic type ?                                  assyAdded[2] =                                  assyAdded[3] =                                  assyAdded[4] =                                  assyAdded[5] =                                  assyAdded[6] =                                  assyAdded[7] =                                  assyAdded[8] = true;                                  break;                              default:                                  continue;                          }                          Debug.WriteLine("(LoadMacroAssembly) add to ReferencedAssemblies: " + assyFilePath);                          sc.Add(assyFilePath);                      }                      catch (Exception) {                      }                  }                    foreach (bool flag in assyAdded) {                      if (!flag) {                          throw new Exception(MacroPlugin.Instance.Strings.GetString("Message.MacroExec.MissingAssemblies"));                      }                  }                    foreach (string x in mod.AdditionalAssemblies)                      if (x.Length > 0)                          sc.Add(x);                    CompilerResults result = compiler.CompileAssemblyFromFile(param' mod.Path);                  if (result.Errors.Count > 0) {                      StringBuilder bld = new StringBuilder();                      bld.Append(MacroPlugin.Instance.Strings.GetString("Message.MacroExec.FailedToCompileScript"));                      foreach (CompilerError err in result.Errors) {                          bld.Append(String.Format("Line {0} Column {1} : {2}\n"' err.Line' err.Column' err.ErrorText));                      }                      throw new Exception(bld.ToString());                  }                    Debug.WriteLineIf(DebugOpt.Macro' "Compiled:" + result.PathToAssembly + " FullName:" + result.CompiledAssembly.FullName);                  //AppDomain.CurrentDomain.Load(result.CompiledAssembly.FullName' result.Evidence);                    return result.CompiledAssembly;              }              else                  throw new Exception("Unsupported macro module type " + mod.Type.ToString() + " is specified.");
Magic Number,Poderosa.MacroInternal,MacroUtil,C:\repos\poderosaproject_poderosa\Macro\MacroExec.cs,LoadMacroAssembly,The following statement contains a magic number: if (mod.Type == MacroType.Assembly) {                  return Assembly.LoadFrom(mod.Path);              }              else if (mod.Type == MacroType.JavaScript) {                  JScriptCodeProvider compiler = new JScriptCodeProvider();                  CompilerParameters param = new CompilerParameters();                  param.IncludeDebugInformation = true;                  param.GenerateInMemory = false; //これがプラグインをロードできるかどうかの決め手になった。周辺をすべて理解したわけではないが、とりあえずこれでよしとする。深入りしている時間はあまりないし                  param.GenerateExecutable = true;                    StringCollection sc = param.ReferencedAssemblies;                    bool[] assyAdded = new bool[9];                  foreach (Assembly assy in AppDomain.CurrentDomain.GetAssemblies()) {                      try {                          string assyFilePath = new Uri(assy.CodeBase).LocalPath;                          string assyFileName = Path.GetFileName(assyFilePath).ToLower(CultureInfo.InvariantCulture);                          switch (assyFileName) {                              case "system.drawing.dll":                                  assyAdded[0] = true;                                  break;                              case "system.windows.forms.dll":                                  assyAdded[1] = true;                                  break;                              case "poderosa.plugin.dll":                                  assyAdded[2] = true;                                  break;                              case "poderosa.core.dll":                                  assyAdded[3] = true;                                  break;                              case "granados.dll":                                  assyAdded[4] = true;                                  break;                              case "poderosa.protocols.dll":                                  assyAdded[5] = true;                                  break;                              case "poderosa.terminalemulator.dll":                                  assyAdded[6] = true;                                  break;                              case "poderosa.terminalsession.dll":                                  assyAdded[7] = true;                                  break;                              case "poderosa.macro.dll":                                  assyAdded[8] = true;                                  break;                              case "poderosa.monolithic.exe":                                  // FIXME: it is better to use the name of the entry assembly.                                  //        but how can we know the entry assembly is the monolithic type ?                                  assyAdded[2] =                                  assyAdded[3] =                                  assyAdded[4] =                                  assyAdded[5] =                                  assyAdded[6] =                                  assyAdded[7] =                                  assyAdded[8] = true;                                  break;                              default:                                  continue;                          }                          Debug.WriteLine("(LoadMacroAssembly) add to ReferencedAssemblies: " + assyFilePath);                          sc.Add(assyFilePath);                      }                      catch (Exception) {                      }                  }                    foreach (bool flag in assyAdded) {                      if (!flag) {                          throw new Exception(MacroPlugin.Instance.Strings.GetString("Message.MacroExec.MissingAssemblies"));                      }                  }                    foreach (string x in mod.AdditionalAssemblies)                      if (x.Length > 0)                          sc.Add(x);                    CompilerResults result = compiler.CompileAssemblyFromFile(param' mod.Path);                  if (result.Errors.Count > 0) {                      StringBuilder bld = new StringBuilder();                      bld.Append(MacroPlugin.Instance.Strings.GetString("Message.MacroExec.FailedToCompileScript"));                      foreach (CompilerError err in result.Errors) {                          bld.Append(String.Format("Line {0} Column {1} : {2}\n"' err.Line' err.Column' err.ErrorText));                      }                      throw new Exception(bld.ToString());                  }                    Debug.WriteLineIf(DebugOpt.Macro' "Compiled:" + result.PathToAssembly + " FullName:" + result.CompiledAssembly.FullName);                  //AppDomain.CurrentDomain.Load(result.CompiledAssembly.FullName' result.Evidence);                    return result.CompiledAssembly;              }              else                  throw new Exception("Unsupported macro module type " + mod.Type.ToString() + " is specified.");
Magic Number,Poderosa.MacroInternal,MacroUtil,C:\repos\poderosaproject_poderosa\Macro\MacroExec.cs,LoadMacroAssembly,The following statement contains a magic number: if (mod.Type == MacroType.Assembly) {                  return Assembly.LoadFrom(mod.Path);              }              else if (mod.Type == MacroType.JavaScript) {                  JScriptCodeProvider compiler = new JScriptCodeProvider();                  CompilerParameters param = new CompilerParameters();                  param.IncludeDebugInformation = true;                  param.GenerateInMemory = false; //これがプラグインをロードできるかどうかの決め手になった。周辺をすべて理解したわけではないが、とりあえずこれでよしとする。深入りしている時間はあまりないし                  param.GenerateExecutable = true;                    StringCollection sc = param.ReferencedAssemblies;                    bool[] assyAdded = new bool[9];                  foreach (Assembly assy in AppDomain.CurrentDomain.GetAssemblies()) {                      try {                          string assyFilePath = new Uri(assy.CodeBase).LocalPath;                          string assyFileName = Path.GetFileName(assyFilePath).ToLower(CultureInfo.InvariantCulture);                          switch (assyFileName) {                              case "system.drawing.dll":                                  assyAdded[0] = true;                                  break;                              case "system.windows.forms.dll":                                  assyAdded[1] = true;                                  break;                              case "poderosa.plugin.dll":                                  assyAdded[2] = true;                                  break;                              case "poderosa.core.dll":                                  assyAdded[3] = true;                                  break;                              case "granados.dll":                                  assyAdded[4] = true;                                  break;                              case "poderosa.protocols.dll":                                  assyAdded[5] = true;                                  break;                              case "poderosa.terminalemulator.dll":                                  assyAdded[6] = true;                                  break;                              case "poderosa.terminalsession.dll":                                  assyAdded[7] = true;                                  break;                              case "poderosa.macro.dll":                                  assyAdded[8] = true;                                  break;                              case "poderosa.monolithic.exe":                                  // FIXME: it is better to use the name of the entry assembly.                                  //        but how can we know the entry assembly is the monolithic type ?                                  assyAdded[2] =                                  assyAdded[3] =                                  assyAdded[4] =                                  assyAdded[5] =                                  assyAdded[6] =                                  assyAdded[7] =                                  assyAdded[8] = true;                                  break;                              default:                                  continue;                          }                          Debug.WriteLine("(LoadMacroAssembly) add to ReferencedAssemblies: " + assyFilePath);                          sc.Add(assyFilePath);                      }                      catch (Exception) {                      }                  }                    foreach (bool flag in assyAdded) {                      if (!flag) {                          throw new Exception(MacroPlugin.Instance.Strings.GetString("Message.MacroExec.MissingAssemblies"));                      }                  }                    foreach (string x in mod.AdditionalAssemblies)                      if (x.Length > 0)                          sc.Add(x);                    CompilerResults result = compiler.CompileAssemblyFromFile(param' mod.Path);                  if (result.Errors.Count > 0) {                      StringBuilder bld = new StringBuilder();                      bld.Append(MacroPlugin.Instance.Strings.GetString("Message.MacroExec.FailedToCompileScript"));                      foreach (CompilerError err in result.Errors) {                          bld.Append(String.Format("Line {0} Column {1} : {2}\n"' err.Line' err.Column' err.ErrorText));                      }                      throw new Exception(bld.ToString());                  }                    Debug.WriteLineIf(DebugOpt.Macro' "Compiled:" + result.PathToAssembly + " FullName:" + result.CompiledAssembly.FullName);                  //AppDomain.CurrentDomain.Load(result.CompiledAssembly.FullName' result.Evidence);                    return result.CompiledAssembly;              }              else                  throw new Exception("Unsupported macro module type " + mod.Type.ToString() + " is specified.");
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._list.Size = new System.Drawing.Size(408' 280);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._list.Size = new System.Drawing.Size(408' 280);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._titleHeader.Width = 130;
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._pathHeader.Width = 190;
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._runButton.Location = new System.Drawing.Point(416' 8);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._runButton.Location = new System.Drawing.Point(416' 8);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._runButton.Size = new System.Drawing.Size(88' 23);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._runButton.Size = new System.Drawing.Size(88' 23);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._stopButton.Location = new System.Drawing.Point(416' 40);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._stopButton.Location = new System.Drawing.Point(416' 40);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._stopButton.Size = new System.Drawing.Size(88' 23);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._stopButton.Size = new System.Drawing.Size(88' 23);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._stopButton.TabIndex = 2;
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._propButton.Location = new System.Drawing.Point(416' 72);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._propButton.Location = new System.Drawing.Point(416' 72);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._propButton.Size = new System.Drawing.Size(88' 23);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._propButton.Size = new System.Drawing.Size(88' 23);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._propButton.TabIndex = 3;
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._downButton.Location = new System.Drawing.Point(416' 104);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._downButton.Location = new System.Drawing.Point(416' 104);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._downButton.Size = new System.Drawing.Size(40' 23);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._downButton.Size = new System.Drawing.Size(40' 23);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._downButton.TabIndex = 4;
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._upButton.Location = new System.Drawing.Point(464' 104);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._upButton.Location = new System.Drawing.Point(464' 104);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._upButton.Size = new System.Drawing.Size(40' 23);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._upButton.Size = new System.Drawing.Size(40' 23);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._upButton.TabIndex = 5;
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._addButton.Location = new System.Drawing.Point(416' 152);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._addButton.Location = new System.Drawing.Point(416' 152);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._addButton.Size = new System.Drawing.Size(88' 23);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._addButton.Size = new System.Drawing.Size(88' 23);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._addButton.TabIndex = 6;
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._deleteButton.Location = new System.Drawing.Point(416' 184);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._deleteButton.Location = new System.Drawing.Point(416' 184);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._deleteButton.Size = new System.Drawing.Size(88' 23);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._deleteButton.Size = new System.Drawing.Size(88' 23);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._deleteButton.TabIndex = 7;
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._environmentButton.Location = new System.Drawing.Point(416' 216);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._environmentButton.Location = new System.Drawing.Point(416' 216);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._environmentButton.Size = new System.Drawing.Size(88' 23);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._environmentButton.Size = new System.Drawing.Size(88' 23);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._environmentButton.TabIndex = 8;
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Location = new System.Drawing.Point(416' 248);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Location = new System.Drawing.Point(416' 248);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Size = new System.Drawing.Size(88' 23);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Size = new System.Drawing.Size(88' 23);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this._okButton.TabIndex = 9;
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 12);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 12);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(506' 279);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(506' 279);
Magic Number,Poderosa.MacroInternal,MacroList,C:\repos\poderosaproject_poderosa\Macro\MacroList.cs,ShowProp,The following statement contains a magic number: if (dlg.ShowDialog(this) == DialogResult.OK) {                  mm.ReplaceModule(mm.GetModule(index)' dlg.Module);                  ListViewItem li = _list.Items[index];                  li.Text = dlg.Module.Title;                  li.SubItems[1].Text = dlg.Module.Path;                  //li.SubItems[2].Text = UILibUtil.KeyString(dlg.ShortCut);                  li.SubItems[2].Text = GetInfoString(dlg.Module);                    AdjustUI();              }
Magic Number,Poderosa.MacroInternal,MacroManager,C:\repos\poderosaproject_poderosa\Macro\MacroModule.cs,InitSample,The following statement contains a magic number: MacroModule bashrc = new MacroModule(2' b + "bashrc.js"' sr.GetString("Caption.MacroModule.SampleTitleOpenBashrc"));
Magic Number,Poderosa.MacroInternal,MacroTraceWindow,C:\repos\poderosaproject_poderosa\Macro\MacroTrace.cs,MacroTraceWindow,The following statement contains a magic number: int n = _instanceCount % 5;
Magic Number,Poderosa.MacroInternal,MacroTraceWindow,C:\repos\poderosaproject_poderosa\Macro\MacroTrace.cs,InitializeComponent,The following statement contains a magic number: this._textBox.Size = new System.Drawing.Size(352' 237);
Magic Number,Poderosa.MacroInternal,MacroTraceWindow,C:\repos\poderosaproject_poderosa\Macro\MacroTrace.cs,InitializeComponent,The following statement contains a magic number: this._textBox.Size = new System.Drawing.Size(352' 237);
Magic Number,Poderosa.MacroInternal,MacroTraceWindow,C:\repos\poderosaproject_poderosa\Macro\MacroTrace.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 12);
Magic Number,Poderosa.MacroInternal,MacroTraceWindow,C:\repos\poderosaproject_poderosa\Macro\MacroTrace.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 12);
Magic Number,Poderosa.MacroInternal,MacroTraceWindow,C:\repos\poderosaproject_poderosa\Macro\MacroTrace.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(352' 237);
Magic Number,Poderosa.MacroInternal,MacroTraceWindow,C:\repos\poderosaproject_poderosa\Macro\MacroTrace.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(352' 237);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._titleLabel.Location = new System.Drawing.Point(8' 8);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._titleLabel.Location = new System.Drawing.Point(8' 8);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._title.Location = new System.Drawing.Point(120' 8);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._title.Location = new System.Drawing.Point(120' 8);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._title.Size = new System.Drawing.Size(200' 19);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._title.Size = new System.Drawing.Size(200' 19);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._pathLabel.Location = new System.Drawing.Point(8' 32);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._pathLabel.Location = new System.Drawing.Point(8' 32);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._pathLabel.TabIndex = 2;
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._path.Location = new System.Drawing.Point(120' 32);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._path.Location = new System.Drawing.Point(120' 32);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._path.Size = new System.Drawing.Size(181' 19);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._path.Size = new System.Drawing.Size(181' 19);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._path.TabIndex = 3;
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._selectFileButton.Location = new System.Drawing.Point(301' 32);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._selectFileButton.Location = new System.Drawing.Point(301' 32);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._selectFileButton.Size = new System.Drawing.Size(19' 19);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._selectFileButton.Size = new System.Drawing.Size(19' 19);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._selectFileButton.TabIndex = 4;
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._additionalAssemblyLabel.Location = new System.Drawing.Point(8' 56);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._additionalAssemblyLabel.Location = new System.Drawing.Point(8' 56);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._additionalAssemblyLabel.Size = new System.Drawing.Size(100' 32);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._additionalAssemblyLabel.Size = new System.Drawing.Size(100' 32);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._additionalAssemblyLabel.TabIndex = 5;
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._additionalAssembly.Location = new System.Drawing.Point(120' 64);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._additionalAssembly.Location = new System.Drawing.Point(120' 64);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._additionalAssembly.Size = new System.Drawing.Size(200' 19);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._additionalAssembly.Size = new System.Drawing.Size(200' 19);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._additionalAssembly.TabIndex = 6;
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._shortcutLabel.Location = new System.Drawing.Point(8' 88);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._shortcutLabel.Location = new System.Drawing.Point(8' 88);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._shortcutLabel.TabIndex = 7;
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._debugOption.Location = new System.Drawing.Point(8' 112);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._debugOption.Location = new System.Drawing.Point(8' 112);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._debugOption.Size = new System.Drawing.Size(296' 24);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._debugOption.Size = new System.Drawing.Size(296' 24);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._debugOption.TabIndex = 9;
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Location = new System.Drawing.Point(168' 136);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Location = new System.Drawing.Point(168' 136);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._okButton.TabIndex = 10;
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Location = new System.Drawing.Point(248' 136);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Location = new System.Drawing.Point(248' 136);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.TabIndex = 11;
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 12);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 12);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(330' 167);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(330' 167);
Magic Number,Poderosa.MacroInternal,ModuleProperty,C:\repos\poderosaproject_poderosa\Macro\ModuleProperty.cs,OnOK,The following statement contains a magic number: if (!File.Exists(_path.Text)) {                  GUtil.Warning(this' String.Format(sr.GetString("Message.ModuleProperty.FileNotExist")' _path.Text));              }              else if (_title.Text.Length > 30)                  GUtil.Warning(this' sr.GetString("Message.ModuleProperty.TooLongTitle"));              else {                  _module.Title = _title.Text;                  _module.Path = _path.Text;                  _module.DebugMode = _debugOption.Checked;                  _module.AdditionalAssemblies = ParseAdditionalAssemblies(_additionalAssembly.Text);                  this.DialogResult = DialogResult.OK;              }
Magic Number,Poderosa.ConnectionParam,TerminalParam,C:\repos\poderosaproject_poderosa\Macro\TerminalParam.cs,GetHashCode,The following statement contains a magic number: return _encoding.GetHashCode() + _localecho.GetHashCode() * 2 + _transmitnl.GetHashCode() * 3 + _lineFeedRule.GetHashCode() * 4 + _terminalType.GetHashCode() * 5;
Magic Number,Poderosa.ConnectionParam,TerminalParam,C:\repos\poderosaproject_poderosa\Macro\TerminalParam.cs,GetHashCode,The following statement contains a magic number: return _encoding.GetHashCode() + _localecho.GetHashCode() * 2 + _transmitnl.GetHashCode() * 3 + _lineFeedRule.GetHashCode() * 4 + _terminalType.GetHashCode() * 5;
Magic Number,Poderosa.ConnectionParam,TerminalParam,C:\repos\poderosaproject_poderosa\Macro\TerminalParam.cs,GetHashCode,The following statement contains a magic number: return _encoding.GetHashCode() + _localecho.GetHashCode() * 2 + _transmitnl.GetHashCode() * 3 + _lineFeedRule.GetHashCode() * 4 + _terminalType.GetHashCode() * 5;
Magic Number,Poderosa.ConnectionParam,TerminalParam,C:\repos\poderosaproject_poderosa\Macro\TerminalParam.cs,GetHashCode,The following statement contains a magic number: return _encoding.GetHashCode() + _localecho.GetHashCode() * 2 + _transmitnl.GetHashCode() * 3 + _lineFeedRule.GetHashCode() * 4 + _terminalType.GetHashCode() * 5;
Magic Number,Poderosa.ConnectionParam,TCPTerminalParam,C:\repos\poderosaproject_poderosa\Macro\TerminalParam.cs,GetHashCode,The following statement contains a magic number: return base.GetHashCode() + _host.GetHashCode() + _port.GetHashCode() * 2 + _method.GetHashCode() * 3;
Magic Number,Poderosa.ConnectionParam,TCPTerminalParam,C:\repos\poderosaproject_poderosa\Macro\TerminalParam.cs,GetHashCode,The following statement contains a magic number: return base.GetHashCode() + _host.GetHashCode() + _port.GetHashCode() * 2 + _method.GetHashCode() * 3;
Magic Number,Poderosa.ConnectionParam,TelnetTerminalParam,C:\repos\poderosaproject_poderosa\Macro\TerminalParam.cs,TelnetTerminalParam,The following statement contains a magic number: _port = 23;
Magic Number,Poderosa.ConnectionParam,SSHTerminalParam,C:\repos\poderosaproject_poderosa\Macro\TerminalParam.cs,SSHTerminalParam,The following statement contains a magic number: _port = 22;
Magic Number,Poderosa.ConnectionParam,SSHTerminalParam,C:\repos\poderosaproject_poderosa\Macro\TerminalParam.cs,SSHTerminalParam,The following statement contains a magic number: _port = 22;
Magic Number,Poderosa.ConnectionParam,SSHTerminalParam,C:\repos\poderosaproject_poderosa\Macro\TerminalParam.cs,GetHashCode,The following statement contains a magic number: return base.GetHashCode() + _account.GetHashCode() + _auth.GetHashCode() * 2;
Magic Number,Poderosa.ConnectionParam,CygwinTerminalParam,C:\repos\poderosaproject_poderosa\Macro\TerminalParam.cs,GetHashCode,The following statement contains a magic number: return base.GetHashCode() + _home.GetHashCode() * 3 + _shell.GetHashCode() * 7;
Magic Number,Poderosa.ConnectionParam,CygwinTerminalParam,C:\repos\poderosaproject_poderosa\Macro\TerminalParam.cs,GetHashCode,The following statement contains a magic number: return base.GetHashCode() + _home.GetHashCode() * 3 + _shell.GetHashCode() * 7;
